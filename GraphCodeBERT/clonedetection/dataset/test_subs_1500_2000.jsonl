{"id1": "9261777", "id2": "11562165", "code1": "    public static void main(String[] args) {\n        String source, destination;\n        if (args[0].toLowerCase().endsWith(\".gz\")) {\n            source = args[0];\n            destination = source.substring(0, source.length() - 3);\n        } else {\n            source = args[0] + \".gz\";\n            destination = args[0];\n        }\n        InputStream is = null;\n        OutputStream os = null;\n        try {\n            is = new GZIPInputStream(new FileInputStream(source));\n            os = new FileOutputStream(destination);\n            byte[] buffer = new byte[8192];\n            for (int length; (length = is.read(buffer)) != -1; ) os.write(buffer, 0, length);\n        } catch (IOException e) {\n            System.err.println(\"Fehler: Kann nicht entpacken \" + args[0]);\n        } finally {\n            if (os != null) try {\n                os.close();\n            } catch (IOException e) {\n            }\n            if (is != null) try {\n                is.close();\n            } catch (IOException e) {\n            }\n        }\n    }\n", "code2": "    private void streamContains(String in, InputStream stream) throws IOException {\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        IOUtils.copy(stream, baos);\n        byte[] bytes = baos.toByteArray();\n        String cmp = new String(bytes, \"UTF-8\");\n        assertTrue(cmp.contains(in));\n        baos.close();\n    }\n", "label": 1, "substitutes": {"source": ["text", "where", "search", "path", "sample", "subject", "address", "string", "file", "sequence", "site", "str", "back", "parent", "ce", "resource", "src", "store", "clip", "component", "char", "start", "context", "SOURCE", "service", "from", "target", "copy", "filename", "style", "content", "index", "view", "query", "ource", "scope", "check", "status", "title", "volume", "language", "uri", "base", "reason", "config", "expression", "prefix", "size", "Source", "form", "table", "lower", "sql", "init", "input", "tree", "template", "spec", "details", "use", "script", "info", "ui", "body", "origin", "se"], "destination": ["portine", " destinate", "testination", "testinate", "distinator", "combinator", "declacement", "origend", "destinator", "tempinator", "destine", " destend", "distinant", "goodinate", "certinate", "portend", "portination", "destino", "goodinator", "declination", "origine", "destinant", "combinations", "certacement", "certination", "testino", "tempino", "distination", " destino", "destacement", "goodacement", " destine", " destinator", "portinator", "origination", "declinate", "combinant", "certinator", "destinate", "tempination", "declinator", "declinant", "tempinate", "declinations", "goodination", "distinations", "destend", "combination", "testinator", "destinations", "originator"], "is": ["js", "iss", "ic", "vs", "isl", "abs", "ics", "isa", "was", "sis", "in", "ist", "mis", "ais", "ri", "iris", "si", "bits", "ts", "vis", "i", "ios", "has", "are", "obs", "ims", "ib", "bis", "es", "dis", "ns", "ps", "iter", "IS", "ms", "s", "bs", "lis", "oss", "init", "its", "mus", "ois", "icks", "isin", "ie", "ris", "ains", "sys", "im", "isf", "tis", "Is", "nis", "ir", "ip", "us", "ins", "info", "isi", "isc", "zes", "ires", "iso", "webkit"], "os": ["ks", "cos", "oses", "bos", "oos", "oes", "uts", "ost", "ose", "io", "ot", "ox", "mot", "OS", "aos", "mos", "ts", "ols", "ios", "obs", "bis", "on", "fs", "ns", "o", "es", "dis", "\u00f3", "ms", "osi", "bs", "los", "oss", "oS", "s", "ops", "ones", "asis", "mes", "zero", "sys", "or", "Os", "dos", "pos", "ob", "css", "outs", "ss", "oa", "ys"], "buffer": ["background", "sample", "batch", "binary", "sequence", "variable", "append", "queue", "bar", "history", "event", "row", "stack", "phrase", "total", "button", "view", "word", "library", "block", "mem", "padding", "table", "message", "buff", "paste", "database", "frame", "template", "document", "comment", "memory", "shape", "pad", "window", "cache", "available", "buf", "Buffer", "temp", "display", "command"], "length": ["text", "display", "path", "tail", "number", "Length", "string", "height", "sequence", "ence", "angle", "before", "point", "component", "count", "start", "position", "ength", "history", "needed", "enth", "span", "total", "family", "ENGTH", "len", "ith", "time", "frequency", "duration", "bus", "volume", "partial", "split", "loop", "padding", "end", "th", "database", " Length", "capacity", "ind", "offset", "width", "bow", "load", "reading", "distance", "shape", "pad", "hello", "of", "l", "ty", "character", "stop", "type", "full", "last", "integer", "ment", "collection", "size"]}}
{"id1": "11952735", "id2": "3767903", "code1": "    public static boolean copyFile(String sourceName, String destName) {\n        FileChannel sourceChannel = null;\n        FileChannel destChannel = null;\n        boolean wasOk = false;\n        try {\n            sourceChannel = new FileInputStream(sourceName).getChannel();\n            destChannel = new FileOutputStream(destName).getChannel();\n            destChannel.transferFrom(sourceChannel, 0, sourceChannel.size());\n            wasOk = true;\n        } catch (Throwable exception) {\n            logger.log(Level.SEVERE, \"Exception in copyFile\", exception);\n        } finally {\n            try {\n                if (sourceChannel != null) sourceChannel.close();\n            } catch (Throwable tt) {\n            }\n            try {\n                if (destChannel != null) destChannel.close();\n            } catch (Throwable tt) {\n            }\n        }\n        return wasOk;\n    }\n", "code2": "    public static void copy(File source, File destination) throws FileNotFoundException, IOException {\n        if (source == null) throw new NullPointerException(\"The source may not be null.\");\n        if (destination == null) throw new NullPointerException(\"The destination may not be null.\");\n        FileInputStream sourceStream = new FileInputStream(source);\n        destination.getParentFile().mkdirs();\n        FileOutputStream destStream = new FileOutputStream(destination);\n        try {\n            FileChannel sourceChannel = sourceStream.getChannel();\n            FileChannel destChannel = destStream.getChannel();\n            destChannel.transferFrom(sourceChannel, 0, sourceChannel.size());\n        } finally {\n            try {\n                sourceStream.close();\n                destStream.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n", "label": 1, "substitutes": {"copyFile": ["copyfile", "clonefile", "copyStream", "movefile", "moveStream", "cloneDirectory", "CopyDirectory", "cloneFile", "CopyFile", "cloneStream", "moveDirectory", "Copyfile", "copyDirectory", "moveFile", "CopyStream"], "sourceName": ["SourceSource", "fromPath", "sourceKey", "srcPath", "fromWar", "sourcePath", "SourcePath", "startName", "startPath", "srcKey", "srcDir", "SourceDir", "fromName", "altPath", "srcName", "altWar", "altName", "SourceName", "startSource", "srcWar", "sourceSource", "fromKey", "sourceWar", "srcSource", "altKey", "sourceDir", "startDir"], "destName": ["goodName", "destPath", "targetNames", "destYear", "destNames", "Destname", " destname", "DestName", "delName", "DestFile", " destFile", "srcKey", "srcYear", "srcNames", "goodKey", "destKey", "srcName", "targetKey", "goodNames", "delPath", "targetName", " destPath", "targetYear", "DestPath", "delFile", "destFile", "destname", "goodYear", "delname"], "sourceChannel": ["ourceChannel", "ourceConsumer", "srcchannel", "specConnection", " sourceCh", "sampleConsumer", "specChan", "sourceBuffer", "sourceChuck", "sourceChan", " sourceContext", "srcCh", "seStream", "storePanel", "sampleChannel", "serviceChan", "sourceCh", " sourceConsumer", "sourceStream", "initChannel", "sourceContext", "seChannel", "srcStream", "sampleSection", "initPanel", "ourceBuffer", "ourceSection", " sourceListener", "ourceChuck", "srcChan", "ourceConnection", "srcPanel", "srcContext", "initContext", "seChan", "sourceConnection", "slaveChannel", "slaveChan", " sourceChan", "seListener", "specChannel", "serviceChuck", "slaveConnection", "ourceChan", "initCh", "sampleChan", "serviceConnection", " sourcechannel", "slaveChuck", "sourceSection", "sourceConsumer", "srcChannel", " sourceBuffer", "srcListener", " sourceSection", "sourcechannel", "storeConnection", "srcConnection", "storeChan", " sourceStream", "sourcePanel", " sourcePanel", "srcBuffer", "serviceChannel", "sourceListener", "specPanel", "storeChannel", "ourcechannel"], "destChannel": ["descChannel", "destChan", " destStream", "destStream", "destConnection", " destManager", "seqModule", "goodGate", "DestStream", "goodChannel", "DestManager", "srcManager", "DestEntry", "sourceChan", "srcCh", "destManager", "masterChannel", "DestChannel", "sourceCh", "seqGate", "destCh", "seqChannel", "destEntry", "descGate", "goodButton", "masterStream", "srcChan", "destButton", "seqButton", "masterChan", "DestConnection", "sourceConnection", " destCow", "goodModule", " destEntry", "DestCh", "destGate", "DestCow", "distChannel", "srcChannel", "masterCow", " destCh", "DestChan", "descButton", "distEntry", "destCow", "distChan", " destConnection", "descModule", "distStream", "destModule", " destChan"], "wasOk": ["wasok", " wereKo", " becamePy", " wasPy", "wasObj", "openedok", "wasKo", " wasKo", "wereObj", "WasOK", "wereOk", "wereOK", "openedOK", "openedOk", " becameOk", "WasObj", " wasok", "wasOK", " becameKo", "wasYes", "wereok", "WasOk", " wereOk", "WasYes", " wasYes", " wasOK", " wasObj", "wasPy", "wereYes", " werePy"]}}
{"id1": "838844", "id2": "7499186", "code1": "    public void convert(File src, File dest) throws IOException {\n        InputStream in = new BufferedInputStream(new FileInputStream(src));\n        DcmParser p = pfact.newDcmParser(in);\n        Dataset ds = fact.newDataset();\n        p.setDcmHandler(ds.getDcmHandler());\n        try {\n            FileFormat format = p.detectFileFormat();\n            if (format != FileFormat.ACRNEMA_STREAM) {\n                System.out.println(\"\\n\" + src + \": not an ACRNEMA stream!\");\n                return;\n            }\n            p.parseDcmFile(format, Tags.PixelData);\n            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n                System.out.println(\"\\n\" + src + \": contains UIDs!\" + \" => probable already DICOM - do not convert\");\n                return;\n            }\n            boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n            int pxlen = p.getReadLength();\n            if (hasPixelData) {\n                if (inflate) {\n                    ds.putUS(Tags.BitsAllocated, 16);\n                    pxlen = pxlen * 4 / 3;\n                }\n                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n                    System.out.println(\"\\n\" + src + \": mismatch pixel data length!\" + \" => do not convert\");\n                    return;\n                }\n            }\n            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n            ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n            ds.putUI(Tags.SOPClassUID, classUID);\n            if (!ds.contains(Tags.NumberOfSamples)) {\n                ds.putUS(Tags.NumberOfSamples, 1);\n            }\n            if (!ds.contains(Tags.PhotometricInterpretation)) {\n                ds.putCS(Tags.PhotometricInterpretation, \"MONOCHROME2\");\n            }\n            if (fmi) {\n                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n            }\n            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n            try {\n            } finally {\n                ds.writeFile(out, encodeParam());\n                if (hasPixelData) {\n                    if (!skipGroupLen) {\n                        out.write(PXDATA_GROUPLEN);\n                        int grlen = pxlen + 8;\n                        out.write((byte) grlen);\n                        out.write((byte) (grlen >> 8));\n                        out.write((byte) (grlen >> 16));\n                        out.write((byte) (grlen >> 24));\n                    }\n                    out.write(PXDATA_TAG);\n                    out.write((byte) pxlen);\n                    out.write((byte) (pxlen >> 8));\n                    out.write((byte) (pxlen >> 16));\n                    out.write((byte) (pxlen >> 24));\n                }\n                if (inflate) {\n                    int b2, b3;\n                    for (; pxlen > 0; pxlen -= 3) {\n                        out.write(in.read());\n                        b2 = in.read();\n                        b3 = in.read();\n                        out.write(b2 & 0x0f);\n                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n                        out.write(b3 >> 4);\n                    }\n                } else {\n                    for (; pxlen > 0; --pxlen) {\n                        out.write(in.read());\n                    }\n                }\n                out.close();\n            }\n            System.out.print('.');\n        } finally {\n            in.close();\n        }\n    }\n", "code2": "    private void bootKernel(String conf) {\n        try {\n            AssetManager am = getResources().getAssets();\n            InputStream is = am.open(conf + \".conf\");\n            Properties props = new Properties();\n            props.load(is);\n            is.close();\n            Log.d(\"bootKernel\", \"Listing sdcard assets...\");\n            String[] sdcardfiles = am.list(\"sdcard\");\n            for (String file : sdcardfiles) {\n                Log.d(\"bootKernel\", \"Copying sdcard asset \" + file + \".\");\n                AssetFileDescriptor afd = am.openFd(\"sdcard/\" + file);\n                FileInputStream fis = afd.createInputStream();\n                FileChannel fic = fis.getChannel();\n                FileOutputStream fos = new FileOutputStream(\"/sdcard/\" + file);\n                FileChannel foc = fos.getChannel();\n                fic.transferTo(0, fic.size(), foc);\n                fic.close();\n                foc.close();\n            }\n            Configuration gconf = new JavaPropertiesConfiguration(props);\n            Configuration bconf = gconf.subset(\"boot\");\n            String kclass_name = bconf.getString(\"kernel\");\n            Log.d(\"bootKernel\", \"Attempting to load kernel from class '\" + kclass_name + \"'...\");\n            Class<? extends Kernel> kclass = Class.forName(kclass_name).asSubclass(Kernel.class);\n            Kernel kernel = kclass.newInstance();\n            Log.d(\"bootKernel\", \"Kernel loaded, proceeding with boot...\");\n            BootContext bctx = new SimpleBootContext(gconf, AndroidBridgeService.class, AndroidBridgeServiceImpl.class);\n            kernel.boot(bctx).get();\n            Log.d(\"bootKernel\", \"Kernel boot complete.\");\n        } catch (Exception e) {\n            Log.e(\"bootKernel\", \"Unable to boot kernel due to exception.\", e);\n            finish();\n        }\n    }\n", "label": 1, "substitutes": {"convert": ["CONversion", "compvert", "CONverting", "consverting", "Converted", "Converts", "consversion", "confer", "unprocess", "conversion", "unvert", "consvert", "unverted", "compverts", "CONVERT", "unfer", "Conversion", "Convert", "unversion", "CONverted", "unverts", "Converting", "CONfer", "ConVERT", "conprocess", "converting", "converts", "CONvert", "Conprocess", "conVERT", "consVERT", "Confer", "compprocess", "compversion", "converted"], "src": ["sr", "path", "sq", "cur", "scan", "file", "txt", "str", "sin", "orig", "rx", "st", "start", "SOURCE", "from", "filename", "url", "rs", "href", "RC", "ource", "img", "host", "cc", "buster", "sit", "uri", "rel", "config", "sc", "Source", "s", "loc", "ipl", "attr", "ur", "its", "req", "usr", "input", "upload", "scene", "hl", "http", "sys", "dist", "source", "SourceFile", "cont", "addr", "rest", "func", "rc", "ser", "ins", "pkg", "inst", "ebin", "stream", "iv"], "dest": ["foreign", "dir", "dat", " Destination", "txt", " orig", "orig", "disk", "test", "Dest", "target", "tif", "write", " destinations", "port", "img", "table", "result", "est", " Dest", " dst", " destination", "gin", "dist", "rest", "source", "temp", "mat"], "in": ["d", "serv", "file", "en", "io", "b", "is", "inf", "st", "up", "cin", "from", "reader", "r", "IN", "i", "inner", "ad", "res", "m", "ar", "as", "din", "isin", "input", "ind", "source", "In", "el", "ins", "rin", "l", "bin", "sql", "stream", "inn"], "p": ["d", "ping", "op", "pb", "P", "pt", "tp", "lp", "pd", "py", "pro", "h", "post", "vp", "part", "b", "prot", "per", "t", "dp", "j", "pg", "at", "cp", "r", "c", "i", "pl", "pi", "wp", "ph", "m", "pre", "f", "ps", "pm", "pers", "pe", "sp", "er", "parse", "fp", "parser", "ap", "pa", "pp", "rep", "pkg", "l", "it", "g", "php", "pc", "jp"], "ds": ["tp", "des", "lists", "gs", "rs", "dates", "ns", "nas", "ps", "ports", "dd", "db", "yes", "amps", "sets", "ks", "mys", "vs", "ats", "obs", "ils", "s", "bs", "hd", " des", " DS", "Ds", "drivers", "iffs", "dos", "outs", "qs", "tests", "d", "js", "aws", "eds", "pd", "points", "dds", "terms", "eps", "ws", "xs", "tes", "dl", "workers", "sd", "dt", " d", "edes", "posts", "loads", "scripts", "ras", "df", "els", "ss", "gd", "di", "dp", "ls", "hs", "cks", "ts", "uds", "DS", "cs", " dd", "ads", "its", " ads", "tags", "ands", "ags", "sts", "dh", " os", "ods", "docs", "os", "ys"], "format": ["settings", "path", "module", "filter", "fc", "at", "file", "mt", "ats", "tag", "id", "lat", "mode", "t", "sche", "feat", "style", "output", "act", "pattern", "pi", " Format", "status", "title", "f", "cf", "Format", "form", "ct", "feature", "table", "set", "parse", "name", "template", "pretty", "spec", "MAT", "source", "top", "fm", "shape", "version", "l", "it", "layout", "unit", "type", "policy", "mat", "size"], "hasPixelData": ["haspixelDATA", " hasPixeldata", "haspixeldata", "haspixelData", "Haspixeldata", "hasFramedata", "hasFrameDATA", "hasixeldata", "HaspixelData", "hasPixeldata", "hasixelData", "HasPixelDATA", "hasixelDATA", " hasPixelDATA", "hasFrameData", "HasPixelData", "HaspixelDATA", "hasPixelDATA", "HasPixeldata"], "inflate": ["inflATE", " invalidATE", "inFLate", "infolat", "incelATE", "informate", "inflicate", "Informate", "inFlicate", " inflATE", "inFlATE", "inFLocate", "inFlocate", "Informated", "informocate", "incelicate", "invalidocate", "infolate", "inflat", "Inflate", "inFlate", "invalidate", " invalidicate", "Inflat", " invalidate", " inflocate", "incelate", "incelocate", " invalidocate", " inflicate", "infolocate", "inFLat", "Informat", "informated", "Inflated", "informat", "inFLated", "invalidicate", "infolated", "inflated", "invalidATE", "Inflocate", "Informocate", "inflocate"], "pxlen": ["xylin", "mmlength", "pxlength", "cpden", "xplength", "pixellen", "cplen", "pexls", "pexden", "tmplength", "packlength", "mmlen", "mxlen", "cplength", "mmln", "pixelfun", "tmplin", "pexlen", "phpdec", "tmplen", "pixellength", "tmpln", "mxdec", "mmlin", "cpln", "pxls", "xyln", "mxlength", "packlen", "xpln", "pxden", "pxdec", "phpln", "mxln", "pexlength", "pxlin", "xpden", "packls", "xplen", "xylen", "packln", "pixells", "pexfun", "pxln", "packdec", "phplen", "packfun", "xylength", "phplength", "pexln", "pxfun"], "out": ["ln", "err", "log", "dir", "io", "crit", "store", "print", "obj", "up", "aos", "msg", "output", "inv", "ex", "res", "inter", "outer", "prefix", "net", "screen", "conn", "init", "user", "cfg", "writer", "gr", "client", "pretty", "name", "sys", "OUT", "group", "list", "Out", "sum", "gov", "cmd", "ou", "outs", "temp"]}}
{"id1": "338852", "id2": "16623181", "code1": "    public static void sort(float norm_abst[]) {\n        float temp;\n        for (int i = 0; i < 7; i++) {\n            for (int j = 0; j < 7; j++) {\n                if (norm_abst[j] > norm_abst[j + 1]) {\n                    temp = norm_abst[j];\n                    norm_abst[j] = norm_abst[j + 1];\n                    norm_abst[j + 1] = temp;\n                }\n            }\n        }\n        printFixed(norm_abst[0]);\n        print(\" \");\n        printFixed(norm_abst[1]);\n        print(\" \");\n        printFixed(norm_abst[2]);\n        print(\" \");\n        printFixed(norm_abst[3]);\n        print(\" \");\n        printFixed(norm_abst[4]);\n        print(\" \");\n        printFixed(norm_abst[5]);\n        print(\" \");\n        printFixed(norm_abst[6]);\n        print(\" \");\n        printFixed(norm_abst[7]);\n        print(\"\\n\");\n    }\n", "code2": "    public static void main(String[] args) {\n        File srcDir = new File(args[0]);\n        File dstDir = new File(args[1]);\n        File[] srcFiles = srcDir.listFiles();\n        for (File f : srcFiles) {\n            if (f.isDirectory()) continue;\n            try {\n                FileChannel srcChannel = new FileInputStream(f).getChannel();\n                FileChannel dstChannel = new FileOutputStream(dstDir.getAbsolutePath() + System.getProperty(\"file.separator\") + f.getName()).getChannel();\n                ByteBuffer buffer = ByteBuffer.allocate(1024);\n                int nr = 0;\n                srcChannel.position(nr);\n                nr += srcChannel.read(buffer);\n                while (nr < f.length()) {\n                    buffer.flip();\n                    dstChannel.write(buffer);\n                    buffer.clear();\n                    nr += srcChannel.read(buffer);\n                }\n                srcChannel.close();\n                dstChannel.close();\n            } catch (IOException e) {\n            }\n        }\n    }\n", "label": 0, "substitutes": {"sort": ["cmp", " shuffle", " compare", "reverse", "replace", "process", "test", "fun", "update", "position", "printf", "ort", "run", "rank", "stat", "rint", "Sort", "round", "format", "init", "min", "println", "func", "list", " sorted", "order", " Sort", "display"], "norm_abst": ["norm_pubst", "norm_ubld", "norm___absts", "norm_abdr", "norm_absct", "norm_avste", "norm_afbl", "norm___obst", "norm_rabST", "norm_afsty", "norm_abbl", "norm_absnt", "norm_abstr", "norm_habrest", "norm_obbr", "norm_ubist", "norm_abbstream", "norm_ubbr", "norm___abbr", "norm___apdr", "norm_abscr", "norm_absnd", "norm_abssts", "norm_labst", "norm_ebsty", "norm_avbr", "norm_rabck", "norm_obbl", "norm_acstr", "norm___afstr", "norm_ebstall", "norm_afct", "norm___obsts", "norm______abbstr", "norm_abrest", "norm___afbr", "norm_appist", "norm_avnt", "norm_rabbl", "norm______abstr", "norm___abstr", "norm_rabcr", "norm_absck", "norm_pubsts", "norm_labste", "norm_habst", "norm_acsts", "norm_absist", "norm_acst", "norm_abbr", "norm_avdr", "norm___apbr", "norm_apsts", "norm_obct", "norm______abstream", "norm_appst", "norm_labist", "norm_apst", "norm_ubstall", "norm_absrest", "norm_apbr", "norm_obsts", "norm_afcr", "norm_appstall", "norm_ubct", "norm_obST", "norm_abcr", "norm_abist", "norm_appsty", "norm_absste", "norm_absst", "norm_absty", "norm_habstr", "norm_abste", "norm_afnd", "norm_edct", "norm_afbr", "norm_ubsty", "norm_afST", "norm_apist", "norm_pubdr", "norm_pubbr", "norm_absld", "norm_apdr", "norm_apste", "norm___apsts", "norm_ubst", "norm_obsty", "norm_avsts", "norm_rabct", "norm_absstream", "norm_obld", "norm___apst", "norm______abbst", "norm_avst", "norm___abdr", "norm_abnd", "norm_absts", "norm_ebst", "norm_afnt", "norm_abST", "norm_edst", "norm_abstall", "norm_edsts", "norm______abst", "norm_avstr", "norm_rabnd", "norm_rabst", "norm_ubstr", "norm_obist", "norm_afstr", "norm_absstr", "norm_absbr", "norm_obstr", "norm_obstream", "norm_abnt", "norm_abbst", "norm_abbstr", "norm_labck", "norm_abck", "norm_labct", "norm___afst", "norm_ubrest", "norm_afst", "norm_abstream", "norm_abct", "norm___abnt", "norm______abbstream", "norm_ubste", "norm_afist", "norm_abld", "norm___obstr", "norm___abst", "norm_obst", "norm___afnt", "norm_ebist"], "temp": ["fake", "mint", "late", "v", "pt", "ret", "unt", "p", "dat", "txt", "term", "cum", "variable", "perature", "orig", "print", "cu", "mod", "test", "po", "t", "tem", "ptr", "total", "current", "deg", "cp", "Temperature", "Temp", "tf", "pre", "f", "base", "prime", "iter", " temperature", "buffer", "tmp", "cap", "tim", "alt", "mp", "tr", "tc", "unit", "emp", "partial", " tmp"], "i": ["ti", "ji", "v", "zi", "iq", "ic", "ret", "li", "gi", "io", "id", "is", "di", "ii", "ri", "mi", "si", "index", "ini", "iu", "pi", "wi", "jo", "ci", "ims", "ar", "init", "xi", "ie", "ind", " ii", "ij", "x", "me", "im", "qi", "ai", "ix", "ip", "it", "g", "bi", "ui", "us", "hi", "ir", "ami", "ia"], "j": ["d", "err", "js", "ji", "v", " dj", "h", "jj", "dj", "aj", "str", "b", "J", "k", "obj", "e", "z", "ion", "jet", "ja", "adj", "kh", "other", "kid", "ng", "kj", "jo", "m", "jas", "on", "ge", "je", "o", "oj", "job", "br", "note", "jump", "s", "bs", "er", "get", "q", "sp", "og", "user", "xy", "jit", "exp", "last", "jc", "jac", "ij", "pr", "uj", "jl", "tr", "json", "g", "it", "bj", "ijk", "fr", "next", "prop", "off", "y", "jp"]}}
{"id1": "20247400", "id2": "11562165", "code1": "    public static void main(String[] args) throws Exception {\n        if (args.length != 2) {\n            System.out.println(\"arguments: sourcefile destfile\");\n            System.exit(1);\n        }\n        FileChannel in = new FileInputStream(args[0]).getChannel(), out = new FileOutputStream(args[1]).getChannel();\n        ByteBuffer buffer = ByteBuffer.allocate(BSIZE);\n        while (in.read(buffer) != -1) {\n            buffer.flip();\n            out.write(buffer);\n            buffer.clear();\n        }\n    }\n", "code2": "    private void streamContains(String in, InputStream stream) throws IOException {\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        IOUtils.copy(stream, baos);\n        byte[] bytes = baos.toByteArray();\n        String cmp = new String(bytes, \"UTF-8\");\n        assertTrue(cmp.contains(in));\n        baos.close();\n    }\n", "label": 1, "substitutes": {"in": ["file", "io", "is", "inf", "up", "cin", "from", "IN", "inc", "i", "check", "inner", "ze", " din", "on", "net", "din", "init", "input", "isin", "ind", "gin", "In", "source", "and", "ai", "ins", "rin", "it", "info", "bin", "con", "inn"], "out": ["ln", "err", "at", "log", "dir", "OU", "str", "io", "print", "b", "t", "obj", "ot", "msg", "output", "we", "other", "r", "null", "n", "ex", "to", "check", "write", "auto", "gt", "outer", "o", "screen", "net", "oss", "writer", "exit", "name", "println", "client", "line", "sys", "con", "OUT", "report", "or", "Out", "list", "ins", "it", "cmd", "ou", "outs", "ne", "os", "w"], "buffer": ["address", "sample", "match", "function", "batch", "filter", "binary", "sequence", "variable", "append", "queue", "bar", "pause", "channel", "b", "length", "component", "processor", "event", "bridge", "history", "position", "stack", "phrase", "total", "limit", "output", "attribute", "flush", "view", "index", "library", "block", "clear", "iter", "trace", "size", "table", "result", "buff", "message", "command", "database", "db", "document", "template", "comment", "data", "source", "memory", "key", "header", "shape", "window", "cache", "available", "buf", "Buffer", "temp", "display", "se"]}}
{"id1": "16621499", "id2": "14390569", "code1": "    public static byte[] loadURLToBuffer(URL url) throws IOException {\n        byte[] buf = new byte[4096];\n        byte[] data = null;\n        byte[] temp = null;\n        int iCount = 0;\n        int iTotal = 0;\n        BufferedInputStream in = new BufferedInputStream(url.openStream(), 20480);\n        while ((iCount = in.read(buf, 0, buf.length)) != -1) {\n            if (iTotal == 0) {\n                data = new byte[iCount];\n                System.arraycopy(buf, 0, data, 0, iCount);\n                iTotal = iCount;\n            } else {\n                temp = new byte[iCount + iTotal];\n                System.arraycopy(data, 0, temp, 0, iTotal);\n                System.arraycopy(buf, 0, temp, iTotal, iCount);\n                data = temp;\n                iTotal = iTotal + iCount;\n            }\n        }\n        in.close();\n        return data;\n    }\n", "code2": "    private DialogHelper(String title, final URL imageURL) {\n        jd = new JDialog();\n        jd.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);\n        jd.setAlwaysOnTop(true);\n        jd.setLayout(new BoxLayout(jd.getContentPane(), BoxLayout.Y_AXIS));\n        jd.setTitle(title);\n        JLabel jl = new JLabel();\n        ImageIcon icon = new ImageIcon(imageURL);\n        jl.setIcon(icon);\n        jd.add(new JScrollPane(jl));\n        final JFileChooser chooser = getSaveImageChooser();\n        JPanel jp = new JPanel();\n        JButton jb = new JButton(getMessage(\"btn_save_as\"));\n        jb.addActionListener(new ActionListener() {\n\n            public void actionPerformed(ActionEvent e) {\n                int returnVal = chooser.showSaveDialog(jd);\n                if (returnVal == JFileChooser.APPROVE_OPTION) {\n                    File file = chooser.getSelectedFile();\n                    String fileName = file.getPath();\n                    String ext = StringUtil.getLowerExtension(fileName);\n                    if (!\"png\".equals(ext)) {\n                        fileName += \".png\";\n                        file = new File(fileName);\n                    }\n                    boolean doIt = true;\n                    if (file.exists()) {\n                        int i = JOptionPane.showConfirmDialog(jd, getMessage(\"warn_file_exist\"));\n                        if (i != JOptionPane.YES_OPTION) doIt = false;\n                    } else if (!file.getParentFile().exists()) {\n                        doIt = file.getParentFile().mkdirs();\n                    }\n                    if (doIt) {\n                        FileChannel src = null;\n                        FileChannel dest = null;\n                        try {\n                            src = new FileInputStream(imageURL.getPath()).getChannel();\n                            dest = new FileOutputStream(fileName).getChannel();\n                            src.transferTo(0, src.size(), dest);\n                        } catch (FileNotFoundException e1) {\n                            warn(jd, getMessage(\"err_no_source_file\"));\n                        } catch (IOException e2) {\n                            warn(jd, getMessage(\"err_output_target\"));\n                        } finally {\n                            try {\n                                if (src != null) src.close();\n                            } catch (IOException e1) {\n                            }\n                            try {\n                                if (dest != null) dest.close();\n                            } catch (IOException e1) {\n                            }\n                            src = null;\n                            dest = null;\n                        }\n                    }\n                }\n            }\n        });\n        jp.add(jb);\n        jb = new JButton(getMessage(\"btn_close\"));\n        jb.addActionListener(new ActionListener() {\n\n            public void actionPerformed(ActionEvent e) {\n                jd.dispose();\n            }\n        });\n        jp.add(jb);\n        jd.add(jp);\n        jd.pack();\n        setCentral(jd);\n    }\n", "label": 0, "substitutes": {"loadURLToBuffer": ["loadUrlToBuffer", "loadUrlToBytes", "loadURL2Buffer", "loadURL2Buff", "loadURLtoBytes", "loadURLtoBuff", "loadURLtoBuffer", "loadUrl2Buff", "loadURLToBytes", "loadURL2Bytes", "loadUrl2Buffer", "loadUrlToBuff", "loadUrl2Bytes", "loadURLToBuff"], "url": ["sl", "gl", "address", "log", "file", "Url", "str", "nl", "mail", "b", "char", "browser", "loader", "ls", "open", "r", "dl", "ll", "pl", "ssl", "link", "location", "html", "uri", "base", "URL", "job", "web", "page", "ur", "cert", "name", "bel", "http", "el", "l", "xml", "ul"], "buf": ["cv", "bytes", "batch", "log", "bag", "dat", "txt", "str", "queue", "bar", "cat", "nb", "b", "bu", "bt", "conv", "nt", "arr", "rb", "msg", "font", "axe", "ctx", "bo", "bl", "mu", "box", "vec", "img", "bh", "fb", "br", "seq", "buffer", "desc", "capt", "buff", "bs", "tmp", "cap", "mus", "db", "BU", "Buff", "bn", "cb", "bp", "tr", "pkg", "uf", "cmd", "tx", "Buffer", "bc", "div"], "data": ["dec", "bytes", "results", "ata", "part", "map", "msg", "output", "content", "good", "all", "name", "list", "json", "bin", "this", "ret", "p", "txt", "arr", "total", "a", "bus", "rel", "set", "out", "raw", "tmp", "action", "zero", "image", "next", "partial", "item", "batch", "missing", "str", "obj", "bo", "null", "to", "res", "def", " DATA", "buffer", "message", "buff", "result", "value", "default", "cache", "it", "type", "size", "text", "dat", "step", "only", "length", "di", "count", "nt", "no", "mu", "initial", "br", "table", "format", "done", "DATA", "info", "div"], "temp": ["fake", "tar", "v", "pt", "dat", "unt", "ret", "term", "txt", "variable", "mod", "test", "t", "tem", "dest", "font", "ptr", "current", "copy", "mont", "deg", "met", "rem", "nom", "null", "Temp", "mem", "vol", " Temp", "EMP", "pre", "tm", "buffer", "result", "buff", "ta", "tmp", "mm", "template", "tim", "util", "alt", "mp", "em", "tr", "pos", "cache", "tc", "porary", "unit", "tt", "emp", "div", "partial"], "iCount": ["iuCP", "biCode", "giCounter", "iniMark", "ciCounter", "aiTotal", "iCheck", " iLength", "liTotal", "diCount", "jcount", "aiCount", "uiCount", "liCounter", "piCount", "iriProcess", "piCounter", "phiLength", "phiCount", " iCounter", " iCheck", "giCode", "aiCounter", "icount", "intCount", "ciCount", "iniLength", "iriCount", "iiTotal", "ciTotal", "ciCP", "biTotal", "piTotal", "giCheck", "aicount", "uiCounter", "jCount", "iCP", "iiNow", "iuCounter", "diTotal", "giTotal", "iCode", "intCategory", "liCall", "iniCount", "intProcess", "iiProcess", "giLength", "dicount", "iCategory", "aiLength", "iriCategory", " icount", "iiCounter", "uiCall", "uiTotal", "piLength", "iiCount", " iCode", "iuCount", "liCount", "jLength", "iiCategory", "piCP", "biCount", "iNumber", "intNow", "phiMark", "diCounter", "iniNumber", "iLength", "iuTotal", "iiCall", "iMark", "jTotal", "iriNow", " iMark", "iNow", "biCheck", "iCall", "phiNumber", "iCounter", "iProcess", " iNumber", "giCount"], "iTotal": ["miLast", "imtotal", "phiTemp", "iAll", "miZero", "iCurrent", " iNow", " iCurrent", "miTotal", "miNew", "phiLast", "itotal", "miAll", "aiTotal", "iitotal", "liLast", "liTotal", "iTarget", "iuLast", "diCount", "miCurrent", "ciToken", "jNow", "iZero", "piCount", "aiAll", "liTemp", "jtotal", " iTemp", " iDone", "liNew", "iuTarget", "diNow", "piDone", "iuNew", "ditotal", "phiNew", "iTemp", "aiToken", "iComplete", " iTarget", "iiTotal", "ciTotal", "iDone", "iiZero", "piTotal", "uiDone", " iZero", "jCount", " iNew", "miComplete", "imCount", "jZero", "iNew", "phiTotal", "diTotal", "miTarget", " iFull", "iFull", " iLast", "uiFull", "piFull", "liParent", "uiTotal", "iiCount", "ciAll", "jCurrent", "liCount", "imTotal", "imZero", "miToken", " iParent", "iLast", "iuTotal", "mitotal", "ciComplete", "jTotal", "piParent", "iNow", "iToken", " itotal", "iParent", "aiComplete"], "in": ["mc", "v", "serv", "ic", "h", "en", "by", "io", "b", "is", "inf", "per", "up", "al", "cin", "from", "conf", "reader", "re", "r", "IN", "inc", "i", "check", "inner", " din", "on", "ma", "out", "din", "get", "input", "isin", "mm", "ind", "In", "add", "mn", "and", "or", "ins", "l", "sum", "it", "info", "bin", "con", "inn"]}}
{"id1": "8468859", "id2": "20426057", "code1": "    public boolean connect() {\n        boolean isConnected = false;\n        try {\n            try {\n                this.ftpClient.connect(this.server, this.port);\n            } catch (SocketException e) {\n                status = ErrorResult.CONNECTNOTPOSSIBLE.code;\n                return false;\n            } catch (IOException e) {\n                status = ErrorResult.CONNECTNOTPOSSIBLE.code;\n                return false;\n            }\n            int reply = this.ftpClient.getReplyCode();\n            if (!FTPReply.isPositiveCompletion(reply)) {\n                this.disconnect();\n                status = ErrorResult.CONNECTNOTCORRECT.code;\n                return false;\n            }\n            try {\n                if (this.account == null) {\n                    if (!this.ftpClient.login(this.username, this.passwd)) {\n                        status = ErrorResult.LOGINNOTCORRECT.code;\n                        this.ftpClient.logout();\n                        return false;\n                    }\n                } else if (!this.ftpClient.login(this.username, this.passwd, this.account)) {\n                    status = ErrorResult.LOGINACCTNOTCORRECT.code;\n                    this.ftpClient.logout();\n                    return false;\n                }\n            } catch (IOException e) {\n                status = ErrorResult.ERRORWHILECONNECT.code;\n                try {\n                    this.ftpClient.logout();\n                } catch (IOException e1) {\n                }\n                return false;\n            }\n            isConnected = true;\n            return true;\n        } finally {\n            if ((!isConnected) && this.ftpClient.isConnected()) {\n                this.disconnect();\n            }\n        }\n    }\n", "code2": "    public static KeyStore createKeyStore(final URL url, final String password) throws KeyStoreException, NoSuchAlgorithmException, CertificateException, IOException {\n        if (url == null) throw new IllegalArgumentException(\"Keystore url may not be null\");\n        LOG.debug(\"Initializing key store\");\n        KeyStore keystore = null;\n        if (url.getFile().endsWith(\".p12\")) keystore = KeyStore.getInstance(\"pkcs12\"); else keystore = KeyStore.getInstance(KeyStore.getDefaultType());\n        keystore.load(url.openStream(), password != null ? password.toCharArray() : null);\n        return keystore;\n    }\n", "label": 0, "substitutes": {"connect": ["ping", "match", "log", "process", "construct", "join", "bind", "start", "select", "open", "network", "check", "connection", "close", "link", "config", "Connect", "set", "conn", "init", "establish", "create", "attach", "setup", "exit", "client", " disconnect", "register", "error", "con", "pen", "ready", "request", "login", "connected", "sync", "dial", "timeout"], "status": ["settings", "flags", "search", "ping", "description", "sequence", "str", "print", "join", "update", "service", "style", "scale", "comments", "output", "url", "content", "access", "stats", "check", "stat", "uses", "code", "title", "summary", "console", "gc", "ssl", "prefix", "severe", "sc", "sort", "result", "format", "params", "spec", "score", "comment", "sign", "source", "impact", "details", "use", "list", "version", "login", "xml", "json", "sync", "usage", "policy", "display"], "reply": ["address", "match", "number", "ret", "py", "back", "part", "nb", "ply", "success", "repl", "record", "vote", "consider", "time", "query", "write", "code", "Reply", " Reply", "close", "continue", "link", "notice", "job", "feature", "prefix", "result", "message", "user", "frame", "comment", "error", "answer", "flag", "response", "next", "state", "command"], "isConnected": ["isProcessedIn", "issConnecting", "issConnectioned", "isPresentedIn", " isLoads", "isAdapted", "issConnectioning", " isConnects", " isConnecting", " isLoading", "IsConnectured", "IsConnectionured", "IsConnections", "isLoading", "isConnectionedIn", "isConnured", "IsNECTedIn", "isLoadeds", "issConnecteded", "isConns", "isLinked", "isConnecteded", "issConnected", "isConnections", " isLoadeds", "IsConnectioned", "IsNECTing", "isCorrecteds", "isConnectionED", "isNECTable", "issConnectionedIn", "isStarting", "isCorrects", "isConned", "IsNECTable", "isStarted", "isLinks", "isConnectioned", "isConnects", "isCorrecting", "isConnectioning", "IsConnectable", "isConnED", "isConnecteds", "isCorrected", "isLoaded", " isLoaded", "isConnectionured", "issConnectedIn", "isPresented", "issConnectioneded", "isProcessing", "IsConnects", "isLinkured", "isConnectured", "isStarteded", "isNECTing", "isAdapts", "isConnectED", "isPresenting", "isStartedIn", "isNECTedIn", "isAdapting", "isStartable", "isConnectable", "isConnectedIn", "isAdapteds", "isConnecting", "IsConnectED", " isConnecteds", "isNECTed", "IsNECTed", "IsConnectionED", "IsConnectedIn", "isLoads", "IsConnected", "isConnectioneded", "isProcessed", "isLinkED", "isPresenteded", "isProcessable", "IsConnecting"]}}
{"id1": "5808579", "id2": "22022715", "code1": "    public static final String encryptPassword(String loginName, String password) {\n        try {\n            MessageDigest md5 = MessageDigest.getInstance(\"MD5\");\n            md5.update(loginName.toUpperCase().getBytes(\"UTF-8\"));\n            md5.update(password.getBytes(\"UTF-8\"));\n            byte[] ba = md5.digest();\n            return byte2hex(ba);\n        } catch (Exception e) {\n            return password;\n        }\n    }\n", "code2": "    protected static final byte[] digest(String s) {\n        byte[] ret = null;\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            md.update(s.getBytes());\n            ret = md.digest();\n        } catch (NoSuchAlgorithmException e) {\n            System.err.println(\"no message digest algorithm available!\");\n            System.exit(1);\n        }\n        return ret;\n    }\n", "label": 1, "substitutes": {"encryptPassword": ["encryptPass", "decryptPass", "decryptPassword", "encryptedString", "decryptedLogin", "decryptString", "encrollPass", "decryptLogin", "decryptedPassword", "encryptedLogin", "encrollPassword", "encryptString", "enccryptPass", "decryptedPass", "encrollString", "decryptedString", "enccryptString", "encryptedPassword", "encryptLogin", "enccryptPassword", "encrollLogin", "enccryptLogin", "encryptedPass"], "loginName": [" loginTime", "cellType", "loginN", "LoginType", " loginType", "LoginName", " loginname", "loginTime", "blogTime", "loginType", "blogCode", "cellName", "usernameN", "loginCode", "Loginname", "usernameTime", " loginCode", "usernameCode", "LoginTime", " loginN", "usernameName", "blogName", "loginname", "cellTime", "blogN", "cellname"], "password": ["text", "path", "address", "picture", "secret", "description", "PASS", "string", "p", "phrase", "username", "attribute", "email", "content", "word", "session", "pattern", "confirmed", "expression", "encrypted", "prefix", "padding", "paste", "message", "argument", "result", "database", "pass", "user", "name", "sword", "comment", "reset", "value", "hello", "response", "default", "another", "token", "past", "last", "Password", "command"], "md5": [" Md2", "MD2", " md8", "MD1", " Md3", "md6", "red5", " Md5", " md53", " MD5", "md53", " MD6", " md3", "red3", "MD5", "md7", " MD3", " md2", "sha2", "MD7", "md8", "sha7", " md6", "MD3", " Md53", "md1", " md1", "md2", "MD8", " MD2", "red2", "MD53", "sha5", " md7", "red8", "sha1", "md3", "MD6"], "ba": ["aka", "abc", "da", "cca", "ena", "ga", "ha", "b", "bu", "aaa", "ada", "aa", "ca", "ja", "bb", "aba", "bo", "a", "pha", "sa", "sta", "tta", "va", "ta", "bre", "CA", "ya", "bee", "Ba", "BA", "bd", "fa", "ka", "ao", "beta", "pa", "bi", "bas", "xa", "bc", "oa"]}}
{"id1": "6871529", "id2": "14820302", "code1": "    private boolean readUrlFile(String fullUrl, PrintWriter out) {\n        try {\n            URL url = new URL(fullUrl);\n            String encoding = \"gbk\";\n            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream(), encoding));\n            return fileEditor.pushStream(out, in, fullUrl, false);\n        } catch (Exception e) {\n        }\n        return false;\n    }\n", "code2": "    protected void innerProcess(ProcessorURI curi) throws InterruptedException {\n        Pattern regexpr = curi.get(this, STRIP_REG_EXPR);\n        ReplayCharSequence cs = null;\n        try {\n            cs = curi.getRecorder().getReplayCharSequence();\n        } catch (Exception e) {\n            curi.getNonFatalFailures().add(e);\n            logger.warning(\"Failed get of replay char sequence \" + curi.toString() + \" \" + e.getMessage() + \" \" + Thread.currentThread().getName());\n            return;\n        }\n        MessageDigest digest = null;\n        try {\n            try {\n                digest = MessageDigest.getInstance(SHA1);\n            } catch (NoSuchAlgorithmException e1) {\n                e1.printStackTrace();\n                return;\n            }\n            digest.reset();\n            String s = null;\n            if (regexpr != null) {\n                s = cs.toString();\n            } else {\n                Matcher m = regexpr.matcher(cs);\n                s = m.replaceAll(\" \");\n            }\n            digest.update(s.getBytes());\n            byte[] newDigestValue = digest.digest();\n            curi.setContentDigest(SHA1, newDigestValue);\n        } finally {\n            if (cs != null) {\n                try {\n                    cs.close();\n                } catch (IOException ioe) {\n                    logger.warning(TextUtils.exceptionToString(\"Failed close of ReplayCharSequence.\", ioe));\n                }\n            }\n        }\n    }\n", "label": 0, "substitutes": {"readUrlFile": ["readURLfile", "readURLStream", " readUrlPage", "readurlFile", " readURLPage", " readUrlfile", "readPathPage", "readurlStream", "readUrlPage", " readUrlStream", "readPathStream", "readUrlStream", " readURLStream", " readURLFile", " readURLfile", "readurlfile", "readURLPage", "readURLFile", "readurlPage", "readUrlfile", "readPathFile", "readPathfile"], "fullUrl": [" fullurl", " fullName", "fulRoute", "partialUrl", "FullUr", "partialURL", " fullUr", "fulUrl", " fullURL", "pathUr", "fullRoute", " fullPath", "FullURL", "partialRoute", "pathName", "completeURL", "partialurl", "FullName", "fullURL", "fullurl", "completePath", "fullUr", "partialPath", "pathUrl", "FullUrl", "fullPath", "pathURL", "completeUrl", "FullRoute", "fulurl", "completeurl", "Fullurl", "fulURL", "fullName"], "out": ["log", "file", "p", "txt", "io", "print", "b", "t", "ws", "nt", "msg", "aos", "output", "flush", "c", "to", "n", "write", "res", "o", "screen", "table", "s", "net", "ch", "writer", "client", "pretty", "OUT", "report", "Out", "us", "json", "it", "ou", "outs", "os", "w"], "url": ["build", "sl", "path", "git", "file", "Url", "str", "nl", "resource", "mail", "b", "char", "oul", "browser", "service", "ls", "open", "r", "dl", "ll", "ssl", "link", "f", "google", "rel", "base", "URL", "config", "uri", "web", "job", "sb", "ur", "conn", "client", "bel", "http", "mount", "l", "ref", "ul"], "encoding": ["Encaching", "encryption", "cryption", "ENCoding", "rcoding", "rcoded", "Encapping", "ENCapping", "coding", "rcaching", "Encoding", "capping", "coded", "encoder", "Encryption", "encaching", "coder", "ENCoder", "Encoded", "caching", "encoded", "ENCoded", "Encoder", "encapping", "rcryption"], "in": ["file", "id", "io", "inf", "cin", "from", "conf", "reader", "r", "IN", "i", "inner", "inside", "m", " din", "f", "er", "din", "user", "input", "ind", "gin", "data", "In", "source", "and", "el", "ins", "rin", "sum", "l", "info", "bin", "body", "sql", "stream", "inn"]}}
{"id1": "18114701", "id2": "16621503", "code1": "    public InputSource resolveEntity(String publicId, String systemId) {\n        String resolved = getResolvedEntity(publicId, systemId);\n        if (resolved != null) {\n            try {\n                InputSource iSource = new InputSource(resolved);\n                iSource.setPublicId(publicId);\n                URL url = new URL(resolved);\n                InputStream iStream = url.openStream();\n                iSource.setByteStream(iStream);\n                return iSource;\n            } catch (Exception e) {\n                catalogManager.debug.message(1, \"Failed to create InputSource (\" + e.toString() + \")\", resolved);\n                return null;\n            }\n        }\n        return null;\n    }\n", "code2": "    public static ArrayList<String> loadURLToStrings(URL url, int maxLines, String userAgent, int timeout) throws IOException {\n        URLConnection connection = url.openConnection();\n        if (userAgent != null && userAgent.trim().length() > 0) {\n            connection.setRequestProperty(\"User-Agent\", userAgent);\n        } else {\n            connection.setRequestProperty(\"User-Agent\", \"Mozilla/5.0 (compatible; astrominer/1.0;)\");\n        }\n        if (timeout > 0) {\n            connection.setConnectTimeout(timeout);\n        }\n        connection.connect();\n        return loadURLToStrings(connection, maxLines);\n    }\n", "label": 0, "substitutes": {"resolveEntity": ["resolveEnt", "consolvingInternal", "resolveObject", "consolveInternal", "resloveEnt", "resolvedEnt", "resolveInternal", "consolveObject", "resolvedEntity", "resloveInternal", "resolvingEnt", "consolveEntity", "consolvingObject", "resolvingObject", "resolvingEntity", "resloveObject", "consolveEnt", "consolvingEnt", "resolvingInternal", "resloveEntity", "resolvedInternal", "resolvedObject", "consolvingEntity"], "publicId": ["ublicId", "publicID", "privateAnd", "primaryPart", "openID", "openPart", "fullId", "publicLink", "privateID", "publicPart", "primaryId", "publicTime", "fullID", "ublicID", " publicLink", "fullLink", "privateId", "ublicTime", " publicTime", "primaryTime", " publicAnd", "privateLink", "privatePart", "openAnd", "fullInt", "openId", "primaryID", "publicInt", "ublicPart", "publicAnd", " publicInt", " publicID", "privateInt", " publicPart"], "systemId": ["externalID", "externalId", "externalName", "userId", " systemName", "sysName", "userID", "userName", " systemUrl", " systemID", "userUrl", "systemUrl", "externalUrl", "systemID", "systemName", "sysUrl", "sysId", "sysID"], "resolved": ["remolution", "solved", "Resolver", "solving", "consolving", "involved", "resolver", "consolved", "resultsolving", "reserved", "Resolving", " resolution", "revolver", "consolves", "resolution", "Resolved", "solve", "resolve", "rolved", "Resolve", "Resolution", "preserved", "rolving", "solves", "presolve", "presolving", "rolve", " reserved", " resolver", "resolving", "revolving", "involve", "involving", "presolved", "presolver", "resultsolved", "served", " resolving", "resolves", "resultsolver", " resolve", "consolution", "rolution", "presolution", "remolved", "revolution", "resultsolution", "remolves", "revolved", "solution", "remolving", "involution"], "iSource": ["qiSOURCE", "iiResource", "uiSources", "iSOURCE", "iSite", "IResource", " iSOURCE", "uiSource", "aiSource", " iService", "iuSourceFile", "iSources", " iSourceFile", "iuSources", "ISource", "uiSourceFile", "iniResource", "liSourceFile", "aiStream", "iniMember", "aiService", "liService", "iSourceFile", "iiSource", "ISite", "iuSOURCE", "qiSourceFile", " iSite", "iResource", " iSources", "qiSources", "IMember", "iniSite", "uiSite", "liSources", "iiMember", "iuSource", "iService", "iMember", "liSource", "liStream", "aiSourceFile", "iiSite", "liSite", "iniSource", "qiSource"], "url": ["arl", "build", "sl", "gl", "address", "path", "log", "Url", "str", "nl", "resource", "mail", "char", "browser", "ls", "re", "r", "mol", "dl", "null", "ll", "ssl", "link", "location", "html", "f", "uri", "rel", "URL", "web", "ur", "user", "name", "u", "bel", "hl", "http", "rl", "mount", "l", "mb", "ref", "ul"], "iStream": ["inputStream", "sourceSteam", "uStream", "iStreamer", "inputRead", "iRead", "sourceStreamer", "sourceStream", " iStack", "riSteam", "inputStack", "uStreamer", "ipStreamer", "sourcestream", "iStack", "ipSteam", "istream", " iSteam", "ipstream", "inputSteam", "ipStream", "riStream", "ustream", "iSteam", " iRead", "uSteam", "riRead", "riStack"]}}
{"id1": "6260216", "id2": "2221297", "code1": "    public InputStream send(String s, String s1) throws IOException {\n        HttpURLConnection httpurlconnection = null;\n        DataInputStream datainputstream = null;\n        System.setProperty(\"java.protocol.handler.pkgs\", \"com.sun.net.ssl.internal.www.protocol\");\n        URL url = new URL(s1);\n        httpurlconnection = (HttpURLConnection) url.openConnection();\n        configureURLConnection(httpurlconnection);\n        DataOutputStream dataoutputstream = new DataOutputStream(httpurlconnection.getOutputStream());\n        dataoutputstream.write(s.getBytes());\n        httpurlconnection.connect();\n        datainputstream = new DataInputStream(httpurlconnection.getInputStream());\n        if (httpurlconnection.getResponseCode() != 200) {\n            System.out.println(\"Invalid Response Code! Code Returned = \" + Integer.toString(httpurlconnection.getResponseCode()));\n            return null;\n        }\n        if (!httpurlconnection.getContentType().equalsIgnoreCase(\"Text/xml\")) {\n            System.out.println(\"Invalid Content-Type! Content type of response received = \" + httpurlconnection.getContentType());\n            return null;\n        } else {\n            return datainputstream;\n        }\n    }\n", "code2": "    public static String getURLContent(String urlToSearchString) throws IOException {\n        URL url = new URL(urlToSearchString);\n        URLConnection conn = url.openConnection();\n        String encoding = conn.getContentEncoding();\n        if (encoding == null) encoding = \"ISO-8859-1\";\n        BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream(), encoding));\n        StringBuilder sb = new StringBuilder(16384);\n        try {\n            String line;\n            while ((line = br.readLine()) != null) {\n                sb.append(line);\n                sb.append('\\n');\n            }\n        } finally {\n            br.close();\n        }\n        return sb.toString();\n    }\n", "label": 0, "substitutes": {"send": ["text", "submit", "put", "post", "append", "printf", "service", "export", "output", "call", "query", "write", "message", "get", "sent", "push", "read", "download", "transfer", "upload", "save", "report", "add", "execute", "request", "handle", "Send", "body"], "s": ["js", "v", "bytes", "string", "h", "p", "str", "b", "is", "t", "ws", "xs", "ls", "S", "strings", "gs", "rs", "r", "c", "ts", "n", "i", "a", "m", "fs", "f", "ps", "ms", "bs", "its", "data", "sts", "l", "g", "es", "ss", "os", "w"], "s1": ["S2", "rs1", "S01", " s0", " s01", "S0", "s2", "qs0", "S1", "rs0", "s0", "s01", " s2", "qs2", "rs2", "qs1"], "httpurlconnection": [" httpurlcommunication", "httpcertposition", "httpcertconnection", "apacheurlconnection", "upperurlposition", "hllopen", "httpurlcontext", "httpUrlconnected", "httpwebconnection", "upperpullgeneration", "httpuserconn", "httpUrlconnection", "apachebuildconnect", "httpdateconn", "httpsslconnected", "upperurlconnection", "httpurlcommunication", "httprelconnection", "httpuserposition", "httpbuildconn", " httpsslconnection", "httpllopen", "httpgetconn", "upperdateposition", "httpbuildconnect", "httppullapplication", "httpmailconnected", "httpUrlclient", "httploggeneration", "httpllconnection", "highconsoleconn", "httplogrelation", "httphttpposition", "apacheurlconnected", "httpurlconnect", "httpruleattribute", "ttpUrlconnect", "httpurlclient", "httpruleconnection", "httpcalconnection", "httpUrlgeneration", "httplogconnection", "httpUrlposition", "httmailconnection", "htturlcommand", "httprelconn", " httpurlconn", "httpurlattribute", "httprelcontext", "httphttpconn", " httpuserconnect", "httpgetconnection", "highconsoleposition", "apachebuildconn", "httpurlrelation", "httpurlgeneration", "httpwebconnect", "ttpUrlposition", "apachebuildconnected", "httpwebcontext", "httpsslconnect", "hurlConnection", "ttpUrlconnection", "hllConnection", "httpsslconn", "httpusercommand", "httmailconn", "httpcertconn", "httplogconn", "httpwebclient", "httpUrlcontext", "upperurlconn", "httphttpconnect", "httpllconnect", "httpgetcommand", "httphttpcontext", "ttpurlconnection", "hllconnection", "httpusercommunication", "upperurlcontext", "httplogapplication", "httpsslcontext", "ttpUrlconnected", "httpbuildconnected", " httpsslcommunication", "highurlconn", " httpurlclient", "httpruleposition", "apacheurlconn", "httpcalconn", "upperurlgeneration", "upperdateconnection", "apachebuildconnection", "hllconnect", "httphttpopen", "httpconsoleconn", "upperpullconnection", "apacheurlconnect", "htturlposition", "httpurlapplication", "htturlconn", " httpwebclient", " httpurlrelation", "hurlconnection", "highurlconnection", "httpuserconnect", "httppullconnect", "httpuserrelation", "httpsslcommunication", " httpuserrelation", "httpurlConnection", "upperdateconn", "httpruleconn", "httpbuildconnection", "httpsslconnection", "upperurlconnect", "hurlopen", "httpmailcommand", " httpusercommunication", "httplogcommunication", "httpurlposition", "httmailposition", "httpcertcontext", "httpurlopen", " httpwebcontext", "upperdatecontext", "httpurlconnected", "httpdbconnect", "httmailcommand", "ttpurlconnected", " httpurlconnect", "httphttpConnection", " httpwebconnect", "hurlconnect", " httpuserconnection", "httpurlconn", "httppullgeneration", "httphttpconnection", "highconsoleattribute", "upperpullapplication", "httplogconnect", " httpsslconn", "httpconsoleposition", "httpuserconnection", "httpUrlapplication", "httpcertattribute", "httpcalcontext", "httpmailposition", "httpmailconn", "httpUrlrelation", "httpdatecontext", "ttpurlconnect", "httpmailconnect", "httpdbopen", "highurlattribute", "httpUrlconnect", " httpsslcontext", "httplogconnected", "highconsoleconnection", "ttpurlposition", "httpdateposition", "httpllConnection", "httpmailconnection", "httpdbconnection", "httpcalclient", " httpwebconnection", "htturlconnection", "httpcalcommunication", "httpdbConnection", "httpconsoleconnection", "httpconsoleattribute", "httpurlcommand", "httppullconnection", "upperpullconnect", "httpUrlcommunication", " httpurlcontext", "httprelcommunication", "highurlposition", "upperurlapplication", "httpcalconnect", "httpgetposition", "httpdateconnection"], "datainputstream": ["datainputcontrol", "datainsoutputstream", "datainerPUTbody", "datainerputlength", "datrainoutputstore", "datainutstore", "datainsputstream", "datainoutputpipe", "datainoutputcontrol", "datainPUTstream", "datainPUTStream", "datainutStream", "datainputbody", "dataincutbody", "datainutcontrol", "datainutstream", "datainPUTlength", "datainoutputstore", "datainportStream", "datainportstore", "datainerputstream", "datainoutputstream", "datainputStream", "datainsoutputStream", "datainoutputbody", "datainPUTbody", "datainoutputStream", "datainsputStream", "datainointpipe", "dataincutstream", "datainsoutputpipe", "datainputstore", "datrainoutputStream", "datainointStream", "dataincutlength", "datainointstream", "datrainputstore", "datrainoutputstream", "datainerPUTStream", "datainutpipe", "dataincutStream", "datainportstream", "datainerPUTlength", "datainputpipe", "datrainputstream", "datrainoutputcontrol", "datainsputpipe", "datainerputbody", "datrainputcontrol", "datainerPUTstream", "datrainputStream", "datainoutputlength", "datainputlength", "datainportcontrol", "datainerputStream"], "url": ["build", "sl", "gl", "address", "Url", "abs", "str", "nl", "b", "char", "t", "loader", "ls", "r", "dl", "ll", "pl", "https", "ssl", "link", "f", "rel", "base", "URL", "web", "ur", "ml", "name", "u", "bel", "util", "http", "www", "rl", "mount", "el", "l", "il", "ref", "ul"], "dataoutputstream": ["dataconnectionStream", "dataoutputStream", " dataOutputtime", " dataOutputStream", "dataOutputtime", " dataoutputrow", " dataoutputStream", " dataOutputwindow", "dataOutputrow", "dataconnectionwindow", "datasuccessstream", "dataoutputtime", "dataOutputwindow", "dataoutputwindow", "dataputwindow", " dataoutputwindow", "datainputStream", "datasuccesswindow", "datainputrow", " dataoutputtime", " dataOutputrow", "dataputStream", "dataconnectionstream", " dataOutputstream", "dataputstream", "datasuccesstime", "dataOutputStream", "dataOutputstream", "dataconnectionrow", "datasuccessStream", "datainputwindow", "dataoutputrow", "dataputtime"]}}
{"id1": "17999474", "id2": "18238468", "code1": "    private static File getZipAsFile(DigitalObject digOb) {\n        String folderName = randomizeFileName(getFolderNameFromDigObject(digOb));\n        File tmpFolder = new File(utils_tmp, folderName);\n        File zip = null;\n        try {\n            FileUtils.forceMkdir(tmpFolder);\n            zip = new File(tmpFolder, getFileNameFromDigObject(digOb, null));\n            FileOutputStream out = new FileOutputStream(zip);\n            IOUtils.copyLarge(digOb.getContent().getInputStream(), out);\n            out.close();\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return zip;\n    }\n", "code2": "    @Test\n    public void testLoadSource() throws IOException {\n        ArticleMetadata metadata = new ArticleMetadata();\n        metadata.setId(\"http://arxiv.org/abs/math/0205003v1\");\n        InputStream inputStream = arxivDAOFacade.loadSource(metadata);\n        Assert.assertNotNull(inputStream);\n        StringWriter writer = new StringWriter();\n        IOUtils.copy(inputStream, writer, \"utf8\");\n        String contents = writer.toString();\n        Assert.assertTrue(contents.contains(\"A strengthening of the Nyman\"));\n        inputStream.close();\n    }\n", "label": 1, "substitutes": {"getZipAsFile": ["getBoxAsfile", "getZipInfile", "getZipAsPath", "getZipFromLocal", "getZipAsLocal", "getBoxFromFile", "getBoxAsPath", "getBoxFromPath", "getZipToPath", "getZipFromFile", "getZipInLocal", "getZipAsfile", "getZipFromPath", "getZipTofile", "getBoxFromfile", "getZipInPath", "getZipInFile", "getZipFromfile", "getBoxAsFile", "getZipToLocal", "getZipToFile", "getBoxAsLocal", "getBoxFromLocal"], "digOb": [" digOB", "divObject", " digOcc", " digObj", "DigOB", "digOcc", "DigOcc", "DigOb", "digObject", "divObj", "DigObj", "chemOB", "DigEx", "chemOb", "gradOB", "chemObj", "gradObject", "digOB", "digEx", "DigObject", "divOb", "digObj", " digObject", " digEx", "gradObj", "chemEx", "gradOb", "divOcc"], "folderName": [" folderNames", "folderPath", "foldNames", "foldName", "foldPath", "Foldername", "folderSize", "FolderNames", "fileNames", "foldname", "FolderName", "FolderPath", " foldername", " folderPath", "folderKey", "fileSize", "foldKey", "fileKey", "fileName", "foldername", " folderKey", "foldSize", " folderSize", "folderNames"], "tmpFolder": ["cmpFolder", "tempDir", "mpDir", "tmpParent", "tmpDirectory", "cmpDir", "mpfolder", " tmpDir", "tmpfolder", " tmpfolder", "mpDirectory", "mpParent", "tempfolder", "tempParent", "tempFolder", "tempDirectory", "mpFolder", "cmpParent", "cmpfolder", " tmpDirectory", "tmpDir"], "zip": ["jar", "tar", "sample", "wrap", "pdf", "lock", "Zip", "bag", "file", "proxy", "sheet", "post", "io", "mail", "test", "z", "zone", "row", "gz", "content", "pack", "entry", "library", "box", "feed", "quote", "link", "csv", "f", "col", "cf", "form", "sp", "tmp", "project", "upload", "exp", "ow", "template", "folder", "report", "drop", "pkg", "install", "xml", "json", "ip", "cloud", "pool", "body", "temp", "sea", "archive", "se"], "out": ["ln", "v", "serv", "cos", "en", "OU", "io", "print", "t", "conv", "up", "in", "aos", "output", "copy", "inv", "flush", "null", "to", "n", "i", "check", "inner", "ex", "write", "res", "auto", "o", "set", "net", "sp", "s", "oss", "tmp", "all", "writer", "OUT", "one", "Out", "list", "ins", "us", "it", "ent", "ou", "outs", "co", "os"]}}
{"id1": "9261777", "id2": "9109613", "code1": "    public static void main(String[] args) {\n        String source, destination;\n        if (args[0].toLowerCase().endsWith(\".gz\")) {\n            source = args[0];\n            destination = source.substring(0, source.length() - 3);\n        } else {\n            source = args[0] + \".gz\";\n            destination = args[0];\n        }\n        InputStream is = null;\n        OutputStream os = null;\n        try {\n            is = new GZIPInputStream(new FileInputStream(source));\n            os = new FileOutputStream(destination);\n            byte[] buffer = new byte[8192];\n            for (int length; (length = is.read(buffer)) != -1; ) os.write(buffer, 0, length);\n        } catch (IOException e) {\n            System.err.println(\"Fehler: Kann nicht entpacken \" + args[0]);\n        } finally {\n            if (os != null) try {\n                os.close();\n            } catch (IOException e) {\n            }\n            if (is != null) try {\n                is.close();\n            } catch (IOException e) {\n            }\n        }\n    }\n", "code2": "    public static void fileCopy(String from_name, String to_name) throws IOException {\n        File fromFile = new File(from_name);\n        File toFile = new File(to_name);\n        if (fromFile.equals(toFile)) abort(\"cannot copy on itself: \" + from_name);\n        if (!fromFile.exists()) abort(\"no such currentSourcepartName file: \" + from_name);\n        if (!fromFile.isFile()) abort(\"can't copy directory: \" + from_name);\n        if (!fromFile.canRead()) abort(\"currentSourcepartName file is unreadable: \" + from_name);\n        if (toFile.isDirectory()) toFile = new File(toFile, fromFile.getName());\n        if (toFile.exists()) {\n            if (!toFile.canWrite()) abort(\"destination file is unwriteable: \" + to_name);\n        } else {\n            String parent = toFile.getParent();\n            if (parent == null) abort(\"destination directory doesn't exist: \" + parent);\n            File dir = new File(parent);\n            if (!dir.exists()) abort(\"destination directory doesn't exist: \" + parent);\n            if (dir.isFile()) abort(\"destination is not a directory: \" + parent);\n            if (!dir.canWrite()) abort(\"destination directory is unwriteable: \" + parent);\n        }\n        FileInputStream from = null;\n        FileOutputStream to = null;\n        try {\n            from = new FileInputStream(fromFile);\n            to = new FileOutputStream(toFile);\n            byte[] buffer = new byte[4096];\n            int bytes_read;\n            while ((bytes_read = from.read(buffer)) != -1) to.write(buffer, 0, bytes_read);\n        } finally {\n            if (from != null) try {\n                from.close();\n            } catch (IOException e) {\n                ;\n            }\n            if (to != null) try {\n                to.close();\n            } catch (IOException e) {\n                ;\n            }\n        }\n    }\n", "label": 1, "substitutes": {"source": ["text", "where", "search", "path", "sample", "subject", "address", "string", "file", "sequence", "site", "str", "back", "parent", "ce", "resource", "src", "store", "clip", "component", "char", "start", "context", "SOURCE", "service", "from", "target", "copy", "filename", "style", "content", "index", "view", "query", "ource", "scope", "check", "status", "title", "volume", "language", "uri", "base", "reason", "config", "expression", "prefix", "size", "Source", "form", "table", "lower", "sql", "init", "input", "tree", "template", "spec", "details", "use", "script", "info", "ui", "body", "origin", "se"], "destination": ["portine", " destinate", "testination", "testinate", "distinator", "combinator", "declacement", "origend", "destinator", "tempinator", "destine", " destend", "distinant", "goodinate", "certinate", "portend", "portination", "destino", "goodinator", "declination", "origine", "destinant", "combinations", "certacement", "certination", "testino", "tempino", "distination", " destino", "destacement", "goodacement", " destine", " destinator", "portinator", "origination", "declinate", "combinant", "certinator", "destinate", "tempination", "declinator", "declinant", "tempinate", "declinations", "goodination", "distinations", "destend", "combination", "testinator", "destinations", "originator"], "is": ["js", "iss", "ic", "vs", "isl", "abs", "ics", "isa", "was", "sis", "in", "ist", "mis", "ais", "ri", "iris", "si", "bits", "ts", "vis", "i", "ios", "has", "are", "obs", "ims", "ib", "bis", "es", "dis", "ns", "ps", "iter", "IS", "ms", "s", "bs", "lis", "oss", "init", "its", "mus", "ois", "icks", "isin", "ie", "ris", "ains", "sys", "im", "isf", "tis", "Is", "nis", "ir", "ip", "us", "ins", "info", "isi", "isc", "zes", "ires", "iso", "webkit"], "os": ["ks", "cos", "oses", "bos", "oos", "oes", "uts", "ost", "ose", "io", "ot", "ox", "mot", "OS", "aos", "mos", "ts", "ols", "ios", "obs", "bis", "on", "fs", "ns", "o", "es", "dis", "\u00f3", "ms", "osi", "bs", "los", "oss", "oS", "s", "ops", "ones", "asis", "mes", "zero", "sys", "or", "Os", "dos", "pos", "ob", "css", "outs", "ss", "oa", "ys"], "buffer": ["background", "sample", "batch", "binary", "sequence", "variable", "append", "queue", "bar", "history", "event", "row", "stack", "phrase", "total", "button", "view", "word", "library", "block", "mem", "padding", "table", "message", "buff", "paste", "database", "frame", "template", "document", "comment", "memory", "shape", "pad", "window", "cache", "available", "buf", "Buffer", "temp", "display", "command"], "length": ["text", "display", "path", "tail", "number", "Length", "string", "height", "sequence", "ence", "angle", "before", "point", "component", "count", "start", "position", "ength", "history", "needed", "enth", "span", "total", "family", "ENGTH", "len", "ith", "time", "frequency", "duration", "bus", "volume", "partial", "split", "loop", "padding", "end", "th", "database", " Length", "capacity", "ind", "offset", "width", "bow", "load", "reading", "distance", "shape", "pad", "hello", "of", "l", "ty", "character", "stop", "type", "full", "last", "integer", "ment", "collection", "size"]}}
{"id1": "8690362", "id2": "536614", "code1": "    public static void fileUpload() throws IOException {\n        HttpClient httpclient = new DefaultHttpClient();\n        httpclient.getParams().setParameter(CoreProtocolPNames.PROTOCOL_VERSION, HttpVersion.HTTP_1_1);\n        HttpPost httppost = new HttpPost(postURL);\n        File file = new File(\"d:/hai.html\");\n        System.out.println(ukeycookie);\n        httppost.setHeader(\"Cookie\", ukeycookie + \";\" + skeycookie + \";\" + usercookie);\n        MultipartEntity mpEntity = new MultipartEntity();\n        ContentBody cbFile = new FileBody(file);\n        mpEntity.addPart(\"\", cbFile);\n        httppost.setEntity(mpEntity);\n        System.out.println(\"Now uploading your file into mediafire...........................\");\n        HttpResponse response = httpclient.execute(httppost);\n        HttpEntity resEntity = response.getEntity();\n        System.out.println(response.getStatusLine());\n        if (resEntity != null) {\n            System.out.println(\"Getting upload response key value..........\");\n            uploadresponsekey = EntityUtils.toString(resEntity);\n            getUploadResponseKey();\n            System.out.println(\"upload resoponse key \" + uploadresponsekey);\n        }\n    }\n", "code2": "    private static void readAndRewrite(File inFile, File outFile) throws IOException {\n        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n        Dataset ds = DcmObjectFactory.getInstance().newDataset();\n        dcmParser.setDcmHandler(ds.getDcmHandler());\n        dcmParser.parseDcmFile(null, Tags.PixelData);\n        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        System.out.println(\"reading \" + inFile + \"...\");\n        pdReader.readPixelData(false);\n        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n        ds.writeDataset(out, dcmEncParam);\n        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n        System.out.println(\"writing \" + outFile + \"...\");\n        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        pdWriter.writePixelData();\n        out.flush();\n        out.close();\n        System.out.println(\"done!\");\n    }\n", "label": 0, "substitutes": {"fileUpload": ["fileDownload", "FilePost", " filePost", "FileUpload", "filePost", " fileupload", "createUpload", "Fileupload", "createPost", "createDownload", " fileDownload", "fileupload", "createupload", "FileDownload"], "httpclient": ["hserver", "HTTPclient", "htmlserver", "httpsclient", "hnet", " httpnet", "htmlclient", "httpsClient", "buildnet", "ttpnet", "ttpClient", "HTTPnet", "httpnet", "httpsnet", " httpcli", "htmlnet", "ttpclient", " httpClient", "hclient", "buildclient", "httpcli", "httpserver", "buildcli", " httpserver", "htmlClient", "buildClient", "HTTPClient", "hClient", "httpClient", "httpscli"], "httppost": [" httpspost", "httpart", "httpposter", "typposter", "httppore", "httmpoad", " httpposter", " httplore", "typloster", "typlart", " httpsost", "httppoint", " httppart", "httplpost", "typlpost", "httplart", "typlost", "httmpost", "httplore", "httmppost", " httplost", " httposter", "httmpoint", "httipoint", "httpspost", " httppoad", "httpppost", "httploster", "httptart", "httphost", "httphart", "typpart", "httpsoster", "httpsoad", "httptpost", " httplpost", "httpsoint", "httipost", " httpost", "httpsost", " httppoint", "httppart", "httplost", "httphpost", " httpsoad", "httptost", " httpsoint", "typppost", "httpsore", "httpost", " httploster", " httpart", "httphoster", "httppoad", " httppore", " httpppost", "httippost", "httptore", "httipoad", "typpost", "httptoster", "httposter"], "file": ["local", "text", "path", "h", "log", "binary", "io", "resource", "FILE", "face", "channel", "ile", "t", "e", "audio", "ol", "File", "filename", "url", "model", "content", "library", "block", " File", "f", "article", "form", "web", "table", "play", "message", "page", "out", "files", "user", "db", "upload", "video", "document", "name", "foo", "media", "http", "data", "photo", "application", "le", "image", "ao", "key", "handle", "info", "il", "type", "body", "word"], "mpEntity": ["cmpEnt", "cmpEm", "MPEnt", "cmpentity", "mpEnt", "cmpEnc", "mpentity", "mpEm", "cpEnt", "cpEnc", " mpEnt", "mpEnc", "MPEnc", "cpEntry", " mpEm", "apEnt", "apEntity", "mpEntry", "MPentity", "cpentity", "cmpEntry", "MPEntity", "MPEntry", "cmpEntity", "apEm", "cpEntity"], "cbFile": ["gbFile", "gbPage", "cbfile", "rbContent", "bbFile", "dbfile", "rbPage", "cbPage", "bbContent", "rbfile", "gbfile", "cbBody", "bbBody", "dbPage", "dbFile", "rbFile", "dbBody", "cbContent", "rbBody", "gbContent", "gbBody", "bbfile"], "response": ["description", "function", "sequence", "given", "respond", "des", "that", "ce", "resource", "onse", "hash", "history", "success", "service", "still", "more", "Response", "output", " responding", "template", "block", "connection", "session", "res", "relation", "status", "profile", "license", "server", "trace", "resp", "result", "message", "pty", "tree", "frame", "document", "successful", "object", "respons", "http", "zero", "application", "answer", "social", "reset", "self", "version", "yes", "request", "xml", "json", "next", "reply", "body", "entry", "collection", "ve"], "resEntity": [" resentity", "resentity", "RESEnt", "Resentity", "respEntry", " resEnt", "resInstance", "rsEntity", "respentity", "resEnt", " resInstance", " resEntry", "ResEnt", "ResInstance", "RESentity", "rsInstance", "RESEntity", "ResEntity", "rsEnt", "ResEntry", "respEntity", "rsEntry", "respEnt", "RESEntry", "resEntry"], "uploadresponsekey": ["uploadnextKey", "uploadnextlink", "uploadresponseKey", "uploadresponseKEY", " uploadResponseKEY", "uploadresponselink", " uploadResponsevalue", " uploadresponsevalue", "uploadsequencevalue", "uploadnextvalue", "uploadsequencekey", "uploadanswerkey", "uploadanswerlink", " uploadresponselink", " uploadResponseKey", "uploadanswervalue", " uploadresponseKey", " uploadResponselink", "uploadresponsevalue", "uploadResponselink", "uploadResponsekey", "uploadResponseKey", "uploadanswerKey", "uploadResponseKEY", "uploadnextkey", " uploadResponsekey", "uploadResponsevalue", " uploadresponseKEY", "uploadsequenceKey", "uploadsequenceKEY"]}}
{"id1": "4778473", "id2": "10391753", "code1": "    private void loadProperties() {\n        if (properties == null) {\n            properties = new Properties();\n            try {\n                URL url = getClass().getResource(propsFile);\n                properties.load(url.openStream());\n            } catch (IOException ioe) {\n                ioe.printStackTrace();\n            }\n        }\n    }\n", "code2": "    public static String encrypt(String text) {\n        char[] toEncrypt = text.toCharArray();\n        StringBuffer hexString = new StringBuffer();\n        try {\n            MessageDigest dig = MessageDigest.getInstance(\"MD5\");\n            dig.reset();\n            String pw = \"\";\n            for (int i = 0; i < toEncrypt.length; i++) {\n                pw += toEncrypt[i];\n            }\n            dig.update(pw.getBytes());\n            byte[] digest = dig.digest();\n            int digestLength = digest.length;\n            for (int i = 0; i < digestLength; i++) {\n                hexString.append(hexDigit(digest[i]));\n            }\n        } catch (java.security.NoSuchAlgorithmException ae) {\n            ae.printStackTrace();\n        }\n        return hexString.toString();\n    }\n", "label": 0, "substitutes": {"loadProperties": ["initPrdates", "loadProdates", "loadPropdates", "initProperties", "initProproperties", "loadPrps", "loadprodates", "initPrproperties", "initPrps", "loadPropperties", "loadPrperties", "loadPrproperties", "loadproproperties", "initPrperties", "loadprops", "loadPropproperties", "loadproperties", "loadPrdates", "loadProproperties", "loadProps", "initProps", "loadPropps", "initProdates"], "properties": ["settings", "tests", "where", "features", "members", "results", "packages", "builders", "organisms", "notes", "pro", "bugs", "sheets", "prints", "terms", "property", "objects", "modules", "abilities", "policy", "comments", "reports", "names", "perties", "jobs", "papers", "to", "states", "projects", "units", "options", "facts", "ps", "ports", "people", "params", "parts", "beans", "database", "changes", "holders", "relations", "posts", "rules", "details", "keys", "metadata", "rows", "marks", "poses", "this", "types", "prop", "values"], "url": ["build", "sl", "address", "file", "Url", "p", "ret", "abs", "str", "nl", "id", "kl", "resource", "b", "char", "browser", "loader", "obj", "context", "service", "ls", "open", "dl", "ll", "location", "f", "uri", "config", "URL", "result", "sb", "ur", "user", "u", "bel", "http", "rl", "mount", "rect", "l", "ref"]}}
{"id1": "6379126", "id2": "4164833", "code1": "    public boolean gerarTutorialPage() {\n        try {\n            File indexDir = criarDiretorioSite();\n            File cssDir = criarDiretorioCss();\n            File capDir = criarDiretorioCapitulos();\n            File licDir = criarDiretorioLicoes();\n            File midDir = criarDiretorioMidias();\n            File filesDir = criarDiretorioArquivos();\n            File videosDir = new File(filesDir + \"/videos\");\n            videosDir.mkdir();\n            File imagensDir = new File(filesDir + \"/imagens\");\n            imagensDir.mkdir();\n            String local = System.getProperty(\"user.dir\");\n            FileChannel srcCss1 = new FileInputStream(local + \"/bin/style/layout.css\").getChannel();\n            FileChannel destCss1 = new FileOutputStream(cssDir + \"/layout.css\").getChannel();\n            destCss1.transferFrom(srcCss1, 0, srcCss1.size());\n            srcCss1.close();\n            destCss1.close();\n            FileChannel srcCss2 = new FileInputStream(local + \"/bin/style/elementos.css\").getChannel();\n            FileChannel destCss2 = new FileOutputStream(cssDir + \"/elementos.css\").getChannel();\n            destCss2.transferFrom(srcCss2, 0, srcCss2.size());\n            srcCss2.close();\n            destCss2.close();\n            FileChannel srcCss3 = new FileInputStream(local + \"/bin/style/estilo-cap-lic-mid.css\").getChannel();\n            FileChannel destCss3 = new FileOutputStream(cssDir + \"/estilo-cap-lic-mid.css\").getChannel();\n            destCss3.transferFrom(srcCss3, 0, srcCss3.size());\n            srcCss3.close();\n            destCss3.close();\n            FileChannel srcCss4 = new FileInputStream(local + \"/bin/style/layout_ie.css\").getChannel();\n            FileChannel destCss4 = new FileOutputStream(cssDir + \"/layout_ie.css\").getChannel();\n            destCss4.transferFrom(srcCss4, 0, srcCss4.size());\n            srcCss4.close();\n            destCss4.close();\n            FileChannel srcCss5 = new FileInputStream(local + \"/bin/style/elementos_ie.css\").getChannel();\n            FileChannel destCss5 = new FileOutputStream(cssDir + \"/elementos_ie.css\").getChannel();\n            destCss5.transferFrom(srcCss5, 0, srcCss5.size());\n            srcCss5.close();\n            destCss5.close();\n            FileChannel srcCss6 = new FileInputStream(local + \"/bin/style/estilo-cap-lic-mid_ie.css\").getChannel();\n            FileChannel destCss6 = new FileOutputStream(cssDir + \"/estilo-cap-lic-mid_ie.css\").getChannel();\n            destCss6.transferFrom(srcCss6, 0, srcCss6.size());\n            srcCss6.close();\n            destCss6.close();\n            copiarMidias(videosDir, imagensDir);\n            escreverMidiasPage(midDir);\n            escreverLicoesPage(licDir);\n            escreverCapitulosPages(capDir);\n            FileWriter indexHtml = new FileWriter(indexDir + \"/index.html\");\n            indexHtml.write(escreverIndexHead() + escreverBodyHeader() + escreverIndexBodyContent() + escreverFooter());\n            indexHtml.close();\n            System.out.println(\"Site gerado com sucesso\");\n            JOptionPane.showMessageDialog(null, \"Web Site gerado com sucesso\", \"\\\\o/\", JOptionPane.INFORMATION_MESSAGE);\n            return true;\n        } catch (Exception e) {\n            e.printStackTrace();\n            System.err.println(\"Site n\u00e3o gerado\");\n            JOptionPane.showMessageDialog(null, \"Web Site n\u00e3o gerado corretamente\", \"Ops...\", JOptionPane.ERROR_MESSAGE);\n            return false;\n        }\n    }\n", "code2": "    public static void buildDeb(File debFile, File controlFile, File dataFile) throws IOException {\n        long now = new Date().getTime() / 1000;\n        OutputStream deb = new FileOutputStream(debFile);\n        deb.write(\"!<arch>\\n\".getBytes());\n        startFileEntry(deb, DEBIAN_BINARY_NAME, now, DEBIAN_BINARY_CONTENT.length());\n        deb.write(DEBIAN_BINARY_CONTENT.getBytes());\n        endFileEntry(deb, DEBIAN_BINARY_CONTENT.length());\n        startFileEntry(deb, CONTROL_NAME, now, controlFile.length());\n        FileInputStream control = new FileInputStream(controlFile);\n        byte[] buffer = new byte[1024];\n        while (true) {\n            int read = control.read(buffer);\n            if (read == -1) break;\n            deb.write(buffer, 0, read);\n        }\n        control.close();\n        endFileEntry(deb, controlFile.length());\n        startFileEntry(deb, DATA_NAME, now, dataFile.length());\n        FileInputStream data = new FileInputStream(dataFile);\n        while (true) {\n            int read = data.read(buffer);\n            if (read == -1) break;\n            deb.write(buffer, 0, read);\n        }\n        data.close();\n        endFileEntry(deb, dataFile.length());\n        deb.close();\n    }\n", "label": 1, "substitutes": {"gerarTutorialPage": [" crearTutorialScreen", " crearTeoyServer", " crearTeutorialServer", " crearTiaryServer", " crearTiaryScreen", " crearTutorialPage", " crearTeutorialPages", " crearToyServer", " crearTiaryPages", " crearTeoyPages", " crearTeutorialPage", " crearTiblPages", " crearTeoyPage", " crearTeutorialScreen", " crearToyScreen", " crearToyPages", " crearTiblScreen", " crearTiblServer", " crearToyPage", " crearTiblPage", " crearTeoyScreen", " crearTutorialServer", " crearTutorialPages", " crearTiaryPage"], "indexDir": ["scriptDIR", "htmlFolder", "htmlDIR", "indexPath", "scriptDir", "appFolder", "htmlDir", "scriptPath", "scriptFolder", "indexDIR", "appDIR", "appPath", "indexFolder", "appDir", "htmlPath"], "cssDir": ["statsDir", "cmsdir", "csDirectory", "cmsDir", "stylesDb", "stylesDIR", "cmsDIR", "cssRect", "csdir", "icsDir", "cssDirectory", "statsDb", "ssDIR", "ssDirectory", "cssUrl", "icsDirectory", "stylesUrl", "csRect", "stylesDir", "cssdir", "ssDir", "statsUrl", "cmsDirectory", "stylesDirectory", "ssRect", "cssDIR", "ssDb", "csUrl", "ssdir", "cssDb", "icsdir", "stylesdir", "csDir", "icsRect", "ssUrl"], "capDir": ["cmpFile", "configTier", "cmpDb", "CapTier", "capTier", "CapFile", "CapDb", "capFile", "cmpTier", "configDb", "configDir", "cmpDir", "configFile", "CapDir", "capDb"], "licDir": ["liaDb", "licDs", "liaDs", "libDs", "vidDir", "vidRot", "licDb", "libDb", "libRot", "vidDs", "liaRot", "liaDir", "vidDb", "libDir", "licRot"], "midDir": ["pidCat", "manCat", "midDirectory", "midRot", "mnCat", "pidDir", "manRot", "mnDir", "mnRot", "manDir", "pidRot", "pidDirectory", "mnDirectory", "manDirectory", "midCat"], "filesDir": ["framesFolder", "framesIter", "sectionsRect", "framesRel", "videosdir", "framesDir", "sectionsDir", "pagesDir", "filesFolder", "videosRel", "tagsIter", "framesFix", "pagesFolder", "framesRect", "tagsJar", "filesFix", "filesDIR", "filesdir", "videosFolder", "pagesRel", "framesDIR", "sectionsIter", "filesRel", "framesdir", "pagesdir", "tagsRect", "imagesDir", "sectionsJar", "videosFix", "filesIter", "filesJar", "framesJar", "imagesFix", "filesRect", "videosDIR", "imagesDIR", "imagesFolder", "tagsDir"], "videosDir": ["versionsFile", "versionsFolder", "videosdir", "imagesdir", "imagesFile", "videosFile", "videosFolder", "videodir", " videosFolder", "imagesDir", "videoFolder", "imagesFolder", " videosFile", "videoDir", "versionsDir", " videosdir"], "imagensDir": ["imagensesDir", "imagensFolder", " imagensIn", "imagetsDir", "imagotsDir", "imagmesDirectory", "imagearsDir", "imagotsDirectory", " imagensFolder", "imgetsDir", "imgensDir", " imagensDb", "imagensesDb", " imagetsDb", "imgetsFolder", "imgetsDirectory", "imagetsDb", "imagmesDir", "imagetsDirectory", "imagotsFolder", "imagotsDIR", "imagetsIn", " imagetsIn", "imagearsFolder", "imgensDIR", "imagensIn", "imagetsDIR", "imagensDirectory", "imagmesDIR", "imagmesFolder", "imagensesFolder", "imagetsFolder", "imagensDIR", "imagensesIn", "imagearsDb", "imagearsIn", " imagetsFolder", " imagetsDir", "imagensDb", "imgensDirectory", "imgensFolder", "imgetsDIR"], "local": ["where", "system", "localhost", "val", "western", "dir", "lib", "lock", "parent", "back", "mail", "part", "test", "remote", "alpha", "internal", "managed", "al", "current", "south", "upper", "present", "location", "valid", "initial", "Local", "base", "pal", "single", "server", "serial", "land", "loc", "global", "root", "tmp", "simple", "central", "pid", "shared", "client", "hid", "util", "http", "home", "self", "list", "personal", "l", "installed", "standard", "full", "state", "temp", "install"], "srcCss1": ["srcSss3", "srcCssasso", "srcSCss2", "srcCssOnce", "srcScss2", "srcCson2", "srcCSS0", "srcCass1", "srcScss3", "srcSCss0", "srcCass10", "srcCxx10", "srcSCss1", "srcCson1", "srcCfgOnce", "srcLass10", "srcChess10", "srcLassOnce", "srcCss10", "srcCcss0", "srcCcss3", "srcLssOnce", "srcCson10", "srcChess0", "srcSCass3", "srcChess1", "srcCassasso", "srcCass0", "srcSssOnce", "srcCSS2", "srcSss2", "srcCcss1", "srcCfg2", "srcChessasso", "srcCss0", "srcSCass1", "srcCfg1", "srcCass2", "srcSss1", "srcLss2", "srcCassOnce", "srcCxxasso", "srcCass3", "srcCSS1", "srcLss10", "srcCxx1", "srcSCass0", "srcSCass2", "srcScssOnce", "srcCfg3", "srcLass1", "srcLss1", "srcCcssOnce", "srcCSS3", "srcCcss10", "srcScss1", "srcCsonOnce", "srcSCss3", "srcCcss2", "srcLass2", "srcCxx0"], "destCss1": ["destCass5", "destSass0", "destChess0", "destCrss0", "destCxxPre", "destScss0", "destCcss100", "destCxx2", "destScss1", "destSss2", "destCss0", "destChess100", "destSassPre", "destCass2", "destCxx0", "destCcssPre", "destScss2", "destChess1", "destSss5", "destScss5", "destCass1", "destCxx1", "destCcss2", "destSss100", "destSss1", "destCss100", "destCcss1", "destCrss1", "destCassPre", "destSss0", "destCrss2", "destCcss0", "destSass100", "destSssPre", "destCcss5", "destSass1", "destCssPre", "destCrss5", "destCass100", "destSass2", "destCass0", "destChess2"], "srcCss2": ["srcCcss4", "srcCsv52", "srcCtx1", "srcSCss2", "srcCss8", "srcCsv2", "srcCffee1", "srcCson2", "srcCsv3", "srcCcssTwo", "srcSCss1", "srcCson1", "srcCfg4", "srcCcss52", "srcCson8", "srcCcss3", "srcCtxTwo", "srcCson4", "srcCcss48", "srcCsv48", "srcCcss1", "srcCtx2", "srcCfg8", "srcCfg2", "srcCsv1", "srcCass4", "srcSCass1", "srcCfg1", "srcCass2", "srcCss52", "srcCss48", "srcCffee52", "srcSCss4", "srcCssTwo", "srcCassTwo", "srcCcss8", "srcSCass2", "srcSCssTwo", "srcSCassTwo", "srcCffee3", "srcSCass4", "srcCffee2", "srcCass1", "srcCcss2", "srcCtx4"], "destCss2": ["destCcss02", "destCcs42", "destCrosse1", "destSss2", "destCcss56", "destCcs2", "destCass3", "destCcss42", "destCss42", "destCss56", "destCass2", "destCSS3", "destCrosse2", "destCcss4", "destCcs3", "destCss02", "destCcss3", "destCass1", "destCass56", "destChess56", "destCcss2", "destSss1", "destCcss1", "destCass4", "destCSS42", "destSss3", "destSss56", "destCSS2", "destSass3", "destCSS02", "destSass1", "destCcs02", "destSass56", "destSass2", "destChess2", "destChess1", "destChess3", "destCrosse4"], "srcCss3": ["srcSss43", "srcScss3", "srcCossthree", "srcCrss1", "srcCcssThird", "srcCass4", "srcCass03", "srcCass3", "srcCSS1", "srcCass43", "srcCsv3", "srcCxx3", "srcCcss3", "srcCSS2", "srcCss03", "srcCsv1", "srcScss03", "srcCrss2", "srcCcss43", "srcCess6", "srcCoss3", "srcCcss4", "srcCcssThree", "srcCassThree", "srcCessthree", "srcCessThree", "srcCrss3", "srcCcssthree", "srcScss43", "srcCoss6", "srcSss3", "srcCess4", "srcCsv2", "srcCcss03", "srcCessThird", "srcCssthree", "srcCcss6", "srcCassThird", "srcCssThree", "srcCess3", "srcCxx43", "srcSss03", "srcCss43", "srcCssThird", "srcCxx03", "srcCSS3"], "destCss3": ["destCcss23", "destCss53", "destCass3", "destCass23", "destCSS30", "destCass2", "destCSS3", "destCass30", "destCcss53", "destCcss83", "destCcss3", "destCass03", "destCss23", "destCass1", "destCls83", "destCss83", "destCcss2", "destCls3", "destCfg3", "destCcss1", "destCess83", "destCess53", "destCls53", "destCcss30", "destCfg23", "destCcss03", "destCess3", "destCSS1", "destCSS2", "destCss03", "destCss30", "destCfg03"], "srcCss4": ["srcCSS4", "srcCcss4", "srcCsv2", "srcScss2", "srcCSSFour", "srcCcssFour", "srcSssFour", "srcCcss5", "srcCsv5", "srcSss2", "srcCSS2", "srcSss5", "srcCSS5", "srcScss4", "srcCssFour", "srcCsv4", "srcCsvFour", "srcScssFour", "srcScss5", "srcCcss2", "srcSss4"]}}
{"id1": "15896098", "id2": "4798332", "code1": "    public String getSHA256Checksum(String source) {\n        String checksum = \"\";\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n            md.update(source.getBytes());\n            byte[] byteData = md.digest();\n            StringBuffer sb = new StringBuffer();\n            for (int i = 0; i < byteData.length; i++) {\n                sb.append(Integer.toString((byteData[i] & 0xff) + 0x100, 16).substring(1));\n            }\n            System.out.println(\"Hex format : \" + sb.toString());\n            StringBuffer hexString = new StringBuffer();\n            for (int i = 0; i < byteData.length; i++) {\n                String hex = Integer.toHexString(0xff & byteData[i]);\n                if (hex.length() == 1) {\n                    hexString.append('0');\n                }\n                hexString.append(hex);\n            }\n            checksum = hexString.toString();\n        } catch (NoSuchAlgorithmException ex) {\n            Logger.getLogger(CMessageDigestFile.class.getName()).log(Level.SEVERE, null, ex);\n        }\n        return checksum;\n    }\n", "code2": "    public static String SHA(String source) {\n        logger.info(source);\n        String result = null;\n        try {\n            MessageDigest digest = MessageDigest.getInstance(\"SHA\");\n            digest.update(source.getBytes());\n            byte[] bytes = digest.digest();\n            result = EncodeUtils.hexEncode(bytes);\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        }\n        logger.info(result);\n        return result;\n    }\n", "label": 1, "substitutes": {"getSHA256Checksum": ["getSHA256Chechecksum", "getSHA256Checkchecksume", "getSHA256Checkcksums", "getSHA256Checsam", "getSHA256Chechecksam", "getSHA256Chechecksume", "getSHA256Checkum", "getSHA256Checkcksam", "getSHA256Checsum", "getSHA256Checksam", "getSHA256Checkchecksums", "getSHA256Chechecksums", "getSHA256Checsums", "getSHA256Checkchecksum", "getSHA256Checkcksume", "getSHA256Checkume", "getSHA256Checksume", "getSHA256Checkam", "getSHA256Checksums", "getSHA256Checkcksum", "getSHA256Checsume", "getSHA256Checkchecksam", "getSHA256Checkums"], "source": ["text", "seed", "sample", "secret", "subject", "path", "string", "file", "sequence", "src", "in", "context", "SOURCE", "from", "target", "style", "filename", "url", "output", "content", "ource", "status", "base", "reason", "buffer", "Source", "message", "s", "out", "raw", "format", "input", "name", "template", "data", "value", "image", "this", "body"], "checksum": ["checksumb", "cksum", "cssum", "ckssum", "checkume", " checksums", " checkssum", "csum", "checkum", "checksume", " checksumb", " checksim", "checkssum", "cksumb", "checkim", "checksums", "cksums", "cksim", " checksume", "csim", "checkumb", "cksume", "csume", "checkums", "checksim"], "md": ["mc", "d", "dr", "pdf", "pd", "ld", "mt", "mod", "mo", "di", " MD", "sm", "nt", "red", "det", "ad", "m", "down", "pm", "def", "sd", "ms", "dd", "mand", "hd", "mm", "ind", "mk", "cd", "od", "bd", "mg", "mn", "dm", "Cmd", "mp", "der", "dh", "df", "mb", "cmd", "grad", "MD", " Md", "wd"], "byteData": ["bytesDATA", " byteList", " byteBytes", "ByteData", "reverseCount", "sliceDat", " byteDat", "ioDATA", " byteArray", "routeDat", "routeCount", " byteParts", "bytesData", "byteArray", "byteParts", "bleData", "ByteBytes", "byteDat", "ioData", "wordDATA", "bledata", " byteRel", "ioDat", "sliceData", "phraseParts", "wordBytes", "reverseDATA", "phraseData", "byteList", "bytesArray", "ioList", "byteCount", " byteDATA", "channelRel", "ByteParts", "byteRel", "bytesBytes", "channelParts", "routeData", "ByteDATA", "bytedata", "bleParts", "phraseDATA", " byteCount", "sliceDATA", "byteDATA", "reverseDat", " bytedata", "phraseBytes", "wordData", "byteBytes", "wordArray", "bleRel", "channeldata", "routeDATA", "reverseData", "sliceList", "channelData"], "sb": ["sq", "pb", "SF", "lp", "sw", "sbm", "nb", "b", "bt", "bg", "sm", "rb", "kb", "sg", "bb", "si", "shell", "obb", "sam", "bash", "bh", "xb", "sa", "ib", "ssl", "bis", "sf", "bps", "erb", "bs", "sp", "eb", "db", "bsp", "ub", "sv", "bf", "zb", "cb", "ob", "mb", "bj", "wb", "gb", "sh", "SB", "lb"], "i": ["I", "iq", "point", "print", "ini", "iy", "ci", "m", "gu", "qi", "list", "ix", "json", "ui", "this", "er", "y", "err", "ic", "gi", "io", "ion", "\u0438", "phi", "oi", "ri", "mi", "iu", "cli", "ims", "o", "loop", "set", "ms", "series", "client", "major", "me", "chain", "ip", "ti", "li", "id", "my", "history", "ity", "si", "to", "pi", "multi", "init", "ime", "ind", "ei", "ij", "im", "ai", "sim", "l", "it", "hi", "bi", "ji", "any", "di", "ki", "remote", "ii", "j", "ski", "life", "uri", "q", "xi", "ie", "u", "g", "info"], "hexString": ["hexstring", "shortResource", "htmlString", "shortstring", "htmlBuffer", "shortArray", "fullBuffer", "hexBuffer", "exstring", "exStore", " hexBuffer", " HexString", "fullString", "hashBuffer", "hashstring", " hexStore", "hashArray", "fullstring", "shortString", " hexstring", " hexResource", " Hexstring", " HexBuffer", "htmlArray", "exBuffer", "hexResource", " hexArray", "htmlstring", "exString", "shortBuffer", " HexResource", "hashString", "fullStore", "exArray", "hexArray", "hexStore"], "hex": ["sex", "solid", "h", "alph", "des", "tex", "term", "zh", "pex", "cat", "rex", "rendered", " Hex", "mix", "prop", "oct", "he", "ex", "ext", "rh", "alias", "html", "ph", "dump", "def", "form", "com", "comp", "raw", "none", "exp", " ex", "hl", "x", "cont", " sex", "hello", "lit", "json", "tx", "full", "php", "temp", "sh", "flash"]}}
{"id1": "4223002", "id2": "17773263", "code1": "    public String getPasswordMD5() {\n        try {\n            MessageDigest algorithm = MessageDigest.getInstance(\"MD5\");\n            algorithm.reset();\n            algorithm.update(password.getBytes());\n            byte messageDigest[] = algorithm.digest();\n            StringBuffer hexString = new StringBuffer();\n            for (int i = 0; i < messageDigest.length; i++) {\n                hexString.append(Integer.toHexString(0xFF & messageDigest[i]));\n            }\n            return hexString.toString();\n        } catch (NoSuchAlgorithmException nsae) {\n        }\n        return null;\n    }\n", "code2": "    public boolean visar() throws SQLException, ClassNotFoundException, Exception {\n        Connection conn = null;\n        PreparedStatement ps = null;\n        Date fechaSystem = new Date();\n        DateFormat aaaammdd = new SimpleDateFormat(\"yyyyMMdd\");\n        DateFormat hhmmss = new SimpleDateFormat(\"HHmmss\");\n        DateFormat sss = new SimpleDateFormat(\"S\");\n        String ss = sss.format(fechaSystem);\n        if (ss.length() > 2) {\n            ss = ss.substring(0, 2);\n        }\n        boolean visado = false;\n        try {\n            conn = ToolsBD.getConn();\n            conn.setAutoCommit(false);\n            String sentenciaSql = \"UPDATE BZMODIF SET FZJCUSVI=?, FZJFVISA=?, FZJHVISA=?\" + ((hayVisadoExtracto) ? \", FZJIEXTR=?\" : \"\") + ((hayVisadoRemitente) ? \", FZJIREMI=?\" : \"\") + \" WHERE FZJCENSA='S' AND FZJCAGCO=? AND FZJNUMEN=? AND FZJANOEN=? AND FZJFMODI=? AND FZJHMODI=?\";\n            ps = conn.prepareStatement(sentenciaSql);\n            ps.setString(1, usuarioVisado);\n            ps.setInt(2, Integer.parseInt(aaaammdd.format(fechaSystem)));\n            ps.setInt(3, Integer.parseInt(hhmmss.format(fechaSystem) + ss));\n            int contador = 4;\n            if (hayVisadoExtracto) {\n                ps.setString(contador++, \"X\");\n            }\n            if (hayVisadoRemitente) {\n                ps.setString(contador++, \"X\");\n            }\n            ps.setInt(contador++, oficina);\n            ps.setInt(contador++, numeroRegistro);\n            ps.setInt(contador++, anoSalida);\n            ps.setString(contador++, fechaModificacion);\n            ps.setString(contador++, horaModificacion);\n            int registrosAfectados = ps.executeUpdate();\n            if (registrosAfectados > 0 && !hayVisadoExtracto && !hayVisadoRemitente) {\n                visado = true;\n            }\n            if (registrosAfectados > 0 && (hayVisadoExtracto || hayVisadoRemitente)) {\n                boolean generado = generarBZVISAD(conn, Integer.parseInt(aaaammdd.format(fechaSystem)), Integer.parseInt(hhmmss.format(fechaSystem) + ss));\n                if (generado) {\n                    visado = actualizarBZSALIDA(conn);\n                }\n                String rem = \"\";\n                String com = \"\";\n                if (hayVisadoRemitente) {\n                    if (!remitente.trim().equals(\"\")) {\n                        rem = remitente;\n                    } else {\n                        javax.naming.InitialContext contexto = new javax.naming.InitialContext();\n                        Object ref = contexto.lookup(\"es.caib.regweb.ValoresHome\");\n                        ValoresHome home = (ValoresHome) javax.rmi.PortableRemoteObject.narrow(ref, ValoresHome.class);\n                        Valores valor = home.create();\n                        rem = valor.recuperaRemitenteCastellano(entidad1, entidad2 + \"\");\n                        valor.remove();\n                    }\n                } else {\n                    if (!altres.trim().equals(\"\")) {\n                        rem = remitente;\n                    } else {\n                        javax.naming.InitialContext contexto = new javax.naming.InitialContext();\n                        Object ref = contexto.lookup(\"es.caib.regweb.ValoresHome\");\n                        ValoresHome home = (ValoresHome) javax.rmi.PortableRemoteObject.narrow(ref, ValoresHome.class);\n                        Valores valor = home.create();\n                        rem = valor.recuperaRemitenteCastellano(entidad1Old, entidad2Old + \"\");\n                        valor.remove();\n                    }\n                }\n                if (hayVisadoExtracto) {\n                    com = extracto;\n                } else {\n                    com = comentario;\n                }\n                try {\n                    Class t = Class.forName(\"es.caib.regweb.module.PluginHook\");\n                    Class[] partypes = { String.class, Integer.class, Integer.class, Integer.class, Integer.class, String.class, String.class, String.class, Integer.class, Integer.class, String.class, Integer.class, String.class };\n                    Object[] params = { \"V\", new Integer(anoSalida), new Integer(numeroRegistro), new Integer(oficina), new Integer(fechaDocumento), rem, com, tipoDocumento, new Integer(fechaRegistro), new Integer(fzacagge), fora, new Integer(destinatario), idioma };\n                    java.lang.reflect.Method metodo = t.getMethod(\"salida\", partypes);\n                    metodo.invoke(null, params);\n                } catch (IllegalAccessException iae) {\n                } catch (IllegalArgumentException iae) {\n                } catch (InvocationTargetException ite) {\n                } catch (NullPointerException npe) {\n                } catch (ExceptionInInitializerError eiie) {\n                } catch (NoSuchMethodException nsme) {\n                } catch (SecurityException se) {\n                } catch (LinkageError le) {\n                } catch (ClassNotFoundException le) {\n                }\n            }\n            conn.commit();\n            int fzahsis = Integer.parseInt(hhmmss.format(fechaSystem) + ss);\n            String Stringsss = sss.format(fechaSystem);\n            switch(Stringsss.length()) {\n                case (1):\n                    Stringsss = \"00\" + Stringsss;\n                    break;\n                case (2):\n                    Stringsss = \"0\" + Stringsss;\n                    break;\n            }\n            int horamili = Integer.parseInt(hhmmss.format(fechaSystem) + Stringsss);\n            int fzafsis = Integer.parseInt(aaaammdd.format(fechaSystem));\n            logLopdBZMODIF(\"UPDATE\", sessioEjb.getCallerPrincipal().getName().toUpperCase(), fzafsis, horamili, 'S', numeroRegistro, anoSalida, oficina, Integer.parseInt(fechaModificacion), Integer.parseInt(horaModificacion));\n        } catch (Exception e) {\n            System.out.println(\"Error: \" + e.getMessage());\n            e.printStackTrace();\n            visado = false;\n            try {\n                if (conn != null) conn.rollback(); else System.out.println(\"ERROR: No es pot fer rollback sense connexi\u00f3!\");\n            } catch (Exception ex) {\n                System.out.println(\"Error: \" + e.getMessage());\n                ex.printStackTrace();\n            }\n        } finally {\n            ToolsBD.closeConn(conn, ps, null);\n        }\n        return visado;\n    }\n", "label": 0, "substitutes": {"getPasswordMD5": ["getPasswordSM6", "getPasswordmd5", "getPasswordSM4", "getTokenSM512", "getPasswordMD512", "getPasswordHS5", "getPasswordmd4", "getPasswordSM512", "getTokenMD4", "getPasswordHS512", "getPasswordHS6", "getPasswordMD4", "getTokenSM5", "getTokenSM4", "getPasswordSM5", "getPasswordmd512", "getTokenSM6", "getTokenMD512", "getTokenMD5", "getPasswordMD6", "getTokenMD6", "getPasswordmd6", "getPasswordHS4"], "algorithm": ["alphgebra", " Almother", "malgorith", "alric", "malgorithm", " already", "malchemist", "eargebra", "approgorith", "halignment", "omalgo", "alphric", "Algo", "Algorithm", "thechemist", "halgorith", "themother", "omalgorith", "eargorithm", "halric", " algo", " aluristic", "alphgorithm", "approready", "earric", "malmother", "halgebra", "algo", "eargorith", "Algorith", " algorith", "Aluristic", "thegorithm", "alignment", "already", " Alchemist", "alphgorith", "halready", "omaluristic", "alchemist", "approignment", " Algorithm", "approgorithm", " Algorith", "aluristic", "almother", "algorith", "halgorithm", "thegorith", "algebra", " alignment", "omalgorithm"], "messageDigest": ["messagedigests", "messageDigist", "messageAndester", "MessagedigEST", "messageDigested", "messagedigested", "Messagedigse", "messageDse", "Messagedigest", "messageMixests", "messageDriist", "messageDests", "messagedigEST", "messageAndse", "messageMixse", "messageDigse", " messagedigester", "messageDriester", "messageDrise", "messageDigitalEST", "MessageDigest", "messageDesignester", "messageDigests", "MessageDigse", "MessageDigests", "messageMixEST", "messageDigester", "messageDigEST", "MessageDigester", "messageAndest", "messageDesignest", "messagedigest", "messageMixest", "messageAndist", " messageDigester", "messageDriest", "messagedigist", "Messagedigests", "messageDigitalested", "messageDigitalest", "messageDEST", "messageDigitalester", " messagedigested", "Messagedigester", " messagedigEST", "messageDesignEST", "messageDest", "messageDesignested", " messagedigest", " messageDigested", " messageDigEST", "MessageDigist", "MessageDigEST", "messagedigse", "Messagedigist", "messagedigester"], "hexString": ["octstring", "hexstring", "octString", "stringBuffer", "httpsString", "hexBuffer", "exScreen", "exstring", "httpsstring", " hexBuffer", "textBuffer", "textStatement", "stringstring", " hexstring", "stringArray", "httpsBuffer", "httpsScreen", "exBuffer", " hexArray", "textString", "exString", "httpsArray", "hexScreen", "stringString", "textArray", " hexStatement", "hexStatement", "octScreen", "exArray", "octArray", "hexArray", "httpsStatement"], "i": ["ti", "ji", "I", "ic", "zi", "li", "gi", "io", "my", "point", "is", "di", "ii", "in", "\u0438", "j", "span", "phi", "ri", "mi", "si", "c", "ex", "n", "a", "pi", "ci", "m", "ski", "cli", "yi", "uri", "o", "set", "loop", "ms", "multi", "q", "init", "xi", "ie", "ind", "ei", "u", "gu", "client", "x", "qi", "im", "key", "chain", "ai", "ix", "sim", "ip", "it", "us", "bi", "ui", "hi", "y"]}}
{"id1": "4852691", "id2": "12744653", "code1": "    public static final synchronized String hash(String data) {\n        if (digest == null) {\n            try {\n                digest = MessageDigest.getInstance(\"MD5\");\n            } catch (NoSuchAlgorithmException nsae) {\n                System.err.println(\"Failed to load the MD5 MessageDigest. \" + \"Jive will be unable to function normally.\");\n                nsae.printStackTrace();\n            }\n        }\n        digest.update(data.getBytes());\n        return toHex(digest.digest());\n    }\n", "code2": "    private void getRandomGUID(boolean secure) {\n        MessageDigest md5 = null;\n        StringBuffer sbValueBeforeMD5 = new StringBuffer();\n        try {\n            md5 = MessageDigest.getInstance(\"MD5\");\n        } catch (NoSuchAlgorithmException e) {\n            System.out.println(\"Error: \" + e);\n        }\n        try {\n            long time = System.currentTimeMillis();\n            long rand = 0;\n            if (secure) {\n                rand = mySecureRand.nextLong();\n            } else {\n                rand = myRand.nextLong();\n            }\n            sbValueBeforeMD5.append(s_id);\n            sbValueBeforeMD5.append(\":\");\n            sbValueBeforeMD5.append(Long.toString(time));\n            sbValueBeforeMD5.append(\":\");\n            sbValueBeforeMD5.append(Long.toString(rand));\n            valueBeforeMD5 = sbValueBeforeMD5.toString();\n            md5.update(valueBeforeMD5.getBytes());\n            byte[] array = md5.digest();\n            StringBuffer sb = new StringBuffer();\n            for (int j = 0; j < array.length; ++j) {\n                int b = array[j] & 0xFF;\n                if (b < 0x10) {\n                    sb.append('0');\n                }\n                sb.append(Integer.toHexString(b));\n            }\n            valueAfterMD5 = sb.toString();\n        } catch (Exception e) {\n            System.out.println(\"Error:\" + e);\n        }\n    }\n", "label": 1, "substitutes": {"hash": ["h", "string", "id", " check", "print", " text", "update", " message", "run", "code", " equals", "dump", " h", " encoding", " fingerprint", " salt", " mac", "sign", " Hash", "hex", "Hash", " key", "sum", " hashing", " signature", " sum"], "data": ["text", "d", "sample", "secret", "bytes", "batch", "ata", "dat", "string", "sequence", "any", "output", "content", "area", "what", "dump", "padding", "buffer", "form", "message", "result", "raw", "action", "input", "name", "value", "image", "password", "hello", "DATA", "json", "info", "this", "state", "space", "command"], "digest": ["digute", "redger", "mdested", "duger", " digests", "dese", "digested", " digEST", "Digse", "Digested", "mdest", " hexest", "DigEST", "redose", " hexests", " hexute", "deest", "mdEST", "Digest", "mdester", "digests", " digested", "digEST", "digger", "Digester", "Digute", "Digist", " digester", " digose", "duest", "redist", "signEST", "deEST", "signested", " digist", "Digests", "duose", "redest", "deist", " digse", "digist", "digse", "duist", " hexested", " digger", "signest", "mdse", "digester", " digute", "signse", "digose"]}}
{"id1": "9802073", "id2": "20851065", "code1": "    public void testAutoCommit() throws Exception {\n        Connection con = getConnectionOverrideProperties(new Properties());\n        try {\n            Statement stmt = con.createStatement();\n            assertEquals(0, stmt.executeUpdate(\"create table #testAutoCommit (i int)\"));\n            con.setAutoCommit(false);\n            assertEquals(1, stmt.executeUpdate(\"insert into #testAutoCommit (i) values (0)\"));\n            con.setAutoCommit(false);\n            con.rollback();\n            assertEquals(1, stmt.executeUpdate(\"insert into #testAutoCommit (i) values (1)\"));\n            con.setAutoCommit(true);\n            con.setAutoCommit(false);\n            con.rollback();\n            con.setAutoCommit(true);\n            ResultSet rs = stmt.executeQuery(\"select i from #testAutoCommit\");\n            assertTrue(rs.next());\n            assertEquals(1, rs.getInt(1));\n            assertFalse(rs.next());\n            rs.close();\n            stmt.close();\n        } finally {\n            con.close();\n        }\n    }\n", "code2": "    public void open(String openStr) throws IOException {\n        String commProtocol = \"comm:\";\n        String rxtxProtocol = \"rxtx:\";\n        String netProtocol = \"net:\";\n        if (openStr.startsWith(commProtocol)) {\n            CommConnection commConnection = CommConnection.open(openStr.substring(commProtocol.length()));\n            this.setInputStream(commConnection.getInputStream());\n            this.setOutputStream(commConnection.getOutputStream());\n        } else if (openStr.startsWith(rxtxProtocol)) {\n            RXTXConnection rxtxConnection = RXTXConnection.open(openStr.substring(commProtocol.length()));\n            this.setInputStream(rxtxConnection.getInputStream());\n            this.setOutputStream(rxtxConnection.getOutputStream());\n        } else if (openStr.startsWith(netProtocol)) {\n            SocketConnection socketConn = SocketConnection.open(openStr.substring(netProtocol.length()));\n            this.setInputStream(socketConn.getInputStream());\n            this.setOutputStream(socketConn.getOutputStream());\n        } else {\n            URL url = new URL(openStr);\n            URLConnection urlConn = url.openConnection();\n            this.setInputStream(urlConn.getInputStream());\n            try {\n                this.setOutputStream(urlConn.getOutputStream());\n            } catch (UnknownServiceException e) {\n            }\n        }\n    }\n", "label": 0, "substitutes": {"testAutoCommit": ["testAutoCompute", "testAutoDebit", "testAutoCompit", "testAutoCompmit", "testAutoDebute", "testAutoComute", "testAutoComit", "testAutoCompits", "testAutoComits", "testAutoDebmit", "testAutoCommute", "testAutoCommmit", "testAutoCommits", "testAutoDebits"], "con": ["local", "win", "Con", "ln", "mc", "cur", "cos", "fl", "canon", "fc", "dial", "en", "cat", "clean", "rec", "conv", "Conn", "fac", "obj", "ca", "ctrl", "const", "cons", "conf", "comm", "re", "cp", "go", "c", "bo", "call", "ctx", "act", "gen", "connection", "res", "cc", "gc", "col", "cf", "ct", "com", "connect", "out", "conn", "cn", "client", "xc", "cm", "nc", "ain", "ran", "don", "ac", "pen", "rc", "enc", "coll", "tc", "cal", "can", "ver", " conn", "bc", "co", "CON"], "stmt": ["Stmp", "starm", "Stmm", "stmb", "stmp", "Starm", " superstmt", "StMT", "statct", " superstarm", " stm", "stct", "stMT", "stpt", "Stpt", "statmm", " superstm", " superstmb", "STm", " starm", "statm", "strm", "statgr", "strmb", "STMT", "STmp", "Stct", "STpt", "STmb", "Stmt", " stgr", " stct", "Stm", "strmm", "stmm", "stgr", "strgr", " stmm", "Stmb", "statmb", " stmp", " stpt", "strmp", "STmt", "statmt", "stm", " stmb", " stMT", "strmt"], "rs": ["sr", "js", "ks", "arms", "results", "vs", "ars", "ubs", "acks", "dds", "ats", "ges", "ws", "RS", "xs", "ows", "ems", "ls", "mr", "hs", "cks", "gs", "rys", "rates", "stats", "cs", "res", "obs", "ims", "ues", "vers", "fs", "times", "ros", "ms", "bs", "rd", "icks", "acs", "ares", "its", "rt", "usr", "ds", "ris", "ags", "ers", "sys", "sts", "rc", "ra", "ras", "rows", "Rs", "irms", "ins", "ires", "ss", "qs", "ys"]}}
{"id1": "13720140", "id2": "16048516", "code1": "    private void modifyProperty(String valueID, String value, Long userID) throws JspTagException {\n        Property property = new Property(new Long(valueID), userID);\n        String newValue = value;\n        System.out.println(property.getName());\n        if (property.getName().equals(\"Password\")) {\n            try {\n                MessageDigest crypt = MessageDigest.getInstance(\"MD5\");\n                crypt.update(value.getBytes());\n                byte digest[] = crypt.digest();\n                StringBuffer hexString = new StringBuffer();\n                for (int i = 0; i < digest.length; i++) {\n                    hexString.append(hexDigit(digest[i]));\n                }\n                newValue = hexString.toString();\n                crypt.reset();\n            } catch (NoSuchAlgorithmException e) {\n                System.err.println(\"jspShop: Could not get instance of MD5 algorithm. Please fix this!\" + e.getMessage());\n                e.printStackTrace();\n                throw new JspTagException(\"Error crypting password!: \" + e.getMessage());\n            }\n        }\n        property.setValue(newValue);\n    }\n", "code2": "    public static SVNConfiguracion load(URL urlConfiguracion) {\n        SVNConfiguracion configuracion = null;\n        try {\n            XMLDecoder xenc = new XMLDecoder(urlConfiguracion.openStream());\n            configuracion = (SVNConfiguracion) xenc.readObject();\n            configuracion.setFicheroConfiguracion(urlConfiguracion);\n            xenc.close();\n        } catch (Exception exception) {\n            exception.printStackTrace();\n        }\n        return configuracion;\n    }\n", "label": 0, "substitutes": {"modifyProperty": ["modifyValue", "modifiesProp", "modifiesValue", "modifiesAttribute", "ModifyValue", "modateProp", "ModifyProp", "ModifiesProperty", "modateProperty", "modateAttribute", "modifyAttribute", "modifiesProperty", "ModifiesValue", "ModifyProperty", "ModifiesProp", "modateValue", "ModifiesAttribute", "modifyProp", "modureAttribute", "modureProp", "ModifyAttribute", "modureValue", "modureProperty"], "valueID": ["VALUEID", " valueUID", "valueMD", " valueId", "versionId", "propertyId", " valueid", " valueMD", "valueId", " valueIDs", "VALUEId", "VALUEMD", "versionID", "valueUID", "propertyID", "valueIDs", "propertyIDs", "versionMD", "versionIDs", "versionid", "versionUID", "VALUEUID", "propertyid", "valueid"], "value": ["text", "val", "address", "v", "function", "description", "string", "field", "variable", "VALUE", "update", "current", "output", "attribute", "content", "Value", "instance", "label", "code", "expression", "padding", "buffer", "example", "message", "format", "vector", "get", "input", "name", "comment", "data", "application", "save", "key", "password", "memory", "hello", "version", "default", "state", "type", "entry", "values"], "userID": [" userName", "ownerName", " userURL", "usernameId", " userType", "UserType", "ownerID", "userId", "userURL", "usernameURL", "UserURL", "userName", "usernameID", " userId", "ownerId", "usernameName", "UserName", "UserId", "UserID", "userType", "ownerType"], "property": ["item", "address", "module", "function", "description", "field", "p", "term", "pair", "resource", "print", "properties", "position", "method", "style", "attribute", "Property", "section", "to", "relation", "alias", "label", "profile", "title", "language", "claim", "license", "config", "expression", "prefix", "table", "pe", "message", "feature", "project", "second", "setup", "associated", "name", "operator", "object", "media", "data", "key", "metadata", "prototype", "ty", "option", "type", "state", "prop", "this", "translation", "policy", "display", "command"], "newValue": ["newValues", "NEWResult", "oldVersion", "uniqueVersion", " newMessage", "newString", " newName", "uniqueName", "NEWValue", "newvalue", " newValues", " newvalue", "oldResult", "uniqueValue", "NewValue", " newResult", "oldvalue", "newName", " newString", "uniqueMessage", "newResult", "newVersion", "newMessage", "oldString", "NEWvalue", "oldName", "NewValues", "NewString", "Newvalue", "oldValues", "NEWString", "oldValue", " newVersion", "oldMessage"], "crypt": ["rypt", "mac", "cook", "dec", "cmp", "cos", "cur", "CR", "pt", "ctr", "magic", "prot", "hash", "sm", "nt", "conv", "auth", "go", "comm", "cp", "rem", "cy", "rh", "check", "trust", "mem", "cs", "cr", "code", "cc", "ssl", "gc", "rot", "col", "ct", "init", "ch", "core", "cert", "bec", "roy", "cm", "sync", "cry", "sys", "hex", "cont", "reset", "Crypt", "password", "enc", "cot", "coll", "ocr", "cmd", "coin", "dict", "arch"], "digest": [" Digester", "mdested", "hashge", "hashests", "digested", " digEST", "Diggest", "Digested", "mdest", "mdge", "digge", "DigEST", " DigEST", "dester", "dest", "mdEST", "Digest", "digert", "digests", "mdester", "Digestamp", "digestamp", " digested", " Digest", "digEST", "Digester", "mdgest", "mdestamp", "hexester", "diggest", "Digert", "hexert", "hexest", " Digert", "hexEST", "dested", "hashest", "mdests", "dEST", " digestamp", "Digests", "hashgest", "digester", "Digge"], "hexString": ["hexstring", "shortStr", "shortstring", " hexStr", "hexBuffer", " hexBytes", "exstring", " hexBuffer", "formString", "hashstring", "hashArray", "shortString", "exBytes", " hexstring", "hashStr", "formBytes", "exBuffer", " hexArray", "hexStr", "hexBytes", "exString", "shortBuffer", "exStr", "hashString", "exArray", "formBuffer", "hexArray", "formStr"], "i": ["ti", "v", "ji", "I", "number", "ic", "li", "id", "io", "gi", "point", "is", "di", "e", "ki", "ii", "\u0438", "j", "span", "phi", "mi", "si", "index", "ex", "ini", "a", "pi", "ci", "m", "cli", "uri", "o", "ms", "slice", "multi", "q", "init", "ie", "ind", "gu", "u", "ei", "major", "x", "qi", "im", "chain", "ai", "ix", "sim", "ip", "it", "bi", "us", "ui", "info", "hi", "y"]}}
{"id1": "804637", "id2": "19910627", "code1": "    private static void readAndRewrite(File inFile, File outFile) throws IOException {\n        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n        Dataset ds = DcmObjectFactory.getInstance().newDataset();\n        dcmParser.setDcmHandler(ds.getDcmHandler());\n        dcmParser.parseDcmFile(null, Tags.PixelData);\n        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        System.out.println(\"reading \" + inFile + \"...\");\n        pdReader.readPixelData(false);\n        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n        ds.writeDataset(out, dcmEncParam);\n        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n        System.out.println(\"writing \" + outFile + \"...\");\n        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        pdWriter.writePixelData();\n        out.flush();\n        out.close();\n        System.out.println(\"done!\");\n    }\n", "code2": "    public String getData(DefaultHttpClient httpclient) {\n        try {\n            HttpGet get = new HttpGet(\"http://3dforandroid.appspot.com/api/v1/note\");\n            get.setHeader(\"Content-Type\", \"application/json\");\n            get.setHeader(\"Accept\", \"*/*\");\n            HttpResponse response = httpclient.execute(get);\n            HttpEntity entity = response.getEntity();\n            InputStream instream = entity.getContent();\n            responseMessage = read(instream);\n            if (instream != null) instream.close();\n        } catch (ClientProtocolException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return responseMessage;\n    }\n", "label": 0, "substitutes": {"readAndRewrite": ["readAndrewWrite", "readAndResrite", "readAndResend", "readAndReprites", "readAndRewWrite", "readAndrewrites", "readAndRewend", "readAndResrites", "readAndrewend", "readAndReprite", "readAndResWrite", "readAndRepWrite", "readAndRewrites", "readAndRepend", "readAndrewrite"], "inFile": ["docFile", "InFilename", "inFILE", "docFILE", "initFilename", "docFilename", "Infile", "inputFile", "iTime", "inputFilename", "iFilename", "INPlace", " inFilename", "outfile", " infile", "inputFace", "InFile", "infile", "INFILE", "INFilename", "INFace", "inPlace", "inFace", "initFile", "initFace", "iFile", "initPlace", "INFile", "iFILE", "inputPlace", "inTime", "outFilename", "INTime", "inFilename", "docTime"], "outFile": ["outFILE", "checkFile", "inFILE", "checkFilename", " outFilename", "checkfile", " outfile", "nameFILE", " outFILE", "reportFILE", "outfile", "reportFile", "toFilename", "infile", "nameFile", "reportFilename", "tofile", "checkFILE", "namefile", "outFilename", "nameFilename", "inFilename", "toFILE", "reportfile", "toFile"], "iis": ["liisc", "eIS", " iIS", "eis", "iiss", "iisc", "ii", "liIs", "iIS", "Iiss", " iisc", "liris", "iiis", "Iis", "diIs", "aiis", "iris", "iiris", "diiss", "IIs", "iIs", " iiss", "diis", "aiIS", "iiisc", "dii", " ii", " iIs", "liis", "Ii", "iiIs", " iris", "aiIs", "eIs"], "dcmParser": ["dcfStatement", "dmodulePrivate", " dpmPar", " dpmLoader", "dmmAdapter", "dmoduleParser", " dpmReader", "dpmLoader", "dfmLoader", "dromAssistant", "dmmmAdapter", "dcmAssistant", "DpmAdapter", "dpmparser", "dcfReader", "dmmparser", "dcfParser", "DpmReader", "DcmAdapter", "dcomParser", "dmmmParser", "dmoduleReader", " dcmarser", " dcmLoader", "dcommReader", "dcrParser", "deromarser", "dcrBuilder", "dcmBuilder", "dmparser", "dpcParser", "dpmParser", "dpmarser", "dmmarser", "dfmParser", "dromListener", "dcomLoader", "dcomBuilder", "dcomReader", " dcmListener", "decmReader", "drumBuilder", "dpmAssistant", "dpcPrivate", "drumReader", "dmmmReader", "dpmReader", "dpmBuilder", "dromparser", "decmParser", "dpmPar", "DcmBuilder", "dmmmparser", "dcmLoader", " dpmParser", "decmarser", " dcmparser", "dcrReader", " dpmPrivate", "dpmListener", "deromReader", "drumParser", " dpmBuilder", "dromarser", "decmparser", "dcommParser", "dmParser", " dcmPar", "Dpmparser", "dmmParser", "dfmBuilder", "deromparser", "dpcAssistant", "dmmReader", "DpmParser", "dromParser", "dgrPar", "dgrStatement", " dcmAssistant", "dcfPar", "dcmarser", " dcmBuilder", "DcmReader", " dcmReader", " dpmStatement", "dmoduleAssistant", "dpcReader", "dcommAssistant", "dromReader", " dpmarser", "dcmparser", "dcrparser", "DcmPar", "dmarser", "dpmAdapter", " dpmAssistant", "dcmReader", "dfmReader", "dgrReader", "dcmPrivate", "DpmPar", "dmReader", " dpmparser", "DpmBuilder", "dcmStatement", "dcmListener", "dpmPrivate", " dcmPrivate", " dpmListener", "dcmPar", "dpmStatement", "drumPar", "dgrParser", "dcmAdapter", "Dcmparser", "deromParser", "dcommListener", " dcmStatement", "DcmParser"], "ds": ["d", "js", "ks", "eds", "outs", "pd", "des", "vs", "dat", "da", "dds", "gd", "qs", "dq", "eps", "ws", "xs", "in", "aos", "ls", "hs", "gs", "rs", "tes", "dl", "dx", "uds", "DS", "cs", "obs", "ims", "fs", "ns", "as", "ps", "ads", "sets", "ils", "sd", "dt", "dd", "s", "bs", "pers", "hd", " des", "its", "db", " DS", "services", "Ds", "sys", "data", "bd", "drivers", "sv", "details", "dos", "dh", "der", "ins", "df", "es", "ss", "ods", "os", "ys"], "pdReader": ["dpReader", "tdParser", "dpCar", "pdHelper", "hdReader", "pedReader", "tdWriter", "hdParser", "ddCar", "ddRunner", "hdWriter", "vdReader", "vdHelper", "pdCar", "dpLoader", "pdParser", "pdRead", "xdWriter", "xdReader", "ddRead", "pdLoader", "ddParser", "ddHelper", "vdWriter", "ddLoader", "xdLoader", "pedRunner", "tdReader", "hdRead", "ddReader", "vdLoader", "pdRunner", "tdRead", "pedLoader", "pedCar", "ddWriter", "xdHelper", "dpRunner"], "out": ["serv", "sw", "t", "conv", "msg", "aos", "output", "gen", "auto", "on", "opt", "screen", "ch", "all", "cfg", "name", "con", "list", "ins", "pos", "ent", "pool", "full", "w", "err", "v", "at", "p", "txt", "io", "up", "in", "flush", "c", "ex", " err", "inter", "status", "o", "net", "s", "raw", "tmp", "conn", "cn", "gr", "client", "sys", "data", "one", "sum", "cmd", "outs", "js", "log", "str", "id", "obj", "we", "to", "n", "null", "inner", "res", "outer", "desc", "writer", "over", "OUT", "Out", "cache", "it", "ou", "en", "nr", "nt", "inv", "go", "gt", "end", "oss", "cb", "co", "os"], "dcmEncParam": ["dmmencCmd", "dcmDecNum", "dmmEnPar", "dcmencPar", "dcmEscParam", "dmmencMsg", "dmmEncMsg", "dmmencParam", "dcmEncVal", "dcmEscVal", "dmmEnParam", "dmmEncVal", "dmmEncPar", "dcmEnNum", "dcmEnPar", "dcmDecCmd", "dcmencMsg", "dcmencCmd", "dmmEncNum", "dcmEnVal", "dcmEncMsg", "dcmEncCmd", "dcmDecParam", "dmmEncParam", "dcmencNum", "dcmEscNum", "dcmDecMsg", "dmmEncCmd", "dmmEnNum", "dcmEncNum", "dmmencNum", "dcmencParam", "dcmEscPar", "dcmEnParam", "dcmEncPar"], "pdWriter": ["dpReader", "PDWrite", "dpWrite", "dpEditor", "tdWriter", "pcwriter", "pidWrite", "dpWriter", "PDWriter", "tdWrite", "tdEditor", "PDEditor", "pdEditor", "pdwriter", "pidWriter", "pidWriting", "tdwriter", "pidwriter", "tdReader", "pdWrite", "pcWriter", "PDReader", "pcWrite", "pcWriting", "pdWriting", "tdWriting"]}}
{"id1": "755203", "id2": "1235538", "code1": "    private static void readAndRewrite(File inFile, File outFile) throws IOException {\n        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n        Dataset ds = DcmObjectFactory.getInstance().newDataset();\n        dcmParser.setDcmHandler(ds.getDcmHandler());\n        dcmParser.parseDcmFile(null, Tags.PixelData);\n        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        System.out.println(\"reading \" + inFile + \"...\");\n        pdReader.readPixelData(false);\n        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n        ds.writeDataset(out, dcmEncParam);\n        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n        System.out.println(\"writing \" + outFile + \"...\");\n        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        pdWriter.writePixelData();\n        out.flush();\n        out.close();\n        System.out.println(\"done!\");\n    }\n", "code2": "    public static String encrypt(final String pass) {\n        try {\n            final MessageDigest md = MessageDigest.getInstance(\"SHA\");\n            md.update(pass.getBytes(\"UTF-8\"));\n            return new String(Base64.encodeBase64(md.digest()));\n        } catch (final Exception e) {\n            throw new RuntimeException(\"No se pudo encriptar el password.\", e);\n        }\n    }\n", "label": 0, "substitutes": {"readAndRewrite": ["readAndrewWrite", "readAndResrite", "readAndResend", "readAndReprites", "readAndRewWrite", "readAndrewrites", "readAndRewend", "readAndResrites", "readAndrewend", "readAndReprite", "readAndResWrite", "readAndRepWrite", "readAndRewrites", "readAndRepend", "readAndrewrite"], "inFile": ["docFile", "InFilename", "inFILE", "docFILE", "initFilename", "docFilename", "Infile", "inputFile", "iTime", "inputFilename", "iFilename", "INPlace", " inFilename", "outfile", " infile", "inputFace", "InFile", "infile", "INFILE", "INFilename", "INFace", "inPlace", "inFace", "initFile", "initFace", "iFile", "initPlace", "INFile", "iFILE", "inputPlace", "inTime", "outFilename", "INTime", "inFilename", "docTime"], "outFile": ["outFILE", "checkFile", "inFILE", "checkFilename", " outFilename", "checkfile", " outfile", "nameFILE", " outFILE", "reportFILE", "outfile", "reportFile", "toFilename", "infile", "nameFile", "reportFilename", "tofile", "checkFILE", "namefile", "outFilename", "nameFilename", "inFilename", "toFILE", "reportfile", "toFile"], "iis": ["liisc", "eIS", " iIS", "eis", "iiss", "iisc", "ii", "liIs", "iIS", "Iiss", " iisc", "liris", "iiis", "Iis", "diIs", "aiis", "iris", "iiris", "diiss", "IIs", "iIs", " iiss", "diis", "aiIS", "iiisc", "dii", " ii", " iIs", "liis", "Ii", "iiIs", " iris", "aiIs", "eIs"], "dcmParser": ["dcfStatement", "dmodulePrivate", " dpmPar", " dpmLoader", "dmmAdapter", "dmoduleParser", " dpmReader", "dpmLoader", "dfmLoader", "dromAssistant", "dmmmAdapter", "dcmAssistant", "DpmAdapter", "dpmparser", "dcfReader", "dmmparser", "dcfParser", "DpmReader", "DcmAdapter", "dcomParser", "dmmmParser", "dmoduleReader", " dcmarser", " dcmLoader", "dcommReader", "dcrParser", "deromarser", "dcrBuilder", "dcmBuilder", "dmparser", "dpcParser", "dpmParser", "dpmarser", "dmmarser", "dfmParser", "dromListener", "dcomLoader", "dcomBuilder", "dcomReader", " dcmListener", "decmReader", "drumBuilder", "dpmAssistant", "dpcPrivate", "drumReader", "dmmmReader", "dpmReader", "dpmBuilder", "dromparser", "decmParser", "dpmPar", "DcmBuilder", "dmmmparser", "dcmLoader", " dpmParser", "decmarser", " dcmparser", "dcrReader", " dpmPrivate", "dpmListener", "deromReader", "drumParser", " dpmBuilder", "dromarser", "decmparser", "dcommParser", "dmParser", " dcmPar", "Dpmparser", "dmmParser", "dfmBuilder", "deromparser", "dpcAssistant", "dmmReader", "DpmParser", "dromParser", "dgrPar", "dgrStatement", " dcmAssistant", "dcfPar", "dcmarser", " dcmBuilder", "DcmReader", " dcmReader", " dpmStatement", "dmoduleAssistant", "dpcReader", "dcommAssistant", "dromReader", " dpmarser", "dcmparser", "dcrparser", "DcmPar", "dmarser", "dpmAdapter", " dpmAssistant", "dcmReader", "dfmReader", "dgrReader", "dcmPrivate", "DpmPar", "dmReader", " dpmparser", "DpmBuilder", "dcmStatement", "dcmListener", "dpmPrivate", " dcmPrivate", " dpmListener", "dcmPar", "dpmStatement", "drumPar", "dgrParser", "dcmAdapter", "Dcmparser", "deromParser", "dcommListener", " dcmStatement", "DcmParser"], "ds": ["d", "js", "ks", "eds", "outs", "pd", "des", "vs", "dat", "da", "dds", "gd", "qs", "dq", "eps", "ws", "xs", "in", "aos", "ls", "hs", "gs", "rs", "tes", "dl", "dx", "uds", "DS", "cs", "obs", "ims", "fs", "ns", "as", "ps", "ads", "sets", "ils", "sd", "dt", "dd", "s", "bs", "pers", "hd", " des", "its", "db", " DS", "services", "Ds", "sys", "data", "bd", "drivers", "sv", "details", "dos", "dh", "der", "ins", "df", "es", "ss", "ods", "os", "ys"], "pdReader": ["dpReader", "tdParser", "dpCar", "pdHelper", "hdReader", "pedReader", "tdWriter", "hdParser", "ddCar", "ddRunner", "hdWriter", "vdReader", "vdHelper", "pdCar", "dpLoader", "pdParser", "pdRead", "xdWriter", "xdReader", "ddRead", "pdLoader", "ddParser", "ddHelper", "vdWriter", "ddLoader", "xdLoader", "pedRunner", "tdReader", "hdRead", "ddReader", "vdLoader", "pdRunner", "tdRead", "pedLoader", "pedCar", "ddWriter", "xdHelper", "dpRunner"], "out": ["serv", "sw", "t", "conv", "msg", "aos", "output", "gen", "auto", "on", "opt", "screen", "ch", "all", "cfg", "name", "con", "list", "ins", "pos", "ent", "pool", "full", "w", "err", "v", "at", "p", "txt", "io", "up", "in", "flush", "c", "ex", " err", "inter", "status", "o", "net", "s", "raw", "tmp", "conn", "cn", "gr", "client", "sys", "data", "one", "sum", "cmd", "outs", "js", "log", "str", "id", "obj", "we", "to", "n", "null", "inner", "res", "outer", "desc", "writer", "over", "OUT", "Out", "cache", "it", "ou", "en", "nr", "nt", "inv", "go", "gt", "end", "oss", "cb", "co", "os"], "dcmEncParam": ["dmmencCmd", "dcmDecNum", "dmmEnPar", "dcmencPar", "dcmEscParam", "dmmencMsg", "dmmEncMsg", "dmmencParam", "dcmEncVal", "dcmEscVal", "dmmEnParam", "dmmEncVal", "dmmEncPar", "dcmEnNum", "dcmEnPar", "dcmDecCmd", "dcmencMsg", "dcmencCmd", "dmmEncNum", "dcmEnVal", "dcmEncMsg", "dcmEncCmd", "dcmDecParam", "dmmEncParam", "dcmencNum", "dcmEscNum", "dcmDecMsg", "dmmEncCmd", "dmmEnNum", "dcmEncNum", "dmmencNum", "dcmencParam", "dcmEscPar", "dcmEnParam", "dcmEncPar"], "pdWriter": ["dpReader", "PDWrite", "dpWrite", "dpEditor", "tdWriter", "pcwriter", "pidWrite", "dpWriter", "PDWriter", "tdWrite", "tdEditor", "PDEditor", "pdEditor", "pdwriter", "pidWriter", "pidWriting", "tdwriter", "pidwriter", "tdReader", "pdWrite", "pcWriter", "PDReader", "pcWrite", "pcWriting", "pdWriting", "tdWriting"]}}
{"id1": "5142039", "id2": "19276022", "code1": "    public static String uncompress(String readPath, boolean mkdir) throws Exception {\n        ZipArchiveInputStream arcInputStream = new ZipArchiveInputStream(new FileInputStream(readPath));\n        BufferedInputStream bis = new BufferedInputStream(arcInputStream);\n        File baseDir = new File(readPath).getParentFile();\n        String basePath = baseDir.getPath() + \"/\";\n        if (mkdir) {\n            String[] schema = readPath.split(\"/\");\n            String baseName = schema[schema.length - 1].replaceAll(\".zip\", \"\");\n            FileUtils.forceMkdir(new File(basePath + baseName));\n            basePath = basePath + baseName + \"/\";\n        }\n        ArchiveEntry entry;\n        while ((entry = arcInputStream.getNextEntry()) != null) {\n            if (entry.isDirectory()) {\n                FileUtils.forceMkdir(new File(basePath + entry.getName()));\n            } else {\n                String writePath = basePath + entry.getName();\n                String dirName = FilenameUtils.getPath(writePath);\n                FileUtils.forceMkdir(new File(dirName));\n                BufferedOutputStream bos = new BufferedOutputStream(FileUtils.openOutputStream(new File(writePath)));\n                int i = 0;\n                while ((i = bis.read()) != -1) {\n                    bos.write(i);\n                }\n                IOUtils.closeQuietly(bos);\n            }\n        }\n        IOUtils.closeQuietly(bis);\n        return basePath;\n    }\n", "code2": "    public DataSet parse() throws SnifflibDatatypeException {\n        NumberFormat numformat = NumberFormat.getInstance();\n        if (this.headers.size() != this.types.size()) {\n            throw new SnifflibDatatypeException(\"Different number of headers (\" + this.headers.size() + \") and types(\" + this.types.size() + \").\");\n        }\n        DataSet out = null;\n        if (!this.dryrun) {\n            out = new DataSet();\n        }\n        BufferedReader r = null;\n        StreamTokenizer tokenizer = null;\n        try {\n            if (this.isURL) {\n                if (this.url2goto == null) {\n                    return (null);\n                }\n                DataInputStream in = null;\n                try {\n                    in = new DataInputStream(this.url2goto.openStream());\n                    System.out.println(\"READY TO READ FROM URL:\" + url2goto);\n                    r = new BufferedReader(new InputStreamReader(in));\n                } catch (Exception err) {\n                    throw new RuntimeException(\"Problem reading from URL \" + this.url2goto + \".\", err);\n                }\n            } else {\n                if (this.file == null) {\n                    throw new RuntimeException(\"Data file to be parsed can not be null.\");\n                }\n                if (!this.file.exists()) {\n                    throw new RuntimeException(\"The file \" + this.file + \" does not exist.\");\n                }\n                r = new BufferedReader(new FileReader(this.file));\n            }\n            if (this.ignorePreHeaderLines > 0) {\n                String strLine;\n                int k = 0;\n                while ((k < this.ignorePreHeaderLines) && ((strLine = r.readLine()) != null)) {\n                    k++;\n                }\n            }\n            tokenizer = new StreamTokenizer(r);\n            tokenizer.resetSyntax();\n            tokenizer.eolIsSignificant(true);\n            tokenizer.parseNumbers();\n            if (this.delimiter.equals(\"\\\\t\")) {\n                tokenizer.whitespaceChars('\\t', '\\t');\n            }\n            if (this.delimiter.equals(\",\")) {\n                tokenizer.whitespaceChars(',', ',');\n            }\n            tokenizer.quoteChar('\"');\n            tokenizer.whitespaceChars(' ', ' ');\n            boolean readingHeaders = true;\n            boolean readingInitialValues = false;\n            boolean readingData = false;\n            boolean readingScientificNotation = false;\n            if (this.headers.size() > 0) {\n                readingHeaders = false;\n                readingInitialValues = true;\n            }\n            if (this.types.size() > 0) {\n                readingInitialValues = false;\n                Class targetclass;\n                for (int j = 0; j < this.types.size(); j++) {\n                    targetclass = (Class) this.types.get(j);\n                    try {\n                        this.constructors.add(targetclass.getConstructor(String.class));\n                    } catch (java.lang.NoSuchMethodException err) {\n                        throw new SnifflibDatatypeException(\"Could not find appropriate constructor for \" + targetclass + \". \" + err.getMessage());\n                    }\n                }\n                readingData = true;\n            }\n            int currentColumn = 0;\n            int currentRow = 0;\n            this.rowcount = 0;\n            boolean advanceField = true;\n            while (true) {\n                tokenizer.nextToken();\n                switch(tokenizer.ttype) {\n                    case StreamTokenizer.TT_WORD:\n                        {\n                            if (readingScientificNotation) {\n                                throw new RuntimeException(\"Problem reading scientific notation at row \" + currentRow + \" column \" + currentColumn + \".\");\n                            }\n                            advanceField = true;\n                            if (readingHeaders) {\n                                this.headers.add(tokenizer.sval);\n                            } else {\n                                if (readingInitialValues) {\n                                    this.types.add(String.class);\n                                }\n                                if (!this.dryrun) {\n                                    if (out.getColumnCount() <= currentColumn) {\n                                        out.addColumn((String) this.headers.get(currentColumn), (Class) this.types.get(currentColumn));\n                                    }\n                                }\n                                try {\n                                    Constructor construct;\n                                    if (currentColumn < this.constructors.size()) {\n                                        construct = (Constructor) this.constructors.get(currentColumn);\n                                    } else {\n                                        Class targetclass = (Class) this.types.get(currentColumn);\n                                        construct = targetclass.getConstructor(String.class);\n                                        this.constructors.add(construct);\n                                    }\n                                    try {\n                                        try {\n                                            try {\n                                                if (!this.dryrun) {\n                                                    out.setValueAt(construct.newInstance((String) tokenizer.sval), currentRow, currentColumn);\n                                                } else if (this.findingTargetValue) {\n                                                    if ((this.targetRow == currentRow) && (this.targetColumn == currentColumn)) {\n                                                        this.targetValue = construct.newInstance((String) tokenizer.sval);\n                                                        r.close();\n                                                        return (null);\n                                                    }\n                                                }\n                                            } catch (java.lang.reflect.InvocationTargetException err) {\n                                                throw new SnifflibDatatypeException(\"Problem constructing 1\" + err.getMessage());\n                                            }\n                                        } catch (java.lang.IllegalAccessException err) {\n                                            throw new SnifflibDatatypeException(\"Problem constructing 2\" + err.getMessage());\n                                        }\n                                    } catch (java.lang.InstantiationException err) {\n                                        throw new SnifflibDatatypeException(\"Problem constructing 3\" + err.getMessage());\n                                    }\n                                } catch (java.lang.NoSuchMethodException err) {\n                                    throw new SnifflibDatatypeException(\"Problem constructing 4\" + err.getMessage());\n                                }\n                            }\n                            break;\n                        }\n                    case StreamTokenizer.TT_NUMBER:\n                        {\n                            advanceField = true;\n                            if (readingHeaders) {\n                                throw new SnifflibDatatypeException(\"Expecting string header at row=\" + currentRow + \", column=\" + currentColumn + \".\");\n                            } else {\n                                if (readingInitialValues) {\n                                    this.types.add(Double.class);\n                                }\n                                if (!this.dryrun) {\n                                    if (out.getColumnCount() <= currentColumn) {\n                                        out.addColumn((String) this.headers.get(currentColumn), (Class) this.types.get(currentColumn));\n                                    }\n                                }\n                                try {\n                                    Constructor construct;\n                                    if (currentColumn < this.constructors.size()) {\n                                        construct = (Constructor) this.constructors.get(currentColumn);\n                                    } else {\n                                        Class targetclass = (Class) this.types.get(currentColumn);\n                                        construct = targetclass.getConstructor(double.class);\n                                        this.constructors.add(construct);\n                                    }\n                                    if (readingScientificNotation) {\n                                        Double val = this.scientificNumber;\n                                        if (!this.dryrun) {\n                                            try {\n                                                out.setValueAt(new Double(val.doubleValue() * tokenizer.nval), currentRow, currentColumn);\n                                            } catch (Exception err) {\n                                                throw new SnifflibDatatypeException(\"Problem constructing \" + construct.getDeclaringClass() + \"at row \" + currentRow + \" column \" + currentColumn + \".\", err);\n                                            }\n                                        } else if (this.findingTargetValue) {\n                                            if ((this.targetRow == currentRow) && (this.targetColumn == currentColumn)) {\n                                                Double NVAL = new Double(tokenizer.nval);\n                                                try {\n                                                    this.targetValue = numformat.parse(val + \"E\" + NVAL);\n                                                } catch (Exception err) {\n                                                    throw new RuntimeException(\"Problem parsing scientific notation at row=\" + currentRow + \" col=\" + currentColumn + \".\");\n                                                }\n                                                tokenizer.nextToken();\n                                                if (tokenizer.ttype != 'e') {\n                                                    r.close();\n                                                    return (null);\n                                                } else {\n                                                    tokenizer.pushBack();\n                                                }\n                                            }\n                                        }\n                                        readingScientificNotation = false;\n                                    } else {\n                                        try {\n                                            this.scientificNumber = new Double(tokenizer.nval);\n                                            if (!this.dryrun) {\n                                                out.setValueAt(this.scientificNumber, currentRow, currentColumn);\n                                            } else if (this.findingTargetValue) {\n                                                if ((this.targetRow == currentRow) && (this.targetColumn == currentColumn)) {\n                                                    this.targetValue = this.scientificNumber;\n                                                    r.close();\n                                                    return (null);\n                                                }\n                                            }\n                                        } catch (Exception err) {\n                                            throw new SnifflibDatatypeException(\"Problem constructing \" + construct.getDeclaringClass() + \"at row \" + currentRow + \" column \" + currentColumn + \".\", err);\n                                        }\n                                    }\n                                } catch (java.lang.NoSuchMethodException err) {\n                                    throw new SnifflibDatatypeException(\"Problem constructing\" + err.getMessage());\n                                }\n                            }\n                            break;\n                        }\n                    case StreamTokenizer.TT_EOL:\n                        {\n                            if (readingHeaders) {\n                                readingHeaders = false;\n                                readingInitialValues = true;\n                            } else {\n                                if (readingInitialValues) {\n                                    readingInitialValues = false;\n                                    readingData = true;\n                                }\n                            }\n                            if (readingData) {\n                                currentRow++;\n                            }\n                            break;\n                        }\n                    case StreamTokenizer.TT_EOF:\n                        {\n                            if (readingHeaders) {\n                                throw new SnifflibDatatypeException(\"End of file reached while reading headers.\");\n                            }\n                            if (readingInitialValues) {\n                                throw new SnifflibDatatypeException(\"End of file reached while reading initial values.\");\n                            }\n                            if (readingData) {\n                                readingData = false;\n                            }\n                            break;\n                        }\n                    default:\n                        {\n                            if (tokenizer.ttype == '\"') {\n                                advanceField = true;\n                                if (readingHeaders) {\n                                    this.headers.add(tokenizer.sval);\n                                } else {\n                                    if (readingInitialValues) {\n                                        this.types.add(String.class);\n                                    }\n                                    if (!this.dryrun) {\n                                        if (out.getColumnCount() <= currentColumn) {\n                                            out.addColumn((String) this.headers.get(currentColumn), (Class) this.types.get(currentColumn));\n                                        }\n                                    }\n                                    try {\n                                        Constructor construct;\n                                        if (currentColumn < this.constructors.size()) {\n                                            construct = (Constructor) this.constructors.get(currentColumn);\n                                        } else {\n                                            Class targetclass = (Class) this.types.get(currentColumn);\n                                            construct = targetclass.getConstructor(String.class);\n                                            this.constructors.add(construct);\n                                        }\n                                        try {\n                                            try {\n                                                try {\n                                                    if (!this.dryrun) {\n                                                        out.setValueAt(construct.newInstance((String) tokenizer.sval), currentRow, currentColumn);\n                                                    } else if (this.findingTargetValue) {\n                                                        if ((this.targetRow == currentRow) && (this.targetColumn == currentColumn)) {\n                                                            this.targetValue = construct.newInstance((String) tokenizer.sval);\n                                                            r.close();\n                                                            return (null);\n                                                        }\n                                                    }\n                                                } catch (java.lang.reflect.InvocationTargetException err) {\n                                                    throw new SnifflibDatatypeException(\"Problem constructing 1 \" + err.getMessage());\n                                                }\n                                            } catch (java.lang.IllegalAccessException err) {\n                                                throw new SnifflibDatatypeException(\"Problem constructing 2 \" + err.getMessage());\n                                            }\n                                        } catch (java.lang.InstantiationException err) {\n                                            throw new SnifflibDatatypeException(\"Problem constructing 3 \" + err.getMessage());\n                                        }\n                                    } catch (java.lang.NoSuchMethodException err) {\n                                        throw new SnifflibDatatypeException(\"Problem constructing 4\" + err.getMessage());\n                                    }\n                                }\n                            } else if (tokenizer.ttype == 'e') {\n                                Class targetclass = (Class) this.types.get(currentColumn);\n                                if (Number.class.isAssignableFrom(targetclass)) {\n                                    currentColumn--;\n                                    readingScientificNotation = true;\n                                    advanceField = false;\n                                }\n                            } else {\n                                advanceField = false;\n                            }\n                            break;\n                        }\n                }\n                if (tokenizer.ttype == StreamTokenizer.TT_EOF) {\n                    break;\n                }\n                if (advanceField) {\n                    currentColumn++;\n                    if (!readingHeaders) {\n                        if (currentColumn >= this.headers.size()) {\n                            currentColumn = 0;\n                        }\n                    }\n                }\n            }\n            if (!readingHeaders) {\n                this.rowcount = currentRow;\n            } else {\n                this.rowcount = 0;\n                readingHeaders = false;\n                if (this.ignorePostHeaderLines > 0) {\n                    String strLine;\n                    int k = 0;\n                    while ((k < this.ignorePostHeaderLines) && ((strLine = r.readLine()) != null)) {\n                        k++;\n                    }\n                }\n            }\n            r.close();\n        } catch (java.io.IOException err) {\n            throw new SnifflibDatatypeException(err.getMessage());\n        }\n        if (!this.dryrun) {\n            for (int j = 0; j < this.headers.size(); j++) {\n                out.setColumnName(j, (String) this.headers.get(j));\n            }\n        }\n        return (out);\n    }\n", "label": 0, "substitutes": {"uncompress": ["unompress", "uncomplate", "unComplate", "unappract", "unomplate", "uncompract", "unCompress", "uncompact", "UnComplate", "unCompact", "unapplate", "UnCompact", "unappact", "Uncompact", "unCompract", "unompract", "UnCompress", "Uncompress", "Uncompract", "unompact", "Uncomplate", "unappress", "UnCompract"], "readPath": ["writeUrl", "ReadPath", "readP", " readP", "ReadP", "readUrl", "readCh", "ReadFile", "readFile", "Readpath", "writeTime", "writeId", "loadName", "writeFile", " readCh", "baseP", " readUrl", "loadP", "writeCh", "ReadId", " readTime", "writepath", "readableUrl", "readDir", " readPos", "writeP", "readableCh", "readId", " readName", " readFile", " readpath", " readDir", "readTime", "readablePath", "readablePos", "readPos", "ReadTime", "ReadUrl", "writePos", "loadDir", "loadPath", " readId", "readpath", "readName"], "mkdir": ["kDir", " mkfile", "mkir", "makeir", " mkir", "kdir", "kir", "makefolder", " mkDir", " mkfolder", "workdir", "mkfolder", "workfile", "kfolder", "makedir", "makefile", "mkDir", "workDir", "makeDir", "mkfile", "workir"], "arcInputStream": ["arcStreamStream", "ecInputStreamer", "arcAnalysisForm", "pcInputContext", "pcUpStream", "arcExecSteam", "ecStreamStreamer", "arcExecStream", "ascAnalysisPath", "arcExecTrans", "ascInputForm", "arcReadStreamer", "arcUpContext", "arcReadSteam", "pcUpTrans", "arcAudioContext", "arcInputTrans", "arcArchStreamer", "arcInputContext", "arcInputStack", "arcAudioTrans", "arcRawForm", "pcInputSteam", "pcInputTrans", "arcInStream", "ascInputStream", "pcUpContext", "arcArchSteam", "arcInForm", "ecInputSteam", "arcStreamStreamer", "ecStreamStream", "arcAnalysisPath", "arcInputStreamer", "arcStreamStack", "ecInputStream", "arcReadStack", "arcInputForm", "pcInputStream", "arcArchStack", "arcStreamSteam", "arcInputPath", "ecStreamStack", "ecStreamSteam", "arcArchStream", "arcInputSteam", "ascAnalysisForm", "arcUpSteam", "arcAudioSteam", "arcRawPath", "arcInPath", "pcUpSteam", "arcReadStream", "arcAnalysisStream", "arcAudioStream", "arcRawStream", "ascInputPath", "arcExecContext", "ascAnalysisStream", "ecInputStack", "arcUpTrans", "arcUpStream"], "bis": ["pin", " Bis", "bid", "vs", "ubs", "vor", "is", "ls", "onis", "cin", "bb", "oi", "rison", "iris", "bits", "rys", "opus", "uds", "bones", "ios", "obs", "bh", "fs", "bps", "ses", "fps", "pins", "sb", "bs", "los", "oss", "bil", "isin", "ris", "bes", "mes", "BS", "liner", "sys", "bf", "bp", "ints", "dos", "nis", "bi", "ubis", "atis", "iso", "webkit"], "baseDir": ["BaseFile", "boundFile", "baseDr", "baseFolder", "BasePath", "boundPath", "bufferFolder", "boundDr", "boundDir", " baseFolder", "basedir", "bufferdir", " baseDr", "bufferDir", "BaseDr", " basedir", "basedDir", "baseddir", " baseFile", "BaseDir", "basedFolder", "baseFile"], "basePath": ["readHas", "BaseHalf", "baseHalf", "bufferPath", "readPoint", "bDir", "baseNow", "BasePath", "bP", "basePod", " baseHalf", "aseSet", "newPath", " basePod", "BasePoint", "BaseForm", "bufferPort", "baseP", "aseDir", " baseHas", " baseSet", "readPod", "basP", "readPage", "bTime", "asePod", " baseAnd", "asePath", "newPoint", "basDir", "BaseTime", "newNow", "newDir", "bufferDir", "baseTime", "bForm", "basePage", " baseNow", "basePoint", "BaseAnd", "bufferForm", "readDir", "BaseNow", "BaseName", "baseForm", "baseAnd", "bPort", "baseHas", "basPort", "newHalf", "bufferTime", "bufferP", "basePort", "bPath", "basPath", "aseName", "newAnd", "asePage", " basePage", "aseHas", "baseSet", "BaseDir", "BaseSet", " basePoint", "readName"], "schema": ["chema", "schement", "sema", "schedule", "Schement", "Schename", "verge", "verment", "sedule", "seeme", "Schedule", "syma", "cheme", "schename", "Scheme", "syname", "sydule", "Schema", "seme", "Schemas", "semas", "Schege", "seement", "schemas", "verme", "scheme", "seema", "seege", "symas", "verma", "schege", "chemas", "chename", "syme"], "baseName": ["baseUnique", "fixedNAME", "baseNames", "commonName", "basename", " basename", "basedName", "bareNAME", "barePath", "bareName", "asename", "basKey", "caseUnique", " baseKey", "baseNAME", "baseKey", "caseName", "fixedPath", "basedPath", "fixedName", " baseNAME", "basedNAME", "BaseName", "basNAME", "basName", "bareTitle", "baseTitle", "aseNAME", "aseName", "basedTitle", "aseKey", "commonNames", "fixedTitle", "BaseUnique", "caseNames", "basname", "commonUnique", "BaseNames"], "entry": ["item", "cell", "match", "member", "ce", "Entry", "char", "e", "obj", "nel", "nt", "event", "context", "row", "record", "attribute", "rance", "index", "null", "ex", "check", "word", "office", "connection", "zip", "inter", "piece", "link", "valid", "je", "table", "result", "zo", "rent", "entity", "element", "enter", "pty", "see", "ie", "ry", "name", "comment", "http", "data", "cont", "add", "key", "escape", "header", "list", "empty", "directory", "ent", "info", "existent", "RY", "next", "ace", "se"], "writePath": [" writePal", "writData", "riteData", " writeKey", "readP", "WritePal", "riteTh", "writePal", "newP", "writeName", "ritePath", "createPath", "writeTh", "readHead", "newPath", "writeData", "writeLog", "writPath", "WriteKey", "WritePort", "writeHead", "WriteLog", "riteLog", "WriteData", "createName", "newHead", "createKey", "readTh", "writeP", "createPal", "riteP", "ritePort", "newTh", "WritePath", " writeName", "writePort", "writLog", "writeKey", "writPort", "WriteName", "riteHead"], "dirName": ["dbKey", "detDef", "dirDef", " dirDef", "directoryName", "dbName", "detname", " dirname", "directoryDef", "dirConf", "directoryKey", "folderName", " dirConf", "detConf", "detName", "folderNAME", "directoryNAME", "dirname", "folderConf", "folderKey", "dirKey", "dirNAME", "dbNAME", "folderDef", "foldername", "dbDef"], "bos": ["js", "oos", "stones", "outs", "bol", "aos", "ths", "fits", "bits", "bo", "uds", "ols", "bones", "ios", "oops", "obs", "bh", "jas", "banks", "pins", "zo", "bs", "oss", "los", "oids", "acs", "eros", "bat", "bes", "BS", "nos", "dos", "bi", "bin", "boards", "bas", "ods", "os", "webkit"], "i": ["I", "zi", "ic", "h", "p", "li", "id", "io", "gi", "print", "b", "is", "di", "t", "ii", "in", "j", "phi", "mi", "si", "ni", "index", "ini", "n", "mu", "a", "pi", "ci", "m", "o", "iter", "multi", "q", "ei", "u", "x", "qi", "ai", "l", "ip", "it", "bi", "hi", "info", "php", "y"]}}
{"id1": "15409512", "id2": "5989666", "code1": "    public static void main(String args[]) throws IOException {\n        String inFileName = args[0];\n        String outFileName = args[1];\n        long position = 0L;\n        try {\n            position = Long.parseLong(args[2]);\n        } catch (NumberFormatException nfex1) {\n            try {\n                position = Long.parseLong(args[2], 16);\n            } catch (NumberFormatException nfex2) {\n                System.err.println(\"Wrong offset\");\n                System.exit(0);\n            }\n        }\n        if (position < 1L) {\n            System.err.println(\"Wrong offset. Must be more than 0\");\n            System.exit(0);\n        }\n        System.out.println(\"Copying  input: \" + inFileName);\n        System.out.println(\"        output: \" + outFileName);\n        System.out.println(\"          from: \" + position);\n        BufferedInputStream bis = new BufferedInputStream(new FileInputStream(inFileName));\n        BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(outFileName));\n        bis.skip(position);\n        for (byte[] b = new byte[1]; bis.read(b) > 0; bos.write(b)) ;\n        bis.close();\n        bos.close();\n    }\n", "code2": "    private String postXml(String url, String soapAction, String xml) {\n        try {\n            URLConnection conn = new URL(url).openConnection();\n            if (conn instanceof HttpURLConnection) {\n                HttpURLConnection hConn = (HttpURLConnection) conn;\n                hConn.setRequestMethod(\"POST\");\n            }\n            conn.setConnectTimeout(this.connectionTimeout);\n            conn.setReadTimeout(this.connectionTimeout);\n            conn.setRequestProperty(\"Content-Type\", \"text/xml; charset=utf-8\");\n            conn.setRequestProperty(\"Accept\", \"application/soap+xml, text/*\");\n            if (soapAction != null) {\n                conn.setRequestProperty(\"SOAPAction\", soapAction);\n            }\n            conn.setDoOutput(true);\n            OutputStreamWriter out = new OutputStreamWriter(conn.getOutputStream());\n            out.write(xml);\n            out.close();\n            BufferedReader resp = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n            StringBuilder buf = new StringBuilder();\n            String str;\n            while ((str = resp.readLine()) != null) {\n                buf.append(str);\n            }\n            return buf.toString();\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n", "label": 0, "substitutes": {"inFileName": ["intModelNames", "infileSource", "inFileSource", " infileSource", " inFileSource", "infileNames", "infileSize", " inFilePath", "inModelName", "inModelNames", "inStreamSize", "inFilenameSize", "inFILEName", "inFilenameNames", "inStreamNames", "intFileNames", "inFilenameSource", "infileName", "inPageName", " infileSize", "inFileFace", " infileNames", " inFileFace", " infileFace", "inFILEFace", "intModelname", "inFILEPath", "inPageSource", "inFilePath", "inPageNames", " inFileNames", "intFileSource", "inFilenameFace", " inFileSize", "inFilenameName", "inModelSource", "inStreamName", "inFileSize", "infilePath", " infileName", "inStreamPath", "intModelSource", "intFilename", "inPagename", "inModelname", "intModelName", " infilePath", "intFileName", "inFileNames", "inFilename", "infileFace", "inFilenamePath", "inFILESource", "infilename"], "outFileName": ["outFilenameFile", "inFilenameDir", " outFilenameName", "outFilenameDef", " outFileParent", "infileNames", "inFileFile", "outfilePath", "outfileNames", "infileDef", "outFileNames", " outFilenamePath", "inFilenameNames", " outFilePath", "outfileParent", "outfileDef", "outfileName", "outFileParent", "infileName", "outFILEParent", " outFileNames", "outPathPath", "outTileDef", "inFilePath", "outFilenameName", "outFilenameParent", "outfileFile", "outPathName", "inFileDef", "outFilePath", "outFilenameNames", "infileFile", "inFilenameName", "outFileFile", " outFilenameNames", "outPathNames", "inFileDir", "outfileDir", " outFilenameParent", "outFileDir", "outPathDir", "outFilenamePath", "outTileNames", "outTileName", "inFileNames", "outFILEPath", "outTileFile", "outFileDef", "outFILENames", "inFilenamePath", "outFILEName", "outFilenameDir"], "position": ["address", "description", "number", "operation", "sequence", "p", "amount", "point", "length", "start", "ion", "slot", "resolution", "no", "portion", "from", "limit", "osition", "total", "index", "to", "block", "relation", "connection", "condition", "port", "present", "volume", "location", "initial", "expression", "size", "padding", "buffer", "Position", "now", "journal", "capacity", "minimum", "reference", "see", "document", "offset", "POS", "seek", "direction", "zero", "application", "source", "pointer", "memory", "value", "move", "request", "pos", "character", "layout", "option", "order", "type", "usage", "ment", "command"], "bis": ["js", "bid", "ubs", "rots", "idis", "is", "conv", "onis", "ls", "rison", "iris", "oi", "ais", "bits", "abin", "irs", "bb", "opus", "uds", "cgi", "obb", "ios", "obs", "bh", "bps", "ads", "fps", "pins", "bs", "los", "lis", "oss", "bil", "its", "lbs", "isin", "avi", "ris", "oris", "bes", "BS", "bat", "phis", "ints", "dos", "obos", "nis", "bi", "ubis"], "bos": ["asket", "cos", "oos", "ubs", "rots", "ats", "bys", "ows", "aos", "ths", "fits", "ots", "bits", "tes", "bo", "ts", "uds", "ols", "oops", "bones", "ios", "obs", "jas", "bh", "fs", "ns", "pins", "bs", "los", "oss", "oids", "aus", "ippers", "eros", "bes", "BS", "nos", "tis", "dos", "oks", "bi", "ubis", "boards", "ods", "os", "webkit"], "b": ["d", "v", "batch", "pb", "h", "p", "bar", "back", "nb", "bg", "t", "be", "rb", "j", "ab", "bb", "c", "bit", "i", "a", "m", "ib", "bh", "f", "B", "base", "fb", "br", "sb", "bs", "q", "ch", "db", "eb", "bp", "cb", "l", "ob", "g", "mb", "bin", "buf", "body", "gb", "bc"]}}
{"id1": "1862616", "id2": "8801436", "code1": "    public static String fetch(String reference) throws IOException {\n        URL url = new URL(reference);\n        HttpURLConnection c = (HttpURLConnection) url.openConnection();\n        c.setRequestMethod(\"GET\");\n        c.setDoOutput(true);\n        c.setRequestProperty(\"Content-Type\", \"text/xml; charset=UTF-8\");\n        return parseISToString(c.getInputStream());\n    }\n", "code2": "    public static void copy(File from_file, File to_file) throws IOException {\n        if (!from_file.exists()) abort(\"FileCopy: no such source file: \" + from_file.getName());\n        if (!from_file.isFile()) abort(\"FileCopy: can't copy directory: \" + from_file.getName());\n        if (!from_file.canRead()) abort(\"FileCopy: source file is unreadable: \" + from_file.getName());\n        if (to_file.isDirectory()) to_file = new File(to_file, from_file.getName());\n        if (to_file.exists()) {\n            if (!to_file.canWrite()) abort(\"FileCopy: destination file is unwriteable: \" + to_file.getName());\n        } else {\n            String parent = to_file.getParent();\n            if (parent == null) parent = System.getProperty(\"user.dir\");\n            File dir = new File(parent);\n            if (!dir.exists()) abort(\"FileCopy: destination directory doesn't exist: \" + parent);\n            if (dir.isFile()) abort(\"FileCopy: destination is not a directory: \" + parent);\n            if (!dir.canWrite()) abort(\"FileCopy: destination directory is unwriteable: \" + parent);\n        }\n        FileInputStream from = null;\n        FileOutputStream to = null;\n        try {\n            from = new FileInputStream(from_file);\n            to = new FileOutputStream(to_file);\n            byte[] buffer = new byte[4096];\n            int bytes_read;\n            while ((bytes_read = from.read(buffer)) != -1) {\n                to.write(buffer, 0, bytes_read);\n            }\n        } finally {\n            if (from != null) try {\n                from.close();\n            } catch (IOException e) {\n                ;\n            }\n            if (to != null) try {\n                to.close();\n            } catch (IOException e) {\n            }\n        }\n    }\n", "label": 0, "substitutes": {"fetch": ["fully", "confetch", "tully", "confDownload", "fault", "tetch", "confully", "confault", "tault", " fault", " fDownload", "fDownload", "tDownload", " fully"], "reference": ["path", "address", "sample", "description", "number", "string", "definition", "reverse", "resource", "print", "remote", "position", "resolution", "relative", "attribute", "filename", "re", "external", "index", "href", "library", "condition", "title", "location", "absolute", "Reference", "note", "server", "prefix", "message", "create", "seek", "document", "template", "register", "source", "pointer", "value", "request", "directory", "ref"], "url": ["arl", "build", "sl", "h", "log", "Url", "abs", "str", "nl", "mail", "char", "service", "ls", "open", "r", "dl", "atl", "null", "ll", "pl", "https", "ssl", "f", "base", "URL", "job", "web", "loc", "ur", "q", "ml", "acl", "hl", "http", "l", "au", "ob", "g", "ref", "gc", "ul"], "c": ["mc", "cur", "v", "fc", "h", "ce", "cu", "b", "k", "t", "conv", "z", "ca", "ctrl", "cin", "lc", "r", "cp", "n", "cs", "cr", "ci", "f", "cf", "ct", "com", "cl", "sc", "ch", "dc", "etc", "client", "cm", "nc", "cont", "ac", "enc", "C", "rc", "cb", "l", "coll", "cache", "g", "tc", "ec", "pc", "bc", "co", "con"]}}
{"id1": "13596891", "id2": "8665649", "code1": "    protected void doTransfer(HttpServletRequest request, HttpServletResponse response, String method) throws ServletException, IOException {\n        ServletContext servletContext = this.getServletConfig().getServletContext();\n        WebApplicationContext wac = WebApplicationContextUtils.getRequiredWebApplicationContext(servletContext);\n        String szUrl = request.getParameter(\"url\");\n        System.out.println(szUrl);\n        URL url;\n        InputStream is = null;\n        ServletOutputStream sout = null;\n        try {\n            url = new URL(szUrl);\n            HttpURLConnection con = (HttpURLConnection) url.openConnection();\n            Enumeration hNames = request.getHeaderNames();\n            while (hNames.hasMoreElements()) {\n                String txt = hNames.nextElement().toString();\n                con.setRequestProperty(txt, request.getHeader(txt));\n            }\n            con.setRequestProperty(\"host\", url.getHost());\n            con.setRequestProperty(\"refer\", szUrl);\n            con.setRequestMethod(method);\n            con.setDoOutput(true);\n            con.setDoInput(true);\n            InputStreamReader inBody = new InputStreamReader(request.getInputStream());\n            char bufCh[] = new char[1024];\n            int r;\n            OutputStreamWriter outReq = new OutputStreamWriter(con.getOutputStream());\n            while ((r = inBody.read(bufCh)) != -1) {\n                System.out.println(bufCh);\n                outReq.write(bufCh, 0, r);\n            }\n            outReq.flush();\n            outReq.close();\n            inBody.close();\n            System.out.println(con.getResponseCode());\n            System.out.println(con.getResponseMessage());\n            if (con.getResponseCode() == con.HTTP_OK) {\n                response.setContentType(con.getContentType());\n                response.addHeader(\"Content-Encoding\", con.getContentEncoding());\n                sout = response.getOutputStream();\n                is = con.getInputStream();\n                byte buff[] = new byte[1024];\n                while ((r = is.read(buff)) != -1) {\n                    sout.write(buff, 0, r);\n                    System.out.print(buff);\n                }\n                sout.flush();\n                is.close();\n                sout.close();\n            } else {\n                response.sendError(con.getResponseCode(), con.getResponseMessage());\n            }\n        } catch (MalformedURLException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n", "code2": "    private BufferedImage _getImage(String urlStr) throws IOException {\n        URL url = new URL(urlStr);\n        HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n        conn.connect();\n        InputStream in = null;\n        try {\n            in = conn.getInputStream();\n            return ImageIO.read(in);\n        } finally {\n            IOUtilities.close(in);\n        }\n    }\n", "label": 0, "substitutes": {"doTransfer": ["handleSend", " doSend", "DoDownload", "handleDownload", "doRequest", "DoRequest", " doDownload", "doDownload", "handleTransfer", "DoSend", "doSend", "handleRequest", "DoTransfer", " doRequest"], "request": ["subject", "address", "log", "parent", "resource", "process", "remote", "question", "position", "context", "in", "current", "record", "attribute", "complete", "call", "re", "query", "connection", "session", "initial", "requ", "config", "server", "params", "message", "result", "get", "raw", "user", "req", "change", "create", "input", "reference", "setup", "frame", "document", "Request", "object", "client", "http", "name", "application", "remove", "reset", "report", "QUEST", "header", "version", "quest", "use", "have", "xml", "order", "this", "command"], "response": ["send", "description", "proxy", "sequence", "respond", "site", "ce", "print", "wrapper", "onse", "position", "success", "context", "service", "Response", "output", "content", "view", "block", "session", "connection", "res", "write", "status", "summary", "server", "body", "message", "result", "out", "page", "exit", "document", "frame", "respons", "object", "http", "application", "answer", "reset", "report", "image", "one", "version", "default", "pos", "json", "next", "reply", "resp", "this"], "method": ["send", "subject", "period", "Method", "string", "dir", "post", "transform", "property", "eth", "mod", "timeout", "length", "num", "service", "other", "call", "instance", "m", "ETHOD", "hod", "reason", "form", "prefix", "message", "th", "METHOD", "name", "direction", "http", "report", "verb", "version", "tr", "right", "type", "command"], "servletContext": ["ServletChain", "servletDefinition", " servletcontext", "servlerConfig", " servletDefinition", " servletComponent", "servlerChain", "servLETComponent", "servlerEvent", "servletsChain", "servletEvent", "servLETDefinition", "servLETcontext", "ServletsEvent", "servletsConfig", "servLETContext", "ServletsContext", "servLETConfig", "servantcontext", " servantDefinition", "servlerContext", "servfileContext", " servantcontext", "ServletsConfig", "servantDefinition", " servantComponent", "ServletsChain", "servfileComponent", "ServletConfig", "ServletEvent", "ServletContext", "servletsEvent", "servletcontext", "servLETChain", "servantComponent", "servletConfig", "servfilecontext", "servletsContext", "servletChain", "servletComponent", "servfileDefinition", " servantContext", "servLETEvent", "servantContext"], "wac": ["bacc", "bAC", "wacc", "wbAC", " wacc", "wbacc", " wAC", "wAC", "wbac", "bacs", "wbacs", " wacs", "wacs", "bac"], "szUrl": ["sldPath", "sziurl", "sldUr", " szeUr", "szePath", "szarPath", "sgzUr", "sgzLoc", "sziUr", " szeLoc", "szurl", " szeUrl", "szeurl", "szaUrl", "sizURL", "sldGl", "sZGl", "szPath", "sZurl", "sizUrl", "deszStr", "szLoc", "sziGl", "szeGl", "sZUr", "desgzURL", "szURL", " szePath", " szPath", " szURL", "sldUrl", "szeLoc", "desgzUrl", "sgzURL", "desgzPath", "szGl", "sizPath", "szarUr", "sgzUrl", "szeURL", "desgzStr", "sizStr", "szeUr", "deszURL", "szarUrl", " szLoc", "deszUrl", "szUr", " szurl", "szeStr", "szStr", " szUr", "szaURL", "sziUrl", " szGl", " szeGl", "szaUr", " szeURL", "sgzStr", "deszPath", "szaLoc", "szarGl", "sZUrl", "sgzPath", " szeurl", "szeUrl"], "url": ["build", "sl", "gl", "address", "file", "Url", "ret", "str", "nl", "mail", "char", "prot", "browser", "t", "ls", "ol", "open", "re", "ll", "pl", "connection", "host", "https", "ssl", "link", "location", "f", "uri", "base", "URL", "web", "loc", "date", "ur", "conn", "impl", "cert", "ml", "name", "u", "un", "bel", "client", "http", "www", "util", "socket", "rl", "mount", "l", "xml", "ob", "il", "ref", "gc", "org", "lb", "ul"], "is": ["serv", "iss", "ic", "id", " cis", "ism", "isa", "ii", "sis", "in", "ri", "si", "i", "isc", "ios", "cs", "res", "bis", "as", "ps", "IS", "ms", "s", "bs", "lis", "ois", " bis", "its", "isin", "ris", "sys", "tis", "Is", "ins", "nis", "ir", "ip", "us", "info", "isi", "es", "os", "iso"], "sout": ["osouth", " sj", "sin", " sos", " scho", "wsj", "lsos", "lsouth", "lsin", "lscho", "sOut", "wsos", "south", "lsOut", " south", "scho", "sos", "wsout", "lsout", "sj", "osout", "lsj", "osin", "wscho", "osOut", " sin", " sOut"], "con": ["local", "Con", "cone", "conv", "Conn", "ctrl", "const", "cons", "conf", "re", "cgi", "on", "cf", "com", "req", "common", "don", "ver", "CON", "ln", "cur", "fc", "h", "fac", "ion", "cp", "c", "acon", "conn", "cn", "create", "change", "client", "cm", "http", "socket", "pen", "cmd", "can", "ain", "cv", "cell", "canon", "log", "obj", "internal", "compl", "current", "control", "ctx", "res", "code", "syn", "connect", "un", "apache", "nc", "ran", "ven", "coll", "cache", "thin", "bc", "dial", "cos", "fl", "en", "num", "comm", "call", "act", "connection", "condition", "stat", "config", "util", "rc", "cal", "cond", "co"], "hNames": [" hKeys", " hWords", "hUsers", "hrWords", "bStates", "htNames", "tNs", "hrKeys", "dhIDs", " hUsers", "hmUsers", "bKeys", " hStates", "hmNames", "dhKeys", " hIDs", "tStates", "htKeys", "hStates", "hmKeys", "hIDs", "hAMES", " hAMES", "hmAMES", "hrIDs", "hrNames", "htAMES", "hKeys", "bNames", "hWords", "dhNames", "tKeys", "htUsers", "bNs", "tNames", "dhWords", " hNs", "hNs"], "txt": ["text", "xx", "cmp", "nv", "typ", "pt", "elt", "dat", "dj", "str", "mt", "btn", "bt", "test", "t", "obj", "lv", "nt", "te", "msg", "nm", "filename", "tf", "ext", "xxx", "XT", "lt", "gt", "ns", "nu", "tm", "ct", "sp", "xt", "tmp", "kw", "fn", "tab", "wt", "tk", "ht", "TEXT", "kt", "pkg", "tx", "qt", "tt", "htm"], "inBody": ["InThread", "cinBox", "inBlock", " inThread", "InReader", " inReader", " INBox", "inbody", "inputThread", "inBox", "inBoot", " INBody", "InBox", "cinBody", " inBlock", "Inbody", "dinbody", " INBoot", "InBody", "inputBox", "dinReader", " INBlock", " inbody", "cinBlock", "cinBoot", "inThread", " inBox", " inBoot", "inReader", "inputBody", "dinBody"], "bufCh": ["bufComp", " bufch", "bufBuff", "ufCh", "BufferCh", " bufCH", "bufferCH", "ufChar", "bufferch", "buffCh", "BufferCH", "bufChar", "cbCH", "bufCH", "ufCol", "BufferChar", " bufComp", "buffChar", "cbCol", "bufferBuff", "cbChar", "buffch", "buffComp", "bufch", "bufferCh", " bufBuff", "BufferComp", " bufChar", "ufCH", "cbCh", "buffBuff", "buffCH", " bufCol", "bufCol"], "r": ["err", "d", "sr", "dr", "lr", "v", "h", "p", "k", "t", "nr", "rec", "z", "e", "rb", "arr", "mr", "re", "rs", "c", "rw", "n", "i", "rate", "res", "cr", "ar", "f", "o", "hr", "rd", "out", "q", "rt", "ch", "gr", "rr", "u", "x", "or", "rc", "l", "R", "er", "rar", "w"], "outReq": ["outRecQ", " outConch", " outConck", " outRecq", "outRecq", "inRequest", "inReq", "outConch", " outReQ", " outReque", "inSech", "outFrech", "outReqs", "outConq", "outFreck", "outResquest", " outConQ", "inSeq", "outReque", "outRecqs", "outConj", "inRej", "outReek", "outREq", " outRej", "outRecque", "outConQ", "outConek", " outConqs", "inSequest", "outTeq", " outConj", "outSech", "outResq", "outConquest", "outSeck", "outTequest", "outSeq", "outRecek", "outRecquest", "outRech", " outConq", "outResch", " outConquest", " outRequest", " outRecque", " outRecqs", "inRech", "outREque", " outRech", " outReek", "outSequest", " outRecek", "outFreq", "outREqs", "outSej", " outReck", "inSej", "outFrej", "outConqs", "outConque", "outRej", "outReck", "outTeqs", "outConck", "outREek", "outTeQ", "outResj", " outReqs", "outReQ", "outRequest"], "buff": [" buffers", "alph", "be", "font", "nd", "bb", " buf", "cod", "ff", "mem", "img", "ph", "eng", "buffer", "comp", "emb", "Buff", "cho", "cb", "uf", "cmd", "bin", "buf", "bj", "off", "cond", "ref", "info"]}}
{"id1": "19934218", "id2": "6625074", "code1": "    public static String doCrypt(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n        MessageDigest md;\n        md = MessageDigest.getInstance(\"SHA-1\");\n        byte[] sha1hash = new byte[40];\n        md.update(text.getBytes(\"UTF-8\"), 0, text.length());\n        sha1hash = md.digest();\n        return convertToHex(sha1hash);\n    }\n", "code2": "    public static String SHA1(String text) {\n        byte[] sha1hash = new byte[40];\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n            md.update(text.getBytes(\"iso-8859-1\"), 0, text.length());\n            sha1hash = md.digest();\n        } catch (UnsupportedEncodingException ex) {\n            Logger.getLogger(Converter.class.getName()).log(Level.SEVERE, null, ex);\n        } catch (NoSuchAlgorithmException ex) {\n            Logger.getLogger(Converter.class.getName()).log(Level.SEVERE, null, ex);\n        }\n        return convertToHex(sha1hash);\n    }\n", "label": 1, "substitutes": {"doCrypt": [" doescrypt", " doesDec", "doDec", "docrypt", " doesHash", "DoDec", "DoHash", "doHash", "DoCrypt", " doHash", "Docrypt", " docrypt", " doesCrypt", " doDec"], "text": ["path", "subject", "pt", "string", "binary", "log", "txt", "Text", "str", "term", "print", "test", "t", "event", "nt", "context", "msg", "select", "output", "aut", "url", "content", "act", "ext", "pattern", "code", "title", "config", "form", "ct", "buffer", "message", "format", "command", "input", "read", "document", "name", "template", "comment", "data", "x", "source", "cont", "value", "key", "password", "TEXT", "tx", "translation", "body", "now", "w", "word"], "UnsupportedEncodingException": ["UnsupportedEncodingEx", "UnsupportedEncgorithmException", "UnsupportedChoderException", "UnsupportedEncoderExit", "UnsupportedChoderEx", "UnsupportedChoderExit", "UnsupportedEncoderException", "UnsupportedChodingEx", "UnsupportedEncryptionError", "UnsupportedChoderError", "UnsupportedEncgorithmEx", "UnsupportedChodingException", "UnsupportedChodingExit", "UnsupportedEncryptionEx", "UnsupportedEncryptionException", "UnsupportedEncgorithmError", "UnsupportedEncryptionExit", "UnsupportedEncgorithmExit", "UnsupportedEncodingExit", "UnsupportedEncodingError", "UnsupportedEncoderEx", "UnsupportedEncoderError", "UnsupportedChodingError"], "md": ["mc", "d", " man", " od", "pd", "dir", "mt", "ld", "di", "sm", " ms", " maj", " mo", "nd", " cd", "red", "det", "ad", "m", " dd", " rm", "ms", "sd", "dd", "mand", "rm", "td", "hd", " mp", "mm", " mac", "ind", "cd", "mk", "od", "bd", " exec", "mg", " cmd", "mn", "dm", "add", "mp", "sha", "der", "df", "ent", "mb", "cmd", "grad", "MD", "gm", " Md", " df"], "sha1hash": ["sha2sum", " SHA1cache", " SHAOnecache", "sha512sum", "shaOnesum", "sha4hash", "shaonesum", "sha3hash", "SHA2Hash", "sha3key", "SHA1key", "sha512cache", " SHA1hash", "shaOnehash", "sha512Hash", "shaonekey", "sha3hex", "sha1cache", "haonehash", "SHA1hash", "sha2hash", "haonecache", "shaOnecache", "SHA2key", "sha1key", "ha1cache", "ha1sum", "sha1sum", "shaonehex", "sha2cache", "ha1hash", "sha1Hash", "SHA2hash", " SHAOneheader", "sha2hex", "sha3Hash", "shaoneHash", "sha4cache", "SHA1hex", "sha512hash", "sha1header", " SHA1header", "SHA2hex", "shaonehash", "shaonecache", "sha2Hash", " SHAOnesum", "sha4header", "sha4sum", "ha1Hash", "SHA1Hash", "sha2key", " SHAOnehash", "shaOneheader", "sha2header", "sha1hex", " SHA1sum", "haoneHash", "haonesum"]}}
{"id1": "9327525", "id2": "1005107", "code1": "    @Test\n    public void test02_ok() throws Exception {\n        DefaultHttpClient client = new DefaultHttpClient();\n        try {\n            HttpPost post = new HttpPost(chartURL);\n            List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>(1);\n            nameValuePairs.add(new BasicNameValuePair(\"ws\", \"getDomainEvolution\"));\n            nameValuePairs.add(new BasicNameValuePair(\"chartTitle\", \"test\"));\n            nameValuePairs.add(new BasicNameValuePair(\"type\", \"chart\"));\n            nameValuePairs.add(new BasicNameValuePair(\"firstDate\", \"20111124\"));\n            nameValuePairs.add(new BasicNameValuePair(\"lastDate\", \"20111125\"));\n            nameValuePairs.add(new BasicNameValuePair(\"wsParams\", \"type,counting,protocol,unit,proxy,domain,timeScale,period\"));\n            nameValuePairs.add(new BasicNameValuePair(\"wsParamsValues\", \"chart,volume,all,hits,all,google.com,day,360\"));\n            nameValuePairs.add(new BasicNameValuePair(\"serieTitle\", \"serie\"));\n            post.setEntity(new UrlEncodedFormEntity(nameValuePairs));\n            HttpResponse response = client.execute(post);\n            HttpEntity entity = response.getEntity();\n            assertNotNull(entity);\n            InputStream instream = entity.getContent();\n            BufferedReader reader = new BufferedReader(new InputStreamReader(instream));\n            System.out.println(reader.readLine());\n            instream.close();\n            assertEquals(\"error :\" + response.getStatusLine(), 200, response.getStatusLine().getStatusCode());\n        } finally {\n            client.getConnectionManager().shutdown();\n        }\n    }\n", "code2": "    public void googleImageSearch() {\n        if (artist.compareToIgnoreCase(previousArtist) != 0) {\n            MusicBoxView.googleImageLocation = 0;\n            try {\n                String u = \"http://images.google.com/images?q=\" + currentTrack.getArtist() + \" - \" + currentTrack.getAlbum() + \"&sa=N&start=0&ndsp=21\";\n                if (u.contains(\" \")) {\n                    u = u.replace(\" \", \"+\");\n                }\n                URL url = new URL(u);\n                HttpURLConnection httpcon = (HttpURLConnection) url.openConnection();\n                httpcon.addRequestProperty(\"User-Agent\", \"Mozilla/4.76\");\n                BufferedReader readIn = new BufferedReader(new InputStreamReader(httpcon.getInputStream()));\n                String text = \"\";\n                String lin = \"\";\n                while ((lin = readIn.readLine()) != null) {\n                    text += lin;\n                }\n                readIn.close();\n                if (text.contains(\"\\n\")) {\n                    text = text.replace(\"\\n\", \"\");\n                }\n                String[] array = text.split(\"\\\\Qhref=\\\"/imgres?imgurl=\\\\E\");\n                for (String s : array) {\n                    if (s.startsWith(\"http://\") || s.startsWith(\"https://\") && s.contains(\"&amp;\")) {\n                        String s1 = s.substring(0, s.indexOf(\"&amp;\"));\n                        googleImages.add(s1);\n                    }\n                }\n            } catch (Exception ex4) {\n                MusicBoxView.showErrorDialog(ex4);\n            }\n        }\n    }\n", "label": 0, "substitutes": {"test02_ok": ["test2__OK", "test02AOk", "test02_full", "test2_ok", "test2__ok", "test02AOK", "test02__full", "test02Afull", "test02_Ok", "test2_full", "test02__OK", "test02Aok", "test02__Ok", "test2_OK", "test2__full", "test2_Ok", "test02__ok", "test02_OK", "test2__Ok"], "client": ["Client", "local", "system", "contact", "cell", "resource", "wrapper", "remote", "loader", "context", "service", "phone", "control", "network", "call", "cp", "c", "null", "connection", "session", "secure", "cli", "ci", "console", "close", "ssl", "google", "server", "uri", "api", "config", "cl", "connect", "app", "conn", "core", "acl", "cm", "http", "sim", "request", "window", "cache", "ip", "tc", "pool", "handler", "policy", "co", "con", "collection"], "post": ["build", "send", "pod", "op", "submit", "put", "apply", "p", "ost", "process", "test", "method", "row", "copy", "url", "call", "write", "zip", "wp", "link", "valid", "pre", "form", "set", "dd", "get", "Post", "parse", "push", "read", "upload", "patch", "http", "posts", "load", "save", "add", "and", "POST", "pp", "request", "ip", "next", "body", "install"], "nameValuePairs": ["nameValuespairs", "nameValuespings", "nameNamePersings", "nameValuePararms", "nameValuepuffs", "nameValuesPonents", "nameValuespair", "nameValuePuffs", "nameValuespappings", "nameValuesponents", "nameNameParores", "nameValuePersonents", "nameValueAssars", "nameValueMapars", "nameValuePair", "nameNamePersutes", "nameValueAssarms", "nameValuePointonents", "nameNameParair", "nameNamePutes", "nameValueCompings", "nameNamePersair", "nameValueParappings", "nameValueApparms", "nameValuePappings", "nameValuepappings", "nameValuePings", "nameValueparms", "nameValueMapairs", "nameValueChings", "nameValuesPairs", "nameValueParairs", "nameValuePersings", "nameValuepairs", "nameValuesparms", "nameValuePersuffs", "nameValuepars", "nameValuesPings", "nameValueEairs", "nameNamePersarms", "nameValueParair", "nameValuePersairs", "nameValueChappings", "nameNamePings", "nameValueChars", "nameValuePointars", "nameValueCompappings", "nameValuesPair", "nameValueCompair", "nameNamePair", "nameNameParairs", "nameValuespars", "nameValueParms", "nameValueParars", "nameValueputes", "nameValuesPars", "nameValuePersarms", "nameValueChairs", "nameValueAppings", "nameValuepores", "nameValueMaputes", "nameNameParms", "nameNameParars", "nameValuePointarms", "nameValueAssair", "nameValuePars", "nameValueCompairs", "nameValuePutes", "nameNamePores", "nameValueParores", "nameValueAppairs", "nameValueCompars", "nameNamePars", "nameNamePairs", "nameValuesPappings", "nameValueEars", "nameValuePersutes", "nameValuePonents", "nameValueAssairs", "nameValuepings", "nameValuePores", "nameValueponents", "nameValuePersars", "nameValuePointairs", "nameValuepair", "nameValuesParms", "nameValueCharms", "nameValuePersair", "nameValuePersappings", "nameValueChair", "nameValueEair", "nameNamePersairs", "nameNamePersars", "nameValueParuffs"], "response": ["description", "sequence", "given", "respond", "resource", "channel", "onse", "service", "still", "Response", "output", "model", "network", "view", "block", "connection", "res", "profile", "status", "console", "volume", "server", "def", "body", "result", "message", "example", "page", "tree", "document", "frame", "object", "http", "application", "answer", "report", "header", "version", "request", "pos", "json", "ve", "reply", "resp", "entry", "command"], "entity": ["eric", "put", "ell", "ce", "my", "oe", "resource", "channel", "e", "obj", "event", "ity", "output", "ee", "model", "Entity", "instance", "eme", "code", "quote", "person", "status", "note", "encrypted", "pe", "result", "voice", "message", "activity", "ENT", "document", "object", "line", "error", "comment", "data", "image", "details", "metadata", "ITY", "el", "empty", "xml", "json", "ent", "existent", "type", "body", "entry"], "instream": ["inputStream", "inputpod", "inputstream", " inpod", "inconsole", "inputconsole", "inline", "Inform", "inputline", " inStream", " incontext", "insline", "outform", "inscontext", "insstream", "incontext", "inStream", "outstream", "outStream", " inform", "inputform", " inline", "Inline", "inpod", "inform", "Instream", "outcontext", " inconsole", "inputcontext", "inspod", "Inconsole"], "reader": ["file", "roller", "latest", "loader", "ader", "ner", "row", "Reader", "holder", "maker", "r", "editor", "relation", "inner", "rar", "upper", "console", "builder", "runner", "book", "iterator", "buffer", "READ", "writer", "read", "parser", "rr", "operator", "liner", "reading", "rer", "rl", "driver", "controller", "er", "stream", "handler"]}}
{"id1": "20623709", "id2": "88047", "code1": "    public Long split(File targetDirectory, String prefix, long maxUnitBases, long maxUnitEntries) throws Exception {\n        if (!targetDirectory.exists()) {\n            if (!targetDirectory.mkdirs()) throw new Exception(\"Could not create target directory \" + targetDirectory.getAbsolutePath());\n        }\n        if (!size.isUnknown() && size.getBases() < maxUnitBases && (maxUnitEntries <= 0 || size.getEntries() < maxUnitEntries)) {\n            FileInputStream fis = new FileInputStream(this);\n            FileChannel fci = fis.getChannel();\n            FileOutputStream fos = new FileOutputStream(new File(targetDirectory, prefix + \"_0\" + \".fasta\"));\n            FileChannel fco = fos.getChannel();\n            ByteBuffer buffer = ByteBuffer.allocate(64000);\n            while (fci.read(buffer) > 0) {\n                buffer.flip();\n                fco.write(buffer);\n                buffer.clear();\n            }\n            fci.close();\n            fco.close();\n            return (long) 1;\n        } else {\n            long currentBasesCount = 0;\n            long currentEntriesCount = 0;\n            int targetCount = 0;\n            FileChannel fastaChannel = new FileInputStream(this).getChannel();\n            int totalSeqCount = 0;\n            long totalResiduesCount = 0;\n            try {\n                long prevTime = System.currentTimeMillis();\n                long fastaFileSize = this.length();\n                long fastaFileReadOffset = 0L;\n                long partitionStartOffset = 0L;\n                final int bufferSize = 1024 * 1024;\n                ByteBuffer fastaBuffer = ByteBuffer.allocateDirect(bufferSize);\n                int fastaReadState = FASTAFileTokenizer.UNKNOWN;\n                for (; fastaFileReadOffset < fastaFileSize; ) {\n                    long nBytes = fastaChannel.read(fastaBuffer);\n                    if (nBytes <= 0) {\n                        fastaBuffer.limit(0);\n                        break;\n                    } else {\n                        fastaBuffer.flip();\n                        fastaFileReadOffset += nBytes;\n                    }\n                    for (; ; ) {\n                        if (!fastaBuffer.hasRemaining()) {\n                            fastaBuffer.clear();\n                            break;\n                        }\n                        int b = fastaBuffer.get();\n                        if (b == '\\r') {\n                        } else if (b == '\\n') {\n                            if (fastaReadState == FASTAFileTokenizer.DEFLINE) {\n                                fastaReadState = FASTAFileTokenizer.SEQUENCELINE;\n                            }\n                        } else if (b == '>') {\n                            if (fastaReadState == FASTAFileTokenizer.UNKNOWN) {\n                                fastaReadState = FASTAFileTokenizer.STARTDEFLINE;\n                            } else if (fastaReadState == FASTAFileTokenizer.SEQUENCELINE) {\n                                fastaReadState = FASTAFileTokenizer.STARTDEFLINE;\n                            }\n                            if (fastaReadState == FASTAFileTokenizer.STARTDEFLINE) {\n                                if (currentBasesCount >= maxUnitBases || maxUnitEntries > 0 && currentEntriesCount >= maxUnitEntries) {\n                                    fastaBuffer.position(fastaBuffer.position() - 1);\n                                    long currentTime = System.currentTimeMillis();\n                                    System.out.println(new java.util.Date() + \" Partition \" + targetCount + \" containing \" + currentEntriesCount + \" sequences and \" + currentBasesCount + \" residues ends at \" + (fastaFileReadOffset - fastaBuffer.remaining()) + \" and was created in \" + (currentTime - prevTime) + \" ms\");\n                                    prevTime = currentTime;\n                                    long partitionEndOffset = fastaFileReadOffset - fastaBuffer.remaining();\n                                    FileChannel partitionChannel = new FileOutputStream(new File(targetDirectory, prefix + \"_\" + targetCount + \".fasta\")).getChannel();\n                                    nBytes = fastaChannel.transferTo(partitionStartOffset, partitionEndOffset - partitionStartOffset, partitionChannel);\n                                    partitionChannel.force(true);\n                                    partitionChannel.close();\n                                    targetCount++;\n                                    partitionStartOffset += nBytes;\n                                    currentBasesCount = 0;\n                                    currentEntriesCount = 0;\n                                    fastaReadState = FASTAFileTokenizer.UNKNOWN;\n                                } else {\n                                    fastaReadState = FASTAFileTokenizer.DEFLINE;\n                                    currentEntriesCount++;\n                                }\n                                totalSeqCount++;\n                            }\n                        } else {\n                            if (fastaReadState == FASTAFileTokenizer.SEQUENCELINE) {\n                                totalResiduesCount++;\n                                currentBasesCount++;\n                            }\n                        }\n                    }\n                }\n                if (partitionStartOffset < fastaFileSize) {\n                    long currentTime = System.currentTimeMillis();\n                    System.out.println(new java.util.Date() + \" Partition \" + targetCount + \" containing \" + currentEntriesCount + \" sequences and \" + currentBasesCount + \" residues ends at \" + (fastaFileSize) + \" and was created in \" + (currentTime - prevTime) + \" ms\");\n                    FileChannel partitionChannel = new FileOutputStream(new File(targetDirectory, prefix + \"_\" + targetCount + \".fasta\")).getChannel();\n                    fastaChannel.transferTo(partitionStartOffset, fastaFileSize - partitionStartOffset, partitionChannel);\n                    partitionChannel.force(true);\n                    partitionChannel.close();\n                    targetCount++;\n                }\n                if (size.isUnknown()) {\n                    size.setBases(totalResiduesCount);\n                    size.setEntries(totalSeqCount);\n                }\n            } finally {\n                fastaChannel.close();\n            }\n            return (long) targetCount;\n        }\n    }\n", "code2": "    private static void readAndRewrite(File inFile, File outFile) throws IOException {\n        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n        Dataset ds = DcmObjectFactory.getInstance().newDataset();\n        dcmParser.setDcmHandler(ds.getDcmHandler());\n        dcmParser.parseDcmFile(null, Tags.PixelData);\n        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        System.out.println(\"reading \" + inFile + \"...\");\n        pdReader.readPixelData(false);\n        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n        ds.writeDataset(out, dcmEncParam);\n        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n        System.out.println(\"writing \" + outFile + \"...\");\n        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        pdWriter.writePixelData();\n        out.flush();\n        out.close();\n        System.out.println(\"done!\");\n    }\n", "label": 1, "substitutes": {"split": ["scan", "batch", "lock", "append", "disk", "Split", "part", "process", "map", "join", "count", "open", "scale", "copy", "write", "slice", "format", "align", "parse", "read", "upload", "seek", "transfer", "use", "unit", "sync", "share"], "targetDirectory": ["testLocation", "targetdirectory", "localDir", "baseFolder", " targetFile", " targetDir", " targetFolder", " targetMemory", "TargetFolder", "TargetDirect", " targetdirectory", "testDirectory", "localDirectory", "Targetdirectory", "TargetDirectory", "TargetMemory", "TargetLocation", "baseDirectory", "TargetDir", "baseMemory", "localdirectory", "targetDir", "targetDirect", " targetDirect", " targetLocation", "targetMemory", "baseDirect", "testDir", "testDirect", "localFile", "targetLocation", "targetFolder", "baseDir", "targetFile", "baseFile", "basedirectory"], "prefix": ["localhost", "path", "p", "fix", "tag", "PRE", "username", "pres", "filename", "index", "alias", "pattern", "FIX", "pi", "title", "status", "fixes", "pre", "uri", "base", "fixed", "size", "padding", "format", "root", "name", "template", "zero", "Pref", "key", "password", "division", "version", "ix", "pkg", "directory", "type", "this", " suffix", "command"], "maxUnitBases": ["maxUnitAliias", "maxUnitLicas", "maxUnityBages", "maxUnitReplases", "maxUnitAliases", "maxUnityBounds", "maxUnitbias", "maxUnityAliades", "maxUnityLages", "maxUnityLounds", "maxUnityBias", "maxUnitChounds", "maxUnitBias", "maxUnitBades", "maxUnitAliades", "maxUnitReplages", "maxUnitLages", "maxUnitBages", "maxUnitChicas", "maxUnityLases", "maxUnityLicas", "maxUnityBicas", "maxUnityBases", "maxUnityAliounds", "maxUnitChages", "maxUnitReplounds", "maxUnityAliias", "maxUnitReplicas", "maxUnitbades", "maxUnitLases", "maxUnitChases", "maxUnitBounds", "maxUnityAliases", "maxUnitChades", "maxUnityBades", "maxUnitBicas", "maxUnitChias", "maxUnitbases", "maxUnitAliounds", "maxUnitLounds", "maxUnitbounds"], "maxUnitEntries": ["maxUnitEntrs", "maxUnityEntrys", "maxUnityentrys", "maxUnitEntires", "maxUnitIntegriers", "maxUnitEntryires", "maxUnitErrys", "maxUnitIntegrys", "maxUnitentrs", "maxUnityentires", "maxUnitentrys", "maxUnityEntries", "maxunitEntires", "maxUnitErrs", "maxUnityEntrs", "maxUnitEntrys", "maxUnitErries", "maxUnitentires", "maxUnitEntriers", "maxUnitEntryries", "maxUnityentries", "maxUnitIntegires", "maxUnitentries", "maxUnityentrs", "maxunitEntrys", "maxUnitEntryrys", "maxunitEntries", "maxUnitIntegries", "maxUnitErires", "maxunitEntrs", "maxUnityEntires", "maxUnitEntryriers"], "fis": ["Fci", "fic", "viss", "Fii", "ifci", " fii", " fiss", " fi", "ifis", "vis", "Fic", "fiss", "fii", "Fis", " fic", "ifii", "Fiss", "vic", "ific", "fi", "vi", "Fi"], "fci": ["mcu", "cfini", "Fci", "tci", "fic", "cfico", "tii", "mci", "Fai", "Fini", " fcu", "mii", " fii", "cfis", "Fco", "fcu", "cfco", "Fic", "cfic", "fii", "Fis", " fic", "mco", "Fico", " fico", "fico", "tcu", "tco", "fini", "fai", " fai", " fini", "cfci", "cfai"], "fos": ["yos", "Fos", "fios", "faos", "yios", " fOS", "wbos", " fios", "flOS", "foss", "flos", "Faos", " faos", "ybos", " fbos", "yaos", "waos", "wios", "wos", "floss", "fOS", "FOS", "flaos", "fbos", " foss", "Foss"], "fco": ["Fci", "cdo", " foco", "pci", " fcos", "Fco", "pco", "Foco", "cco", "fcos", "Fso", "cso", "Fcos", " fdo", "Fdo", "pcos", "fdo", "toco", "fcon", "tco", "Fcon", " fso", "pso", "ccon", " fcon", "tdo", "fso", "tcos", "foco"], "buffer": ["black", "sample", "address", "function", "batch", "match", "filter", "binary", "sequence", "append", "queue", "pause", "length", "print", "char", "channel", "timeout", "event", "bridge", "position", "row", "stack", "phrase", "record", "limit", "holder", "flush", "complete", "button", "index", "library", "block", "note", "iter", "padding", "table", "message", "buff", "result", "database", "read", "document", "template", "comment", "callback", "data", "source", "reset", "memory", "window", "cache", "order", "buf", "Buffer", "temp", "entry", "command"], "currentBasesCount": ["currentbasesLength", "currentBasedCount", "currentbaseCode", "currentBadesCode", "currentbasesCode", "currentBadesLength", "currentBaseCode", "currentBasesLength", "currentbaseLength", "currentbaseCount", "currentBasedCode", "currentBasesCode", "currentbasesCount", "currentBadesCount", "currentBaseCount", "currentBaseLength", "currentBasedLength"], "currentEntriesCount": ["currentEntiesCode", "currentEntriesCode", "currentEntrsCount", "currentEntrysCode", "currentEntrysFlag", "currentEntrsFlag", "currentEntriesFlag", "currentEntiesFlag", "currentEntrysCount", "currentEntrsCode", "currentEntiesCount"], "targetCount": ["TargetCount", "TargetAmount", " targetAmount", "targetNum", "argetAmount", " targetInfo", "argetInfo", "TargetInfo", " targetNum", "targetInfo", "targetAmount", "argetCount", "argetNum", "TargetNum"], "fastaChannel": ["fastoProvider", "fastpaButton", "fastityChan", "fastoChannel", " fastoQueue", "fastpaProvider", " fastoChannel", "fastoQueue", "fastoStream", "fastaiStream", "fastoConnection", "fastityChannel", " fastaStream", "fastaiChan", "fastaiQueue", "fastityQueue", " fastaProvider", "fastpaConnection", "fastaButton", "fastoButton", "fastaQueue", "fastaChan", " fastoChan", "fastaiChannel", " fastaButton", "fastaProvider", "fastaConnection", "fastpaChannel", "fastoChan", " fastoStream", " fastaQueue", "fastaStream", " fastaChan", " fastaConnection", "fastityStream"], "totalSeqCount": ["totalSeQCount", "totalSegCounter", "totalSeQCode", "totalSeqSize", "totalSegCode", "totalSegSize", "totalSegCount", "totalSeqCounter", "totalSeqsCount", "totalSeqsCounter", "totalSeQSize", "totalSeQCounter", "totalSeqsCode", "totalSeqsSize", "totalSeqCode"], "totalResiduesCount": ["totalResiduesFlag", "totalResIduesFlag", "totalResidusFlag", "totalResiduationsCode", "totalResidueCode", "totalResIduesCount", "totalResIdueCount", "totalResidueFlag", "totalResIdueFlag", "totalResidusCode", "totalResidueCount", "totalResiduesCode", "totalResiduationsFlag", "totalResIduesCode", "totalResIdueCode", "totalResiduationsCount", "totalResidusCount"], "prevTime": ["prevThread", " previousThread", " previousTime", "parThread", " prevT", " previousT", "parTime", "prevT", " prevThread", "parT"], "fastaFileSize": ["fastaFileName", "fastATableName", "fastoFileSize", "fastoFileOwner", "fastaTableName", "fastaFileSIZE", "fastAFileLength", "fastafileSize", "fastoFileSIZE", "fastaReaderHeight", "fastATableLength", "fastaChainLength", "fastATableSize", "fastoTableLength", "fastafileLength", "fastaFileLength", "fastaFileOwner", "fastaReaderLength", "fastoFileLength", "fastaChainSize", "fastaTableOwner", "fastoTableSIZE", "fastaTableSize", "fastaReaderSize", "fastafileSIZE", "fastaChainSIZE", "fastAFileHeight", "fastaFilesName", "fastAFileName", "fastAFileSize", "fastaFileHeight", "fastoTableOwner", "fastafileOwner", "fastaChainOwner", "fastaReaderName", "fastaFilesHeight", "fastaFilesLength", "fastATableHeight", "fastaTableHeight", "fastaFilesSize", "fastoTableSize", "fastaTableLength", "fastaTableSIZE"], "fastaFileReadOffset": ["fastaPageLoadPos", "fastaFileInputOrder", "fastaPageLoadAmount", "fastaFileLoadOffset", "fastaFileLoadAmount", "fastaFileLoadLength", "fastaPageReadOffset", "fastaFileReaderoffset", "fastaFileReadPos", "fastaChainReadLocation", "fastaFileWriteAmount", "fastaFileReadOrder", "fastaFileInputLength", "fastaFileWriteLength", "fastaFileReadLength", "fastaFilesLoadAmount", "fastaFilereadAmount", "fastaFileInputAmount", "fastaFileViewPos", "fastaFileReadPosition", "fastaFileReaderLocation", "fastaFileLoadPos", "fastaFilesReadOrder", "fastaPageLoadOrder", "fastaChainCurrentoffset", "fastaChainCurrentLocation", "fastaFileLoadOrder", "fastaFileWriteOrder", "fastaPageLoadOffset", "fastaChainReadoffset", "fastaFileReadLocation", "fastaFilereadOrder", "fastaFilesLoadLength", "fastaFileInputLocation", "fastaFileCurrentoffset", "fastaFilesLoadOrder", "fastaFilesReadOffset", "fastaFileCurrentPosition", "fastaFilereadPos", "fastaFileCurrentOffset", "fastaFileViewOrder", "fastaFilesLoadOffset", "fastaFileReadoffset", "fastaFileInputOffset", "fastaFilereadOffset", "fastaFileInputoffset", "fastaChainReadOffset", "fastaPageReadAmount", "fastaFileViewAmount", "fastaFileCurrentLocation", "fastaChainReadPosition", "fastaFileViewOffset", "fastaPageReadPos", "fastaFileReadAmount", "fastaFileReaderPosition", "fastaPageReadOrder", "fastaChainCurrentPosition", "fastaFileReaderOffset", "fastaChainCurrentOffset", "fastaFilesReadAmount", "fastaFileInputPosition", "fastaFileWriteOffset", "fastaFilesReadLength"], "partitionStartOffset": ["partitonStartingPosition", "partitionDataOff", "partitionEndPoint", "partitionStartPosition", "partitionEndPosition", "partitionStartingOff", "partitionDataPoint", "partitionDataOffset", "partitionStartingPosition", "partitionStartingOffset", "partitionDataPosition", "partitionEndOff", "partitionStartPoint", "partitonStartingPoint", "partitonStartOff", "partitonStartPoint", "partitonStartOffset", "partitionStartingPoint", "partitonStartingOff", "partitionStartOff", "partitonStartPosition", "partitonStartingOffset"], "bufferSize": [" bufferCode", "bufSIZE", "BufferName", " bufferLength", "bufCode", "bufSize", "bufferSIZE", "tableSIZE", "sequenceSIZE", "BufferSize", "sequenceCode", "tableLength", "buffLength", "bufferLength", "sequenceSize", "bufferName", "tableName", "buffSize", "buffSIZE", "buffName", "bufferCode", "BufferLength", "sequenceLength", "bufLength", " bufferSIZE", "tableSize", "BufferSIZE"], "fastaBuffer": ["fastalCounter", "fastmaQueue", "fastmaBuffer", "fastalQueue", "fastaCache", "fasteBuffer", " fastaBuff", "fastaStore", " fastoBuffer", " fastaCache", "fasteBuff", "fastaQueue", "fastaMemory", "fastsaQueue", "fastuBuff", "FastaRequest", "fastuMemory", "fastmaChannel", "FastaBuffer", "fastaRequest", "FastmaBuff", "fastcaBuffer", "fastmaStore", "fastuBuffer", "fastalBuff", " fastaMemory", "FastaStore", "fastoRequest", "FastmaRequest", "FastmaBuffer", " fastaCounter", "fastasCache", "fastsaBuffer", "fastaDB", "fastanCache", "wildanRequest", "FastaBuff", "fastoBuff", "fastalBuffer", "fastoBuffer", "fastmaRequest", " fastoQueue", "fastoQueue", "fastasStore", "fastmaCache", "fastasQueue", "wildaBuffer", "fastcaCache", "fastanBuffer", " fastaBuilder", "fasteMemory", "fastasBuffer", " fastoBuff", "fastaBuilder", " fastaDB", "fastoCounter", "fastanRequest", "wildanBuffer", "FastmaStore", " fastoCounter", "fastsaBuff", "fastcaBuff", "fastuDB", " fastaQueue", "wildanCache", "fastasBuilder", "fastaBuff", "fastsaChannel", "fastasRequest", "fastcaRequest", "fastaCounter", "wildaRequest", "fastasBuff", "fastmaBuff", "fastoStore", "fastmaBuilder", "fasteDB", "wildanBuff", "fastanBuff", "wildaCache", "fastasCounter", "wildaBuff"], "fastaReadState": ["fastoReadType", "fastaReaderType", "fastaLoadSTATE", "fastaLoadType", "fastaReadType", "fastaReaderStatus", "fastoReaderSTATE", "fastaCurrentSTATE", "fastoReadState", "fastaReadSTATE", "fastaReaderSTATE", "fastaReadStatus", "fastaCurrentType", "fastaCurrentState", "fastoReadSTATE", "fastoReaderState", "fastaLoadStatus", "fastaCurrentStatus", "fastoReadStatus", "fastaReaderState", "fastoReaderStatus", "fastoReaderType", "fastaLoadState"], "nBytes": ["Nbytes", "noBlocks", " nKeys", "nrbytes", " nParts", "numBlocks", "nsbytes", "nsBytes", "NKeys", "nsWords", "nbytes", "nrItems", "noBytes", "nBlocks", "NItems", "nobytes", "NParts", "NWords", "nsParts", "numbytes", " nNs", "nKeys", "numNs", " nbytes", " nItems", "nWords", "nrBytes", "nrKeys", "noNs", "numBytes", "nParts", " nWords", "nNs", "nItems", " nBlocks", "NBytes"]}}
{"id1": "6890417", "id2": "18164929", "code1": "    public static void main(String[] args) throws IOException {\n        PostParameter a1 = new PostParameter(\"v\", Utils.encode(\"1.0\"));\n        PostParameter a2 = new PostParameter(\"api_key\", Utils.encode(RenRenConstant.apiKey));\n        PostParameter a3 = new PostParameter(\"method\", Utils.encode(\"feed.publishTemplatizedAction\"));\n        PostParameter a4 = new PostParameter(\"call_id\", System.nanoTime());\n        PostParameter a5 = new PostParameter(\"session_key\", Utils.encode(\"5.b2ca405eef80b4da1f68d0df64e471be.86400.1298372400-350727914\"));\n        PostParameter a8 = new PostParameter(\"format\", Utils.encode(\"JSON\"));\n        PostParameter a9 = new PostParameter(\"template_id\", Utils.encode(\"1\"));\n        PostParameter a10 = new PostParameter(\"title_data\", Utils.encode(\"\\\"conteng\\\":\\\"xkt\\\"\"));\n        PostParameter a11 = new PostParameter(\"body_data\", Utils.encode(\"\\\"conteng\\\":\\\"xkt\\\"\"));\n        RenRenPostParameters ps = new RenRenPostParameters(Utils.encode(RenRenConstant.secret));\n        ps.addParameter(a1);\n        ps.addParameter(a2);\n        ps.addParameter(a3);\n        ps.addParameter(a4);\n        ps.addParameter(a5);\n        ps.addParameter(a8);\n        ps.addParameter(a9);\n        ps.addParameter(a10);\n        ps.addParameter(a11);\n        System.out.println(RenRenConstant.apiUrl + \"?\" + ps.generateUrl());\n        URL url = new URL(RenRenConstant.apiUrl + \"?\" + ps.generateUrl());\n        HttpURLConnection request = (HttpURLConnection) url.openConnection();\n        request.setDoOutput(true);\n        request.setRequestMethod(\"POST\");\n        System.out.println(\"Sending request...\");\n        request.connect();\n        System.out.println(\"Response: \" + request.getResponseCode() + \" \" + request.getResponseMessage());\n        BufferedReader reader = new BufferedReader(new InputStreamReader(request.getInputStream()));\n        String b = null;\n        while ((b = reader.readLine()) != null) {\n            System.out.println(b);\n        }\n    }\n", "code2": "    public static boolean isCodebaseDownloadable(Properties p) {\n        class CodebaseData {\n\n            String file;\n\n            boolean success = true;\n        }\n        String codebase = p.getProperty(\"java.rmi.server.codebase\", null);\n        if (null == codebase) {\n            if (logger.isDebugEnabled()) logger.debug(\"java.rmi.server.codebase = null (return false)\");\n            return false;\n        }\n        try {\n            URL cbUrl = new URL(codebase);\n            String protocol = cbUrl.getProtocol();\n            String filename = cbUrl.getFile();\n            if (logger.isDebugEnabled()) {\n                logger.debug(\"Verifying java.rmi.server.codebase setting(s)...\");\n                logger.debug(\"Codebase = \" + cbUrl.toString());\n            }\n            if (protocol.equals(\"http\")) {\n                if (filename.indexOf(\"http\") == -1) {\n                    try {\n                        int size = cbUrl.openConnection().getContentLength();\n                        if (logger.isDebugEnabled()) logger.debug(\"Checking \" + cbUrl + \" : OK\");\n                        return true;\n                    } catch (IOException e) {\n                        if (logger.isDebugEnabled()) logger.debug(\"Checking \" + cbUrl + \" : FAIL\");\n                        return false;\n                    } finally {\n                        if (logger.isDebugEnabled()) logger.debug(\"Verifying java.rmi.server.codebase setting(s)... Done!\");\n                    }\n                } else {\n                    ArrayList files = new ArrayList();\n                    StringTokenizer st = new StringTokenizer(codebase);\n                    URL url = null;\n                    String part = null;\n                    CodebaseData data = null;\n                    while (st.hasMoreTokens()) {\n                        part = st.nextToken();\n                        url = new URL(part);\n                        data = new CodebaseData();\n                        try {\n                            int len = url.openConnection().getContentLength();\n                            if (len == -1) {\n                                data.success = false;\n                                data.file = part;\n                            } else {\n                                data.file = part;\n                            }\n                        } catch (IOException e) {\n                            data.success = false;\n                        }\n                        files.add(data);\n                    }\n                    String wrong = null;\n                    CodebaseData codebaseData = null;\n                    boolean allOK = true;\n                    int errorFiles = 0;\n                    for (int i = 0; i < files.size(); i++) {\n                        codebaseData = (CodebaseData) files.get(i);\n                        if (!codebaseData.success) {\n                            wrong += \" \" + codebaseData.file;\n                            ++errorFiles;\n                            allOK = false;\n                        }\n                        if (logger.isDebugEnabled()) logger.debug((i + 1) + \". Checking \" + codebaseData.file + \" : \" + (codebaseData.success ? \"OK\" : \"FAIL\"));\n                    }\n                    if (errorFiles == 0) {\n                        if (logger.isDebugEnabled()) logger.debug(\"All entries can be downloaded successfully!\");\n                    } else {\n                        logger.error(errorFiles + \" of \" + files.size() + \" entries can *not* be downloaded successfully!\");\n                    }\n                    if (logger.isDebugEnabled()) logger.debug(\"Verifying java.rmi.server.codebase setting(s)... Done!\");\n                    if (allOK) {\n                        return true;\n                    } else {\n                        return false;\n                    }\n                }\n            } else if (protocol.equalsIgnoreCase(\"file\")) {\n                if (logger.isDebugEnabled()) logger.debug(\"'file' protocol not supported for JSF\");\n            }\n        } catch (MalformedURLException e) {\n            logger.debug(e.getMessage());\n            return false;\n        }\n        return false;\n    }\n", "label": 0, "substitutes": {"a1": ["a01", "area01", " a0", "sa1", "sa4", "sa5", "ga0", "ga5", "sa0", "sa2", "area4", "ga1", "ga9", "area2", "sa01", "a0", "area1", " a01", "sa9"], "a2": ["a02", " a0", "area02", "ga0", "ga5", "e2", "ga2", "areaTwo", "eTwo", "area2", " a02", "aTwo", "e02", "a0", "area1", "A0", "ga4", "A4", " aTwo", "e1", "A2", "A5"], "a3": ["A11", "A3", "ga2", "AThree", "A03", " aThree", "pa3", "pa11", " a03", "ga3", "pa5", "A1", "pa1", "a03", "gaThree", "aThree", "ga03", "A2", "A5"], "a4": ["era3", "era443", "aFour", " a404", "alpha4", "alpha404", "alpha443", "as4", " a443", "era404", " aFour", "asFour", "alpha3", "an4", "a404", "era4", "a443", "anFour"], "a5": ["e6", "b4", "e4", "an8", "e5", "n8", "an1", "a512", "an5", "e512", "n5", "b6", "n6", "a6", "ka6", "b512", "ka5", "n1", "ka4", "b5", "an6", "ka512", " a6"], "a8": ["sa8", "aa8", "b8", "sa6", "aa6", "ga5", "A9", "b6", "aa10", "b08", "ga9", "a6", "a08", "A8", "a7", "ga8", "sa08", "ga7", "aa08", "A7", " a7", "sa10", "b10", "A5"], "a9": ["ca9", "alpha12", "a12", "ca10", "sa09", "A12", "A9", " a08", " a99", "alpha9", "a99", "a09", "A08", "alpha08", "a08", "ca09", "a7", "sa99", " a12", "ca99", "A7", " a7", "alpha7", "sa9", "sa10", " a09"], "a10": ["p8", "a12", "an8", "an10", "p10", "ae10", "e10", "e8", "a6", "an9", "ae12", "p9", "p6", " a12", "e9", "ae8", "an6", " a6", "e12", "ae9"], "a11": ["A11", "as14", " a131", "a12", "A12", "A131", "e14", "as131", "e13", "a131", "as11", "e11", "a14", " a12", "a13", "A14", " a13", " a14", "e12", "as12", "A13"], "ps": ["plays", "js", "pes", "Ps", "pots", "ks", "pt", "pd", "vs", "p", "ups", "ars", "points", "ats", "pps", "eps", "ls", "abilities", "pres", "ress", "pas", "gs", "rs", "ts", "cs", "caps", "aps", "ims", "als", "fs", "ns", "pers", "ports", "fps", "params", "pe", "sp", "s", "ms", "bs", "parts", "its", "ops", "ds", "ips", "pr", "ap", "pp", "mp", "amps", "pos", "checks", "pse", "css", "ams", "helps", "es", "qs", "PS", "ys"], "url": ["sl", "gl", "proxy", "log", "Url", "abs", "str", "nl", "browser", "loader", "ls", "open", "r", "cp", "dl", "ll", "connection", "pl", "https", "ssl", "link", "uri", "URL", "web", "ur", "impl", "u", "http", "socket", "rl", "uu", "l", "il", "gc", "ul"], "request": ["pull", "trip", "resource", "process", "start", "position", "method", "open", "complete", "re", "r", "call", "cgi", "query", "connection", "session", "ssl", "close", "builder", "requ", "server", "initial", "job", "web", "connect", "message", "result", "get", "q", "req", "create", "change", "Request", "client", "http", "socket", "rest", "reset", "QUEST", "pc", "quest", "response", "task", "next", "continue", "command"]}}
{"id1": "15516136", "id2": "21488518", "code1": "    public static synchronized BufferedImage loadBufferedJPEGImage(URL url) {\n        BufferedImage image = null;\n        if (url != null) {\n            InputStream in = null;\n            try {\n                in = url.openStream();\n                JPEGImageDecoder decoder = JPEGCodec.createJPEGDecoder(in);\n                image = decoder.decodeAsBufferedImage();\n            } catch (Exception e) {\n                log.severe(\"URL: \" + url + \" - \" + e.getMessage());\n                image = null;\n            } finally {\n                try {\n                    if (in != null) in.close();\n                } catch (IOException ioe) {\n                    log.severe(\"URL: \" + url + \" - \" + ioe.getMessage());\n                }\n            }\n            if (image != null) {\n                log.config(\"Image type : \" + image.getType());\n                if (image.getWidth() <= 0 || image.getHeight() <= 0) {\n                    log.severe(\"URL: \" + url + \" =0\");\n                    image = null;\n                }\n            }\n        }\n        return image;\n    }\n", "code2": "    @Override\n    public Resource createNew(String name, InputStream in, Long length, String contentType) throws IOException {\n        File dest = new File(this.realFile, name);\n        if (allowedClient) {\n            if (\".request\".equals(name) || \".tokens\".equals(name)) {\n                FileOutputStream out = null;\n                try {\n                    out = new FileOutputStream(dest);\n                    IOUtils.copy(in, out);\n                } finally {\n                    IOUtils.closeQuietly(out);\n                }\n                if (\".request\".equals(name)) {\n                    File request = new File(realFile.getAbsolutePath() + \"/\" + name);\n                    RequestManager.manageRequest(request, null, true);\n                    return new OverEncryptedFriendsFile(factory, folderPath + \"/.response\", allowedClient);\n                }\n                return new OverEncryptedFriendsFile(factory, folderPath + \"/\" + name, allowedClient);\n            } else {\n                return null;\n            }\n        } else {\n            LOGGER.error(\"User isn't owner of this folder\");\n            return null;\n        }\n    }\n", "label": 0, "substitutes": {"loadBufferedJPEGImage": ["loadBufferedJPILImages", "loadBufferedMPILImage", "loadBufferedJPECFrame", "loadBufferedMPEGImages", "loadBufferedJPPGElement", "loadBufferedJPECElement", "loadBufferedJPPGImages", "loadBufferedJPPGImage", "loadBufferedJPILElement", "loadBufferedMPEGFrame", "loadBufferedJPEGElement", "loadBufferedMPEGElement", "loadBufferedJPEGImages", "loadBufferedJPILFrame", "loadBufferedJPECImages", "loadBufferedMPILElement", "loadBufferedJPECImage", "loadBufferedJPPGFrame", "loadBufferedJPEGFrame", "loadBufferedMPILFrame", "loadBufferedMPILImages", "loadBufferedMPEGImage", "loadBufferedJPILImage"], "url": ["sl", "gl", "address", "lr", "string", "file", "Url", "abs", "str", "term", "nl", "id", "kl", "print", "resource", "char", "k", "browser", "loader", "ls", "r", "email", "dl", "null", "ll", "ssl", "link", "location", "html", "uri", "rel", "URL", "job", "web", "cl", "loc", "fail", "date", "get", "ur", "all", "github", "impl", "download", "un", "name", "hl", "util", "http", "rl", "key", "mount", "el", "addr", "rect", "l", "xml", "domain", "ref", "full", "sql", "org", "lb", "ul"], "image": ["sample", "picture", "description", "print", "update", "device", "output", "attribute", "model", "external", "m", "auto", "feature", "all", "input", "scene", "document", "media", "object", "photo", "source", "memory", "shape", "window", "policy", "display", "entry", "Image", "mi", "instance", "img", "out", "frame", "http", "data", "me", "one", "archive", "word", "item", "address", "channel", "event", "audio", "still", "age", "view", "unsigned", "inner", "ilo", "ge", "buffer", "message", "entity", "page", "user", "png", "error", "application", "im", "value", "xml", "cache", "game", "size", "icon", "file", "sequence", "binary", "pixel", "resource", "remote", "row", "no", "manager", "block", "crop", "figure", "associated", "video", "empty", "none"], "in": ["mc", "serv", "again", "h", "file", "en", "by", "is", "inf", "up", "al", "cin", "from", "mi", "reader", "r", "re", "to", "IN", "n", "i", "inc", "inner", "mem", "inside", "ar", "on", " din", "f", "o", "ma", "er", "s", "out", "din", "oin", "init", "get", "input", "isin", "ind", "read", "gin", "include", "In", "im", "source", "and", "ai", "ins", "l", "sum", "xml", "it", "rin", "nin", "bin", "body", "ain", "stream", "con", "inn"], "decoder": ["deoder", "desade", "desode", "deoding", "Decode", "Decer", "Decade", "Decoder", "encer", " decode", "deade", "decade", "deode", " decoding", "encoder", "decode", "encode", "encade", "decoding", "decer", " decade", "desoder", "desoding", " decer"]}}
{"id1": "3330944", "id2": "838844", "code1": "    public void extractImage(String input, String output, DjatokaDecodeParam params, IWriter w) throws DjatokaException {\n        File in = null;\n        String dest = output;\n        if (input.equals(STDIN)) {\n            try {\n                in = File.createTempFile(\"tmp\", \".jp2\");\n                input = in.getAbsolutePath();\n                in.deleteOnExit();\n                IOUtils.copyFile(new File(STDIN), in);\n            } catch (IOException e) {\n                logger.error(\"Unable to process image from \" + STDIN + \": \" + e.getMessage());\n                throw new DjatokaException(e);\n            }\n        }\n        BufferedImage bi = extractImpl.process(input, params);\n        if (bi != null) {\n            if (params.getScalingFactor() != 1.0 || params.getScalingDimensions() != null) bi = applyScaling(bi, params);\n            if (params.getTransform() != null) bi = params.getTransform().run(bi);\n            try {\n                BufferedOutputStream os = new BufferedOutputStream(new FileOutputStream(new File(dest)));\n                w.write(bi, os);\n                os.close();\n            } catch (FileNotFoundException e) {\n                logger.error(\"Requested file was not found: \" + dest);\n                throw new DjatokaException(e);\n            } catch (IOException e) {\n                logger.error(\"Error attempting to close: \" + dest);\n                throw new DjatokaException(e);\n            }\n        }\n        if (in != null) in.delete();\n    }\n", "code2": "    public void convert(File src, File dest) throws IOException {\n        InputStream in = new BufferedInputStream(new FileInputStream(src));\n        DcmParser p = pfact.newDcmParser(in);\n        Dataset ds = fact.newDataset();\n        p.setDcmHandler(ds.getDcmHandler());\n        try {\n            FileFormat format = p.detectFileFormat();\n            if (format != FileFormat.ACRNEMA_STREAM) {\n                System.out.println(\"\\n\" + src + \": not an ACRNEMA stream!\");\n                return;\n            }\n            p.parseDcmFile(format, Tags.PixelData);\n            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n                System.out.println(\"\\n\" + src + \": contains UIDs!\" + \" => probable already DICOM - do not convert\");\n                return;\n            }\n            boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n            int pxlen = p.getReadLength();\n            if (hasPixelData) {\n                if (inflate) {\n                    ds.putUS(Tags.BitsAllocated, 16);\n                    pxlen = pxlen * 4 / 3;\n                }\n                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n                    System.out.println(\"\\n\" + src + \": mismatch pixel data length!\" + \" => do not convert\");\n                    return;\n                }\n            }\n            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n            ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n            ds.putUI(Tags.SOPClassUID, classUID);\n            if (!ds.contains(Tags.NumberOfSamples)) {\n                ds.putUS(Tags.NumberOfSamples, 1);\n            }\n            if (!ds.contains(Tags.PhotometricInterpretation)) {\n                ds.putCS(Tags.PhotometricInterpretation, \"MONOCHROME2\");\n            }\n            if (fmi) {\n                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n            }\n            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n            try {\n            } finally {\n                ds.writeFile(out, encodeParam());\n                if (hasPixelData) {\n                    if (!skipGroupLen) {\n                        out.write(PXDATA_GROUPLEN);\n                        int grlen = pxlen + 8;\n                        out.write((byte) grlen);\n                        out.write((byte) (grlen >> 8));\n                        out.write((byte) (grlen >> 16));\n                        out.write((byte) (grlen >> 24));\n                    }\n                    out.write(PXDATA_TAG);\n                    out.write((byte) pxlen);\n                    out.write((byte) (pxlen >> 8));\n                    out.write((byte) (pxlen >> 16));\n                    out.write((byte) (pxlen >> 24));\n                }\n                if (inflate) {\n                    int b2, b3;\n                    for (; pxlen > 0; pxlen -= 3) {\n                        out.write(in.read());\n                        b2 = in.read();\n                        b3 = in.read();\n                        out.write(b2 & 0x0f);\n                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n                        out.write(b3 >> 4);\n                    }\n                } else {\n                    for (; pxlen > 0; --pxlen) {\n                        out.write(in.read());\n                    }\n                }\n                out.close();\n            }\n            System.out.print('.');\n        } finally {\n            in.close();\n        }\n    }\n", "label": 1, "substitutes": {"extractImage": ["extlateimage", "extractorFrame", "extractorImages", "extractorImage", "extractFrame", "extlateFrame", "extlateImage", "extprocessFrame", "Extprocessimage", "extprocessImages", "extprocessimage", "extractorimage", "ExtprocessFrame", "ExtractImage", "ExtprocessImage", "extprocessImage", "extlateImages", "extractimage", "ExtractFrame", "Extractimage", "ExtprocessImages", "ExtractImages", "extractImages"], "input": ["local", "text", "path", "sample", "seed", "background", "address", "string", "file", "p", "txt", "str", "before", "start", "Input", "context", "internal", "audio", "current", "select", "from", "url", "index", "qa", "null", "check", "query", "i", "pattern", "img", "hidden", "accept", "initial", "base", "config", "uri", "prefix", "buffer", "format", "out", "raw", "tmp", "init", "q", "upload", "error", "data", "source", "image", "hello", "rc", "ins", "empty", "ip", "request", "xml", "it", "this", "origin", "partial"], "output": ["path", "Output", "PUT", "icon", "put", "file", "OU", "generated", "oe", "print", "success", "current", "target", "filename", "to", "write", "port", "hidden", "o", "STDOUT", "prefix", "result", "format", "out", "name", "pretty", "source", "OUT", "image", "response", "type", "temp", "display"], "params": ["settings", " parameters", "Par", "arms", "members", "results", "packages", "p", "ars", "points", "pro", "terms", "modules", "eps", "pps", "properties", "abilities", "devices", "conf", "phi", "pas", "gs", "names", "ctx", "rs", "parents", "users", "stats", "images", "pi", "caps", "eters", "m", "units", "ims", "chains", "Parameters", "options", "config", "ps", "ports", "phys", "pins", "parts", "s", "fps", "changes", "mm", "actions", "tags", "requires", "pretty", "tools", "spec", "docs", "styles", "AMS", "details", "keys", "pkg", "photos", "marks", "las", "json", "param", "ams", "types", "proc", "prop", "jp", "par"], "w": ["d", "v", "wh", "h", "wd", "p", "sw", "ws", "e", "we", "rw", "n", "wx", "write", "wp", "m", "f", "o", "wl", "out", "wr", "Ws", "q", "writer", "nw", "wal", "W", "kw", "wt", "Writer", "ew", "wo", "window", "wb", "hw", "wa", "word"], "in": ["local", "win", "mc", "ln", "path", "file", "en", "p", "id", "sin", "old", "is", "inf", "po", "e", "Input", "al", "cin", "from", "copy", "mi", "edIn", "conf", " IN", "ini", "IN", "null", "i", "inner", "ar", " din", "f", "base", "phys", "ma", "out", "din", "raw", "init", "all", "isin", "vin", "mm", "read", "name", "gin", "include", "In", "source", "one", "ins", "rin", "it", "info", "bin", "nin", "sql", "con", "inn"], "dest": ["path", "trans", "decl", "dir", "dat", "des", "p", "txt", "cat", "orig", "src", "oe", "ws", "st", "Dest", "prop", "target", "pipe", "deg", "pas", "tif", "nom", "way", "to", "mem", "port", "img", "write", "csv", "origin", "opt", "desc", "resp", "result", "end", "out", "loc", "tmp", " dst", "usr", " destination", "alt", "dist", "data", "rest", "source", "save", "cont", "comb", "shape", "buf", "wb", "temp", "lit", "display"], "bi": ["ba", "ji", "phi", "pb", "zi", "li", "gi", "nb", "b", "di", "ki", "bg", "be", "jiang", "umi", "rob", "bb", "BI", "mi", "oi", "ni", "bie", "bits", "bo", "ini", " nib", "mu", "ibi", "i", "bra", "obo", "pi", "yi", "bh", "ib", "bis", "bone", "beck", "buff", "bs", "bm", "bil", "ali", "ibe", "iri", "abi", "phy", "bank", "qi", "hog", "bf", "obi", "ai", "ble", "bp", "fi", "bas", "vi", "bin", "isi", "Bi", "bc"], "os": ["ks", "cos", "oses", "oos", "bos", "et", "oes", "io", "ose", "is", "ot", "ox", "mot", "OS", "aos", "ows", "ls", "mos", "ts", "ols", "ios", "cs", "obs", "ons", "fs", "ns", "o", "ros", "osi", "bs", "los", "oss", "s", "acs", "ops", "ds", "ow", "oid", "sys", "or", "Os", "pos", "us", "css", "es", "oo", "ys"]}}
{"id1": "13563706", "id2": "411595", "code1": "    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        String selectedPage = request.getParameter(\"SelectedPage\");\n        Page page = null;\n        PortalRequest portalRequest = PortalRequest.getCurrentRequest();\n        if (selectedPage == null) {\n            try {\n                Property pageProp = Property.getProperty(\"HomePage\");\n                selectedPage = pageProp.getValue();\n            } catch (PersistentModelException e) {\n                myLogger.info(\"Page could not be found due to an exception\");\n                response.sendError(response.SC_NOT_FOUND);\n                return;\n            }\n        }\n        myLogger.info(\"Handling Page Request for Page \" + selectedPage);\n        try {\n            if (page == null) {\n                try {\n                    page = Page.getPage(Long.parseLong(selectedPage));\n                } catch (NumberFormatException e) {\n                    List<Page> possiblePage = Page.findByName(selectedPage);\n                    if (possiblePage.size() > 0) {\n                        page = possiblePage.get(0);\n                    } else {\n                        response.sendError(response.SC_NOT_FOUND);\n                        return;\n                    }\n                }\n            }\n            if (!page.isVisibleTo(portalRequest.getCurrentUser())) {\n                Property pageProp = Property.getProperty(\"HomePage\");\n                selectedPage = pageProp.getValue();\n                page = Page.getPage(Long.parseLong(selectedPage));\n            }\n            try {\n                Property property = Property.getProperty(\"LogPageRequests\");\n                if (property.getValue().toLowerCase().equals(\"true\")) {\n                    String referer = request.getHeader(\"Referer\");\n                    if (referer == null || referer.indexOf(portalRequest.getRequest().getServerName()) > 0) {\n                        referer = \" \";\n                    } else {\n                        if (referer.length() >= 200) {\n                            referer = referer.substring(0, 198);\n                        }\n                    }\n                    PageRequest.createRequest(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), portalRequest.getRequest().getRemoteAddr(), referer);\n                }\n            } catch (PersistentModelException e) {\n                myLogger.log(Level.WARNING, \"Log Page Requests property was not found.\", e);\n            }\n            if (page.isVisibleTo(portalRequest.getCurrentUser())) {\n                HttpSession session = request.getSession();\n                if (session != null) {\n                    RecentlyViewedManager rvm = (RecentlyViewedManager) session.getAttribute(\"ipoint.RecentlyViewedManager\");\n                    if (rvm == null) {\n                        rvm = new RecentlyViewedManager();\n                    }\n                    rvm.add(page);\n                    session.setAttribute(\"ipoint.RecentlyViewedManager\", rvm);\n                }\n                PageCacheEntry entry = null;\n                if (!portalRequest.isPost() && !page.isEditableBy(portalRequest.getCurrentUser())) {\n                    try {\n                        int pageCacheTime = 60000;\n                        try {\n                            Property pageCacheTimeProperty = Property.getProperty(\"PageCacheTime\");\n                            pageCacheTime = Integer.parseInt(pageCacheTimeProperty.getValue());\n                            pageCacheTime *= 1000;\n                        } catch (PersistentModelException pme) {\n                            myLogger.warning(\"Ignoring Exception when retrieving PageCacheTime property\");\n                        } catch (NumberFormatException nfe) {\n                        }\n                        entry = PageCacheEntry.find(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), pageCacheTime);\n                    } catch (PersistentModelException e) {\n                        myLogger.log(Level.WARNING, \"An error occurred finding a page cache entry\", e);\n                    }\n                }\n                response.setContentType(\"text/html\");\n                response.setHeader(\"Cache-Control\", \"no-cache\");\n                boolean processed = false;\n                if (entry != null) {\n                    String tempFile = entry.getTempFile();\n                    File file = new File(tempFile);\n                    if (file.exists() && file.isFile() && file.canRead()) {\n                        FileReader reader = new FileReader(file);\n                        BufferedReader br = new BufferedReader(reader);\n                        PrintWriter out = response.getWriter();\n                        out.write(\"<!-- Starting to output cached page in \" + portalRequest.elapsedTime() + \" ms -->\\n\");\n                        while (br.ready()) {\n                            out.write(br.readLine() + \"\\n\");\n                        }\n                        out.write(\"<!-- Cached output produced in \" + portalRequest.elapsedTime() + \" ms -->\\n\");\n                        reader.close();\n                        processed = true;\n                        portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageTotal, page.getName() + \"-\" + page.getID(), portalRequest.elapsedTime(), true);\n                    } else {\n                        entry.delete();\n                    }\n                }\n                if (!processed) {\n                    PrintWriter out = response.getWriter();\n                    out.write(\"<!-- Output produced by iPoint Portal -->\\n\");\n                    PageRenderer renderer = new PageRenderer(page);\n                    long startTime = System.currentTimeMillis();\n                    request.setAttribute(ELConstants.IPOINT_USER, portalRequest.getCurrentUser());\n                    request.setAttribute(ELConstants.IPOINT_PAGE, page);\n                    request.setAttribute(ELConstants.IPOINT_TEMPLATE, page.getTemplate());\n                    request.setAttribute(ELConstants.IPOINT_PORTAL_PROPERTIES, Property.getPropertiesMap());\n                    request.setAttribute(ELConstants.IPOINT_USER_PROPERTIES, portalRequest.getCurrentUser().getProperties());\n                    renderer.preProcess();\n                    portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PagePreProcess, page.getName() + \"-\" + page.getID(), System.currentTimeMillis() - startTime, false);\n                    long renderStart = System.currentTimeMillis();\n                    renderer.render();\n                    portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageRender, page.getName() + \"-\" + page.getID(), System.currentTimeMillis() - renderStart, false);\n                    portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageTotal, page.getName() + \"-\" + page.getID(), System.currentTimeMillis() - startTime, false);\n                    out.write(\"<!-- output produced in \" + PortalRequest.getCurrentRequest().elapsedTime() + \" ms -->\\n\");\n                    if (!page.isEditableBy(portalRequest.getCurrentUser())) {\n                        if (response instanceof CachingResponseWrapper) {\n                            CachingResponseWrapper crw = (CachingResponseWrapper) response;\n                            crw.flushBuffer();\n                            Property tempProperty = Property.getProperty(\"UploadLocation\");\n                            File tempDirectory = new File(tempProperty.getValue());\n                            if (tempDirectory.exists() && tempDirectory.canWrite()) {\n                                File file = File.createTempFile(\"iPointPage\", \".html\", tempDirectory);\n                                try {\n                                    FileWriter fw = new FileWriter(file);\n                                    fw.write(crw.getOutput());\n                                    fw.flush();\n                                    fw.close();\n                                    PageCacheEntry.create(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), file.getAbsolutePath());\n                                } catch (IOException e) {\n                                }\n                            } else {\n                                myLogger.warning(\"Can not write to directory \" + tempProperty.getValue());\n                            }\n                        }\n                    }\n                }\n            } else {\n                myLogger.info(\"Current User is Forbidden from seeing this Page\");\n                response.sendError(response.SC_FORBIDDEN);\n            }\n        } catch (PersistentModelException e) {\n            myLogger.log(Level.INFO, \"Unable to find page \" + selectedPage, e);\n            response.sendError(response.SC_NOT_FOUND);\n        } catch (PresentationException pe) {\n            pe.printStackTrace();\n            throw new ServletException(\"Error processing the page\", pe);\n        }\n    }\n", "code2": "    private void displayDiffResults() throws IOException {\n        File outFile = File.createTempFile(\"diff\", \".htm\");\n        outFile.deleteOnExit();\n        FileOutputStream outStream = new FileOutputStream(outFile);\n        BufferedWriter out = new BufferedWriter(new OutputStreamWriter(outStream));\n        out.write(\"<html><head><title>LOC Differences</title>\\n\" + SCRIPT + \"</head>\\n\" + \"<body bgcolor='#ffffff'>\\n\" + \"<div onMouseOver=\\\"window.defaultStatus='Metrics'\\\">\\n\");\n        if (addedTable.length() > 0) {\n            out.write(\"<table border><tr><th>Files Added:</th>\" + \"<th>Add</th><th>Type</th></tr>\");\n            out.write(addedTable.toString());\n            out.write(\"</table><br><br>\");\n        }\n        if (modifiedTable.length() > 0) {\n            out.write(\"<table border><tr><th>Files Modified:</th>\" + \"<th>Base</th><th>Del</th><th>Mod</th><th>Add</th>\" + \"<th>Total</th><th>Type</th></tr>\");\n            out.write(modifiedTable.toString());\n            out.write(\"</table><br><br>\");\n        }\n        if (deletedTable.length() > 0) {\n            out.write(\"<table border><tr><th>Files Deleted:</th>\" + \"<th>Del</th><th>Type</th></tr>\");\n            out.write(deletedTable.toString());\n            out.write(\"</table><br><br>\");\n        }\n        out.write(\"<table name=METRICS BORDER>\\n\");\n        if (modifiedTable.length() > 0 || deletedTable.length() > 0) {\n            out.write(\"<tr><td>Base:&nbsp;</td><td>\");\n            out.write(Long.toString(base));\n            out.write(\"</td></tr>\\n<tr><td>Deleted:&nbsp;</td><td>\");\n            out.write(Long.toString(deleted));\n            out.write(\"</td></tr>\\n<tr><td>Modified:&nbsp;</td><td>\");\n            out.write(Long.toString(modified));\n            out.write(\"</td></tr>\\n<tr><td>Added:&nbsp;</td><td>\");\n            out.write(Long.toString(added));\n            out.write(\"</td></tr>\\n<tr><td>New & Changed:&nbsp;</td><td>\");\n            out.write(Long.toString(added + modified));\n            out.write(\"</td></tr>\\n\");\n        }\n        out.write(\"<tr><td>Total:&nbsp;</td><td>\");\n        out.write(Long.toString(total));\n        out.write(\"</td></tr>\\n</table></div>\");\n        redlinesOut.close();\n        out.flush();\n        InputStream redlines = new FileInputStream(redlinesTempFile);\n        byte[] buffer = new byte[4096];\n        int bytesRead;\n        while ((bytesRead = redlines.read(buffer)) != -1) outStream.write(buffer, 0, bytesRead);\n        outStream.write(\"</BODY></HTML>\".getBytes());\n        outStream.close();\n        Browser.launch(outFile.toURL().toString());\n    }\n", "label": 1, "substitutes": {"doGet": ["handlePut", "handleget", " doPut", "doGET", " doget", "handleGET", "doget", "DoGet", "DoGET", " doGET", "handleGet", "Doget", "doPut", "DoPut"], "request": ["search", "path", "address", "subject", "first", "parent", "resource", "transform", "event", "position", "context", "current", "route", "attribute", "complete", "url", "re", "call", "view", "query", "connection", "initial", "message", "each", "get", "project", "user", "create", "input", "reference", "setup", "frame", "document", "Request", "http", "application", "socket", "reset", "report", "QUEST", "use", "hello", "version", "xml", "directory", "forward", "order", "command"], "response": ["search", "description", "sequence", "respond", "ce", "print", "render", "hash", "position", "success", "service", "Response", "output", "network", "view", "fire", "block", "relation", "write", "res", "connection", "status", "summary", "console", "condition", "continue", "security", "server", "example", "message", "result", "format", "see", "foundation", "exit", "frame", "document", "tree", "http", "zero", "application", "answer", "report", "image", "header", "version", "default", "json", "next", "reply", "resp", "display", "collection", "ve"], "selectedPage": ["namedLine", "electedPort", "namedToken", " selectedRow", "selectionItem", "namedKey", "selectPath", "lectedPath", "singlePage", "selectedRow", "singlePort", "selectionToken", "electedPage", "matchedPage", "singleFrame", " selectedFrame", " selectedPath", "selectedFrame", "verifiedRow", "lectedToken", " selectedFile", "lectedLine", "selectFile", "lectedPage", "selectedItem", "electedFrame", "selectedKey", "matchedpage", "lectedFile", " selectedpage", "selectionLine", "specifiedDocument", " selectedPort", "lectedFrame", "electionDocument", "lectedPort", "selectedLine", "matchedFrame", " selectedLine", "verifiedPage", "namedpage", "electionPage", "selectionFile", "selectPage", "selectedpage", "selectedPort", "selectedToken", " selectedKey", "selectItem", "selectPort", "namedFrame", "selectionPort", "lectedDocument", "lectedRow", "verifiedFile", "electionPort", "selectedDocument", "specifiedFrame", "namedPage", "specifiedPort", "lectedItem", "selectedFile", "matchedPort", "selectLine", "verifiedpage", "electedpage", "singlepage", "namedPort", "lectedKey", "specifiedPage", "selectedPath", "selectionPage", "electionFrame", "lectedpage"], "page": ["proxy", "site", "point", "output", "network", "profile", "project", "document", "object", "line", "pointer", "pp", "window", "peer", "pool", "policy", "display", "created", "filter", "Page", "p", "be", "complete", "rule", "menu", "office", "instance", "server", "client", "frame", "me", "image", "chain", "next", "address", "force", "log", "parent", "channel", "position", "phrase", "current", "record", "age", "url", "view", "to", "port", "language", "form", "message", "result", "user", "application", "cache", "layout", "number", " Page", "resource", "row", "phone", "block", "node", "pages", "table", "associated", "successful", "self", "group", "version", "collection"], "portalRequest": ["portalingCall", "portpalContext", "portortalEvent", "portaleRequest", "portalaCall", "portualResponse", "portaleSession", " portalAccess", "portsalRequest", "portpalRequest", "portsortalResponse", "portortalThread", "portalaAccess", "portralSession", "portsortalRequest", "portalingApply", "PortalQuery", "terminalRequest", "portortalrequest", "portsortalrequest", "portaleQuery", "portalingRequest", "portalThread", "PortaleContext", "portalSession", "terminalidRequest", "terminalidSession", "portalidResponse", "portortalResponse", "terminalidResponse", "portalEvent", "portalidRequest", "portualEvent", "portalaApply", "PortaleResponse", "portsortalEvent", "portalResponse", "portaleResponse", "portortalContext", "portsalEvent", "portualRequest", "portalaRequest", "PortaleThread", "portpalResponse", "portalityResponse", " portalApply", "portalQuery", "portalrequest", "portalidContext", "portsalResponse", "portaleCall", "terminalSession", "portalFrame", "PortaleQuery", "PortalResponse", "portalityContext", "portralQuery", "portralRequest", "portaleThread", "terminalidQuery", " portaleAccess", "portsalrequest", "portortalQuery", "portpalThread", "portralContext", "portalidSession", "PortalThread", "portalityFrame", "portalerequest", "portalityRequest", "portaleContext", "portualrequest", " portaleApply", "portalContext", "PortalRequest", "portalApply", "portaleEvent", "PortaleFrame", "portalidFrame", "terminalResponse", "portalidQuery", "terminalQuery", " portalCall", "portralResponse", "portortalRequest", "portalAccess", "portaleApply", " portaleRequest", "portaleAccess", "PortalContext", "portalCall", "PortaleRequest", "PortalFrame", "portaleFrame", "portalingAccess", " portaleCall"], "pageProp": ["profilePred", "imageProp", " pagePr", "pagePriv", "pagePred", "ageProp", "pageComp", "phraseComp", "propertyPack", " pageDef", "sectionProp", "poolProp", "keyProperty", " pageComp", "phraseProp", "imagePr", "agePro", "officeProp", "officePack", "sectionZip", "pagePack", "propertyProp", "poolPro", "officeDef", " pagePred", "profileZip", " pagePack", "phrasePr", "pageProperty", "phraseProperty", "keyComp", "keyPr", "pagePro", "poolPred", "imagePred", "agePred", "pageDef", "agePr", "sectionPro", "profilePro", "profileProp", "poolZip", "pageZip", "pagePr", "officePriv", "sectionPred", "imagePro", " pagePriv", " pageProperty", "keyProp", " pagePro", "propertyPriv", "propertyDef"], "possiblePage": ["PossiblyCollection", " possibleTag", " possibleCollection", "pspecifiedPage", "possiblyLine", "possiblyCollection", "packedLine", "pbablePage", "pableCollection", " packedTag", "PossiblyPage", "pibleCollection", "packedTag", " packedLine", "possibleCollection", "possibleTag", "pibleChild", "packedPage", "possiblyTag", "pentialPages", "pableTag", "PossiblePage", " packedPage", "possiblepage", "possibleChild", "pspecifiedPages", "packedCollection", "PossibleTag", "possiblyUser", "PossiblyChild", "possiblyPage", "PossibleUser", "pbableChild", "possibleLine", "pableLine", "pibleUser", "pbableCollection", "PossiblePages", "pentialTag", "PossibleCollection", "pentialPage", "possibleUser", " packedCollection", "pablePage", "possiblePages", "pentialpage", "pspecifiedTag", "possiblyChild", "piblePage", "pbableUser", "PossibleChild", "Possiblepage", "pspecifiedpage", "PossiblyUser", " possibleLine"], "property": ["address", "integer", "description", "function", "string", "field", "p", "definition", "variable", "resource", "properties", "position", "class", "service", "phrase", "attribute", "Property", "rule", "owner", "rue", "relation", "title", "location", "config", "expression", "feature", "trace", "message", "second", "frame", "name", "operator", "object", "behavior", "value", "key", "header", "metadata", "domain", "type", "prop", "policy", "command"], "referer": ["diffrer", "rorerer", "rerier", "refirect", "rederee", "rerer", " refered", "afener", "rangeerer", "Refere", "rorrer", "requerer", "printerer", "deferer", "reportered", "retered", "reporterer", "relender", "printerential", "reering", "reere", "verrier", "refrier", " refirect", "reener", "reportarer", "reerential", "rederer", "Referee", "retarer", "refender", "relerer", "Referer", "aferential", "redrer", "aferer", "refener", "differing", "vererential", "refered", "relener", "diffonder", "rorirect", "requonder", "reerer", "printrer", "relering", "refarer", "requering", "fener", "rorered", "retrer", "requrer", "rangeender", "differer", "defirect", "relrer", "refering", "reender", " refrer", "defrer", "defered", "verrer", "referential", "afrer", "rangeener", "refere", "ferer", "vererer", "rangerer", "relerential", "frer", "referee", "printrier", "refrer", "reeree", "Refrer", "redere", "rearer", "reportrer", "fering", "refonder", "reterer", "reered", "reonder"], "e": ["err", "ae", "ception", "h", "echo", "p", "E", "oe", "t", "eg", "eur", "event", "te", "eeee", "de", "ee", "r", "n", "a", "m", "f", "ge", "o", "ie", "error", "x", "me", "eu", "g", "es", "er", "se"]}}
{"id1": "6966398", "id2": "647224", "code1": "    public static void main(String[] args) {\n        System.out.println(\"Chapter 16: example SignedPdf\");\n        System.out.println(\"-> Creates a signed PDF;\");\n        System.out.println(\"-> jars needed: iText.jar\");\n        System.out.println(\"-> files generated in /results subdirectory:\");\n        System.out.println(\"   Resource needed: .keystore\");\n        System.out.println(\"-> Resulting PDFs: unsigned_message.pdf, signed_message.pdf,\");\n        System.out.println(\"   corrupted_message.pdf, signed_message_invisible.pdf,\");\n        System.out.println(\"   double_signed_message.pdf, revision_1.pdf and revision_2.pdf\");\n        createPdf();\n        PdfReader reader;\n        try {\n            KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n            ks.load(new FileInputStream(\"resources/in_action/chapter16/.keystore\"), \"f00b4r\".toCharArray());\n            PrivateKey key = (PrivateKey) ks.getKey(\"foobar\", \"r4b00f\".toCharArray());\n            Certificate[] chain = ks.getCertificateChain(\"foobar\");\n            reader = new PdfReader(\"results/in_action/chapter16/unsigned_message.pdf\");\n            FileOutputStream os = new FileOutputStream(\"results/in_action/chapter16/signed_message.pdf\");\n            PdfStamper stamper = PdfStamper.createSignature(reader, os, '\\0');\n            PdfSignatureAppearance appearance = stamper.getSignatureAppearance();\n            appearance.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);\n            appearance.setCertificationLevel(PdfSignatureAppearance.CERTIFIED_FORM_FILLING);\n            appearance.setReason(\"It's personal.\");\n            appearance.setLocation(\"Foobar\");\n            appearance.setVisibleSignature(new Rectangle(30, 750, 500, 565), 1, null);\n            stamper.close();\n        } catch (KeyStoreException e) {\n            e.printStackTrace();\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        } catch (CertificateException e) {\n            e.printStackTrace();\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        } catch (UnrecoverableKeyException e) {\n            e.printStackTrace();\n        } catch (DocumentException e) {\n            e.printStackTrace();\n        }\n        try {\n            reader = new PdfReader(\"results/in_action/chapter16/signed_message.pdf\");\n            Document document = new Document(reader.getPageSizeWithRotation(1));\n            PdfCopy copy = new PdfCopy(document, new FileOutputStream(\"results/in_action/chapter16/corrupted_message.pdf\"));\n            document.open();\n            copy.addPage(copy.getImportedPage(reader, 1));\n            document.close();\n        } catch (IOException ioe) {\n            ioe.printStackTrace();\n        } catch (DocumentException de) {\n            de.printStackTrace();\n        }\n        try {\n            KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n            ks.load(new FileInputStream(\"resources/in_action/chapter16/.keystore\"), \"f00b4r\".toCharArray());\n            PrivateKey key = (PrivateKey) ks.getKey(\"foobar\", \"r4b00f\".toCharArray());\n            Certificate[] chain = ks.getCertificateChain(\"foobar\");\n            reader = new PdfReader(\"results/in_action/chapter16/unsigned_message.pdf\");\n            FileOutputStream os = new FileOutputStream(\"results/in_action/chapter16/signed_message_invisible.pdf\");\n            PdfStamper stamper = PdfStamper.createSignature(reader, os, '\\0');\n            PdfSignatureAppearance appearance = stamper.getSignatureAppearance();\n            appearance.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);\n            appearance.setReason(\"It's personal.\");\n            appearance.setLocation(\"Foobar\");\n            stamper.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        try {\n            reader = new PdfReader(\"results/in_action/chapter16/signed_message.pdf\");\n            KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n            ks.load(new FileInputStream(\"resources/in_action/chapter16/.keystore\"), \"f00b4r\".toCharArray());\n            PrivateKey key = (PrivateKey) ks.getKey(\"foobar\", \"r4b00f\".toCharArray());\n            Certificate[] chain = ks.getCertificateChain(\"foobar\");\n            FileOutputStream os = new FileOutputStream(\"results/in_action/chapter16/double_signed_message.pdf\");\n            PdfStamper stamper = PdfStamper.createSignature(reader, os, '\\0', null, true);\n            PdfSignatureAppearance appearance = stamper.getSignatureAppearance();\n            appearance.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);\n            appearance.setReason(\"Double signed.\");\n            appearance.setLocation(\"Foobar\");\n            appearance.setVisibleSignature(new Rectangle(300, 750, 500, 800), 1, \"secondsig\");\n            stamper.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        try {\n            CertificateFactory cf = CertificateFactory.getInstance(\"X509\");\n            Collection col = cf.generateCertificates(new FileInputStream(\"resources/in_action/chapter16/foobar.cer\"));\n            KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n            ks.load(null, null);\n            for (Iterator it = col.iterator(); it.hasNext(); ) {\n                X509Certificate cert = (X509Certificate) it.next();\n                System.out.println(cert.getIssuerDN().getName());\n                ks.setCertificateEntry(cert.getSerialNumber().toString(Character.MAX_RADIX), cert);\n            }\n            reader = new PdfReader(\"results/in_action/chapter16/double_signed_message.pdf\");\n            AcroFields af = reader.getAcroFields();\n            ArrayList names = af.getSignatureNames();\n            String name;\n            for (Iterator it = names.iterator(); it.hasNext(); ) {\n                name = (String) it.next();\n                System.out.println(\"Signature name: \" + name);\n                System.out.println(\"Signature covers whole document: \" + af.signatureCoversWholeDocument(name));\n                System.out.println(\"Document revision: \" + af.getRevision(name) + \" of \" + af.getTotalRevisions());\n                FileOutputStream os = new FileOutputStream(\"results/in_action/chapter16/revision_\" + af.getRevision(name) + \".pdf\");\n                byte bb[] = new byte[8192];\n                InputStream ip = af.extractRevision(name);\n                int n = 0;\n                while ((n = ip.read(bb)) > 0) os.write(bb, 0, n);\n                os.close();\n                ip.close();\n                PdfPKCS7 pk = af.verifySignature(name);\n                Calendar cal = pk.getSignDate();\n                Certificate pkc[] = pk.getCertificates();\n                System.out.println(\"Subject: \" + PdfPKCS7.getSubjectFields(pk.getSigningCertificate()));\n                System.out.println(\"Document modified: \" + !pk.verify());\n                Object fails[] = PdfPKCS7.verifyCertificates(pkc, ks, null, cal);\n                if (fails == null) System.out.println(\"Certificates verified against the KeyStore\"); else System.out.println(\"Certificate failed: \" + fails[1]);\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n", "code2": "    public void uploadFile(File inputFile, String targetFile) throws IOException {\n        System.out.println(\"Uploading \" + inputFile.getName() + \" to \" + targetFile);\n        File outputFile = new File(targetFile);\n        if (targetFile.endsWith(\"/\")) {\n            outputFile = new File(outputFile, inputFile.getName());\n        } else if (outputFile.getParentFile().exists() == false) {\n            outputFile.getParentFile().mkdirs();\n        }\n        if (inputFile.renameTo(outputFile) == false) {\n            InputStream in = new FileInputStream(inputFile);\n            OutputStream out = new FileOutputStream(outputFile);\n            byte[] line = new byte[16384];\n            int bytes = -1;\n            while ((bytes = in.read(line)) != -1) out.write(line, 0, bytes);\n            in.close();\n            out.close();\n        }\n    }\n", "label": 1, "substitutes": {"reader": ["sr", "dr", "lr", " readers", "file", "io", "handler", "cer", "redo", "roller", " read", "rx", "wrapper", "loader", "ner", "row", "Reader", "mr", "ri", "r", "rs", "query", "ro", "inner", "builder", "runner", "rot", "iter", "buffer", "older", "writer", "read", "parser", "input", "rr", "rer", "rl", "driver", "rc", "ocr", "this", "er", "stream", "rar"], "ks": ["ates", "uk", "agles", "vs", "ars", "ups", "k", "ki", "eps", "ls", "kb", "akes", "hs", "ke", "cks", "nets", "uds", "kies", "ols", "cs", "kens", "obs", "ces", "fs", "sk", "ans", "ros", "ses", "ms", "bs", "icks", "ck", "oss", "KS", "eks", "kes", "kas", "sky", "ds", "mk", "ips", "keys", "kk", "checks", "kr", "km", "ss", "qs", "ys"], "key": ["Key", "file", "by", "pair", "my", "cer", "char", "k", "hash", "obj", "ox", "service", "ca", "ssh", "ke", "owner", "null", "trust", "KEY", "link", "base", "sk", "root", "ek", "user", "core", "sky", "power", "mk", "client", "object", "sign", "x", "tk", "password", "keys", "ey", "info", "type", "er", "y", "entry"], "chain": ["path", "batch", "number", "string", "file", "sequence", "binary", "Chain", "pair", "ce", "channel", "component", "test", "sche", "hash", "stack", "family", "ca", "c", "range", "box", "block", "check", "code", "piece", "chains", "base", "trace", "form", "table", "result", "root", "frame", "sign", "bank", "data", "password", "group", "list", "cache", "pool", "can", "type", "ver", "stream"], "os": ["js", "cos", "oses", "bos", "oos", "oes", "uts", "io", "ose", "is", "ot", "ox", "OS", "aos", "ls", "ts", "ols", "ios", "cs", "obs", "fs", "o", "ps", "ms", "osi", "bs", "los", "oss", "oS", "oids", "out", "ops", "oso", "ds", "sys", "Os", "pos", "us", "css", "ys"], "stamper": [" stcammer", " strammer", "stammer", "stimper", " stramPER", " strampler", "stampler", "strampler", " stumter", "stamter", " stcampler", "stamPER", " stammer", "font", "stummer", " stcamter", " stimper", "_", " stimter", " stamPER", "stAmpler", "good", "stAmmer", "Print", "stumpler", "annot", "stumper", "stumter", "The", "valid", "stramper", " stummer", "def", " stampler", " stcamper", "stAmper", " stumpler", " stimmer", " stramper", "stAmPER", "stimPER", "println", "read", " stumper", "strammer", "stimmer", " stamter", "stimpler", " stimpler", "this", "important", "stramPER", "New"], "appearance": ["apearances", "apearance", "accearance", "appreciation", "displayears", "attearances", "Appearances", "patternearances", "suppeared", "Appeared", " appearances", "patternearing", "accears", "appearing", "suppearance", "apearing", "displayendix", "displayearing", "appendix", "appearances", "displayreciation", "ascearance", "accearances", "apears", " appearing", "displayearance", "attlies", "attearance", "Applies", "atteared", "ascearing", "acreciation", "appeared", "patternearance", " appeared", "acclies", "ascears", "appears", "applies", "displaylies", "patternendix", "acearances", "aceared", "apreciation", "displayeared", "acearance", "Appearance", "displayearances", "aplies", "ascearances", "suppearances", " appendix", "apeared"]}}
{"id1": "4599372", "id2": "942693", "code1": "    @Override\n    public String readFixString(final int len) {\n        if (len < 1) {\n            return StringUtils.EMPTY;\n        }\n        final StringWriter sw = new StringWriter();\n        try {\n            IOUtils.copy(createLimitedInputStream(len), sw, null);\n        } catch (IOException e) {\n            throw createRuntimeException(e);\n        }\n        return sw.toString();\n    }\n", "code2": "    public void convert(File src, File dest) throws IOException {\n        InputStream in = new BufferedInputStream(new FileInputStream(src));\n        DcmParser p = pfact.newDcmParser(in);\n        Dataset ds = fact.newDataset();\n        p.setDcmHandler(ds.getDcmHandler());\n        try {\n            FileFormat format = p.detectFileFormat();\n            if (format != FileFormat.ACRNEMA_STREAM) {\n                System.out.println(\"\\n\" + src + \": not an ACRNEMA stream!\");\n                return;\n            }\n            p.parseDcmFile(format, Tags.PixelData);\n            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n                System.out.println(\"\\n\" + src + \": contains UIDs!\" + \" => probable already DICOM - do not convert\");\n                return;\n            }\n            boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n            int pxlen = p.getReadLength();\n            if (hasPixelData) {\n                if (inflate) {\n                    ds.putUS(Tags.BitsAllocated, 16);\n                    pxlen = pxlen * 4 / 3;\n                }\n                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n                    System.out.println(\"\\n\" + src + \": mismatch pixel data length!\" + \" => do not convert\");\n                    return;\n                }\n            }\n            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n            ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n            ds.putUI(Tags.SOPClassUID, classUID);\n            if (!ds.contains(Tags.NumberOfSamples)) {\n                ds.putUS(Tags.NumberOfSamples, 1);\n            }\n            if (!ds.contains(Tags.PhotometricInterpretation)) {\n                ds.putCS(Tags.PhotometricInterpretation, \"MONOCHROME2\");\n            }\n            if (fmi) {\n                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n            }\n            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n            try {\n            } finally {\n                ds.writeFile(out, encodeParam());\n                if (hasPixelData) {\n                    if (!skipGroupLen) {\n                        out.write(PXDATA_GROUPLEN);\n                        int grlen = pxlen + 8;\n                        out.write((byte) grlen);\n                        out.write((byte) (grlen >> 8));\n                        out.write((byte) (grlen >> 16));\n                        out.write((byte) (grlen >> 24));\n                    }\n                    out.write(PXDATA_TAG);\n                    out.write((byte) pxlen);\n                    out.write((byte) (pxlen >> 8));\n                    out.write((byte) (pxlen >> 16));\n                    out.write((byte) (pxlen >> 24));\n                }\n                if (inflate) {\n                    int b2, b3;\n                    for (; pxlen > 0; pxlen -= 3) {\n                        out.write(in.read());\n                        b2 = in.read();\n                        b3 = in.read();\n                        out.write(b2 & 0x0f);\n                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n                        out.write(b3 >> 4);\n                    }\n                } else {\n                    for (; pxlen > 0; --pxlen) {\n                        out.write(in.read());\n                    }\n                }\n                out.close();\n            }\n            System.out.print('.');\n        } finally {\n            in.close();\n        }\n    }\n", "label": 1, "substitutes": {"readFixString": ["readByteString", " readRichList", " readByteString", "readFixShort", " readByteStream", " readContentString", "readFixStream", " readContentStream", " readRichStream", " readContentList", " readContentShort", "readByteStream", " readRichShort", " readFixList", " readFixShort", " readRichString", " readFixStream", " readByteList", "readFixList", "readByteList", " readByteShort", "readByteShort"], "len": ["ln", "sl", "bytes", "fl", "elt", "en", "lp", "ld", "ell", "nl", "kl", "length", "lf", "nt", "num", "ls", "lan", "L", "inv", "lc", "dl", "n", "ll", "pl", "vec", "vol", "fin", "syn", "seq", "cl", "Len", "fn", "le", "el", "enc", "l", "coll", "pos", "lon", "size"], "sw": ["tw", "sl", "sr", "wh", "wn", "ws", "sur", "sm", "aw", "we", "rw", "sam", "sem", "sa", "sf", "sk", "sc", "sp", "Sw", "wl", "iw", "wra", "wr", "sb", "nw", "kw", "ow", "SW", "wt", "sv", "ew", "wo", "sh", "hw", "sn", "wa", "w", "rew"]}}
{"id1": "11477906", "id2": "2113444", "code1": "    private static void loadDefaultSettings(final String configFileName) {\n        InputStream in = null;\n        OutputStream out = null;\n        try {\n            in = Thread.currentThread().getContextClassLoader().getResourceAsStream(META_INF_DEFAULT_CONFIG_PROPERTIES);\n            out = new FileOutputStream(configFileName);\n            IOUtils.copy(in, out);\n        } catch (final Exception e) {\n            log.warn(\"Unable to pull out the default.\", e);\n            throw new RuntimeException(e);\n        } finally {\n            IOUtils.closeQuietly(in);\n            IOUtils.closeQuietly(out);\n        }\n    }\n", "code2": "    private VelocityEngine newVelocityEngine() {\n        VelocityEngine velocityEngine = null;\n        InputStream is = null;\n        try {\n            URL url = ClassPathUtils.getResource(VELOCITY_PROPS_FILE);\n            is = url.openStream();\n            Properties props = new Properties();\n            props.load(is);\n            velocityEngine = new VelocityEngine(props);\n            velocityEngine.init();\n        } catch (Exception e) {\n            throw new RuntimeException(\"can not find velocity props file, file=\" + VELOCITY_PROPS_FILE, e);\n        } finally {\n            if (is != null) {\n                try {\n                    is.close();\n                } catch (IOException e) {\n                    throw new RuntimeException(e);\n                }\n            }\n        }\n        return velocityEngine;\n    }\n", "label": 0, "substitutes": {"loadDefaultSettings": ["readDefaultSettings", "loadFAULTSettings", "loadDefaultSetting", "loaddefaultSettings", "loadFAULTValues", "readDefaultsettings", "loadFAULTSetting", "loaddefaultSetting", "readdefaultsettings", "loadDefaultsettings", "readdefaultSetting", "loaddefaultValues", "loaddefaultsettings", "readDefaultSetting", "readdefaultSettings", "readDefaultValues", "loadDefaultValues", "loadFAULTsettings", "readdefaultValues"], "configFileName": ["configFileLocation", "confFilenamePath", "configFilenameName", "configfileNames", "confFilePath", "configFILEname", "confFilename", "configFILEPath", "confFileNames", "configFilename", "configFilenamePath", "conffilename", "configPageNames", "confFileName", "configStreamLocation", "conffileName", "conffilePath", "configPagename", "confFileLocation", "configfilePath", "configfilename", "configFilenameNames", "configStreamName", "confFilenameLocation", "configFilePath", "configFILELocation", "configFILEName", "configStreamname", "confFilenamename", "configStreamPath", "configPageName", "conffileNames", "configfileName", "configPagePath", "configFileNames", "configFilenamename", "configFilenameLocation", "confFilenameName"], "in": ["mc", "en", "id", "is", "inf", "t", "e", "up", "ls", "al", "cin", "run", "from", "mi", "re", "ini", "IN", "n", "i", "ro", "inner", "ad", "check", "m", "ze", "on", " din", "ar", "o", "ma", "din", "init", "doc", "user", "input", "isin", "ind", "gin", "In", "source", "or", "im", "ai", "ins", "rin", "l", "it", "info", "bin", "ain", "con", "inn"], "out": ["not", "des", "t", "conv", "update", "ot", "po", "aos", "output", "copy", "m", "auto", "all", "ins", "ent", "de", "off", "w", "v", "at", "OU", "io", "ion", "up", "ex", "check", "are", "o", "server", "net", "raw", "cn", "read", "client", "sys", "or", "handle", "ne", "outs", "can", "log", "obj", "null", "n", "to", "port", "res", "ge", "init", "user", "une", "writer", "ind", "over", "OUT", "Out", "cache", "it", "ou", "gc", "os", "file", "en", "store", "nt", "ing", "gt", "oss", "co", "con"]}}
{"id1": "8430178", "id2": "21308543", "code1": "    public static void copyFile(String source_name, String dest_name) throws IOException {\n        source_name = Shell.getUtils().constructPath(source_name);\n        File source_file = new File(source_name);\n        dest_name = Shell.getUtils().constructPath(dest_name);\n        File destination_file = new File(dest_name);\n        FileInputStream source = null;\n        FileOutputStream destination = null;\n        byte[] buffer;\n        int bytes_read;\n        try {\n            if (!source_file.exists() || !source_file.isFile()) throw new FileCopyException(\"cp: no such source file: \" + source_name);\n            if (!source_file.canRead()) throw new FileCopyException(\"cp: source file \" + \"is unreadable: \" + source_name);\n            if (destination_file.exists()) {\n                if (destination_file.isFile()) {\n                    BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n                    String response;\n                    if (!destination_file.canWrite()) throw new FileCopyException(\"cp: destination \" + \"file is unwriteable: \" + dest_name);\n                    System.out.print(\"cp: file \" + dest_name + \" already exists. Overwrite it ? (Y/N): \");\n                    System.out.flush();\n                    response = in.readLine();\n                    if (!response.equals(\"Y\") && !response.equals(\"y\")) throw new FileCopyException(\"cp: copy cancelled.\");\n                } else throw new FileCopyException(\"cp: destination \" + \"is not a file: \" + dest_name);\n            } else {\n                File parentdir = parent(destination_file);\n                if (!parentdir.exists()) throw new FileCopyException(\"cp: destination \" + \"directory doesn't exist: \" + dest_name);\n                if (!parentdir.canWrite()) throw new FileCopyException(\"cp: destination \" + \"directory is unwriteable: \" + dest_name);\n            }\n            source = new FileInputStream(source_file);\n            destination = new FileOutputStream(destination_file);\n            buffer = new byte[1024];\n            int size = (new Long((source_file.length() / 1024) / 50)).intValue();\n            int c = 1;\n            int written = 0;\n            System.out.print(\"cp: \");\n            while (true) {\n                if (written < 50) {\n                    if ((c - 1) == size && size != 0) {\n                        System.out.print(\"#\");\n                        c = 1;\n                        written++;\n                    } else if (size == 0) {\n                        int j = 1;\n                        if (c > 1) j = (50 / c) - 50; else j = 50 / c;\n                        for (int i = 0; i < j; i++) System.out.print(\"#\");\n                        written += j;\n                    }\n                }\n                bytes_read = source.read(buffer);\n                if (bytes_read == -1) break;\n                destination.write(buffer, 0, bytes_read);\n                c++;\n            }\n            System.out.println();\n        } finally {\n            if (source != null) try {\n                source.close();\n            } catch (IOException e) {\n            }\n            if (destination != null) try {\n                destination.close();\n            } catch (IOException e) {\n            }\n        }\n    }\n", "code2": "    private static void copyFile(String src, String target) throws IOException {\n        FileChannel ic = new FileInputStream(src).getChannel();\n        FileChannel oc = new FileOutputStream(target).getChannel();\n        ic.transferTo(0, ic.size(), oc);\n        ic.close();\n        oc.close();\n    }\n", "label": 1, "substitutes": {"copyFile": ["cpFiles", "cpPath", "CopyFiles", "CopyPath", "copyLine", "CopyLine", "cpLine", " copyLine", "copyFiles", "CopyFile", "cpFile", " copyPath", "copyPath", " copyFiles"], "source_name": ["source09file", "source_case", "source_link", "source_format", "sourcePNAME", "sourceptname", "Source_NAME", "src_names", "source_word", "source09names", "source09name", "sourceEnames", "source09link", "src_check", "src_case", "src_Name", "sourcePlocal", " source_names", "Source_local", "source_local", "sourceptnames", "sourceEName", "source_names", "sourcePname", "src_file", "source_Name", "Source_name", "src_link", "src_name", "sourceEcase", "source_NAME", "sourceEname", " source_word", "src_format", "sourceptcheck", "sourceptName", "source_check"], "dest_name": [" dest_file", "destitycommon", " dest_names", " dest_min", "destationcommon", "dest_id", " dest_no", "dest9Name", "destationname", "destaxyname", "destityName", "dest9admin", "destaxyName", "Dest_group", "destaxynam", "startityName", "destationName", "start_name", "dest_admin", "dest_common", " dest_key", "Dest_Name", "dest9name", "dest_create", "destipname", "dest_names", "destationadmin", "dest__key", "dest_Name", "dest__name", "dest_nam", "destaxynames", "destipid", "dest_no", "source_names", "dest_min", "source_nam", "Dest_name", "dest_key", "start_Name", "dest_NAME", "dest_size", "src_file", "Dest_admin", "dest__size", "source_Name", "startitycommon", "destipcreate", "start_admin", " dest_Name", "src_name", "source_NAME", " dest_size", "dest_time", "startityadmin", "start_common", "startityname", " dest_time", "dest9group", "dest__names", "destityname", "dest_group", "destipfile", "src_create", "destityadmin", "src_id", "dest_file"], "source_file": ["sourcephpfile", "source_le", "source___stream", "source_link", "sourceistfile", "source2info", "source___le", "sourcepystream", "ource_class", "source_entry", "source_info", "source___file", "sourceistlink", "source_id", "site___file", "sourcephpservice", "site___le", "ource_file", "site_le", "src_path", "sourceistid", " source_entry", "sourcepyservice", "source2entry", "site_service", "ource_File", "site___stream", "source_stream", " source_info", "source1path", "source_class", "source___File", "site_file", "source_path", "site_stream", "src_file", "source___time", "source___class", "source_File", "source___service", "ource_time", " source_id", "src_stream", "source_time", "sourcephpstream", "sourceistname", "sourcephple", "sourcepyfile", "source1stream", "source1name", "src_name", "sourcepyle", "source2file", "site___service", " source_link", "source_service", "source1file"], "destination_file": ["destinate_file", "destinant_port", "destination_do", "destinationJfp", "destination____db", "destination__db", "destination__File", "destinant_domain", "destination_db", "destinationJimage", "destination____domain", "destification_ile", "destinant____file", "destrant_path", "destination_path", "destination_link", "destinate_ile", "destinant____File", "destination__file", "destination_fp", "destination__domain", "destrantJpath", "destination____File", "destinant_File", "destination_image", "destinationJfile", "destination_dir", "destinant____db", "destinate_do", "destrant_file", "destinationJpath", "destification_file", "destination_port", "destinant____domain", "destinant_db", "destrantJimage", "destrant_image", "destinant_fp", "destrantJfile", "destrantJfp", "destinant_link", "destification_path", "destification_port", "destination_File", "destination_domain", "destrant_fp", "destinate_dir", "destinant_file", "destination____file", "destination_ile"], "source": ["master", "local", "system", "search", "secret", "sample", "proxy", "file", "sequence", "site", "parent", "sin", "ce", "src", "resource", "cause", "store", "tool", "join", "start", "ources", "dest", "class", "service", "SOURCE", "shadow", "from", "target", "copy", "reader", "content", "existing", "product", "query", "ource", "session", "scope", "connection", "title", "status", "volume", "base", "config", "note", "set", "feature", "server", "Source", "iter", "argument", "out", "input", "ie", "major", "template", "client", "object", "image", "or", "use", "ser", "directory", "script", "unit", "origin"], "destination": [" destinate", "estinate", "methodinator", "terminination", "destinated", "terminociation", "Destinated", "destinator", " destication", "methodinate", "restination", "gestociation", "Destion", "estinated", "destinations", " destation", "termininator", "coordinated", "restinations", "originification", "destication", "Destinations", "originination", "targetification", "alterninate", "restion", "targetociation", "methodination", "estication", "origininator", "alternination", "termininated", "destification", "gestinated", "Destination", "Destation", "targetinations", "destociation", "coordination", "targetinator", " destinator", "gestination", "alterninator", "coordinate", "Destinator", "restinate", "destinate", "gestinator", "methodinated", "destion", "restinator", "origininated", "restation", " destinated", "targetination", "destation", "alterninated", "targetinated", "targetion", "coordication", "restinated", "estination", " destification"], "buffer": ["text", "batch", "binary", "sequence", "append", "b", "length", "context", "bb", "block", "base", "iter", "table", "message", "buff", "paste", "read", "transfer", "document", "frame", "comment", "window", "cache", "buf", "Buffer", "stream", "command"], "bytes_read": ["bytes_Read", "bytes_left", "bytesunRead", "bytesunread", " bytes_Read", "bytesunleft", "bytes2left", " bytes_written", " bytes_left", "bytes2read", "bytes_written", "bytesunwritten", "bytes2Read", "bytes2written"], "in": ["err", "ic", "log", "file", "en", "p", "id", "io", "is", "inf", "std", "t", "from", "cin", "conf", "reader", "r", " IN", "ini", "IN", "n", "inner", "ar", "out", "din", "get", "diff", "all", "user", "doc", "isin", "input", "ind", "read", "mm", "client", "gin", "In", "add", "mn", "ins", "l", "sum", "rin", "it", "nin", "bin", "body", "stream", "con", "inn"], "response": ["sample", "ping", "description", "echo", "sequence", "respond", "print", "onse", "question", "hash", "remember", "success", "choice", "Response", "output", "network", "offer", "block", "relation", "connection", "res", "query", "status", "continue", "notice", "vector", "example", "message", "result", "page", "format", "bye", "exit", "python", "respons", "line", "zero", "data", "answer", "application", "one", "value", "reset", "version", "hello", "request", "window", "json", "reply", "resp", "entry", "command"], "parentdir": [" parentdirectory", "Parentfile", "fatdirect", " parentfile", "parentdirectory", "fatd", "rootdirectory", "Parentdir", "Parentfolder", "masterfile", "parentfolder", "fatdir", " parentdirect", "rootd", "rootdir", "Parentdirectory", "masterdirectory", " parentfolder", "masterDir", "parentfile", "ParentDir", "parentDir", "rootfolder", "rootDir", "fatdirectory", "parentd", "masterdir", "rootdirect", "parentdirect", " parentd", " parentDir"]}}
{"id1": "7757297", "id2": "6171406", "code1": "    public boolean submit(String uri) throws java.io.IOException, Exception {\n        if (getUserInfo()) {\n            String encodedrdf = URLEncoder.encode(rdfpayload, \"UTF-8\");\n            URL url = new URL(uri);\n            URLConnection connection = url.openConnection();\n            connection.setDoOutput(true);\n            setDescription(mDescription.getText());\n            addCreator(mUser.getText());\n            lastUser = mUser.getText();\n            PrintWriter out = new PrintWriter(connection.getOutputStream());\n            out.println(\"rdfblob=\" + encodedrdf);\n            writeCreators(out);\n            writeCategories(out);\n            writeName(out);\n            writeDescription(out);\n            writeDate(out);\n            out.println(\"&inputtype=1\");\n            out.println(\"&op=Submit\");\n            out.close();\n            return doSubmit(connection, rdfpayload);\n        } else {\n            JOptionPane.showMessageDialog(null, \"Submit cannot be completed without user information, please try again.\", \"User Info Error\", JOptionPane.ERROR_MESSAGE);\n            return false;\n        }\n    }\n", "code2": "    public static void createTar(File directoryToPack, File targetTarFile) throws IOException {\n        if (directoryToPack == null) {\n            throw new NullPointerException(\"The parameter 'directoryToPack' must not be null\");\n        }\n        if (targetTarFile == null) {\n            throw new NullPointerException(\"The parameter 'targetTarFile' must not be null\");\n        }\n        if (!directoryToPack.exists() || !directoryToPack.isDirectory()) {\n            throw new IllegalArgumentException(\"The target file '\" + directoryToPack + \"' does not exist or is not a directory.\");\n        }\n        if (targetTarFile.exists()) {\n            log.warn(\"The target file '\" + targetTarFile + \"' already exists. Will overwrite\");\n        }\n        log.debug(\"Creating tar from all files in directory '\" + directoryToPack + \"'\");\n        byte buffer[] = new byte[BUFFER_SIZE];\n        FileOutputStream targetOutput = new FileOutputStream(targetTarFile);\n        TarOutputStream targetOutputTar = new TarOutputStream(targetOutput);\n        try {\n            List<File> fileList = collectFiles(directoryToPack);\n            for (Iterator<File> iter = fileList.iterator(); iter.hasNext(); ) {\n                File file = iter.next();\n                if (file == null || !file.exists() || file.isDirectory()) {\n                    log.info(\"The file '\" + file + \"' is ignored - is a directory or non-existent\");\n                    continue;\n                }\n                if (file.equals(targetTarFile)) {\n                    log.debug(\"Skipping file: '\" + file + \"' - is the tar file itself\");\n                    continue;\n                }\n                log.debug(\"Adding to archive: file='\" + file + \"', archive='\" + targetTarFile + \"'\");\n                String filePathInTar = getFilePathInTar(file, directoryToPack);\n                log.debug(\"File path in tar: '\" + filePathInTar + \"' (file=\" + file + \")\");\n                TarEntry tarAdd = new TarEntry(file);\n                tarAdd.setModTime(file.lastModified());\n                tarAdd.setName(filePathInTar);\n                targetOutputTar.putNextEntry(tarAdd);\n                if (file.isFile()) {\n                    FileInputStream in = new FileInputStream(file);\n                    try {\n                        while (true) {\n                            int nRead = in.read(buffer, 0, buffer.length);\n                            if (nRead <= 0) break;\n                            targetOutputTar.write(buffer, 0, nRead);\n                        }\n                    } finally {\n                        StreamUtil.tryCloseStream(in);\n                    }\n                }\n                targetOutputTar.closeEntry();\n            }\n        } finally {\n            StreamUtil.tryCloseStream(targetOutputTar);\n            StreamUtil.tryCloseStream(targetOutput);\n        }\n        log.info(\"Tar Archive created successfully '\" + targetTarFile + \"'\");\n    }\n", "label": 0, "substitutes": {"submit": ["send", "apply", "post", "print", "process", "update", "open", "run", "launch", "close", "accept", "form", " submission", "format", "create", "input", "download", "upload", "Submit", "save", "report", "execute", "request", "login", "sub", "edit", "display"], "uri": ["course", "du", "path", "address", "subject", "description", "file", "campus", "term", "id", "resource", "doi", "msg", "ri", "filename", "wiki", "href", "range", "i", "pi", "title", "URI", "link", "location", " URI", "URL", "prefix", "message", "ur", "name", "iri", "http", "source", "report", "password", "directory", "ui", "info", "origin"], "Exception": ["Class", "ception", "EX", "Message", "E", "Response", "Connection", "null", "Error", "X", "Event", "Warning", "Application", "Result", "T", "Exit", "Throw", "Failure", "Default", "Status", "API", "Document"], "encodedrdf": ["encodedwsf", "encodedrdl", "encuredrp", "encodedwsfx", "encodedrdfs", "encodedrp", "encodedrf", "encodedridf", "encodedrtf", "encodedridfc", "encodedrdp", "encodingrsfs", "encodedrtfs", "encodedrl", "encodedwsfs", "encodingrdf", "encodeddrp", "encodedwsl", "encuredrdl", "encodeddrfc", "encodedrsfs", "encodedridp", "encodeddrl", "encodeddrf", "encuredrf", "encodedrsl", "encodingrdfx", "encodedrtl", "encodedrsfx", "encodedrdfx", "encodedridl", "encuredrdfc", "encodingrsf", "encodedrtfx", "encuredrfc", "encodingrsl", "encodingrdfs", "encodedrsf", "encuredrl", "encodingrsfx", "encodingrdl", "encuredrdf", "encuredrdp", "encodedrdfc", "encodedrfc"], "url": ["build", "sl", "address", "log", "file", "Url", "p", "li", "str", "nl", "resource", "b", "browser", "service", "ls", "open", "r", "ll", "https", "ssl", "m", "location", "link", "base", "URL", "web", "loc", "sb", "conn", "ur", "cert", "client", "name", "http", "socket", "mount", "l", "con", "ul"], "connection": ["description", "function", "number", "communication", "io", "resource", "channel", "ion", "in", "context", "position", "ticket", "still", "open", "output", "Connection", "network", "index", "c", "n", "entry", "relation", "session", "condition", "https", "statement", "link", "server", "web", "connect", "result", "using", "message", "conn", "database", "writer", "client", "document", "generation", "application", "socket", "response", "l", "connected", "established", "handler", "con", "creator", "command"], "lastUser": ["LastCategory", "LastUser", "latestAuthor", "latestDate", " lastAuthor", " lastCategory", "lastAuthor", "LastDate", "lastDate", "latestCategory", " lastDate", "lastCategory", "latestUser", "LastAuthor"], "out": ["err", "v", "serv", "at", "log", "p", "txt", "io", "help", "print", "obj", "conv", "nt", "in", "up", "aos", "output", "conf", "inv", "rem", "to", "n", "ex", "check", "query", "inner", "write", "res", "null", "o", "server", "set", "net", "table", "format", "screen", "raw", "conn", "init", "ch", "all", "writer", "gr", "client", "pretty", "line", "sys", "cont", "OUT", "report", "chain", "Out", "list", "window", "cache", "json", "it", "ent", "cmd", "pool", "ou", "outs", "co", "con", "timeout"]}}
{"id1": "22022715", "id2": "2465747", "code1": "    protected static final byte[] digest(String s) {\n        byte[] ret = null;\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            md.update(s.getBytes());\n            ret = md.digest();\n        } catch (NoSuchAlgorithmException e) {\n            System.err.println(\"no message digest algorithm available!\");\n            System.exit(1);\n        }\n        return ret;\n    }\n", "code2": "    public static String postRequest(String urlString, HashMap data) {\n        String returnData = \"\";\n        try {\n            URL url = new URL(urlString);\n            URLConnection connection = url.openConnection();\n            connection.setDoOutput(true);\n            connection.setDoInput(true);\n            PrintWriter out = new PrintWriter(connection.getOutputStream());\n            Object[] keySet = data.keySet().toArray();\n            Object[] values = data.values().toArray();\n            for (int count = 0; count < keySet.length; count++) {\n                out.print(URLEncoder.encode((String) keySet[count]) + \"=\" + URLEncoder.encode((String) values[count]));\n                if ((count + 1) < keySet.length) out.print(\"&\");\n            }\n            out.close();\n            BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));\n            String inputLine;\n            while ((inputLine = in.readLine()) != null) {\n                returnData += inputLine;\n            }\n            in.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n            returnData = null;\n        }\n        return (returnData);\n    }\n", "label": 0, "substitutes": {"digest": ["mdested", "mnen", "digested", "mnest", "Digested", "mdest", "digge", "mnist", "dest", "digate", "Digest", "mdum", "digum", "digests", "Digate", "den", "digine", "dum", "digen", "mdine", "mdist", "mden", "date", "dge", "decest", "dested", "mdests", "dist", "Digum", "digist", "dests", "decge", "decested", "mnests", "Digine", "dine", "Digge", "decate"], "s": ["text", "js", "sq", "v", "bytes", "h", "string", "p", "str", "ats", "b", "is", "t", "e", "S", "ls", "strings", "r", "ts", "n", "c", "i", "a", "m", "f", "o", "ps", "ses", "ms", "sb", "sql", "sts", "sv", "l", "ss", "space", "y"], "ret": ["val", "elt", "pet", "mt", "txt", "RET", "cat", "back", "ert", "az", "test", "t", "nt", "arr", "repl", "rem", "re", "rs", "rets", "r", "ts", "ext", "det", "res", "arg", "gt", "Return", "result", "out", "xt", "rm", "found", "rt", "ft", "tmp", "reg", "over", "att", "data", "cont", "reset", "report", "rep", "tr", "uf", "it", "ref", "resp", "buf", "gb", "Ret", "jp"], "md": ["d", "mc", "dr", "pdf", "pd", "ld", "mt", "mail", "mo", "mod", "di", " MD", "sm", "med", "managed", "nd", "met", "red", "det", "m", "pm", "sd", "ms", "dd", "mand", "rm", "hd", "mm", "ds", "mk", "cd", "ind", "od", "bd", "mg", "mn", "and", "dm", "man", "der", "dh", "df", "mb", "cmd", "del", "MD", " Md"]}}
{"id1": "15051083", "id2": "5142039", "code1": "    @Override\n    public String getMessageDigest() throws SarasvatiLoadException {\n        if (messageDigest == null) {\n            Collections.sort(nodes);\n            Collections.sort(externals);\n            try {\n                MessageDigest digest = MessageDigest.getInstance(\"SHA1\");\n                digest.update(name.getBytes());\n                for (XmlNode node : nodes) {\n                    node.addToDigest(digest);\n                }\n                for (XmlExternal external : externals) {\n                    external.addToDigest(digest);\n                }\n                messageDigest = SvUtil.getHexString(digest.digest());\n            } catch (NoSuchAlgorithmException nsae) {\n                throw new SarasvatiException(\"Unable to load SHA1 algorithm\", nsae);\n            }\n        }\n        return messageDigest;\n    }\n", "code2": "    public static String uncompress(String readPath, boolean mkdir) throws Exception {\n        ZipArchiveInputStream arcInputStream = new ZipArchiveInputStream(new FileInputStream(readPath));\n        BufferedInputStream bis = new BufferedInputStream(arcInputStream);\n        File baseDir = new File(readPath).getParentFile();\n        String basePath = baseDir.getPath() + \"/\";\n        if (mkdir) {\n            String[] schema = readPath.split(\"/\");\n            String baseName = schema[schema.length - 1].replaceAll(\".zip\", \"\");\n            FileUtils.forceMkdir(new File(basePath + baseName));\n            basePath = basePath + baseName + \"/\";\n        }\n        ArchiveEntry entry;\n        while ((entry = arcInputStream.getNextEntry()) != null) {\n            if (entry.isDirectory()) {\n                FileUtils.forceMkdir(new File(basePath + entry.getName()));\n            } else {\n                String writePath = basePath + entry.getName();\n                String dirName = FilenameUtils.getPath(writePath);\n                FileUtils.forceMkdir(new File(dirName));\n                BufferedOutputStream bos = new BufferedOutputStream(FileUtils.openOutputStream(new File(writePath)));\n                int i = 0;\n                while ((i = bis.read()) != -1) {\n                    bos.write(i);\n                }\n                IOUtils.closeQuietly(bos);\n            }\n        }\n        IOUtils.closeQuietly(bis);\n        return basePath;\n    }\n", "label": 0, "substitutes": {"getMessageDigest": ["getContentdigests", "getContentDigse", "getMessageTimested", "getMessageDigse", "getContentdigested", "getContentDigests", "getMessageTimests", "getContentDigested", "getContentdigest", "getContentdigse", "getMessagedigests", "getMessagedigest", "getMessagedigested", "getMessageTimest", "getMessagedigse", "getMessageDigested", "getMessageTimse", "getMessageDigests", "getContentDigest"], "digest": [" Digester", "Digend", "mdested", "Digast", "digested", "signester", "signgest", "drivergest", "Diggest", "Digested", "Digse", "mdest", "driverested", "dependester", "dester", "dest", "driverester", "digast", "Digest", "hashester", "modester", "mdester", "modested", "dependested", " Digested", " digested", " Digest", "Digester", "modest", " digestester", " digester", "diggest", "driverest", " diggest", " Digend", "dependast", "dested", " digestest", "hashest", "signested", " digestested", " digse", "dependest", "digse", "hashgest", "signest", "mdse", "digester", "hashested", " digast", "digend", "dend"], "node": ["system", "cell", "Node", "binary", "post", "missing", "resource", "process", "remote", "angular", "nn", "child", "run", "open", "attribute", "network", "dependent", "n", "query", "inner", "host", "link", "role", "note", "job", "normal", "root", "element", "create", "yn", "document", "name", "common", "object", "tree", "source", "one", "peer", "ne", "entry"], "external": ["local", "outside", "foreign", "binary", "any", "multiple", "remote", "optional", "obj", " External", "internal", "child", "extra", "export", "complete", "ex", "n", "ext", "custom", "https", "External", "ns", "note", "qualified", "express", "tern", "global", "get", "reference", "exit", "name", "common", "object", "secondary", "self", "escape", "this", "unique", "intern", "ternal"], "messageDigest": ["messageMixesting", "messageDighest", "essageDatese", "messageDigested", "messagedigested", "MessageDighest", "messageDateest", "messagedighest", "messageGuhest", "Messagedigested", "MessagedigEST", "Messagedigest", "messagedigEST", "messageMixse", "messageDatese", "messageDigse", "messageGuested", "MessageDigest", "messageDesignse", "essageDigest", "MessageDigested", "Messagedighest", "essageDateesting", "messageDigEST", "messageDesignest", "messagedigest", "essageDigse", "messageDigesting", "messageMixest", "essageDateest", "messageGuest", "messageGuEST", "essageDigesting", "messageDesignEST", "messageDesignested", " messageDigested", " messageDigEST", " messageDigse", "MessageDigEST", "messagedigse", "messageDateesting", "messagedigesting"]}}
{"id1": "16969205", "id2": "22625683", "code1": "    private List<JarFile> webArchives(ServletContext servletContext) throws IOException {\n        List<JarFile> list = new ArrayList<JarFile>();\n        Set<Object> paths = servletContext.getResourcePaths(WEB_LIB_PREFIX);\n        for (Object pathObject : paths) {\n            String path = (String) pathObject;\n            if (!path.endsWith(\".jar\")) {\n                continue;\n            }\n            URL url = servletContext.getResource(path);\n            String jarURLString = \"jar:\" + url.toString() + \"!/\";\n            url = new URL(jarURLString);\n            JarFile jarFile = ((JarURLConnection) url.openConnection()).getJarFile();\n            JarEntry signal = jarFile.getJarEntry(FACES_CONFIG_IMPLICIT);\n            if (signal == null) {\n                if (log().isTraceEnabled()) {\n                    log().trace(\"Skip JAR file \" + path + \" because it has no META-INF/faces-config.xml resource\");\n                }\n                continue;\n            }\n            list.add(jarFile);\n        }\n        return list;\n    }\n", "code2": "    public static Model downloadModel(String url) {\n        Model model = ModelFactory.createDefaultModel();\n        try {\n            URLConnection connection = new URL(url).openConnection();\n            if (connection instanceof HttpURLConnection) {\n                HttpURLConnection httpConnection = (HttpURLConnection) connection;\n                httpConnection.setRequestProperty(\"Accept\", \"application/rdf+xml, */*;q=.1\");\n                httpConnection.setRequestProperty(\"Accept-Language\", \"en\");\n            }\n            InputStream in = connection.getInputStream();\n            model.read(in, url);\n            in.close();\n            return model;\n        } catch (MalformedURLException e) {\n            cat.debug(\"Unable to download model from \" + url, e);\n            throw new RuntimeException(e);\n        } catch (IOException e) {\n            cat.debug(\"Unable to download model from \" + url, e);\n            throw new RuntimeException(e);\n        }\n    }\n", "label": 0, "substitutes": {"webArchives": ["webarchived", "webarchive", "webArtives", "webARCHived", "webArtived", "webARCHibles", "webArtive", "WebARCHived", "webarchibles", "WebArchives", "WebARCHives", "WebArchive", "WebARCHive", "WebArchibles", "WebArchived", "webArchived", "webarchives", "webArchibles", "WebARCHibles", "webArchive", "webARCHive", "webARCHives", "webArtibles"], "servletContext": ["servletRequest", "servcherContext", " servletcontext", "servletsInfo", " servletsContext", "servlecontext", "servletonRequest", "servcherInfo", "servetRequest", " servletInfo", " servletsInfo", "servletsConfig", " servleCategory", "servletonContext", "servletonCategory", "servleContext", "viewoncontext", "servserverConfig", " servletRequest", "servleCategory", " servlecontext", " servletsCheck", "servoncontext", "viewonConfig", "servleRequest", "viewletSystem", "servantConfig", "servonConfig", "viewletcontext", "servetcontext", "servserverContext", " servletCheck", "servonSystem", "servservercontext", "servletCheck", "servcherConfig", "servletcontext", "servletsSystem", "servantInfo", "servetContext", " servleRequest", "servonContext", "viewletContext", " servleContext", "servletSystem", "viewletConfig", "viewonSystem", " servletCategory", "servantCheck", "servletoncontext", "servletConfig", " servletConfig", "servletInfo", "servletsCheck", "servletsContext", "viewonContext", "servletscontext", "servserverSystem", "servetCategory", "servcherCheck", " servletsConfig", "servantContext", "servletCategory"], "list": ["local", "batch", "filter", "log", "file", "alist", "lock", "li", "lists", "p", "queue", "print", "part", "listed", "map", "join", "st", "test", "nt", "detail", "ist", "limit", "left", "output", "dl", "pl", "summary", "LIST", "set", "single", "table", "result", "out", "get", "all", "acl", "load", "add", "drop", "and", "group", "elist", "l", "pool", "php", "temp", "collection", "ul"], "paths": ["Paths", "Pathums", "pathes", "dirs", "dirings", "pathts", "pathums", "Pathes", "phs", "pathries", " pathries", " pathes", "phings", "patterns", " pathums", "pats", "patternts", "dirts", "Pathries", "phts", "pathings", "patternings", "patums", "pates", "patries"], "pathObject": ["PathObject", " pathwayObj", " pathwayOb", " pathOb", " pathInfo", "nameOb", " pathObj", "athInfo", " pathElement", "nameObj", "pathString", "athElement", "pathElement", "pathInfo", "PathInfo", "nameObject", "nameString", "PathObj", "pathObj", "athObj", "athObject", " pathwayString", "PathElement", "pathOb", " pathString", " pathwayObject"], "path": ["text", "near", "string", "file", "dir", "log", "p", "resource", "point", "transform", "print", "part", "test", "binding", "anc", "history", "context", "relative", "prop", "filename", "ath", "ex", "check", "alias", "pattern", "PATH", "title", "link", "location", "kind", "uri", "base", "reason", "trace", "prefix", "message", "th", "raw", "project", "core", "req", "cert", "name", "template", "patch", "spec", "war", "Path", "data", "cont", "pointer", "value", "key", "x", "chain", "mount", "pkg", "full", "temp", "gem", "walk", "entry"], "url": ["sl", "address", "gl", "string", "file", "Url", "log", "ret", "abs", "str", "nl", "resource", "mail", "b", "char", "browser", "ls", "re", "r", "dl", "ll", "host", "https", "ssl", "link", "location", "f", "uri", "base", "URL", "buffer", "loc", "get", "ur", "conn", "user", "all", "github", "client", "u", "util", "bel", "http", "socket", "rl", "mount", "l", "ob", "ref", "il", "ul"], "jarURLString": [" jarURLChain", "jarFILEStyle", "jarURText", "jarUNString", "JarURLString", "jarURLStyle", "jarUNSimple", "jarFILEStr", "jarFILEString", "jarURLChain", "jarURChain", "JarURLText", "jarMLText", "jarURLText", "jarURStyle", "jarGERChain", " jarURStyle", "jarMLSimple", "jarURSimple", "jarURString", "jarGERString", "jarGERStr", "jarMLStr", "jarURLStr", "JarURStr", "jarGERStyle", " jarURLStyle", " jarURStr", " jarURLStr", "jarUNStr", "jarUNText", " jarURString", " jarURChain", "jarURStr", "JarURText", "JarURString", "jarURLSimple", "JarURSimple", "jarFILEChain", "JarURLSimple", "jarMLString", "JarURLStr"], "jarFile": ["logfile", "browserEntry", "jarPath", " jarEntry", "rarFile", "jarLine", "jarFilename", "jarfile", " jarFiles", "browserFile", " jarFilename", "jLine", "browserfile", "jTree", "browserFiles", "logPath", "logFilename", "JarFiles", "JarEntry", "logFile", "jFile", "jarTree", " jarfile", "rarPath", "browserLine", "jarEntry", " jarTree", "rarfile", " jarLine", "jarFiles", "browserTree", "JarFile", " jarPath", "jfile", "Jarfile", "rarFilename"], "signal": ["Signaled", "signAL", "terminal", "Signals", "Signal", " signals", "signals", "SIGNAL", " signaled", "SignAL", "SIGNal", "signaled", "SIGNaled", "terminAL", "SIGNals", "terminals"]}}
{"id1": "4398382", "id2": "17817568", "code1": "    public static String digest(String algorithm, String text) {\n        MessageDigest mDigest = null;\n        try {\n            mDigest = MessageDigest.getInstance(algorithm);\n            mDigest.update(text.getBytes(ENCODING));\n        } catch (NoSuchAlgorithmException nsae) {\n            _log.error(nsae, nsae);\n        } catch (UnsupportedEncodingException uee) {\n            _log.error(uee, uee);\n        }\n        byte[] raw = mDigest.digest();\n        BASE64Encoder encoder = new BASE64Encoder();\n        return encoder.encode(raw);\n    }\n", "code2": "    public Reader getGETReader_bak(URL url) {\n        Reader reader = null;\n        if (Navigator.isVerbose()) System.out.println(\"Web3DService.getGETReader caching \" + url);\n        int contentLength = -1;\n        URLConnection urlc;\n        try {\n            urlc = url.openConnection();\n            urlc.setReadTimeout(Navigator.TIME_OUT);\n            if (getEncoding() != null) {\n                urlc.setRequestProperty(\"Authorization\", \"Basic \" + getEncoding());\n            }\n            urlc.connect();\n            String content_type = urlc.getContentType();\n            if (content_type == null || content_type.equalsIgnoreCase(\"x-world/x-vrml\") || content_type.equalsIgnoreCase(\"model/vrml\") || content_type.equalsIgnoreCase(\"model/vrml;charset=ISO-8859-1\")) {\n                InputStream is = urlc.getInputStream();\n                DataInputStream d = new DataInputStream(is);\n                contentLength = urlc.getContentLength();\n                byte[] content = new byte[contentLength];\n                if (d != null) {\n                    d.readFully(content, 0, contentLength);\n                }\n                is.close();\n                d.close();\n                ByteArrayInputStream bais = new ByteArrayInputStream(content);\n                reader = new InputStreamReader(bais);\n            } else if (content_type.equalsIgnoreCase(\"model/vrml.gzip\")) {\n                InputStream is = urlc.getInputStream();\n                BufferedInputStream bis = new BufferedInputStream(is);\n                GZIPInputStream gis = new GZIPInputStream(bis);\n                StringBuffer sb = new StringBuffer();\n                BufferedReader zipReader = new BufferedReader(new InputStreamReader(gis));\n                char chars[] = new char[10240];\n                int len = 0;\n                contentLength = 0;\n                while ((len = zipReader.read(chars, 0, chars.length)) >= 0) {\n                    sb.append(chars, 0, len);\n                    contentLength += len;\n                }\n                chars = null;\n                gis.close();\n                zipReader.close();\n                bis.close();\n                is.close();\n                reader = new StringReader(sb.toString());\n            } else if (content_type.equalsIgnoreCase(\"model/vrml.encrypted\")) {\n                InputStream is = urlc.getInputStream();\n                StringBuffer sb = new StringBuffer();\n                Cipher pbeCipher = createCipher();\n                if (pbeCipher != null) {\n                    CipherInputStream cis = new CipherInputStream(is, pbeCipher);\n                    BufferedReader bufReader = new BufferedReader(new InputStreamReader(cis));\n                    char chars[] = new char[1024];\n                    int len = 0;\n                    contentLength = 0;\n                    while ((len = bufReader.read(chars, 0, chars.length)) >= 0) {\n                        sb.append(chars, 0, len);\n                        contentLength += len;\n                    }\n                    chars = null;\n                    cis.close();\n                    bufReader.close();\n                    reader = new StringReader(sb.toString());\n                }\n            } else if (content_type.equalsIgnoreCase(\"model/vrml.gzip.encrypted\")) {\n                InputStream is = urlc.getInputStream();\n                StringBuffer sb = new StringBuffer();\n                Cipher pbeCipher = createCipher();\n                if (pbeCipher != null) {\n                    CipherInputStream cis = new CipherInputStream(is, pbeCipher);\n                    GZIPInputStream gis = new GZIPInputStream(cis);\n                    BufferedReader bufReader = new BufferedReader(new InputStreamReader(gis));\n                    char chars[] = new char[1024];\n                    int len = 0;\n                    contentLength = 0;\n                    while ((len = bufReader.read(chars, 0, chars.length)) >= 0) {\n                        sb.append(chars, 0, len);\n                        contentLength += len;\n                    }\n                    chars = null;\n                    bufReader.close();\n                    gis.close();\n                    cis.close();\n                    reader = new StringReader(sb.toString());\n                }\n            } else if (content_type.equalsIgnoreCase(\"text/html;charset=utf-8\")) {\n                System.out.println(\"text/html;charset=utf-8\");\n            } else {\n                System.err.println(\"ContentNegotiator.startLoading unsupported MIME type: \" + content_type);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return reader;\n    }\n", "label": 0, "substitutes": {"digest": ["Digity", " digests", "digize", "digate", "Digest", "digests", "encit", "Digate", "validity", "validests", "equate", "encest", "validest", "digity", "equest", "Digize", "encize", "Digests", "equit", "validate", "Digit", "encate", "digit", " digity", "equize", " digate"], "algorithm": ["alterngebra", "Algebra", "isalphabet", "Algo", "Algorithm", "Alphabet", "ALgo", "isalgorithm", "isalgo", "halchant", "algo", "ALgorithm", "halphabet", "Alchant", "alternitude", "isalchant", "halgo", "alterngo", "alterngorithm", "alitude", "ALitude", "halgorithm", "alchant", "algebra", "alphabet", "Alitude", "ALgebra"], "text": ["path", "subject", "description", "string", "binary", "txt", "Text", "str", "term", "print", "char", "test", "msg", "current", "output", "username", "filename", "aut", "content", "required", "ext", "pattern", "title", "code", "prefix", "buffer", "physical", "message", "input", "read", "document", "template", "name", "data", "source", "value", "image", "password", "TEXT", "translation", "word"], "mDigest": ["mDriester", "mDiget", "mDose", "mDriest", " mDiget", "mDoester", "Mdigest", "MDigse", "Mdiger", " mDigester", "mDr", " mDiger", "cmDester", "mIGester", "mIGest", "Mdigse", "mdigr", "mDigitalet", "mDigitalester", "mDriet", "mDesignester", "mIGse", "mDiger", "mDoer", "cmDr", "mDse", "cmDigse", "mdigest", "mDoest", "cmDest", "cmDigr", "mDigitalested", "mDigse", "mDigested", "mdigester", "MDigester", "mIGer", "cmDigester", "mdigested", " mDriester", " mDigested", "mdiget", "mDester", "cmDse", "Mdigester", "mDriested", " mDigse", "mDigr", "mDesignest", "mDesignse", "mDesignr", " mDriet", "mdigse", "MDiger", "mDigester", "mDer", "MDigest", " mDriested", "cmDigest", "mDest", " mDriest", "mDigitalest", "mdiger"], "raw": ["bytes", "batch", "bound", "log", "des", "orig", "clean", "remote", "aw", "stable", "rendered", "row", "re", "r", "pack", "rs", "custom", "unsigned", "secure", "valid", "modified", "encrypted", "form", "serial", "buffer", "Raw", "unknown", "core", "input", "known", "hook", "hex", "data", "RAW", "signed", "json", "cloud", "cmd", "full", "sync", "cooked", "sh"], "encoder": ["decoder", "enater", "enaler", "Encaler", "enode", "encODE", "ENCoding", "Encoding", "EncODE", "enoding", "encoding", "ENCater", "decode", "enoder", "encode", "decODE", "encaler", "ENCaler", "encater", "enODE", "ENCoder", "decoding", "Encoder", "Encode", "Encater"]}}
{"id1": "16590954", "id2": "18974466", "code1": "    public void createJAR(String fileString, String ext) {\n        try {\n            File file = new File(fileString);\n            int i = fileString.lastIndexOf(java.io.File.separator);\n            String dir = fileString.substring(0, i + 1);\n            if (ext.matches(\"jar\")) {\n                jarFile = new File(getClass().getClassLoader().getResource(\"jsdviewer.jar\").toURI());\n                java.io.FileOutputStream fstrm = new java.io.FileOutputStream(file);\n                FileChannel in = (new java.io.FileInputStream(jarFile)).getChannel();\n                FileChannel out = fstrm.getChannel();\n                in.transferTo(0, jarFile.length(), out);\n                in.close();\n                out.close();\n            } else {\n                file.mkdir();\n            }\n            File.umount(file);\n            File temp = new File(dir + \"document.jsd\");\n            FileOutputStream fstrm2 = new FileOutputStream(temp.getCanonicalPath());\n            ostrm = new ObjectOutputStream(fstrm2);\n            ostrm.writeObject(doc);\n            ostrm.flush();\n            ostrm.close();\n            File.umount();\n            File docFile = new File(file.getCanonicalPath() + java.io.File.separator + \"document.jsd\");\n            File.cp_p(temp, docFile);\n            File.umount();\n            temp.delete();\n            File.umount(file);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n", "code2": "    protected boolean copyFile(File sourceFile, File destinationFile) {\n        try {\n            FileChannel srcChannel = new FileInputStream(sourceFile).getChannel();\n            FileChannel dstChannel = new FileOutputStream(destinationFile).getChannel();\n            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n            srcChannel.close();\n            dstChannel.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n            return false;\n        }\n        return true;\n    }\n", "label": 1, "substitutes": {"createJAR": ["createIJARS", "createGAP", "createPHAR", "createPHAP", "saveIJART", "saveIJARS", "createJARS", "createJAP", "saveIJAR", "createGART", "createIJAP", "createIJART", "createGAR", "createIJAR", "saveJART", "saveJAR", "saveIJAP", "createJART", "createPHART", "saveJARS", "createGARS", "createPHARS", "saveJAP"], "fileString": ["fileStr", "FileRest", "FileString", "messageText", "fileRest", "pathstring", "ileRest", " fileStr", "pathString", "ileString", "Filestring", " fileRest", " filestring", "FileText", "ilestring", " fileText", "FileName", "messageName", " fileName", "ileStr", "fileName", "messageStr", "pathStr", "filestring", "FileStr", "fileText", "ileName", "messageString"], "ext": ["text", "path", "js", "typ", "tex", "txt", "str", "append", "char", "prot", "e", "t", "ort", "Ext", "external", "gz", "ex", "EXT", "except", "pat", "desc", "suff", "format", "end", "xt", "req", "ime", "exe", "exp", "ind", "name", "cont", "rest", "enc", "ix", "fr", "xp", "cmd", "type", "off"], "file": ["local", "path", "module", "force", "h", "log", "lock", "parent", "io", "resource", "FILE", "store", "channel", "ile", "t", "disk", "mail", "class", "File", "open", "from", "output", "run", "url", "work", "model", "time", "to", "null", "port", " File", "link", "f", "base", "buffer", "table", "message", "page", "format", "get", "user", "doc", "db", "fp", "input", "tree", "name", "document", "foo", "line", "http", "data", "source", "le", "report", "image", "memory", "list", "handle", "default", "cache", "info", "pool", "type", "this"], "i": ["v", "I", "p", "li", "id", "gi", "is", "di", "t", "ii", "ati", "j", "phi", "ri", "mi", "si", "index", "c", "ini", "n", "pi", "ci", "m", "f", "o", "s", "xi", "ind", " j", "x", "ai", "ip", "ir", "bi", "ui", "ami"], "dir": ["direct", "d", "path", "lib", " Dir", "id", "disk", "mod", "part", "dy", "star", "url", "vol", " folder", "uri", "rel", "loc", "dd", "root", "tmp", "project", " d", "Dir", "db", "ind", "org", " directory", "direction", "dist", "folder", "home", "done", "addr", "pkg", "ir", "directory", "del", "DIR", "wd", "div"], "jarFile": ["jFilename", "javaName", "tarFile", "javaFile", "jarEmail", "javaFilename", "pkgFILE", " jarField", "javafile", "jarFilename", "JarFilename", "tarEmail", "jarfile", " jarFilename", "pkgField", "JarField", "jName", "pkgFile", "tarfile", "tarFilename", "jarFILE", "JarFILE", "jFile", "jarName", " jarfile", " jarFILE", "jarField", "JarEmail", " jarName", "JarFile", "jfile", " jarEmail", "Jarfile"], "fstrm": ["fcrms", "fbstrp", "ftrum", " fstrcm", " fdrm", "fsprdm", "fdrm", "fsprp", "ftrp", "fbstrm", "fdrmed", "fslm", "fsprm", " fdrum", "fbstrdm", "fdrum", "fstrp", "fstrcm", "fslcm", "ftrdm", "ftrcm", "fslmed", "fstrmed", "fstrms", " fstrmed", "fcrm", " fstrum", "fbsprdm", "fbsprm", "fcrp", "fslum", " fdrmed", "fbsprms", "fbstrms", "ftrms", "fbsprp", "fstrum", "ftrmed", "fsprms", "ftrm", "fdrcm", " fdrcm", "fcrdm", "fstrdm"], "in": ["pin", "ic", "en", "sin", "io", "is", "inf", "up", "cin", "from", "re", " IN", "r", "IN", "inc", "inner", "pi", "inside", "m", " din", "f", "o", "iter", "din", "oin", "init", "input", "isin", "ind", "read", "mm", "gin", "In", "im", "add", "ai", "ins", "rin", "it", "bin", "inn"], "out": ["v", "serv", "cos", "at", "p", "OU", "io", "channel", "t", "conv", "obj", "aos", "output", "inv", "c", "ex", "n", "null", "to", "inner", "m", "gc", "outer", "o", "net", "s", "conn", "cn", "ch", "writer", "client", "cm", "cont", "OUT", "Out", "it", "ou", "outs", "co", "os", "w"], "temp": ["fake", "local", "mint", "path", "tar", "wrap", "pt", "p", "mt", "term", "parent", "orig", "mod", "t", "tem", "dest", "current", "output", "copy", "cp", "thread", "null", "to", "TM", "Temp", "mem", "res", " Temp", "zip", "m", "EMP", "stem", "tm", "buffer", "tmp", "mm", "mk", "template", "name", "document", "util", "tree", "cont", "memory", "mp", "cache", "directory", " temporary", "tc", "porary", "tx", "tt", "emp", "Tem", "pool", "full", " tmp"], "fstrm2": ["fstrm1", "fStrtm2", "fstrp7", "fstrmm1", "fstrm7", "fstrp2", "fstrcm7", "fstrtm2", "fstrcm2", "fstrtm1", "fStrtm1", "fstrM7", "fstrmm2", "fStrp1", "fStrp2", "fStrp7", "fStrm7", "fStrm2", "fStrm1", "fstrp1", "fstrcm1", "fstrM2", "fstrM1"], "ostrm": ["ostRM", "astm", "astRM", "ostrom", "istnm", " ostm", "osRM", "osrm", "osmr", " ostrem", "istrem", "osrem", "osm", "istRM", " ostnm", "ostnm", "ostlamm", "ostmr", "ortrom", "astrem", "ostm", "ortrm", "astrom", "astrm", " ostRM", "astlamm", "astmr", "istrm", "ortlamm", " ostrom", "ostrem", "osnm", "ortRM", "istm", " ostlamm", "istmr", "oslamm"], "docFile": ["Docfile", "documentFiles", "DocLine", " docLine", " docFiles", "manPath", "documentFile", "documentDir", "docFiles", "docLine", "manFile", " docfile", "docfile", "manDir", "documentLine", "docPath", "DocPath", "DocDir", "DocFiles", "manfile", " docPath", " docDir", "DocFile", "docDir"]}}
{"id1": "14324112", "id2": "7981642", "code1": "    protected void innerProcess(CrawlURI curi) throws InterruptedException {\n        if (!curi.isHttpTransaction()) {\n            return;\n        }\n        if (!TextUtils.matches(\"^text.*$\", curi.getContentType())) {\n            return;\n        }\n        long maxsize = DEFAULT_MAX_SIZE_BYTES.longValue();\n        try {\n            maxsize = ((Long) getAttribute(curi, ATTR_MAX_SIZE_BYTES)).longValue();\n        } catch (AttributeNotFoundException e) {\n            logger.severe(\"Missing max-size-bytes attribute when processing \" + curi.getURIString());\n        }\n        if (maxsize < curi.getContentSize() && maxsize > -1) {\n            return;\n        }\n        String regexpr = \"\";\n        try {\n            regexpr = (String) getAttribute(curi, ATTR_STRIP_REG_EXPR);\n        } catch (AttributeNotFoundException e2) {\n            logger.severe(\"Missing strip-reg-exp when processing \" + curi.getURIString());\n            return;\n        }\n        ReplayCharSequence cs = null;\n        try {\n            cs = curi.getHttpRecorder().getReplayCharSequence();\n        } catch (Exception e) {\n            curi.addLocalizedError(this.getName(), e, \"Failed get of replay char sequence \" + curi.toString() + \" \" + e.getMessage());\n            logger.warning(\"Failed get of replay char sequence \" + curi.toString() + \" \" + e.getMessage() + \" \" + Thread.currentThread().getName());\n            return;\n        }\n        MessageDigest digest = null;\n        try {\n            digest = MessageDigest.getInstance(\"SHA1\");\n        } catch (NoSuchAlgorithmException e1) {\n            e1.printStackTrace();\n            return;\n        }\n        digest.reset();\n        String s = null;\n        if (regexpr.length() == 0) {\n            s = cs.toString();\n        } else {\n            Matcher m = TextUtils.getMatcher(regexpr, cs);\n            s = m.replaceAll(\" \");\n        }\n        digest.update(s.getBytes());\n        byte[] newDigestValue = digest.digest();\n        if (logger.isLoggable(Level.FINEST)) {\n            logger.finest(\"Recalculated content digest for \" + curi.getURIString() + \" old: \" + Base32.encode((byte[]) curi.getContentDigest()) + \", new: \" + Base32.encode(newDigestValue));\n        }\n        curi.setContentDigest(newDigestValue);\n    }\n", "code2": "    @Override\n    public void update(String mail, String email, String pwd, String firstname, String lastname) throws NamingException, NoSuchAlgorithmException, UnsupportedEncodingException {\n        jndiManagerConnection connection = new jndiManagerConnection();\n        Attributes attrs = new BasicAttributes();\n        attrs.put(\"sn\", lastname);\n        attrs.put(\"givenName\", firstname);\n        attrs.put(\"cn\", firstname + \" \" + lastname);\n        if (!pwd.isEmpty()) {\n            MessageDigest sha = MessageDigest.getInstance(\"md5\");\n            sha.reset();\n            sha.update(pwd.getBytes(\"utf-8\"));\n            byte[] digest = sha.digest();\n            String hash = Base64.encodeBase64String(digest);\n            attrs.put(\"userPassword\", \"{MD5}\" + hash);\n        }\n        DirContext ctx = connection.getLDAPDirContext();\n        ctx.modifyAttributes(\"mail=\" + mail + \",\" + dn, DirContext.REPLACE_ATTRIBUTE, attrs);\n        if (!mail.equals(email)) {\n            String newName = \"mail=\" + email + \",\" + dn;\n            String oldName = \"mail=\" + mail + \",\" + dn;\n            ctx.rename(oldName, newName);\n        }\n    }\n", "label": 1, "substitutes": {"innerProcess": ["inlineprocess", "inlineProcess", " innerSelect", "originalProcess", "inlineSelect", " innerRender", "originalRender", "innerprocess", "innerSelect", "inlineRender", " innerprocess", "originalprocess", "innerRender", "originalSelect"], "curi": ["couri", "mciri", " ciri", "mcurl", "acumi", " cudi", "rcui", "cri", "catumi", "caturi", "luri", "cui", "ctri", "achtml", "uncaddress", "caddress", "cury", "catury", "cathtml", "chtml", "Cumi", "cdurl", "duri", "ciri", " couri", "wdu", "acuri", "Curi", "ctiri", "cdri", "wiri", "crui", "wri", " cui", "durl", "mchtml", "rcuri", "Cri", "cphi", "lcuri", "coury", "acri", "lcui", "crdu", "Ciri", "crudi", "uncri", "lcdu", " cumi", "cdumi", "Curl", "cduri", " curl", "acuni", "Couri", "lcury", "catuni", "rcri", "curl", "mcumi", " cdu", " citi", "cdui", "coumi", "lui", " cri", "mcuni", "diri", "uncdu", "cuni", "cumi", "couni", "Cui", "liri", "rcouri", "catphi", " caddress", "lcri", "uncuri", "Cdu", "mcuri", "Cuni", "ctui", "cvoid", "covoid", "cturi", "lcvoid", "cori", "ctdu", "lcphi", "wuri", "cruri", "Caddress", "lcudi", "cophi", "lciti", "cdu", "ctiti", "ctumi", "citi", "dumi", "catvoid", "cudi", "lri"], "maxsize": ["maxSIZE", "MAXsize", "mxspace", " MAXSize", "axize", "maxlen", " MAXlength", " maxSize", "mxsize", " maxnumber", " maxize", "minSIZE", "minSize", "maxnumber", "mxSize", "axSIZE", "Maxbytes", "MaxSIZE", "minsize", "MAXlength", " maxSIZE", "MAXnumber", " MAXnumber", "maxSize", "axsize", "maxlength", " maxspace", "Maxsize", "Maxize", " maxbytes", "MAXSize", "Maxlen", "maxbytes", "minspace", "mxSIZE", " maxlen", "MaxSize", "maxize", "axbytes", "axlen", " maxlength", "maxspace", " MAXsize", "axSize"], "regexpr": ["brecreer", "reewpr", "regexps", "repexexpr", "reqer", "regdpr", "regexPR", "reexper", "regexvr", "replexexpr", "repexpr", "fregexvr", "resexprop", "reexvr", "repatternpt", "fregdpt", "reexexpr", "replexpr", "repexPR", "regexprop", "regexpt", "bregexps", "repatternpr", "relypr", "reqexpr", "relyexpr", "regexexpr", "rexexpr", "recreer", "reqps", "reqpr", "recreexpr", "fregdpr", "repexpro", "congexpr", "resexpr", "frepexpro", "bregexer", "consexexpr", "resexexpr", "reexer", "regexper", "consexprop", "consexrepl", "reewrepl", "reexpr", "brecrepr", "fregexpt", "rexpro", "regexrepl", "reewprop", "consexpr", "fregdper", "fregexPR", "regexpro", "fregexpr", "repatternper", "replexPR", "brecreps", "regdvr", "fregexexpr", "bregexexpr", "repatternvr", "congexprop", "relyprop", "fregexper", "relyrepl", "congexrepl", "regdpt", "frepexexpr", "fregexpro", "rexpr", "resexrepl", "rexPR", "frepexPR", "regexer", "brecreexpr", "reewexpr", "frepexpr", "recrepr", "regdper", "congexexpr", "bregexpr", "fregdvr", "reexpt", "recreps", "reexps", "replexpro"], "cs": ["cms", "js", "Cs", "ks", "ctr", "ars", "ics", "ats", "ours", "ws", "acts", "wcs", "ls", "mr", "cks", "gs", "rs", "cp", "c", "ts", "ctx", "caps", "cc", "ims", "ces", "csv", "fs", "ns", "es", "cf", "ps", "unes", "sc", "ms", "bs", "acs", "icks", "cn", "its", "cus", "ds", "CS", "nc", "sts", "sels", "css", "gc", "ss", "qs", "cas"], "digest": ["digested", "Digse", "Digested", "hashse", "ddester", "shaest", "dester", "dest", "shaum", "Digest", "hashester", "digum", "ddest", "diger", "Diger", "Digester", " diger", "Digist", " digester", "hasher", "shase", "hashest", "signested", "ddist", "dist", "Digum", " digse", "digist", "dder", "digse", "signum", "der", "shaested", "signest", "digester", "signse"], "s": ["text", "js", "sq", "v", "h", "string", "des", "p", "str", "ats", "b", "is", "ws", "t", "conv", "S", "ls", "j", "strings", "gs", "r", "c", "ts", "n", "i", "stats", "a", "ims", "ns", "f", "o", "es", "ps", "fs", "ms", "sb", "simple", "ds", "x", "sts", "l", "less", "ss", "qs", "y", "gets", "os", "w"], "m": ["d", "v", "match", "h", "p", "mt", "ym", "mod", "mo", "b", "t", "sm", "span", "nm", "mr", "mi", "model", "r", "mol", "c", "n", "i", "vm", "md", "f", "tm", "ms", "message", "rm", "M", "mm", "cm", "arm", "dm", "fm", "em", "l", "g", "gm", "mat", "w"]}}
{"id1": "1097147", "id2": "7761195", "code1": "    public static String getMessageDigest(String[] inputs) {\n        if (inputs.length == 0) return null;\n        try {\n            MessageDigest sha = MessageDigest.getInstance(\"SHA-1\");\n            for (String input : inputs) sha.update(input.getBytes());\n            byte[] hash = sha.digest();\n            String CPass = \"\";\n            int h = 0;\n            String s = \"\";\n            for (int i = 0; i < 20; i++) {\n                h = hash[i];\n                if (h < 0) h += 256;\n                s = Integer.toHexString(h);\n                if (s.length() < 2) CPass = CPass.concat(\"0\");\n                CPass = CPass.concat(s);\n            }\n            CPass = CPass.toUpperCase();\n            return CPass;\n        } catch (NoSuchAlgorithmException e) {\n            throw new IllegalStateException(e.getMessage());\n        }\n    }\n", "code2": "    public synchronized String encrypt(String plaintext) throws Exception {\n        StringBuffer sb = new StringBuffer();\n        MessageDigest md = null;\n        try {\n            md = MessageDigest.getInstance(\"SHA-512\");\n        } catch (NoSuchAlgorithmException e) {\n            throw new Exception(e.getMessage());\n        }\n        try {\n            md.update(plaintext.getBytes(\"UTF-8\"));\n        } catch (UnsupportedEncodingException e) {\n            throw new Exception(e.getMessage());\n        }\n        byte raw[] = md.digest();\n        String hash = (new BASE64Encoder()).encode(raw);\n        return hash;\n    }\n", "label": 1, "substitutes": {"getMessageDigest": ["getContentdigests", "getMessageDiget", "getContentdiget", "getMessageDests", "getMessageDest", "getContentDigests", "getMessagediget", "getContentdigest", "getMessageSignest", "getMessageSignests", "getMessagedigests", "getMessagedigest", "getContentDigester", "getMessageDet", "getContentDiget", "getMessageSignet", "getMessageSignester", "getMessageDigester", "getContentdigester", "getMessageDigests", "getContentDigest", "getMessageDester", "getMessagedigester"], "inputs": ["subjectls", "accepts", "selects", "subjects", "acceptts", "acceptes", "acceptp", "inputes", "inputc", "outputls", "Inputs", "Inputls", "outputes", "outputc", "inputp", "Inputes", "patternes", "patterns", "outputp", "patternts", "subjectp", "Inputts", "inputls", "subjectc", "selectls", "acceptc", "acceptls", "selectes", "outputs", "inputts"], "sha": ["lambda", "sq", "tar", "cos", "ppa", "da", "git", "ah", "ha", "SHA", "alpha", "asha", "ca", "no", "ssh", "ja", "total", "hs", "go", "shell", "sam", "a", "bh", "sa", "ksh", "md", "auto", "api", "HA", "ma", "ta", "ya", "wal", "shared", "la", "acl", "shi", "ho", "cycle", "ka", "ac", "sum", "cache", "hi", "gc", "sh", "wa", " SHA"], "input": ["text", "sq", "sample", "cur", "batch", "submit", "string", "field", "p", "term", "str", "lat", "char", "join", "Input", "in", "current", "from", "output", "attribute", "c", "qa", "bit", "set", "prefix", "form", "raw", "q", "active", "data", "qi", "source", "value", "image", "key", "add", "ip", "json", "word"], "hash": ["where", "search", "tar", "match", "filter", "square", "hat", "ash", "angle", "ah", "ha", "print", "char", "map", "test", "count", "ssh", "style", "here", "check", "node", "code", "bh", "html", "oh", "ashes", "ho", "color", "score", "hex", "save", "key", "Hash", "handle", "sum", "cache", "have", "hed", "sh", "her"], "CPass": ["CTad", "CMASS", "CSpress", "PCost", "CMad", "CPasses", "CPix", "TCASS", "CONTass", "CASS", "CPiss", "Couch", "CPush", "cpASS", " CPost", "CDASS", "CCix", " CPiss", "CCAss", "CPred", "CHASS", "CMass", "TCAss", "CSad", "cpact", "CHost", "Cact", "Cass", "Cad", "TCass", "cposs", "CDoss", "CMix", "CHass", " CPush", "Cix", "CTass", "CHiss", "CMpass", " CPAss", "CPpass", "CSass", "PCASS", "CDass", " CPred", "CSoss", "CMact", "CONTasses", "TCred", " CPpress", "CTouch", "CPouch", "CPact", "Ciss", "CCad", "CTpass", "CONTiss", "CPASS", "Casses", "CCASS", " CPASS", "CCred", "CPad", "CMush", "cpad", "cpass", "Cush", " CPact", "PCiss", "CPoss", "cppress", "CPAss", "CDact", "CPost", "CONTASS", "Cpass", " CPad", " CPoss", "CMouch", "CCass", "CHasses", "CPpress", "PCass"], "h": ["err", "head", "dr", "ach", "HH", "zh", "hu", "ah", "ha", "b", "k", "t", "history", "j", "hh", "hz", "phi", "hs", "kh", "he", "rh", "bh", "ph", "th", "hr", "q", "oh", "hd", "hm", "eh", "ho", "hl", "hex", "ht", "hp", "pp", "high", "dh", "it", "hi", "g", "H", "sh", "ih"], "s": [" cs", "sl", "js", "sq", "string", "sw", "str", "ats", " es", "is", "b", "ws", "xs", "ids", "S", "ls", " S", "hs", "strings", "gs", "rs", "tes", "ts", "sol", "cs", "als", "ns", "fs", "ps", "ses", "ms", "bs", "sp", "sb", "sql", "series", " ts", "its", " parts", "ds", "sts", "sv", "ins", "ies", "l", "less", "es", "ss", "qs", "gets", "os"], "i": ["err", "ti", "ji", "I", "batch", "ic", "zi", "li", "gi", "di", "ii", "\u0438", "j", "span", "phi", "oi", "mi", "si", "index", "ini", "iu", "pi", "status", "ci", "m", "f", "base", "o", "multi", "q", "init", "ind", "ei", "u", "ij", "x", "me", "im", "qi", "ai", "ix", "sim", "us", "asi", "bi", "g", "ui", "it", "ip", "hi", "y"]}}
{"id1": "20247400", "id2": "4686922", "code1": "    public static void main(String[] args) throws Exception {\n        if (args.length != 2) {\n            System.out.println(\"arguments: sourcefile destfile\");\n            System.exit(1);\n        }\n        FileChannel in = new FileInputStream(args[0]).getChannel(), out = new FileOutputStream(args[1]).getChannel();\n        ByteBuffer buffer = ByteBuffer.allocate(BSIZE);\n        while (in.read(buffer) != -1) {\n            buffer.flip();\n            out.write(buffer);\n            buffer.clear();\n        }\n    }\n", "code2": "    public void extractResourceToFile(String resourcePath, File dest) {\n        InputStream in = getClass().getResourceAsStream(resourcePath);\n        try {\n            FileOutputStream out = FileUtils.openOutputStream(dest);\n            try {\n                IOUtils.copy(in, out);\n            } finally {\n                if (out != null) {\n                    out.close();\n                }\n            }\n        } finally {\n            if (in != null) {\n                in.close();\n            }\n        }\n    }\n", "label": 1, "substitutes": {"in": ["file", "io", "is", "inf", "up", "cin", "from", "IN", "inc", "i", "check", "inner", "ze", " din", "on", "net", "din", "init", "input", "isin", "ind", "gin", "In", "source", "and", "ai", "ins", "rin", "it", "info", "bin", "con", "inn"], "out": ["ln", "err", "at", "log", "dir", "OU", "str", "io", "print", "b", "t", "obj", "ot", "msg", "output", "we", "other", "r", "null", "n", "ex", "to", "check", "write", "auto", "gt", "outer", "o", "screen", "net", "oss", "writer", "exit", "name", "println", "client", "line", "sys", "con", "OUT", "report", "or", "Out", "list", "ins", "it", "cmd", "ou", "outs", "ne", "os", "w"], "buffer": ["address", "sample", "match", "function", "batch", "filter", "binary", "sequence", "variable", "append", "queue", "bar", "pause", "channel", "b", "length", "component", "processor", "event", "bridge", "history", "position", "stack", "phrase", "total", "limit", "output", "attribute", "flush", "view", "index", "library", "block", "clear", "iter", "trace", "size", "table", "result", "buff", "message", "command", "database", "db", "document", "template", "comment", "data", "source", "memory", "key", "header", "shape", "window", "cache", "available", "buf", "Buffer", "temp", "display", "se"]}}
{"id1": "20751378", "id2": "17158020", "code1": "    private String hashPassword(String password) throws NoSuchAlgorithmException {\n        String hash = null;\n        MessageDigest md = MessageDigest.getInstance(\"SHA\");\n        log.debug(\"secure hash on password \" + password);\n        md.update(password.getBytes());\n        hash = new String(Base64.encodeBase64(md.digest()));\n        log.debug(\"returning hash \" + hash);\n        return hash;\n    }\n", "code2": "    public synchronized String encryptPassword(String passwordString) throws Exception {\n        MessageDigest digest = null;\n        digest = MessageDigest.getInstance(\"SHA\");\n        digest.update(passwordString.getBytes(\"UTF-8\"));\n        byte raw[] = digest.digest();\n        String hash = (new BASE64Encoder()).encode(raw);\n        return hash;\n    }\n", "label": 1, "substitutes": {"hashPassword": ["hashText", "updatePrivate", "HashText", "hashPrivate", "updateText", "updatepassword", "HashPassword", "hashpassword", " hashText", " hashPrivate", "HashPrivate", "updatePassword", "Hashpassword", " hashpassword"], "password": ["secret", "address", "PASS", "description", "string", "wd", "p", "print", "property", "device", "phrase", "shadow", "auth", "username", "attribute", "email", "word", "query", "connection", "pattern", "crypt", "language", "security", "wordpress", "expression", "encrypted", "prefix", "padding", "message", "argument", "database", "pass", "user", "column", "input", "name", "client", "sword", "comment", " Password", "application", "reset", "value", "key", "hello", "request", "login", "token", "directory", "default", "Password", "w", "command"], "hash": ["build", "search", "ash", "replace", "ah", "print", "ha", "test", "username", "copy", "here", "trust", "has", "ashing", "dig", "object", "checking", "hing", "key", "hello", "Hash", "mask", "hed", "ping", "filter", "h", "height", "tag", "method", "class", "total", "check", "html", "oh", "zero", " Hash", "alert", "handle", "sum", "where", "address", "log", "str", "cloth", "also", "other", "title", "message", "result", "user", "ho", "report", "value", "sha", "response", "cache", "sh", "her", "locking", "number", "put", "string", "shadow", "uh", "index", "rh", "block", "bh", "crypt", "alg", "shift", "proof", "hex", "reading", "array", "mass", "tr", "version", "token", " hashing"], "md": ["d", "mc", "js", "dr", "dir", "pd", "ld", "mt", "mod", "di", "obj", "sm", "managed", "nd", "sam", "red", "det", "ad", "m", "pm", "sd", "ms", "dd", "mand", "hd", "mm", "ds", "mk", "cd", "ind", "od", "bd", "add", "mn", "sha", "dm", "and", "mp", "man", "der", "dh", "df", "grad", "cmd", "del", "MD"]}}
{"id1": "7372311", "id2": "21930714", "code1": "    private void generateDeviceUUID() {\n        try {\n            MessageDigest md5 = MessageDigest.getInstance(\"MD5\");\n            md5.update(deviceType.getBytes());\n            md5.update(internalId.getBytes());\n            md5.update(bindAddress.getHostName().getBytes());\n            StringBuffer hexString = new StringBuffer();\n            byte[] digest = md5.digest();\n            for (int i = 0; i < digest.length; i++) {\n                hexString.append(Integer.toHexString(0xFF & digest[i]));\n            }\n            uuid = hexString.toString().toUpperCase();\n        } catch (Exception ex) {\n            RuntimeException runTimeEx = new RuntimeException(\"Unexpected error during MD5 hash creation, check your JRE\");\n            runTimeEx.initCause(ex);\n            throw runTimeEx;\n        }\n    }\n", "code2": "    @Test\n    public void testSpeedyShareUpload() throws Exception {\n        request.setUrl(\"http://www.speedyshare.com/upload.php\");\n        request.setFile(\"fileup0\", file);\n        HttpResponse response = httpClient.execute(request);\n        assertTrue(response.is2xxSuccess());\n        assertTrue(response.getResponseHeaders().size() > 0);\n        String body = IOUtils.toString(response.getResponseBody());\n        assertTrue(body.contains(\"Download link\"));\n        assertTrue(body.contains(\"Delete password\"));\n        response.close();\n    }\n", "label": 0, "substitutes": {"generateDeviceUUID": ["generateDeviceUUL", "generateDeviceUUName", "generateDevUName", "generateDevUniqueuid", "generateDeviceUuid", "generateDevUniqueName", "generateDeviceOUName", "generateDeviceOUUID", "generateDeviceUUUID", "generateDeviceUUUL", "generateDevUUID", "generateDeviceUUuid", "generateDeviceUniqueUID", "generateDevUuid", "generateDeviceUniqueName", "generateDevUUL", "generateDevUniqueUL", "generateDeviceOUuid", "generateDeviceUniqueUL", "generateDeviceOUUL", "generateDeviceUName", "generateDeviceUniqueuid", "generateDevUniqueUID"], "md5": [" md55", "mand3", " MD7", "MD2", " md512", "mm7", " MD512", "md4", "md45", " MD4", " Md5", "mand7", " MD5", " Md4", " MD55", "sha3", " md3", " Mdlet", "MD5", "md7", "MD7", "md55", "mm5", "sha2", " md2", "mdma", "MD45", "mand45", "MD3", " Md7", "md2", "md25", " md45", "sha25", "md512", " mdlet", " Md55", " mdma", " md25", " Mdma", "mdlet", " md7", " MDlet", "mand5", "sha5", " md4", " Md512", " MDma", "MD25", "md3"], "hexString": ["hexstring", "phpSite", "pexSite", " hexStr", "hexBuffer", "exstring", "hexField", " hexBuffer", "serialArray", " HexString", "textBuffer", " HexStr", " hexstring", "textField", "serialString", " HexBuffer", "serialBuffer", " HexField", "exBuffer", " hexArray", "hexStr", "serialstring", "textStr", "textString", "exString", "pexString", "exArray", " hexField", " hexSite", "hexSite", "phpString", "hexArray"], "digest": ["mdested", "mdress", "decester", "diffest", "mdate", "digested", "hashests", " digEST", "Digress", "Digested", "diffests", "hashEST", "mdest", "diffester", "DigEST", "digate", "mdEST", "hexress", "Digest", "hashester", "digests", "diger", "Digate", "diffEST", "Diger", "hexested", "decEST", " digested", "digEST", "Digester", " digester", "hasher", "hexest", "decest", "hexEST", "decests", "hashest", "mdests", "Digests", "hashate", "digester", "hashested", "mder", "digress"], "i": ["ti", "v", "ji", "I", "ic", "li", "gi", "io", "my", "is", "di", "e", "ii", "z", "in", "\u0438", "j", "phi", "ri", "mi", "si", "index", "c", "to", "n", "mu", "a", "pi", "ci", "m", "ims", "yi", "f", "o", "set", "multi", "q", "ind", "gu", "u", "x", "qi", "im", "me", "key", "ai", "ix", "sim", "l", "ip", "us", "it", "bi", "ui", "y"], "uuid": ["uniqueid", "uniqueuid", "iqId", "uniqueId", "uuuid", "iqid", "uID", "iqID", "uId", "uniqueID", "iquid", "uuID", "uid", "uuId"], "runTimeEx": ["runTimesEX", " runTimeex", "runTimeExt", " runTypeException", "runTypeEx", "runtimeEx", " runTypeex", "runTimeEX", " runTimeException", "runTimesEx", "runtimeEX", "runTimeex", " runTypeEx", "runTypeException", "runTimesex", "runtimeExt", "runTimeException", " runTimeEX", "runtimeException", "runTimesExt", "runTimesException", "runtimeex", " runTimeExt", "runTypeex"]}}
{"id1": "8515891", "id2": "7468819", "code1": "    protected String readUrl(String svnUrl) throws IOException {\n        URL url = new URL(svnUrl);\n        URLConnection uc = url.openConnection();\n        if (url.getProtocol().equals(\"https\")) {\n            String userPassword = user + \":\" + password;\n            String encoding = new sun.misc.BASE64Encoder().encode(userPassword.getBytes());\n            uc.setRequestProperty(\"Authorization\", \"Basic \" + encoding);\n        }\n        InputStream is = null;\n        String in = null;\n        try {\n            is = uc.getInputStream();\n            in = read(is);\n        } finally {\n            try {\n                is.close();\n            } catch (Exception e) {\n            }\n        }\n        return in;\n    }\n", "code2": "        public void run() {\n            try {\n                HttpURLConnection con = (HttpURLConnection) url.openConnection();\n                con.setRequestMethod(\"GET\");\n                con.setDoInput(true);\n                byte[] encodedPassword = (username + \":\" + password).getBytes();\n                BASE64Encoder encoder = new BASE64Encoder();\n                con.setRequestProperty(\"Authorization\", \"Basic \" + encoder.encode(encodedPassword));\n                InputStream is = con.getInputStream();\n                BufferedReader rd = new BufferedReader(new InputStreamReader(is));\n                String line;\n                StringBuffer response = new StringBuffer();\n                while ((line = rd.readLine()) != null) {\n                    response.append(line);\n                    response.append('\\n');\n                    lastIteraction = System.currentTimeMillis();\n                }\n                rd.close();\n                is.close();\n                con.disconnect();\n                result = response.toString();\n                finish = true;\n            } catch (Throwable e) {\n                this.e = e;\n            }\n        }\n", "label": 0, "substitutes": {"readUrl": ["getUr", "loadUr", "READUrl", "READURL", "readUr", "getURL", "READurl", "loadurl", "readurl", "loadURL", "geturl", "loadUrl", "READUr", "readURL", "getUrl"], "svnUrl": ["svneServer", "servicenurl", "svgUr", "svnsUr", "svnsStr", "svgurl", "servicensUr", "servicenUr", "servicenUrl", "servicenURL", "servicensurl", "svnStr", "svNStr", " svNStr", "svgUrl", "svgURL", "svNUr", "svneUr", " svnServer", "servicensURL", "svcUrl", "svcURL", "svcurl", "servicensUrl", "svneStr", "svnURL", "svnsUrl", " svnStr", " svNServer", "svneUrl", "svnServer", "svnurl", "svNServer", " svNUr", "svcUr", "svnsURL", "svnUr", " svNUrl", "svnsurl", "svNUrl", " svnUr", "svnsServer"], "url": ["build", "sl", "gl", "lr", "Url", "ld", "abs", "str", "nl", "mail", "char", "browser", "ls", "call", "r", "dl", "pl", "ll", "host", "https", "ssl", "link", "location", "html", "uri", "google", "base", "URL", "cl", "loc", "raw", "ur", "conn", "github", "impl", "ml", "acl", "bel", "hl", "http", "uu", "mount", "l", "uf", "ref", "org", "lb", "ul"], "uc": ["mc", "auc", "cur", "ud", "fc", "orc", "nic", "unc", "anc", "cu", "uci", "oc", "uh", "lc", "ucc", "c", "cr", "ci", "cc", "cl", "sc", "loc", "conn", "lu", "usc", "userc", "cus", "roc", "u", "nc", "con", "eu", "soc", "ub", "uu", "UC", "ac", "unic", "rc", "ux", "us", "uf", "tc", "ui", "ec", "bc", "co", "dc", "ul"], "userPassword": ["browserpassword", "managerPass", "UserPassword", "browserPassword", "managerGrant", "UserData", "browserData", " userGrant", "browserPass", "managerPassword", "userAuth", "userPass", "userData", " userAuth", "userpassword", "managerAuth", "userGrant", " userpassword", "UserGrant", "UserPass", " userData", " userPass", "Userpassword", "UserAuth"], "encoding": ["encryption", "ecryption", "ecoding", "cryption", "ecoder", "coding", "Encasing", "caling", "enasing", "Encoding", "enoding", "encasing", "Encryption", "encoder", "enoder", "coder", "ecasing", "encaling", "Encaling", "Encoder", "enryption", "ecaling"], "is": ["iss", "ic", "isl", "abs", "ism", "isa", "ists", "sis", "ows", "imp", "mis", "ais", "ri", "mi", "si", "iris", "vis", "i", "ios", "obs", "ims", "bis", "fs", "es", "as", "IS", "ms", "s", "lis", "ois", "oss", "its", "\u00eds", "isin", "ris", "im", "isf", "tis", "Is", "ins", "ir", "ip", "us", "it", "isi", "isc", "os", "iso", "ys"], "in": ["text", "ln", "kin", "pin", "v", "file", "en", "str", "print", "k", "t", "e", "cin", "edIn", "r", "IN", "inc", "i", "n", "inner", "m", "on", "f", "out", "din", "oin", "vin", "isin", "input", "read", "gin", "In", "report", "password", "ins", "rin", "sum", "login", "it", "l", "bin", "nin", "lit", "con", "inn"]}}
{"id1": "3375718", "id2": "88047", "code1": "    public void importarHistoricoDeCotacoesDoDolar(Andamento pAndamento) throws FileNotFoundException, SQLException, Exception {\n        pAndamento.delimitarIntervaloDeVariacao(0, 49);\n        WSValorSerieVO[] cotacoesPendentesDoDolar = obterCotacoesPendentesDoDolar(pAndamento);\n        pAndamento.delimitarIntervaloDeVariacao(50, 100);\n        if (cotacoesPendentesDoDolar != null && cotacoesPendentesDoDolar.length > 0) {\n            String sql = \"INSERT INTO tmp_TB_COTACAO_DOLAR(DATA, PRECO) VALUES(:DATA, :PRECO)\";\n            OraclePreparedStatement stmtDestino = (OraclePreparedStatement) conDestino.prepareStatement(sql);\n            stmtDestino.setExecuteBatch(COMANDOS_POR_LOTE);\n            int quantidadeDeRegistrosASeremImportados = cotacoesPendentesDoDolar.length;\n            try {\n                int quantidadeDeRegistrosImportados = 0;\n                int numeroDoRegistro = 0;\n                for (WSValorSerieVO cotacaoPendenteDoDolar : cotacoesPendentesDoDolar) {\n                    ++numeroDoRegistro;\n                    stmtDestino.clearParameters();\n                    int ano = cotacaoPendenteDoDolar.getAno(), mes = cotacaoPendenteDoDolar.getMes() - 1, dia = cotacaoPendenteDoDolar.getDia();\n                    Calendar calendario = Calendar.getInstance();\n                    calendario.clear();\n                    calendario.set(ano, mes, dia);\n                    java.sql.Date vDATA = new java.sql.Date(calendario.getTimeInMillis());\n                    BigDecimal vPRECO = cotacaoPendenteDoDolar.getValor();\n                    stmtDestino.setDateAtName(\"DATA\", vDATA);\n                    stmtDestino.setBigDecimalAtName(\"PRECO\", vPRECO);\n                    int contagemDasInsercoes = stmtDestino.executeUpdate();\n                    quantidadeDeRegistrosImportados++;\n                    double percentualCompleto = (double) quantidadeDeRegistrosImportados / quantidadeDeRegistrosASeremImportados * 100;\n                    pAndamento.setPercentualCompleto((int) percentualCompleto);\n                }\n                conDestino.commit();\n            } catch (Exception ex) {\n                conDestino.rollback();\n                throw ex;\n            } finally {\n                if (stmtDestino != null && (!stmtDestino.isClosed())) {\n                    stmtDestino.close();\n                }\n            }\n        }\n        pAndamento.setPercentualCompleto(100);\n    }\n", "code2": "    private static void readAndRewrite(File inFile, File outFile) throws IOException {\n        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n        Dataset ds = DcmObjectFactory.getInstance().newDataset();\n        dcmParser.setDcmHandler(ds.getDcmHandler());\n        dcmParser.parseDcmFile(null, Tags.PixelData);\n        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        System.out.println(\"reading \" + inFile + \"...\");\n        pdReader.readPixelData(false);\n        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n        ds.writeDataset(out, dcmEncParam);\n        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n        System.out.println(\"writing \" + outFile + \"...\");\n        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        pdWriter.writePixelData();\n        out.flush();\n        out.close();\n        System.out.println(\"done!\");\n    }\n", "label": 0, "substitutes": {"importarHistoricoDeCotacoesDoDolar": [" importarHistoricoDeCotacoesDoDo", " importarHistoricoDeCotacoesdoD", " importarHistoricoDeCotacoesdoS", " importarHistoricoDeCotacosDoV", " importarHistoricoDeCotacosDeV", " importarHistoricoDeCotacoesDeV", " importarHistoricoDeCotacoesDOV", " importarHistoricoDeCotacoesDoV", " importarHistoricoDeCotacosDeS", " importarHistoricoDeCotacoesDOD", " importarHistoricoDeCotacoesDoD", " importarHistoricoDeCotacosDoS", " importarHistoricoDeCotacoesdoDo", " importarHistoricoDeCotacoesDOS", " importarHistoricoDeCotacoesDeD", " importarHistoricoDeCotacoesDoS", " importarHistoricoDeCotacosDeD", " importarHistoricoDeCotacoesdoV", " importarHistoricoDeCotacosDeDo", " importarHistoricoDeCotacosDoD", " importarHistoricoDeCotacosDoDo", " importarHistoricoDeCotacoesDODo", " importarHistoricoDeCotacoesDeS", " importarHistoricoDeCotacoesDeDo"], "pAndamento": ["pAndumentology", "pAndmentao", "pOramentos", " pANDamentro", "pAndamentation", "pAndroyation", " pAndente", "pAndoddation", "pAndoddO", " pANDentro", " pAndemente", " pANDento", "pAndante", "pAndmentology", " pANDamente", "pAndmentero", "pAndumento", " pAndumento", "pAndroyos", "pAndamente", " pAndamente", "pOrmente", "pOrmentero", "pAndumentao", " pAndentO", "pAndementos", "pOrmentO", " pAndumentro", "pOrmentation", "pAndemento", "pAndmento", "pAndrollos", "pOramentology", " pANDamentO", "pAndemente", " pAndumente", " pAndamentO", " pAndamentro", " pAndementro", "pOrmento", "pOramentO", "pAndantos", " pANDamento", "pOramente", "pAndamentos", "pAndmente", "pOrmentos", "pAndroyo", "pAndamentao", "pOrmentao", "pOramento", " pANDentO", "pAndroyO", "pAndoddo", "pAndementero", "pAndamentero", "pOramentation", " pAndento", "pAndoddos", "pAndamentology", " pANDente", "pAndantero", " pAndumentO", " pAndemento", " pAndementO", "pAndrollao", "pOrmentology", " pAndentro", "pAndmentO", "pAndrollo", "pAndamentO", "pAndrollology", "pAndmentation", "pAndanto", "pAndmentos", "pOramentero", "pOramentao", "pAndumentos"], "cotacoesPendentesDoDolar": ["cotacoesPendentesDoDilar", "cotacoesPendentesDoEollar", "cotacoesPendentesDoDaur", "cotacoesPendentesDoDangular", "cotacoesPendentesDoSilar", "cotacoesPendentesDePilar", "cotacoesPendentesDODolder", "cotacoesPendentesDODolar", "cotacoesPendentesDoSolar", "cotacoesPendentesDoDoolar", "cotacoesPendentesDoDollar", "cotacoesPendentesDePolar", "cotacoesPendentesDePolid", "cotacoesPendentesDoSolars", "cotacoesPendentesDoPolver", "cotacoesPendentesDODolver", "cotacoesPendentesDoSolid", "cotacoesPendentesDonDangular", "cotacoesPendentesDoSangular", "cotacoesPendentesDoEolar", "cotacoesPendentesDonDollar", "cotacoesPendentesDoDiarian", "cotacoesPendentesDonEollar", "cotacoesPendentesDoBolder", "cotacoesPendentesDoDoars", "cotacoesPendentesDoDoangular", "cotacoesPendentesDoDsars", "cotacoesPendentesDonEaur", "cotacoesPendentesDoDapor", "cotacoesPendentesDePollar", "cotacoesPendentesDeDaur", "cotacoesPendentesDeDarian", "cotacoesPendentesDonDaur", "cotacoesPendentesDoBolars", "cotacoesPendentesDeDolid", "cotacoesPendentesDoDiollar", "cotacoesPendentesDoDoolver", "cotacoesPendentesDoDoollar", "cotacoesPendentesDoPolid", "cotacoesPendentesDoDolars", "cotacoesPendentesDoDsolder", "cotacoesPendentesDoSapor", "cotacoesPendentesDOPars", "cotacoesPendentesDoPollar", "cotacoesPendentesDoSaur", "cotacoesPendentesDoDarian", "cotacoesPendentesDoEangular", "cotacoesPendentesDoDars", "cotacoesPendentesDoDiaur", "cotacoesPendentesDODolars", "cotacoesPendentesDoSollar", "cotacoesPendentesDoBapor", "cotacoesPendentesDoDolver", "cotacoesPendentesDoDsolar", "cotacoesPendentesDoDsolars", "cotacoesPendentesDoDolid", "cotacoesPendentesDOSapor", "cotacoesPendentesDeDilar", "cotacoesPendentesDoDiolar", "cotacoesPendentesDoPars", "cotacoesPendentesDeDolar", "cotacoesPendentesDOPolar", "cotacoesPendentesDODapor", "cotacoesPendentesDoDoaur", "cotacoesPendentesDoDsapor", "cotacoesPendentesDoSarian", "cotacoesPendentesDOSolars", "cotacoesPendentesDoDsolver", "cotacoesPendentesDoPilar", "cotacoesPendentesDonEolar", "cotacoesPendentesDoDsollar", "cotacoesPendentesDOPolver", "cotacoesPendentesDonDolar", "cotacoesPendentesDoEaur", "cotacoesPendentesDOSolar", "cotacoesPendentesDOSolder", "cotacoesPendentesDeDollar", "cotacoesPendentesDoDolder", "cotacoesPendentesDOPollar", "cotacoesPendentesDODollar", "cotacoesPendentesDoSolder", "cotacoesPendentesDoBolar", "cotacoesPendentesDODars", "cotacoesPendentesDonEangular", "cotacoesPendentesDoPolar"], "sql": ["text", "seed", "sq", "spr", "description", "java", "string", "log", "binary", "orm", "file", "math", "ls", "temp", "fields", "url", "shell", "dl", "framework", "null", "query", "sol", "session", "condition", "net", "stat", "statement", "ssl", "html", "SQL", "csv", "server", "expression", "base", "params", "sd", "sb", "s", "format", "software", "conn", "q", "database", "cfg", "db", "template", "spec", "util", "serial", "http", "sys", "data", "answer", "socket", "sv", "general", "password", "virtual", "sp", "xml", "json", "script", "platform", "sun", "php", "ss", "qs", "ql", "con", "command"], "stmtDestino": ["stMTDestino", "stmtdestino", "stmtdestruction", "stmtdestinos", "stMTdestined", "stmmDestinos", "stMTDestin", "stMTdestino", "stMTStino", "stMTStination", "stMTStin", "stMTStruction", "stmtDestin", "stmtDestined", "stmmDestination", "stmtdestination", "stmtDescino", "stMTDestined", "stmmDestino", "stmtDescination", "stMTdestin", "stMTdestination", "stmtStruction", "stmmdestin", "stmtStINO", "stmtdestin", "stmmStination", "stMTDestination", "stmmdestino", "stmmdestination", "stmtdestined", "stmtDescin", "stmtDeclined", "stmtDeclino", "stmtStino", "stmtDestinos", "stmtdestINO", "stmmStin", "stmtStination", "stmtDescruction", "stmmStino", "stmmDestINO", "stmtDeclination", "stmtDestruction", "stMTDestruction", "stmtDestination", "stmtDestINO", "stmmdestinos", "stmtDeclin", "stmmStINO", "stmtStin", "stmtStinos", "stmmDestin"], "quantidadeDeRegistrosASeremImportados": ["quantidadeDeRegistrosASeremExportadas", "quantidadeDeRegistrosASeremimportados", "quantidadeDeRegistrosASeremsPortados", "quantidadeDeRegistrosASeremsImportances", "quantidadeDeRegistrosASeremPortados", "quantidadeDeRegistrosASeremimportances", "quantidadeDeRegistrosASeremsImportables", "quantidadeDeRegistrosASeremimportables", "quantidadeDeRegistrosASeremExportables", "quantidadeDeRegistrosASeremsImportadas", "quantidadeDeRegistrosASeremsPortadas", "quantidadeDeRegistrosASeremsPortances", "quantidadeDeRegistrosASeremImportadas", "quantidadeDeRegistrosASeremPortances", "quantidadeDeRegistrosASeremsPortables", "quantidadeDeRegistrosASeremExportances", "quantidadeDeRegistrosASeremsImportados", "quantidadeDeRegistrosASeremPortadas", "quantidadeDeRegistrosASeremImportances", "quantidadeDeRegistrosASeremImportables", "quantidadeDeRegistrosASeremExportados", "quantidadeDeRegistrosASeremPortables", "quantidadeDeRegistrosASeremimportadas"], "quantidadeDeRegistrosImportados": ["quantidadeDeRegistrosPortances", "quantidadeDeRegistrosRestants", "quantidadeDeRegistrosRestances", "quantidadeDeRegistrosImportadas", "quantidadeDeRegistroImportances", "quantidadeDeRegistrosImportants", "quantidadeDeRegistroImportadas", "quantidadeDeRegistroImportants", "quantidadeDeRegistrosImportances", "quantidadeDeRegistrosPortados", "quantidadeDeRegistroPortants", "quantidadeDeRegistrosExportadas", "quantidadeDeRegistroPortados", "quantidadeDeRegistrosRestados", "quantidadeDeRegistroImportados", "quantidadeDeRegistrosRestadas", "quantidadeDeRegistrosExportados", "quantidadeDeRegistrosExportants", "quantidadeDeRegistrosExportances", "quantidadeDeRegistroPortances", "quantidadeDeRegistrosPortants", "quantidadeDeRegistrosPortadas", "quantidadeDeRegistroPortadas"], "numeroDoRegistro": ["numeroDoRegistsrob", "numeroDoREGistros", "numeroDoRegistsra", "numeroDoRegISTros", "numeroDoRegistarration", "numeroDoRegistsros", "numeroDoRegistarros", "numeroDoREGISTra", "numeroDoRegustro", "numeroDoRegisteredistro", "numeroDoREGistrob", "numeroDoRegistarrob", "numeroDoRegisteredestration", "numeroDoRegistarro", "numeroDoRegestra", "numeroDoRegistros", "numeroDoRegistrob", "numeroDoRegisteredestros", "numeroDoRegisteredestrob", "numeroDoRegestration", "numeroDoRegistsro", "numeroDoRegestros", "numeroDoREGISTro", "numeroDoREGISTrob", "numeroDoRegustros", "numeroDoRegisteredestro", "numeroDoRegustrob", "numeroDoRegistra", "numeroDoRegisteredistrob", "numeroDoRegestro", "numeroDoRegistration", "numeroDoRegISTro", "numeroDoREGISTros", "numeroDoRegustration", "numeroDoRegISTrob", "numeroDoRegisteredistros", "numeroDoREGistro", "numeroDoRegisteredistration", "numeroDoRegestrob", "numeroDoREGistra", "numeroDoRegISTra"], "cotacaoPendenteDoDolar": ["cotacaoPendenteDoLolar", "cotacaoPendenteDoSaur", "cotacaoPendenteDoDilar", "cotacaoPendenteDoDollar", "cotacaoPendentedoDolars", "cotacaoPendenteDoDoollar", "cotacaoPendenteDODolars", "cotacaoPendenteDODollar", "cotacaoPendenteDoVolars", "cotacaoPendenteDoLollar", "cotacaoPendentedoPolver", "cotacaoPendenteDoVolder", "cotacaoPendenteDODolder", "cotacaoPendenteDOSolar", "cotacaoPendentedoDolver", "cotacaoPendenteDoDiolver", "cotacaoPendenteDOSaur", "cotacaoPendenteDOSollar", "cotacaoPendenteDoDolars", "cotacaoPendenteDoPolars", "cotacaoPendenteDoPolver", "cotacaoPendenteDOPolar", "cotacaoPendenteDaDolar", "cotacaoPendenteDoSolar", "cotacaoPendenteDoDiolars", "cotacaoPendenteDODaur", "cotacaoPendenteDoDoolars", "cotacaoPendenteDoDoars", "cotacaoPendenteDoMilar", "cotacaoPendenteDoTolar", "cotacaoPendenteDOPilar", "cotacaoPendenteDoDolder", "cotacaoPendentedoDilar", "cotacaoPendenteDoLilar", "cotacaoPendenteDoDiolar", "cotacaoPendenteDoDoolar", "cotacaoPendenteDoTars", "cotacaoPendenteDaDiarius", "cotacaoPendenteDoTaur", "cotacaoPendenteDoDarius", "cotacaoPendenteDoSollar", "cotacaoPendenteDaDilar", "cotacaoPendenteDoDoaur", "cotacaoPendenteDoMolar", "cotacaoPendentedoPolar", "cotacaoPendenteDoTollar", "cotacaoPendenteDODars", "cotacaoPendenteDODolar", "cotacaoPendenteDaDarius", "cotacaoPendentedoDolar", "cotacaoPendentedoPolars", "cotacaoPendenteDoSars", "cotacaoPendenteDoMolars", "cotacaoPendenteDoDolver", "cotacaoPendenteDoVilar", "cotacaoPendentedoPilar", "cotacaoPendenteDoDiarius", "cotacaoPendenteDaDollar", "cotacaoPendenteDaDiollar", "cotacaoPendenteDoLarius", "cotacaoPendenteDaDiolar", "cotacaoPendenteDoDiollar", "cotacaoPendenteDoDaur", "cotacaoPendenteDoDiilar", "cotacaoPendenteDODilar", "cotacaoPendenteDoDars", "cotacaoPendenteDoPolder", "cotacaoPendenteDoPilar", "cotacaoPendenteDOSars", "cotacaoPendenteDoDoolder", "cotacaoPendenteDoSarius", "cotacaoPendenteDoPolar", "cotacaoPendenteDoDoilar", "cotacaoPendenteDOPolder", "cotacaoPendenteDoSilar", "cotacaoPendenteDoVolar", "cotacaoPendenteDaDiilar", "cotacaoPendenteDoMolder", "cotacaoPendenteDOPolars"], "ano": ["nee", " nano", "ata", "nai", "orno", "avan", "ania", "atum", "zon", "nce", "aro", "an", "una", "iano", "enna", "apo", "ino", "uto", "nia", "auto", "aco", "\u00f3", "onna", "aito", "nas", "ana", "ony", "atan", "oda", "nan", "awareness", "lane", "online", "sha", "ato", "uno", "amia", "onto", "na", "anos", "osa", "ione", "ona", "oa", "iso", "rano"], "mes": ["mys", "mens", "mx", "pps", "sis", "mot", "mits", "ls", "mas", "ems", "mis", "mi", "mos", "tes", "mol", "mares", "eters", "jas", "ims", "mate", "ming", "ves", "mor", "vers", "dis", "ses", "ms", "phys", "mouse", "mins", "xes", "mers", "me", "nes", "made", "les", "anas", "sels", "pse", "mails", "es", "ss"], "dia": ["d\u00eda", "Diza", " diana", "mia", "Diae", "bdia", "bdian", "diae", " diza", " d\u00eda", "bdiae", " dian", "Dia", "fd\u00eda", " diae", "miana", "fdian", "mian", "diana", "Dian", "fdiana", "m\u00eda", "diza", "dian", "fdia", "bdiza"], "calendario": ["alendary", "collendarie", "bookendrera", "calendedateur", "calenarie", "collendar", "bookended\u00e9r", "calendedrio", "calendararium", "alenderarium", "calended\u00e9r", "calEND\u00e9r", "collendirio", "calendedar", "calenairy", "calendirio", "collendario", "chalendiery", "calentateur", "chalendairy", "bookendedrera", "calenderarium", "calendarium", "collendrio", "calendiarie", "bookendario", "alenderario", "calendrio", "calentario", "calenderar", "calendar", "calenario", "chalendario", "calcendario", "calendiary", "collendiario", "bookendedateur", "caleniery", "calendiario", "bookendateur", "calcendarie", "calend\u00e9r", "calENDrera", "calcendiery", "calendedrera", "alenderary", "calendedarie", "calendarary", "calendrera", "calendarario", "calenderary", "calendairy", "calenderrio", "calENDario", "calendedario", "calendiarios", "calendary", "bookendedario", "calendateur", "calENDateur", "chalendarie", "calentrera", "alenderarios", "calendiar", "calenderarios", "calenderarie", "calent\u00e9r", "calendiery", "alendario", "collendiar", "calcendairy", "calendarie", "bookend\u00e9r", "calendiarium", "calendarios", "alendarios", "calenderario", "collendiarie", "calendararios", "alendarium"], "vDATA": [" vdata", "jdata", "mDATA", "avVO", "mData", "vINFO", "jData", "VVO", "vdata", "avdata", "Vdata", "jINFO", "vData", "mVO", "avDATA", "jDATA", " vINFO", "VData", "VDATA", "avData", "mdata", " vData", "VINFO", "vVO"], "vPRECO": ["vPrePO", "vGREPO", "vCONCO", "vGRECOM", "vPRECON", "vPreCON", " vPREPO", " vPreCO", "vPreCO", "vGRECON", " vPreCON", "vCONPO", "vPREPO", "vPRECOM", " vPRECON", "vCONCOM", "vPreCOM", " vPRECOM", "vGRECO", " vPreCOM", "vCONCON", " vPrePO"]}}
{"id1": "1586662", "id2": "10436471", "code1": "    int doOne(int bid, int tid, int aid, int delta) {\n        int aBalance = 0;\n        if (Conn == null) {\n            bench.incrementFailedTransactionCount();\n            return 0;\n        }\n        try {\n            if (Benchmark.prepared_stmt) {\n                pstmt1.setInt(1, delta);\n                pstmt1.setInt(2, aid);\n                pstmt1.executeUpdate();\n                pstmt1.clearWarnings();\n                pstmt2.setInt(1, aid);\n                ResultSet RS = pstmt2.executeQuery();\n                pstmt2.clearWarnings();\n                while (RS.next()) {\n                    aBalance = RS.getInt(1);\n                }\n                pstmt3.setInt(1, delta);\n                pstmt3.setInt(2, tid);\n                pstmt3.executeUpdate();\n                pstmt3.clearWarnings();\n                pstmt4.setInt(1, delta);\n                pstmt4.setInt(2, bid);\n                pstmt4.executeUpdate();\n                pstmt4.clearWarnings();\n                pstmt5.setInt(1, tid);\n                pstmt5.setInt(2, bid);\n                pstmt5.setInt(3, aid);\n                pstmt5.setInt(4, delta);\n                pstmt5.executeUpdate();\n                pstmt5.clearWarnings();\n            } else {\n                Statement Stmt = Conn.createStatement();\n                String Query = \"UPDATE accounts\";\n                Query += \" SET Abalance = Abalance + \" + delta;\n                Query += \" WHERE Aid = \" + aid;\n                int res = Stmt.executeUpdate(Query);\n                Stmt.clearWarnings();\n                Query = \"SELECT Abalance\";\n                Query += \" FROM accounts\";\n                Query += \" WHERE Aid = \" + aid;\n                ResultSet RS = Stmt.executeQuery(Query);\n                Stmt.clearWarnings();\n                while (RS.next()) {\n                    aBalance = RS.getInt(1);\n                }\n                Query = \"UPDATE tellers\";\n                Query += \" SET Tbalance = Tbalance + \" + delta;\n                Query += \" WHERE Tid = \" + tid;\n                Stmt.executeUpdate(Query);\n                Stmt.clearWarnings();\n                Query = \"UPDATE branches\";\n                Query += \" SET Bbalance = Bbalance + \" + delta;\n                Query += \" WHERE Bid = \" + bid;\n                Stmt.executeUpdate(Query);\n                Stmt.clearWarnings();\n                Query = \"INSERT INTO history(Tid, Bid, Aid, delta)\";\n                Query += \" VALUES (\";\n                Query += tid + \",\";\n                Query += bid + \",\";\n                Query += aid + \",\";\n                Query += delta + \")\";\n                Stmt.executeUpdate(Query);\n                Stmt.clearWarnings();\n                Stmt.close();\n            }\n            if (Benchmark.transactions) {\n                Conn.commit();\n            }\n            return aBalance;\n        } catch (java.lang.Exception e) {\n            if (Benchmark.verbose) {\n                System.out.println(\"Transaction failed: \" + e.getMessage());\n                e.printStackTrace();\n            }\n            bench.incrementFailedTransactionCount();\n            if (Benchmark.transactions) {\n                try {\n                    Conn.rollback();\n                } catch (SQLException e1) {\n                }\n            }\n        }\n        return 0;\n    }\n", "code2": "    @Override\n    public Cal3dModel loadModel(URL url, String skin) throws IOException, IncorrectFormatException, ParsingErrorException {\n        boolean baseURLWasNull = setBaseURLFromModelURL(url);\n        Cal3dModel model = new Cal3dModel(getFlags());\n        loadCal3dModel(getBaseURL(), url.toExternalForm(), new InputStreamReader(url.openStream()), model);\n        if (baseURLWasNull) {\n            popBaseURL();\n        }\n        return (model);\n    }\n", "label": 0, "substitutes": {"doOne": [" do1", " Do1", "doOnce", "do1", " DoApp", "DoOne", "Do1", "DoOnce", " DoOne", " doOnce", "DoApp", " doApp", " DoOnce", "doApp"], "bid": ["rid", "batch", "fed", "id", "bt", "b", "uid", "mid", "wed", "did", "bb", "sid", "hn", "bh", "buy", "sat", "bis", "bus", "fin", "base", "berry", "sb", "bs", "vid", "pid", "bm", "db", "ind", "bat", "oid", "hid", "bank", "bd", "bn", "bf", "cb", "wid", "based", "bi", "bin", "tx", "bas", "bc"], "tid": ["pId", "ttids", "intide", " tids", "Tpid", "tId", "Tidem", "ttbid", "tide", "intidem", "trid", "Tbid", " tId", "intid", "tidem", " tidem", "intId", "Tide", "tbid", "pid", " trid", "ttrid", "TId", " tide", "ppid", " tbid", "prid", "tpid", " tpid", "pids", "Tid", "tids", "ttid", "pbid"], "aid": ["aka", "ae", "card", "da", "antis", "id", "aud", "uid", "mid", "alpha", "bind", "med", "aw", "aa", "ance", "did", "ca", "ity", "lan", "auth", "iat", "bb", "sid", "authorized", "ant", "ida", "ab", "lay", "kid", "Aid", "esa", "alias", "a", "ad", "sat", "ar", "aida", "van", "sn", "ma", "dd", "ta", "ard", "vid", "hd", "pid", "acc", "ident", "activity", "oid", "aic", "bank", "sys", "am", "sha", "pa", "ac", "wan", "ay", "na", "said", "dev", "tt", "af", "ace", "ia", "ared", "cas"], "delta": ["felt", "Delt", " dota", "adelta", "sdelt", "adelt", "relta", "dapter", "Dota", "dota", "felta", "relt", "dta", "Duration", "fapter", " delt", "detime", " dacl", "delt", "duration", "sdelta", "rota", "dabid", "dacl", "sdacl", "dbid", "rta", "adetime", "fota", "Dapter", "adota", "sdota", "Dbid", "Dta", " dta", "furation", "Delta", " duration", " dapter", " dbid", " detime", "retime", "adacl"], "aBalance": ["aaTransfer", "aaAmount", "cabalance", "caBalance", " aStock", "aaBal", "aDelta", " aStatus", "eAmount", " aDelta", "ATransfer", " abalance", "aBal", "saBalance", "caDelta", "ABal", "sabalance", "aAmount", " aTransfer", "saDelta", "eBal", "caStock", "Abalance", "ABalance", "saStock", "aabalance", "aStatus", "aStock", " aBal", "eStatus", "aaStatus", "aTransfer", " aAmount", "aaBalance", "eBalance", "abalance"], "RS": ["SR", "VR", "FS", "NRS", "US", "ARS", "YS", "HS", "RB", "SS", "MR", "GS", "WS", "ILS", "HR", "GC", "ADS", "OS", "RM", "RO", "RW", "rs", "RC", "USER", "DS", "RP", "RR", "ATS", "TS", "IS", "VS", "MS", "KS", "RES", "LS", "RD", "OSS", "JS", "BS", "CS", "DR", "ERS", "ALS", "RT", "Res", "Rs", "NS", "RE", "PRES", "PS", "R"], "Stmt": ["Stmp", "Stmm", "stmp", "STmm", "StMT", " stm", "stMT", " stmt", " Stm", " Stmp", "STm", "stmt", "STMT", "STmp", " Stmm", " StMT", "Stm", "stmm", " stmp", "STmt", "stm", " stMT"], "Query": ["Wait", "Do", "Package", "Message", "Activity", "Conn", "Check", "Where", "Host", "Remote", "Code", "Body", "Format", "Find", "Test", "Unit", "Link", "Policy", "IQ", "Service", "Chain", "General", "Template", "query", "URI", "Init", "SQL", "Module", "Description", "Command", "Term", "Force", "Spec", " query", "Update", "Line", "Rule", "Exp", "Call", "Function", "Lock", "Qu", "And", "Script", "QL", "Filter", "Str", "When", "Form", "Get", "Send", "Action", "Notice", "Core", "Question", "Comment", "Size", "Statement", "Make", "Q", "Menu", "Clean", "Report", "Version", "ERY", "Event", "q", "Config", "Post", "Fix", "Request"], "res": ["val", "results", "ret", "ows", "row", "ptr", "cons", "VAL", "ress", "re", "rs", "sol", "Cons", "ns", "set", "result", "conn", "ares", "RES", "req", "vals", "rez", "rc", "Res", "rows", "cond", "resp", "resh"]}}
{"id1": "4599372", "id2": "2668634", "code1": "    @Override\n    public String readFixString(final int len) {\n        if (len < 1) {\n            return StringUtils.EMPTY;\n        }\n        final StringWriter sw = new StringWriter();\n        try {\n            IOUtils.copy(createLimitedInputStream(len), sw, null);\n        } catch (IOException e) {\n            throw createRuntimeException(e);\n        }\n        return sw.toString();\n    }\n", "code2": "    public WebmillDeploy(String inputName, String outputName, boolean stripLoggers) throws Exception {\n        File tempFile = null;\n        JarFile jin = null;\n        JarOutputStream jout = null;\n        FileChannel srcChannel = null;\n        FileChannel dstChannel = null;\n        try {\n            String portletApplicationName = getPortletApplicationName(outputName);\n            System.out.println(\"portletApplicationName = \" + portletApplicationName);\n            tempFile = File.createTempFile(\"webmill-delpoy-\", \"\");\n            tempFile.deleteOnExit();\n            jin = new JarFile(inputName);\n            jout = new JarOutputStream(new FileOutputStream(tempFile));\n            Document webXml = null;\n            Document portletXml = null;\n            Document contextXml = null;\n            ZipEntry src;\n            InputStream source;\n            Enumeration zipEntries = jin.entries();\n            while (zipEntries.hasMoreElements()) {\n                src = (ZipEntry) zipEntries.nextElement();\n                source = jin.getInputStream(src);\n                try {\n                    String target = src.getName();\n                    if (WEB_INF_WEB_XML.equals(target)) {\n                        System.out.println(\"Found web.xml\");\n                        webXml = parseXml(source);\n                    } else if (WEB_INF_PORTLET_XML.equals(target)) {\n                        System.out.println(\"Found WEB-INF/portlet.xml\");\n                        portletXml = parseXml(source);\n                    } else if (META_INF_CONTEXT_XML.equals(target)) {\n                        System.out.println(\"Found META-INF/context.xml\");\n                        contextXml = parseXml(source);\n                    }\n                } finally {\n                    source.close();\n                }\n            }\n            if (webXml == null) {\n                throw new IllegalArgumentException(\"WEB-INF/web.xml not found\");\n            }\n            if (portletXml == null) {\n                throw new IllegalArgumentException(\"WEB-INF/portlet.xml not found\");\n            }\n            WebmillWebApplicationRewriter webRewriter = new WebmillWebApplicationRewriter(webXml);\n            webRewriter.processWebXML();\n            WebmillContextRewriter contextRewriter = new WebmillContextRewriter(contextXml, portletApplicationName);\n            contextRewriter.processContextXML();\n            jin = new JarFile(inputName);\n            zipEntries = jin.entries();\n            while (zipEntries.hasMoreElements()) {\n                src = (ZipEntry) zipEntries.nextElement();\n                source = jin.getInputStream(src);\n                try {\n                    String target = src.getName();\n                    String fullTarget = '/' + target;\n                    if (stripLoggers && target.endsWith(\".jar\") && (target.startsWith(\"WEB-INF/lib/commons-logging\") || target.startsWith(\"WEB-INF/lib/log4j\"))) {\n                        System.out.println(\"Skip logger \" + target);\n                        continue;\n                    } else {\n                        if (webRewriter.getRealPortletTldFile() != null && fullTarget.equals(webRewriter.getRealPortletTldFile())) {\n                            System.out.println(\"Skip portlet tld file \" + fullTarget);\n                            continue;\n                        } else if (target.equals(WEB_INF_WEB_XML)) {\n                            System.out.println(\"Skip web.xml file \" + target);\n                            continue;\n                        } else if (target.equals(WEB_INF_PORTLET_XML)) {\n                            System.out.println(\"Skip portlet.xml file \" + target);\n                            continue;\n                        } else if (target.equals(META_INF_CONTEXT_XML)) {\n                            System.out.println(\"Skip context.xml file \" + target);\n                            continue;\n                        }\n                        System.out.println(\"Add file \" + target);\n                    }\n                    addFile(target, source, jout);\n                } finally {\n                    source.close();\n                }\n            }\n            addFile(WEB_INF_WEB_XML, webXml, jout);\n            addFile(WEB_INF_PORTLET_XML, portletXml, jout);\n            addFile(META_INF_CONTEXT_XML, contextXml, jout);\n            System.out.println(\"Attempting to add portlet.tld to war...\");\n            InputStream is = this.getClass().getResourceAsStream(\"/org/riverock/webmill/container/tags/portlet.tld\");\n            if (is == null) {\n                System.out.println(\"Failed to find portlet.tld in classpath\");\n            } else {\n                String portletTldFile = webRewriter.getRealPortletTldFile();\n                if (portletTldFile.charAt(0) == '/') {\n                    portletTldFile = portletTldFile.substring(1);\n                }\n                System.out.println(\"Adding file \" + portletTldFile);\n                try {\n                    addFile(portletTldFile, is, jout);\n                } finally {\n                    is.close();\n                }\n            }\n            jout.close();\n            jin.close();\n            jin = null;\n            jout = null;\n            System.out.println(\"Creating war \" + outputName + \" ...\");\n            System.out.flush();\n            srcChannel = new FileInputStream(tempFile).getChannel();\n            dstChannel = new FileOutputStream(outputName).getChannel();\n            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n            srcChannel.close();\n            srcChannel = null;\n            dstChannel.close();\n            dstChannel = null;\n            tempFile.delete();\n            tempFile = null;\n            System.out.println(\"War \" + outputName + \" created\");\n            System.out.flush();\n        } finally {\n            if (srcChannel != null && srcChannel.isOpen()) {\n                try {\n                    srcChannel.close();\n                } catch (IOException e1) {\n                }\n            }\n            if (dstChannel != null && dstChannel.isOpen()) {\n                try {\n                    dstChannel.close();\n                } catch (IOException e1) {\n                }\n            }\n            if (jin != null) {\n                try {\n                    jin.close();\n                    jin = null;\n                } catch (IOException e1) {\n                }\n            }\n            if (jout != null) {\n                try {\n                    jout.close();\n                    jout = null;\n                } catch (IOException e1) {\n                }\n            }\n            if (tempFile != null && tempFile.exists()) {\n                tempFile.delete();\n            }\n        }\n    }\n", "label": 1, "substitutes": {"readFixString": ["readByteString", " readRichList", " readByteString", "readFixShort", " readByteStream", " readContentString", "readFixStream", " readContentStream", " readRichStream", " readContentList", " readContentShort", "readByteStream", " readRichShort", " readFixList", " readFixShort", " readRichString", " readFixStream", " readByteList", "readFixList", "readByteList", " readByteShort", "readByteShort"], "len": ["ln", "sl", "bytes", "fl", "elt", "en", "lp", "ld", "ell", "nl", "kl", "length", "lf", "nt", "num", "ls", "lan", "L", "inv", "lc", "dl", "n", "ll", "pl", "vec", "vol", "fin", "syn", "seq", "cl", "Len", "fn", "le", "el", "enc", "l", "coll", "pos", "lon", "size"], "sw": ["tw", "sl", "sr", "wh", "wn", "ws", "sur", "sm", "aw", "we", "rw", "sam", "sem", "sa", "sf", "sk", "sc", "sp", "Sw", "wl", "iw", "wra", "wr", "sb", "nw", "kw", "ow", "SW", "wt", "sv", "ew", "wo", "sh", "hw", "sn", "wa", "w", "rew"]}}
{"id1": "19113613", "id2": "18974466", "code1": "    public static void copy(File in, File out) throws IOException {\n        if (in.exists() && in != null && out != null) {\n            if (!out.exists()) {\n                if (in.isDirectory()) {\n                    out.mkdirs();\n                } else {\n                    out.createNewFile();\n                }\n            }\n            String source = in.isDirectory() ? \"directory\" : \"file\";\n            String target = out.isDirectory() ? \"directory\" : \"file\";\n            if (!source.equals(target)) {\n                throw new IOException(\"Can't duplicate \" + source + \" as \" + target);\n            } else {\n                if (source.equals(\"directory\")) {\n                    File[] files = in.listFiles();\n                    for (File file : files) {\n                        copy(file, new File(out, file.getName()));\n                    }\n                } else {\n                    FileChannel inCh = new FileInputStream(in).getChannel();\n                    FileChannel outCh = new FileOutputStream(out).getChannel();\n                    inCh.transferTo(0, inCh.size(), outCh);\n                }\n            }\n        }\n    }\n", "code2": "    protected boolean copyFile(File sourceFile, File destinationFile) {\n        try {\n            FileChannel srcChannel = new FileInputStream(sourceFile).getChannel();\n            FileChannel dstChannel = new FileOutputStream(destinationFile).getChannel();\n            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n            srcChannel.close();\n            dstChannel.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n            return false;\n        }\n        return true;\n    }\n", "label": 1, "substitutes": {"copy": ["cos", "proxy", "clone", "delete", "py", "Cop", "cat", "pixel", "replace", "clip", "map", "cross", "cop", "php", "cp", "to", "write", "zip", "gc", "link", "split", "crop", "slice", "paste", "init", "core", "create", "Copy", "download", "transfer", "save", "same", "move", "ip", "sync", "share", "co", "opy"], "in": ["local", "ic", "en", "id", "sin", "by", "old", "is", "inf", "up", "from", "cin", "inv", "mi", "re", "act", "IN", "inc", "i", "inner", "check", "ini", "inside", "ar", "on", "o", "iter", "net", "din", "init", "all", "isin", "input", "ind", "ie", "gin", "In", "el", "ai", "ins", "rin", "l", "it", "ir", "info", "bin", "y", "con", "inn"], "out": ["local", "os", "err", "v", "op", "at", "log", "not", "p", "OU", "en", "io", "store", "b", "t", "obj", "ot", "nt", "ion", "aos", "output", "null", "n", "to", "ex", "write", "port", "res", "inner", "gt", "on", "outer", "o", "base", "set", "net", "result", "end", "oss", "conn", "tmp", "ch", "all", "client", "over", "sys", "OUT", "one", "Out", "l", "cache", "it", "ent", "ou", "outs", "ver", "can", "y", "this", "co", "con", "w"], "source": ["local", "system", "search", "scan", "subject", "string", "sequence", "site", "parent", "sin", "ce", "src", "resource", "store", "cause", "start", "position", "service", "SOURCE", "select", "from", "attribute", "style", "si", "shell", "index", "range", "query", "ource", "inner", "scope", "relation", "title", "status", "language", "base", "prefix", "Source", "s", "format", "lower", "sp", "sql", "input", "ie", "template", "key", "finder", "use", "unit", "this", "origin", "space", "se"], "target": ["local", "module", "match", "step", "term", "that", "Target", "parent", "point", "print", "resource", "test", "t", "join", "dest", "style", "output", "other", "url", "tif", "to", "goal", "null", "query", "scope", "alias", "pattern", "arg", "gt", "link", "location", "base", "rel", "table", "root", "tree", "template", "arget", "key", "top", "token", "ARGET", "translation", "origin", "bolt"], "files": ["assets", "resources", "pieces", "features", "members", "packages", "balls", "objects", "modules", "books", "ls", "plates", "reports", "users", "jobs", "headers", "images", "states", "pages", "banks", "fs", "workers", "facts", "ports", "models", "parts", "events", "lets", "actions", "tools", "services", "lines", "items", "faces", "les", "styles", "details", "uploads", "issues", "iles", "thumbnails", "values"], "file": ["local", "item", "path", "dir", "field", "parent", "resource", "FILE", "print", "ile", "e", "be", "event", "child", "row", "current", "File", "work", "filename", "model", "rule", "fe", "word", "library", "block", "node", "relation", "port", "label", "f", "base", "job", "play", "feature", "table", "pe", "page", "tile", "user", "fp", "tree", "document", "name", "foo", "line", "data", "le", "folder", "image", "key", "el", "full", "entry", "ve"], "inCh": ["dinCor", "InChan", " inCl", "outChan", "InCh", "dinCh", "cinCr", "incCor", "inCl", "outCod", "dinSam", "incCh", "InCod", "cinCor", "cinCod", "rinCl", "rinChan", "inCor", "incSam", " inCod", "cinSam", "outch", "inCr", "inSam", "rinCh", "inch", " inChan", "InCl", "dinCr", "inChan", "cinch", " inch", "incCr", "inCod", "cinCh", "rinCod", "cinChan"], "outCh": ["newGr", "outChan", "newCod", " outCol", "outCod", "outch", " outCod", "newCh", "outCol", "newch", " outChan", "outputCod", "inch", " outch", " outGr", "newCol", "outGr", "inChan", "inCol", "outputGr", "outputCh", "outputChan", "newChan"]}}
{"id1": "15580610", "id2": "7458833", "code1": "    @Override\n    public void trainClassifier(File dir, String... args) throws Exception {\n        String[] command = new String[args.length + 3];\n        command[0] = this.getCommand();\n        System.arraycopy(args, 0, command, 1, args.length);\n        command[command.length - 2] = new File(dir, \"training-data.libsvm\").getPath();\n        command[command.length - 1] = new File(dir, this.getModelName()).getPath();\n        Process process = Runtime.getRuntime().exec(command);\n        IOUtils.copy(process.getInputStream(), System.out);\n        IOUtils.copy(process.getErrorStream(), System.err);\n        process.waitFor();\n    }\n", "code2": "    private void copyParseFileToCodeFile() throws IOException {\n        InputStream in = new FileInputStream(new File(filenameParse));\n        OutputStream out = new FileOutputStream(new File(filenameMisc));\n        byte[] buffer = new byte[1024];\n        int length;\n        while ((length = in.read(buffer)) > 0) out.write(buffer, 0, length);\n        in.close();\n        out.close();\n    }\n", "label": 1, "substitutes": {"trainClassifier": [" trainObjectizer", " trainObjectifer", " runclassifer", " trainClassizer", " runClassifier", " trainModifer", " trainObjectification", " trainClassifer", " trainclassification", " runClassifer", " trainclassizer", " runclassifier", " trainObjectifier", " trainClassification", " runclassizer", " trainclassifer", " trainModifier", " trainModizer", " trainModification", " runClassification", " trainclassifier", " runClassizer", " runclassification"], "dir": ["direct", "local", "d", "path", "module", "dr", "lib", "log", "io", "src", "disk", "output", "url", "dl", "null", "md", "base", "config", "prefix", "dd", "loc", "root", "files", "tmp", "doc", "Dir", "db", " directory", "rad", "dist", "data", "folder", "report", "done", "addr", "dm", "pkg", "ir", "directory", "pos", "grad", "DIR", "this", "wd", "div"], "command": ["text", "mac", "search", "send", "force", "function", "description", "operation", "binary", "sequence", "string", "delete", "multiple", "component", "program", "three", "event", "position", "method", "history", "relative", "control", "attribute", "button", "shell", "content", "call", "menu", "query", "connection", "pattern", "condition", "statement", "clear", "link", "volume", "initial", "base", "expression", "config", "form", "buffer", "paste", "message", "argument", "set", "sudo", "column", "Command", "power", "document", "template", "pretty", "shift", "comment", "application", "requisite", "key", "password", "chain", "and", "group", "execute", "response", "mpeg", "request", "directory", "script", "cmd", "option", "display", "archive"], "length": ["space", "build", "pieces", "factor", "number", "Length", "height", "given", "sequence", "append", "transform", "level", "count", "ength", "position", "creator", "needs", "max", "total", "limit", "ENGTH", "deep", "len", "upper", "duration", "bus", "volume", "dump", "form", "loc", "end", "diff", "power", "capacity", "last", "shift", "fleet", "load", "value", "distance", "shape", "pad", "prototype", "SIZE", "depth", "character", "available", "full", "strip", "now", "ctors", "collection", "size"], "process": ["system", "search", "function", "p", "post", "term", "channel", "complex", "component", "program", "processor", "event", "start", "method", "class", "position", "service", "in", "record", "run", "output", "network", "call", "cp", "view", "thread", "check", "node", "session", "worker", "status", "console", "link", "connect", "result", "message", "pid", "flow", "Process", "parse", "object", "processing", "load", "exec", "use", "mpeg", "pp", "handle", "request", "task", "script", "cmd", "proc", "display"]}}
{"id1": "8150996", "id2": "732800", "code1": "    private static boolean copyFile(File in, File out) {\n        boolean ok = true;\n        InputStream is = null;\n        OutputStream os = null;\n        try {\n            is = new FileInputStream(in);\n            os = new FileOutputStream(out);\n            byte[] buffer = new byte[0xFFFF];\n            for (int len; (len = is.read(buffer)) != -1; ) os.write(buffer, 0, len);\n        } catch (IOException e) {\n            System.err.println(e);\n            ok = false;\n        } finally {\n            if (is != null) {\n                try {\n                    is.close();\n                } catch (IOException e) {\n                    System.err.println(e);\n                }\n            }\n            if (os != null) {\n                try {\n                    os.close();\n                } catch (IOException e) {\n                    System.err.println(e);\n                }\n            }\n        }\n        return ok;\n    }\n", "code2": "    public BufferedWriter createOutputStream(String inFile, String outFile) throws IOException {\n        int k_blockSize = 1024;\n        int byteCount;\n        char[] buf = new char[k_blockSize];\n        File ofp = new File(outFile);\n        ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(ofp));\n        zos.setMethod(ZipOutputStream.DEFLATED);\n        OutputStreamWriter osw = new OutputStreamWriter(zos, \"ISO-8859-1\");\n        BufferedWriter bw = new BufferedWriter(osw);\n        ZipEntry zot = null;\n        File ifp = new File(inFile);\n        ZipInputStream zis = new ZipInputStream(new FileInputStream(ifp));\n        InputStreamReader isr = new InputStreamReader(zis, \"ISO-8859-1\");\n        BufferedReader br = new BufferedReader(isr);\n        ZipEntry zit = null;\n        while ((zit = zis.getNextEntry()) != null) {\n            if (zit.getName().equals(\"content.xml\")) {\n                continue;\n            }\n            zot = new ZipEntry(zit.getName());\n            zos.putNextEntry(zot);\n            while ((byteCount = br.read(buf, 0, k_blockSize)) >= 0) bw.write(buf, 0, byteCount);\n            bw.flush();\n            zos.closeEntry();\n        }\n        zos.putNextEntry(new ZipEntry(\"content.xml\"));\n        bw.flush();\n        osw = new OutputStreamWriter(zos, \"UTF8\");\n        bw = new BufferedWriter(osw);\n        return bw;\n    }\n", "label": 1, "substitutes": {"copyFile": ["cpDir", " dupChannel", " copyStream", "CopyDir", "cpStream", " copyDir", "CopyFile", " dupStream", "cpFile", "CopyChannel", " dupFile", " copyChannel", " dupDir", "CopyStream", "cpChannel"], "in": ["v", "ic", "file", "en", "by", "id", "b", "old", "inf", "cin", "from", "r", "IN", "n", "i", "inc", "on", "as", "s", "din", "init", "ch", "doc", " input", "input", "isin", "vin", "ind", "gin", "source", "In", "or", "el", "ins", "rin", "l", "it", "con", "inn"], "out": ["v", "at", "p", "io", "b", "po", "t", "obj", "ot", "nt", "aos", "output", "null", "n", "ex", "to", "write", "gt", "ns", "o", "set", "net", "s", "oss", "ch", "OUT", "one", "Out", "l", "it", "ou", "outs", "can", "ne", "w"], "is": ["js", "iss", "isl", "abs", "ics", "isa", "eps", "sis", "xs", "mis", "ais", "ri", "iris", "si", "mos", "vis", "i", "ios", "are", "cs", "obs", "ims", "bis", "fs", "ils", "es", "dis", "ans", "atis", "IS", "ms", "iter", "s", "bs", "lis", "icks", "init", "its", "ois", "isin", "ie", "ind", "ris", "ains", "sys", "ns", "im", "tis", "Is", "ins", "nis", "ir", "it", "ip", "us", "isal", "isi", "isc", "ires", "iso", "ys"], "os": ["js", "ks", "cos", "oses", "bos", "oos", "oes", "vs", "des", "io", "ost", "eps", "ws", "ot", "mot", "ox", "OS", "aos", "ows", "ls", "gs", "mos", "ts", "ols", "ios", "cs", "obs", "fs", "ns", "o", "es", "ros", "ens", "ms", "osi", "bs", "oss", "los", "acs", "s", "oS", "ops", "ds", "mes", "sys", "Os", "nos", "tis", "dos", "pos", "less", "css", "outs", "ss"], "buffer": ["sample", "batch", "number", "binary", "sequence", "variable", "append", "bar", "print", "length", "event", "bridge", "stack", "phrase", "stroke", "button", "view", "word", "block", "mem", "initial", "base", "reason", "iter", "table", "message", "buff", "paste", "padding", "tree", "frame", "template", "document", "comment", "source", "memory", "pad", "window", "cache", "buf", "Buffer", "temp", "display", "command"], "len": [" length", "ln", "err", "val", "gl", "sl", "fl", "et", "elt", "en", "ld", "li", "length", "lf", "e", "t", " el", "nt", "z", "count", "num", "no", "ls", "lan", "tl", "L", "n", "ll", "fin", "rel", "seq", "end", "cap", "all", "Len", "ind", "un", "yn", "lim", "hl", " le", " l", "le", " clen", "el", "wid", "l", "coll", "pos", "del", "els", "lon", "full", "body", "size"], "ok": ["ack", "dec", " good", "clean", "ko", "k", " Ok", "ak", "ot", "up", "msg", "arc", "ook", "ol", "bo", "good", "boot", "check", "ll", "cs", "ik", "status", "OK", "valid", "md", "f", "sk", "ms", "comp", "Ok", "app", "ck", "oh", "og", "iro", "ch", "req", "u", " okay", "ku", "ready", "kok", "rc", "coll", "yes", "ocr", "it", "state", "full", "y", "oc", "par", "quick"]}}
{"id1": "8801436", "id2": "823074", "code1": "    public static void copy(File from_file, File to_file) throws IOException {\n        if (!from_file.exists()) abort(\"FileCopy: no such source file: \" + from_file.getName());\n        if (!from_file.isFile()) abort(\"FileCopy: can't copy directory: \" + from_file.getName());\n        if (!from_file.canRead()) abort(\"FileCopy: source file is unreadable: \" + from_file.getName());\n        if (to_file.isDirectory()) to_file = new File(to_file, from_file.getName());\n        if (to_file.exists()) {\n            if (!to_file.canWrite()) abort(\"FileCopy: destination file is unwriteable: \" + to_file.getName());\n        } else {\n            String parent = to_file.getParent();\n            if (parent == null) parent = System.getProperty(\"user.dir\");\n            File dir = new File(parent);\n            if (!dir.exists()) abort(\"FileCopy: destination directory doesn't exist: \" + parent);\n            if (dir.isFile()) abort(\"FileCopy: destination is not a directory: \" + parent);\n            if (!dir.canWrite()) abort(\"FileCopy: destination directory is unwriteable: \" + parent);\n        }\n        FileInputStream from = null;\n        FileOutputStream to = null;\n        try {\n            from = new FileInputStream(from_file);\n            to = new FileOutputStream(to_file);\n            byte[] buffer = new byte[4096];\n            int bytes_read;\n            while ((bytes_read = from.read(buffer)) != -1) {\n                to.write(buffer, 0, bytes_read);\n            }\n        } finally {\n            if (from != null) try {\n                from.close();\n            } catch (IOException e) {\n                ;\n            }\n            if (to != null) try {\n                to.close();\n            } catch (IOException e) {\n            }\n        }\n    }\n", "code2": "    public void convert(File src, File dest) throws IOException {\n        InputStream in = new BufferedInputStream(new FileInputStream(src));\n        DcmParser p = pfact.newDcmParser(in);\n        Dataset ds = fact.newDataset();\n        p.setDcmHandler(ds.getDcmHandler());\n        try {\n            FileFormat format = p.detectFileFormat();\n            if (format != FileFormat.ACRNEMA_STREAM) {\n                System.out.println(\"\\n\" + src + \": not an ACRNEMA stream!\");\n                return;\n            }\n            p.parseDcmFile(format, Tags.PixelData);\n            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n                System.out.println(\"\\n\" + src + \": contains UIDs!\" + \" => probable already DICOM - do not convert\");\n                return;\n            }\n            boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n            int pxlen = p.getReadLength();\n            if (hasPixelData) {\n                if (inflate) {\n                    ds.putUS(Tags.BitsAllocated, 16);\n                    pxlen = pxlen * 4 / 3;\n                }\n                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n                    System.out.println(\"\\n\" + src + \": mismatch pixel data length!\" + \" => do not convert\");\n                    return;\n                }\n            }\n            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n            ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n            ds.putUI(Tags.SOPClassUID, classUID);\n            if (!ds.contains(Tags.NumberOfSamples)) {\n                ds.putUS(Tags.NumberOfSamples, 1);\n            }\n            if (!ds.contains(Tags.PhotometricInterpretation)) {\n                ds.putCS(Tags.PhotometricInterpretation, \"MONOCHROME2\");\n            }\n            if (fmi) {\n                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n            }\n            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n            try {\n            } finally {\n                ds.writeFile(out, encodeParam());\n                if (hasPixelData) {\n                    if (!skipGroupLen) {\n                        out.write(PXDATA_GROUPLEN);\n                        int grlen = pxlen + 8;\n                        out.write((byte) grlen);\n                        out.write((byte) (grlen >> 8));\n                        out.write((byte) (grlen >> 16));\n                        out.write((byte) (grlen >> 24));\n                    }\n                    out.write(PXDATA_TAG);\n                    out.write((byte) pxlen);\n                    out.write((byte) (pxlen >> 8));\n                    out.write((byte) (pxlen >> 16));\n                    out.write((byte) (pxlen >> 24));\n                }\n                if (inflate) {\n                    int b2, b3;\n                    for (; pxlen > 0; pxlen -= 3) {\n                        out.write(in.read());\n                        b2 = in.read();\n                        b3 = in.read();\n                        out.write(b2 & 0x0f);\n                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n                        out.write(b3 >> 4);\n                    }\n                } else {\n                    for (; pxlen > 0; --pxlen) {\n                        out.write(in.read());\n                    }\n                }\n                out.close();\n            }\n            System.out.print('.');\n        } finally {\n            in.close();\n        }\n    }\n", "label": 1, "substitutes": {"copy": ["match", "file", "clone", "delete", "io", "replace", "clip", "cop", "cut", "select", "skip", "export", "cp", "ext", "write", "zip", "close", "link", "gc", "insert", "crop", "set", "slice", "create", "change", "Copy", "download", "transfer", "load", "remove", "source", "save", "same", "ate", "move", "sync", "edit", "archive", "opy"], "from_file": ["fromjentity", "Fromptfile", "from___file", "fromtfile", "window_source", " from_link", "from2file", "windowptentity", "fromptle", "from2name", "window_FILE", " from_type", "From_time", "fromptuser", "From_le", "from_time", "from_format", "window_file", "from_name", "from_work", "from_page", " from_name", " from_files", " from_source", "from_type", "windowptFILE", "From_port", "windowptfile", "window_entity", "fromjFILE", "from_port", "from_link", "from_class", "from___page", "fromjsource", "fromptFILE", "fromptsource", "fromptentity", "from_entity", "From_user", "from_user", "from_FILE", "fromjfile", " from_local", "fromtsource", "from___format", "fromtFILE", " from_format", " from_work", "fromptfile", "from_le", "from_source", "Fromptle", "from_local", " from_port", "from2port", "fromtentity", "Fromptuser", "From_file", " from_page", "windowptsource", "from_files", " from_class"], "to_file": ["toptmodule", "toc_module", " to_web", " to_port", "to_local", "toc_link", "to_port", "to__page", "tocptmodule", "toptlink", "to_link", " to_line", "to_File", " to_time", "from_File", "to_rule", "toptFile", "to_table", "to_FILE", "toc_file", "to_web", "TO_disk", "to__link", "to_image", "tocptfile", " to_local", " to_File", "from_info", "toptfile", "tocptlink", "to_path", "to_files", "TO_link", "to_line", "toptinfo", " to_path", "TO_files", "to_page", "TO_file", "toptfiles", "TO_rule", "to_module", "to_disk", "TO_page", " to_image", "to__file", " to_FILE", " to_table", "to_time", "to_info", "from_files"], "parent": ["master", "where", "system", "path", "cmp", "tar", "file", "p", "paren", "mother", "id", "point", "part", "test", "per", "remote", "up", "position", "child", "family", "relative", "prop", "holder", "rule", "percent", "owner", "null", "parents", "port", "base", "desc", "server", "prefix", "ma", "params", "sp", "page", "root", "global", "tmp", "central", "pid", "user", "form", "gr", "list", "tree", "name", "client", "comment", "source", "folder", "and", "shape", "top", "man", "pa", "chain", "default", "ip", "peer", "Parent", "directory", "pool", "this", "unit", "temp"], "dir": ["d", "module", "dr", "cur", "file", "lib", "str", " Dir", "mod", "part", "fd", "di", "rec", "dep", "good", "red", "vol", "dim", "md", "rel", "iter", "def", "dd", "loc", "out", "tmp", "init", "Dir", "db", "ind", "tree", "cd", "dist", "folder", "cont", "addr", "or", "tr", "pkg", "coll", "ir", "directory", "del", "cmd", "DIR", "cond", "dict", "wd", "div"], "from": ["local", "so", "bound", "file", "en", "term", "by", "back", "ce", "only", "before", "From", "old", "fun", "store", "false", "st", "start", "in", "no", "left", "re", "r", "query", "check", "a", "inner", "scroll", "m", "link", "on", "normal", "base", "form", "com", "set", "initial", "out", "init", "user", "read", "ie", "con", "source", "reset", "or", "and", "self", "with", "window", "fr", "ent", "pos", "info", "empty", "origin", "stream", "entry", "se"], "to": ["so", "op", "file", "please", "that", "by", "into", "b", "t", "po", "toc", "nt", "no", "total", "output", "target", "go", "eto", "write", "pi", "title", "tto", "auto", "on", "o", "base", "table", "two", "ta", "out", "see", "tree", "client", "name", "too", "TO", "or", "top", "ato", "tom", "token", "with", "type", "tt", "news", "To", "can", "this", "co", "size"], "buffer": ["sample", "batch", "binary", "sequence", "variable", "append", "queue", "bar", "length", "char", "event", "device", "stack", "phrase", "stroke", "row", "attribute", "word", "block", "code", "base", "iter", "table", "page", "buff", "message", "raw", "paste", "database", "frame", "template", "document", "comment", "memory", "password", "window", "cache", "character", "buf", "Buffer", "temp", "stream", "command"], "bytes_read": ["bytes_Read", "bytes7used", "bytes_used", "bytes_left", "Bytes_Read", "bytes_write", "bytes7left", "Bytes_get", "bytes_get", "bytes7read", "bytes2read", "Bytes_write", "bytes2Read", "Bytes_used", "Bytes_left", "bytes2write", "Bytes_read", "bytes7write"]}}
{"id1": "20623709", "id2": "13563706", "code1": "    public Long split(File targetDirectory, String prefix, long maxUnitBases, long maxUnitEntries) throws Exception {\n        if (!targetDirectory.exists()) {\n            if (!targetDirectory.mkdirs()) throw new Exception(\"Could not create target directory \" + targetDirectory.getAbsolutePath());\n        }\n        if (!size.isUnknown() && size.getBases() < maxUnitBases && (maxUnitEntries <= 0 || size.getEntries() < maxUnitEntries)) {\n            FileInputStream fis = new FileInputStream(this);\n            FileChannel fci = fis.getChannel();\n            FileOutputStream fos = new FileOutputStream(new File(targetDirectory, prefix + \"_0\" + \".fasta\"));\n            FileChannel fco = fos.getChannel();\n            ByteBuffer buffer = ByteBuffer.allocate(64000);\n            while (fci.read(buffer) > 0) {\n                buffer.flip();\n                fco.write(buffer);\n                buffer.clear();\n            }\n            fci.close();\n            fco.close();\n            return (long) 1;\n        } else {\n            long currentBasesCount = 0;\n            long currentEntriesCount = 0;\n            int targetCount = 0;\n            FileChannel fastaChannel = new FileInputStream(this).getChannel();\n            int totalSeqCount = 0;\n            long totalResiduesCount = 0;\n            try {\n                long prevTime = System.currentTimeMillis();\n                long fastaFileSize = this.length();\n                long fastaFileReadOffset = 0L;\n                long partitionStartOffset = 0L;\n                final int bufferSize = 1024 * 1024;\n                ByteBuffer fastaBuffer = ByteBuffer.allocateDirect(bufferSize);\n                int fastaReadState = FASTAFileTokenizer.UNKNOWN;\n                for (; fastaFileReadOffset < fastaFileSize; ) {\n                    long nBytes = fastaChannel.read(fastaBuffer);\n                    if (nBytes <= 0) {\n                        fastaBuffer.limit(0);\n                        break;\n                    } else {\n                        fastaBuffer.flip();\n                        fastaFileReadOffset += nBytes;\n                    }\n                    for (; ; ) {\n                        if (!fastaBuffer.hasRemaining()) {\n                            fastaBuffer.clear();\n                            break;\n                        }\n                        int b = fastaBuffer.get();\n                        if (b == '\\r') {\n                        } else if (b == '\\n') {\n                            if (fastaReadState == FASTAFileTokenizer.DEFLINE) {\n                                fastaReadState = FASTAFileTokenizer.SEQUENCELINE;\n                            }\n                        } else if (b == '>') {\n                            if (fastaReadState == FASTAFileTokenizer.UNKNOWN) {\n                                fastaReadState = FASTAFileTokenizer.STARTDEFLINE;\n                            } else if (fastaReadState == FASTAFileTokenizer.SEQUENCELINE) {\n                                fastaReadState = FASTAFileTokenizer.STARTDEFLINE;\n                            }\n                            if (fastaReadState == FASTAFileTokenizer.STARTDEFLINE) {\n                                if (currentBasesCount >= maxUnitBases || maxUnitEntries > 0 && currentEntriesCount >= maxUnitEntries) {\n                                    fastaBuffer.position(fastaBuffer.position() - 1);\n                                    long currentTime = System.currentTimeMillis();\n                                    System.out.println(new java.util.Date() + \" Partition \" + targetCount + \" containing \" + currentEntriesCount + \" sequences and \" + currentBasesCount + \" residues ends at \" + (fastaFileReadOffset - fastaBuffer.remaining()) + \" and was created in \" + (currentTime - prevTime) + \" ms\");\n                                    prevTime = currentTime;\n                                    long partitionEndOffset = fastaFileReadOffset - fastaBuffer.remaining();\n                                    FileChannel partitionChannel = new FileOutputStream(new File(targetDirectory, prefix + \"_\" + targetCount + \".fasta\")).getChannel();\n                                    nBytes = fastaChannel.transferTo(partitionStartOffset, partitionEndOffset - partitionStartOffset, partitionChannel);\n                                    partitionChannel.force(true);\n                                    partitionChannel.close();\n                                    targetCount++;\n                                    partitionStartOffset += nBytes;\n                                    currentBasesCount = 0;\n                                    currentEntriesCount = 0;\n                                    fastaReadState = FASTAFileTokenizer.UNKNOWN;\n                                } else {\n                                    fastaReadState = FASTAFileTokenizer.DEFLINE;\n                                    currentEntriesCount++;\n                                }\n                                totalSeqCount++;\n                            }\n                        } else {\n                            if (fastaReadState == FASTAFileTokenizer.SEQUENCELINE) {\n                                totalResiduesCount++;\n                                currentBasesCount++;\n                            }\n                        }\n                    }\n                }\n                if (partitionStartOffset < fastaFileSize) {\n                    long currentTime = System.currentTimeMillis();\n                    System.out.println(new java.util.Date() + \" Partition \" + targetCount + \" containing \" + currentEntriesCount + \" sequences and \" + currentBasesCount + \" residues ends at \" + (fastaFileSize) + \" and was created in \" + (currentTime - prevTime) + \" ms\");\n                    FileChannel partitionChannel = new FileOutputStream(new File(targetDirectory, prefix + \"_\" + targetCount + \".fasta\")).getChannel();\n                    fastaChannel.transferTo(partitionStartOffset, fastaFileSize - partitionStartOffset, partitionChannel);\n                    partitionChannel.force(true);\n                    partitionChannel.close();\n                    targetCount++;\n                }\n                if (size.isUnknown()) {\n                    size.setBases(totalResiduesCount);\n                    size.setEntries(totalSeqCount);\n                }\n            } finally {\n                fastaChannel.close();\n            }\n            return (long) targetCount;\n        }\n    }\n", "code2": "    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        String selectedPage = request.getParameter(\"SelectedPage\");\n        Page page = null;\n        PortalRequest portalRequest = PortalRequest.getCurrentRequest();\n        if (selectedPage == null) {\n            try {\n                Property pageProp = Property.getProperty(\"HomePage\");\n                selectedPage = pageProp.getValue();\n            } catch (PersistentModelException e) {\n                myLogger.info(\"Page could not be found due to an exception\");\n                response.sendError(response.SC_NOT_FOUND);\n                return;\n            }\n        }\n        myLogger.info(\"Handling Page Request for Page \" + selectedPage);\n        try {\n            if (page == null) {\n                try {\n                    page = Page.getPage(Long.parseLong(selectedPage));\n                } catch (NumberFormatException e) {\n                    List<Page> possiblePage = Page.findByName(selectedPage);\n                    if (possiblePage.size() > 0) {\n                        page = possiblePage.get(0);\n                    } else {\n                        response.sendError(response.SC_NOT_FOUND);\n                        return;\n                    }\n                }\n            }\n            if (!page.isVisibleTo(portalRequest.getCurrentUser())) {\n                Property pageProp = Property.getProperty(\"HomePage\");\n                selectedPage = pageProp.getValue();\n                page = Page.getPage(Long.parseLong(selectedPage));\n            }\n            try {\n                Property property = Property.getProperty(\"LogPageRequests\");\n                if (property.getValue().toLowerCase().equals(\"true\")) {\n                    String referer = request.getHeader(\"Referer\");\n                    if (referer == null || referer.indexOf(portalRequest.getRequest().getServerName()) > 0) {\n                        referer = \" \";\n                    } else {\n                        if (referer.length() >= 200) {\n                            referer = referer.substring(0, 198);\n                        }\n                    }\n                    PageRequest.createRequest(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), portalRequest.getRequest().getRemoteAddr(), referer);\n                }\n            } catch (PersistentModelException e) {\n                myLogger.log(Level.WARNING, \"Log Page Requests property was not found.\", e);\n            }\n            if (page.isVisibleTo(portalRequest.getCurrentUser())) {\n                HttpSession session = request.getSession();\n                if (session != null) {\n                    RecentlyViewedManager rvm = (RecentlyViewedManager) session.getAttribute(\"ipoint.RecentlyViewedManager\");\n                    if (rvm == null) {\n                        rvm = new RecentlyViewedManager();\n                    }\n                    rvm.add(page);\n                    session.setAttribute(\"ipoint.RecentlyViewedManager\", rvm);\n                }\n                PageCacheEntry entry = null;\n                if (!portalRequest.isPost() && !page.isEditableBy(portalRequest.getCurrentUser())) {\n                    try {\n                        int pageCacheTime = 60000;\n                        try {\n                            Property pageCacheTimeProperty = Property.getProperty(\"PageCacheTime\");\n                            pageCacheTime = Integer.parseInt(pageCacheTimeProperty.getValue());\n                            pageCacheTime *= 1000;\n                        } catch (PersistentModelException pme) {\n                            myLogger.warning(\"Ignoring Exception when retrieving PageCacheTime property\");\n                        } catch (NumberFormatException nfe) {\n                        }\n                        entry = PageCacheEntry.find(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), pageCacheTime);\n                    } catch (PersistentModelException e) {\n                        myLogger.log(Level.WARNING, \"An error occurred finding a page cache entry\", e);\n                    }\n                }\n                response.setContentType(\"text/html\");\n                response.setHeader(\"Cache-Control\", \"no-cache\");\n                boolean processed = false;\n                if (entry != null) {\n                    String tempFile = entry.getTempFile();\n                    File file = new File(tempFile);\n                    if (file.exists() && file.isFile() && file.canRead()) {\n                        FileReader reader = new FileReader(file);\n                        BufferedReader br = new BufferedReader(reader);\n                        PrintWriter out = response.getWriter();\n                        out.write(\"<!-- Starting to output cached page in \" + portalRequest.elapsedTime() + \" ms -->\\n\");\n                        while (br.ready()) {\n                            out.write(br.readLine() + \"\\n\");\n                        }\n                        out.write(\"<!-- Cached output produced in \" + portalRequest.elapsedTime() + \" ms -->\\n\");\n                        reader.close();\n                        processed = true;\n                        portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageTotal, page.getName() + \"-\" + page.getID(), portalRequest.elapsedTime(), true);\n                    } else {\n                        entry.delete();\n                    }\n                }\n                if (!processed) {\n                    PrintWriter out = response.getWriter();\n                    out.write(\"<!-- Output produced by iPoint Portal -->\\n\");\n                    PageRenderer renderer = new PageRenderer(page);\n                    long startTime = System.currentTimeMillis();\n                    request.setAttribute(ELConstants.IPOINT_USER, portalRequest.getCurrentUser());\n                    request.setAttribute(ELConstants.IPOINT_PAGE, page);\n                    request.setAttribute(ELConstants.IPOINT_TEMPLATE, page.getTemplate());\n                    request.setAttribute(ELConstants.IPOINT_PORTAL_PROPERTIES, Property.getPropertiesMap());\n                    request.setAttribute(ELConstants.IPOINT_USER_PROPERTIES, portalRequest.getCurrentUser().getProperties());\n                    renderer.preProcess();\n                    portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PagePreProcess, page.getName() + \"-\" + page.getID(), System.currentTimeMillis() - startTime, false);\n                    long renderStart = System.currentTimeMillis();\n                    renderer.render();\n                    portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageRender, page.getName() + \"-\" + page.getID(), System.currentTimeMillis() - renderStart, false);\n                    portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageTotal, page.getName() + \"-\" + page.getID(), System.currentTimeMillis() - startTime, false);\n                    out.write(\"<!-- output produced in \" + PortalRequest.getCurrentRequest().elapsedTime() + \" ms -->\\n\");\n                    if (!page.isEditableBy(portalRequest.getCurrentUser())) {\n                        if (response instanceof CachingResponseWrapper) {\n                            CachingResponseWrapper crw = (CachingResponseWrapper) response;\n                            crw.flushBuffer();\n                            Property tempProperty = Property.getProperty(\"UploadLocation\");\n                            File tempDirectory = new File(tempProperty.getValue());\n                            if (tempDirectory.exists() && tempDirectory.canWrite()) {\n                                File file = File.createTempFile(\"iPointPage\", \".html\", tempDirectory);\n                                try {\n                                    FileWriter fw = new FileWriter(file);\n                                    fw.write(crw.getOutput());\n                                    fw.flush();\n                                    fw.close();\n                                    PageCacheEntry.create(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), file.getAbsolutePath());\n                                } catch (IOException e) {\n                                }\n                            } else {\n                                myLogger.warning(\"Can not write to directory \" + tempProperty.getValue());\n                            }\n                        }\n                    }\n                }\n            } else {\n                myLogger.info(\"Current User is Forbidden from seeing this Page\");\n                response.sendError(response.SC_FORBIDDEN);\n            }\n        } catch (PersistentModelException e) {\n            myLogger.log(Level.INFO, \"Unable to find page \" + selectedPage, e);\n            response.sendError(response.SC_NOT_FOUND);\n        } catch (PresentationException pe) {\n            pe.printStackTrace();\n            throw new ServletException(\"Error processing the page\", pe);\n        }\n    }\n", "label": 1, "substitutes": {"split": ["scan", "batch", "lock", "append", "disk", "Split", "part", "process", "map", "join", "count", "open", "scale", "copy", "write", "slice", "format", "align", "parse", "read", "upload", "seek", "transfer", "use", "unit", "sync", "share"], "targetDirectory": ["testLocation", "targetdirectory", "localDir", "baseFolder", " targetFile", " targetDir", " targetFolder", " targetMemory", "TargetFolder", "TargetDirect", " targetdirectory", "testDirectory", "localDirectory", "Targetdirectory", "TargetDirectory", "TargetMemory", "TargetLocation", "baseDirectory", "TargetDir", "baseMemory", "localdirectory", "targetDir", "targetDirect", " targetDirect", " targetLocation", "targetMemory", "baseDirect", "testDir", "testDirect", "localFile", "targetLocation", "targetFolder", "baseDir", "targetFile", "baseFile", "basedirectory"], "prefix": ["localhost", "path", "p", "fix", "tag", "PRE", "username", "pres", "filename", "index", "alias", "pattern", "FIX", "pi", "title", "status", "fixes", "pre", "uri", "base", "fixed", "size", "padding", "format", "root", "name", "template", "zero", "Pref", "key", "password", "division", "version", "ix", "pkg", "directory", "type", "this", " suffix", "command"], "maxUnitBases": ["maxUnitAliias", "maxUnitLicas", "maxUnityBages", "maxUnitReplases", "maxUnitAliases", "maxUnityBounds", "maxUnitbias", "maxUnityAliades", "maxUnityLages", "maxUnityLounds", "maxUnityBias", "maxUnitChounds", "maxUnitBias", "maxUnitBades", "maxUnitAliades", "maxUnitReplages", "maxUnitLages", "maxUnitBages", "maxUnitChicas", "maxUnityLases", "maxUnityLicas", "maxUnityBicas", "maxUnityBases", "maxUnityAliounds", "maxUnitChages", "maxUnitReplounds", "maxUnityAliias", "maxUnitReplicas", "maxUnitbades", "maxUnitLases", "maxUnitChases", "maxUnitBounds", "maxUnityAliases", "maxUnitChades", "maxUnityBades", "maxUnitBicas", "maxUnitChias", "maxUnitbases", "maxUnitAliounds", "maxUnitLounds", "maxUnitbounds"], "maxUnitEntries": ["maxUnitEntrs", "maxUnityEntrys", "maxUnityentrys", "maxUnitEntires", "maxUnitIntegriers", "maxUnitEntryires", "maxUnitErrys", "maxUnitIntegrys", "maxUnitentrs", "maxUnityentires", "maxUnitentrys", "maxUnityEntries", "maxunitEntires", "maxUnitErrs", "maxUnityEntrs", "maxUnitEntrys", "maxUnitErries", "maxUnitentires", "maxUnitEntriers", "maxUnitEntryries", "maxUnityentries", "maxUnitIntegires", "maxUnitentries", "maxUnityentrs", "maxunitEntrys", "maxUnitEntryrys", "maxunitEntries", "maxUnitIntegries", "maxUnitErires", "maxunitEntrs", "maxUnityEntires", "maxUnitEntryriers"], "fis": ["Fci", "fic", "viss", "Fii", "ifci", " fii", " fiss", " fi", "ifis", "vis", "Fic", "fiss", "fii", "Fis", " fic", "ifii", "Fiss", "vic", "ific", "fi", "vi", "Fi"], "fci": ["mcu", "cfini", "Fci", "tci", "fic", "cfico", "tii", "mci", "Fai", "Fini", " fcu", "mii", " fii", "cfis", "Fco", "fcu", "cfco", "Fic", "cfic", "fii", "Fis", " fic", "mco", "Fico", " fico", "fico", "tcu", "tco", "fini", "fai", " fai", " fini", "cfci", "cfai"], "fos": ["yos", "Fos", "fios", "faos", "yios", " fOS", "wbos", " fios", "flOS", "foss", "flos", "Faos", " faos", "ybos", " fbos", "yaos", "waos", "wios", "wos", "floss", "fOS", "FOS", "flaos", "fbos", " foss", "Foss"], "fco": ["Fci", "cdo", " foco", "pci", " fcos", "Fco", "pco", "Foco", "cco", "fcos", "Fso", "cso", "Fcos", " fdo", "Fdo", "pcos", "fdo", "toco", "fcon", "tco", "Fcon", " fso", "pso", "ccon", " fcon", "tdo", "fso", "tcos", "foco"], "buffer": ["black", "sample", "address", "function", "batch", "match", "filter", "binary", "sequence", "append", "queue", "pause", "length", "print", "char", "channel", "timeout", "event", "bridge", "position", "row", "stack", "phrase", "record", "limit", "holder", "flush", "complete", "button", "index", "library", "block", "note", "iter", "padding", "table", "message", "buff", "result", "database", "read", "document", "template", "comment", "callback", "data", "source", "reset", "memory", "window", "cache", "order", "buf", "Buffer", "temp", "entry", "command"], "currentBasesCount": ["currentbasesLength", "currentBasedCount", "currentbaseCode", "currentBadesCode", "currentbasesCode", "currentBadesLength", "currentBaseCode", "currentBasesLength", "currentbaseLength", "currentbaseCount", "currentBasedCode", "currentBasesCode", "currentbasesCount", "currentBadesCount", "currentBaseCount", "currentBaseLength", "currentBasedLength"], "currentEntriesCount": ["currentEntiesCode", "currentEntriesCode", "currentEntrsCount", "currentEntrysCode", "currentEntrysFlag", "currentEntrsFlag", "currentEntriesFlag", "currentEntiesFlag", "currentEntrysCount", "currentEntrsCode", "currentEntiesCount"], "targetCount": ["TargetCount", "TargetAmount", " targetAmount", "targetNum", "argetAmount", " targetInfo", "argetInfo", "TargetInfo", " targetNum", "targetInfo", "targetAmount", "argetCount", "argetNum", "TargetNum"], "fastaChannel": ["fastoProvider", "fastpaButton", "fastityChan", "fastoChannel", " fastoQueue", "fastpaProvider", " fastoChannel", "fastoQueue", "fastoStream", "fastaiStream", "fastoConnection", "fastityChannel", " fastaStream", "fastaiChan", "fastaiQueue", "fastityQueue", " fastaProvider", "fastpaConnection", "fastaButton", "fastoButton", "fastaQueue", "fastaChan", " fastoChan", "fastaiChannel", " fastaButton", "fastaProvider", "fastaConnection", "fastpaChannel", "fastoChan", " fastoStream", " fastaQueue", "fastaStream", " fastaChan", " fastaConnection", "fastityStream"], "totalSeqCount": ["totalSeQCount", "totalSegCounter", "totalSeQCode", "totalSeqSize", "totalSegCode", "totalSegSize", "totalSegCount", "totalSeqCounter", "totalSeqsCount", "totalSeqsCounter", "totalSeQSize", "totalSeQCounter", "totalSeqsCode", "totalSeqsSize", "totalSeqCode"], "totalResiduesCount": ["totalResiduesFlag", "totalResIduesFlag", "totalResidusFlag", "totalResiduationsCode", "totalResidueCode", "totalResIduesCount", "totalResIdueCount", "totalResidueFlag", "totalResIdueFlag", "totalResidusCode", "totalResidueCount", "totalResiduesCode", "totalResiduationsFlag", "totalResIduesCode", "totalResIdueCode", "totalResiduationsCount", "totalResidusCount"], "prevTime": ["prevThread", " previousThread", " previousTime", "parThread", " prevT", " previousT", "parTime", "prevT", " prevThread", "parT"], "fastaFileSize": ["fastaFileName", "fastATableName", "fastoFileSize", "fastoFileOwner", "fastaTableName", "fastaFileSIZE", "fastAFileLength", "fastafileSize", "fastoFileSIZE", "fastaReaderHeight", "fastATableLength", "fastaChainLength", "fastATableSize", "fastoTableLength", "fastafileLength", "fastaFileLength", "fastaFileOwner", "fastaReaderLength", "fastoFileLength", "fastaChainSize", "fastaTableOwner", "fastoTableSIZE", "fastaTableSize", "fastaReaderSize", "fastafileSIZE", "fastaChainSIZE", "fastAFileHeight", "fastaFilesName", "fastAFileName", "fastAFileSize", "fastaFileHeight", "fastoTableOwner", "fastafileOwner", "fastaChainOwner", "fastaReaderName", "fastaFilesHeight", "fastaFilesLength", "fastATableHeight", "fastaTableHeight", "fastaFilesSize", "fastoTableSize", "fastaTableLength", "fastaTableSIZE"], "fastaFileReadOffset": ["fastaPageLoadPos", "fastaFileInputOrder", "fastaPageLoadAmount", "fastaFileLoadOffset", "fastaFileLoadAmount", "fastaFileLoadLength", "fastaPageReadOffset", "fastaFileReaderoffset", "fastaFileReadPos", "fastaChainReadLocation", "fastaFileWriteAmount", "fastaFileReadOrder", "fastaFileInputLength", "fastaFileWriteLength", "fastaFileReadLength", "fastaFilesLoadAmount", "fastaFilereadAmount", "fastaFileInputAmount", "fastaFileViewPos", "fastaFileReadPosition", "fastaFileReaderLocation", "fastaFileLoadPos", "fastaFilesReadOrder", "fastaPageLoadOrder", "fastaChainCurrentoffset", "fastaChainCurrentLocation", "fastaFileLoadOrder", "fastaFileWriteOrder", "fastaPageLoadOffset", "fastaChainReadoffset", "fastaFileReadLocation", "fastaFilereadOrder", "fastaFilesLoadLength", "fastaFileInputLocation", "fastaFileCurrentoffset", "fastaFilesLoadOrder", "fastaFilesReadOffset", "fastaFileCurrentPosition", "fastaFilereadPos", "fastaFileCurrentOffset", "fastaFileViewOrder", "fastaFilesLoadOffset", "fastaFileReadoffset", "fastaFileInputOffset", "fastaFilereadOffset", "fastaFileInputoffset", "fastaChainReadOffset", "fastaPageReadAmount", "fastaFileViewAmount", "fastaFileCurrentLocation", "fastaChainReadPosition", "fastaFileViewOffset", "fastaPageReadPos", "fastaFileReadAmount", "fastaFileReaderPosition", "fastaPageReadOrder", "fastaChainCurrentPosition", "fastaFileReaderOffset", "fastaChainCurrentOffset", "fastaFilesReadAmount", "fastaFileInputPosition", "fastaFileWriteOffset", "fastaFilesReadLength"], "partitionStartOffset": ["partitonStartingPosition", "partitionDataOff", "partitionEndPoint", "partitionStartPosition", "partitionEndPosition", "partitionStartingOff", "partitionDataPoint", "partitionDataOffset", "partitionStartingPosition", "partitionStartingOffset", "partitionDataPosition", "partitionEndOff", "partitionStartPoint", "partitonStartingPoint", "partitonStartOff", "partitonStartPoint", "partitonStartOffset", "partitionStartingPoint", "partitonStartingOff", "partitionStartOff", "partitonStartPosition", "partitonStartingOffset"], "bufferSize": [" bufferCode", "bufSIZE", "BufferName", " bufferLength", "bufCode", "bufSize", "bufferSIZE", "tableSIZE", "sequenceSIZE", "BufferSize", "sequenceCode", "tableLength", "buffLength", "bufferLength", "sequenceSize", "bufferName", "tableName", "buffSize", "buffSIZE", "buffName", "bufferCode", "BufferLength", "sequenceLength", "bufLength", " bufferSIZE", "tableSize", "BufferSIZE"], "fastaBuffer": ["fastalCounter", "fastmaQueue", "fastmaBuffer", "fastalQueue", "fastaCache", "fasteBuffer", " fastaBuff", "fastaStore", " fastoBuffer", " fastaCache", "fasteBuff", "fastaQueue", "fastaMemory", "fastsaQueue", "fastuBuff", "FastaRequest", "fastuMemory", "fastmaChannel", "FastaBuffer", "fastaRequest", "FastmaBuff", "fastcaBuffer", "fastmaStore", "fastuBuffer", "fastalBuff", " fastaMemory", "FastaStore", "fastoRequest", "FastmaRequest", "FastmaBuffer", " fastaCounter", "fastasCache", "fastsaBuffer", "fastaDB", "fastanCache", "wildanRequest", "FastaBuff", "fastoBuff", "fastalBuffer", "fastoBuffer", "fastmaRequest", " fastoQueue", "fastoQueue", "fastasStore", "fastmaCache", "fastasQueue", "wildaBuffer", "fastcaCache", "fastanBuffer", " fastaBuilder", "fasteMemory", "fastasBuffer", " fastoBuff", "fastaBuilder", " fastaDB", "fastoCounter", "fastanRequest", "wildanBuffer", "FastmaStore", " fastoCounter", "fastsaBuff", "fastcaBuff", "fastuDB", " fastaQueue", "wildanCache", "fastasBuilder", "fastaBuff", "fastsaChannel", "fastasRequest", "fastcaRequest", "fastaCounter", "wildaRequest", "fastasBuff", "fastmaBuff", "fastoStore", "fastmaBuilder", "fasteDB", "wildanBuff", "fastanBuff", "wildaCache", "fastasCounter", "wildaBuff"], "fastaReadState": ["fastoReadType", "fastaReaderType", "fastaLoadSTATE", "fastaLoadType", "fastaReadType", "fastaReaderStatus", "fastoReaderSTATE", "fastaCurrentSTATE", "fastoReadState", "fastaReadSTATE", "fastaReaderSTATE", "fastaReadStatus", "fastaCurrentType", "fastaCurrentState", "fastoReadSTATE", "fastoReaderState", "fastaLoadStatus", "fastaCurrentStatus", "fastoReadStatus", "fastaReaderState", "fastoReaderStatus", "fastoReaderType", "fastaLoadState"], "nBytes": ["Nbytes", "noBlocks", " nKeys", "nrbytes", " nParts", "numBlocks", "nsbytes", "nsBytes", "NKeys", "nsWords", "nbytes", "nrItems", "noBytes", "nBlocks", "NItems", "nobytes", "NParts", "NWords", "nsParts", "numbytes", " nNs", "nKeys", "numNs", " nbytes", " nItems", "nWords", "nrBytes", "nrKeys", "noNs", "numBytes", "nParts", " nWords", "nNs", "nItems", " nBlocks", "NBytes"]}}
{"id1": "23199071", "id2": "7166270", "code1": "            @Override\n            public InputStream getInputStream() {\n                try {\n                    String url = webBrowserObject.resourcePath;\n                    File file = Utils.getLocalFile(url);\n                    if (file != null) {\n                        url = webBrowserObject.getLocalFileURL(file);\n                    }\n                    url = url.substring(0, url.lastIndexOf('/')) + \"/\" + resource;\n                    return new URL(url).openStream();\n                } catch (Exception e) {\n                }\n                return null;\n            }\n", "code2": "    protected String issueCommandToServer(String command, ChangeCapsule changeCapsule) throws IOException {\n        URLConnection urlConn = serverURL.openConnection();\n        urlConn.setDoInput(true);\n        urlConn.setDoOutput(true);\n        urlConn.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\n        OutputStreamWriter wr = new OutputStreamWriter(urlConn.getOutputStream());\n        String content = ApplyChangesServlet.PARAMETER_COMMAND + \"=\" + command;\n        content += \"&\" + ApplyChangesServlet.PARAMETER_CAPSULE + \"=\" + URLEncoder.encode(changeCapsule.toJSON(), \"UTF-8\");\n        wr.write(content);\n        wr.flush();\n        BufferedReader input = new BufferedReader(new InputStreamReader(urlConn.getInputStream()));\n        StringBuffer response = new StringBuffer();\n        String str;\n        while (null != ((str = input.readLine()))) {\n            response.append(str);\n        }\n        wr.close();\n        input.close();\n        return response.toString();\n    }\n", "label": 0, "substitutes": {"getInputStream": ["getOutputSource", "getContentBody", "getReadFile", "getInputSource", "newOutputStream", "newInputSource", "newInputFile", "getOutputBody", "getInputBody", "newOutputSource", "getReadBody", "getOutputFile", "newInputBody", "getInputFile", "getContentStream", "newOutputFile", "newOutputBody", "getContentSource", "getContentFile", "getOutputStream", "newInputStream", "getReadStream", "getReadSource"], "url": ["build", "sl", "path", "address", "lr", "err", "val", "string", "Url", "ret", "log", "str", "nl", "id", "resource", "mail", "print", "remote", "browser", "internal", "row", "ls", "r", "email", "dl", "null", "ll", "pl", "res", "host", "https", "ssl", "html", "location", "link", "f", "uri", "rel", "base", "URL", "server", "web", "api", "page", "loc", "raw", "ur", "q", "impl", "u", "hl", "http", "mount", "pp", "l", "ref", "this", "full", "ul"], "file": ["local", "path", "dir", "lib", "field", "resource", "FILE", "mail", "print", "ile", "t", "obj", "event", "File", "filename", "rule", "fe", "library", "check", "relation", "link", "language", "f", "uri", "base", "job", "tile", "table", "buffer", "page", "message", "entity", "user", "db", "fp", "name", "template", "object", "util", "source", "le", "folder", "image", "fi", "info", "ref", "full", "checked"]}}
{"id1": "3558512", "id2": "13783549", "code1": "    public void serialize(OutputStream out) throws IOException, BadIMSCPException {\n        ensureParsed();\n        ZipFilePackageParser parser = utils.getIMSCPParserFactory().createParser();\n        parser.setContentPackage(cp);\n        if (on_disk != null) on_disk.delete();\n        on_disk = createTemporaryFile();\n        parser.serialize(on_disk);\n        InputStream in = new FileInputStream(on_disk);\n        IOUtils.copy(in, out);\n    }\n", "code2": "    private static void copy(String sourceName, String destName) throws IOException {\n        File source = new File(sourceName);\n        File dest = new File(destName);\n        FileChannel in = null, out = null;\n        try {\n            in = new FileInputStream(source).getChannel();\n            out = new FileOutputStream(dest).getChannel();\n            long size = in.size();\n            MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);\n            out.write(buf);\n        } finally {\n            if (in != null) in.close();\n            if (out != null) out.close();\n        }\n    }\n", "label": 1, "substitutes": {"serialize": [" serialized", "serializer", "initialize", "Serialize", "Serialized", " serializer", "initialized", "serialization", "erializer", " serialate", "erialize", "initialze", "serialze", "serialate", "finalize", "erialized", "finalized", "serialized", "finalization", "initialization", "Serialate", "Serialization", "finalze", "Serializer", "erialate", "Serialze"], "out": ["d", "err", "v", "serv", "log", "file", "p", "OU", "sw", "io", "b", "t", "up", "aos", "output", "c", "to", "n", "i", "a", "res", "f", "o", "result", "ch", "OUT", "report", " OUT", "Out", "sum", "it", "pool", "ou", "outs", "stream", "os", "w"], "parser": ["tar", "layer", "asser", "file", "lp", "p", "tp", "magic", "ger", "part", "per", "processor", "loader", "style", "manager", "reader", "walker", "worker", "instance", "inner", "ler", "ker", "builder", "language", "base", "job", "jack", "format", "arser", "parse", "writer", "plan", "tree", "util", "bank", "aser", "rer", "password", "pkg", "Parser", "xml", "peer", "token", "proc", "er", "handler", "policy", "now", "command"], "on_disk": [" on_dis", " on_download", "on_dis", " on_disc", "On_cloud", "On2Disk", "on_file", "on_link", "on_download", " on_Disk", "On_link", "On_Disk", "On2file", "on2Disk", " on_volume", " on_file", "On_file", "on_disc", "On2disk", "On2link", "on2file", "on2disk", "On_disk", "on_Disk", "on2link", "on_cloud", "on_volume"], "in": ["en", "id", "sin", "io", "is", "inf", "cin", "from", "mi", " IN", "r", "IN", "inc", "i", "inner", "ad", "inside", "on", " din", "din", "vin", "input", "isin", "ind", "min", "gin", "In", "and", "ins", "rin", "it", "bin", "body", "ain", "inn"]}}
{"id1": "19206412", "id2": "8135072", "code1": "    public static String md5String(String str) {\n        try {\n            MessageDigest md;\n            md = MessageDigest.getInstance(\"MD5\");\n            md.update(str.getBytes());\n            byte[] hash = md.digest();\n            final char[] hexChars = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };\n            StringBuffer res = new StringBuffer();\n            for (int i = 0; i < hash.length; i++) {\n                res.append(hexChars[(0xF0 & hash[i]) >> 4]);\n                res.append(hexChars[0x0F & hash[i]]);\n            }\n            return res.toString();\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n", "code2": "    public void setImg() {\n        JFileChooser jFileChooser1 = new JFileChooser();\n        String separator = \"\";\n        if (JFileChooser.APPROVE_OPTION == jFileChooser1.showOpenDialog(this.getFatherFrame())) {\n            setPath(jFileChooser1.getSelectedFile().getPath());\n            separator = jFileChooser1.getSelectedFile().separator;\n            File dirImg = new File(\".\" + separator + \"images\");\n            if (!dirImg.exists()) {\n                dirImg.mkdir();\n            }\n            int index = getPath().lastIndexOf(separator);\n            String imgName = getPath().substring(index);\n            String newPath = dirImg + imgName;\n            try {\n                File inputFile = new File(getPath());\n                File outputFile = new File(newPath);\n                if (!inputFile.getCanonicalPath().equals(outputFile.getCanonicalPath())) {\n                    FileInputStream in = new FileInputStream(inputFile);\n                    FileOutputStream out = new FileOutputStream(outputFile);\n                    int c;\n                    while ((c = in.read()) != -1) out.write(c);\n                    in.close();\n                    out.close();\n                }\n            } catch (Exception ex) {\n                ex.printStackTrace();\n                LogHandler.log(ex.getMessage(), Level.INFO, \"LOG_MSG\", isLoggingEnabled());\n                JOptionPane.showMessageDialog(null, ex.getMessage().substring(0, Math.min(ex.getMessage().length(), getFatherPanel().MAX_DIALOG_MSG_SZ)) + \"-\" + getClass(), \"Set image\", JOptionPane.ERROR_MESSAGE);\n            }\n            setPath(newPath);\n            bckImg = new ImageIcon(getPath());\n        }\n    }\n", "label": 0, "substitutes": {"md5String": ["MD5String", "md7string", "MD4string", "md2Bytes", "md4string", "MD5Str", "md4String", "md7Str", "md2Str", "md7Bytes", "MD4String", "md2string", "md4Bytes", "md2String", "MD4Bytes", "MD5Bytes", "MD4Str", "md4Str", "md7String", "md5string", "md5Str", "md5Bytes", "MD5string"], "str": ["text", "cur", "v", "string", "ctr", "p", "txt", "print", "b", "char", "t", "st", "obj", "e", "arr", "msg", "wcs", "r", "oct", "c", "n", "vol", "cs", "piece", "cr", "Str", "br", "s", "sp", "out", "STR", "wr", "ch", "input", "name", "spec", "data", "enc", "tr", "this", "w"], "md": ["mac", "mc", "d", "dr", " man", "dir", "pd", "mt", "ld", " de", "mail", "mod", "di", " img", " ms", "sm", "nt", "nd", " cd", "red", "det", "ad", "vol", "m", "MD", "html", " sch", " dd", "def", "ms", "sd", "dd", "mand", "sha", "hd", "dig", "mm", " mac", "ind", "cd", "mk", "od", "me", "bd", "mg", " cmd", "mn", "dm", "metadata", "mp", "add", "der", "dh", "bf", "exec", "df", "man", " def", "grad", "cmd", "del", "de", "cond", " Md", " df"], "hash": ["mac", "where", "search", "sample", "match", "filter", "dash", "h", "log", "height", "show", "id", "ash", "ah", "used", "print", "char", "map", "test", "history", "stack", "hz", "total", "style", "here", "rh", "check", "node", "has", "esh", "host", "html", "result", "oh", "dig", "ch", "all", "ashes", "score", "hex", "key", "sha", "array", "Hash", "handle", "sum", "cache", "hed", "stock", "sh", "her", "flash"], "hexChars": ["hexChables", "exchars", " hexChaps", "hexCords", "hexchables", "hexchars", "hexChrs", "hexchrs", "exchrs", "hexChaps", "hexThaps", "hexCroups", "hexCHroups", " hexChroups", "exChrs", "hexThables", "hexCaps", "hexChords", " hexChables", "hexThars", "hexCHaps", "hexThrs", " hexChords", "exChars", " hexChrs", "hexCrs", "hexCars", "exChaps", "exchaps", "hexChroups", "hexchaps", "hexCHars", "hexCHords"], "res": ["js", "results", "ret", "rex", "rx", "cons", "pres", "ress", "rem", "re", "rs", "r", "pas", "ts", "red", "vol", "cs", "sol", "cr", "rel", "ps", "pers", "ber", "result", "bs", "expr", "RES", "req", "usr", "gr", "rez", "sys", "pr", "rest", "reset", "rep", "rc", "ser", "Res", "ins", "response", "us", "fr", "fresh", "next", "rus", "resp", "full", "resh"], "i": ["gravity", "ti", "v", "ji", "I", "ic", "iq", "zi", "li", "gi", "id", "my", "io", "point", "is", "di", "e", "t", "ii", "k", "in", "ki", "z", "\u0438", "j", "span", "ri", "mi", "si", "index", "c", "ini", "n", "ex", "a", "pi", "ci", "m", "cli", "uri", "o", "slice", "series", "multi", "q", "xi", "ind", "ei", "u", "major", "x", "qi", "im", "me", "ai", "ix", "sim", "us", "it", "bi", "hi", "ui", "info", "json", "y"]}}
{"id1": "10690321", "id2": "7468819", "code1": "    private static void readData() {\n        StringTokenizer sTok;\n        topSet = new HashSet();\n        sTok = new StringTokenizer(tops, \",\");\n        while (sTok.hasMoreTokens()) topSet.add(sTok.nextToken());\n        leftSet = new HashSet();\n        sTok = new StringTokenizer(lefts, \",\");\n        while (sTok.hasMoreTokens()) leftSet.add(sTok.nextToken());\n        rightSet = new HashSet();\n        sTok = new StringTokenizer(rights, \",\");\n        while (sTok.hasMoreTokens()) rightSet.add(sTok.nextToken());\n        farRightSet = new HashSet();\n        sTok = new StringTokenizer(farrights, \",\");\n        while (sTok.hasMoreTokens()) farRightSet.add(sTok.nextToken());\n        vowelSet = new HashSet();\n        sTok = new StringTokenizer(vowels, \",\");\n        while (sTok.hasMoreTokens()) {\n            String ntk;\n            vowelSet.add(ntk = sTok.nextToken());\n            if (maxEwtsVowelLength < ntk.length()) maxEwtsVowelLength = ntk.length();\n            validInputSequences.put(ntk, anyOldObjectWillDo);\n        }\n        puncSet = new HashSet();\n        sTok = new StringTokenizer(others, \",\");\n        while (sTok.hasMoreTokens()) {\n            String ntk;\n            puncSet.add(ntk = sTok.nextToken());\n            validInputSequences.put(ntk, anyOldObjectWillDo);\n        }\n        charSet = new HashSet();\n        tibSet = new HashSet();\n        sTok = new StringTokenizer(tibetanConsonants, \",\");\n        while (sTok.hasMoreTokens()) {\n            String ntk;\n            charSet.add(ntk = sTok.nextToken());\n            tibSet.add(ntk);\n            validInputSequences.put(ntk, anyOldObjectWillDo);\n        }\n        sanskritStackSet = new HashSet();\n        sTok = new StringTokenizer(otherConsonants, \",\");\n        while (sTok.hasMoreTokens()) {\n            String ntk;\n            charSet.add(ntk = sTok.nextToken());\n            sanskritStackSet.add(ntk);\n            validInputSequences.put(ntk, anyOldObjectWillDo);\n        }\n        numberSet = new HashSet();\n        sTok = new StringTokenizer(numbers, \",\");\n        while (sTok.hasMoreTokens()) {\n            String ntk;\n            charSet.add(ntk = sTok.nextToken());\n            numberSet.add(ntk);\n            validInputSequences.put(ntk, anyOldObjectWillDo);\n        }\n        charSet.add(\"Y\");\n        charSet.add(\"R\");\n        charSet.add(\"W\");\n        validInputSequences.put(\"Y\", anyOldObjectWillDo);\n        validInputSequences.put(\"R\", anyOldObjectWillDo);\n        validInputSequences.put(\"W\", anyOldObjectWillDo);\n        sTok = null;\n        top_vowels = new HashSet();\n        top_vowels.add(i_VOWEL);\n        top_vowels.add(e_VOWEL);\n        top_vowels.add(o_VOWEL);\n        top_vowels.add(ai_VOWEL);\n        top_vowels.add(au_VOWEL);\n        top_vowels.add(reverse_i_VOWEL);\n        try {\n            URL url = TibetanMachineWeb.class.getResource(fileName);\n            if (url == null) {\n                System.err.println(\"Cannot find \" + fileName + \"; aborting.\");\n                System.exit(1);\n            }\n            InputStreamReader isr = new InputStreamReader(url.openStream());\n            BufferedReader in = new BufferedReader(isr);\n            System.out.println(\"Reading Tibetan Machine Web code table \" + fileName);\n            String line;\n            boolean hashOn = false;\n            boolean isTibetan = false;\n            boolean isSanskrit = false;\n            boolean ignore = false;\n            while ((line = in.readLine()) != null) {\n                if (line.startsWith(\"<?\")) {\n                    if (line.equalsIgnoreCase(\"<?Consonants?>\")) {\n                        isSanskrit = false;\n                        isTibetan = true;\n                        hashOn = false;\n                        ignore = false;\n                        do {\n                            line = in.readLine();\n                        } while (line.startsWith(\"//\") || line.equals(\"\"));\n                    } else if (line.equalsIgnoreCase(\"<?Numbers?>\")) {\n                        isSanskrit = false;\n                        isTibetan = false;\n                        hashOn = false;\n                        ignore = false;\n                        do {\n                            line = in.readLine();\n                        } while (line.startsWith(\"//\") || line.equals(\"\"));\n                    } else if (line.equalsIgnoreCase(\"<?Vowels?>\")) {\n                        isSanskrit = false;\n                        isTibetan = false;\n                        hashOn = false;\n                        ignore = false;\n                        do {\n                            line = in.readLine();\n                        } while (line.startsWith(\"//\") || line.equals(\"\"));\n                    } else if (line.equalsIgnoreCase(\"<?Other?>\")) {\n                        isSanskrit = false;\n                        isTibetan = false;\n                        hashOn = false;\n                        ignore = false;\n                        do {\n                            line = in.readLine();\n                        } while (line.startsWith(\"//\") || line.equals(\"\"));\n                    } else if (line.equalsIgnoreCase(\"<?Input:Punctuation?>\") || line.equalsIgnoreCase(\"<?Input:Vowels?>\")) {\n                        isSanskrit = false;\n                        isTibetan = false;\n                        hashOn = true;\n                        ignore = false;\n                    } else if (line.equalsIgnoreCase(\"<?Input:Tibetan?>\")) {\n                        isSanskrit = false;\n                        isTibetan = true;\n                        hashOn = true;\n                        ignore = false;\n                    } else if (line.equalsIgnoreCase(\"<?Input:Numbers?>\")) {\n                        isSanskrit = false;\n                        isTibetan = false;\n                        hashOn = true;\n                        ignore = false;\n                    } else if (line.equalsIgnoreCase(\"<?Input:Sanskrit?>\")) {\n                        isSanskrit = true;\n                        isTibetan = false;\n                        hashOn = true;\n                        ignore = false;\n                    } else if (line.equalsIgnoreCase(\"<?ToWylie?>\")) {\n                        isSanskrit = false;\n                        isTibetan = false;\n                        hashOn = false;\n                        ignore = false;\n                    } else if (line.equalsIgnoreCase(\"<?Ignore?>\")) {\n                        isSanskrit = false;\n                        ignore = true;\n                    }\n                } else if (line.startsWith(\"//\")) {\n                    ;\n                } else if (line.equals(\"\")) {\n                    ;\n                } else {\n                    StringTokenizer st = new StringTokenizer(line, DELIMITER, true);\n                    String wylie = null;\n                    DuffCode[] duffCodes;\n                    duffCodes = new DuffCode[11];\n                    int k = 0;\n                    StringBuffer escapedToken = new StringBuffer(\"\");\n                    ThdlDebug.verify(escapedToken.length() == 0);\n                    while (st.hasMoreTokens()) {\n                        String val = getEscapedToken(st, escapedToken);\n                        if (val.equals(DELIMITER) && escapedToken.length() == 0) {\n                            k++;\n                        } else if (!val.equals(\"\")) {\n                            if (escapedToken.length() != 0) {\n                                escapedToken = new StringBuffer(\"\");\n                                ThdlDebug.verify(escapedToken.length() == 0);\n                            }\n                            switch(k) {\n                                case 0:\n                                    wylie = val;\n                                    break;\n                                case 1:\n                                    duffCodes[TM] = new DuffCode(val, false);\n                                    break;\n                                case 2:\n                                    if (!ignore) {\n                                        duffCodes[REDUCED_C] = new DuffCode(val, true);\n                                    }\n                                    break;\n                                case 3:\n                                    duffCodes[TMW] = new DuffCode(val, true);\n                                    if (null != duffCodes[TM]) {\n                                        TMtoTMW[duffCodes[TM].getFontNum() - 1][duffCodes[TM].getCharNum() - 32] = duffCodes[TMW];\n                                    }\n                                    if (null != TMWtoTM[duffCodes[TMW].getFontNum() - 1][duffCodes[TMW].getCharNum() - 32]) throw new Error(\"tibwn.ini is supposed to use the TibetanMachineWeb glyph as the unique key, but \" + val + \" appears two or more times.\");\n                                    TMWtoTM[duffCodes[TMW].getFontNum() - 1][duffCodes[TMW].getCharNum() - 32] = duffCodes[TM];\n                                    if (wylie.toLowerCase().startsWith(\"\\\\uf0\")) {\n                                        int x = Integer.parseInt(wylie.substring(\"\\\\u\".length()), 16);\n                                        ThdlDebug.verify((x >= 0xF000 && x <= 0xF0FF));\n                                        NonUnicodeToTMW[x - '\uf000'] = new DuffCode[] { duffCodes[TMW] };\n                                    }\n                                    break;\n                                case 4:\n                                case 5:\n                                case 6:\n                                case 7:\n                                case 8:\n                                case 9:\n                                    if (!ignore) {\n                                        try {\n                                            duffCodes[k - 1] = new DuffCode(val, true);\n                                        } catch (Exception e) {\n                                            System.err.println(\"Couldn't make a DuffCode out of \" + val + \"; line is \" + line + \"; k is \" + k);\n                                        }\n                                    }\n                                    break;\n                                case 10:\n                                    if (!val.equals(\"none\")) {\n                                        StringBuffer unicodeBuffer = new StringBuffer();\n                                        StringTokenizer uTok = new StringTokenizer(val, \",\");\n                                        while (uTok.hasMoreTokens()) {\n                                            String subval = uTok.nextToken();\n                                            ThdlDebug.verify(subval.length() == 4 || subval.length() == 3);\n                                            try {\n                                                int x = Integer.parseInt(subval, 16);\n                                                ThdlDebug.verify((x >= 0x0F00 && x <= 0x0FFF) || x == 0x5350 || x == 0x534D || x == 0x0020 || x == 0x00A0 || x == 0x2003);\n                                                unicodeBuffer.append((char) x);\n                                            } catch (NumberFormatException e) {\n                                                ThdlDebug.verify(false);\n                                            }\n                                        }\n                                        TMWtoUnicode[duffCodes[TMW].getFontNum() - 1][duffCodes[TMW].getCharNum() - 32] = unicodeBuffer.toString();\n                                        char ch;\n                                        if (unicodeBuffer.length() == 1 && UnicodeUtils.isInTibetanRange(ch = unicodeBuffer.charAt(0))) {\n                                            if (null != UnicodeToTMW[ch - '\u0f00'][0] && '\u0f00' != ch && '\u0f02' != ch && '\u0f03' != ch && '\u0f0b' != ch && '\u0f0e' != ch && '\u0f40' != ch && '\u0f42' != ch && '\u0f49' != ch && '\u0f4f' != ch && '\u0f51' != ch && '\u0f53' != ch && '\u0f5e' != ch && '\u0f62' != ch && '\u0f64' != ch && '\u0f67' != ch && '\u0f6a' != ch && '\u0f71' != ch && '\u0f72' != ch && '\u0f73' != ch && '\u0f74' != ch && '\u0f75' != ch && '\u0f76' != ch && '\u0f77' != ch && '\u0f78' != ch && '\u0f79' != ch && '\u0f7a' != ch && '\u0f7c' != ch && '\u0f7e' != ch && '\u0f81' != ch) {\n                                                throw new Error(\"tibwn.ini has more than one TMW fellow listed that has the Unicode \" + val + \", but it's not on the list of specially handled glyphs\");\n                                            }\n                                            UnicodeToTMW[ch - '\u0f00'][0] = duffCodes[TMW];\n                                        }\n                                    }\n                                    break;\n                                case 11:\n                                    if (!ignore) {\n                                        duffCodes[HALF_C] = new DuffCode(val, true);\n                                    }\n                                    break;\n                                case 12:\n                                    if (!ignore) {\n                                        DuffCode binduCode = new DuffCode(val, true);\n                                        binduMap.put(duffCodes[TMW], binduCode);\n                                    }\n                                    break;\n                                case 13:\n                                    throw new Error(\"tibwn.ini has only 13 columns, you tried to use a 14th column.\");\n                            }\n                        } else {\n                            if (k == 10) {\n                                throw new Error(\"needed none or some unicode; line is \" + line);\n                            }\n                        }\n                    }\n                    if (k < 10) {\n                        throw new Error(\"needed none or some unicode; line is \" + line);\n                    }\n                    if (!ignore) {\n                        if (null == wylie) throw new Error(fileName + \" has a line ^\" + DELIMITER + \" which means that no Wylie is assigned.  That isn't supported.\");\n                        if (hashOn) {\n                            tibHash.put(Manipulate.unescape(wylie), duffCodes);\n                        }\n                        if (isTibetan) {\n                            StringBuffer wylieWithoutDashes = new StringBuffer(wylie);\n                            for (int wl = 0; wl < wylieWithoutDashes.length(); wl++) {\n                                if (wylieWithoutDashes.charAt(wl) == '-') {\n                                    wylieWithoutDashes.deleteCharAt(wl);\n                                    --wl;\n                                }\n                            }\n                            tibSet.add(wylieWithoutDashes.toString());\n                        }\n                        if (isSanskrit) {\n                            sanskritStackSet.add(wylie);\n                        }\n                        if (null == duffCodes[TMW]) throw new Error(fileName + \" has a line with wylie \" + wylie + \" but no TMW; that's not allowed\");\n                        int font = duffCodes[TMW].getFontNum();\n                        int code = duffCodes[TMW].getCharNum() - 32;\n                        toHashKey[font][code] = Manipulate.unescape(wylie);\n                    }\n                }\n            }\n        } catch (IOException e) {\n            System.out.println(\"file Disappeared\");\n            ThdlDebug.noteIffyCode();\n        }\n    }\n", "code2": "        public void run() {\n            try {\n                HttpURLConnection con = (HttpURLConnection) url.openConnection();\n                con.setRequestMethod(\"GET\");\n                con.setDoInput(true);\n                byte[] encodedPassword = (username + \":\" + password).getBytes();\n                BASE64Encoder encoder = new BASE64Encoder();\n                con.setRequestProperty(\"Authorization\", \"Basic \" + encoder.encode(encodedPassword));\n                InputStream is = con.getInputStream();\n                BufferedReader rd = new BufferedReader(new InputStreamReader(is));\n                String line;\n                StringBuffer response = new StringBuffer();\n                while ((line = rd.readLine()) != null) {\n                    response.append(line);\n                    response.append('\\n');\n                    lastIteraction = System.currentTimeMillis();\n                }\n                rd.close();\n                is.close();\n                con.disconnect();\n                result = response.toString();\n                finish = true;\n            } catch (Throwable e) {\n                this.e = e;\n            }\n        }\n", "label": 1, "substitutes": {"readData": ["processArray", "readInfo", "processResults", "ReadResults", "loadResults", "ReadArray", "loadArray", "readResults", "ReadData", "processData", "loadInfo", "readArray", "ReadInfo", "processInfo", "loadData"], "sTok": ["nsIter", "gsOct", "seOK", "tesPut", "gsRex", " sSax", "dsIter", "sysIv", "rsEp", "sysVal", "newTok", "itsArch", "tsSax", " sOK", "sysIter", "gsToy", "sEp", "sPut", "nsTok", "gsEp", "itsTok", "rsOtt", " sOct", "sLex", "itsSax", " sPut", "fsRex", "gsTyp", "newNik", "dsTok", "fsOp", "tsOtt", "persIter", " sPick", "sApp", "sInst", "tTok", "nsEar", "newEp", "gsCorp", "itsEp", "jsIter", "stsTok", "tsRex", "sSocket", "SEp", "fsTok", " sPet", "sesTok", "tesAsk", "tesVal", "sysSax", " sIter", "seRap", "nsVo", " sToy", "sOtt", "nsSax", "stsPick", "usPet", "sysOK", "seTok", "sTyp", "rsTok", "tSax", "sqlIter", "atsTok", "atsLex", "qsApp", "fsEar", "gsEar", "newEar", "tsNik", " sAsk", "usOtt", "jsTok", "sPick", "tesSocket", "sNob", " sIv", "sesObj", "simpleOK", "tIter", "dsInst", " sObj", "tesTok", "sqlEar", "stsOct", "sVal", " sVo", "gsIter", "simpleIter", "nsEp", "jsOtt", "tesObj", "sqlTok", "sysTok", "tOtt", "fsCorp", "atsAsk", " sNik", "stsEp", "sIter", "SInst", " sEar", " sArch", "sPet", " sRap", "tsEp", "stsOtt", "sEar", "gsSax", "nsInst", " sApp", "sqlEp", " sEp", "gsOtt", "gsPick", " sLex", "fsOtt", "sRex", "jsSax", " sVal", "sCorp", "stsSax", "sSax", "persOtt", "simpleRap", "gsAsk", "sVo", "tsEar", " sInst", "sToy", "stsTyp", "gsNik", "persTok", "seIter", "sqlOtt", "sNik", "persOct", " sTyp", "sqlNob", "sArch", "sysAsk", "sysNik", "atsOct", "stsIter", "atsIter", "usIter", "tsCorp", "sObj", "atsOtt", "jsArch", "sqlTyp", " sSocket", "fsNob", "tesIv", "dsVo", "gsApp", "fsEp", "fsObj", " sOtt", "nsOtt", "nsAsk", "qsTok", "sOp", "qsIter", "sAsk", "usTok", "sesSocket", " sNob", "tsIter", "rsIter", "sOct", "sesPut", "SOp", "qsToy", "sRap", "jsEp", "simpleTok", "atsEp", "sIv", "tsTok", "gsTok", "atsTyp", " sOp", "atsPet", "sysVo", "STok", "sOK"], "topSet": ["topsSet", "bottomSet", " topLog", "hopScan", "rightSize", "bottomSize", "topMap", " topSize", "rightLog", " topMap", "bottomMap", "topsMap", " topScan", "hopSet", "topScan", "topSize", "topLog", "rightMap", "bottomLog", "hopMap", "topsScan"], "leftSet": ["LeftNet", "rightGroup", "oldNet", "leftGroup", "leftSum", "leftset", "Leftset", "oldSet", " leftNet", "oldset", "leftNet", "leftMap", "LeftSet", "LeftMap", "rightSum", " leftSum", "LeftSum", " leftMap", "LeftGroup", " leftGroup", " leftset", "oldMap"], "rightSet": ["rowHat", "rightHat", " rightEx", "blockPos", "blockHat", "rowGen", "rowSet", " rightGen", "leftGen", "rowEx", "blockSET", " rightPos", "blockSet", "rowPos", "rightGen", "rowSET", " rightHat", "rightPos", " rightSET", "rightEx", "rightSET", "leftEx"], "farRightSet": ["farLeftset", "farrightset", " farRightForce", "farrightSet", "farRUse", "farRoleSet", "farRightset", "farRightForce", "farrightForce", "farLeftUse", " farrightSet", " farrightForce", " farLeftSet", " farLeftUse", "farRoleForce", "farRSet", "farLeftSet", "farRightUse", " farRightset", "farRset", " farLeftset", "farrightUse", "farRoleset", " farRightUse", "farRForce", " farrightset"], "vowelSet": ["vowleBase", "vowellUse", "voxelSet", "vowellSet", "vowselMap", "vowsellMap", "voxellSet", "vowelUse", "voxellUse", "vowselSet", "vowselList", "vowelBase", "vowilSet", "vowellBase", "vowellMap", "vowelsList", "vowsellSet", "vowelsMap", "vowelsBase", "vowelMap", "vowilList", "vowelList", "vowleSet", "vowsellList", "voxelUse", "voxellBase", "vowelsUse", "voxelBase", "vowleUse", "vowellList", "vowilMap", "vowelsSet"], "ntk": ["rentkar", "cmdk", "ontkn", "ptyk", "ontkar", "otK", "rttk", "ftmk", " etik", "ntkar", "montkn", "oddr", "montk", "otke", "ntmk", "nnk", "rtik", "ntcp", "ossok", "entik", " etkw", "ontkid", "cmdK", "detK", "nextkar", "ptp", "rtkar", "mdok", "enttek", "ptyak", "nextkn", "rentp", "ptkj", "rentk", "entok", "ntkn", "rentK", "gtcp", "ntch", "ptykn", "nttek", "entk", "ontz", "ptykr", "ftkw", "ntp", "ftk", "rentks", "renty", "gtik", "ntak", "otk", "retz", "ntkr", "rtok", "onttk", "ptk", "oddkid", "ontok", "ntkj", "ntke", "retkar", "ontk", "etk", "ontch", "osskw", " syntk", "otik", "ntkw", "ntok", "nty", "ontkj", "retok", "nnik", " syntmk", "detok", "rentkj", "mdk", "otkn", "nnkar", "detkar", "rtk", "otq", "cmdok", "ntkid", "rtks", "ontK", "dettek", "ptykar", "detk", "pty", "gtkn", "ntK", "ntz", "ntik", " syntkw", "renttek", "onty", "ntq", "ontik", "cmdik", "entz", " etk", "detkid", "gtke", "ntks", "detr", "nnks", "nextk", "oddkar", "etok", "rettk", "rentok", "gtK", "ontp", "rentik", "retik", "mdik", "retch", "gtk", "etkw", "etmk", "ossk", "retk", "nextkr", "montke", "ftok", "ossik", "cmdcp", "oddk", "ptyK", "entK", "ptyok", " syntok", "ontkr", "entch", "montq", "ontr", "gtq", "nttk", "cmdak", "mdkw", "ontak", "ntr", "otcp", " etok"], "maxEwtsVowelLength": ["maxEwtsVowelslength", "maxEwtsVowylLength", "maxEwtsVoxelLen", "maxEwtsVowalDuration", "maxEwtsVowalLen", "maxEwtsVovellLen", "maxEwtsVoxelLength", "maxEwtsVoxellength", "maxEwtsVowelWidth", "maxEwtsVowylLen", "maxEwtsVovellWidth", "maxEwtsVowelllength", "maxEwtsVoxallength", "maxEwtsVowellLength", "maxEwtsVowylWidth", "maxEwtsVowalLength", "maxEwtsVowellDuration", "maxEwtsVovellLength", "maxEwtsVowallength", "maxEwtsVowellength", "maxEwtsVoxalLen", "maxEwtsVovelWidth", "maxEwtsVowelsLen", "maxEwtsVowellWidth", "maxEwtsVowalWidth", "maxEwtsVowelsLength", "maxEwtsVowellLen", "maxEwtsVovelLength", "maxEwtsVowylDuration", "maxEwtsVovelDuration", "maxEwtsVowelsWidth", "maxEwtsVoxelWidth", "maxEwtsVoxalWidth", "maxEwtsVovelLen", "maxEwtsVovellDuration", "maxEwtsVoxalLength", "maxEwtsVowelLen", "maxEwtsVowelDuration"], "puncSet": ["paucSet", "pocoSetting", "pacGroup", " pfuncGroup", "ptcSetting", " puncBase", "puncSetting", "ptcSet", "pocoSet", "puncBase", "paucGroup", "pfuncGroup", "cpunctSetting", "paucBase", "cpuncset", "puncGroup", "punctSet", "ptcset", "pfuncSet", "pacSet", " pfuncSet", "punctSetting", "cpuncSet", "cpunctSet", "cpuncSetting", "pfuncBase", "cpunctset", "punctset", " pfuncBase", "pocoset", " puncGroup", "puncset", "pacBase"], "charSet": ["charLog", "charset", " charList", "Charset", "charBase", " charBase", "characterBase", "CharacterSet", " charLog", "byteList", "CharSet", "CharacterBase", "characterSet", "byteSet", " charset", "characterLog", "byteset", "CharacterLog", "CharList", "charList"], "tibSet": [" tibiSet", "nibSet", "tobSet", "tibSum", " tibiChain", "tibiSet", " tibiSum", "tibChain", "tilibSet", "torgEn", "tiberChain", "tiberSet", "tibiChain", "nibiSet", "nibEn", "tibiEn", "tilibSum", " tibChain", "torgSet", "tibEn", " tibSum", "tiberSum", "tibiSum", "tilibChain", "nibiEn", "tobEn"], "sanskritStackSet": ["sanskraStateHash", "sanskritStackBase", "sanskritStackHash", "sanskritStateHash", "sanskritStateSet", "sanskriticHash", "sanskraStateBase", "sanskritStepSet", "sanskraStackHash", "sanskriticBase", "sanskraStateSet", "sanskritStepBase", "sanskriticSet", "sanskritStepHash", "sanskraStackSet", "sanskritStateBase", "sanskraStackBase"]}}
{"id1": "693636", "id2": "17116123", "code1": "    public static int createEmptyCart() {\n        int SHOPPING_ID = 0;\n        Connection con = null;\n        try {\n            con = getConnection();\n        } catch (java.lang.Exception ex) {\n            ex.printStackTrace();\n        }\n        try {\n            PreparedStatement insert_cart = null;\n            SHOPPING_ID = Integer.parseInt(Sequence.getSequenceNumber(\"shopping_cart\"));\n            insert_cart = con.prepareStatement(\"INSERT INTO shopping_cart (sc_id, sc_time) VALUES ( ? , NOW() )\");\n            insert_cart.setInt(1, SHOPPING_ID);\n            insert_cart.executeUpdate();\n            con.commit();\n            insert_cart.close();\n            returnConnection(con);\n        } catch (java.lang.Exception ex) {\n            try {\n                con.rollback();\n                ex.printStackTrace();\n            } catch (Exception se) {\n                System.err.println(\"Transaction rollback failed.\");\n            }\n        }\n        return SHOPPING_ID;\n    }\n", "code2": "    public void deleteAuthors() throws Exception {\n        if (proposalIds.equals(\"\") || usrIds.equals(\"\")) throw new Exception(\"No proposal or author selected.\");\n        String[] pids = proposalIds.split(\",\");\n        String[] uids = usrIds.split(\",\");\n        int pnum = pids.length;\n        int unum = uids.length;\n        if (pnum == 0 || unum == 0) throw new Exception(\"No proposal or author selected.\");\n        int i, j;\n        PreparedStatement prepStmt = null;\n        try {\n            con = database.getConnection();\n            con.setAutoCommit(false);\n            String pStr = \"delete from event where ACTION_ID='member added' AND PROPOSAL_ID=? AND SUBJECTUSR_ID=?\";\n            prepStmt = con.prepareStatement(pStr);\n            for (i = 0; i < pnum; i++) {\n                for (j = 0; j < unum; j++) {\n                    if (!uids[j].equals(userId)) {\n                        prepStmt.setString(1, pids[i]);\n                        prepStmt.setString(2, uids[j]);\n                        prepStmt.executeUpdate();\n                    }\n                }\n            }\n            con.commit();\n        } catch (Exception e) {\n            if (!con.isClosed()) {\n                con.rollback();\n                prepStmt.close();\n                con.close();\n            }\n            throw e;\n        }\n    }\n", "label": 1, "substitutes": {"createEmptyCart": ["createNewCart", " createEmptyOrder", "createEmptyTransaction", "createNewOrder", "createZeroTransaction", "createEmptyOrder", " createEmptyProduct", "createZeroCart", " createEmptyTransaction", " createNewCart", "createThisOrder", "createZeroProduct", "createThisProduct", " createNewTransaction", "createNewProduct", " createNewOrder", "createZeroOrder", "createEmptyProduct", " createNewProduct", "createThisCart", "createNewTransaction", "createThisTransaction"], "SHOPPING_ID": ["SHOPPINGITNUM", "SHOPPINGIDVID", "SHOPPINGINGIDs", "SHOPPINGPNUM", "SHOPPING_VID", "SHOPPINGIdURL", "SHOPPINGVALid", "SHOPPOT_ID", "SHOPPIP_id", "SHOPPOTINGUID", "SHOPPINGITID", "SHOPPOTINGNUM", "SHOPPIP_ID", "SHOPPINGINGId", "SHOPPINGIdID", "SHOPPINGIdVID", "SHOPPINGIDId", "SHOPPOT_NUM", "SHOPPING_Id", "SHOPPING_URL", "SHOPPTING_NAME", "SHOPPTING_VID", "SHOPPINGIDIDS", "SHOPPINGPIDs", "SHOPPINGPUID", "SHOPPAP_Id", "SHOPPAP_IDS", "SHOPPING_NAME", "SHOPPING_id", "SHOPPTINGIDID", "SHOPPOT_UID", "SHOPPINGIDID", "SHOPPINGITIDs", "SHOPPTINGIDNAME", "SHOPPING_NUM", "SHOPPTING_URL", "SHOPPING_UID", "SHOPPINGINGIDS", "SHOPPOTINGIDs", "SHOPPIP_UID", "SHOPPINGPID", "SHOPPINGIdNAME", "SHOPPAP_UID", "SHOPPING_IDS", "SHOPPINGINGUID", "SHOPPINGIDUID", "SHOPPINGVALID", "SHOPPOT_IDs", "SHOPPINGINGID", "SHOPPINGINGNUM", "SHOPPTING_ID", "SHOPPINGITUID", "SHOPPTINGIDVID", "SHOPPINGVALUID", "SHOPPINGIDURL", "SHOPPOTINGID", "SHOPPAP_ID", "SHOPPTINGIDURL", "SHOPPING_IDs", "SHOPPINGIDNAME"], "con": ["ln", "Con", "mc", "win", "cur", "cover", "cos", "fc", "dial", "en", "cat", "po", "conv", "Conn", "bon", "ca", "pg", "ctrl", "const", "cons", "conf", "ren", "open", "re", "cp", "ctx", "c", "ex", "bo", "connection", "cc", "gc", "col", "cf", "ct", "com", "connect", "conn", "cn", "ch", "db", "un", "client", "xc", "ain", "nc", "ran", "cont", "soc", "pc", "pen", "rc", "coll", "cal", "can", "pool", " conn", "co", "CON"], "insert_cart": ["entry_progress", "entry_art", "insertMemart", "insert2start", "entryMemart", "insert2progress", "insert___cart", "insert2controller", "insertMemcart", "import_cart", "import___art", "insertPTcart", "insert2art", " insert2cart", "import___cart", "insert_quant", "insert2pot", "insertThearticle", "insertPcontroller", " insert_pt", "entryMemarticle", "entryMemcart", "insert___pt", "insert_controller", "import_pt", "import_art", "insertptart", " insert_cod", "import_controller", "entryMemprogress", "insertMemarticle", " insert2art", " insert2cod", "insertTheart", " insert2start", "insertptcart", "insert2article", "insert_article", "entry_cart", "insert_cod", "insert_pot", " insert2pt", "insertPpt", "import_Cart", "insert2pt", "import___controller", "insertPTquant", "insert_Cart", "insertPTart", "insertptquant", "insert2Cart", "insertingpt", "entry_article", "import___pt", "insertMemprogress", "insert___art", "insertThecart", "insert_progress", "insert2cod", "insert_pt", " insert_start", "insertingstart", "insertptcod", "insert___controller", "insertingcart", " insert2quant", "insertPart", "insert_start", "insertTheprogress", "insert2cart", "insert_art", " insert_quant", "import_pot", "insertPcart", "insertPTcod", "insert2quant", "insertingart", " insert_art"]}}
{"id1": "16556717", "id2": "7149578", "code1": "    public static String getSHADigest(String password) {\n        String digest = null;\n        MessageDigest sha = null;\n        try {\n            sha = MessageDigest.getInstance(\"SHA-1\");\n            sha.reset();\n            sha.update(password.getBytes());\n            byte[] pwhash = sha.digest();\n            digest = \"{SHA}\" + new String(Base64.encode(pwhash));\n        } catch (NoSuchAlgorithmException nsae) {\n            CofaxToolsUtil.log(\"Algorithme SHA-1 non supporte a la creation du hashage\" + nsae + id);\n        }\n        return digest;\n    }\n", "code2": "    @Override\n    protected void parseContent(StreamLimiter streamLimiter, LanguageEnum forcedLang) throws IOException {\n        String charset = null;\n        IndexDocument sourceDocument = getSourceDocument();\n        if (sourceDocument != null && urlItemFieldEnum != null) {\n            FieldValueItem fieldValueItem = sourceDocument.getFieldValue(urlItemFieldEnum.contentTypeCharset.getName(), 0);\n            if (fieldValueItem != null) charset = fieldValueItem.getValue();\n            if (charset == null) {\n                fieldValueItem = sourceDocument.getFieldValue(urlItemFieldEnum.contentEncoding.getName(), 0);\n                if (fieldValueItem != null) charset = fieldValueItem.getValue();\n            }\n        }\n        boolean charsetWasNull = charset == null;\n        if (charsetWasNull) charset = getProperty(ClassPropertyEnum.DEFAULT_CHARSET).getValue();\n        StringWriter writer = new StringWriter();\n        IOUtils.copy(streamLimiter.getNewInputStream(), writer, charset);\n        addField(ParserFieldEnum.htmlSource, writer.toString());\n        writer.close();\n        HtmlDocumentProvider htmlProvider = findBestProvider(charset, streamLimiter);\n        if (htmlProvider == null) return;\n        addField(ParserFieldEnum.htmlProvider, htmlProvider.getName());\n        String contentType = htmlProvider.getMetaHttpEquiv(\"content-type\");\n        String contentTypeCharset = null;\n        if (contentType != null) {\n            contentTypeCharset = MimeUtils.extractContentTypeCharset(contentType);\n            if (contentTypeCharset != null && !contentTypeCharset.equals(charset)) charsetWasNull = true;\n        }\n        if (charsetWasNull) {\n            if (contentTypeCharset != null) charset = contentTypeCharset; else charset = htmlProvider.getMetaCharset();\n            if (charset != null) htmlProvider = findBestProvider(charset, streamLimiter);\n        }\n        HtmlNodeAbstract<?> rootNode = htmlProvider.getRootNode();\n        if (rootNode == null) return;\n        for (HtmlNodeAbstract<?> metaNode : htmlProvider.getMetas()) {\n            String metaName = metaNode.getAttributeText(\"name\");\n            if (metaName != null && metaName.startsWith(OPENSEARCHSERVER_FIELD)) {\n                String field = metaName.substring(OPENSEARCHSERVER_FIELD_LENGTH);\n                String[] fields = field.split(\"\\\\.\");\n                if (fields != null) {\n                    String content = metaNode.getAttributeText(\"content\");\n                    addDirectFields(fields, content);\n                }\n            }\n        }\n        addField(ParserFieldEnum.charset, charset);\n        addFieldTitle(htmlProvider.getTitle());\n        String metaRobots = null;\n        String metaDcLanguage = null;\n        String metaContentLanguage = null;\n        for (HtmlNodeAbstract<?> node : htmlProvider.getMetas()) {\n            String attr_name = node.getAttributeText(\"name\");\n            String attr_http_equiv = node.getAttributeText(\"http-equiv\");\n            if (\"keywords\".equalsIgnoreCase(attr_name)) addField(ParserFieldEnum.meta_keywords, HtmlDocumentProvider.getMetaContent(node)); else if (\"description\".equalsIgnoreCase(attr_name)) addField(ParserFieldEnum.meta_description, HtmlDocumentProvider.getMetaContent(node)); else if (\"robots\".equalsIgnoreCase(attr_name)) metaRobots = HtmlDocumentProvider.getMetaContent(node); else if (\"dc.language\".equalsIgnoreCase(attr_name)) metaDcLanguage = HtmlDocumentProvider.getMetaContent(node); else if (\"content-language\".equalsIgnoreCase(attr_http_equiv)) metaContentLanguage = HtmlDocumentProvider.getMetaContent(node);\n        }\n        boolean metaRobotsFollow = true;\n        boolean metaRobotsNoIndex = false;\n        if (metaRobots != null) {\n            metaRobots = metaRobots.toLowerCase();\n            if (metaRobots.contains(\"noindex\")) {\n                metaRobotsNoIndex = true;\n                addField(ParserFieldEnum.meta_robots, \"noindex\");\n            }\n            if (metaRobots.contains(\"nofollow\")) {\n                metaRobotsFollow = false;\n                addField(ParserFieldEnum.meta_robots, \"nofollow\");\n            }\n        }\n        UrlFilterItem[] urlFilterList = getUrlFilterList();\n        List<HtmlNodeAbstract<?>> nodes = rootNode.getAllNodes(\"a\", \"frame\");\n        IndexDocument srcDoc = getSourceDocument();\n        if (srcDoc != null && nodes != null && metaRobotsFollow) {\n            URL currentURL = htmlProvider.getBaseHref();\n            if (currentURL == null && urlItemFieldEnum != null) {\n                FieldValueItem fvi = srcDoc.getFieldValue(urlItemFieldEnum.url.getName(), 0);\n                if (fvi != null) currentURL = new URL(fvi.getValue());\n            }\n            for (HtmlNodeAbstract<?> node : nodes) {\n                String href = null;\n                String rel = null;\n                String nodeName = node.getNodeName();\n                if (\"a\".equals(nodeName)) {\n                    href = node.getAttributeText(\"href\");\n                    rel = node.getAttributeText(\"rel\");\n                } else if (\"frame\".equals(nodeName)) {\n                    href = node.getAttributeText(\"src\");\n                }\n                boolean follow = true;\n                if (rel != null) if (rel.contains(\"nofollow\")) follow = false;\n                URL newUrl = null;\n                if (href != null) if (!href.startsWith(\"javascript:\")) if (currentURL != null) newUrl = LinkUtils.getLink(currentURL, href, urlFilterList);\n                if (newUrl != null) {\n                    ParserFieldEnum field = null;\n                    if (newUrl.getHost().equalsIgnoreCase(currentURL.getHost())) {\n                        if (follow) field = ParserFieldEnum.internal_link; else field = ParserFieldEnum.internal_link_nofollow;\n                    } else {\n                        if (follow) field = ParserFieldEnum.external_link; else field = ParserFieldEnum.external_link_nofollow;\n                    }\n                    addField(field, newUrl.toExternalForm());\n                }\n            }\n        }\n        if (!metaRobotsNoIndex) {\n            nodes = rootNode.getNodes(\"html\", \"body\");\n            if (nodes == null || nodes.size() == 0) nodes = rootNode.getNodes(\"html\");\n            if (nodes != null && nodes.size() > 0) {\n                StringBuffer sb = new StringBuffer();\n                getBodyTextContent(sb, nodes.get(0), true, null);\n                addField(ParserFieldEnum.body, sb);\n            }\n        }\n        Locale lang = null;\n        String langMethod = null;\n        String[] pathHtml = { \"html\" };\n        nodes = rootNode.getNodes(pathHtml);\n        if (nodes != null && nodes.size() > 0) {\n            langMethod = \"html lang attribute\";\n            String l = nodes.get(0).getAttributeText(\"lang\");\n            if (l != null) lang = Lang.findLocaleISO639(l);\n        }\n        if (lang == null && metaContentLanguage != null) {\n            langMethod = \"meta http-equiv content-language\";\n            lang = Lang.findLocaleISO639(metaContentLanguage);\n        }\n        if (lang == null && metaDcLanguage != null) {\n            langMethod = \"meta dc.language\";\n            lang = Lang.findLocaleISO639(metaDcLanguage);\n        }\n        if (lang != null) {\n            addField(ParserFieldEnum.lang, lang.getLanguage());\n            addField(ParserFieldEnum.lang_method, langMethod);\n        } else if (!metaRobotsNoIndex) lang = langDetection(10000, ParserFieldEnum.body);\n    }\n", "label": 0, "substitutes": {"getSHADigest": ["getSHADegest", "getSHAdigse", "getSHAdigester", "getSHAdegse", "getSHADDigse", "getSHAdegests", "getSHAdegester", "getSHAdigest", "getSHADDigests", "getSHADdigse", "getSHADDigester", "getSHADegse", "getSHADigests", "getSHAdegest", "getSHADegests", "getSHADdigests", "getSHADdigest", "getSHADegester", "getSHADDigest", "getSHAdigests", "getSHADigse", "getSHADigester", "getSHADdigester"], "password": ["text", "secret", "address", "description", "string", "id", "hash", "phrase", "Password", "auth", "username", "email", "session", "pattern", "padding", "prefix", "message", "command", "database", "pass", "user", "input", "name", "sword", " Password", "data", "reset", "value", "key", "response", "token", "login", "words", "wd", "w", "word"], "digest": ["decester", "igEST", "digested", " digEST", "dighash", "Dighash", "Diggest", "Digested", "Digse", "hashEST", "mentgest", "DigEST", "dest", "Digest", " dighash", "decEST", " digested", "digEST", "Digester", "Digist", "diggest", "decgest", "mentester", "igest", "decest", "hashment", "dested", "hashest", "dEST", " digist", "digment", "dist", "igse", " digse", "digist", "digse", "mentEST", "mentest", " digment", "digester", "ighash", "hashested", "Digment"], "sha": ["mac", "lambda", "tar", "sq", "ppa", "git", "da", "ah", "ha", "SHA", "po", "sche", "alpha", "hash", "asha", "ca", "no", "ssh", "phi", "go", "shell", "si", "access", "qa", "sam", "a", "has", "pi", "ssl", "sa", "auto", "md", "api", "HA", "ma", "ta", "ya", "wal", "shared", "acl", "shi", "ho", "func", "ka", "addr", "pa", "ao", "na", "sum", "hi", "sh", "wa", "iso"], "pwhash": ["pthhash", "pshashed", "pWHhash", "pshay", "pwhhash", "pthat", "pshash", "pshhash", " pwhhash", "pWHashed", " psway", "pWHay", " pwhashed", " pwhat", " pswashed", "pthash", "pswashed", "pswat", " pswhash", "pswhash", " pwhay", "pwhay", "pWHash", " pswat", "pthashed", "pswash", "pWHat", "pwhashed", "pwhat", "psway", " pswash"]}}
{"id1": "3024987", "id2": "19006212", "code1": "    @Test\n    public void testCopy_readerToOutputStream_Encoding() throws Exception {\n        InputStream in = new ByteArrayInputStream(inData);\n        in = new YellOnCloseInputStreamTest(in);\n        Reader reader = new InputStreamReader(in, \"US-ASCII\");\n        ByteArrayOutputStream baout = new ByteArrayOutputStream();\n        OutputStream out = new YellOnFlushAndCloseOutputStreamTest(baout, false, true);\n        IOUtils.copy(reader, out, \"UTF16\");\n        byte[] bytes = baout.toByteArray();\n        bytes = new String(bytes, \"UTF16\").getBytes(\"US-ASCII\");\n        assertTrue(\"Content differs\", Arrays.equals(inData, bytes));\n    }\n", "code2": "    public void Load(String fname) throws Exception {\n        File f = null;\n        try {\n            if (\"\".equals(fname) || fname == null) throw new Exception();\n            System.out.println(\"Loading mapfile \" + fname);\n        } catch (Exception e) {\n            throw new Exception(\"File not found\");\n        }\n        aType = null;\n        fieldtype.clear();\n        creatures.clear();\n        aElement = new String(\"\");\n        content = null;\n        Ax = -1;\n        Ay = -1;\n        aTemplate = -1;\n        SAXParserFactory factory = SAXParserFactory.newInstance();\n        data_read = 0;\n        URL url = this.game.mainClass.getClassLoader().getResource(fname);\n        if (url == null) {\n            throw new Exception(\"Can't load map from : \" + fname);\n        }\n        try {\n            SAXParser parser = factory.newSAXParser();\n            parser.parse(url.openStream(), this);\n        } catch (Exception e) {\n            System.out.println(\"Can't open XML : \" + e);\n        }\n        for (int i = 0; i < fieldtype.size(); i++) {\n            System.out.println((MapField) fieldtype.get(i));\n        }\n        game.player.setpos(start_x, start_y);\n        System.out.println(\"Player starting position set\");\n        start_x = -1;\n        start_y = -1;\n        System.out.println(\"Map \\\"\" + fname + \"\\\" loaded\");\n    }\n", "label": 0, "substitutes": {"testCopy_readerToOutputStream_Encoding": ["testCopy_readerToOutputStream_encoding", "testCopy_readerToOutputStream_encoded", "testCopy_readerToOutputStream_Encending", "testCopy_readerToOutputStreamWithEncending", "testCopy_readerToOutputStreamWithDecoding", "testCopy_readerToOutputStream_Decoder", "testCopy_readerToOutputStream_Choding", "testCopy_readerToOutputStreamWithDecending", "testCopy_readerToOutputStream_encoder", "testCopy_readerToOutputStream_Encoder", "testCopy_readerToOutputStreamWithDecoder", "testCopy_readerToOutputStream_Decoded", "testCopy_readerToOutputStream_Chending", "testCopy_readerToOutputStream_Choded", "testCopy_readerToOutputStreamWithEncoder", "testCopy_readerToOutputStreamWithEncoding", "testCopy_readerToOutputStream_Encoded", "testCopy_readerToOutputStream_encending", "testCopy_readerToOutputStream_Decoding", "testCopy_readerToOutputStreamWithEncoded", "testCopy_readerToOutputStream_Choder", "testCopy_readerToOutputStream_Decending", "testCopy_readerToOutputStreamWithDecoded"], "in": ["local", "mc", "p", "sin", "is", "inf", "Input", "up", "cin", "from", "copy", "mi", " IN", "r", "act", "ini", "IN", "n", "i", "inc", "inner", "inside", "m", "as", "iter", "din", "init", "input", "isin", "ind", "read", "mm", "gin", "data", "In", "source", "cont", "ac", "ins", "rin", "l", "it", "info", "bin", "con", "inn"], "reader": ["dr", "ocker", "Larry", "file", "io", "handler", "oe", "rx", "per", "loader", "ner", "row", "phrase", "Reader", "mr", "r", "rise", "query", "ro", "red", "inner", "rot", "iterator", "iter", "buffer", "req", "writer", "input", "read", "parser", "rr", "data", "reading", "rl", "driver", "er", "rar"], "baout": ["BAout", "bain", "BAot", "boos", "cain", "beanin", "beanOut", "bares", "boOut", "haOut", "yares", "beanout", "haouts", "haout", "yain", "caout", "caOut", " baot", "oaOut", "boin", "BAin", "oaout", " bain", "baOut", "beanouts", "hain", "baouts", "BAres", "oaos", "baot", "yaout", "baos", "yaot", " bares", "oain", "caouts", "caos", "boout"], "out": ["cos", "batch", "outs", "OU", " Out", "io", "b", "t", "conv", "stable", "update", "output", "copy", " outs", " output", "bo", "to", "n", "null", "ex", "res", "auto", "gt", "outer", "o", "net", "oss", "cn", "all", " bout", "client", "sys", "con", "OUT", " OUT", "ao", "Out", " os", "cmd", "ou", "ne", "os"], "bytes": ["resources", "pieces", "cells", "pdf", "results", "outs", "binary", "des", "objects", "terms", "ings", "groups", "latest", "ites", "strings", "blocks", "comments", "bits", "gs", "tes", "Bytes", "users", "names", "reports", "pages", "units", "bps", "unks", "letters", "frames", "parts", "bs", "files", "raw", "reads", "its", "ones", "videos", "versions", "vals", "ips", "services", "data", "lines", "faces", "les", "seconds", "ies", "issues", "words", "es", "classes", "gets", "values"]}}
{"id1": "20024612", "id2": "22368133", "code1": "    private void parse() throws Exception {\n        BufferedReader br = null;\n        InputStream httpStream = null;\n        URL fileURL = new URL(url);\n        URLConnection urlConnection = fileURL.openConnection();\n        httpStream = urlConnection.getInputStream();\n        br = new BufferedReader(new InputStreamReader(httpStream, \"UTF-8\"));\n        String ligne;\n        String post;\n        String date;\n        String titre;\n        String resume;\n        String url2DL;\n        while ((ligne = br.readLine()) != null) {\n            if (ligne.indexOf(\"div class=\\\"post\\\" id=\\\"post\") != -1) {\n                post = null;\n                date = null;\n                titre = null;\n                try {\n                    post = ligne.substring(ligne.indexOf(\"post-\") + 5, ligne.indexOf(\"\\\"\", ligne.indexOf(\"post-\")));\n                    ligne = br.readLine();\n                    date = ligne.substring(ligne.indexOf(\"<div class=\\\"date\\\"><span>\") + 24);\n                    date = date.replaceAll(\"</span>\", \"\").replaceAll(\"</div>\", \"\").trim();\n                    log.info(\"Post   : \" + post + \" du \" + date);\n                    ligne = br.readLine();\n                    ligne = br.readLine();\n                    titre = ligne.substring(ligne.indexOf(\">\", ligne.indexOf(\"title\")) + 1, ligne.indexOf(\"</a>\"));\n                    titre = titre.replaceAll(\"&#8217;\", \"'\").replaceAll(\"&#8220;\", \"\\\"\").replaceAll(\"&#8221;\", \"\\\"\");\n                    url2DL = ligne.substring(ligne.indexOf(\"<a href=\\\"\") + 9, ligne.indexOf(\"/\\\"\")).trim();\n                    url2DL = url2DL.replace(\"mega-films.net\", \"mega-protect.com\") + \".php\";\n                    log.info(\"Titre  : \" + titre);\n                    log.info(\"To DL  : \" + url2DL);\n                    ligne = br.readLine();\n                    ligne = br.readLine();\n                    ligne = br.readLine();\n                    ligne = br.readLine();\n                    ligne = br.readLine();\n                    ligne = br.readLine();\n                    ligne = br.readLine();\n                    resume = ligne.substring(ligne.indexOf(\"<em>\") + 4, ligne.indexOf(\"</em>\"));\n                    resume = resume.replaceAll(\"&#8217;\", \"'\").replaceAll(\"&#8220;\", \"\\\"\").replaceAll(\"&#8221;\", \"\\\"\");\n                    log.info(\"Resume : \" + resume);\n                } catch (Exception e) {\n                    log.error(\"ERREUR : Le film n'a pas pu etre parse...\");\n                }\n                log.info(\"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\");\n            }\n        }\n    }\n", "code2": "    public static void testMapSource(MapSource mapSource, EastNorthCoordinate coordinate) {\n        try {\n            System.out.println(\"Testing \" + mapSource.toString());\n            int zoom = mapSource.getMinZoom() + ((mapSource.getMaxZoom() - mapSource.getMinZoom()) / 2);\n            MapSpace mapSpace = mapSource.getMapSpace();\n            int tilex = mapSpace.cLonToX(coordinate.lon, zoom) / mapSpace.getTileSize();\n            int tiley = mapSpace.cLatToY(coordinate.lat, zoom) / mapSpace.getTileSize();\n            url = new URL(mapSource.getTileUrl(zoom, tilex, tiley));\n            System.out.println(\"Sample url: \" + url);\n            c = (HttpURLConnection) url.openConnection();\n            System.out.println(\"Connecting...\");\n            c.connect();\n            System.out.println(\"Connection established - response HTTP \" + c.getResponseCode());\n            if (c.getResponseCode() != 200) return;\n            String contentType = c.getContentType();\n            System.out.print(\"Image format          : \");\n            if (\"image/png\".equals(contentType)) System.out.println(\"png\"); else if (\"image/jpeg\".equals(contentType)) System.out.println(\"jpg\"); else System.out.println(\"unknown\");\n            String eTag = c.getHeaderField(\"ETag\");\n            boolean eTagSupported = (eTag != null);\n            if (eTagSupported) {\n                System.out.println(\"eTag                  : \" + eTag);\n                testIfNoneMatch();\n            } else System.out.println(\"eTag                  : -\");\n            long date = c.getDate();\n            if (date == 0) System.out.println(\"Date time             : -\"); else System.out.println(\"Date time             : \" + new Date(date));\n            long exp = c.getExpiration();\n            if (exp == 0) System.out.println(\"Expiration time       : -\"); else System.out.println(\"Expiration time       : \" + new Date(exp));\n            long modified = c.getLastModified();\n            if (modified == 0) System.out.println(\"Last modified time    : not set\"); else System.out.println(\"Last modified time    : \" + new Date(modified));\n            testIfModified();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        System.out.println(\"\\n\");\n    }\n", "label": 0, "substitutes": {"parse": ["build", "search", "file", "print", "process", "construct", "start", "open", "feed", " parsing", "format", " parser", "init", "read", "parser", "fork", "load", "data", "save", "reset", "execute", "handle", "Parser", "request", "launch", "handler", "se"], "br": ["brace", "lr", "dr", "BR", "ctr", "yr", "ger", "bt", "b", "browser", "nr", "be", "bridge", "rb", "arr", "vr", "mr", "ren", "reader", "shell", "r", "bl", "bro", "cr", "bh", "adr", "rel", "ber", "sp", "hr", "bs", "bre", "wr", "bm", "eb", "gr", "bsp", "pr", "bd", "bn", "bf", "bp", "tr", "shr", "fr", "kr", "buf", "bc", "Br"], "httpStream": [" httpBody", "upperBody", "upperContext", "httpSocket", "xmlContext", "httpsSteam", "hrSocket", "ttpStream", "feedStreamer", " httpSteam", "httpContext", "xmlStream", "httpsStream", "ttpData", "feedStream", "httpConnection", "upperSteam", "httpsStreamer", "ttpSteam", "xmlConnection", " httpContext", " httpConnection", "xmlSteam", "httpsSocket", "ttpBody", "upperConnection", "httpSteam", "feedSocket", "feedSteam", "httpData", "hrSteam", "hrStream", "hrStreamer", "httpStreamer", "httpBody", " httpData", "upperStream", "upperData"], "fileURL": ["FileUrl", " fileLocation", "fileUrl", "FileSSL", "FileSR", "FileLocation", "urlSR", "fileSR", "urlSSL", "urlUrl", " fileSSL", "urlURL", "urlLocation", "fileSSL", "fileLocation", " fileUrl", " fileSR", "FileURL"], "urlConnection": ["webConnector", "urlConnect", " urlconnection", " urlConfiguration", "urlClient", "httpconnection", "webConnect", " urlClient", "fileConnection", "webConfiguration", "httpConnection", "webConnection", "URLConnector", "fileConnect", " urlConnect", "urlConnector", "URLConfiguration", " urlConnector", "urlconnection", "urlConfiguration", "URLConnect", "fileClient", "fileconnection", "httpConnect", "httpClient", "URLConnection"], "ligne": ["llazy", "sliven", "lorde", "slotto", "liven", "lagen", "lotto", "yladr", "ylazy", "viner", "lige", "rlorde", "yliner", "longe", " lounge", "llaxy", "lazy", "gesson", "slaxy", "sligne", " laxy", "vysis", "lwine", "alonge", "lenge", "line", " lien", "llounge", "gligation", "jlene", "liade", " liner", "ellwine", "iliner", " lige", " lenge", "lysis", "jliner", "ylige", "lroit", "liigation", "jligne", " longe", "glounge", "jligation", " lade", "iladr", "lionge", "llien", "elligne", "llysis", "liourse", " lene", "iligne", "vonge", "lligation", " lroit", "gourse", "rligne", "llonge", "bline", "lourse", "lene", "glien", "jlagen", "slige", " lwine", "liubric", "clanguage", "liiven", "ligation", "clagen", "slonge", "liysis", "jlubric", "sladr", "liroit", "lliner", "liotto", " liven", "bligne", "bliner", " language", "ladr", " ligation", "lounge", "jlige", "slubric", "clubric", "lladr", "liene", "gligne", "bladr", "aligne", "lubric", "ylroit", "llubric", "language", "liounge", "liiner", "lardi", " lourse", "blige", "jlonge", "slounge", "liner", "slenge", "aliner", "liigne", " lazy", "ilien", "lien", "alounge", "laxy", "liadr", "giner", "lligne", "liesson", "blounge", "liwine", "rliner", "jlanguage", "cligne", "liorde", "ellourse", "elligation", "slardi", "ylourse", "vigne", " lotto", " lagen", "lade", " lardi", "rladr", "sline", " lesson", "llade", "lesson", " lorde", "llenge", "slourse", "liardi", "alige", " line", " lubric", " ladr", "liige", "yligne", "gigne", "llige", "llourse"], "post": ["text", "op", "put", "log", "pt", "p", "id", "ost", "parent", "mod", "back", "po", "hot", "row", "pg", "pres", "url", "index", "time", "proc", "son", "pl", "port", "zip", "title", "code", "wp", "pre", "col", "ps", "form", "prefix", "body", "page", "draw", "pass", "pid", "Post", "name", "patch", "tim", "comment", "zero", "posts", "data", "save", "add", "key", "POST", "pp", "ip", "pos", "type", "tt"], "date": ["local", "pose", "late", "oday", "number", "when", "string", "dat", "file", "log", "tag", "mail", "debug", "update", "event", "zone", "te", "bon", "due", "week", "no", "month", "age", "time", "index", "day", "grade", "duration", "title", "code", "dates", "md", "mate", "notice", "note", "reason", "set", "dt", "pe", "page", "end", "get", "result", "night", "draw", "dig", "diff", "change", "create", "name", "today", "dated", "comment", "data", "days", "me", "ate", "Date", "trade", "add", "json", "year", "cal", "type", "state", "now"], "titre": ["ptitbre", "tuitrev", "titare", "titr\u00e9", "tITres", "tipere", "tiprer", "nitre", "tolitbre", "tittres", "titbre", "ptitre", "totre", "titsbre", "tITRE", "titrer", "ptittrie", "titrev", "titrie", "Tittre", "tipre", " tolitrer", "tipbre", "titarer", "ptitrate", "tuitere", "tittbre", "nitrev", "Titrie", "titere", "Tittbre", "titr", "Tittres", "titerbre", "tittrie", " tolitre", "totr\u00e9", "tistrie", "tipres", "Titre", "tittr", "tistbre", "tuitRE", "TitRE", "titsre", "tittrate", " titrer", "titerrie", "tolitere", "titsres", "tITere", "nittere", " tolitbre", "ltitr", "nittre", "tolitre", "titar", "titeres", "titres", "ptitrie", "nittrev", "titabre", "TittRE", "tuitre", "tipRE", "ltittre", "tITrev", "ltitre", "titerre", "ltittr\u00e9", "tittrev", "tittre", "Titres", "tistre", "titRE", "ptittre", "nitRE", "titrate", "titerie", "tittRE", "ltittr", "titebre", "titerrate", "tolitrer", " tolitere", "ltitere", "tistrate", "tittere", "titaere", "ltitr\u00e9", " titbre", "Tittrie", "totere", " titere", "ptittrate", "ltittere", "tITbre", "nitere", "totr", "tittr\u00e9", "titsrie", "titar\u00e9", "nittRE", "ptittbre", "tITre", "Titbre"], "resume": ["RESumption", "resumption", "RESolve", "presolve", "preserve", "Resumption", "resolve", "reserve", "Resume", "Resolve", "presume", "RESume", "presumption", "Reserve", "REServe"], "url2DL": ["url1DL", "url5DB", "url1URL", "url3LL", " url5DD", "url02dl", "Url4DD", "url5FL", "url02DL", "url2DS", "url7DL", " url2TL", "url4DR", "url7DB", "url5DD", "url2DM", " url5FL", "url4DL", "url5DL", "url2DR", "url22LL", "Url2DL", "url22DR", " url2DD", "url5DS", "url2LL", " url1DL", "url5DM", "url5LL", "url22DD", "url4DD", "url12DB", "url02URL", "url1LL", "url12DD", " url2DM", " url2FL", "url12DL", " url5DM", "url12DS", "url2DD", "url4FL", " url5DB", "url2DB", "url4DM", "url5TL", "url3DL", "url2URL", "Url2DR", " url5DL", " url5TL", "url2TL", "Url4DL", "url7DS", " url1URL", " url2LL", "url2dl", "url5DR", " url1dl", " url5DS", "url4TL", " url1LL", "url3URL", "url1dl", "url22DL", "url02LL", " url2DS", "url7DD", " url2dl", "url2FL", "url3dl", "Url4LL", " url2DB", "Url4DR", "Url2LL", "url4LL", " url2URL", "Url2DD"]}}
{"id1": "4618237", "id2": "21092340", "code1": "    public static void writeFileToFile(File fin, File fout, boolean append) throws IOException {\n        FileChannel inChannel = new FileInputStream(fin).getChannel();\n        FileChannel outChannel = new FileOutputStream(fout, append).getChannel();\n        try {\n            inChannel.transferTo(0, inChannel.size(), outChannel);\n        } finally {\n            if (inChannel != null) try {\n                inChannel.close();\n            } catch (IOException ex) {\n            }\n            if (outChannel != null) try {\n                outChannel.close();\n            } catch (IOException ex) {\n            }\n        }\n    }\n", "code2": "    public static URL addToArchive(Pod pod, ZipOutputStream podArchiveOutputStream, String filename, InputStream source) throws IOException {\n        ZipEntry entry = new ZipEntry(filename);\n        podArchiveOutputStream.putNextEntry(entry);\n        IOUtils.copy(source, podArchiveOutputStream);\n        podArchiveOutputStream.closeEntry();\n        return PodArchiveResolver.withinPodArchive(pod, filename);\n    }\n", "label": 1, "substitutes": {"writeFileToFile": ["writeFilesToStream", "writeFiles2Disk", "writeFilesToDisk", "writeFileToFiles", "writeFiles2Files", "writeFile2Disk", "writeFiles2File", "writeFileAsDisk", "writeFilesToFiles", "writeFileToStream", "writeFile2File", "writeFile2Files", "writeFileToDisk", "writeFileAndDisk", "writeFiles2Stream", "writeFileAndFiles", "writeFileAndStream", "writeFileAsFile", "writeFile2Stream", "writeFileAndFile", "writeFileAsStream", "writeFilesToFile", "writeFileAsFiles"], "fin": ["ln", "irm", "kin", "fl", "fw", "fc", "ic", "fil", "en", "fre", "mil", "fd", "mid", "lf", "Fin", "in", "inv", "raf", "ini", "n", "f", "syn", "normal", "FIN", "han", "lin", "fur", "din", "init", "fp", "lo", "rf", "fn", "ran", "mn", "details", "focus", "fi", "rin", "fr", "jen", "fa"], "fout": ["kpo", "tin", "Fou", "foutput", "tout", "ffin", "ffou", "Fin", "koutput", "Fout", "tOut", "fboutput", "fou", "ffout", " foutput", "fbOut", "fOut", "fbpo", "ffOut", "fbout", "kout", " fpo", "kOut", " fOut", "tou", "fpo", "FOut"], "append": ["allow", "send", "seed", "force", "batch", "apply", "string", "pend", "replace", "join", "update", "printf", "grow", "ended", "ext", "vert", "csv", "absolute", "insert", "bold", "note", "express", "fail", "end", "app", "flat", "buff", "push", "ind", "include", "folder", "ends", "add", "equal", "animate", "command"], "inChannel": ["inConnection", "outChan", " inConnection", "rinListener", "insideChannel", "iStream", "iChannel", " inCategory", "rinChannel", "pinMachine", "insideClient", "innChannel", "inCommand", "outCommand", "outConnection", " inchannel", "sinMachine", " inStream", "inListener", "rinChan", "inCategory", "sinChannel", "sinButton", "inputChan", "insideChan", "pinButton", "InConnection", "intClient", "iChan", "inButton", "inStream", "InStream", "inputChannel", " inChan", "inputListener", " inSession", "outStream", "iCommand", "inSession", " inListener", "innCategory", "inClient", "inputCategory", "intChannel", "outchannel", "innButton", "inChan", "inchannel", "inMachine", "InChannel", " inCommand", "sinCategory", "intSession", "pinChannel", "Inchannel", "intChan", "insideSession", "innMachine", "pinCategory", "rinCategory", " inClient"], "outChannel": ["OUTChannel", "outChan", "invMember", "outputChannel", " outController", "nameChan", "outConnection", "OUTchannel", "userChannel", "userCh", "outCh", "userMember", "OUTChan", "outputScope", "netChan", "netChannel", "outMember", " outChan", "OUTController", "invCh", "inCh", "netCh", "outputchannel", "nameConnection", " outCh", "netMember", "netchannel", "outchannel", "inChan", "inchannel", "nameScope", "outputCh", "nameChannel", " outScope", "invChannel", "outputChan", "outScope", "outputConnection", " outchannel", "netController", " outConnection", "outController"]}}
{"id1": "8983517", "id2": "88047", "code1": "    public User getUser(String userlogin) {\n        UserDAO userDAO = new UserDAO();\n        User user = null;\n        try {\n            user = userDAO.load(userlogin);\n            if (user == null) {\n                URL url = Thread.currentThread().getContextClassLoader().getResource(\"users.cfg\");\n                BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream()));\n                String linea = br.readLine();\n                while (linea != null) {\n                    StringTokenizer st = new StringTokenizer(linea, \":\");\n                    if (st.countTokens() == 3) {\n                        String login = st.nextToken();\n                        String password = st.nextToken();\n                        String profile = st.nextToken();\n                        if (login.equals(userlogin)) {\n                            user = new User(login, password, profile);\n                            userDAO.save(user);\n                        }\n                    } else {\n                    }\n                    linea = br.readLine();\n                }\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return user;\n    }\n", "code2": "    private static void readAndRewrite(File inFile, File outFile) throws IOException {\n        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n        Dataset ds = DcmObjectFactory.getInstance().newDataset();\n        dcmParser.setDcmHandler(ds.getDcmHandler());\n        dcmParser.parseDcmFile(null, Tags.PixelData);\n        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        System.out.println(\"reading \" + inFile + \"...\");\n        pdReader.readPixelData(false);\n        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n        ds.writeDataset(out, dcmEncParam);\n        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n        System.out.println(\"writing \" + outFile + \"...\");\n        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        pdWriter.writePixelData();\n        out.flush();\n        out.close();\n        System.out.println(\"done!\");\n    }\n", "label": 0, "substitutes": {"getUser": [" getuser", "showUsers", "loadUser", "loadPerson", "loadUsers", " getPerson", "showPerson", "showUser", " getUsers", "getPerson", "showuser", "getuser", "loaduser", "getUsers"], "userlogin": ["clientlayout", " userlayout", "USERusername", "clientusername", "Userusername", "userlog", "clientlogin", "usernameLogin", "openlogin", "usersubmit", "userlayout", "USERlogin", "UserLogin", "usernamelayout", " userblog", "usernamelogin", "usernameusername", "usernamelog", "userblog", "USERlog", "usernamesubmit", " userusername", "USERLogin", "Userblog", "Userlog", "Userlogin", "openblog", "clientsubmit", " usersubmit", "openusername", "userusername", "openLogin", "userLogin", " userLogin"], "userDAO": ["groupCAH", " userDaO", " userDAE", " userDaOU", "userCAO", "groupDAE", "userdaH", "userDAN", "userDOO", "userCAo", "userTAO", "userDOOB", "userDaO", "userCAH", "userSAO", "userSAo", "profileDAo", "profileDAOB", "userTAN", "userDAPO", "userSAOB", "userDaE", "groupDAOA", "userCAE", "userCAPO", "profileDAO", "groupCAOA", "userDaN", "userDaOU", "userdaO", "userTAOU", "userDAOB", "profileCAOB", "userdaOA", "userDAo", "groupDAH", "userDOo", "groupCAE", "userSAPO", "userDAOA", "userdaE", " userDAN", "userDAOU", "profileCAO", "userDAH", "groupCAO", "profileDAPO", " userDaE", "userCAOB", "profileCAPO", "profileCAo", "userDOPO", "groupDAO", "userDAE", "userCAOA", " userDaN", "userTAE", " userDAOU"], "user": ["by", "used", "e", "update", "device", "username", "output", "owner", "content", "re", "mor", "job", "feature", "project", "usr", "core", "object", "comment", "use", "list", "ver", "er", "entry", "member", "clean", "uid", "per", "you", "rule", "menu", "query", "instance", "valid", "set", "change", "student", "client", "me", "home", "or", "state", "body", "can", "usage", "usa", "word", "contact", "match", "force", "term", "browser", "bug", "current", "record", "from", "we", "USER", "null", "to", "ro", "relation", "person", "volume", "form", "result", "message", "entity", "report", "account", "author", "creator", "human", "resource", "char", "remote", "row", "manager", "vol", "role", "config", "u", "util", "User", "actor", "group", "info"], "url": ["sl", "gl", "path", "lr", "fl", "log", "file", "Url", "ret", "li", "str", "nl", "resource", "b", "char", "browser", "loader", "context", "ls", "open", "r", "pl", "ll", "ssl", "html", "f", "base", "URL", "web", "loc", "ur", "cert", "bel", "http", "rl", "mount", "l", "ref", "lb", "ul"], "br": ["lr", "dr", "BR", "str", "nl", "bt", "b", "be", "browser", "gb", "rb", "bridge", "vr", "mr", "bb", "r", "bl", "block", "bro", "cr", "bh", "rel", "ber", "hr", "bs", "wr", "ch", "usr", "pr", "bd", "bn", "bf", "bp", "tr", "shr", "fr", "kr", "div", "buf", "er", "bc", "Br"], "linea": ["rowc", "LINEaa", "LINEva", "lineaa", "linva", "rowva", "LINEga", " lineva", "linkva", "LINEa", "linesA", "linc", "linesaa", "linesva", "Linega", "inea", " linega", "linkea", "Linea", "lineA", "ineA", "linega", "linka", "inega", "linA", "ineaa", "linesa", "linec", "rowa", "linaa", "ineva", " lineA", " lineaa", "LineA", "lineea", "lineva", "linkc", "linga", "lina", "rowea"], "st": ["sl", "so", "ust", "St", "pt", "ste", "et", "mt", "str", "sw", "ost", "t", "std", "stable", "nt", "start", "obj", "stack", "ist", "const", "ST", "ts", "stat", "ze", "sta", "sf", "desc", "set", "ct", "sd", "sp", "sty", "th", "est", "sb", "td", "rt", "ft", "ut", "spe", "sts", "sv", "rest", "it", "inst", "tt", "ss", "sn", "se"], "login": ["local", "kin", "pin", "ping", "match", "cell", "number", "Login", "log", "string", "submit", "id", "mail", "print", "join", "service", "ls", "select", "phone", "username", "filename", "email", "pack", "index", "pl", "label", "stat", "title", "ilo", "summary", "link", "sit", "license", "connect", "ident", "successful", "include", "virtual", "xml", "script", "layout", "joined", "account", "sql", "entry"], "password": ["search", "secret", "picture", "string", "post", "print", "device", "phrase", "shadow", "auth", "username", "attribute", "creation", "word", "pattern", "confirmed", "encrypted", "padding", "prefix", "sudo", "database", "pass", "power", "pty", "sword", "comment", "chain", "hello", "token", "mask", "cloud", "pool", "Password", "policy", "command"], "profile": ["plot", "background", "sample", "picture", "file", "prof", "property", "face", "latest", "history", "properties", "context", "family", "phone", "style", "username", "filename", "knife", "primary", "menu", "alias", "title", "summary", "volume", "security", "role", "buffer", "mobile", "power", "name", "template", "include", "photo", "professional", "metadata", "personal", "Profile", "policy"]}}
{"id1": "20306677", "id2": "11305840", "code1": "    public int update(BusinessObject o) throws DAOException {\n        int update = 0;\n        Bill bill = (Bill) o;\n        try {\n            PreparedStatement pst = connection.prepareStatement(XMLGetQuery.getQuery(\"UPDATE_BILL\"));\n            pst.setInt(1, bill.getId());\n            update = pst.executeUpdate();\n            if (update <= 0) {\n                connection.rollback();\n                throw new DAOException(\"Number of rows <= 0\");\n            } else if (update > 1) {\n                connection.rollback();\n                throw new DAOException(\"Number of rows > 1\");\n            }\n            connection.commit();\n        } catch (SQLException e) {\n            Log.write(e.getMessage());\n            throw new DAOException(\"A SQLException has occured\");\n        } catch (NullPointerException npe) {\n            Log.write(npe.getMessage());\n            throw new DAOException(\"Connection null\");\n        }\n        return update;\n    }\n", "code2": "    public boolean setUpdateCliente(int IDcliente, String nombre, String paterno, String materno, String ocupacion, String rfc) {\n        boolean update = false;\n        try {\n            stm = conexion.prepareStatement(\"update clientes set nombre='\" + nombre.toUpperCase().trim() + \"' , paterno='\" + paterno.toUpperCase().trim() + \"' ,\" + \"materno='\" + materno.toUpperCase().trim() + \"',ocupacion='\" + ocupacion.toUpperCase().trim() + \"',rfc='\" + rfc.trim() + \"' where IDcliente ='\" + IDcliente + \"' \");\n            stm.executeUpdate();\n            conexion.commit();\n            update = true;\n        } catch (SQLException e) {\n            System.out.println(\"error al actualizar registro en la tabla clientes  \" + e.getMessage());\n            try {\n                conexion.rollback();\n            } catch (SQLException ee) {\n                System.out.println(ee.getMessage());\n            }\n            return update = false;\n        }\n        return update;\n    }\n", "label": 1, "substitutes": {"update": ["local", "where", "build", "send", "database", "match", "batch", "op", "put", "delete", "id", "replace", "print", "test", "latest", "up", "num", "current", " UPDATE", "fill", "run", "flush", "call", "ask", "index", "query", "updated", "write", "check", "status", "insert", "set", " Update", "date", "get", "out", "touch", "init", "draw", "all", "create", "commit", "change", "upload", "push", "patch", "user", "offset", "u", "Update", "UPDATE", "load", "save", "add", "report", "value", "use", "version", "execute", "oo", "login", "json", "state", "edit", "find", "now", "size"], "o": ["v", "p", "mo", "b", "k", "po", "e", "t", "obj", " mo", "onet", "bo", "to", "n", "i", "a", "m", "y", "ooo", "O", "out", "oin", "vo", "om", "u", "oid", "object", "fo", "ao", "oice", " os", "oa", "ob", "oo", "os", "iso"], "bill": ["fax", "build", "stuff", "batch", "bar", "nb", "b", "fund", "biz", "nn", "unk", "pay", "service", " billing", "bb", "work", "gross", "inv", "company", "bo", "iban", " Bill", "ll", "money", "BILL", "quote", "bean", "book", "lex", "sk", "ann", "net", "vo", "conn", "project", "Bill", "ship", "phy", "bank", " billed", "trade", "report", "kick", "handle"], "pst": ["apst", "cstra", "pkgth", "apct", "apsp", " pST", "pct", "tpst", "psp", "pkgstro", "opstra", "tpST", " pse", "tpse", "pkgst", "tpstra", " pstra", "cstro", "tpct", "cst", "opct", "picstra", "pST", "apST", "picst", "opse", "pstra", " pct", " psp", "picth", "pkgstra", "pth", "pse", "picstro", "pstro", "opst", "tpsp", "cth"]}}
{"id1": "17580775", "id2": "22868825", "code1": "        public void runInternal() {\n            connection = null;\n            boolean itemsLoadedPartially = false;\n            boolean loadNext = false;\n            HashSet<String> visited = new HashSet<String>();\n            do {\n                try {\n                    setProgressMessage(url.toString(), -1);\n                    visited.add(url.toString());\n                    long startTimeStamp = System.currentTimeMillis();\n                    delayedProgress = coolReader.getEngine().showProgressDelayed(0, progressMessage, PROGRESS_DELAY_MILLIS);\n                    URLConnection conn = url.openConnection();\n                    if (conn instanceof HttpsURLConnection) {\n                        onError(\"HTTPs is not supported yet\");\n                        return;\n                    }\n                    if (!(conn instanceof HttpURLConnection)) {\n                        onError(\"Only HTTP supported\");\n                        return;\n                    }\n                    connection = (HttpURLConnection) conn;\n                    connection.setRequestProperty(\"User-Agent\", \"CoolReader/3(Android)\");\n                    if (referer != null) connection.setRequestProperty(\"Referer\", referer);\n                    connection.setInstanceFollowRedirects(true);\n                    connection.setAllowUserInteraction(false);\n                    connection.setConnectTimeout(CONNECT_TIMEOUT);\n                    connection.setReadTimeout(READ_TIMEOUT);\n                    connection.setDoInput(true);\n                    String fileName = null;\n                    String disp = connection.getHeaderField(\"Content-Disposition\");\n                    if (disp != null) {\n                        int p = disp.indexOf(\"filename=\");\n                        if (p > 0) {\n                            fileName = disp.substring(p + 9);\n                        }\n                    }\n                    int response = -1;\n                    response = connection.getResponseCode();\n                    L.d(\"Response: \" + response);\n                    if (response != 200) {\n                        onError(\"Error \" + response);\n                        return;\n                    }\n                    String contentType = connection.getContentType();\n                    String contentEncoding = connection.getContentEncoding();\n                    int contentLen = connection.getContentLength();\n                    L.d(\"Entity content length: \" + contentLen);\n                    L.d(\"Entity content type: \" + contentType);\n                    L.d(\"Entity content encoding: \" + contentEncoding);\n                    setProgressMessage(url.toString(), contentLen);\n                    InputStream is = connection.getInputStream();\n                    delayedProgress.cancel();\n                    is = new ProgressInputStream(is, startTimeStamp, progressMessage, contentLen, 80);\n                    final int MAX_CONTENT_LEN_TO_BUFFER = 256 * 1024;\n                    boolean isZip = contentType != null && contentType.equals(\"application/zip\");\n                    if (expectedType != null) contentType = expectedType; else if (contentLen > 0 && contentLen < MAX_CONTENT_LEN_TO_BUFFER) {\n                        byte[] buf = new byte[contentLen];\n                        if (is.read(buf) != contentLen) {\n                            onError(\"Wrong content length\");\n                            return;\n                        }\n                        is.close();\n                        is = null;\n                        is = new ByteArrayInputStream(buf);\n                        if (findSubstring(buf, \"<?xml version=\") >= 0 && findSubstring(buf, \"<feed\") >= 0) contentType = \"application/atom+xml\";\n                    }\n                    if (contentType.startsWith(\"application/atom+xml\")) {\n                        L.d(\"Parsing feed\");\n                        parseFeed(is);\n                        itemsLoadedPartially = true;\n                        if (handler.docInfo.nextLink != null && handler.docInfo.nextLink.type.startsWith(\"application/atom+xml;profile=opds-catalog\")) {\n                            if (handler.entries.size() < MAX_OPDS_ITEMS) {\n                                url = new URL(handler.docInfo.nextLink.href);\n                                loadNext = !visited.contains(url.toString());\n                                L.d(\"continue with next part: \" + url);\n                            } else {\n                                L.d(\"max item count reached: \" + handler.entries.size());\n                                loadNext = false;\n                            }\n                        } else {\n                            loadNext = false;\n                        }\n                    } else {\n                        if (fileName == null) fileName = defaultFileName;\n                        L.d(\"Downloading book: \" + contentEncoding);\n                        downloadBook(contentType, url.toString(), is, contentLen, fileName, isZip);\n                        if (progressShown) coolReader.getEngine().hideProgress();\n                        loadNext = false;\n                        itemsLoadedPartially = false;\n                    }\n                } catch (Exception e) {\n                    L.e(\"Exception while trying to open URI \" + url.toString(), e);\n                    if (progressShown) coolReader.getEngine().hideProgress();\n                    onError(\"Error occured while reading OPDS catalog\");\n                    break;\n                } finally {\n                    if (connection != null) try {\n                        connection.disconnect();\n                    } catch (Exception e) {\n                    }\n                }\n            } while (loadNext);\n            if (progressShown) coolReader.getEngine().hideProgress();\n            if (itemsLoadedPartially) BackgroundThread.guiExecutor.execute(new Runnable() {\n\n                @Override\n                public void run() {\n                    L.d(\"Parsing is finished successfully. \" + handler.entries.size() + \" entries found\");\n                    callback.onFinish(handler.docInfo, handler.entries);\n                }\n            });\n        }\n", "code2": "    String sendRequest(String[] getVars, String[] postVars, Object[] fileVars, boolean getSessionKey) throws IOException {\n        String uri = wikiBaseURI;\n        if (getVars != null) for (int i = 0; i + 1 < getVars.length; i += 2) uri += (i == 0 ? '?' : '&') + urlEncode(getVars[i]) + '=' + urlEncode(getVars[i + 1]);\n        URL url = new URL(uri);\n        HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n        conn.setDoInput(true);\n        conn.setUseCaches(false);\n        if (!getSessionKey) {\n            String cookie = \"\";\n            for (String key : cookies.keySet()) cookie += (cookie.length() == 0 ? \"\" : \"; \") + key + \"=\" + cookies.get(key);\n            conn.setRequestProperty(\"Cookie\", cookie);\n        }\n        if (fileVars != null) {\n            conn.setRequestProperty(\"Content-Type\", \"multipart/form-data; boundary=\" + boundary);\n            conn.setDoOutput(true);\n            conn.setRequestMethod(\"POST\");\n            conn.connect();\n            PrintStream ps = new PrintStream(conn.getOutputStream());\n            for (int i = 0; fileVars != null && i + 2 < fileVars.length; i += 3) {\n                ps.print(\"--\" + boundary + \"\\r\\n\");\n                postFile(ps, conn, (String) fileVars[i], (String) fileVars[i + 1], (byte[]) fileVars[i + 2]);\n            }\n            for (int i = 0; postVars != null && i + 1 < postVars.length; i += 2) ps.print(\"--\" + boundary + \"\\r\\n\" + \"Content-Disposition: \" + \"form-data; name=\\\"\" + postVars[i] + \"\\\"\\r\\n\\r\\n\" + postVars[i + 1] + \"\\r\\n\");\n            ps.println(\"--\" + boundary + \"--\");\n            ps.close();\n        } else if (postVars != null) {\n            conn.setDoOutput(true);\n            conn.setRequestMethod(\"POST\");\n            conn.connect();\n            PrintStream ps = new PrintStream(conn.getOutputStream());\n            for (int i = 0; postVars != null && i + 1 < postVars.length; i += 2) ps.print((i == 0 ? \"\" : \"&\") + urlEncode(postVars[i]) + \"=\" + urlEncode(postVars[i + 1]));\n            ps.close();\n        }\n        int httpCode = conn.getResponseCode();\n        if (httpCode != 200) throw new IOException(\"HTTP code: \" + httpCode);\n        if (getSessionKey) getCookies(conn.getHeaderFields().get(\"Set-Cookie\"));\n        InputStream in = conn.getInputStream();\n        response = \"\";\n        byte[] buffer = new byte[1 << 16];\n        for (; ; ) {\n            int len = in.read(buffer);\n            if (len < 0) break;\n            response += new String(buffer, 0, len);\n        }\n        in.close();\n        return response;\n    }\n", "label": 0, "substitutes": {"runInternal": ["runIntern", "processinternal", "runinternal", "mainImpl", "processImpl", "mainIntern", "loadImpl", "mainInternal", "loadIntern", "processInternal", "loadInternal", "runImpl", "processIntern", "loadinternal", "maininternal"], "connection": ["function", "description", "device", "network", "session", "computer", "statement", "console", "close", "engine", "generation", "document", "pointer", "reset", "pool", "machine", "government", "information", "entry", "command", "created", "ion", "method", "open", "creation", "c", "server", "create", "reference", "client", "socket", "subject", "address", "operation", "channel", "component", "event", "position", "current", "Connection", "bo", "to", "relation", "language", "encrypted", "connect", "page", "message", "writer", "setup", "application", "general", "default", "translation", "creator", "number", "communication", "resource", "context", "no", "condition", "link", "initial", "table", "database", "associated", "version", "connected", "directory", "character", "controller", "established", "con", "collection"], "visited": ["Visitted", "Visitialized", "vited", "Visiting", "comitted", "visitialized", "visitted", "comitialized", "vised", "vitted", "vITED", "VISited", "viting", "visITED", "VISitialized", "comited", "VisITED", "Visited", "comed", "Vised", "showniting", "shownitted", "visiting", "shownITED", "VISitted", "shownited", "VISed"], "startTimeStamp": ["startTimeMillAMP", "startTimeStamps", "startTimStAMP", "startTimeStis", "startTimStamps", "startTimeStAMP", "startTimeStris", "startTimeMillamp", "startTimeStramps", "startTimestAMP", "startTimeStrAMP", "startTimStis", "startTimstis", "startTimeStramp", "startTimeMillamps", "startTimestamp", "startTimstamps", "startTimestamps", "startTimStamp", "startTimstamp", "startTimestis", "startTimstAMP", "startTimeMillis"], "delayedProgress": ["delayingContent", "delayingprogress", "deliverprogress", "deliverContent", "dayContent", "dayprogress", "deliverProgress", "delayProgress", "dayedprogress", "delayingProgress", "dayProgress", "dayedProgress", "delayprogress", "dayedContent", "delayedprogress", "delayedContent", "delayContent"], "conn": ["err", "mc", "js", "cur", "cmp", "cell", "txt", "conv", "obj", "nt", "Conn", "j", "pg", "adj", "open", "conf", "Connection", "cp", "ctx", "c", "comm", "n", "dl", "act", "alloc", "res", "hw", "cc", "col", "ct", "connect", "loc", "cn", "ch", "bc", "cfg", "nw", "cert", "client", "att", "nc", "cont", "addr", "ht", "exec", "cb", "enc", "l", "cmd", "resp", "org", "jp", "con"], "fileName": [" filePath", "displayPath", " filename", "fileValue", " fileType", "filename", "resourceName", "displayValue", "Filename", "resourcePath", "FilePath", "displayname", "displayName", "FileName", "resourceType", "FileType", "resourcename", "fileType", " fileValue", "FileValue", "filePath"], "disp": ["serp", "layp", " dispa", "nlpo", "dispol", "dispo", "nlP", "sern", "wordpat", "defp", "wordp", "despi", " dispi", "lypa", " disn", "DISpend", "discp", "desr", "disP", "laypend", "desp", "nlp", "Dispat", "defpi", "lypi", "laypol", "DisP", "wordpo", "desP", "DIScp", "nlpat", "disr", "wordP", "discpend", "dispend", "defP", "laycp", "serpi", "disn", "DISpol", "Dispo", "Dispi", "defr", "disccp", "lyn", "Disr", "DISp", "Disp", "dispa", "discpol", "dispi", "dispat", "lyp", "serpa"], "p": ["d", "v", "ping", "perm", "op", "P", "h", "tp", "lp", "pro", "np", "vp", "point", "part", "t", "conv", "dp", "j", "pg", "r", "primary", "c", "cp", "n", "i", "pi", "pat", "ph", "m", "wp", "pre", "f", "ps", "pers", "padding", "sp", "pid", "change", "pointer", "pa", "pp", "pad", "bp", "pkg", "pos", "php", "pc", "jp", "par"], "response": ["bytes", "description", "function", "number", "sequence", "amount", "length", "remote", "escription", "onse", "position", "success", "no", "more", "total", "relative", "Response", "roads", "network", "time", "index", "block", "relation", "res", "code", "status", "duration", "server", "example", "message", "result", "page", "environment", "none", "tree", "frame", "exit", "respons", "error", "zero", "application", "reset", "value", "image", "version", "yes", "request", "pos", "json", "next", "reply", "resp", "continue", "type", "ne", "entry", "timeout"], "contentType": ["commandType", "cellType", " contentTypes", " contentTy", "ContentTypes", "contentLength", "documentTYPE", "messageLength", "contentTypes", "messageTYPE", "contentTy", "documentLength", "messageType", " contentLength", "cellLen", "commandTypes", "ContentLength", "cellLength", "documentType", "ContentType", "cellTYPE", "commandLength", "contentTYPE", "ContentTy", "documentLen", "commandTy", "messageLen"], "contentEncoding": ["contentencoder", " contentEncLength", "contentEnoring", " contentEncoded", "contentEncoder", "contentEnoding", "contentencoding", " contentEnryption", "contentEvoded", "contentEnoded", " contentEncryption", " contentEnoring", " contentEncoring", "contentEnLength", " contentEnoder", "contentEncryption", "contentDecLength", "contentEnryption", "contentEncLength", "contentEvoding", "contentDecoding", "contentEncoring", " contentEncoder", "contentEnoder", "contentDecoring", "contentEncoded", "contentDecoded", " contentEnoded", "contentencoring", "contentencryption", " contentEnLength", " contentEnoding", "contentEvLength", "contentEvoder", "contentDecryption", "contentDecoder"], "contentLen": ["componentLen", "ContentLen", "contentLength", "componentColl", "messagelen", "ontentNet", "ontentSize", " contentlen", "ontentLen", "contentSize", " contentColl", "contentColl", " contentLength", " contentSize", "ContentLength", "messageColl", "ontentLength", "ContentSize", "messageSize", "componentlen", "componentSize", " contentNet", "ContentNet", "contentlen", "contentNet", "messageLen"], "is": ["does", "iss", "id", "ism", "ists", "ii", "ist", "network", "ize", "ice", "i", "isc", "are", "pi", "ims", "IS", "iz", "its", "ie", "http", "im", "isd", "version", "Is", "ip", "es", "ss", "ih"], "url": ["build", "path", "address", "git", "string", "Url", "site", "str", "id", "channel", "char", "browser", "ls", "dl", "ll", "pattern", "host", "https", "html", "ssl", "link", "location", "uri", "server", "base", "URL", "web", "page", "ur", "client", "name", "bel", "http", "www", "mount", "version", "l", "xml", "domain", "ref", "org"], "loadNext": [" loadMore", "loadMore", " loadedMore", "loadedFirst", " loadedNext", "loadednext", "loadedMore", " loadednext", " loadedFirst", "loadFirst", "loadnext", "loadedNext", " loadFirst", " loadnext"], "itemsLoadedPartially": ["itemsLoadedpartfully", "itemsLoadsPosfully", "itemsLoadedOnlyfully", "itemsLoadedOnlyial", "itemsLoadedpartial", "itemsLoadsPartial", "itemsLoadedpartully", "itemsLoadsPartially", "itemsLoadsPosially", "itemsLoadedPosially", "itemsLoadsPosully", "itemsLoadedOnlyully", "itemsLoadedOnlyially", "itemsLoadedPartfully", "itemsLoadsPartully", "itemsLoadedPosfully", "itemsLoadedPartial", "itemsLoadedPosial", "itemsLoadedPosully", "itemsLoadsPartfully", "itemsLoadedPartully", "itemsLoadedpartially", "itemsLoadsPosial"]}}
{"id1": "300397", "id2": "2199604", "code1": "    private static void readAndRewrite(File inFile, File outFile) throws IOException {\n        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n        Dataset ds = DcmObjectFactory.getInstance().newDataset();\n        dcmParser.setDcmHandler(ds.getDcmHandler());\n        dcmParser.parseDcmFile(null, Tags.PixelData);\n        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        System.out.println(\"reading \" + inFile + \"...\");\n        pdReader.readPixelData(false);\n        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n        ds.writeDataset(out, dcmEncParam);\n        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n        System.out.println(\"writing \" + outFile + \"...\");\n        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        pdWriter.writePixelData();\n        out.flush();\n        out.close();\n        System.out.println(\"done!\");\n    }\n", "code2": "    private static void unzipEntry(ZipFile zipfile, ZipEntry entry, File outputDir) throws IOException {\n        if (entry.isDirectory()) {\n            createDir(new File(outputDir, entry.getName()));\n            return;\n        }\n        File outputFile = new File(outputDir, entry.getName());\n        if (!outputFile.getParentFile().exists()) {\n            createDir(outputFile.getParentFile());\n        }\n        BufferedInputStream inputStream = new BufferedInputStream(zipfile.getInputStream(entry));\n        BufferedOutputStream outputStream = new BufferedOutputStream(new FileOutputStream(outputFile));\n        try {\n            IOUtils.copy(inputStream, outputStream);\n        } finally {\n            outputStream.close();\n            inputStream.close();\n        }\n    }\n", "label": 1, "substitutes": {"readAndRewrite": ["readAndrewWrite", "readAndResrite", "readAndResend", "readAndReprites", "readAndRewWrite", "readAndrewrites", "readAndRewend", "readAndResrites", "readAndrewend", "readAndReprite", "readAndResWrite", "readAndRepWrite", "readAndRewrites", "readAndRepend", "readAndrewrite"], "inFile": ["docFile", "InFilename", "inFILE", "docFILE", "initFilename", "docFilename", "Infile", "inputFile", "iTime", "inputFilename", "iFilename", "INPlace", " inFilename", "outfile", " infile", "inputFace", "InFile", "infile", "INFILE", "INFilename", "INFace", "inPlace", "inFace", "initFile", "initFace", "iFile", "initPlace", "INFile", "iFILE", "inputPlace", "inTime", "outFilename", "INTime", "inFilename", "docTime"], "outFile": ["outFILE", "checkFile", "inFILE", "checkFilename", " outFilename", "checkfile", " outfile", "nameFILE", " outFILE", "reportFILE", "outfile", "reportFile", "toFilename", "infile", "nameFile", "reportFilename", "tofile", "checkFILE", "namefile", "outFilename", "nameFilename", "inFilename", "toFILE", "reportfile", "toFile"], "iis": ["liisc", "eIS", " iIS", "eis", "iiss", "iisc", "ii", "liIs", "iIS", "Iiss", " iisc", "liris", "iiis", "Iis", "diIs", "aiis", "iris", "iiris", "diiss", "IIs", "iIs", " iiss", "diis", "aiIS", "iiisc", "dii", " ii", " iIs", "liis", "Ii", "iiIs", " iris", "aiIs", "eIs"], "dcmParser": ["dcfStatement", "dmodulePrivate", " dpmPar", " dpmLoader", "dmmAdapter", "dmoduleParser", " dpmReader", "dpmLoader", "dfmLoader", "dromAssistant", "dmmmAdapter", "dcmAssistant", "DpmAdapter", "dpmparser", "dcfReader", "dmmparser", "dcfParser", "DpmReader", "DcmAdapter", "dcomParser", "dmmmParser", "dmoduleReader", " dcmarser", " dcmLoader", "dcommReader", "dcrParser", "deromarser", "dcrBuilder", "dcmBuilder", "dmparser", "dpcParser", "dpmParser", "dpmarser", "dmmarser", "dfmParser", "dromListener", "dcomLoader", "dcomBuilder", "dcomReader", " dcmListener", "decmReader", "drumBuilder", "dpmAssistant", "dpcPrivate", "drumReader", "dmmmReader", "dpmReader", "dpmBuilder", "dromparser", "decmParser", "dpmPar", "DcmBuilder", "dmmmparser", "dcmLoader", " dpmParser", "decmarser", " dcmparser", "dcrReader", " dpmPrivate", "dpmListener", "deromReader", "drumParser", " dpmBuilder", "dromarser", "decmparser", "dcommParser", "dmParser", " dcmPar", "Dpmparser", "dmmParser", "dfmBuilder", "deromparser", "dpcAssistant", "dmmReader", "DpmParser", "dromParser", "dgrPar", "dgrStatement", " dcmAssistant", "dcfPar", "dcmarser", " dcmBuilder", "DcmReader", " dcmReader", " dpmStatement", "dmoduleAssistant", "dpcReader", "dcommAssistant", "dromReader", " dpmarser", "dcmparser", "dcrparser", "DcmPar", "dmarser", "dpmAdapter", " dpmAssistant", "dcmReader", "dfmReader", "dgrReader", "dcmPrivate", "DpmPar", "dmReader", " dpmparser", "DpmBuilder", "dcmStatement", "dcmListener", "dpmPrivate", " dcmPrivate", " dpmListener", "dcmPar", "dpmStatement", "drumPar", "dgrParser", "dcmAdapter", "Dcmparser", "deromParser", "dcommListener", " dcmStatement", "DcmParser"], "ds": ["d", "js", "ks", "eds", "outs", "pd", "des", "vs", "dat", "da", "dds", "gd", "qs", "dq", "eps", "ws", "xs", "in", "aos", "ls", "hs", "gs", "rs", "tes", "dl", "dx", "uds", "DS", "cs", "obs", "ims", "fs", "ns", "as", "ps", "ads", "sets", "ils", "sd", "dt", "dd", "s", "bs", "pers", "hd", " des", "its", "db", " DS", "services", "Ds", "sys", "data", "bd", "drivers", "sv", "details", "dos", "dh", "der", "ins", "df", "es", "ss", "ods", "os", "ys"], "pdReader": ["dpReader", "tdParser", "dpCar", "pdHelper", "hdReader", "pedReader", "tdWriter", "hdParser", "ddCar", "ddRunner", "hdWriter", "vdReader", "vdHelper", "pdCar", "dpLoader", "pdParser", "pdRead", "xdWriter", "xdReader", "ddRead", "pdLoader", "ddParser", "ddHelper", "vdWriter", "ddLoader", "xdLoader", "pedRunner", "tdReader", "hdRead", "ddReader", "vdLoader", "pdRunner", "tdRead", "pedLoader", "pedCar", "ddWriter", "xdHelper", "dpRunner"], "out": ["serv", "sw", "t", "conv", "msg", "aos", "output", "gen", "auto", "on", "opt", "screen", "ch", "all", "cfg", "name", "con", "list", "ins", "pos", "ent", "pool", "full", "w", "err", "v", "at", "p", "txt", "io", "up", "in", "flush", "c", "ex", " err", "inter", "status", "o", "net", "s", "raw", "tmp", "conn", "cn", "gr", "client", "sys", "data", "one", "sum", "cmd", "outs", "js", "log", "str", "id", "obj", "we", "to", "n", "null", "inner", "res", "outer", "desc", "writer", "over", "OUT", "Out", "cache", "it", "ou", "en", "nr", "nt", "inv", "go", "gt", "end", "oss", "cb", "co", "os"], "dcmEncParam": ["dmmencCmd", "dcmDecNum", "dmmEnPar", "dcmencPar", "dcmEscParam", "dmmencMsg", "dmmEncMsg", "dmmencParam", "dcmEncVal", "dcmEscVal", "dmmEnParam", "dmmEncVal", "dmmEncPar", "dcmEnNum", "dcmEnPar", "dcmDecCmd", "dcmencMsg", "dcmencCmd", "dmmEncNum", "dcmEnVal", "dcmEncMsg", "dcmEncCmd", "dcmDecParam", "dmmEncParam", "dcmencNum", "dcmEscNum", "dcmDecMsg", "dmmEncCmd", "dmmEnNum", "dcmEncNum", "dmmencNum", "dcmencParam", "dcmEscPar", "dcmEnParam", "dcmEncPar"], "pdWriter": ["dpReader", "PDWrite", "dpWrite", "dpEditor", "tdWriter", "pcwriter", "pidWrite", "dpWriter", "PDWriter", "tdWrite", "tdEditor", "PDEditor", "pdEditor", "pdwriter", "pidWriter", "pidWriting", "tdwriter", "pidwriter", "tdReader", "pdWrite", "pcWriter", "PDReader", "pcWrite", "pcWriting", "pdWriting", "tdWriting"]}}
{"id1": "5951610", "id2": "7846688", "code1": "    public void testNetworkHTTP() {\n        Log.v(\"Test\", \"[*] testNetworkHTTP()\");\n        URL url = null;\n        HttpURLConnection urlConnection = null;\n        try {\n            url = new URL(\"http://code.google.com/p/droidbox/\");\n            urlConnection = (HttpURLConnection) url.openConnection();\n            BufferedReader rd = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));\n            @SuppressWarnings(\"unused\") String line = \"\";\n            while ((line = rd.readLine()) != null) ;\n            url = new URL(\"http://pjlantz.com/imei.php?imei=\" + hashedImei);\n            urlConnection = (HttpURLConnection) url.openConnection();\n            rd = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));\n            while ((line = rd.readLine()) != null) ;\n            url = new URL(\"http://pjlantz.com/phone.php?phone=\" + phoneNbr);\n            urlConnection = (HttpURLConnection) url.openConnection();\n            rd = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));\n            while ((line = rd.readLine()) != null) ;\n            url = new URL(\"http://pjlantz.com/msg.php?msg=\" + msg.replace(\" \", \"+\"));\n            urlConnection = (HttpURLConnection) url.openConnection();\n            rd = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));\n            url = new URL(\"http://pjlantz.com/file.php?file=\" + fileContent.replace(\" \", \"+\"));\n            urlConnection = (HttpURLConnection) url.openConnection();\n            rd = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));\n            while ((line = rd.readLine()) != null) ;\n            url = new URL(\"http://pjlantz.com/app.php?installed=\" + installedApps.replace(\" \", \"+\"));\n            urlConnection = (HttpURLConnection) url.openConnection();\n            rd = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));\n            while ((line = rd.readLine()) != null) ;\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            urlConnection.disconnect();\n        }\n    }\n", "code2": "    public void postData(String protocol, String host, String form, String data) throws Exception {\n        if ((protocol == null) || (protocol.equals(\"\"))) {\n            protocol = DEFAULT_PROTOCOL;\n        }\n        if ((host == null) || (host.equals(\"\"))) {\n            host = DEFAULT_HOST;\n        }\n        if (form == null) {\n            form = DEFAULT_FORM;\n        }\n        if (data == null) {\n            throw new IllegalArgumentException(\"Invalid data\");\n        }\n        URL url = new URL(protocol, host, form);\n        URLConnection con = url.openConnection();\n        con.setDoOutput(true);\n        con.setDoInput(true);\n        con.setUseCaches(false);\n        con.setRequestProperty(\"Content-type\", \"application/x-www-form-urlencoded\");\n        con.setRequestProperty(\"Content-length\", String.valueOf(data.length()));\n        PrintStream out = new PrintStream(con.getOutputStream(), true);\n        out.print(data);\n        out.close();\n        BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));\n        while (in.readLine() != null) {\n        }\n        in.close();\n    }\n", "label": 1, "substitutes": {"testNetworkHTTP": ["TestNetworkURL", "TestNetHTTP", "testNetHTML", "testNetURL", "testNetHTTP", "testApplicationURL", "TestNetHTML", "testApplicationHTML", "testApplicationHTTP", "TestNetworkHTTP", "TestNetURL", "testNetworkURL", "TestNetworkHTML", "testNetworkHTML"], "url": ["sl", "path", "address", "gl", "blog", "lr", "pull", "fl", "log", "ret", "Url", "term", "str", "nl", "back", "resource", "mail", "print", "b", "channel", "t", "obj", "ls", "norm", "r", "email", "dl", "ocl", "bl", "ll", "pl", "lt", "host", "https", "m", "ssl", "link", "location", "html", "base", "rel", "URL", "uri", "web", "cl", "loc", "get", "ur", "conn", "all", "github", "cert", "impl", "ml", "u", "acl", "hl", "util", "http", "www", "console", "rl", "mount", "el", "l", "ref", "il", "org", "lb", "ul"], "urlConnection": ["httpHandler", "urlResponse", "consoleConnection", "dbConn", "sslConnection", "railListener", "httpSet", "nameConnect", "httpConnection", "browserConnect", " urlDiscussion", "fileConnect", " urlConnect", " urlInfo", "browserConnection", "methodConnector", "emailConnector", "urlConnector", "sslDiscussion", "httpConn", "nameConnector", " urlSet", "sslConn", "utilConnection", "nameConn", "implConnection", "dbConnection", "railHandler", "methodConn", "managerConnect", "urlConnect", "dbConnect", "sslConnector", "railConnection", "fileConnection", "httpInfo", "utilService", "utilConnect", " urlService", "browserConn", "httpService", "httpListener", "lsConnect", "mlConn", "emailConnect", " urlListener", "methodConnection", "managerConnection", "managerConnector", "nameConnection", "resourceConnection", "mlMachine", "urlSet", "lsConn", "methodConnect", "resourceResponse", "utilConnector", "managerInfo", " urlHandler", " urlPosition", "lrResponse", "urlMachine", "lrConnection", " urlMachine", " urlCon", "urlService", "consoleCon", "resourceConnector", "consoleConn", "sslPosition", "resourceConn", "lrConn", "lsConnection", "consoleMachine", "fileConn", "mlConnection", "urlInfo", "emailConn", "sslConnect", "urlCon", "railConnect", "urlHandler", "httpConnect", "lsConnector", "urlListener", "urlDiscussion", " urlResponse", "utilSet", "dbPosition", "implConnect", "utilConn", "fileDiscussion", "lrConnector", "browserConnector", "implConnector", "httpConnector", "utilListener", "mlCon", "implConn", " urlConnector", " urlConn", "urlPosition", "emailConnection", "urlConn"], "rd": ["d", "dr", "lr", "rid", "dir", "ld", "gd", "fd", "rx", "ped", "std", "rend", "rb", "erd", "ptr", "repl", "rob", "mr", "ri", "nd", "rod", "r", "rs", "rw", "rown", "rh", "rg", "red", "xd", "ered", "ded", "rax", "ord", "adr", "dd", "hr", "din", "wr", "ck", "rt", "dig", "rm", "dra", "usr", "art", "RD", "ind", "rr", "ined", "rez", "nder", "rand", "bd", "rl", "rer", "drm", "rc", "ra", "fr", "grad", "rus", "ird", "rn"], "line": ["ln", "where", "cell", "number", "string", "log", "file", "lock", "nl", "inline", "point", "channel", "length", "part", "zone", "row", " LINE", "record", "pipe", "len", "email", "time", "LIN", "edge", "range", "ice", "block", "node", "check", "port", "status", "side", "link", "stay", "iter", "set", "cl", "buffer", "loop", "message", "lin", "page", "column", "lo", "frame", "liner", "error", "lines", "comment", "ine", "le", "load", "eline", "online", "Line", "l", "LINE", "next", "none", "continue", "entry"]}}
{"id1": "23161545", "id2": "23532405", "code1": "    private void getRandomGUID(boolean secure) {\n        MessageDigest md5 = null;\n        StringBuffer sbValueBeforeMD5 = new StringBuffer();\n        try {\n            md5 = MessageDigest.getInstance(\"MD5\");\n        } catch (NoSuchAlgorithmException e) {\n            System.out.println(\"Error: \" + e);\n        }\n        try {\n            long time = System.currentTimeMillis();\n            long rand = 0;\n            if (secure) {\n                rand = mySecureRand.nextLong();\n            } else {\n                rand = myRand.nextLong();\n            }\n            sbValueBeforeMD5.append(s_id);\n            sbValueBeforeMD5.append(\":\");\n            sbValueBeforeMD5.append(Long.toString(time));\n            sbValueBeforeMD5.append(\":\");\n            sbValueBeforeMD5.append(Long.toString(rand));\n            valueBeforeMD5 = sbValueBeforeMD5.toString();\n            md5.update(valueBeforeMD5.getBytes());\n            byte[] array = md5.digest();\n            StringBuffer sb = new StringBuffer();\n            for (int j = 0; j < array.length; ++j) {\n                int b = array[j] & 0xFF;\n                if (b < 0x10) sb.append('0');\n                sb.append(Integer.toHexString(b));\n            }\n            valueAfterMD5 = sb.toString();\n        } catch (Exception e) {\n            System.out.println(\"Error:\" + e);\n        }\n    }\n", "code2": "    public void persist(FreeFormConfigurable ffConfigurable, String relativePath) {\n        File file = getConfigFile(ffConfigurable, relativePath, PROPERTIES_CONFIG_EXT);\n        InputStream is = ffConfigurable.getInputConfigStream();\n        try {\n            OutputStream os = new FileOutputStream(file);\n            IOUtils.copy(is, os);\n        } catch (Exception e) {\n            throw new ConfigurationException(\"Failed to store free from config for class \" + ffConfigurable.getClass().getName() + \" into file \" + file.getAbsolutePath());\n        }\n    }\n", "label": 0, "substitutes": {"getRandomGUID": ["getRandUuid", "getRandGuid", "getRandomUID", "getRandomUUID", "getRandomSUID", "getRandomUuid", "getRandUID", "getRandomGuid", "getRandGid", "getRandGID", "getRandomSid", "getRandUid", "getRandomCuid", "getRandUUID", "getRandomCid", "getRandomCUID", "getRandomGid", "getRandomUid", "getRandomSID", "getRandomGID", "getRandomCID", "getRandGUID", "getRandomSuid"], "secure": ["sec", " securely", "sr", "secret", "force", "nice", "dirty", "stable", " Secure", "service", "weak", "Secure", "strong", "safe", "trust", "status", "https", "ssl", "clear", "confirmed", "security", "google", "prime", "server", "encrypted", "quiet", "active", "ie", "protect", "pretty", "client", "sync", "sys", "http", "sensitive", " insecure"], "md5": ["MD2", "MD512", " md512", "md4", " mdle", "md45", "md6", "MDle", "sha3", " md3", "digle", "dig5", "MD5", "metadata3", " md2", "sha2", "sha512", "MD45", " md6", "MD3", "sha6", "md2", "dig4", "MD4", "mdle", " md45", "md512", "metadata5", "metadata2", "dig3", "sha5", " md4", "md3", "MD6", "metadata45"], "sbValueBeforeMD5": ["sbValueBeforeIM5", "sbValueAfterND2", "sbValueBeforeMD65", "sbValueBeforeMP5", "sbValueBeforeIM1", "sbValueAfterMD2", "sbValueBeforeMD1", "sbValueAfterMDson", "sbValueBeforemdFound", "sbValueBeforeDD512", "sbValueBeforeDS512", "sbValueBeforeLM2", "sbValueBeforeOLD512", "sbValueWithoutDD512", "sbValueBeforeMD512", "sbValueBeforemd5", "sbValueBeforeMT2", "sbValueBeforeDD2", "sbValueBeforeMACFive", "sbValueBeforeMOD3", "sbValueAfterMD4", "sbValueBeforeOLD2", "sbValueBeforeMP2", "sbValueBeforeAMDFound", "sbValueWithoutMD2", "sbValueWithoutMD5", "sbValueBeforemd2", "sbValueBeforeLM512", "sbValueBeforeIM2", "sbValueBeforeMD3", "sbValueAfterND5", "sbValueAfterND4", "sbValueBeforeMS5", "sbValueAfterMDLeft", "sbValueBeforeMPLeft", "sbValueBeforeND4", "sbValueBeforemdson", "sbValueAfterMD65", "sbValueBeforeMDFive", "sbValueBeforeMOD5", "sbValueWithoutDD5", "sbValueBeforeMDLeft", "sbValueBeforeMT5", "sbValueWithoutMD512", "sbValueBeforeMDFound", "sbValueBeforeMAC65", "sbValueAfterMD5", "sbValueBeforeMTson", "sbValueBeforeMT4", "sbValueBeforeAMDson", "sbValueBeforeMS3", "sbValueAfterMDFive", "sbValueBeforeMDson", "sbValueBeforeMD4", "sbValueAfterNDson", "sbValueAfterMD3", "sbValueBeforeMS1", "sbValueBeforeMS2", "sbValueBeforeND2", "sbValueBeforeMP1", "sbValueBeforeMAC5", "sbValueAfterMD1", "sbValueBeforeSM2", "sbValueBeforeMOD2", "sbValueBeforeAMD2", "sbValueBeforeSMson", "sbValueBeforeDD5", "sbValueAfterMDFound", "sbValueBeforeMAC2", "sbValueBeforeMD2", "sbValueBeforeLM5", "sbValueBeforeDDFive", "sbValueBeforeSM4", "sbValueBeforeOLD5", "sbValueWithoutDD2", "sbValueBeforeIMLeft", "sbValueBeforeDD65", "sbValueBeforeNDson", "sbValueBeforeAMD5", "sbValueBeforeSM5", "sbValueBeforeMOD1", "sbValueBeforeND5", "sbValueBeforeDS2", "sbValueBeforeDS5"], "time": ["system", "race", "when", "TIME", "id", "timer", "length", "timeout", "t", "start", "history", "current", "total", "runtime", "work", "age", "ts", "clock", "rate", "estamp", "duration", "times", "set", "counter", "date", "est", "user", "ime", "frame", "Time", "name", "tim", "today", "client", "hour", "etime", "value", "top", "ty", "year", "now", "size"], "rand": ["seed", "sample", "dr", "rid", "quant", "id", "mid", "uid", "std", "hash", "z", "nt", "did", "roll", "nd", "frac", "sid", "inv", "gz", "gen", "r", "rev", "range", "ng", "sam", "red", "rate", "res", "rank", "rh", "rss", "cr", "gt", "rot", "round", "serial", "rd", "init", "rt", "pid", "reg", "random", "rad", "dist", "and", "rc", "pick", "grad", "Rand"], "valueBeforeMD5": ["valueBeforeMD2", "valueAfterMD2", "valueAfterMD7", "valueAfterND2", "valueBeforeMC7", "valueAfterND7", "valueBeforeMOD5", "valueBeforeMT5", "valueBeforeMOD2", "valueBeforeMT2", "valueBeforeMD25", "valueBeforeMD7", "valueBeforeMC25", "valueBeforeND3", "valueBeforeND7", "valueAfterMD3", "valueBeforeMT25", "valueBeforeMOD7", "valueBeforeMC5", "valueBeforeND5", "valueAfterND5", "valueBeforeND2", "valueAfterND3", "valueBeforeMD3", "valueBeforeMOD3", "valueBeforeMT3", "valueBeforeMC2", "valueBeforeMC3"], "array": ["sample", "address", "batch", "number", "binary", "var", "pair", "ash", "angle", "length", "map", "hash", "angular", "arr", "row", "audio", "arrow", "record", "attribute", "storage", "external", "range", "a", "instance", " Array", "area", "ray", "expression", "feature", "buffer", "vector", "ary", "Array", "app", "raw", "RAY", "av", "atomic", "object", "random", "data", "our", "image", "list", "response", "rays", "share", "sh", "archive", "collection"], "sb": ["sr", "sq", "pb", "lp", "sw", "nb", "bt", "bg", "rb", "kb", "ctrl", "sg", "rob", "bb", "hs", "si", "obs", "sa", "bh", "ssl", "xb", "bis", "ib", "bps", "sf", "sth", "erb", "bs", "abb", "eb", "db", "wb", "bsp", "ub", "soc", "sv", "bf", "zb", "cb", "bp", "ob", "gc", "gb", "sh", "SB", "lb"], "j": ["js", "ji", "v", "ju", "jj", "aj", "dj", "str", "J", "k", "obj", "t", "z", "msg", "__", "ja", "_", "index", "i", "kj", "jo", "m", "je", "oj", "yy", "br", "ct", "job", "jp", "jump", "jack", "q", "jit", "ind", "jc", "ij", "att", "uj", "key", "jl", "ix", "us", "json", "g", "it", "bj", "off", "bot"], "b": ["d", "ba", "v", "bound", "bar", "nb", "bt", "bg", "be", "k", "bu", "rb", "ab", "bb", "a", "xb", "ib", "bis", "B", "fb", "br", "bs", "db", "eb", "u", "bd", "bf", "bp", "cb", "bi", "mb", "beta", "gb", "y", "bc"], "valueAfterMD5": ["valueBeforeMD2", "valueAfterMD2", "valueAfterMD7", "valueAfterID2", "valueAfterID5", "valueAfterID3", "valueBeforeMD7", "valueAftermd5", "valueAfterMD3", "valueAftermd2", "valueAfterID7", "valueBeforeMD3", "valueAftermd7", "valueAftermd3"]}}
{"id1": "742465", "id2": "13207437", "code1": "    public static void doVersionCheck(View view) {\n        view.showWaitCursor();\n        try {\n            URL url = new URL(jEdit.getProperty(\"version-check.url\"));\n            InputStream in = url.openStream();\n            BufferedReader bin = new BufferedReader(new InputStreamReader(in));\n            String line;\n            String version = null;\n            String build = null;\n            while ((line = bin.readLine()) != null) {\n                if (line.startsWith(\".version\")) version = line.substring(8).trim(); else if (line.startsWith(\".build\")) build = line.substring(6).trim();\n            }\n            bin.close();\n            if (version != null && build != null) {\n                if (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, url); else {\n                    GUIUtilities.message(view, \"version-check\" + \".up-to-date\", new String[0]);\n                }\n            }\n        } catch (IOException e) {\n            String[] args = { jEdit.getProperty(\"version-check.url\"), e.toString() };\n            GUIUtilities.error(view, \"read-error\", args);\n        }\n        view.hideWaitCursor();\n    }\n", "code2": "    public Object sendRequestObjectResponse(java.lang.String servletName, java.lang.String request) {\n        String osRoot = OSRoot.getRoot();\n        String fname = \"\";\n        Object retobj = null;\n        String myurl = java.util.prefs.Preferences.systemRoot().get(\"serverurl\", \"\");\n        String myport = java.util.prefs.Preferences.systemRoot().get(\"portno\", \"8080\");\n        if (myport == null || myport.trim().equals(\"\")) {\n            myport = \"80\";\n        }\n        if (this.serverURL == null) {\n            try {\n                java.net.URL codebase = newgen.presentation.NewGenMain.getAppletInstance().getCodeBase();\n                if (codebase != null) serverURL = codebase.getHost(); else serverURL = \"localhost\";\n            } catch (Exception exp) {\n                exp.printStackTrace();\n                serverURL = \"localhost\";\n            }\n            newgen.presentation.component.IPAddressPortNoDialog ipdig = new newgen.presentation.component.IPAddressPortNoDialog(myurl, myport);\n            ipdig.show();\n            serverURL = myurl = ipdig.getIPAddress();\n            myport = ipdig.getPortNo();\n            java.util.prefs.Preferences.systemRoot().put(\"serverurl\", serverURL);\n            java.util.prefs.Preferences.systemRoot().put(\"portno\", myport);\n            System.out.println(serverURL);\n        }\n        try {\n            System.out.println(\"http://\" + serverURL + \":\" + myport + \"/newgenlibctxt/\" + servletName);\n            java.net.URL url = new java.net.URL(\"http://\" + serverURL + \":\" + myport + \"/newgenlibctxt/\" + servletName);\n            java.net.URLConnection urlconn = (java.net.URLConnection) url.openConnection();\n            urlconn.setDoOutput(true);\n            urlconn.setRequestProperty(\"Content-type\", \"text/xml; charset=UTF-8\");\n            java.io.OutputStream os = urlconn.getOutputStream();\n            String req1xml = request;\n            java.util.zip.CheckedOutputStream cos = new java.util.zip.CheckedOutputStream(os, new java.util.zip.Adler32());\n            java.util.zip.GZIPOutputStream gop = new java.util.zip.GZIPOutputStream(cos);\n            java.io.OutputStreamWriter dos = new java.io.OutputStreamWriter(gop, \"UTF-8\");\n            System.out.println(req1xml);\n            try {\n                java.io.FileOutputStream pw = new java.io.FileOutputStream(\"log.txt\");\n                pw.write(req1xml.getBytes());\n                pw.flush();\n                pw.close();\n            } catch (Exception exp) {\n                exp.printStackTrace();\n            }\n            dos.write(req1xml);\n            dos.flush();\n            dos.close();\n            System.out.println(\"url conn: \" + urlconn.getContentEncoding() + \"  \" + urlconn.getContentType());\n            java.io.InputStream ios = urlconn.getInputStream();\n            java.io.File f1 = new java.io.File(osRoot + \"/localattachments/Reports\");\n            if (!f1.exists()) f1.mkdirs();\n            java.io.File file = null;\n            if (urlconn.getContentType() != null && urlconn.getContentType().trim().equals(\"application/vnd.oasis.opendocument.text\")) {\n                file = new java.io.File(osRoot + \"/localattachments/Reports/\" + System.currentTimeMillis() + \".odt\");\n            } else if (urlconn.getContentType() != null && urlconn.getContentType().trim().equals(\"text/html\")) {\n                file = new java.io.File(osRoot + \"/localattachments/Reports/\" + System.currentTimeMillis() + \".html\");\n            } else {\n                file = new java.io.File(osRoot + \"/localattachments/Reports/\" + System.currentTimeMillis() + \".xls\");\n            }\n            file = new java.io.File(file.getAbsolutePath());\n            java.io.FileOutputStream fos = new java.io.FileOutputStream(file);\n            int c;\n            while ((c = ios.read()) != -1) fos.write(c);\n            fos.close();\n            ios.close();\n            fname = file.getAbsolutePath();\n            System.out.println(fname);\n            newgen.presentation.component.Utility.getInstance().showBrowser(\"file://\" + fname);\n        } catch (Exception exp) {\n            exp.printStackTrace(System.out);\n            javax.swing.JOptionPane.showMessageDialog(null, \"<html>Could not establish connection with the server, <br>Please verify server name/IP adress, <br>Also check if NewGenLib server is running</html>\", \"Critical error\", javax.swing.JOptionPane.ERROR_MESSAGE);\n        }\n        return fname;\n    }\n", "label": 1, "substitutes": {"doVersionCheck": ["DoDatecheck", "doDateCheck", "DoVersionCheck", "DoVersioncheck", "doLicenseFix", "doLicenseUpdate", "doLicenseCheck", "doVersionsUpdate", "doVersionsCheck", "doVersionscheck", "DoDateFix", "DoDateUpdate", "doDatecheck", "doVersioncheck", "doVersionUpdate", "DoVersionFix", "DoVersionUpdate", "DoDateCheck", "doDateFix", "doVersionsFix", "doDateUpdate", "doVersionFix", "doLicensecheck"], "view": ["cv", "subject", "v", "cell", "file", "show", "help", "VIEW", "print", "wrapper", "component", "browser", "blade", "update", "context", "row", "View", "review", "manager", "eye", "open", "call", "widget", "index", "model", "check", "query", "block", "host", "html", "console", "server", "engine", "form", "web", "buffer", "table", "iew", "out", "get", "q", "page", "doc", "input", "see", "tree", "document", "client", "hl", "util", "http", "views", "report", "image", "self", "window", "layout", "tv", "controller", "this", "display"], "url": ["sl", "gl", "address", "lr", "v", "path", "string", "file", "Url", "log", "str", "nl", "id", "b", "char", "oul", "browser", "ls", "r", "dl", "null", "ll", "pl", "host", "ssl", "link", "html", "language", "f", "uri", "rel", "location", "URL", "web", "loc", "date", "ur", "github", "client", "hl", "bel", "http", "socket", "rl", "mount", "l", "json", "org", "lb", "ul"], "in": ["ln", "kin", "file", "sin", "asin", "b", "is", "inf", "cin", "reader", " IN", "IN", "n", "i", "inc", "inner", " din", "f", "out", "din", "init", "vin", "input", "isin", "gin", "In", "source", "mn", "ins", "rin", "l", "info", "body", "ain", "stream", "mat", "inn"], "bin": ["local", "ln", "win", "bed", "cos", "binary", "lib", "file", "by", "sin", "nb", "b", "bg", "loader", "rb", "mon", "cin", "abin", "pipe", "reader", "thin", "len", "bl", "sam", "inner", "mem", "bur", " din", " Bin", "stock", "buffer", "buff", "out", "din", "conn", "gin", "obin", "ran", "bn", "rin", "cache", "bi", " bins", "spin", "ebin", "con", "inn"], "line": ["text", "ln", "err", "path", "sample", "cell", "string", "file", "log", "field", "cat", "inline", "point", "channel", "print", "part", "char", "level", "store", "row", "ls", "no", "record", "style", "section", "range", "word", "ice", "block", " Line", "port", "code", "link", "col", "base", "job", "iter", "trace", "page", "lin", "column", "ide", "lo", "frame", "liner", "comment", "load", "lines", "ine", "lane", "le", "eline", "one", "chain", "el", "Line", "l", "LINE", "cmd", "state", "body", "entry", "se"], "version": ["river", "v", "match", "description", "number", "string", "sequence", "tag", "resource", "test", "browser", "latest", "update", "vision", "hash", "ion", "position", "scale", "index", "VERSION", "title", "release", "status", "volume", "Version", "vers", "license", "language", "form", "feature", "serial", "format", "date", "software", "project", "versions", "video", "client", "spec", "python", "major", "name", "value", "image", "key", "virtual", "VER", "info", "ver", "type", "translation", "usage", "iso", "command"], "build": ["where", "bor", "uild", "match", "log", "binary", "lib", "make", "tag", "print", "b", "test", "old", "be", "struct", "update", "ward", "hash", "latest", "bug", "style", "work", "other", "release", "built", "link", "builder", "round", "building", "Build", "fail", "th", "date", "project", "db", "last", "ship", "develop", "util", "load", "dist", "add", "boost", "use", "ble", "install", "hold", "ver", "unit", "dev", "full", "arch"]}}
{"id1": "20091126", "id2": "13414771", "code1": "    static File copy(File in, File out) throws IOException {\n        FileChannel inChannel = new FileInputStream(in).getChannel();\n        FileChannel outChannel = new FileOutputStream(out).getChannel();\n        try {\n            inChannel.transferTo(0, inChannel.size(), outChannel);\n            return out;\n        } catch (IOException e) {\n            throw e;\n        } finally {\n            if (inChannel != null) inChannel.close();\n            if (outChannel != null) outChannel.close();\n        }\n    }\n", "code2": "    @Digester(forField = \"password\")\n    public static String encriptPassword(String passwd) {\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            md.update(passwd.getBytes());\n            BigInteger hash = new BigInteger(1, md.digest());\n            return hash.toString(16);\n        } catch (Exception e) {\n            return null;\n        }\n    }\n", "label": 0, "substitutes": {"copy": ["system", "file", "clone", "delete", "Cop", "cat", "io", "store", "map", "open", "call", "cp", "to", "write", "paste", "get", "create", "Copy", "upload", "download", "transfer", "load", " Copy", "save", "move", "Transfer", "sync", "y"], "in": ["file", "en", "id", "io", "b", "old", "inf", "up", "cin", "from", "r", "ini", "IN", "inc", "i", "n", "inner", " din", "din", "ck", "init", " input", "isin", "input", "ind", "mm", "gin", "In", "source", "el", "ins", "rin", "l", "info", "ain", "inn"], "out": ["err", "v", "bytes", "at", "log", "file", "p", "io", "channel", "b", "t", "e", "ot", "nt", "msg", "_", "output", " output", "c", "ex", "n", "to", "null", "write", "res", "gt", "o", "as", "net", "result", "s", "end", "tmp", "ch", "x", "OUT", "one", "or", " it", "self", "Out", "l", " os", "it", "ou", "outs", "y", "co", "os", "w"], "inChannel": ["inConnection", "InChan", "conConnection", " inConnection", "insideSection", "insideChannel", "inBlock", "inChain", "binChannel", "innChannel", "inCommand", "outCommand", "inChuck", "INChan", " inchannel", "binChuck", " inSection", "INListener", "inListener", "inRow", " inRow", "incChannel", "innchannel", "cinchannel", "ginChuck", "binPanel", "InConnection", "innChan", "innConnection", "ginChain", "insideRow", " inBlock", "cinCommand", "conChannel", "binSection", "ginChannel", " inChan", "INConnection", "binChain", "INChannel", " inListener", "ginPanel", "conListener", "outchannel", "outBlock", "inChan", "inchannel", "incPanel", "cinBlock", "InChannel", " inCommand", "cinChannel", "incChuck", "binCommand", "inSection", "Inchannel", "conChan", "inPanel", "binRow", "insideCommand", "incChain"], "outChannel": ["OUTChannel", "outChan", " outMany", "outSlot", "Outchannel", "outputChannel", "moduleChannel", "cmdChan", " outGate", "cmdGate", "OutChan", "OUTSlot", " outPassword", "inUser", "outCh", "OUTChan", "moduleManager", "skyGate", " outChan", "outGate", "modulePassword", "inCh", "OutChannel", "OUTUser", "skyMany", "cosSlot", "inSlot", "cosChan", "cosChannel", "outMany", " outCh", "outchannel", "inChan", "inchannel", "moduleChan", "OutCh", "cmdMany", " outManager", "cmdChannel", "outputChan", "outputManager", "outPassword", " outchannel", "outUser", "skyChan", "outputPassword", "outManager", "skyChannel", "cosUser"]}}
{"id1": "7276377", "id2": "20208819", "code1": "    public static String checksum(URL url, String algorithm) {\n        MessageDigest messageDigest;\n        try {\n            messageDigest = MessageDigest.getInstance(algorithm);\n        } catch (Exception ex) {\n            throw new RuntimeException(\"Could not create an instance of MessageDigest\", ex);\n        }\n        byte[] bytes = new byte[4 * 1024];\n        try {\n            InputStream in = null;\n            try {\n                in = url.openStream();\n                int nBytesRead = 0;\n                while ((nBytesRead = in.read(bytes)) > 0) {\n                    messageDigest.update(bytes, 0, nBytesRead);\n                }\n            } finally {\n                if (in != null) {\n                    in.close();\n                }\n            }\n        } catch (Exception e) {\n            throw new RuntimeException(\"Could not read message digest for: \" + url.toExternalForm() + \" using algorithm: \" + algorithm);\n        }\n        byte[] checksumValue = messageDigest.digest();\n        return digestAsString(checksumValue);\n    }\n", "code2": "    private static final String hash(String input, String algorithm) {\n        try {\n            MessageDigest dig = MessageDigest.getInstance(algorithm);\n            dig.update(input.getBytes());\n            StringBuffer result = new StringBuffer();\n            byte[] digest = dig.digest();\n            String[] hex = { \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\" };\n            for (int i = 0; i < digest.length; i++) {\n                int u = digest[i];\n                u &= 0x000000FF;\n                int highCount = u / 16;\n                int lowCount = u - (highCount * 16);\n                result.append(hex[highCount]);\n                result.append(hex[lowCount]);\n            }\n            return result.toString();\n        } catch (NoSuchAlgorithmException e) {\n            return null;\n        }\n    }\n", "label": 0, "substitutes": {"checksum": ["csam", "checksume", "cksum", "checksest", "cksest", "cksume", "csume", "csest", " checksume", "checksam", "cksam", " checksam", " checksest", "csum"], "url": ["build", "path", "address", "gl", "log", "file", "Url", "string", "str", "nl", "mail", "char", "browser", "ls", "email", "dl", "dll", "ll", "pattern", "host", "https", "ssl", "html", "location", "link", "uri", "base", "config", "URL", "rel", "web", "loc", "get", "ur", "q", "document", "name", "u", "bel", "http", "image", "key", "mount", "el", "rect", "l", "request", "xml", "domain", "ul"], "algorithm": ["aliment", "operabet", "malgorithm", "alabet", "opergorithm", "approgorith", "Algo", "Alabet", "Algorithm", "Alignment", "approgo", "palter", "malgo", " algo", "altergo", "malignment", "algo", "Algorith", "maliment", "Aliment", " algorith", "alignment", "alterignment", "alteriment", "operter", "altergorithm", "palabet", "palgorithm", "palgo", "approgorithm", "Alter", "Alculus", "approculus", "algorith", " alculus", "opergo", "alculus", "alter"], "messageDigest": ["messageDigidate", "messagedigests", "applicationDesignests", "messageCheckse", "messageDigist", "messageDesignests", "messageMerist", "messageDebuger", "messageMerest", "applicationDigest", "Messagedigse", "messageDse", "Messagedigest", "messageDebugse", "messageHaser", "messageHasest", "messageDigse", "messageDebugest", " messageDiger", "MessageDigest", "messageDum", "applicationDigester", "messageDesignester", "messageHasests", "messageDigests", "applicationDiger", "MessageDigse", "MessageDigum", "messageHasester", "messageCheckum", "messagedigum", "messageDigester", "applicationDesignester", "messageDer", "applicationDesigner", "messageDesignest", "Messagedigum", "messagedigest", "messagedigidate", " messageDigist", "messagediger", "MessageDiger", "applicationDigests", "messagedigist", "messageDigum", "applicationDesignest", "messageCheckest", "Messagediger", "messageDiger", "messageMerse", "messagedigester", "messageDesigner", "messageDest", " messageDigidate", "messageChecker", " messageDigse", "messagedigse", "messageDebugidate"], "bytes": ["resources", "pieces", "bos", "vs", "notes", "terms", "groups", "eps", "strings", "blocks", "bits", "users", "tes", "Bytes", "jobs", "gs", "names", "steps", "images", "pages", "units", "ces", "es", "bps", "pointers", "frames", "parts", "bs", "out", "files", "its", "ones", "versions", "vals", "bes", "services", "lines", "items", "seconds", "rows", "ies", "checks", "words", "ions", "types", "outs", "classes", "gb", "gets", "values"], "in": ["mc", "serv", "again", "h", "en", "p", "by", "io", "asin", "is", "inf", "t", "up", "al", "cin", "from", "conf", "mi", "reader", "re", "null", "n", "inc", "i", "IN", "inner", "check", "pi", "m", "on", "o", "form", "ma", "out", "din", "oin", "init", "impl", "input", "isin", "ind", "client", "name", "gin", "In", "source", "or", "socket", "ai", "one", "ins", "rin", "l", "it", "handle", "nin", "info", "bin", "can", "proc", "ain", "co", "con", "inn"], "nBytesRead": ["nItemsRead", "NBytesWritten", "NRsRead", "nBytesWritten", "nRsRead", "nBytesRun", "NBytesRun", "nTokensread", "nTokensRead", "NBytesRead", " nRsread", "nRsFound", "nbytesSupported", "nFilesRun", "nbytesRead", "nBytesSupported", " nItemsFound", "nItemsFound", "nRsReader", "nBytesFound", "nbytesread", " nRsSupported", "nRsRun", "nFramesSupported", "nFramesRead", "nbytesWritten", " nItemsReader", "nTokensRun", "nTokensWritten", "NBytesread", "NRsRun", "nBytesReader", "nItemsReader", "NRsread", "nRsread", "nBytesread", "nFilesRead", "nFramesread", "nFilesread", "nFramesWritten", " nBytesSupported", " nBytesread", " nBytesFound", " nItemsRead", "NRsWritten", "nFilesWritten", "nRsSupported", " nRsWritten", " nRsRead", "nItemsWritten", "nRsWritten", "nFramesReader", "nFramesFound", " nBytesWritten", " nBytesReader", " nItemsWritten"], "checksumValue": ["checksUMValue", "checksumVal", "checksummDocument", "checksumvalue", "checksumData", "checksUMValues", " checksumVal", "checksummValue", " checksamVal", "checksumedData", " checksamDocument", "checksamDocument", " checksummModel", "checksumValues", " checksumValues", "checksumerModel", "checksumedValue", "checksumerValues", "checksummValues", " checksumvalue", "checksamData", " checksumDocument", "checksamValue", "checksumedDocument", " checksummvalue", " checksummValues", " checksamData", "checksumervalue", " checksumModel", " checksumData", "checksummVal", "checksumModel", " checksamValue", "checksummvalue", "checksumerValue", " checksummValue", "checksumDocument", "checksamVal", "checksUMvalue", "checksummModel", "checksUMModel", "checksummData", "checksumedVal"]}}
{"id1": "21608109", "id2": "22035737", "code1": "    public static boolean loadContentFromURL(String fromURL, String toFile) {\n        try {\n            URL url = new URL(\"http://bible-desktop.com/xml\" + fromURL);\n            File file = new File(toFile);\n            URLConnection ucon = url.openConnection();\n            InputStream is = ucon.getInputStream();\n            BufferedInputStream bis = new BufferedInputStream(is);\n            ByteArrayBuffer baf = new ByteArrayBuffer(50);\n            int current = 0;\n            while ((current = bis.read()) != -1) {\n                baf.append((byte) current);\n            }\n            FileOutputStream fos = new FileOutputStream(file);\n            fos.write(baf.toByteArray());\n            fos.close();\n        } catch (IOException e) {\n            Log.e(TAG, e);\n            return false;\n        }\n        return true;\n    }\n", "code2": "    private static void loadMappings(Configuration cfg) {\n        try {\n            Enumeration en = LoadingUtils.getResources(MAPPINGS_FILE);\n            while (en.hasMoreElements()) {\n                URL url = (URL) en.nextElement();\n                logger.info(\"Found mapping module \" + url.toExternalForm());\n                InputStream inputStream = null;\n                try {\n                    inputStream = url.openStream();\n                    HibConfiguration hm = loadModuleMappings(inputStream);\n                    configureModuleMappings(cfg, hm.getSessionFactory());\n                } catch (IOException e) {\n                    logger.warn(\"Could not load mappings file \\\"\" + url.toExternalForm() + \"\\\"\", e);\n                } catch (JAXBException e) {\n                    logger.warn(\"Unable to instantiate JAXBContext \", e);\n                } finally {\n                    try {\n                        if (inputStream != null) inputStream.close();\n                    } catch (IOException e) {\n                        logger.debug(e);\n                    }\n                }\n            }\n        } catch (IOException e) {\n            logger.warn(\"Could not find any mappings file hibernate.mappings.xml\", e);\n        }\n    }\n", "label": 0, "substitutes": {"loadContentFromURL": ["loadFileFromUR", "loadFileFormURI", "loadContentFormURL", "loadFileFormUrl", "loadContentFromURI", "loadFileFormURL", "loadContentFromUrl", "loadFileFromUrl", "loadFileFromURL", "loadContentWithUrl", "loadContentWithUR", "loadContentAsUR", "loadFileFormUR", "loadContentAsURL", "loadContentFormURI", "loadContentAsURI", "loadContentWithURL", "loadContentFormUrl", "loadContentFromUR", "loadContentAsUrl", "loadContentWithURI", "loadContentFormUR", "loadFileFromURI"], "fromURL": ["toUrl", "toUR", "FromUR", " fromURI", "fromUrl", "FromURI", "toURI", " fromUrl", "fromURI", "fromUR", " fromUR", "FromURL", "FromUrl", "toURL"], "toFile": [" toFilename", " toFILE", "TOFILE", "targetFile", "topPath", "targetFilename", "TOFile", " tofile", "toFilename", "TOfile", "targetfile", "ToFILE", " toPath", "TOFilename", "targetFILE", "ToFilename", "topFilename", "topFILE", "tofile", "ToFile", "topFile", "toPath", "toFILE", "ToPath"], "url": ["build", "sl", "gl", "Url", "li", "abs", "str", "nl", "mail", "b", "browser", "open", "r", "cp", "dl", "atl", "ll", "https", "ssl", "link", "f", "uri", "rel", "base", "URL", "job", "web", "loc", "ur", "conn", "un", "deb", "u", "bel", "hl", "http", "mount", "l", "xml", "con", "lb", "ul"], "file": ["local", "path", "log", "fil", "io", "resource", "FILE", "print", "disk", "ile", "File", "output", "filename", "to", "library", "port", "auto", "link", "f", "base", "buffer", "table", "result", "page", "out", "format", "files", "project", "user", "db", "fp", "name", "document", "template", "spec", "le", "report", "image", "info", "ome"], "ucon": ["uconn", "uCon", " uconv", "upconv", "uco", "euconv", "upcon", "Uco", "UCon", "euco", "upconn", "uconv", "euconn", " uco", "upCon", "upco", "Uconn", "Ucon", "eucon", " uconn", " uCon"], "is": ["iss", "isl", "isa", "ists", "sis", "in", "mis", "ais", "ri", "iris", "si", "i", "ios", "are", "sit", "fs", "IS", "ses", "s", "bs", "lis", "ois", "its", "\u00eds", "isin", "ris", "sys", "tis", "Is", "nis", "us", "ui", "info", "isi", "isc", "os", "iso"], "bis": ["bos", "bid", "sis", "fits", "cin", "oi", "ais", "iris", "rison", "bits", "mos", "mis", "ios", "obs", "bh", "ses", "fps", "pins", "sb", "bs", "los", "lis", "bil", "its", "lbs", "isin", "ris", "bes", "details", "ints", "nis", "bi", "bin", "isi", "os", "iso", "webkit"], "baf": ["fbab", "fAF", "fafa", "braf", " baff", "bbaff", "bbaf", "fab", "faf", "baff", "fbaft", " bab", "baft", "bbab", " buf", " braf", "fbafa", "beraf", "beaf", "faff", "bAF", " bAF", "bab", "bbAF", "bafa", "beab", "beuf", " baft", " bafa", "buf", "faft", "fbaf", "fraf", "fuf"], "current": ["cur", "currently", "number", "sequence", "aj", "variable", "dirty", "length", "component", "selected", "count", "latest", "remote", "position", "reported", "context", "Current", "total", "progress", "open", "attribute", "copy", "complete", "index", "primary", "widget", "present", "valid", "counter", "result", "active", "urrent", "client", "random", "comment", "direction", "recent", "currency", "cont", "pointer", "directory", "unique", "next", "available", "continue", "URRENT", "integer", "now", "collection"], "fos": ["fboss", "sfos", "Fos", "oos", " fof", "fob", "woss", "oob", " fOS", "vOS", "sfof", "fof", "fbos", "wof", "vof", "fbOS", "foss", "FoS", "vos", "Foss", "foS", "Fob", "fboos", " foss", "fbof", "foos", " foos", "ooss", "fboS", "sfoss", "voos", "fOS", "wos", "ooS", "fbob"]}}
{"id1": "14688886", "id2": "8417584", "code1": "    static void populateResources() throws BasicException {\n        try {\n            List<URL> templates = DatabaseValidator.listResources(\"/net/adrianromero/templates/\" + Locale.getDefault().getLanguage());\n            if (templates.size() == 0) {\n                templates = DatabaseValidator.listResources(\"/net/adrianromero/templates/en\");\n            }\n            for (URL url : templates) {\n                String fileName = url.getFile();\n                fileName = fileName.substring(fileName.lastIndexOf('/') + 1);\n                if (fileName.endsWith(\".xml\") || fileName.endsWith(\".txt\")) {\n                    Resource templateResource = new Resource(fileName.substring(0, fileName.length() - 4));\n                    InputStream is = url.openStream();\n                    StringBuffer strBuff = new StringBuffer();\n                    BufferedReader br = new BufferedReader(new InputStreamReader(is));\n                    String str;\n                    while ((str = br.readLine()) != null) {\n                        strBuff.append(str + \"\\n\");\n                    }\n                    templateResource.setText(strBuff.toString());\n                    templateResource.save();\n                }\n            }\n        } catch (MalformedURLException e1) {\n            logger.error(\"Unable to load templates\", e1);\n        } catch (IOException e1) {\n            logger.error(\"Unable to load templates\", e1);\n        }\n        String[][] images = new String[][] { { \"default.user\", \"yast_sysadmin.png\" }, { \"default.product\", \"colorize.png\" }, { \"Window.Logo\", \"windowlogo.png\" }, { \"Image.Backarrow\", \"3backarrow.png\" } };\n        for (int i = 0; i < images.length; i++) {\n            Image img = new Image();\n            img.setBufferedImage(ImageUtils.readImage(DatabaseValidator.class.getResource(\"/net/adrianromero/images/\" + images[i][1])));\n            img.save();\n            Property imgProperty = new Property(images[i][0]);\n            imgProperty.setValue(\"\" + img.getId());\n            imgProperty.save();\n        }\n    }\n", "code2": "    private String getResultFromHttpUrl(String href) {\n        String result = null;\n        try {\n            URL url = new URL(href);\n            HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n            Object o = conn.getContent();\n            log.debug(\"Opened \" + href + \" and got class \" + o.getClass().getName());\n            StringBuffer version = new StringBuffer();\n            String inputLine;\n            DataInputStream dis = new DataInputStream(conn.getInputStream());\n            while ((inputLine = dis.readLine()) != null) {\n                version.append(inputLine + \"\\n\");\n            }\n            result = version.toString();\n            log.debug(\"Read from URL:\\n\" + result);\n            dis.close();\n        } catch (Exception e) {\n            log.debug(\"Caught exception \" + e + \" whilst attempting to query URL \" + href);\n            e.printStackTrace();\n        } finally {\n            return result;\n        }\n    }\n", "label": 0, "substitutes": {"populateResources": ["PopulateResource", "PopureReferences", "populatedResources", "populateFiles", "populateReferences", "populatedResource", "populateResource", "PopureResource", "PopureFiles", "populatesResources", "populatedFiles", "populatedReferences", "populatesReferences", "PopulateFiles", "popureFiles", "popureResource", "PopureResources", "popureReferences", "PopulateResources", "PopulateReferences", "populatesResource", "populatesFiles", "popureResources"], "templates": ["temmen", "sequplates", "memeters", "tctions", "tples", "memples", "Templates", "sequples", "temiles", "tplates", "tmports", "Temples", "temporary", " temctions", "typles", "temples", "tables", "filports", "temables", "tmmen", "tenplates", "tyables", "tmeters", "Temmen", "memables", "temctions", "teniles", "filplates", "timporary", "tyeters", "filples", "tenables", "tmplates", "typlates", "timplates", " temiles", "temeters", "teters", "temports", "filmen", "sequeters", "tmples", "Temports", "tiles", "sequporary", " temables", "timples", "memplates", "timeters", "tenctions", "tmporary"], "url": ["sl", "item", "address", "gl", "path", "string", "file", "Url", "p", "li", "term", "nl", "resource", "mail", "b", "char", "e", "browser", "row", "r", "dl", "n", "a", "ll", "res", "pattern", "pl", "m", "ssl", "location", "link", "f", "uri", "rel", "html", "URL", "base", "web", "get", "ur", "ml", "name", "u", "http", "rl", "key", "mount", "rect", "l", "handle", "mb", "ref", "entry"], "fileName": ["templatename", "fileTime", " filePath", "ileLine", " fileParent", " filename", "ilePath", "familyLoad", "familyTime", "urlKey", "moduleType", "familyname", "FILELine", "FileKey", "ileFull", "resourceName", "Filename", " fileFull", "fileFamily", "fName", "FILECopy", "resourceType", "fileKey", "moduleName", "FilePart", "fileType", "fileParent", " fileLoad", "familyName", "filenameName", "fileCopy", "fileString", "FILEName", " fileType", "filePart", "FileBody", "namePart", "filename", "fPath", "nameParent", "tileName", "filenameParent", " fileTitle", "tileCopy", "blockname", "fileFull", "FILEname", " fileString", "FileFamily", "ilename", " fileTime", "templatePath", "urlFamily", "ileCopy", "moduleKey", "FileFull", "FileString", "blockTime", " fileBody", "urlPath", "FilePath", "blockLoad", "moduleTitle", " filePart", "FileName", "nameName", "filenamePart", "filePath", "blockName", "fileLoad", "tilename", "fileLine", "resourceKey", " fileKey", "resourceTitle", "filenamename", "fileTitle", "templateString", " fileFamily", "urlName", "fname", "tileLine", "templateName", "fileBody", "namename", "ilePart", "ileName", "fBody"], "templateResource": ["componentReference", "resourceProperty", "TemplateEntry", " templateResources", " templateEntry", "templateProperty", "TemplateResource", " templateProperty", "TemplateResources", "templateResources", "resourceRes", "resourceEntry", "documentResource", "templateRes", "templateReference", " templateReference", "componentResource", "documentRes", "TemplateReference", "resourceResource", "TemplateRes", " templateRole", "TemplateProperty", " templateRes", "templateRole", "resourceRole", "componentResources", "documentRole", "templateEntry", "componentRes"], "is": ["iss", "ic", "isl", "isa", "sis", "in", "ais", "ri", "iris", "rs", "rys", "ios", "are", "bis", "fs", "es", "as", "IS", "bs", "lis", "its", "\u00eds", "ris", "sys", "im", "isf", "Is", "ins", "nis", "ir", "fr", "us", "sels", "isi", "isc", "os", "iso"], "strBuff": [" strBuffer", "strFac", "drBuff", "stringBuff", "arrBuff", "brBuff", " strComp", " strComb", " strbuff", " strFac", "arrFac", "stringBuffer", "StrBuffer", "strBu", "strBuffer", " strBas", "strComp", " strBu", "brBuffer", "drBuffer", "arrComb", "StrBuff", "arrBuffer", "stringComb", "brBu", "strbuff", "StrFac", "strComb", "Strbuff", "drBu", "arrBas", "stringBas", "arrbuff", "brComp", "strBas", "drComp"], "br": ["sr", "dr", "lr", "BR", "ctr", "yr", "bt", "b", "bg", "rb", "vr", "mr", "r", "bl", "bro", "cr", "bh", "ber", "hr", "bs", "wr", "ch", "bm", "gr", "pr", "bd", "bn", "bf", "bp", "tr", "shr", "fr", "bi", "kr", "next", "buf", "er", "bc", "Br"], "str": ["text", "err", "sl", "dr", "ust", "St", "pt", "string", "ctr", "p", "txt", "print", "t", "st", "obj", "stable", "arr", "msg", "r", "bl", "n", "cs", "res", "cr", "Str", "set", "seq", "sp", "s", "STR", "draw", "gr", "cert", "name", "spec", "pr", "sts", "cont", "chain", "list", "tr", "coll", "fr", "g", "ocr", "del"], "images": ["resources", "assets", "arms", "eds", "vs", "ups", "modules", "eps", "xs", "boxes", "ids", "ages", "blocks", "reports", "names", "pages", "ims", "games", "Textures", "times", "ms", "pins", "frames", "files", " Images", "videos", "versions", "actions", " pictures", "media", "Images", "items", "views", "styles", "faces", "atts", " photos", "image", "scripts", "uploads", "photos", "amps", "ins", "raphics", "rooms", "types", "apps", "thumbnails"], "i": ["I", "ini", "ci", "m", "gu", "name", "qi", "key", "ix", "ui", "this", "y", "v", "p", "gi", "io", "phi", "mi", "status", "cli", "get", "http", "me", "ip", "ti", "li", "id", "my", "si", "n", "pi", "def", "multi", "ei", "ij", "x", "im", "ai", "sim", "it", "bi", "hi", "Exception", "ami", "di", "ki", "ii", "j", "_", "index", "mu", "xi", "ie", "u", "us", "info"], "img": ["Image", "file", "medium", "p", "li", "src", "gd", "aug", "bg", "obj", "imp", "j", "pg", "r", "fig", "bl", "a", "m", "html", "md", "f", "anim", "small", "gif", "tmp", "iam", "av", "png", "mk", "att", "ij", "jpg", "im", "mg", "image", "amp", "fm", "mp", "pic", "pkg", "g", "gm", "buf", "ami", "div"], "imgProperty": ["imageProp", " tmpProperty", "imagePro", " imgProp", " tmpPro", "imageProperty", " imgPro", " tmpImage", " imgImage", " tmpProp", "imageImage", "imgProp", "imgImage", "imgPro"]}}
{"id1": "21754659", "id2": "1954410", "code1": "    private JButton getButtonSonido() {\n        if (buttonSonido == null) {\n            buttonSonido = new JButton();\n            buttonSonido.setText(Messages.getString(\"gui.AdministracionResorces.15\"));\n            buttonSonido.setIcon(new ImageIcon(getClass().getResource(\"/es/unizar/cps/tecnoDiscap/data/icons/view_sidetree.png\")));\n            buttonSonido.addActionListener(new java.awt.event.ActionListener() {\n\n                public void actionPerformed(java.awt.event.ActionEvent e) {\n                    JFileChooser fc = new JFileChooser();\n                    fc.addChoosableFileFilter(new SoundFilter());\n                    int returnVal = fc.showDialog(AdministracionResorces.this, Messages.getString(\"gui.AdministracionResorces.17\"));\n                    if (returnVal == JFileChooser.APPROVE_OPTION) {\n                        File file = fc.getSelectedFile();\n                        String rutaGlobal = System.getProperty(\"user.dir\") + \"/\" + rutaDatos + \"sonidos/\" + file.getName();\n                        String rutaRelativa = rutaDatos + \"sonidos/\" + file.getName();\n                        try {\n                            FileInputStream fis = new FileInputStream(file);\n                            FileOutputStream fos = new FileOutputStream(rutaGlobal, true);\n                            FileChannel canalFuente = fis.getChannel();\n                            FileChannel canalDestino = fos.getChannel();\n                            canalFuente.transferTo(0, canalFuente.size(), canalDestino);\n                            fis.close();\n                            fos.close();\n                            imagen.setSonidoURL(rutaRelativa);\n                            System.out.println(rutaGlobal + \" \" + rutaRelativa);\n                            buttonSonido.setIcon(new ImageIcon(getClass().getResource(\"/es/unizar/cps/tecnoDiscap/data/icons/view_sidetreeOK.png\")));\n                            gui.getAudio().reproduceAudio(imagen);\n                        } catch (IOException ex) {\n                            ex.printStackTrace();\n                        }\n                    } else {\n                    }\n                }\n            });\n        }\n        return buttonSonido;\n    }\n", "code2": "    protected ActionForward doExecute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        ActionMessages errors = new ActionMessages();\n        try {\n            boolean isMultipart = FileUpload.isMultipartContent(request);\n            Mail mailInstance = getMailInstance(request);\n            if (isMultipart) {\n                Map fields = new HashMap();\n                Vector attachments = new Vector();\n                List items = diskFileUpload.parseRequest(request);\n                Iterator iter = items.iterator();\n                while (iter.hasNext()) {\n                    FileItem item = (FileItem) iter.next();\n                    if (item.isFormField()) {\n                        if (item.getFieldName().equals(\"forwardAttachments\")) {\n                            String[] aux = item.getString().split(\":\");\n                            MailPartObj part = mailInstance.getAttachment(aux[0], aux[1]);\n                            attachments.addElement(part);\n                        } else {\n                            fields.put(item.getFieldName(), item.getString());\n                        }\n                    } else {\n                        if (!StringUtils.isBlank(item.getName())) {\n                            ByteArrayOutputStream baos = null;\n                            try {\n                                baos = new ByteArrayOutputStream();\n                                IOUtils.copy(item.getInputStream(), baos);\n                                MailPartObj part = new MailPartObj();\n                                part.setAttachent(baos.toByteArray());\n                                part.setContentType(item.getContentType());\n                                part.setName(item.getName());\n                                part.setSize(item.getSize());\n                                attachments.addElement(part);\n                            } catch (Exception ex) {\n                            } finally {\n                                IOUtils.closeQuietly(baos);\n                            }\n                        }\n                    }\n                }\n                String body = \"\";\n                if (fields.get(\"taBody\") != null) {\n                    body = (String) fields.get(\"taBody\");\n                } else if (fields.get(\"taReplyBody\") != null) {\n                    body = (String) fields.get(\"taReplyBody\");\n                }\n                Preferences preferencesInstance = getPreferencesInstance(request);\n                Send sendInstance = getSendInstance(request);\n                String mid = (String) fields.get(\"mid\");\n                if (StringUtils.isBlank(mid)) {\n                    request.setAttribute(\"action\", \"compose\");\n                } else {\n                    request.setAttribute(\"action\", \"reply\");\n                }\n                Boolean isHtml = null;\n                if (StringUtils.isBlank((String) fields.get(\"isHtml\"))) {\n                    isHtml = new Boolean(preferencesInstance.getPreferences().isHtmlMessage());\n                } else {\n                    isHtml = Boolean.valueOf((String) fields.get(\"isHtml\"));\n                }\n                sendInstance.send(mid, Integer.parseInt((String) fields.get(\"identity\")), (String) fields.get(\"to\"), (String) fields.get(\"cc\"), (String) fields.get(\"bcc\"), (String) fields.get(\"subject\"), body, attachments, isHtml.booleanValue(), Charset.defaultCharset().displayName(), (String) fields.get(\"priority\"));\n            } else {\n                errors.add(\"general\", new ActionMessage(ExceptionCode.ERROR_MESSAGES_PREFIX + \"mail.send\", \"The form is null\"));\n                request.setAttribute(\"exception\", \"The form is null\");\n                request.setAttribute(\"newLocation\", null);\n                doTrace(request, DLog.ERROR, getClass(), \"The form is null\");\n            }\n        } catch (Exception ex) {\n            String errorMessage = ExceptionUtilities.parseMessage(ex);\n            if (errorMessage == null) {\n                errorMessage = \"NullPointerException\";\n            }\n            errors.add(\"general\", new ActionMessage(ExceptionCode.ERROR_MESSAGES_PREFIX + \"general\", errorMessage));\n            request.setAttribute(\"exception\", errorMessage);\n            doTrace(request, DLog.ERROR, getClass(), errorMessage);\n        } finally {\n        }\n        if (errors.isEmpty()) {\n            doTrace(request, DLog.INFO, getClass(), \"OK\");\n            return mapping.findForward(Constants.ACTION_SUCCESS_FORWARD);\n        } else {\n            saveErrors(request, errors);\n            return mapping.findForward(Constants.ACTION_FAIL_FORWARD);\n        }\n    }\n", "label": 1, "substitutes": {"getButtonSonido": ["getButtonSonida", "getButtonSonico", "getButtonLeonida", "getButtonDonilo", "getButtonLeonilo", "getButtonLeonico", "getbuttonSonico", "getButtonSonilo", "getButtonDonico", "getButtonLeonido", "getbuttonSonilo", "getButtonDonida", "getbuttonSonido", "getbuttonSonida", "getButtonDonido"], "buttonSonido": ["buttonSynphp", "ButtonSunao", "buttonNorthingo", "buttonSonilo", "positionJonito", "keysonido", "secondSynidable", "buttonNorthida", "secondSonito", "buttonSONila", "labelSonphp", "buttonSonphp", "buttonSONida", "buttonSONphp", "labelSonido", "fieldsonido", "buttonSunata", "buttonsonilo", "buttonBonico", "buttonSynila", "labelSONido", "buttonSoningo", "fieldSonido", "fieldSoningo", "positionSonito", "positionSonilo", "buttonJonida", "buttonDenido", "buttonJonata", "buttonBonardo", "buttonSONico", "buttonSynido", "buttonSynito", "buttonJonico", "buttonson\u00ed", "keySonardo", "buttonSonardo", "buttonSunao", "fieldsonida", "positionSonido", "buttonBonido", "buttonBonida", "positionJonilo", "buttonSunito", "buttonSonano", "buttonJonilo", "buttonBoningo", "buttonsonida", "ButtonSonao", "buttonJonicho", "labelSONila", "buttonBonano", "positionSonico", "buttonDenicho", "buttonNorthano", "buttonSonito", "buttonsonido", "keysonilo", "labelSonila", "secondSonidable", "ButtonSonico", "labelSONida", "fieldsonano", "buttonSunilo", "secondSynito", "keySonido", "ButtonSunata", "ButtonSonata", "buttonSunido", "secondSynicho", "keySonilo", "keyson\u00ed", "keySon\u00ed", "buttonJonidable", "buttonsoningo", "buttonHonilo", "ButtonSunido", "fieldsoningo", "buttonSONilo", "secondSonido", "buttonJonito", "buttonSonata", "buttonBonilo", "buttonSynidable", "positionJonido", "buttonSynida", "labelSONphp", "ButtonSonido", "buttonNorthido", "buttonBon\u00ed", "buttonBonao", "buttonSonico", "buttonHonido", "secondSonicho", "labelSonida", "buttonsonardo", "buttonSONito", "buttonSunico", "positionJonico", "buttonJonphp", "ButtonSunico", "buttonSonidable", "buttonJonila", "buttonSONido", "buttonBonata", "buttonsonano", "buttonSynicho", "buttonDenito", "buttonSon\u00ed", "buttonDenidable", "buttonHonardo", "buttonJonao", "secondSynido", "buttonSonila", "keysonardo", "buttonSonicho", "buttonJonido", "buttonHon\u00ed", "fieldSonida", "fieldSonano", "buttonSonao", "buttonSonida"], "e": ["ev", " fe", "ae", " ie", " who", "E", "t", "event", " ge", "te", "ed", "ing", "ese", "ee", "act", "a", " ve", " pe", "pe", " ke", "AE", "ED", "ie", " ate", " sent", "me", "es", "er"], "fc": ["cv", "mac", "mc", "abc", "fl", "ic", "icc", "anc", "fd", "fab", "lf", "conv", "RFC", "ctrl", "lc", "c", "inc", "tf", "isc", "cc", "ifa", "fs", "f", "cf", "fb", "fp", "FC", "dc", "etc", "fn", "nc", "uc", "soc", "fa", "rl", "bf", "fm", "rc", "fi", "WC", "coll", "tc", "ec", "vc", "gc", "pc", "bc", "con", "irc"], "returnVal": ["retVal", " returnval", "returnVAL", "returnValue", " returnValue", " returnVAL", "ReturnVal", "resultVal", "returnval", "resultval", "retval", "Returnval", "ReturnVAL", "retVAL", "ReturnValue", "resultValue", "resultVAL", "retValue"], "file": ["local", "path", "dir", "show", "parent", "io", "resource", "FILE", "channel", "disk", "ile", "File", "output", "url", "time", "fe", "to", "null", "block", "stat", "link", "valid", "f", "uri", "base", "form", "single", "table", "buffer", "format", "page", "message", "files", "get", "user", "create", "fp", "input", "tree", "name", "document", "spec", "template", "http", "data", "source", "image", "handle", "info", "type", "this", "full", "word"], "rutaGlobal": ["redutanGlobal", "rutiGlobal", "rutiRemote", "rutaStatic", "rutoStatic", "rutaglobal", "rutanLocal", "rutiglobal", "rontoGlobal", "rontoDefault", "rutaRemote", "RutoGlobal", "rontoGeneral", "redutaDefault", "rutenStatic", "rutenGlobal", "redutanGeneral", "rutaLocal", "rutoFile", "rutanGeneral", "redutanLocal", "rutoglobal", "rutoGlobal", "rutaFile", "RutoStatic", "rutiFile", "rutiGeneral", "RutoFile", "rutaDefault", "RutaLocal", "rutiDefault", "rutoLocal", "RutaFile", "RutaStatic", "Rutoglobal", "rutanDefault", "RutaRemote", "rutenglobal", "rutiLocal", "rutoRemote", "rutenRemote", "rutenFile", "redutaGlobal", "rutanGlobal", "RutoRemote", "rontoLocal", "rutaGeneral", "redutaGeneral", "redutaLocal", "RutaGlobal", "redutanDefault", "RutoLocal", "rutenLocal", "Rutaglobal", "rutiStatic"], "rutaRelativa": ["rutaRELativo", "rutaRelativo", "rutaRelantiv", "rutaRelATiva", "rutaRelATiv", "rutaRELATiv", "rutaRelantivas", "rutaRELativas", "rutaRELitiv", "rutaRELativa", "rutaRelatiivo", "rutaRELitivo", "rutaRelitivo", "rutaRELATiva", "rutaRelantiva", "rutaRelitiv", "rutaRelATivo", "rutaRelATivas", "rutaRelitivas", "rutaRelatiivas", "rutaRELativ", "rutaRelatiiv", "rutaRELitiva", "rutaRelitiva", "rutaRelatiiva", "rutaRELATivo", "rutaRELATivas", "rutaRelativas", "rutaRELitivas", "rutaRelantivo", "rutaRelativ"], "fis": ["vais", "vois", "dfisa", "flis", " f\u00eds", "dfais", "lf\u00eds", "flys", "fais", "dfois", "fisc", "viss", " fisc", " fiss", "rys", "vis", "flos", "fois", "fiss", "dfiss", "f\u00eds", " fisa", "ros", " fais", "lfiss", "risc", "fisa", "ris", "lfis", "dfis", "lfisa", "flisc", " fys", "fys", "df\u00eds", " fois"], "fos": [" fops", "mows", "fdos", "fios", "fdoss", "woss", "ioss", "vops", "faos", "vows", "woes", "hoses", " foes", " fows", "foss", "woses", "mos", "foes", "ios", "vos", " faos", "fops", "hoss", "iios", "waos", "voes", "wios", "hios", "wos", "fows", "fdaos", "hos", "foses", "fdoes", "mops", "moes", "ioses", " foss"], "canalFuente": ["canallFuestro", "canelFaente", "canallfuestro", "canallfucer", "canalFaante", "canallfuencia", "canalFUente", "canalFuper", "canallFuencia", "canalFuante", "canalFuent", "canalFaent", "canalfuper", "canalFraencia", "canalfuelia", "canalFacer", "canelFuente", "canalfuent", "canalFuelia", "canalFuestro", "canalfuente", "canalfucer", "canallFucer", "canalFuencia", "canalfuestro", "canelFaent", "canalPotencia", "canalfuante", "canalFraente", "canalfuencia", "canallFumelon", "canalPotper", "canalFiente", "canalFaente", "canalFraper", "canelFuelia", "canallFuente", "canalFiestro", "canallFuper", "canalFaestro", "canalFramelon", "canelFuante", "canallfuente", "canalFucer", "canalfumelon", "canalPotente", "canalFicer", "canelFaelia", "canalFUelia", "canelFaante", "canalFUante", "canallFuent", "canalFumelon", "canallfuper", "canalFient", "canelFuent", "canallfumelon", "canalPotmelon", "canalFUent", "canalFaelia", "canallfuent"], "canalDestino": ["canalsdestina", "canalNegina", "canalDescino", "canalNeginian", "canalOrigine", "canalOrigination", "canalDescina", "canalDescination", "canaldDestine", "canaldestination", "canaldestinian", "canalsDestinian", "canalOrigina", "canaldDestination", "canalDestina", "canalNegino", "canaldOrigino", "canalsdestination", "canaldDestino", "canalNegination", "canalOrigino", "canaldOrigine", "canaldestina", "canaldOrigination", "canaldDestina", "canalsDestino", "canalDestinian", "canalsDestination", "canalsdestinian", "canalDestination", "canalDescine", "canalDestine", "canaldestino", "canalsdestino", "canaldOrigina", "canalsDestina"]}}
{"id1": "6008635", "id2": "15645004", "code1": "    public boolean referredFilesChanged() throws MalformedURLException, IOException {\n        for (String file : referredFiles) {\n            if (FileUtils.isURI(file)) {\n                URLConnection url = new URL(file).openConnection();\n                if (url.getLastModified() > created) return true;\n            } else if (FileUtils.isFile(file)) {\n                File f = new File(file);\n                if (f.lastModified() > created) return true;\n            }\n        }\n        return false;\n    }\n", "code2": "    private void unzip(File filename) throws ZipException, IOException {\n        ZipInputStream in = new ZipInputStream(new BufferedInputStream(new FileInputStream(filename)));\n        ZipEntry entry = null;\n        boolean first_entry = true;\n        while ((entry = in.getNextEntry()) != null) {\n            if (first_entry) {\n                if (!entry.isDirectory()) {\n                    File subdir = new File(dir + File.separator + filename.getName().substring(0, filename.getName().length() - SUFFIX_ZIP.length()));\n                    if (!subdir.exists()) {\n                        subdir.mkdir();\n                        dir = subdir;\n                    }\n                }\n                first_entry = false;\n            }\n            if (entry.isDirectory()) {\n                FileUtils.forceMkdir(new File(dir + File.separator + entry.getName()));\n            } else {\n                File outfile = new File(dir + File.separator + entry.getName());\n                File outdir = new File(outfile.getAbsolutePath().substring(0, outfile.getAbsolutePath().length() - outfile.getName().length()));\n                if (!outdir.exists()) FileUtils.forceMkdir(outdir);\n                FileOutputStream fo = new FileOutputStream(outfile);\n                BufferedOutputStream bos = new BufferedOutputStream(fo, BUFFER);\n                int read;\n                byte data[] = new byte[BUFFER];\n                while ((read = in.read(data, 0, BUFFER)) != -1) {\n                    read_position++;\n                    bos.write(data, 0, read);\n                }\n                bos.flush();\n                bos.close();\n            }\n        }\n        in.close();\n    }\n", "label": 0, "substitutes": {"referredFilesChanged": ["referredFileChanged", "referredFilesUpdated", "recludedFilesChanged", "referredResourcesChanged", "recludedFilesChange", "referredFileChange", "referredFilesChange", "recludedFilesUpdated", "referredResourcesUpdated", "referredFileUpdated", "referredResourcesChange"], "IOException": ["IOStatus", "URIException", " IOError", "URIStatus", "IOError", "SecurityStatus", "URIError", "SecurityException", "SecurityError", " IOStatus"], "file": ["local", "where", "path", "item", "string", "log", "id", "resource", "FILE", "print", "mail", "ile", "t", "e", "event", "be", "in", "class", "row", "File", "attribute", "filename", "rule", "view", "fe", "block", "port", "link", "valid", "base", "reason", "what", "play", "tile", "table", "buffer", "format", "message", "page", "files", "body", "entity", "out", "uri", "form", "job", "tree", "document", "name", "template", "line", "comment", "http", "le", "report", "image", "key", "chain", "l", "channel", "info", "type", "full", "entry", "word"], "url": ["arl", "sl", "gl", "git", "ret", "Url", "log", "abs", "str", "nl", "id", "mail", "browser", "ls", "open", "external", "dl", "https", "ssl", "html", "rel", "api", "URL", "web", "net", "get", "ur", "q", "conn", "impl", "cert", "ml", "bel", "util", "www", "http", "rl", "mount", "l", "default", "xml", "mb"], "f": ["elf", "F", "fax", "v", "fc", "fw", "h", "p", "fd", "fab", "lf", "t", "e", "b", "conv", "j", "File", "conf", "fe", "c", "tf", "i", "sf", "fs", "cf", "fb", "alf", "fp", "rf", "fo", "bf", "fm", "fi", "l", "of", "df", "g", "fa", "w"]}}
{"id1": "9275622", "id2": "812803", "code1": "    private boolean copyFile(File _file1, File _file2) {\n        FileInputStream fis;\n        FileOutputStream fos;\n        try {\n            fis = new FileInputStream(_file1);\n            fos = new FileOutputStream(_file2);\n            FileChannel canalFuente = fis.getChannel();\n            canalFuente.transferTo(0, canalFuente.size(), fos.getChannel());\n            fis.close();\n            fos.close();\n            return true;\n        } catch (FileNotFoundException e) {\n        } catch (IOException e) {\n        }\n        return false;\n    }\n", "code2": "    public void convert(File src, File dest) throws IOException {\n        InputStream in = new BufferedInputStream(new FileInputStream(src));\n        DcmParser p = pfact.newDcmParser(in);\n        Dataset ds = fact.newDataset();\n        p.setDcmHandler(ds.getDcmHandler());\n        try {\n            FileFormat format = p.detectFileFormat();\n            if (format != FileFormat.ACRNEMA_STREAM) {\n                System.out.println(\"\\n\" + src + \": not an ACRNEMA stream!\");\n                return;\n            }\n            p.parseDcmFile(format, Tags.PixelData);\n            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n                System.out.println(\"\\n\" + src + \": contains UIDs!\" + \" => probable already DICOM - do not convert\");\n                return;\n            }\n            boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n            int pxlen = p.getReadLength();\n            if (hasPixelData) {\n                if (inflate) {\n                    ds.putUS(Tags.BitsAllocated, 16);\n                    pxlen = pxlen * 4 / 3;\n                }\n                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n                    System.out.println(\"\\n\" + src + \": mismatch pixel data length!\" + \" => do not convert\");\n                    return;\n                }\n            }\n            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n            ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n            ds.putUI(Tags.SOPClassUID, classUID);\n            if (!ds.contains(Tags.NumberOfSamples)) {\n                ds.putUS(Tags.NumberOfSamples, 1);\n            }\n            if (!ds.contains(Tags.PhotometricInterpretation)) {\n                ds.putCS(Tags.PhotometricInterpretation, \"MONOCHROME2\");\n            }\n            if (fmi) {\n                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n            }\n            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n            try {\n            } finally {\n                ds.writeFile(out, encodeParam());\n                if (hasPixelData) {\n                    if (!skipGroupLen) {\n                        out.write(PXDATA_GROUPLEN);\n                        int grlen = pxlen + 8;\n                        out.write((byte) grlen);\n                        out.write((byte) (grlen >> 8));\n                        out.write((byte) (grlen >> 16));\n                        out.write((byte) (grlen >> 24));\n                    }\n                    out.write(PXDATA_TAG);\n                    out.write((byte) pxlen);\n                    out.write((byte) (pxlen >> 8));\n                    out.write((byte) (pxlen >> 16));\n                    out.write((byte) (pxlen >> 24));\n                }\n                if (inflate) {\n                    int b2, b3;\n                    for (; pxlen > 0; pxlen -= 3) {\n                        out.write(in.read());\n                        b2 = in.read();\n                        b3 = in.read();\n                        out.write(b2 & 0x0f);\n                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n                        out.write(b3 >> 4);\n                    }\n                } else {\n                    for (; pxlen > 0; --pxlen) {\n                        out.write(in.read());\n                    }\n                }\n                out.close();\n            }\n            System.out.print('.');\n        } finally {\n            in.close();\n        }\n    }\n", "label": 1, "substitutes": {"copyFile": ["copyfile", " copyStream", "copyStream", " cpStream", " cpFiles", " duplicateFile", " cpfile", "copyFiles", " duplicateStream", " copyfile", " cpFile", " duplicateFiles", " duplicatefile", " copyFiles"], "_file1": ["_linkInit", "_filesOne", "_fileInit", "_File1", "_linkOne", "_FileInit", "_ileInit", "_files1", "_ile2", "_ileFirst", "_link1", "_fileFirst", "_files2", "_ile1", "_filesFirst", "_fileOne", "_FileFirst", "_ileOne", "_link2", "_File2", "_FileOne"], "_file2": [" _File2", "_FILE1", "_File1", " _filetwo", " _File1", " _fileb", " _file02", " _FILEb", "_FILE2", " _fileTwo", "_link1", "_image1", "_imageb", "_Filetwo", "_File02", " _FILE1", "_FILEb", " _Filetwo", "_fileb", "_linkTwo", " _FILE02", "_file02", "_filetwo", "_image2", " _FILE2", " _FileTwo", "_linktwo", "_link2", "_FILE02", "_File2", "_FileTwo", "_image02", "_Fileb", "_fileTwo"], "fis": ["cfris", "Fos", "cos", "fios", "flis", "kis", "qis", "qos", "ufis", "qios", "fais", "fris", "fli", "cios", " fios", "kios", "flios", "kos", " fiss", "cfis", "Fois", " fi", "fois", "fiss", "Fis", " fris", "cais", "fliss", "ufi", "ufios", " fais", "Fios", "qiss", "Fiss", "cfiss", "fi", "Fris", "ufiss", "cfois", "cis", "kais", " fois"], "fos": ["mows", "sfose", "sfos", "woss", "ffos", "flis", "faos", "woes", " foes", " fows", "ffoss", "foss", "hose", "mos", "foes", "flos", "wows", " faos", "sfoes", " fose", "hoss", "maos", "waos", "ffoes", "floss", "fose", "floes", "fows", "wis", "hos", "sfoss", "ffis", "moes", "wos", " foss", "hoes"], "canalFuente": ["canallFuestro", "canalUtent", "canallfuenza", "canallfuestro", "canalFalente", "canalFiperor", "canalTenperor", "canalfuje", "canalUteree", "canalTenente", "canalfuperor", "canalFuent", "canalUtente", "canalFalent", "canalTenent", "canalFuperor", "canalfuent", "canalTenenza", "canalKuent", "canalUtestro", "canalFuestro", "canalfuente", "canalfuestro", "canalFiente", "canalfuenza", "canallFuente", "canalFuenza", "canallFuperor", "canalfueree", "canalFalperor", "canalFueree", "canallFueree", "canallfuente", "canalFalje", "canallfuperor", "canalFaleree", "canalKuperor", "canallfuje", "canalFalestro", "canallFuent", "canalKuje", "canallfueree", "canalFient", "canalKuente", "canallFuenza", "canalFuje", "canallFuje", "canalFienza", "canallfuent"]}}
{"id1": "2461169", "id2": "8069594", "code1": "    public static boolean decodeFileToFile(String infile, String outfile) {\n        boolean success = false;\n        java.io.InputStream in = null;\n        java.io.OutputStream out = null;\n        try {\n            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);\n            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n            byte[] buffer = new byte[65536];\n            int read = -1;\n            while ((read = in.read(buffer)) >= 0) {\n                out.write(buffer, 0, read);\n            }\n            success = true;\n        } catch (java.io.IOException exc) {\n            exc.printStackTrace();\n        } finally {\n            try {\n                in.close();\n            } catch (Exception exc) {\n            }\n            try {\n                out.close();\n            } catch (Exception exc) {\n            }\n        }\n        return success;\n    }\n", "code2": "    public static void copyFile(File in, File out) throws IOException {\n        if (in.getCanonicalPath().equals(out.getCanonicalPath())) {\n            return;\n        }\n        FileChannel inChannel = new FileInputStream(in).getChannel();\n        FileChannel outChannel = new FileOutputStream(out).getChannel();\n        try {\n            inChannel.transferTo(0, inChannel.size(), outChannel);\n        } catch (IOException e) {\n            throw e;\n        } finally {\n            if (inChannel != null) {\n                inChannel.close();\n            }\n            if (outChannel != null) {\n                outChannel.close();\n            }\n        }\n    }\n", "label": 1, "substitutes": {"decodeFileToFile": ["decodeString2Files", "decodeFileToFiles", "decodeFileFilefile", "decodeFileFileString", "decodeString2String", "decodeString2file", "decodeFile2Files", "decodeStringToFile", "decodeFileTofile", "decodeFileFileFile", "decodeFileAsString", "decodeFile2File", "decodeStringTofile", "decodeFile2String", "decodeFileAsFiles", "decodeFileToString", "decodeFileFileFiles", "decodeString2File", "decodeFile2file", "decodeFileAsFile", "decodeFileAsfile", "decodeStringToString", "decodeStringToFiles"], "infile": ["Inbase", "fromfilename", "outfolder", "Infile", "inputFile", "outbase", "InFile", "isinname", "fromFile", "inputname", "inputfile", "inFile", "inname", "outfilename", "infolder", "isinfile", "infilename", "isinfolder", "frombase", "Infilename", "inputfolder", "isinFile", "fromfile", "outFile", "outname", "inbase"], "outfile": ["outFILE", "inFILE", "outdir", "todir", " outFILE", "otname", "tofilename", " outname", "Outdir", "otFILE", "otfile", "inFile", "inname", "outfilename", "otFile", "tofile", "indir", "Outfilename", "outFile", "outname", "Outfile", "OutFile", " outFile", "toFile", "infilename"], "in": ["pin", "en", "by", "id", "is", "inf", "t", "per", "up", "al", "cin", "from", "re", "ini", "IN", "inc", "i", "inner", "inside", "ar", "on", " din", "amin", "iter", "form", "din", "conn", "get", "oin", "init", "input", "isin", "ind", "gin", "source", "In", "or", "im", "ins", "rin", "it", "info", "bin", "nin", "ain", "con", "inn"], "out": ["os", "outs", "at", "file", "en", "OU", "io", "print", "b", "t", "ot", "nt", "ion", "aos", "output", "flush", "ex", "n", "to", "null", "write", "inner", "res", "auto", "gt", "on", "outer", "o", "opt", "net", "end", "oss", "cn", "writer", "fn", "sys", "OUT", "Out", "it", "g", "ou", "ne", "can", "co", "con"], "buffer": ["black", "sample", "batch", "number", "binary", "sequence", "variable", "append", "bar", "print", "history", "row", "stack", "phrase", "total", "attribute", "button", "view", "library", "block", "mem", "bone", "base", "note", "initial", "padding", "table", "message", "buff", "paste", "column", "frame", "template", "document", "comment", "memory", "password", "header", "pad", "shape", "window", "cache", "character", "info", "available", "buf", "Buffer", "temp", "display", "command"], "read": ["text", "allow", "send", "first", "print", "before", "length", "count", "start", "select", "skip", "run", "open", "reader", "len", "index", "range", "n", "check", "query", "write", "i", "ok", "close", "wait", "through", "iter", "set", "connect", "end", "each", "get", "READ", "reads", "raw", "req", "push", "input", "ind", "seek", "shift", "readable", "load", "reading", "give", "add", "Read", "ready", "need", "hold", " Read", "stream", "find", "size"], "success": ["submit", "first", "please", " failure", "ratulations", "crit", " succeeds", "unity", "exist", "growth", "complete", "town", "Success", "primary", "good", "successfully", "snap", "safe", "scope", "condition", "cess", "ok", "status", "release", "summary", "valid", "city", "accept", "sufficient", "positive", " successful", "result", "fail", "ccess", "danger", "commit", "second", "support", "setup", "successful", " successes", " okay", "error", "ceed", "photo", " succ", "same", "democracy", "done", "value", "response", " succeed", "continue", "surv"]}}
{"id1": "6988216", "id2": "6171406", "code1": "    public void testSimpleQuery() throws Exception {\n        JCRNodeSource dummySource = (JCRNodeSource) resolveSource(BASE_URL + \"users/alexander.klimetschek\");\n        assertNotNull(dummySource);\n        OutputStream os = ((ModifiableSource) dummySource).getOutputStream();\n        assertNotNull(os);\n        String dummyContent = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><user><id>alexander</id><teamspace>cyclr</teamspace><teamspace>mindquarryTooLong</teamspace></user>\";\n        os.write(dummyContent.getBytes());\n        os.flush();\n        os.close();\n        JCRNodeSource source = (JCRNodeSource) resolveSource(BASE_URL + \"users/bastian\");\n        assertNotNull(source);\n        os = ((ModifiableSource) source).getOutputStream();\n        assertNotNull(os);\n        String content = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><user><id>bastian</id><teamspace>mindquarry</teamspace></user>\";\n        os.write(content.getBytes());\n        os.flush();\n        os.close();\n        QueryResultSource qResult = (QueryResultSource) resolveSource(BASE_URL + \"users?/*[.//user/teamspace='mindquarry']\");\n        assertNotNull(qResult);\n        Collection results = qResult.getChildren();\n        assertEquals(1, results.size());\n        Iterator it = results.iterator();\n        JCRNodeSource rSrc = (JCRNodeSource) it.next();\n        InputStream rSrcIn = rSrc.getInputStream();\n        ByteArrayOutputStream actualOut = new ByteArrayOutputStream();\n        IOUtils.copy(rSrcIn, actualOut);\n        rSrcIn.close();\n        assertEquals(content, actualOut.toString());\n        actualOut.close();\n        rSrc.delete();\n    }\n", "code2": "    public static void createTar(File directoryToPack, File targetTarFile) throws IOException {\n        if (directoryToPack == null) {\n            throw new NullPointerException(\"The parameter 'directoryToPack' must not be null\");\n        }\n        if (targetTarFile == null) {\n            throw new NullPointerException(\"The parameter 'targetTarFile' must not be null\");\n        }\n        if (!directoryToPack.exists() || !directoryToPack.isDirectory()) {\n            throw new IllegalArgumentException(\"The target file '\" + directoryToPack + \"' does not exist or is not a directory.\");\n        }\n        if (targetTarFile.exists()) {\n            log.warn(\"The target file '\" + targetTarFile + \"' already exists. Will overwrite\");\n        }\n        log.debug(\"Creating tar from all files in directory '\" + directoryToPack + \"'\");\n        byte buffer[] = new byte[BUFFER_SIZE];\n        FileOutputStream targetOutput = new FileOutputStream(targetTarFile);\n        TarOutputStream targetOutputTar = new TarOutputStream(targetOutput);\n        try {\n            List<File> fileList = collectFiles(directoryToPack);\n            for (Iterator<File> iter = fileList.iterator(); iter.hasNext(); ) {\n                File file = iter.next();\n                if (file == null || !file.exists() || file.isDirectory()) {\n                    log.info(\"The file '\" + file + \"' is ignored - is a directory or non-existent\");\n                    continue;\n                }\n                if (file.equals(targetTarFile)) {\n                    log.debug(\"Skipping file: '\" + file + \"' - is the tar file itself\");\n                    continue;\n                }\n                log.debug(\"Adding to archive: file='\" + file + \"', archive='\" + targetTarFile + \"'\");\n                String filePathInTar = getFilePathInTar(file, directoryToPack);\n                log.debug(\"File path in tar: '\" + filePathInTar + \"' (file=\" + file + \")\");\n                TarEntry tarAdd = new TarEntry(file);\n                tarAdd.setModTime(file.lastModified());\n                tarAdd.setName(filePathInTar);\n                targetOutputTar.putNextEntry(tarAdd);\n                if (file.isFile()) {\n                    FileInputStream in = new FileInputStream(file);\n                    try {\n                        while (true) {\n                            int nRead = in.read(buffer, 0, buffer.length);\n                            if (nRead <= 0) break;\n                            targetOutputTar.write(buffer, 0, nRead);\n                        }\n                    } finally {\n                        StreamUtil.tryCloseStream(in);\n                    }\n                }\n                targetOutputTar.closeEntry();\n            }\n        } finally {\n            StreamUtil.tryCloseStream(targetOutputTar);\n            StreamUtil.tryCloseStream(targetOutput);\n        }\n        log.info(\"Tar Archive created successfully '\" + targetTarFile + \"'\");\n    }\n", "label": 1, "substitutes": {"testSimpleQuery": [" executeSimpleContent", " testSimpleQ", " testBasicContent", " testRawContent", " testQueryContent", " testRawQuery", " executeSimpleQuery", " testSimpleContent", " executeBasicContent", " testQueryQuery", " executeBasicQ", " executeBasicQuestion", " executeSimpleQuestion", " testBasicQ", " testBasicQuery", " executeBasicQuery", " testQueryQ", " testQueryQuestion", " testBasicQuestion", " testSimpleQuestion", " executeSimpleQ", " testRawQ", " testRawQuestion"], "dummySource": ["dummyInput", "duffyContent", "datalFile", "dumpInput", "determinedContent", "dummySourceFile", " duffyInput", "daummyStore", "udeterminedFile", "daummyInput", "duffySource", "dumpStore", "dummContent", "datumResource", "determinedSource", "datalContent", "dummyParent", "dancyContent", "daatumInput", "udeterminedContent", "daummyResource", "dancySource", "datalSource", "datumStore", "udummyParent", "dummiesSource", "datalParent", "dummiesInput", "udummyFile", "dummSource", "dummyStore", " duffyContent", " dummySourceFile", "daatumSource", "duffyInput", "daatumStore", "dummInput", "dummyFile", "determinedParent", "dumpSource", "determinedFile", "dumpResource", "dummiesResource", "dummyResource", "udummyContent", " duffySource", "udummySource", "daatumResource", "datumSource", "dancyInput", "dummSourceFile", "dummiesStore", " dummyInput", "datumInput", " duffySourceFile", "daummySource", "dancyFile", "udeterminedSource", "duffySourceFile", "udeterminedParent", "dancySourceFile", "dancyParent"], "os": ["windows", "js", "cos", "oos", "bos", "oses", "et", "oes", "des", "uts", "ats", "io", "ost", "ose", "ants", "ors", "is", "ot", "ows", "ox", "aos", "OS", "si", "mos", "ts", "ols", "ios", "obs", "ims", "fs", "dis", "o", "ros", "ens", "ms", "osi", "bs", "los", "oss", "out", "oS", "oids", "s", "ops", "conn", "om", "asis", "ds", "sys", "socket", "or", "Os", "dos", "pos", "ui", "css", "ori", "es", "oa", "ys"], "dummyContent": [" dummiesContent", "dumpingCode", "determinedContent", "dynamicContent", " dummyCode", "dummiesContent", "deltaInt", " dummiesTemplate", "dumpInt", "DummyContent", "DumpInt", "determinedText", "determinedMedia", "DumpText", "dummyText", "dummiesTemplate", " dummiesContents", "DummyText", "dynamicCode", "DummyMedia", "DumpContent", "dynamicTemplate", "determinedInt", "dumpingTemplate", "deltaText", "DumpMedia", "dumpText", "DummyInt", "deltaMedia", "dummyContents", "dumpingContent", "dummiesContents", "dumpingContents", "dummyMedia", "dumpContent", "dummyTemplate", " dummyTemplate", "dummyInt", "dynamicContents", "dummiesCode", " dummiesCode", "dummyCode", " dummyContents", "dumpMedia", "deltaContent"], "source": ["sr", "search", "sample", "seed", "proxy", "site", "sin", "resource", "src", "store", "join", "in", "service", "SOURCE", "from", "ace", "ource", "scope", "instance", "inner", "relation", "status", "sf", "server", "google", "uri", "table", "Source", "result", "series", "sp", "s", "user", "core", "ie", "template", "spec", "sys", "image", "use", "ser", "pse", "sql", "space", "se"], "content": ["text", "path", "description", "sequence", "txt", "resource", "ontent", "Content", "context", "current", "output", "section", "ext", "editor", "node", "code", "title", "summary", "status", "html", "license", "article", "expression", "config", "example", "result", "message", "format", " contents", "activity", "action", "tree", "document", "template", "comment", "data", "application", "cont", "value", "key", "header", "version", "quest", "response", "xml", "json", "cache", "layout", "script", "tx", "body", "command"], "qResult": ["qResults", "queryReport", " qResults", " qRes", "qresult", "dqView", "qReport", "Qresult", "iqResult", " qresult", "QResult", "queryResults", "qView", "queryRes", "iqResults", "queryResult", " qResponse", "dqRes", "qRes", " qView", " qReport", "iqRes", "dqResult", "qResponse", "QRes", "queryResponse", "dqresult", "QView", "iqReport", "iqResponse"], "results": ["tests", "resources", "assets", "settings", "forms", "features", "members", "Contents", "objects", "terms", "ULTS", "ults", "missions", "children", "blocks", "roads", "orders", "reports", "users", "olds", "RESULTS", "res", "pages", "chains", "lections", "times", "products", "Results", "ms", "result", "s", "ries", " Results", "its", "xes", "events", "versions", "actions", "relations", "ands", "posts", "data", "items", "views", "hips", "details", "rows", "photos", "runs", "archives", "thumbnails", "values"], "it": ["v", "op", "ic", "h", "at", "et", "p", "li", "id", "It", "rit", "is", "t", "st", "in", "MIT", "he", "i", "stat", "ci", "m", "iter", "IT", "iz", "out", "init", "its", "ite", "read", "mit", "ait", "pit", "exec", "ip", "they", "info", "hit", "lit", "ul"], "rSrc": ["rSeRC", "rDesRC", "crDesRC", " rSsrc", "crDesrs", "rSlcs", "crSrc", " rSRC", "rSyssrc", "rDessrc", "rSecs", "rSourcesrc", "rSRC", "crDessrc", "rScs", "crSsrc", "rDesrs", "rDesrc", "rSlrs", "rSrs", " rSrs", " rSource", "rSourcers", "crDesrc", "crSrs", "rSourceRC", "rSerc", "rSysource", "rSourcerc", "rSysrc", "rSysRC", "crSRC", "rSlRC", " rScs", "rSers", "rSlrc", "rSource", "rSsrc"], "rSrcIn": ["rSRCCon", "rSldin", "rSsrcIn", "rSldIN", "rSrcIN", "rSrcInput", "rSetsrcin", "rSetsrcOut", "rSrcCon", "rSrsInput", "rSncin", "rSetrcOut", "rSsrcInput", "rSRCOut", "rSsrcin", "rSldIn", "rSetrcIn", "rSldOut", "rSrcin", "rSncIn", "rSRCIn", "rSetrcin", "rSldCon", "rSetrcIN", "rSncOut", "rSrcOut", "rSRCin", "rSrsIn", "rSRCIN", "rSsrcIN", "rSldInput", "rSetsrcIn", "rSetsrcIN", "rSsrcOut", "rSrsOut", "rSncCon", "rSrsIN"], "actualOut": ["realIs", "actualBytes", "actualCopy", "ualout", "realOut", "ualIn", " actualEnd", "finalIn", "ualOut", " actualout", " actualIs", "actualEnd", "actuallyOut", "actuallyIn", "ualBytes", " actualBytes", "actualIn", "actualout", "actuallyIs", "UALBytes", "UALIn", "realCopy", "actualIs", "actuallyCopy", "UALOut", "virtualIn", "finalOut", " actualCopy", "finalout", " actualIn", "realIn", "virtualOut", "UALEnd", "ualEnd"]}}
{"id1": "3330944", "id2": "16623181", "code1": "    public void extractImage(String input, String output, DjatokaDecodeParam params, IWriter w) throws DjatokaException {\n        File in = null;\n        String dest = output;\n        if (input.equals(STDIN)) {\n            try {\n                in = File.createTempFile(\"tmp\", \".jp2\");\n                input = in.getAbsolutePath();\n                in.deleteOnExit();\n                IOUtils.copyFile(new File(STDIN), in);\n            } catch (IOException e) {\n                logger.error(\"Unable to process image from \" + STDIN + \": \" + e.getMessage());\n                throw new DjatokaException(e);\n            }\n        }\n        BufferedImage bi = extractImpl.process(input, params);\n        if (bi != null) {\n            if (params.getScalingFactor() != 1.0 || params.getScalingDimensions() != null) bi = applyScaling(bi, params);\n            if (params.getTransform() != null) bi = params.getTransform().run(bi);\n            try {\n                BufferedOutputStream os = new BufferedOutputStream(new FileOutputStream(new File(dest)));\n                w.write(bi, os);\n                os.close();\n            } catch (FileNotFoundException e) {\n                logger.error(\"Requested file was not found: \" + dest);\n                throw new DjatokaException(e);\n            } catch (IOException e) {\n                logger.error(\"Error attempting to close: \" + dest);\n                throw new DjatokaException(e);\n            }\n        }\n        if (in != null) in.delete();\n    }\n", "code2": "    public static void main(String[] args) {\n        File srcDir = new File(args[0]);\n        File dstDir = new File(args[1]);\n        File[] srcFiles = srcDir.listFiles();\n        for (File f : srcFiles) {\n            if (f.isDirectory()) continue;\n            try {\n                FileChannel srcChannel = new FileInputStream(f).getChannel();\n                FileChannel dstChannel = new FileOutputStream(dstDir.getAbsolutePath() + System.getProperty(\"file.separator\") + f.getName()).getChannel();\n                ByteBuffer buffer = ByteBuffer.allocate(1024);\n                int nr = 0;\n                srcChannel.position(nr);\n                nr += srcChannel.read(buffer);\n                while (nr < f.length()) {\n                    buffer.flip();\n                    dstChannel.write(buffer);\n                    buffer.clear();\n                    nr += srcChannel.read(buffer);\n                }\n                srcChannel.close();\n                dstChannel.close();\n            } catch (IOException e) {\n            }\n        }\n    }\n", "label": 1, "substitutes": {"extractImage": ["extlateimage", "extractorFrame", "extractorImages", "extractorImage", "extractFrame", "extlateFrame", "extlateImage", "extprocessFrame", "Extprocessimage", "extprocessImages", "extprocessimage", "extractorimage", "ExtprocessFrame", "ExtractImage", "ExtprocessImage", "extprocessImage", "extlateImages", "extractimage", "ExtractFrame", "Extractimage", "ExtprocessImages", "ExtractImages", "extractImages"], "input": ["local", "text", "path", "sample", "seed", "background", "address", "string", "file", "p", "txt", "str", "before", "start", "Input", "context", "internal", "audio", "current", "select", "from", "url", "index", "qa", "null", "check", "query", "i", "pattern", "img", "hidden", "accept", "initial", "base", "config", "uri", "prefix", "buffer", "format", "out", "raw", "tmp", "init", "q", "upload", "error", "data", "source", "image", "hello", "rc", "ins", "empty", "ip", "request", "xml", "it", "this", "origin", "partial"], "output": ["path", "Output", "PUT", "icon", "put", "file", "OU", "generated", "oe", "print", "success", "current", "target", "filename", "to", "write", "port", "hidden", "o", "STDOUT", "prefix", "result", "format", "out", "name", "pretty", "source", "OUT", "image", "response", "type", "temp", "display"], "params": ["settings", " parameters", "Par", "arms", "members", "results", "packages", "p", "ars", "points", "pro", "terms", "modules", "eps", "pps", "properties", "abilities", "devices", "conf", "phi", "pas", "gs", "names", "ctx", "rs", "parents", "users", "stats", "images", "pi", "caps", "eters", "m", "units", "ims", "chains", "Parameters", "options", "config", "ps", "ports", "phys", "pins", "parts", "s", "fps", "changes", "mm", "actions", "tags", "requires", "pretty", "tools", "spec", "docs", "styles", "AMS", "details", "keys", "pkg", "photos", "marks", "las", "json", "param", "ams", "types", "proc", "prop", "jp", "par"], "w": ["d", "v", "wh", "h", "wd", "p", "sw", "ws", "e", "we", "rw", "n", "wx", "write", "wp", "m", "f", "o", "wl", "out", "wr", "Ws", "q", "writer", "nw", "wal", "W", "kw", "wt", "Writer", "ew", "wo", "window", "wb", "hw", "wa", "word"], "in": ["local", "win", "mc", "ln", "path", "file", "en", "p", "id", "sin", "old", "is", "inf", "po", "e", "Input", "al", "cin", "from", "copy", "mi", "edIn", "conf", " IN", "ini", "IN", "null", "i", "inner", "ar", " din", "f", "base", "phys", "ma", "out", "din", "raw", "init", "all", "isin", "vin", "mm", "read", "name", "gin", "include", "In", "source", "one", "ins", "rin", "it", "info", "bin", "nin", "sql", "con", "inn"], "dest": ["path", "trans", "decl", "dir", "dat", "des", "p", "txt", "cat", "orig", "src", "oe", "ws", "st", "Dest", "prop", "target", "pipe", "deg", "pas", "tif", "nom", "way", "to", "mem", "port", "img", "write", "csv", "origin", "opt", "desc", "resp", "result", "end", "out", "loc", "tmp", " dst", "usr", " destination", "alt", "dist", "data", "rest", "source", "save", "cont", "comb", "shape", "buf", "wb", "temp", "lit", "display"], "bi": ["ba", "ji", "phi", "pb", "zi", "li", "gi", "nb", "b", "di", "ki", "bg", "be", "jiang", "umi", "rob", "bb", "BI", "mi", "oi", "ni", "bie", "bits", "bo", "ini", " nib", "mu", "ibi", "i", "bra", "obo", "pi", "yi", "bh", "ib", "bis", "bone", "beck", "buff", "bs", "bm", "bil", "ali", "ibe", "iri", "abi", "phy", "bank", "qi", "hog", "bf", "obi", "ai", "ble", "bp", "fi", "bas", "vi", "bin", "isi", "Bi", "bc"], "os": ["ks", "cos", "oses", "oos", "bos", "et", "oes", "io", "ose", "is", "ot", "ox", "mot", "OS", "aos", "ows", "ls", "mos", "ts", "ols", "ios", "cs", "obs", "ons", "fs", "ns", "o", "ros", "osi", "bs", "los", "oss", "s", "acs", "ops", "ds", "ow", "oid", "sys", "or", "Os", "pos", "us", "css", "es", "oo", "ys"]}}
{"id1": "4417943", "id2": "22625683", "code1": "    public void test() {\n        try {\n            String query = \"* <http://xmlns.com/foaf/0.1/workplaceHomepage> <http://www.deri.ie/>\" + \"* <http://xmlns.com/foaf/0.1/knows> *\";\n            String url = \"http://sindice.com/api/v2/search?qt=advanced&q=\" + URLEncoder.encode(query, \"utf-8\") + \"&qt=advanced\";\n            URL urlObj = new URL(url);\n            URLConnection con = urlObj.openConnection();\n            if (con != null) {\n                Model model = ModelFactory.createDefaultModel();\n                model.read(con.getInputStream(), null);\n            }\n            System.out.println(url);\n        } catch (MalformedURLException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n", "code2": "    public static Model downloadModel(String url) {\n        Model model = ModelFactory.createDefaultModel();\n        try {\n            URLConnection connection = new URL(url).openConnection();\n            if (connection instanceof HttpURLConnection) {\n                HttpURLConnection httpConnection = (HttpURLConnection) connection;\n                httpConnection.setRequestProperty(\"Accept\", \"application/rdf+xml, */*;q=.1\");\n                httpConnection.setRequestProperty(\"Accept-Language\", \"en\");\n            }\n            InputStream in = connection.getInputStream();\n            model.read(in, url);\n            in.close();\n            return model;\n        } catch (MalformedURLException e) {\n            cat.debug(\"Unable to download model from \" + url, e);\n            throw new RuntimeException(e);\n        } catch (IOException e) {\n            cat.debug(\"Unable to download model from \" + url, e);\n            throw new RuntimeException(e);\n        }\n    }\n", "label": 0, "substitutes": {"test": ["tests", "evaluate", "sample", "ping", " tests", " check", "debug", "index", "Example", " Test", "status", "server", "base", " benchmark", "example", "init", " testing", "foo", " sample", "testing", "hello", "execute", " TEST", "Test", "full", "launch", "install"], "query": ["text", "search", "filter", "string", "field", "sequence", "term", "Query", "qu", "question", "select", "view", "index", "qa", "menu", "Q", "condition", "pattern", "code", "quote", "poll", "form", "prefix", "params", "page", "q", "input", "spec", "comment", "random", "password", "quest", "type", "body", "sql", "qs", "ql", "command"], "url": ["build", "sl", "path", "address", "string", "log", "Url", "term", "str", "nl", "id", "print", "ls", "r", "dl", "ll", "pattern", "pl", "title", "https", "html", "link", "location", "uri", "base", "api", "URL", "web", "result", "format", "out", "raw", "q", "ur", "name", "u", "http", "pr", "www", "mount", "l", "xml", "ref", "sql", "ul"], "urlObj": ["urlIt", " urlOb", " urlobj", "nlobj", "urlOb", "nlIt", "UrlObj", "nlObj", "UrlOb", "httpObj", "lObj", "lIt", "nlOb", " urlIt", "Urlobj", "httpOb", "urlobj", "lOb", "httpobj", "lobj"], "con": ["ln", "Con", "mc", "win", "cur", "cos", "canon", "fc", "dial", "sin", "cone", "conv", "obj", "Conn", "in", "num", "compl", "ctrl", "const", "cons", "conf", "open", "len", "c", "connection", "fin", "cf", "syn", "cl", "com", "connect", "conn", "cn", "un", "fn", "nc", "soc", "cont", "ran", "don", "pen", "pos", "cond", "can", "ver", "ain", "bc", "co", "CON"], "model": ["module", "cell", "fine", "mod", "transform", "map", "sm", "Model", "record", "mi", "re", "dl", "zip", "gp", "m", "vm", "link", "base", "job", "set", "table", "models", "message", "body", "buffer", "impl", "tree", "frame", "object", "cm", "data", "me", "le", "save", "value", "dm", "el", "man", "response", "sim", "xml", "controller", "state", "de"]}}
{"id1": "17791385", "id2": "7087108", "code1": "    public static void copyFile(File src, File dst) throws IOException {\n        InputStream in = new FileInputStream(src);\n        OutputStream out = new FileOutputStream(dst);\n        byte[] buf = new byte[1024];\n        int len;\n        while ((len = in.read(buf)) > 0) out.write(buf, 0, len);\n        in.close();\n        out.close();\n    }\n", "code2": "    @Override\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {\n        String path = request.getPathTranslated().substring(0, request.getPathTranslated().length() - request.getPathInfo().length()) + request.getServletPath() + request.getPathInfo();\n        File file = new File(path);\n        if (file.exists()) {\n            FileInputStream in = new FileInputStream(file);\n            IOUtils.copyLarge(in, response.getOutputStream());\n            in.close();\n        }\n    }\n", "label": 1, "substitutes": {"copyFile": ["copyfile", "clonefile", " cpFiles", "cloneResource", " cpfile", "copyFiles", " copyfile", "copyResource", "cloneFile", " cpFile", " cpResource", " copyResource", "cloneFiles", " copyFiles"], "src": ["sec", "sr", "sq", "cur", "ctr", "txt", "sin", "rx", "sur", "st", "start", "from", "rs", "obs", "sit", "sf", "rel", "sc", "Source", "sb", "bs", "sel", "ipl", "ck", "init", "usc", "usr", "req", "via", "input", "sys", "source", "cont", "rl", "ux", "rc", "ser", "ins", "inst", "iv", "ys"], "dst": ["Dst", "dnd", "dth", "wst", "Dnt", "Dnd", "wth", "Dth", "ddest", "dddest", " dnd", "dnt", " ddest", " dth", "snt", "ddst", "sdest", "wdest", "snd", "sst", "ddnd", "Ddest", "ddnt", "wnd"], "in": ["ln", "ic", "en", "sin", "is", "inf", "rec", "st", "up", "al", "cin", "from", "act", "IN", "inc", "i", "inner", "inside", "ze", "on", "ar", "iter", "din", "oin", "init", "input", "mm", "isin", "ind", "min", "gin", "In", "im", "source", "ai", "ins", "rin", "it", "info", "bin", "ain", "con", "inn"], "out": ["at", "outs", "by", "io", "oe", "t", "obj", "st", "ot", "nt", "up", "conv", "po", "aos", "output", "to", "n", "ex", "write", "inner", "res", "auto", "gt", "on", "outer", "o", "dis", "net", "oss", "cn", "writer", "client", "sys", "con", "OUT", "and", "Out", "sum", "it", "g", "bin", "ou", "ne", "can", "co", "os"], "buf": ["cv", "aka", "stab", "bed", "cur", "bytes", "batch", "log", "bag", "var", "bar", "cat", "b", "conv", "arr", "msg", "norm", "gen", "cp", "good", "mu", "block", "box", "pl", "vec", "bh", "bus", "cf", "fb", "br", "seq", "buffer", "buff", "ck", "cap", "db", "tab", "Buff", "cam", "cb", "pkg", "uf", "cmd", "tx", "Buffer", "prop"], "len": ["ln", "val", "cmp", "v", "fl", "elt", "h", "en", "lib", "ld", "str", "length", "fun", "lf", "t", "e", "count", "nt", "z", "lic", "num", "no", "ls", "lan", "compl", "L", "ren", "dl", "n", "ll", "vol", "fin", "rel", "seq", "loc", "end", "cap", "all", "Len", "exp", "lim", "le", "el", "l", "wid", "pos", "coll", "lon", "il", "size"]}}
{"id1": "345515", "id2": "23677147", "code1": "    public Configuration(URL url) {\n        InputStream in = null;\n        try {\n            load(in = url.openStream());\n        } catch (Exception e) {\n            throw new RuntimeException(\"Could not load configuration from \" + url, e);\n        } finally {\n            if (in != null) {\n                try {\n                    in.close();\n                } catch (IOException ignore) {\n                }\n            }\n        }\n    }\n", "code2": "\tpublic static void Sample1(String myField, String condition1, String condition2) throws SQLException {\n\t\tConnection connection = DriverManager.getConnection(\"jdbc:postgresql://localhost/test\", \"user\", \"password\");\n\t\tconnection.setAutoCommit(false);\n\t\t\n\t\tPreparedStatement ps = connection.prepareStatement(\"UPDATE myTable SET myField = ? WHERE myOtherField1 = ? AND myOtherField2 = ?\");\n\t\tps.setString(1, myField);\n\t\tps.setString(2, condition1);\n\t\tps.setString(3, condition2);\n\t\t\n\t\t// If more than 10 entries change, panic and rollback\n\t\tint numChanged = ps.executeUpdate();\n\t\tif(numChanged > 10) {\n\t\t\tconnection.rollback();\n\t\t} else {\n\t\t\tconnection.commit();\n\t\t}\n\t\t\n\t\tps.close();\n\t\tconnection.close();\n\t}\n", "label": 0, "substitutes": {"url": ["sl", "path", "address", "gl", "string", "file", "Url", "log", "ld", "term", "str", "nl", "resource", "b", "char", "browser", "ls", "external", "r", "dl", "ll", "pl", "pattern", "html", "link", "location", "ssl", "uri", "base", "config", "URL", "job", "web", "cl", "loc", "page", "get", "ur", "q", "impl", "un", "name", "bel", "util", "http", "rl", "key", "mount", "el", "l", "default", "xml", "domain", "ref", "sql"], "in": ["ln", "mc", "serv", "again", "en", "is", "update", "al", "cin", "from", "mi", "reader", "c", "null", "n", "IN", "i", "check", "inner", "m", " din", "f", "on", "o", "ma", "s", "out", "din", "oin", "init", "vin", "input", "isin", "min", "read", "name", "gin", "line", "include", "source", "In", "online", "ai", "ins", "rin", "login", "l", "nin", "bin", "body", "con", "inn"]}}
{"id1": "13563706", "id2": "12306305", "code1": "    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        String selectedPage = request.getParameter(\"SelectedPage\");\n        Page page = null;\n        PortalRequest portalRequest = PortalRequest.getCurrentRequest();\n        if (selectedPage == null) {\n            try {\n                Property pageProp = Property.getProperty(\"HomePage\");\n                selectedPage = pageProp.getValue();\n            } catch (PersistentModelException e) {\n                myLogger.info(\"Page could not be found due to an exception\");\n                response.sendError(response.SC_NOT_FOUND);\n                return;\n            }\n        }\n        myLogger.info(\"Handling Page Request for Page \" + selectedPage);\n        try {\n            if (page == null) {\n                try {\n                    page = Page.getPage(Long.parseLong(selectedPage));\n                } catch (NumberFormatException e) {\n                    List<Page> possiblePage = Page.findByName(selectedPage);\n                    if (possiblePage.size() > 0) {\n                        page = possiblePage.get(0);\n                    } else {\n                        response.sendError(response.SC_NOT_FOUND);\n                        return;\n                    }\n                }\n            }\n            if (!page.isVisibleTo(portalRequest.getCurrentUser())) {\n                Property pageProp = Property.getProperty(\"HomePage\");\n                selectedPage = pageProp.getValue();\n                page = Page.getPage(Long.parseLong(selectedPage));\n            }\n            try {\n                Property property = Property.getProperty(\"LogPageRequests\");\n                if (property.getValue().toLowerCase().equals(\"true\")) {\n                    String referer = request.getHeader(\"Referer\");\n                    if (referer == null || referer.indexOf(portalRequest.getRequest().getServerName()) > 0) {\n                        referer = \" \";\n                    } else {\n                        if (referer.length() >= 200) {\n                            referer = referer.substring(0, 198);\n                        }\n                    }\n                    PageRequest.createRequest(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), portalRequest.getRequest().getRemoteAddr(), referer);\n                }\n            } catch (PersistentModelException e) {\n                myLogger.log(Level.WARNING, \"Log Page Requests property was not found.\", e);\n            }\n            if (page.isVisibleTo(portalRequest.getCurrentUser())) {\n                HttpSession session = request.getSession();\n                if (session != null) {\n                    RecentlyViewedManager rvm = (RecentlyViewedManager) session.getAttribute(\"ipoint.RecentlyViewedManager\");\n                    if (rvm == null) {\n                        rvm = new RecentlyViewedManager();\n                    }\n                    rvm.add(page);\n                    session.setAttribute(\"ipoint.RecentlyViewedManager\", rvm);\n                }\n                PageCacheEntry entry = null;\n                if (!portalRequest.isPost() && !page.isEditableBy(portalRequest.getCurrentUser())) {\n                    try {\n                        int pageCacheTime = 60000;\n                        try {\n                            Property pageCacheTimeProperty = Property.getProperty(\"PageCacheTime\");\n                            pageCacheTime = Integer.parseInt(pageCacheTimeProperty.getValue());\n                            pageCacheTime *= 1000;\n                        } catch (PersistentModelException pme) {\n                            myLogger.warning(\"Ignoring Exception when retrieving PageCacheTime property\");\n                        } catch (NumberFormatException nfe) {\n                        }\n                        entry = PageCacheEntry.find(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), pageCacheTime);\n                    } catch (PersistentModelException e) {\n                        myLogger.log(Level.WARNING, \"An error occurred finding a page cache entry\", e);\n                    }\n                }\n                response.setContentType(\"text/html\");\n                response.setHeader(\"Cache-Control\", \"no-cache\");\n                boolean processed = false;\n                if (entry != null) {\n                    String tempFile = entry.getTempFile();\n                    File file = new File(tempFile);\n                    if (file.exists() && file.isFile() && file.canRead()) {\n                        FileReader reader = new FileReader(file);\n                        BufferedReader br = new BufferedReader(reader);\n                        PrintWriter out = response.getWriter();\n                        out.write(\"<!-- Starting to output cached page in \" + portalRequest.elapsedTime() + \" ms -->\\n\");\n                        while (br.ready()) {\n                            out.write(br.readLine() + \"\\n\");\n                        }\n                        out.write(\"<!-- Cached output produced in \" + portalRequest.elapsedTime() + \" ms -->\\n\");\n                        reader.close();\n                        processed = true;\n                        portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageTotal, page.getName() + \"-\" + page.getID(), portalRequest.elapsedTime(), true);\n                    } else {\n                        entry.delete();\n                    }\n                }\n                if (!processed) {\n                    PrintWriter out = response.getWriter();\n                    out.write(\"<!-- Output produced by iPoint Portal -->\\n\");\n                    PageRenderer renderer = new PageRenderer(page);\n                    long startTime = System.currentTimeMillis();\n                    request.setAttribute(ELConstants.IPOINT_USER, portalRequest.getCurrentUser());\n                    request.setAttribute(ELConstants.IPOINT_PAGE, page);\n                    request.setAttribute(ELConstants.IPOINT_TEMPLATE, page.getTemplate());\n                    request.setAttribute(ELConstants.IPOINT_PORTAL_PROPERTIES, Property.getPropertiesMap());\n                    request.setAttribute(ELConstants.IPOINT_USER_PROPERTIES, portalRequest.getCurrentUser().getProperties());\n                    renderer.preProcess();\n                    portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PagePreProcess, page.getName() + \"-\" + page.getID(), System.currentTimeMillis() - startTime, false);\n                    long renderStart = System.currentTimeMillis();\n                    renderer.render();\n                    portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageRender, page.getName() + \"-\" + page.getID(), System.currentTimeMillis() - renderStart, false);\n                    portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageTotal, page.getName() + \"-\" + page.getID(), System.currentTimeMillis() - startTime, false);\n                    out.write(\"<!-- output produced in \" + PortalRequest.getCurrentRequest().elapsedTime() + \" ms -->\\n\");\n                    if (!page.isEditableBy(portalRequest.getCurrentUser())) {\n                        if (response instanceof CachingResponseWrapper) {\n                            CachingResponseWrapper crw = (CachingResponseWrapper) response;\n                            crw.flushBuffer();\n                            Property tempProperty = Property.getProperty(\"UploadLocation\");\n                            File tempDirectory = new File(tempProperty.getValue());\n                            if (tempDirectory.exists() && tempDirectory.canWrite()) {\n                                File file = File.createTempFile(\"iPointPage\", \".html\", tempDirectory);\n                                try {\n                                    FileWriter fw = new FileWriter(file);\n                                    fw.write(crw.getOutput());\n                                    fw.flush();\n                                    fw.close();\n                                    PageCacheEntry.create(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), file.getAbsolutePath());\n                                } catch (IOException e) {\n                                }\n                            } else {\n                                myLogger.warning(\"Can not write to directory \" + tempProperty.getValue());\n                            }\n                        }\n                    }\n                }\n            } else {\n                myLogger.info(\"Current User is Forbidden from seeing this Page\");\n                response.sendError(response.SC_FORBIDDEN);\n            }\n        } catch (PersistentModelException e) {\n            myLogger.log(Level.INFO, \"Unable to find page \" + selectedPage, e);\n            response.sendError(response.SC_NOT_FOUND);\n        } catch (PresentationException pe) {\n            pe.printStackTrace();\n            throw new ServletException(\"Error processing the page\", pe);\n        }\n    }\n", "code2": "    private static void doCopyFile(File srcFile, File destFile, boolean preserveFileDate) throws IOException {\n        if (destFile.exists() && destFile.isDirectory()) {\n            throw new IOException(\"Destination '\" + destFile + \"' exists but is a directory\");\n        }\n        FileChannel input = new FileInputStream(srcFile).getChannel();\n        try {\n            FileChannel output = new FileOutputStream(destFile).getChannel();\n            try {\n                output.transferFrom(input, 0, input.size());\n            } finally {\n                IOUtil.closeQuietly(output);\n            }\n        } finally {\n            IOUtil.closeQuietly(input);\n        }\n        if (srcFile.length() != destFile.length()) {\n            throw new IOException(\"Failed to copy full contents from '\" + srcFile + \"' to '\" + destFile + \"'\");\n        }\n        if (preserveFileDate) {\n            destFile.setLastModified(srcFile.lastModified());\n        }\n    }\n", "label": 1, "substitutes": {"doGet": ["handlePut", "handleget", " doPut", "doGET", " doget", "handleGET", "doget", "DoGet", "DoGET", " doGET", "handleGet", "Doget", "doPut", "DoPut"], "request": ["search", "path", "address", "subject", "first", "parent", "resource", "transform", "event", "position", "context", "current", "route", "attribute", "complete", "url", "re", "call", "view", "query", "connection", "initial", "message", "each", "get", "project", "user", "create", "input", "reference", "setup", "frame", "document", "Request", "http", "application", "socket", "reset", "report", "QUEST", "use", "hello", "version", "xml", "directory", "forward", "order", "command"], "response": ["search", "description", "sequence", "respond", "ce", "print", "render", "hash", "position", "success", "service", "Response", "output", "network", "view", "fire", "block", "relation", "write", "res", "connection", "status", "summary", "console", "condition", "continue", "security", "server", "example", "message", "result", "format", "see", "foundation", "exit", "frame", "document", "tree", "http", "zero", "application", "answer", "report", "image", "header", "version", "default", "json", "next", "reply", "resp", "display", "collection", "ve"], "selectedPage": ["namedLine", "electedPort", "namedToken", " selectedRow", "selectionItem", "namedKey", "selectPath", "lectedPath", "singlePage", "selectedRow", "singlePort", "selectionToken", "electedPage", "matchedPage", "singleFrame", " selectedFrame", " selectedPath", "selectedFrame", "verifiedRow", "lectedToken", " selectedFile", "lectedLine", "selectFile", "lectedPage", "selectedItem", "electedFrame", "selectedKey", "matchedpage", "lectedFile", " selectedpage", "selectionLine", "specifiedDocument", " selectedPort", "lectedFrame", "electionDocument", "lectedPort", "selectedLine", "matchedFrame", " selectedLine", "verifiedPage", "namedpage", "electionPage", "selectionFile", "selectPage", "selectedpage", "selectedPort", "selectedToken", " selectedKey", "selectItem", "selectPort", "namedFrame", "selectionPort", "lectedDocument", "lectedRow", "verifiedFile", "electionPort", "selectedDocument", "specifiedFrame", "namedPage", "specifiedPort", "lectedItem", "selectedFile", "matchedPort", "selectLine", "verifiedpage", "electedpage", "singlepage", "namedPort", "lectedKey", "specifiedPage", "selectedPath", "selectionPage", "electionFrame", "lectedpage"], "page": ["proxy", "site", "point", "output", "network", "profile", "project", "document", "object", "line", "pointer", "pp", "window", "peer", "pool", "policy", "display", "created", "filter", "Page", "p", "be", "complete", "rule", "menu", "office", "instance", "server", "client", "frame", "me", "image", "chain", "next", "address", "force", "log", "parent", "channel", "position", "phrase", "current", "record", "age", "url", "view", "to", "port", "language", "form", "message", "result", "user", "application", "cache", "layout", "number", " Page", "resource", "row", "phone", "block", "node", "pages", "table", "associated", "successful", "self", "group", "version", "collection"], "portalRequest": ["portalingCall", "portpalContext", "portortalEvent", "portaleRequest", "portalaCall", "portualResponse", "portaleSession", " portalAccess", "portsalRequest", "portpalRequest", "portsortalResponse", "portortalThread", "portalaAccess", "portralSession", "portsortalRequest", "portalingApply", "PortalQuery", "terminalRequest", "portortalrequest", "portsortalrequest", "portaleQuery", "portalingRequest", "portalThread", "PortaleContext", "portalSession", "terminalidRequest", "terminalidSession", "portalidResponse", "portortalResponse", "terminalidResponse", "portalEvent", "portalidRequest", "portualEvent", "portalaApply", "PortaleResponse", "portsortalEvent", "portalResponse", "portaleResponse", "portortalContext", "portsalEvent", "portualRequest", "portalaRequest", "PortaleThread", "portpalResponse", "portalityResponse", " portalApply", "portalQuery", "portalrequest", "portalidContext", "portsalResponse", "portaleCall", "terminalSession", "portalFrame", "PortaleQuery", "PortalResponse", "portalityContext", "portralQuery", "portralRequest", "portaleThread", "terminalidQuery", " portaleAccess", "portsalrequest", "portortalQuery", "portpalThread", "portralContext", "portalidSession", "PortalThread", "portalityFrame", "portalerequest", "portalityRequest", "portaleContext", "portualrequest", " portaleApply", "portalContext", "PortalRequest", "portalApply", "portaleEvent", "PortaleFrame", "portalidFrame", "terminalResponse", "portalidQuery", "terminalQuery", " portalCall", "portralResponse", "portortalRequest", "portalAccess", "portaleApply", " portaleRequest", "portaleAccess", "PortalContext", "portalCall", "PortaleRequest", "PortalFrame", "portaleFrame", "portalingAccess", " portaleCall"], "pageProp": ["profilePred", "imageProp", " pagePr", "pagePriv", "pagePred", "ageProp", "pageComp", "phraseComp", "propertyPack", " pageDef", "sectionProp", "poolProp", "keyProperty", " pageComp", "phraseProp", "imagePr", "agePro", "officeProp", "officePack", "sectionZip", "pagePack", "propertyProp", "poolPro", "officeDef", " pagePred", "profileZip", " pagePack", "phrasePr", "pageProperty", "phraseProperty", "keyComp", "keyPr", "pagePro", "poolPred", "imagePred", "agePred", "pageDef", "agePr", "sectionPro", "profilePro", "profileProp", "poolZip", "pageZip", "pagePr", "officePriv", "sectionPred", "imagePro", " pagePriv", " pageProperty", "keyProp", " pagePro", "propertyPriv", "propertyDef"], "possiblePage": ["PossiblyCollection", " possibleTag", " possibleCollection", "pspecifiedPage", "possiblyLine", "possiblyCollection", "packedLine", "pbablePage", "pableCollection", " packedTag", "PossiblyPage", "pibleCollection", "packedTag", " packedLine", "possibleCollection", "possibleTag", "pibleChild", "packedPage", "possiblyTag", "pentialPages", "pableTag", "PossiblePage", " packedPage", "possiblepage", "possibleChild", "pspecifiedPages", "packedCollection", "PossibleTag", "possiblyUser", "PossiblyChild", "possiblyPage", "PossibleUser", "pbableChild", "possibleLine", "pableLine", "pibleUser", "pbableCollection", "PossiblePages", "pentialTag", "PossibleCollection", "pentialPage", "possibleUser", " packedCollection", "pablePage", "possiblePages", "pentialpage", "pspecifiedTag", "possiblyChild", "piblePage", "pbableUser", "PossibleChild", "Possiblepage", "pspecifiedpage", "PossiblyUser", " possibleLine"], "property": ["address", "integer", "description", "function", "string", "field", "p", "definition", "variable", "resource", "properties", "position", "class", "service", "phrase", "attribute", "Property", "rule", "owner", "rue", "relation", "title", "location", "config", "expression", "feature", "trace", "message", "second", "frame", "name", "operator", "object", "behavior", "value", "key", "header", "metadata", "domain", "type", "prop", "policy", "command"], "referer": ["diffrer", "rorerer", "rerier", "refirect", "rederee", "rerer", " refered", "afener", "rangeerer", "Refere", "rorrer", "requerer", "printerer", "deferer", "reportered", "retered", "reporterer", "relender", "printerential", "reering", "reere", "verrier", "refrier", " refirect", "reener", "reportarer", "reerential", "rederer", "Referee", "retarer", "refender", "relerer", "Referer", "aferential", "redrer", "aferer", "refener", "differing", "vererential", "refered", "relener", "diffonder", "rorirect", "requonder", "reerer", "printrer", "relering", "refarer", "requering", "fener", "rorered", "retrer", "requrer", "rangeender", "differer", "defirect", "relrer", "refering", "reender", " refrer", "defrer", "defered", "verrer", "referential", "afrer", "rangeener", "refere", "ferer", "vererer", "rangerer", "relerential", "frer", "referee", "printrier", "refrer", "reeree", "Refrer", "redere", "rearer", "reportrer", "fering", "refonder", "reterer", "reered", "reonder"], "e": ["err", "ae", "ception", "h", "echo", "p", "E", "oe", "t", "eg", "eur", "event", "te", "eeee", "de", "ee", "r", "n", "a", "m", "f", "ge", "o", "ie", "error", "x", "me", "eu", "g", "es", "er", "se"]}}
{"id1": "16621499", "id2": "16931472", "code1": "    public static byte[] loadURLToBuffer(URL url) throws IOException {\n        byte[] buf = new byte[4096];\n        byte[] data = null;\n        byte[] temp = null;\n        int iCount = 0;\n        int iTotal = 0;\n        BufferedInputStream in = new BufferedInputStream(url.openStream(), 20480);\n        while ((iCount = in.read(buf, 0, buf.length)) != -1) {\n            if (iTotal == 0) {\n                data = new byte[iCount];\n                System.arraycopy(buf, 0, data, 0, iCount);\n                iTotal = iCount;\n            } else {\n                temp = new byte[iCount + iTotal];\n                System.arraycopy(data, 0, temp, 0, iTotal);\n                System.arraycopy(buf, 0, temp, iTotal, iCount);\n                data = temp;\n                iTotal = iTotal + iCount;\n            }\n        }\n        in.close();\n        return data;\n    }\n", "code2": "    public void handler(Map<String, String> result, TargetPage target) {\n        try {\n            URL url = new URL(target.getUrl());\n            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));\n            String line = null;\n            while ((line = reader.readLine()) != null) {\n                for (Map.Entry<String, String> entry : result.entrySet()) {\n                    if (line.indexOf(target.getInclude()) != -1) {\n                        int fromIndex = line.indexOf(target.getFromStr());\n                        String r = line.substring(fromIndex + target.getFromStr().length(), line.indexOf(target.getToStr(), fromIndex));\n                        entry.setValue(r);\n                        line = line.substring(line.indexOf(target.getToStr()) + target.getToStr().length());\n                    }\n                }\n            }\n            reader.close();\n        } catch (MalformedURLException e) {\n        } catch (IOException e) {\n        }\n    }\n", "label": 0, "substitutes": {"loadURLToBuffer": ["loadUrlToBuffer", "loadUrlToBytes", "loadURL2Buffer", "loadURL2Buff", "loadURLtoBytes", "loadURLtoBuff", "loadURLtoBuffer", "loadUrl2Buff", "loadURLToBytes", "loadURL2Bytes", "loadUrl2Buffer", "loadUrlToBuff", "loadUrl2Bytes", "loadURLToBuff"], "url": ["sl", "gl", "address", "log", "file", "Url", "str", "nl", "mail", "b", "char", "browser", "loader", "ls", "open", "r", "dl", "ll", "pl", "ssl", "link", "location", "html", "uri", "base", "URL", "job", "web", "page", "ur", "cert", "name", "bel", "http", "el", "l", "xml", "ul"], "buf": ["cv", "bytes", "batch", "log", "bag", "dat", "txt", "str", "queue", "bar", "cat", "nb", "b", "bu", "bt", "conv", "nt", "arr", "rb", "msg", "font", "axe", "ctx", "bo", "bl", "mu", "box", "vec", "img", "bh", "fb", "br", "seq", "buffer", "desc", "capt", "buff", "bs", "tmp", "cap", "mus", "db", "BU", "Buff", "bn", "cb", "bp", "tr", "pkg", "uf", "cmd", "tx", "Buffer", "bc", "div"], "data": ["dec", "bytes", "results", "ata", "part", "map", "msg", "output", "content", "good", "all", "name", "list", "json", "bin", "this", "ret", "p", "txt", "arr", "total", "a", "bus", "rel", "set", "out", "raw", "tmp", "action", "zero", "image", "next", "partial", "item", "batch", "missing", "str", "obj", "bo", "null", "to", "res", "def", " DATA", "buffer", "message", "buff", "result", "value", "default", "cache", "it", "type", "size", "text", "dat", "step", "only", "length", "di", "count", "nt", "no", "mu", "initial", "br", "table", "format", "done", "DATA", "info", "div"], "temp": ["fake", "tar", "v", "pt", "dat", "unt", "ret", "term", "txt", "variable", "mod", "test", "t", "tem", "dest", "font", "ptr", "current", "copy", "mont", "deg", "met", "rem", "nom", "null", "Temp", "mem", "vol", " Temp", "EMP", "pre", "tm", "buffer", "result", "buff", "ta", "tmp", "mm", "template", "tim", "util", "alt", "mp", "em", "tr", "pos", "cache", "tc", "porary", "unit", "tt", "emp", "div", "partial"], "iCount": ["iuCP", "biCode", "giCounter", "iniMark", "ciCounter", "aiTotal", "iCheck", " iLength", "liTotal", "diCount", "jcount", "aiCount", "uiCount", "liCounter", "piCount", "iriProcess", "piCounter", "phiLength", "phiCount", " iCounter", " iCheck", "giCode", "aiCounter", "icount", "intCount", "ciCount", "iniLength", "iriCount", "iiTotal", "ciTotal", "ciCP", "biTotal", "piTotal", "giCheck", "aicount", "uiCounter", "jCount", "iCP", "iiNow", "iuCounter", "diTotal", "giTotal", "iCode", "intCategory", "liCall", "iniCount", "intProcess", "iiProcess", "giLength", "dicount", "iCategory", "aiLength", "iriCategory", " icount", "iiCounter", "uiCall", "uiTotal", "piLength", "iiCount", " iCode", "iuCount", "liCount", "jLength", "iiCategory", "piCP", "biCount", "iNumber", "intNow", "phiMark", "diCounter", "iniNumber", "iLength", "iuTotal", "iiCall", "iMark", "jTotal", "iriNow", " iMark", "iNow", "biCheck", "iCall", "phiNumber", "iCounter", "iProcess", " iNumber", "giCount"], "iTotal": ["miLast", "imtotal", "phiTemp", "iAll", "miZero", "iCurrent", " iNow", " iCurrent", "miTotal", "miNew", "phiLast", "itotal", "miAll", "aiTotal", "iitotal", "liLast", "liTotal", "iTarget", "iuLast", "diCount", "miCurrent", "ciToken", "jNow", "iZero", "piCount", "aiAll", "liTemp", "jtotal", " iTemp", " iDone", "liNew", "iuTarget", "diNow", "piDone", "iuNew", "ditotal", "phiNew", "iTemp", "aiToken", "iComplete", " iTarget", "iiTotal", "ciTotal", "iDone", "iiZero", "piTotal", "uiDone", " iZero", "jCount", " iNew", "miComplete", "imCount", "jZero", "iNew", "phiTotal", "diTotal", "miTarget", " iFull", "iFull", " iLast", "uiFull", "piFull", "liParent", "uiTotal", "iiCount", "ciAll", "jCurrent", "liCount", "imTotal", "imZero", "miToken", " iParent", "iLast", "iuTotal", "mitotal", "ciComplete", "jTotal", "piParent", "iNow", "iToken", " itotal", "iParent", "aiComplete"], "in": ["mc", "v", "serv", "ic", "h", "en", "by", "io", "b", "is", "inf", "per", "up", "al", "cin", "from", "conf", "reader", "re", "r", "IN", "inc", "i", "check", "inner", " din", "on", "ma", "out", "din", "get", "input", "isin", "mm", "ind", "In", "add", "mn", "and", "or", "ins", "l", "sum", "it", "info", "bin", "con", "inn"]}}
{"id1": "22057083", "id2": "7166270", "code1": "    private void Connect() throws NpsException {\n        try {\n            client = new FTPClient();\n            client.connect(host.hostname, host.remoteport);\n            int reply = client.getReplyCode();\n            if (!FTPReply.isPositiveCompletion(reply)) {\n                client.disconnect();\n                client = null;\n                com.microfly.util.DefaultLog.error_noexception(\"FTP Server:\" + host.hostname + \"refused connection.\");\n                return;\n            }\n            client.login(host.uname, host.upasswd);\n            client.enterLocalPassiveMode();\n            client.setFileType(FTPClient.BINARY_FILE_TYPE);\n            client.changeWorkingDirectory(host.remotedir);\n        } catch (Exception e) {\n            com.microfly.util.DefaultLog.error(e);\n        }\n    }\n", "code2": "    protected String issueCommandToServer(String command, ChangeCapsule changeCapsule) throws IOException {\n        URLConnection urlConn = serverURL.openConnection();\n        urlConn.setDoInput(true);\n        urlConn.setDoOutput(true);\n        urlConn.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\n        OutputStreamWriter wr = new OutputStreamWriter(urlConn.getOutputStream());\n        String content = ApplyChangesServlet.PARAMETER_COMMAND + \"=\" + command;\n        content += \"&\" + ApplyChangesServlet.PARAMETER_CAPSULE + \"=\" + URLEncoder.encode(changeCapsule.toJSON(), \"UTF-8\");\n        wr.write(content);\n        wr.flush();\n        BufferedReader input = new BufferedReader(new InputStreamReader(urlConn.getInputStream()));\n        StringBuffer response = new StringBuffer();\n        String str;\n        while (null != ((str = input.readLine()))) {\n            response.append(str);\n        }\n        wr.close();\n        input.close();\n        return response.toString();\n    }\n", "label": 0, "substitutes": {"Connect": ["Client", "Login", " Dial", "Conn", "Open", "Start", "Check", " Init", " Connection", "Close", "Connection", "Construct", "Sync", "Error", "Init", "Log", " Close", "connect", "Connector", " Open", "Interface", "Create", "Auth", "Setup", "Dial", "Bind", "Ping", "New"], "client": ["local", "module", "proxy", "wrapper", "product", "cgi", "session", "pattern", "ssl", "close", "ch", "core", "name", "key", "list", "window", "handler", "entry", "command", "Client", "lib", "open", "cp", "c", "cli", "google", "server", "net", "conn", "create", "patch", "http", "one", "chain", "handle", "cmd", "cell", "force", "batch", "log", "mail", "channel", "component", "browser", "obj", "control", "url", "bo", "null", "to", "port", "secure", "api", "plugin", "form", "buffer", "connect", "user", "writer", "response", "cache", "type", "pb", "resource", "store", "remote", "context", "row", "service", "phone", "manager", "reader", "call", "node", "connection", "builder", "config", "cl", "table", "util", "version", "man", "controller", "pc", "co", "con", "collection"], "reply": ["address", "match", "ret", "echo", "py", "print", "nb", "success", "ply", "no", "repl", "vote", "mi", "shell", "query", "write", "code", "status", "Reply", "close", "link", "notice", "job", "prefix", "result", "message", "user", "comment", "error", "bill", "line", "answer", "report", "flag", "rc", "response", "next", "resp", "state", "type", "translation", "entry", "command"]}}
{"id1": "17729554", "id2": "7296597", "code1": "    public boolean clonarFichero(FileInputStream rutaFicheroOrigen, String rutaFicheroDestino) {\n        System.out.println(\"\");\n        boolean estado = false;\n        try {\n            FileOutputStream salida = new FileOutputStream(rutaFicheroDestino);\n            FileChannel canalOrigen = rutaFicheroOrigen.getChannel();\n            FileChannel canalDestino = salida.getChannel();\n            canalOrigen.transferTo(0, canalOrigen.size(), canalDestino);\n            rutaFicheroOrigen.close();\n            salida.close();\n            estado = true;\n        } catch (IOException e) {\n            System.out.println(\"No se encontro el archivo\");\n            e.printStackTrace();\n            estado = false;\n        }\n        return estado;\n    }\n", "code2": "    public void create() {\n        Connection conn = OrmHandler.getInstance().getSession().getConnection(this);\n        Statement stat = null;\n        StringBuilder sql = new StringBuilder(256);\n        try {\n            getRenderer().printCreateDatabase(this, sql);\n            conn = createConnection();\n            stat = conn.createStatement();\n            stat.executeUpdate(sql.toString());\n            conn.commit();\n            if (LOGGER.isLoggable(Level.INFO)) {\n                LOGGER.info(sql.toString());\n            }\n        } catch (Throwable e) {\n            if (conn != null) {\n                try {\n                    conn.rollback();\n                } catch (SQLException ex) {\n                    LOGGER.log(Level.WARNING, \"Can't rollback DB\" + toString(), ex);\n                }\n            }\n            throw new IllegalArgumentException(\"Statement error:\\n\" + sql, e);\n        } finally {\n            try {\n                close(conn, stat, null, true);\n            } catch (IllegalStateException ex) {\n                LOGGER.log(Level.WARNING, \"Can't rollback DB\" + toString(), ex);\n            }\n        }\n    }\n", "label": 0, "substitutes": {"clonarFichero": ["clonarFricio", "clonarFricher", "clonarfrichero", "clonarFrichero", "clonarFICio", "clonarfichero", "clonarfricio", "clonarFicher", "clonarFicohero", "clonarficros", "clonarFicoros", "clonarficher", "clonarFIChero", "clonarfricher", "clonarFicoio", "clonarFICros", "clonarFicros", "clonarFricros", "clonarFICher", "clonarficio", "clonarFicoher", "clonarFicio", "clonarfricros"], "rutaFicheroOrigen": ["rutaFicheroOriginalEn", "rutaFicheroOriginalener", "rutaFicheroOriginalen", "rutaFicheroorigener", "rutaFicheroOrigin", "rutaFicherorigEN", "rutaFicheroorigEN", "rutaFicheroorigen", "rutaFicherOrigEN", "rutaFicherOrigens", "rutaFicheroOriginen", "rutaFiceraOriginen", "rutaFiceraOrigener", "rutaFicherorigens", "rutaFiceraOriginener", "rutaFicheroOrigEn", "rutaFiceraOrigEn", "rutaFicheroorigEn", "rutaFicherorigen", "rutaFicheroOrigens", "rutaFiceraOriginEn", "rutaFiceraOrigen", "rutaFicheroOrigener", "rutaFicheroOriginalens", "rutaFicheroOriginener", "rutaFicheroorigin", "rutaFicheroOrigEN", "rutaFicheroorigens", "rutaFiceraOriginEN", "rutaFicheroOriginEn", "rutaFicherOrigener", "rutaFicherOrigen", "rutaFicheroOriginalEN", "rutaFicherorigener", "rutaFicheroOriginEN", "rutaFicherOrigin", "rutaFicherorigin", "rutaFiceraOrigEN", "rutaFicheroOriginalin"], "rutaFicheroDestino": ["rutaFicherOrigino", "rutaFichetDestinos", "rutaFicherodestin", "rutaFicheroDestin", "rutaFicherDestinos", "rutaFicheroOrigin", "rutaFicherDestINO", "rutaFichetDestin", "rutaFicherodestINO", "rutaFicheroOriginos", "rutaFichetOrigoso", "rutaFicheroDestinos", "rutaFichetOriginos", "rutaFicheroDestINO", "rutaFicherDestin", "rutaFicheroStoso", "rutaFicheroStin", "rutaFicherodestino", "rutaFichetDestoso", "rutaFicheroStino", "rutaFicheroOrigino", "rutaFichetOrigino", "rutaFicherOriginos", "rutaFicheroStinos", "rutaFicheroOrigoso", "rutaFicherOrigINO", "rutaFicherDestino", "rutaFichetOrigin", "rutaFichetDestino", "rutaFicheroDestoso", "rutaFicherOrigin", "rutaFicherodestinos", "rutaFicheroOrigINO"], "salida": ["palidate", "Salid", "alaria", "salisa", "Salaria", " salisa", "alIDA", "salido", "salaria", "palida", "salIDA", "Salida", "alisa", "alado", "palid", "salado", "salidate", " salidate", "Salisa", "alido", "salid", "alida", " salaria", "Salidate", "Salido", "palido", "Salado", " salid", " salado", " salido", "SalIDA", " salIDA"], "canalOrigen": ["canalOriginalem", "canalorigEN", "canallorigener", "canalOriginener", "canalOrigem", "canallOrigened", "canalOriginalens", "canalOrigener", "canallOrigener", "canalOriginalener", "canalorigener", "canalOriginEN", "canALOriginem", "canALOriginener", "canALOrigem", "canALOrigen", "canalOriginen", "canalorigem", "canalOriginens", "canalOriginalened", "canalorigen", "canalOrigens", "canallOrigens", "canallorigen", "canalOriginalEN", "canalOriginalen", "canALOrigener", "canalorigened", "canalOrigEN", "canALOrigens", "canALOriginen", "canallOrigEN", "canallOrigen", "canallorigEN", "canalOrigened", "canalorigens", "canallorigens", "canallorigened", "canalOriginem", "canALOriginens"], "canalDestino": ["canalsdestina", "candalOriginos", "candalOrigino", "canalsDestINO", "candalOrigination", "canalStination", "canalStinos", "canalDestinos", "canalOrigination", "canalEndina", "canalStino", "canaldestination", "canalEndination", "canalStINO", "canalDestina", "canalOriginos", "canalDestINO", "canalEndino", "canalsdestination", "candalDestino", "candalDestINO", "candalOrigINO", "canalOrigino", "canalsdestINO", "canalEndINO", "canaldestina", "canalsDestino", "canalsDestination", "canalOrigINO", "canalDestination", "candalDestinos", "canaldestino", "candalDestination", "canalsdestino", "canaldestINO", "canalsDestina", "canaldestinos"], "estado": ["estaban", "testado", "ostada", " estata", "estada", "astao", "estao", " gestado", "gestada", "astido", " estaban", "astado", "stado", "gestilo", "ostido", "Estados", " estao", "testada", "ostata", "gestado", "cestada", "astada", "cestado", "testido", "stao", "cestaban", " gestados", " estilo", "estados", " estaded", " gestada", "estata", "stada", " gestaded", "testata", " estados", "estaded", "Estado", "estilo", " estada", "estido", "stido", "Estada", " estido", "cestilo", "gestaban", "ostado", "Estaded"]}}
{"id1": "9954926", "id2": "6840241", "code1": "    private void simulate() throws Exception {\n        BufferedWriter out = null;\n        out = new BufferedWriter(new FileWriter(outFile));\n        out.write(\"#Thread\\tReputation\\tAction\\n\");\n        out.flush();\n        System.out.println(\"Simulate...\");\n        File file = new File(trsDemoSimulationfile);\n        ObtainUserReputation obtainUserReputationRequest = new ObtainUserReputation();\n        ObtainUserReputationResponse obtainUserReputationResponse;\n        RateUser rateUserRequest;\n        RateUserResponse rateUserResponse;\n        FileInputStream fis = new FileInputStream(file);\n        BufferedReader br = new BufferedReader(new InputStreamReader(fis));\n        String call = br.readLine();\n        while (call != null) {\n            rateUserRequest = generateRateUserRequest(call);\n            try {\n                rateUserResponse = trsPort.rateUser(rateUserRequest);\n                System.out.println(\"----------------R A T I N G-------------------\");\n                System.out.println(\"VBE: \" + rateUserRequest.getVbeId());\n                System.out.println(\"VO: \" + rateUserRequest.getVoId());\n                System.out.println(\"USER: \" + rateUserRequest.getUserId());\n                System.out.println(\"SERVICE: \" + rateUserRequest.getServiceId());\n                System.out.println(\"ACTION: \" + rateUserRequest.getActionId());\n                System.out.println(\"OUTCOME: \" + rateUserResponse.isOutcome());\n                System.out.println(\"----------------------------------------------\");\n                assertEquals(\"The outcome field of the rateUser should be true: MESSAGE=\" + rateUserResponse.getMessage(), true, rateUserResponse.isOutcome());\n            } catch (RemoteException e) {\n                fail(e.getMessage());\n            }\n            obtainUserReputationRequest.setIoi(null);\n            obtainUserReputationRequest.setServiceId(null);\n            obtainUserReputationRequest.setUserId(rateUserRequest.getUserId());\n            obtainUserReputationRequest.setVbeId(rateUserRequest.getVbeId());\n            obtainUserReputationRequest.setVoId(null);\n            try {\n                obtainUserReputationResponse = trsPort.obtainUserReputation(obtainUserReputationRequest);\n                System.out.println(\"-----------R E P U T A T I O N----------------\");\n                System.out.println(\"VBE: \" + obtainUserReputationRequest.getVbeId());\n                System.out.println(\"VO: \" + obtainUserReputationRequest.getVoId());\n                System.out.println(\"USER: \" + obtainUserReputationRequest.getUserId());\n                System.out.println(\"SERVICE: \" + obtainUserReputationRequest.getServiceId());\n                System.out.println(\"IOI: \" + obtainUserReputationRequest.getIoi());\n                System.out.println(\"REPUTATION: \" + obtainUserReputationResponse.getReputation());\n                System.out.println(\"----------------------------------------------\");\n                assertEquals(\"The outcome field of the obtainUserReputation should be true: MESSAGE=\" + obtainUserReputationResponse.getMessage(), true, obtainUserReputationResponse.isOutcome());\n                assertEquals(0.0, obtainUserReputationResponse.getReputation(), 1.0);\n            } catch (RemoteException e) {\n                fail(e.getMessage());\n            }\n            obtainUserReputationRequest.setIoi(null);\n            obtainUserReputationRequest.setServiceId(null);\n            obtainUserReputationRequest.setUserId(rateUserRequest.getUserId());\n            obtainUserReputationRequest.setVbeId(rateUserRequest.getVbeId());\n            obtainUserReputationRequest.setVoId(rateUserRequest.getVoId());\n            try {\n                obtainUserReputationResponse = trsPort.obtainUserReputation(obtainUserReputationRequest);\n                System.out.println(\"-----------R E P U T A T I O N----------------\");\n                System.out.println(\"VBE: \" + obtainUserReputationRequest.getVbeId());\n                System.out.println(\"VO: \" + obtainUserReputationRequest.getVoId());\n                System.out.println(\"USER: \" + obtainUserReputationRequest.getUserId());\n                System.out.println(\"SERVICE: \" + obtainUserReputationRequest.getServiceId());\n                System.out.println(\"IOI: \" + obtainUserReputationRequest.getIoi());\n                System.out.println(\"REPUTATION: \" + obtainUserReputationResponse.getReputation());\n                System.out.println(\"----------------------------------------------\");\n                assertEquals(\"The outcome field of the obtainUserReputation should be true: MESSAGE=\" + obtainUserReputationResponse.getMessage(), true, obtainUserReputationResponse.isOutcome());\n                assertEquals(0.0, obtainUserReputationResponse.getReputation(), 1.0);\n            } catch (RemoteException e) {\n                fail(e.getMessage());\n            }\n            call = br.readLine();\n        }\n        fis.close();\n        br.close();\n        out.flush();\n        out.close();\n    }\n", "code2": "    private static long copy(InputStream source, OutputStream sink) {\n        try {\n            return IOUtils.copyLarge(source, sink);\n        } catch (IOException e) {\n            logger.error(e.toString(), e);\n            throw new FaultException(\"System error copying stream\", e);\n        } finally {\n            IOUtils.closeQuietly(source);\n            IOUtils.closeQuietly(sink);\n        }\n    }\n", "label": 1, "substitutes": {"simulate": ["smure", "simulates", "modulate", " simulation", "smulates", "modulates", "smulate", " simure", "simulation", "smulation", "modure", "simure", " simulates", "modulation"], "out": ["ger", "print", "t", "e", "conv", "aos", "output", "conf", "copy", "gen", "content", "on", "f", "base", "screen", "all", "cfg", "exp", "name", "pretty", "con", "list", "ins", "gov", "ent", "pool", "w", "err", "v", "at", "p", "OU", "io", "help", "up", "in", "flush", "c", "ex", "write", "o", "set", "net", "raw", "conn", "cn", "gr", "client", "sys", "handle", "sum", "cmd", "can", "outs", "state", "batch", "log", "obj", "to", "null", "n", "inner", "res", "outer", "buffer", "init", "writer", "tree", "error", "OUT", "report", "Out", "cache", "it", "ou", "gc", "last", "put", "store", "b", "nr", "nt", "manager", "inv", "go", "group", "hit", "co", "os"], "file": ["path", "log", "lock", "io", "resource", "FILE", "b", "channel", "ile", "t", "e", "File", "output", "filename", "model", "library", "connection", "port", "console", "f", "base", "set", "play", "buffer", "table", "format", "result", "message", "db", "fp", "input", "document", "name", "template", "data", "source", "le", "report", "l", "handle", "pool", "type"], "obtainUserReputationRequest": ["obtainUserRepresentutationQuery", "obtainUserReputationsTask", "obtainUserReputionRequest", "obtainUserRepationResponse", "obtainUserRepresentutationRequest", "obtainUserRepresentutationTarget", "obtainUserRelutationQuery", "obtainUserReputationsError", "obtainUserReputationTask", "obtainUserRepresentationTarget", "obtainUserRepationrequest", "obtainUserReputationsTarget", "obtainUserReplutationTarget", "obtainUserReputionResponse", "obtainUserReputationQuery", "obtainUserReputationsResponse", "obtainUserRepositoryQuery", "obtainUserRepresentationQuery", "obtainUserRepositoryResponse", "obtainUserRepositoryRequest", "obtainUserReputationTarget", "obtainUserReplutationResponse", "obtainUserRelutationTask", "obtainUserRepetitionTarget", "obtainUserReputationsQuery", "obtainUserRepationTarget", "obtainUserReporationResponse", "obtainUserRelutationRequest", "obtainUserReporationQuery", "obtainUserReputionTarget", "obtainUserRepetitionRequest", "obtainUserRepresentutationResponse", "obtainUserReputationError", "obtainUserRepresentutationError", "obtainUserRelutationResponse", "obtainUserReputionrequest", "obtainUserRepresentutationrequest", "obtainUserRepresentationError", "obtainUserReputionTask", "obtainUserRelutationsRequest", "obtainUserReporationRequest", "obtainUserRepationRequest", "obtainUserReporationError", "obtainUserReputationrequest", "obtainUserRepresentationResponse", "obtainUserRelutationsResponse", "obtainUserRepresentationRequest", "obtainUserRepationQuery", "obtainUserRelutationsQuery", "obtainUserRelutationsTask", "obtainUserRepositoryTask", "obtainUserReputionQuery", "obtainUserReputationsRequest", "obtainUserReputationsrequest", "obtainUserRepresentationrequest", "obtainUserRepetitionResponse", "obtainUserRepationError", "obtainUserReplutationRequest"], "obtainUserReputationResponse": ["obtainUserRepulationAnswer", "obtainUserReputationResp", "obtainUserReputationsAnswer", "obtainUserRepositoryResp", "obtainUserReputationsResp", "obtainUserReputationService", "obtainUserReputationsResponse", "obtainUserRepulationResponse", "obtainUserRepositoryResponse", "obtainUserReportutationResponse", "obtainUserReportositoryResp", "obtainUserRepulationService", "obtainUserRepositoryAnswer", "obtainUserReportositoryResponse", "obtainUserRepulationResp", "obtainUserReportositoryAnswer", "obtainUserReportositoryService", "obtainUserReputationAnswer", "obtainUserReportutationAnswer", "obtainUserRepositoryService", "obtainUserReportutationResp", "obtainUserReputationsService", "obtainUserReportutationService"], "rateUserRequest": ["RateUserGrant", "rateClientGrant", "rateJobResponse", "rateuserRequ", "rateuserQuery", "rateuserCommand", "raceUserRecord", "RateUserChange", "rateuserAccess", "rateClientJob", "rateOwnerRecord", "rateUsersChange", " rateUserrequest", "createUserCommand", "scaleOwnerAccess", "rateClientRequest", "rateRowResponse", "rateProxyQuery", "RateUserQUEST", "RateLineResponse", "RateUsersQUEST", "raceUserrequest", "rateUsersResponse", "raceRowrequest", "RateUsersQuery", "rateOwnerrequest", "rateRowrequest", "rateLineRequ", "rateTimerequest", "rateSamplerequest", "rateUserJob", "rateuserResponse", "rateJobRequest", "rateUserRequ", "rateLineRequest", "rateLineCommand", "scaleUserRequest", "rateProxyResponse", "rateProxyRequest", "rateUserGrant", "rateOwnerRequest", "rateUsersQUEST", "scaleOwnerRequest", "scaleUserResponse", "createuserRequest", " rateUserQuery", "rateuserRequest", "scaleUserAccess", "rateLineQuery", "RateUsersResponse", "createUserRequest", "RateUserQuery", "rateUsersRequest", "RateUsersrequest", "createuserRequ", "rateClientrequest", "rateSampleCommand", " rateUserJob", "rateUserrequest", "RateLinerequest", "rateRowRequest", "RateUsersRequest", "RateUserRequest", "raceRowRequest", "rateDateResponse", "RateClientRequest", "rateUserChange", "rateSampleRequ", "rateJobChange", "rateUserQuery", "rateTimeRequest", "rateUsersQuery", "rateLineGrant", "RateUsersChange", "rateDateRequest", "rateSampleRequest", "rateUserQUEST", "createuserCommand", "rateuserQUEST", "rateDateGrant", "rateUserAccess", "rateUserRecord", "rateUserCommand", "createUserRequ", "raceUserRequest", "createUserrequest", "RateUserResponse", "rateUsersrequest", "rateOwnerResponse", "RateLineQuery", "rateTimeResponse", "rateRowRecord", "RateClientResponse", "scaleOwnerResponse", "rateuserrequest", "RateUserrequest", "RateClientGrant", "rateClientResponse", "createuserrequest", "rateUsersAccess", "rateLineResponse", "rateOwnerAccess", "rateLinerequest", "RateLineRequest", "rateRowJob", "raceRowRecord", "rateProxyQUEST"], "rateUserResponse": ["rateControllerRequest", " rateClientresponse", "ratesUserRequest", "rateControllerResponse", "rateMethodVersion", "rateUserresponse", "rateFileRequest", "ratesClientMessage", "rateManagerRequest", "rateMemberReply", " rateUserresponse", "rateUsersAnswer", "rateUserVersion", "rateClientRequest", " rateUserAnswer", "rateUsersResponse", " rateUserReturn", "rateuserResponse", " rateClientReturn", "rateUserMessage", "rateMethodData", "rateClientresponse", "rateUserReturn", "rateControllerMessage", "RateUserReply", "rateuserReply", "ratesClientResp", "rateDateVersion", "rateMemberResponse", "rateuserRequest", "ratesUserMessage", "rateWordReturn", "rateManagerMessage", "RateUsersResponse", "rateuserresponse", "rateMemberRequest", " rateClientResponse", "ratesUserResponse", "rateMethodRequest", "rateFileresponse", " rateUserStatus", "rateFileResponse", "rateUsersRequest", "rateTimeAnswer", "rateClientMessage", "rateFileReturn", "rateMemberresponse", " rateClientRequest", "RateUserData", "rateUserResp", "rateClientResp", "rateUsersReply", "rateManagerResp", "RateUsersRequest", "rateTimeStatus", "rateUserReply", "RateUserRequest", "rateDateResponse", "rateWordResponse", "rateUsersStatus", "rateClientReturn", "RateUserVersion", "rateTimeRequest", "rateDateRequest", "ratesClientRequest", "rateMethodResponse", "rateUsersresponse", "rateWordresponse", "rateUserData", "rateWordRequest", "rateControllerResp", "RateUsersReply", "RateUserResponse", "rateTimeResponse", "rateManagerResponse", "rateClientResponse", "RateUserresponse", "ratesClientResponse", "ratesUserResp", "RateUsersresponse", "rateUserAnswer", "rateUserStatus", "rateDateData"], "fis": ["FIS", "flis", "sfIS", "lIS", "fli", "flisa", "sfiss", "liss", "sfIs", " fi", "fiss", "fIs", "Fis", "bis", " fisa", "FIs", "sfis", "lis", "fisa", "Fiss", "lIs", "fIS", "fi", "bi", "bisa"], "br": ["sr", "dr", "lr", "BR", "ctr", "str", "ger", "bt", "browser", "be", "nr", "gb", "bridge", "vr", "mr", "bl", "bro", "cr", "bh", "adr", "ber", "hr", "wr", "bm", "ch", "gr", "pr", "bd", "bn", "bf", "bp", "tr", "shr", "fr", "kr", "bi", "div", "buf", "Br"], "call": ["send", "contact", "cell", "function", "Call", "log", "ell", "str", "char", "test", "update", "bridge", "cin", "inv", "url", "c", "word", "n", "block", "query", "check", "label", "status", "code", "trace", "play", "result", "message", "draw", "action", "all", "name", "frame", "comment", "line", "callback", "report", "called", "add", "use", "list", "execute", "request", "info", "cal", "continue", "dial", "command"]}}
{"id1": "6470716", "id2": "4531653", "code1": "    public static void main(String[] args) throws Exception {\n        String st = \"http://www.kmzlinks.com/redirect.asp?id=113&file=HeartShapedIsland.kmz\";\n        URL url = new URL(st);\n        InputStream fis = null;\n        if (\"file\".equals(url.getProtocol())) fis = new FileInputStream(url.getFile()); else if (\"http\".equals(url.getProtocol())) fis = url.openStream();\n        ZipInputStream zis = new ZipInputStream(fis);\n        ZipEntry entry;\n        while ((entry = zis.getNextEntry()) != null) {\n            System.out.println(\"Extracting: \" + entry);\n            int count;\n            byte data[] = new byte[BUFFER];\n            FileOutputStream fos = new FileOutputStream(entry.getName());\n            BufferedOutputStream dest = new BufferedOutputStream(fos, BUFFER);\n            while ((count = zis.read(data, 0, BUFFER)) != -1) dest.write(data, 0, count);\n            dest.flush();\n            dest.close();\n        }\n        zis.close();\n    }\n", "code2": "    public static String md5(String data) {\n        try {\n            MessageDigest md = MessageDigest.getInstance(MD);\n            md.update(data.getBytes(UTF8));\n            return encodeHex(md.digest());\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }\n", "label": 0, "substitutes": {"st": ["ast", "d", "ust", "St", "ste", "step", "ld", "str", "sw", "ost", "store", "std", "start", "stable", "sm", "t", "service", "stra", "ist", "nd", "ST", "sth", "sta", "set", "sp", "sty", "est", "th", "ft", "rt", "www", "sts", "rest", "inst", "tt", "stri", "stream", "sh", "sn", "se"], "url": ["build", "sl", "gl", "address", "fl", "string", "ret", "Url", "file", "li", "abs", "str", "nl", "mail", "char", "browser", "ls", "shell", "r", "dl", "null", "pl", "ll", "host", "ssl", "html", "location", "link", "f", "uri", "rel", "base", "URL", "cl", "web", "loc", "ur", "ch", "github", "cert", "impl", "client", "bel", "hl", "http", "www", "rest", "addr", "mount", "el", "rect", "l", "domain", "ref", "il", "ul"], "fis": ["feois", "Fos", "Fais", "tais", " fisl", "efis", "flis", " f\u00eds", "xfois", "ufis", "xfis", "fais", "ufisl", "fli", "xfi", "feier", " fiss", "feis", "Fois", " fi", "tos", "tiss", "fois", "fiss", "Fis", "fisl", "fei", "f\u00eds", "efi", "fliss", "ufi", " fais", "ef\u00eds", "Fiss", "efiss", "flisl", "fier", "tis", "fi", "uf\u00eds", "xfier", "ufiss", "Fier", "Fi"], "zis": ["zhIs", "czisa", "zisa", "zhes", "zhis", "zeniss", "zipisin", " zits", "zisin", "ozisa", "zhisin", "fris", "fits", "ozes", "zenris", "ziss", "zos", "zipos", "zisi", " zris", " zos", "zIs", " zisa", "zits", "ozits", "fiss", "ozis", "czis", "zipIs", "zipes", "zris", " zisi", " ziss", "ozIs", "czIs", "ozisin", "fisi", "zipis", "zenis", "czits", "zipits", "zes", " zIs", "zenisi"], "entry": ["system", "jar", "item", "card", "cell", "match", "log", "field", "member", "ce", "Entry", "char", "e", "obj", "event", "nt", "be", "row", "record", "attribute", "index", "way", "null", "word", "office", "pattern", "jo", "zip", "inter", "link", "valid", "def", "form", "result", "zo", "out", "enter", "tmp", "entity", "element", "sp", "ie", "ry", "name", "comment", "line", "source", "key", "or", "chain", "list", "fr", "ent", "info", "existent", "de", "se"], "count": ["err", "force", "cell", "batch", "number", "match", "ctr", "ount", "amount", "nb", "length", "char", "t", "start", "nt", "num", "child", "max", "current", "total", "len", "call", "index", "c", "n", "check", "code", "cc", "base", "iter", "ct", "buffer", "page", "counter", "end", "found", "acc", "ch", "core", "read", "ind", "name", "Count", "comment", "cont", "add", "sum", "depth", "last", "size"], "data": ["text", "d", "sample", "bytes", "batch", "number", "ata", "dat", "string", "step", "part", "length", "output", "good", "n", "mu", "block", "mem", "area", "reason", "def", " DATA", "buffer", "table", "message", "result", "format", "raw", "out", "all", "name", "zero", "source", "value", "image", "chain", "done", "DATA", "cache", "json", "next", "buf", "bin", "size"], "fos": ["Fos", "fooss", "fios", "woss", " fOS", "fol", "Fops", "foss", "wOS", "fiol", "fioss", "his", "fops", "hoss", "Fol", "foops", "foos", "wis", "hos", "fOS", "fiops", "hOS", "fool", "wos", " foss", "Foss"], "dest": ["master", "send", "foreign", "trans", "them", "decl", "dat", "des", "member", "parent", "gate", "crit", "src", "cat", "test", "std", "Dest", "nt", "gest", "ptr", "temp", "nd", "output", "target", "pipe", "pas", "nom", "way", "mem", "det", "desc", "comp", "loc", "out", "est", "result", "usr", "writer", "exp", "transfer", "dist", "source", "cont", "rest", "done", "comb", "sum", "bin", "origin", "coord", "dc"]}}
{"id1": "14758866", "id2": "7911686", "code1": "    public synchronized InputStream getResourceAsStream(String name) {\n        InputStream inputStream = null;\n        BufferedInputStream in = null;\n        BufferedOutputStream out = null;\n        try {\n            URL url = getResource(name);\n            String remoteName = url.toExternalForm();\n            String localName = (String) cacheHashtable.get(remoteName);\n            if (localName != null) {\n                System.out.println(\"Retrieving \\\"\" + localName + \"\\\"...\");\n                return new FileInputStream(localName);\n            }\n            String host = url.getHost();\n            String prot = url.getProtocol();\n            int port = url.getPort();\n            File cacheFile = new File(cacheDir, prot + File.separator + host + File.separator + \"port\" + (port == -1 ? \"\" : Integer.toString(port)) + File.separator + name);\n            cacheFile = new File(cacheFile.getCanonicalPath());\n            localName = cacheFile.getCanonicalPath();\n            System.out.println(\"Comparing \\\"\" + localName + \"\\\"...\");\n            URLConnection urlConnection = url.openConnection();\n            if (cacheFile.exists()) {\n                urlConnection.setIfModifiedSince(cacheFile.lastModified());\n            }\n            if (urlConnection instanceof HttpURLConnection) {\n                HttpURLConnection httpURLConnection = (HttpURLConnection) urlConnection;\n                httpURLConnection.setFollowRedirects(true);\n                httpURLConnection.setRequestMethod(\"GET\");\n                int responseCode = httpURLConnection.getResponseCode();\n                System.out.println(httpURLConnection.getResponseMessage() + \", \" + httpURLConnection.getContentLength() + \" bytes\" + \", \" + new Date(httpURLConnection.getDate()) + \", \" + new Date(httpURLConnection.getLastModified()));\n                if (responseCode != HttpURLConnection.HTTP_OK) {\n                    return null;\n                }\n            }\n            inputStream = urlConnection.getInputStream();\n            if (inputStream == null) return null;\n            if (cacheFile.exists()) {\n                long lastModified = urlConnection.getLastModified();\n                if ((lastModified > 0) && (lastModified < cacheFile.lastModified())) {\n                    inputStream.close();\n                    cacheHashtable.put(remoteName, localName);\n                    System.out.println(\"Retrieving \\\"\" + localName + \"\\\"...\");\n                    return new FileInputStream(cacheFile);\n                }\n            }\n            File parentFile = new File(cacheFile.getParent());\n            parentFile.mkdirs();\n            localName = cacheFile.getCanonicalPath();\n            System.out.println(\"CACHING \\\"\" + localName + \"\\\"...\");\n            in = new BufferedInputStream(inputStream);\n            out = new BufferedOutputStream(new FileOutputStream(cacheFile));\n            int i;\n            while ((i = in.read()) > -1) out.write(i);\n            out.close();\n            in.close();\n            cacheHashtable.put(remoteName, localName);\n            System.out.println(\"Retrieving \\\"\" + localName + \"\\\"...\");\n            return new FileInputStream(localName);\n        } catch (Exception ex) {\n            try {\n                inputStream.close();\n            } catch (Exception ex1) {\n            }\n            try {\n                in.close();\n            } catch (Exception ex1) {\n            }\n            try {\n                out.close();\n            } catch (Exception ex1) {\n            }\n            ex.printStackTrace();\n            return null;\n        }\n    }\n", "code2": "    public static void copyFile(File source, File destination) throws IOException {\n        FileChannel in = null;\n        FileChannel out = null;\n        try {\n            in = new FileInputStream(source).getChannel();\n            out = new FileOutputStream(destination).getChannel();\n            in.transferTo(0, in.size(), out);\n        } finally {\n            if (in != null) in.close();\n            if (out != null) out.close();\n        }\n    }\n", "label": 1, "substitutes": {"getResourceAsStream": ["getResourceASInput", "getResourceASStream", "getResourceasForm", "getStreamasSteam", "getResourceASForm", "getStreamasStream", "getResourceASSteam", "getStreamasForm", "getResourceInInput", "getResourceasStream", "getResourceInStream", "getStreamAsForm", "getResourceasSteam", "getResourceasInput", "getResourceAsInput", "getResourceInForm", "getResourceInSteam", "getStreamAsSteam", "getStreamAsInput", "getResourceAsSteam", "getStreamasInput", "getResourceAsForm", "getStreamAsStream"], "name": ["local", "search", "path", "address", "description", "string", "file", "missing", "id", "resource", "part", "remote", "ame", "run", "filename", "names", "NAME", "n", "a", "title", "location", "uri", "initial", "base", "size", "prefix", "format", "Name", "client", "error", "source", "image", "password", "key", "version", "pkg", "cache", "domain", "type", "word"], "inputStream": ["rawStream", "InputForm", "inputView", "inputstream", " inputstream", "currentPort", "inputPort", "inputFile", "quickForm", "InputFile", "uploadView", "currentStream", "uploadstream", "uploadSteam", "rawView", "inputChannel", "inputSteam", " inputChannel", " inputView", "uploadStream", " inputSteam", "InputChannel", " inputForm", "inputForm", "currentSteam", "currentFile", "quickSteam", "InputPort", "rawSteam", " inputPort", "quickStream", "InputStream", "rawstream", "quickChannel", " inputFile", "InputSteam"], "in": ["mc", "file", "p", "io", "inf", "context", "edIn", "r", "IN", "n", "inner", "m", "o", "buffer", "din", "input", "data", "In", "ai", "ins", "xml", "info", "bin", "stream", "con"], "out": ["ln", "err", "log", "dir", "p", "io", "print", "b", "t", "obj", "conv", "nt", "up", "msg", "output", "inv", "c", "to", "n", "ex", "inner", "res", "inter", "m", "outer", "dis", "o", "net", "buffer", "screen", "tmp", "cn", "conn", "user", "cfg", "writer", "all", "client", "pretty", "sys", "OUT", "report", "group", "Out", "list", "ins", "l", "cache", "gov", "info", "ou", "outs", "last", "os", "w"], "url": ["build", "path", "address", "gl", "git", "file", "Url", "log", "abs", "str", "nl", "resource", "mail", "b", "char", "remote", "browser", "ls", "re", "r", "call", "dl", "ll", "https", "ssl", "link", "location", "html", "f", "uri", "base", "server", "URL", "rel", "web", "cl", "loc", "get", "ur", "raw", "github", "impl", "hl", "bel", "http", "rl", "addr", "mount", "el", "l", "handle", "xml", "domain", "ref", "this", "il", "sql"], "remoteName": ["quickPath", "quickName", "remotePath", "quickname", "externalName", "commonPath", "localPath", "commonname", "commonKey", "externalname", "quickKey", " remotePath", "externalPath", " remotename", "localname", "remoteKey", "externalKey", " remoteKey", "remotename", "commonName", "localKey"], "localName": ["locValue", " localNames", "shortname", "shortName", "fixedNAME", "singlename", "LocalNames", "Localname", " localType", " localFilename", " localFile", "locName", "locType", "localNames", "remoteImage", "localNAME", "fullname", "shortNAME", "fullKey", "singleFilename", "fixedname", "localFilename", "localType", "locFilename", " localKey", "singleNAME", "locImage", "remoteFile", "locNode", "fullValue", " localname", " localImage", " localNode", "LocalName", "fixedName", "localValue", "LocalValue", "fullNames", "locFile", "remoteNode", "remoteFilename", "localFile", "remoteNames", "localname", "remoteValue", "localNode", "localImage", "remoteType", "fixedFilename", "remoteKey", "LocalKey", "shortFilename", " localValue", "singleName", "fullName", "localKey"], "host": ["local", "system", "localhost", "path", "address", "subject", "h", "dir", "height", "campus", "ost", "remote", "bind", "ca", "target", "Host", "uri", "server", "base", "loc", "root", "hd", "cert", "client", "hook", "http", "www", "source", "home", "addr", "top", "chain", "handle", "ip", "hop", "domain"], "prot": ["system", "path", "ping", "typ", "at", "tp", "ret", "pro", "eth", "sche", "Prot", "ios", "pattern", "https", "pat", "crypt", "ssl", "rot", "server", "tel", "iot", "col", "prefix", "net", "uri", "format", "client", "http", "top", "ht", "password", "version", "header", "prototype", "pkg", "ocol", "platform", "pool", "type", "ref", "prop"], "port": ["pport", "localhost", "ping", "number", "pt", "proxy", "file", "p", "post", "pro", "point", "print", "length", "Port", "test", "position", "PORT", "limit", "ort", "trust", "pi", "eport", "duration", "language", "server", "ports", "size", "note", "padding", "trace", "pe", "page", "message", "column", "project", "pid", "client", "priority", "width", "socket", "report", "key", "password", "version", "pool", "timeout"], "cacheFile": ["mapfile", " cacheUser", " cachefile", "tempFile", "Cachefile", " cacheEntry", "localDir", "CacheDir", "CacheEntry", "cacheEntry", "apacheFile", " cacheStore", " cacheFilename", "cacheField", "CacheFilename", "acheUser", "cachefile", " cacheFolder", " cacheField", "cacheFolder", "cacheDir", "acheDir", "CacheFile", "apacheInfo", "cacheFILE", "cacheFilename", " cacheFILE", "achefile", "proxyInfo", "apacheFolder", "CacheStore", "acheFile", "localEntry", "localfile", "proxyfile", "localFiles", "CacheFiles", "cacheStore", "mapStore", "mapFile", "cacheInfo", "tempfile", "tempFILE", "CacheFILE", "acheField", "localField", "CacheFolder", "tempFilename", "cacheFiles", "mapDir", "localFile", "localUser", " cacheInfo", " cacheDir", "cacheUser", "acheFolder", " cacheFiles", "localStore", "proxyFolder", "proxyFile", "apachefile"], "urlConnection": ["channelComment", "dlConnector", "UrlResponse", "channelConnect", "URLConn", "httpTransaction", "URLFile", "urlConnect", "dlComment", "httpFile", " urlconnection", "dlConnect", " urlResponse", "urlLink", "UrlConnect", "urlResponse", "httpconnection", "sslConnection", "urlTransaction", "llConn", "llconnection", "dlConn", "browserFile", "Urlconnection", "llConnector", "browserConn", "methodconnection", "channelConnection", "httpConnection", "browserConnect", "browserConnector", "dlConnection", "channelConnector", "URLConnector", " urlTransaction", " urlConnect", "UrlConnection", "httpLink", "methodConnection", "browserConnection", "browserconnection", "urlConnector", "methodLink", "sslTransaction", "sslconnection", "sslConnect", "urlconnection", "httpConn", "URLConnect", "URLComment", "urlFile", "methodConnect", "UrlLink", "httpConnect", "dlconnection", "URLConnection", "llConnection", "urlConn", "urlComment", "browserResponse"], "httpURLConnection": ["httpDOMconnection", "httpSRConn", "httpMLConnect", "webURLconnection", "historyILconnection", "HttpURLInstance", "httpREConn", "httpURLInstance", "httpURLConn", "httpSSLConnect", "httpMLConnection", "httpUrlconnection", " httpMLConn", "webURLConnection", "httpUrlConnect", "httpDOMConnect", " httpURLConnect", "historyURLconnection", "httpALLconnection", "HttpURLConnection", "webURLEntry", " httpURLConn", "httpHTTPTransaction", "httpHTTPInstance", "httpTLConn", "historyILNetwork", "HttpURLConnect", "httpDOMConnection", "webUrlconnection", "httpSRConnect", "historyURLConnect", "webUrlConnect", " httpURLconnection", "httpURLNetwork", "webURLConnect", "HttpHTTPConnect", "httpREConnect", "httpSSLEntry", "githubURLconnection", "httpURLTransaction", "httpHTTPConnection", "httpULInstance", " httpMLconnection", "githubUrlconnection", "HttpURLConnector", "httpILconnection", "httpTLConnection", "httpsURLConnect", "historyILConnection", "httpHTTPNetwork", "HttpURLEntry", "historyILConnect", "httpULConnect", "httpURLEntry", "HttpHTTPInstance", "httpHTTPConnect", "httpSRconnection", "httpsURLConnection", "httpPORTConnection", "httpTLConnector", "httpALLConn", "httpSSLConnection", "httpILConnect", "httpHTTPConnector", "HttpHTTPEntry", "HttpURLConn", "httpURLConnect", "HttpHTTPConn", "httpDBConnect", "httpDBconnection", "httpSSLInstance", "httpPORTConnect", "HttpHTTPconnection", "httpALLConnect", "httpMLConn", "HttpURLconnection", "githubUrlConnect", "httpUrlNetwork", "httpULEntry", "httpPORTConnector", "httpHTTPconnection", "httpHTTPEntry", "httpsHTTPConnection", "httpREConnection", "githubURLConnect", "httpDOMEntry", "githubURLConnection", "httpURLConnector", "httpSRConnection", "httpTLConnect", "HttpHTTPConnection", "httpsHTTPConn", "HttpHTTPConnector", "httpsHTTPConnect", " httpMLConnection", "httpREConnector", "httpDBTransaction", "httpILConnection", "httpHTTPConn", "httpMLconnection", "httpILNetwork", "historyURLNetwork", "httpsHTTPConnector", "httpURLconnection", "httpsURLConn", "githubUrlTransaction", "httpULConnection", " httpMLConnect", "httpUrlConnection", "webUrlEntry", "webUrlConnection", "httpALLConnection", "httpUrlTransaction", "githubUrlConnection", "historyURLConnection", "githubURLTransaction", "httpDBConnection", "httpsURLConnector", "httpUrlConnector", "httpUrlEntry"], "responseCode": ["responseCategory", "requestCode", "resultCount", "requestClass", "complianceCategory", " responseActionCode", "responseSize", "ResponseClass", "responseClass", "resultClass", "resultSize", "requestSize", "responseCount", "complianceCode", "ResponseCount", "replyActionCode", "requestCount", "resultCode", "replyCategory", "complianceActionCode", "responseActionCode", "replyClass", "replyCode", "ResponseCode", "ResponseSize", " responseClass", "complianceClass", " responseCategory"], "lastModified": ["lastContentmodified", "lastModification", "lastmodify", "LastContentifier", "lastModmodified", "lastContentification", "lastTrify", "lastMODification", "lastmodified", "lastMODified", "lastTred", " lastTrmodified", "lastmodification", " lastTrified", "lastmoded", "_", "LastContentified", "lastContentified", "lastTrifier", "lastMODifier", " lastTrification", "lastMODify", "lastContentifier", "lastTrmodified", "lastContented", " lastModmodified", "LastContentification", "LastModified", "lastModed", "LastContentify", "lastTrified", "lastModifier", "LastModification", " lastModification", "lastmodmodified", " lastTred", " lastModify", "lastModify", "LastModifier", "LastModify", " lastTrify", "lastTrification", "New", " lastModed", "lastContentify"]}}
{"id1": "2736184", "id2": "13516684", "code1": "    public static String getURLContent(String urlPath, String requestData, String charset) {\n        BufferedReader reader = null;\n        HttpURLConnection conn = null;\n        StringBuffer buffer = new StringBuffer();\n        OutputStreamWriter out = null;\n        try {\n            URL url = new URL(urlPath);\n            conn = (HttpURLConnection) url.openConnection();\n            conn.setRequestMethod(\"POST\");\n            conn.setDoOutput(true);\n            conn.setUseCaches(false);\n            conn.setDefaultUseCaches(false);\n            conn.setConnectTimeout(10000);\n            conn.setReadTimeout(60000);\n            out = new OutputStreamWriter(conn.getOutputStream(), charset);\n            out.write(requestData);\n            out.flush();\n            int repCode = conn.getResponseCode();\n            if (repCode == 200) {\n                int count = 0;\n                char[] chBuffer = new char[1024];\n                BufferedReader input = new BufferedReader(new InputStreamReader(conn.getInputStream(), charset));\n                while ((count = input.read(chBuffer)) != -1) {\n                    buffer.append(chBuffer, 0, count);\n                }\n            }\n        } catch (Exception ex) {\n            logger.error(\"\", ex);\n        } finally {\n            try {\n                if (out != null) {\n                    out.close();\n                }\n                if (reader != null) {\n                    reader.close();\n                }\n                if (conn != null) {\n                    conn.disconnect();\n                }\n            } catch (Exception ex) {\n            }\n        }\n        return buffer.toString();\n    }\n", "code2": "    void run(PseudolocalizerArguments arguments) throws IOException {\n        List<String> fileNames = arguments.getFileNames();\n        PseudolocalizationPipeline pipeline = arguments.getPipeline();\n        if (arguments.isInteractive()) {\n            runStdin(pipeline);\n            return;\n        }\n        if (fileNames.size() == 0) {\n            MessageCatalog msgCat = FormatRegistry.getMessageCatalog(arguments.getType());\n            writeMessages(msgCat, readAndProcessMessages(pipeline, msgCat, System.in), System.out);\n            return;\n        }\n        String suffix = arguments.getVariant();\n        if (suffix == null) {\n            suffix = \"_pseudo\";\n        } else {\n            suffix = \"_\" + suffix;\n        }\n        for (String fileName : fileNames) {\n            File file = new File(fileName);\n            if (!file.exists()) {\n                System.err.println(\"File \" + fileName + \" not found\");\n                continue;\n            }\n            int lastDot = fileName.lastIndexOf('.');\n            String extension;\n            String outFileName;\n            if (lastDot >= 0) {\n                extension = fileName.substring(lastDot + 1);\n                outFileName = fileName.substring(0, lastDot) + suffix + \".\" + extension;\n            } else {\n                extension = \"\";\n                outFileName = fileName + suffix;\n            }\n            System.out.println(\"Processing \" + fileName + \" into \" + outFileName);\n            String fileType = arguments.getType();\n            if (fileType == null) {\n                fileType = extension;\n            }\n            MessageCatalog msgCat = FormatRegistry.getMessageCatalog(fileType);\n            InputStream inputStream = new FileInputStream(file);\n            List<Message> processedMessages = readAndProcessMessages(pipeline, msgCat, inputStream);\n            OutputStream outputStream = new FileOutputStream(new File(outFileName));\n            writeMessages(msgCat, processedMessages, outputStream);\n        }\n    }\n", "label": 0, "substitutes": {"getURLContent": ["getUrlContent", "geturlData", "postHTTPContent", "postURLContents", "getUrlContents", "getHTTPData", "getURLData", "getURLBody", "getHTTPContents", "getUrlData", "postURLBody", "getHTTPBody", "postHTTPBody", "postHTTPContents", "postHTTPData", "geturlBody", "geturlContents", "postURLData", "postURLContent", "getHTTPContent", "getURLContents", "getUrlBody", "geturlContent"], "urlPath": [" urlCl", "fileP", "dllPa", "uriCl", "dllCl", "UrlPo", "uriPath", "filePo", "uriName", "urlPa", " urlName", "uriPa", "urlName", "urlPo", " urlP", "dllPath", "UrlName", "urlP", "fileName", "dllName", "UrlPath", " urlPo", " urlPa", "UrlP", "filePath", "urlCl"], "requestData": ["caseString", " requestDate", "referenceContent", "referenceData", "caseData", "referenceDate", " requestDATA", "requestContent", " requestInfo", "requestDate", "questData", "RequestData", "questDate", "questInfo", "requestDATA", "RequestDATA", "questContent", " requestContent", "RequestString", "referenceInfo", " requestString", "requestString", "RequestContent", "caseDATA", "requestInfo", "caseContent"], "charset": ["chablesets", " charsect", "cherset", "chatset", "chamesets", "chaset", "Charspec", "chamesET", "chaspec", "chersect", "contarsET", "chinsat", " charsabet", "CharsET", "Charset", "chinsabet", "chersabet", "ChARSet", "ChARSpec", "contablesec", "chapsabet", "chARSpec", "chamesec", "chinsET", " chapsET", "ChARSat", "chableset", "charsET", "chameset", "Charsat", "chablesET", "chapsET", "contarsec", "chatsec", "chapsect", "charsect", "chersET", "charsets", "contablesets", "chasET", "chinsect", "chARSET", "contablesET", "contableset", "chatsET", "chasat", "ChARSET", " chapsabet", "charsabet", "charsat", " chapsect", " charsET", "charspec", "chinset", "chablesec", " chapset", "contarset", "chapset", "chARSet", "chatsets", "chARSat", "charsec", "contarsets", "chinspec"], "reader": ["dr", "lr", "file", "io", "resource", "print", "wrapper", "rx", "loader", "ner", "in", "row", "Reader", "mr", "r", "query", "ro", "inner", "rar", "ssl", "builder", "runner", "iterator", "iter", "rd", "writer", "read", "parser", "rr", "client", "readable", "comment", "source", "rer", "rl", "driver", "rc", "ser", "er", "stream", "handler"], "conn": ["tp", "conv", "Conn", "nn", "msg", "auth", "conf", "gen", "ssl", "close", "cc", "on", "ns", "cf", "com", "ch", "reg", "addr", "ont", "proc", "jp", "ln", "err", "cur", "typ", "txt", "ca", "open", "pas", "cp", "c", "fin", "rel", "ct", "net", "cn", "client", "att", "enc", "cmd", "org", "subject", "canon", "wn", "obj", "Connection", "ctx", "bo", "n", "res", "col", "syn", "connect", "init", "cert", "yn", "apt", "nc", "cont", "exec", "coll", "dial", "en", "lang", " con", "nt", "ls", "j", "pg", "comm", "act", "connection", "cs", "ann", "cb", "pkg", "co", "con"], "buffer": ["black", "batch", "string", "binary", "sequence", "file", "bar", "queue", "print", "program", "printf", "bridge", "row", "total", "output", "copy", "block", "connection", "code", "trace", "table", "message", "buff", "result", "database", "commit", "reference", "document", "template", "comment", "line", "memory", "report", "header", "response", "cache", "pool", "buf", "Buffer", "temp", "this", "command"], "out": ["os", "serv", "cos", "op", "outs", "at", "file", "en", "OU", "by", "io", "print", "t", "obj", "conv", "nt", "in", "up", "ot", "aos", "no", "extra", "output", "flush", "external", "to", "n", "write", "res", "auto", "outer", "on", "o", "note", "net", "end", "oss", "cn", "ch", "user", "writer", "all", "client", "sys", "source", "OUT", "one", "or", "Out", "cache", "it", "g", "ent", "ou", "gc", "can", "ne", "co", "con", "w", "timeout"], "url": ["arl", "sl", "gl", "lr", "log", "Url", "abs", "str", "nl", "mail", "b", "char", "loader", "ls", "ol", "open", "r", "dl", "ll", "pl", "ssl", "link", "f", "rel", "base", "URL", "api", "web", "net", "loc", "ur", "q", "ml", "name", "hl", "bel", "http", "rl", "el", "l", "il", "org", "lb", "ul"], "repCode": ["repZone", "respCount", "regCount", "regRate", "regCode", "regZone", "respZone", "servZone", "respRate", "respCl", " repDay", "RepDay", "repCl", "repCount", " repCount", "repRate", "RepCount", "repDay", "RepCl", "servCount", " repCl", "servRate", "servCode", "respCode", "respDay", "RepCode"], "count": ["force", "match", "batch", "number", "cell", "ctr", "ount", "amount", "nb", "length", "char", "start", "nt", "child", "num", "current", "total", "max", "const", "conf", "call", "len", "index", "c", "n", "check", "port", "code", "cc", "ct", "counter", "found", "acc", "ch", "core", "read", "ind", "Count", "cont", "report", "add", "list", "sum", "cache", "depth", "find", "cycle", "size"], "chBuffer": ["echFrame", "charBuff", "chbuffer", " chFrame", "Chbuffer", "chBuff", "ichQueue", "ChBegin", "ichBuff", "charbuffer", "ChQueue", "achBuffer", "chQueue", "echBuffer", "echLength", "ichbuffer", "charBegin", "ichBuffer", "achBuff", "ChBuff", "qBuff", "qBegin", "ChBuffer", " chLength", "charBuffer", " chbuffer", "achQueue", "qbuffer", "chFrame", "achbuffer", "echbuffer", "achLength", "chBegin", "qBuffer", "chLength", "achFrame"], "input": ["text", "local", "background", "file", "before", "char", "inf", "Input", "history", "in", "more", "current", "progress", "open", "output", "view", "inc", "query", "inner", "pattern", "inside", "form", "get", "ahead", "raw", "active", "ch", "q", "read", "client", "data", "source", "cont", "image", "add", "ip", "it"]}}
{"id1": "23585985", "id2": "17580775", "code1": "    public static StreamSource getStreamSource(Item item, XQueryContext context) throws XPathException, MalformedURLException, IOException {\n        StreamSource streamSource = new StreamSource();\n        if (item.getType() == Type.JAVA_OBJECT) {\n            LOG.debug(\"Streaming Java object\");\n            Object obj = ((JavaObjectValue) item).getObject();\n            if (!(obj instanceof File)) {\n                throw new XPathException(\"Passed java object should be a File\");\n            }\n            File inputFile = (File) obj;\n            InputStream is = new FileInputStream(inputFile);\n            streamSource.setInputStream(is);\n            streamSource.setSystemId(inputFile.toURI().toURL().toString());\n        } else if (item.getType() == Type.ANY_URI) {\n            LOG.debug(\"Streaming xs:anyURI\");\n            String url = item.getStringValue();\n            if (url.startsWith(\"/\")) {\n                url = \"xmldb:exist://\" + url;\n            }\n            InputStream is = new URL(url).openStream();\n            streamSource.setInputStream(is);\n            streamSource.setSystemId(url);\n        } else if (item.getType() == Type.ELEMENT || item.getType() == Type.DOCUMENT) {\n            LOG.debug(\"Streaming element or document node\");\n            if (item instanceof NodeProxy) {\n                NodeProxy np = (NodeProxy) item;\n                String url = \"xmldb:exist://\" + np.getDocument().getBaseURI();\n                LOG.debug(\"Document detected, adding URL \" + url);\n                streamSource.setSystemId(url);\n            }\n            Serializer serializer = context.getBroker().newSerializer();\n            NodeValue node = (NodeValue) item;\n            InputStream is = new NodeInputStream(serializer, node);\n            streamSource.setInputStream(is);\n        } else if (item.getType() == Type.BASE64_BINARY || item.getType() == Type.HEX_BINARY) {\n            LOG.debug(\"Streaming base64 binary\");\n            BinaryValue binary = (BinaryValue) item;\n            byte[] data = (byte[]) binary.toJavaObject(byte[].class);\n            InputStream is = new ByteArrayInputStream(data);\n            streamSource.setInputStream(is);\n            if (item instanceof Base64BinaryDocument) {\n                Base64BinaryDocument b64doc = (Base64BinaryDocument) item;\n                String url = \"xmldb:exist://\" + b64doc.getUrl();\n                LOG.debug(\"Base64BinaryDocument detected, adding URL \" + url);\n                streamSource.setSystemId(url);\n            }\n        } else {\n            LOG.error(\"Wrong item type \" + Type.getTypeName(item.getType()));\n            throw new XPathException(\"wrong item type \" + Type.getTypeName(item.getType()));\n        }\n        return streamSource;\n    }\n", "code2": "        public void runInternal() {\n            connection = null;\n            boolean itemsLoadedPartially = false;\n            boolean loadNext = false;\n            HashSet<String> visited = new HashSet<String>();\n            do {\n                try {\n                    setProgressMessage(url.toString(), -1);\n                    visited.add(url.toString());\n                    long startTimeStamp = System.currentTimeMillis();\n                    delayedProgress = coolReader.getEngine().showProgressDelayed(0, progressMessage, PROGRESS_DELAY_MILLIS);\n                    URLConnection conn = url.openConnection();\n                    if (conn instanceof HttpsURLConnection) {\n                        onError(\"HTTPs is not supported yet\");\n                        return;\n                    }\n                    if (!(conn instanceof HttpURLConnection)) {\n                        onError(\"Only HTTP supported\");\n                        return;\n                    }\n                    connection = (HttpURLConnection) conn;\n                    connection.setRequestProperty(\"User-Agent\", \"CoolReader/3(Android)\");\n                    if (referer != null) connection.setRequestProperty(\"Referer\", referer);\n                    connection.setInstanceFollowRedirects(true);\n                    connection.setAllowUserInteraction(false);\n                    connection.setConnectTimeout(CONNECT_TIMEOUT);\n                    connection.setReadTimeout(READ_TIMEOUT);\n                    connection.setDoInput(true);\n                    String fileName = null;\n                    String disp = connection.getHeaderField(\"Content-Disposition\");\n                    if (disp != null) {\n                        int p = disp.indexOf(\"filename=\");\n                        if (p > 0) {\n                            fileName = disp.substring(p + 9);\n                        }\n                    }\n                    int response = -1;\n                    response = connection.getResponseCode();\n                    L.d(\"Response: \" + response);\n                    if (response != 200) {\n                        onError(\"Error \" + response);\n                        return;\n                    }\n                    String contentType = connection.getContentType();\n                    String contentEncoding = connection.getContentEncoding();\n                    int contentLen = connection.getContentLength();\n                    L.d(\"Entity content length: \" + contentLen);\n                    L.d(\"Entity content type: \" + contentType);\n                    L.d(\"Entity content encoding: \" + contentEncoding);\n                    setProgressMessage(url.toString(), contentLen);\n                    InputStream is = connection.getInputStream();\n                    delayedProgress.cancel();\n                    is = new ProgressInputStream(is, startTimeStamp, progressMessage, contentLen, 80);\n                    final int MAX_CONTENT_LEN_TO_BUFFER = 256 * 1024;\n                    boolean isZip = contentType != null && contentType.equals(\"application/zip\");\n                    if (expectedType != null) contentType = expectedType; else if (contentLen > 0 && contentLen < MAX_CONTENT_LEN_TO_BUFFER) {\n                        byte[] buf = new byte[contentLen];\n                        if (is.read(buf) != contentLen) {\n                            onError(\"Wrong content length\");\n                            return;\n                        }\n                        is.close();\n                        is = null;\n                        is = new ByteArrayInputStream(buf);\n                        if (findSubstring(buf, \"<?xml version=\") >= 0 && findSubstring(buf, \"<feed\") >= 0) contentType = \"application/atom+xml\";\n                    }\n                    if (contentType.startsWith(\"application/atom+xml\")) {\n                        L.d(\"Parsing feed\");\n                        parseFeed(is);\n                        itemsLoadedPartially = true;\n                        if (handler.docInfo.nextLink != null && handler.docInfo.nextLink.type.startsWith(\"application/atom+xml;profile=opds-catalog\")) {\n                            if (handler.entries.size() < MAX_OPDS_ITEMS) {\n                                url = new URL(handler.docInfo.nextLink.href);\n                                loadNext = !visited.contains(url.toString());\n                                L.d(\"continue with next part: \" + url);\n                            } else {\n                                L.d(\"max item count reached: \" + handler.entries.size());\n                                loadNext = false;\n                            }\n                        } else {\n                            loadNext = false;\n                        }\n                    } else {\n                        if (fileName == null) fileName = defaultFileName;\n                        L.d(\"Downloading book: \" + contentEncoding);\n                        downloadBook(contentType, url.toString(), is, contentLen, fileName, isZip);\n                        if (progressShown) coolReader.getEngine().hideProgress();\n                        loadNext = false;\n                        itemsLoadedPartially = false;\n                    }\n                } catch (Exception e) {\n                    L.e(\"Exception while trying to open URI \" + url.toString(), e);\n                    if (progressShown) coolReader.getEngine().hideProgress();\n                    onError(\"Error occured while reading OPDS catalog\");\n                    break;\n                } finally {\n                    if (connection != null) try {\n                        connection.disconnect();\n                    } catch (Exception e) {\n                    }\n                }\n            } while (loadNext);\n            if (progressShown) coolReader.getEngine().hideProgress();\n            if (itemsLoadedPartially) BackgroundThread.guiExecutor.execute(new Runnable() {\n\n                @Override\n                public void run() {\n                    L.d(\"Parsing is finished successfully. \" + handler.entries.size() + \" entries found\");\n                    callback.onFinish(handler.docInfo, handler.entries);\n                }\n            });\n        }\n", "label": 0, "substitutes": {"getStreamSource": [" getStreamIterator", "getRawStream", "getFormStream", "getStreamSources", "getFormSource", "getRawSource", "getRawIterator", "getStreamerStream", " getFormSource", "getStreamerIterator", "getStreamIterator", "getRawSources", " getStreamSources", "getStreamStream", " getFormStream", " getStreamStream", "getStreamerSources", "getFormIterator", " getFormIterator", "getStreamerSource", " getFormSources", "getFormSources"], "item": ["local", "val", "abc", "module", "that", "test", "msg", "device", "attribute", "owner", "content", "re", "good", "area", "m", "on", "job", "jack", "com", "app", "container", "input", "exp", "name", "document", "object", "source", "key", "addr", "list", "json", "atom", "this", "edit", "now", "entry", "related", "p", "up", "rule", "menu", "check", "instance", "status", "claim", "iter", "attr", "raw", "om", "spec", "att", "image", "el", "handle", "word", "cell", "stuff", "op", "term", "event", "detail", "record", "other", "result", "element", "tree", "value", "sim", "xml", "it", "ref", "type", "store", "remote", "row", "mix", "original", "mem", "link", "article", "initial", "Item", "anything", "items", "tk", "add", "pkg", "empty", "info", "unit", "hit", "oc"], "context": ["text", "mc", "search", "system", "subject", "sequence", "parent", "resource", "wrapper", "construct", "component", "event", "kernel", "current", "network", "content", "ctx", "index", "c", "view", "check", "connection", "instance", "condition", "cc", "location", "options", "config", "set", "information", "environment", "input", "document", "template", "Context", "object", "application", "chain", "metadata", "cache", "info", "tx", "state", "operator", "runtime", "collection", "command"], "streamSource": ["consoleStore", "consoleSource", "feedSite", " streamProvider", " streamSpec", "streamSOURCE", "constSourceFile", "signScope", "streamSourceFile", "consoleSourceFile", " streamScope", "feedSourceFile", "hostSourceFile", "feedSource", "streamManager", "hostType", "StreamProvider", " streamSite", "designSource", "followSpec", "signSource", "feedSOURCE", "hostStore", " streamSourceFile", " streamSOURCE", "runtimeSOURCE", "runtimeScope", "streamStore", "socketSourceFile", "feedStore", "designSpec", "streamSpec", " streamType", "consoleProvider", "StreamSource", "hostSource", "followSource", "acceptScan", "runtimeSource", "constScan", "streamProvider", "acceptSourceFile", "followSOURCE", " streamManager", "followStore", "streamScope", "streamSite", "acceptSource", "socketSite", "constSource", "streamType", "designSOURCE", "streamSources", "peerScan", "consoleType", "peerSource", " streamStore", "StreamManager", "consoleManager", "socketSource", "designStore", "consoleSources", "constSite", "peerSite", "acceptSite", "StreamSOURCE", "streamScan", "peerSourceFile", "feedSources", " streamSources", "signSOURCE", "StreamSources", "socketStore"], "obj": ["aux", "js", "cmp", "stuff", "jj", "txt", "abs", "Obj", "mo", "t", "nt", "ot", "ox", "msg", "j", "aos", "cod", "bo", "act", "ex", "obo", "obs", "bh", "pot", "o", "oj", "def", "ct", "attr", "app", "tmp", "ck", "sky", "xy", "mk", "org", "object", "x", "tk", "ht", "cb", "pkg", "ob", "json", "bj", "ref", "cmd", "resp", "y", "oc", "co", "os"], "inputFile": ["inputFiles", "importObject", "inputFILE", "sequenceSet", " InputSet", "mediafile", "inputObject", " InputFile", " inputfile", "InputFILE", "InputFiles", "InputPath", " inputObject", " inputFiles", "InputFile", "textFILE", "textfile", "inputSet", " InputObject", " Inputfile", "textFile", "inputfile", " inputPath", "Inputfile", "sequencefile", "importPath", "sequenceFile", "inputPath", "importFile", " inputSet", "importFiles", "sequenceObject", "mediaFile", "textObject", "InputObject", "mediaObject", "mediaFILE"], "is": ["js", "iss", "isl", "abs", "ics", "isa", "was", "ists", "sis", "xs", "ls", "mis", "ais", "iris", "i", "stats", "ios", "has", "res", "cs", "obs", "ims", "bis", "ils", "dis", "as", "fs", "es", "set", "IS", "ms", "atis", "s", "bs", "lis", "init", "its", "isin", "ris", "ains", "sys", "im", "cont", "isf", "tis", "ins", "Is", "nis", "sim", "info", "isi", "isc", "ires", "os", "iso", "ys"], "url": ["sl", "gl", "path", "lr", "address", "string", "log", "Url", "dir", "term", "str", "nl", "id", "mail", "print", "char", "browser", "ls", "run", "norm", "external", "r", "href", "dl", "email", "len", "ll", "pattern", "label", "host", "https", "ssl", "html", "console", "link", "f", "uri", "rel", "URL", "tm", "web", "prefix", "format", "loc", "attr", "ur", "q", "user", "db", "impl", "cert", "ml", "util", "hl", "http", "rl", "addr", "mount", "el", "pkg", "l", "handle", "xml", "domain", "ref", "full", "sql", "org", "ul"], "np": ["rpm", "nv", "pd", "tp", "lp", "nl", "vp", "nb", "NP", "dp", "nn", "num", "nr", "dn", "nm", "n", "wp", "ph", "nit", "fp", "nw", "nc", "mn", "hp", "mp", "bp", "dh", "pkg", "kr", "gov", "nu", "pn", "jp", "rn"], "serializer": ["initialer", "serialifier", "virtualizer", "serialiser", " serialization", "serialization", "erializer", "initialifier", "virtualization", "erialization", " serialisation", " serialer", "virtualifier", "initialiser", "erialiser", "erialer", "initialization", "initializer", "initialisation", " serialifier", "serialer", " serialiser", "serialisation", "virtualisation"], "node": ["seed", "Node", "resource", "src", "nb", "component", "remote", "event", "nn", "nt", "num", "row", "msg", "nm", "content", "view", "n", "m", "mor", "article", "entity", "root", "doc", "tree", "document", "name", "oid", "object", "od", "source", "value", "image", "token", "xml", "json", "nu", "entry"], "binary": ["Ex", "Entry", "_", "ex", "null", "n", "instance", "Source", "Raw", "get", "Store", "of", "xml", "New"]}}
{"id1": "1798720", "id2": "22320592", "code1": "    public static void save(String packageName, ArrayList<byte[]> fileContents, ArrayList<String> fileNames) throws Exception {\n        String dirBase = Util.JAVA_DIR + File.separator + packageName;\n        File packageDir = new File(dirBase);\n        if (!packageDir.exists()) {\n            boolean created = packageDir.mkdir();\n            if (!created) {\n                File currentPath = new File(\".\");\n                throw new Exception(\"Directory \" + packageName + \" could not be created. Current directory: \" + currentPath.getAbsolutePath());\n            }\n        }\n        for (int i = 0; i < fileContents.size(); i++) {\n            File file = new File(Util.JAVA_DIR + File.separator + fileNames.get(i));\n            FileOutputStream fos = new FileOutputStream(file);\n            fos.write(fileContents.get(i));\n            fos.flush();\n            fos.close();\n        }\n        for (int i = 0; i < fileNames.size(); i++) {\n            File fileSrc = new File(Util.JAVA_DIR + File.separator + fileNames.get(i));\n            File fileDst = new File(dirBase + File.separator + fileNames.get(i));\n            BufferedReader reader = new BufferedReader(new FileReader(fileSrc));\n            BufferedWriter writer = new BufferedWriter(new FileWriter(fileDst));\n            writer.append(\"package \" + packageName + \";\\n\");\n            String line = \"\";\n            while ((line = reader.readLine()) != null) writer.append(line + \"\\n\");\n            writer.flush();\n            writer.close();\n            reader.close();\n        }\n    }\n", "code2": "    private static void loadDefaultPreferences() {\n        try {\n            URL url = ClassLoader.getSystemResource(\"OpenDarkRoom.defaults.properties\");\n            preferences.load(url.openStream());\n        } catch (FileNotFoundException e) {\n            log.error(\"Default preferences file not found\");\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n", "label": 0, "substitutes": {"save": ["Save", "send", " seal", "delete", "saving", "store", "aw", "update", "export", "filename", "pack", "zip", "release", "accept", "dump", "init", "download", "upload", "register", "data", "folder", " Save", "version", "pkg", "archive", "install"], "packageName": ["pkgname", "pkgType", "pkgId", " packageCode", "pkgKey", " packagename", "pkgNames", " packageId", "PackageType", "PackageId", "packageType", "packageKey", " packageKey", "modulename", "pkgCode", "packageId", "packageCode", "moduleName", "pkgName", "PackageNames", "packagename", "moduleCode", "PackageName", "packageNames", "moduleId", " packageNames", "moduleKey", " packageType", "moduleNames"], "fileContents": ["byteContent", "byteValues", "byteNames", "FileBytes", "pageNames", "FileItems", "fileBytes", "byteContents", "pageBytes", "fileItems", " fileItems", "fileContent", " fileValues", "fileIngredients", " fileBytes", "pageItems", " fileContent", "FileContents", "packageContents", " fileIngredients", "fileValues", "pageContents", "packageIngredients", "FileContent", "FileNames", "FileValues", "FileIngredients", "packageNames", "packageContent"], "fileNames": ["resourceTypes", " fileLeaks", "dirKeys", "FileKeys", "issueNames", "resourceNumbers", "issueName", "resourceValues", "dirTypes", "fileVaults", "fieldContents", "dirLeaks", "issueVaults", "fieldNumbers", "dirNames", "messageKeys", "fileLeaks", "FileLeaks", " fileValues", "fileNumbers", "fileKeys", "resourceContents", "moduleContents", "messageNames", " fileKeys", "fileTypes", "fieldTypes", "moduleVaults", "FileTypes", "FileContents", "FileName", "messageName", " fileName", "moduleName", "fileValues", "fileName", "resourceNames", "issueContents", " fileTypes", "FileNames", "fieldNames", "FileValues", " fileVaults", " fileNumbers", "messageValues", "moduleNames"], "dirBase": ["folderBase", " directoryBase", "folderBas", "folderBasic", "dirSet", "DirBuilder", "directoryBasic", "dirBasic", "folderbase", "directoryBas", " directoryBottom", "pkgBas", "pathBas", " directoryBas", "DIRBas", "DirBase", "irBase", "irSet", "DIRBuilder", "pathbase", "dirBas", "DirBottom", "directorybase", "DIRBase", "pkgSet", "dirBuilder", " directoryBuilder", "DirBas", "pathBasic", "irbase", "dirbase", "pkgbase", "DIRBottom", "directorySet", "pkgBase", "irBas", "directoryBase", "dirBottom", "pathBase"], "packageDir": [" packagePath", "podDef", " packageRel", "installDist", "packageDef", " packageFolder", " packageDef", "podDist", "packageDist", "modulePath", "installDir", "pkgPath", "moduleFolder", "packageD", "installDef", "moduleRel", " packageDist", "moduleDir", " packageD", "moduleDef", "podD", "packagePath", "pkgDef", "podDir", "installD", "pkgDir", "pkgFolder", "packageRel", "pkgRel", "packageFolder"], "created": ["started", "added", " started", "filled", "printed", "given", "generated", "Created", "loaded", "reported", "recorded", "developed", "creation", "founded", " generated", "TED", "provided", "present", "confirmed", "released", "registered", "arted", "creat", "allowed", "create", "forced", "associated", "locked", "successful", "mounted", "made", "called", "produced", "raised", "ready", "installed", "joined", "defined", "existent", "checked", "ced", "creator", "activated"], "currentPath": ["recentPath", "currentCh", " currentName", "currentPoint", "currentParent", "CurrentParent", " currentPoint", "CurrentPath", "CurrentPoint", " currentParent", "CurrentFile", "currentlyCh", "currentlyName", "currentlyFile", "recentPoint", " currentCh", "recentParent", "recentName", "currentlyPath", "currentName", " currentFile", "CurrentCh", "currentFile", "CurrentName"], "i": ["I", "iq", "jj", "ini", "cgi", "iy", "ci", "m", "f", "slice", "exp", "qi", "key", "ix", "ui", "this", "iii", "y", "v", "ic", "zi", "p", "gi", "in", "phi", "oi", "ri", "mi", "ex", "iu", "status", "cli", "o", "major", "me", "chain", "ip", "ti", "batch", "them", "li", "id", "my", "ity", "si", "pi", "yi", "multi", "init", "ind", "ei", "ij", "im", "ai", "sim", "it", "bi", "hi", "ami", "ji", "di", "ki", "ii", "j", "go", "index", "mu", "ski", "uri", "q", "xi", "ie", "u", "g", "info", "os"], "file": ["local", "path", "et", "dir", "p", "log", "h", "parent", "io", "resource", "FILE", "disk", "ile", "child", "row", "File", "rule", "port", "link", "f", "sf", "base", "set", "play", "buffer", "table", "page", "format", "db", "name", "template", "comment", "source", "le", "fo", "header", "l", "handle", "info", "pool", "type", "body", "handler"], "fos": ["sfos", "Fos", "sfaos", "oos", "woss", "floses", "ffos", "flo", "faos", " fow", "ffaos", " fOS", " fo", "woes", " foes", "ffo", "fbos", "fow", "fbow", "foss", "fbaos", "woses", "foes", "flos", "Faos", " faos", "Foes", "fbo", "floss", "ffoes", "oow", " foses", "floes", "Fo", "sfOS", "fo", "oaos", "sfoss", "foses", "fOS", "FOS", "flaos", "oo", "wos", " foss", "Foss"], "fileSrc": ["jobSri", "fileSRC", "fileNrc", "fileNrl", "jobNci", "fileInource", " fileInsource", "fileNci", "fileErc", " fileSRC", "fileInsRC", "jobSci", "fileDri", "fileDrc", "jobNri", " fileInsrc", "fileInssrc", " fileSource", "fileInRC", "jobNrl", "fileSource", " fileInsRC", "fileEci", "fileSri", "fileDsrc", "jobNrc", "fileInrc", "fileDource", "jobSrc", " fileInssrc", "fileSsrc", "fileDci", "fileDRC", "fileSrl", "fileSci", "fileErl", "fileInsource", "fileInsrc", "fileEri", "jobSrl", "fileNri", " fileSsrc", "fileDrl"], "fileDst": ["fileNot", "FileSpl", "fileSld", "fileWpl", "FileDst", "fileSlt", "FileSot", "fileDld", "fileDnd", "FileDld", "fileSot", "filedld", "fileDot", "FileDnd", "FileSld", "fileNnd", "fileNpl", "FileSlt", "fileNst", "fileDlt", "FileSnd", "fileSpl", "filedst", "fileSnd", "fileWot", "fileWlt", "fileNlt", "fileSst", "fileNld", "FileDcr", "fileDcr", "FileDlt", "filedcr", "FileSst", "FileScr", "filednd", "fileNcr", "FileDpl", "fileScr", "fileWst", "fileDpl", "FileDot"], "reader": ["dr", "ocker", "Larry", "handler", "resource", "roller", "oder", "rx", "loader", "ader", "ner", "context", "row", "Reader", "review", "ri", "r", "entry", "query", "ro", "inner", "upper", "ler", "rot", "runner", "book", "iterator", "iter", "buffer", "read", "parser", "rr", "readable", "reading", "rer", "rl", "actor", "driver", "rc", "controller", "er", "stream", "rar", "author"], "writer": ["later", "player", "function", "riter", "variable", "print", "wrapper", "test", "store", "browser", "loader", "wright", "adder", "creator", "service", "Reader", "flush", "manager", "storage", "maker", "walker", "editor", "query", "write", "worker", "console", "outer", "runner", "builder", "server", "iterator", "iter", "writers", "buffer", "table", "format", "draw", "user", "read", "parser", "document", "client", "caster", "liner", "ter", "println", "Writer", "report", "driver", "writing", "window", "order", "wire", "operator", "stream", "handler", "entry", "w", "word"], "line": ["text", "ln", "kin", "sample", "cell", "number", "string", "sequence", "nl", "inline", "point", "print", "ole", "row", "stroke", "detail", "record", "style", "rule", "edge", "range", "block", "node", "port", "label", "code", "link", "valid", "pe", "page", "message", "lin", "entity", "date", "column", "user", "frame", "liner", "comment", "ine", "source", "le", "eline", "lined", "chain", "header", "Line", "l", "LINE", "continue", "entry", "word"]}}
{"id1": "18114701", "id2": "8385785", "code1": "    public InputSource resolveEntity(String publicId, String systemId) {\n        String resolved = getResolvedEntity(publicId, systemId);\n        if (resolved != null) {\n            try {\n                InputSource iSource = new InputSource(resolved);\n                iSource.setPublicId(publicId);\n                URL url = new URL(resolved);\n                InputStream iStream = url.openStream();\n                iSource.setByteStream(iStream);\n                return iSource;\n            } catch (Exception e) {\n                catalogManager.debug.message(1, \"Failed to create InputSource (\" + e.toString() + \")\", resolved);\n                return null;\n            }\n        }\n        return null;\n    }\n", "code2": "    public static String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n        MessageDigest md;\n        md = MessageDigest.getInstance(\"MD5\");\n        byte[] md5hash = new byte[32];\n        md.update(text.getBytes(\"iso-8859-1\"), 0, text.length());\n        md5hash = md.digest();\n        return convertToHex(md5hash);\n    }\n", "label": 0, "substitutes": {"resolveEntity": ["resolveEnt", "consolvingInternal", "resolveObject", "consolveInternal", "resloveEnt", "resolvedEnt", "resolveInternal", "consolveObject", "resolvedEntity", "resloveInternal", "resolvingEnt", "consolveEntity", "consolvingObject", "resolvingObject", "resolvingEntity", "resloveObject", "consolveEnt", "consolvingEnt", "resolvingInternal", "resloveEntity", "resolvedInternal", "resolvedObject", "consolvingEntity"], "publicId": ["ublicId", "publicID", "privateAnd", "primaryPart", "openID", "openPart", "fullId", "publicLink", "privateID", "publicPart", "primaryId", "publicTime", "fullID", "ublicID", " publicLink", "fullLink", "privateId", "ublicTime", " publicTime", "primaryTime", " publicAnd", "privateLink", "privatePart", "openAnd", "fullInt", "openId", "primaryID", "publicInt", "ublicPart", "publicAnd", " publicInt", " publicID", "privateInt", " publicPart"], "systemId": ["externalID", "externalId", "externalName", "userId", " systemName", "sysName", "userID", "userName", " systemUrl", " systemID", "userUrl", "systemUrl", "externalUrl", "systemID", "systemName", "sysUrl", "sysId", "sysID"], "resolved": ["remolution", "solved", "Resolver", "solving", "consolving", "involved", "resolver", "consolved", "resultsolving", "reserved", "Resolving", " resolution", "revolver", "consolves", "resolution", "Resolved", "solve", "resolve", "rolved", "Resolve", "Resolution", "preserved", "rolving", "solves", "presolve", "presolving", "rolve", " reserved", " resolver", "resolving", "revolving", "involve", "involving", "presolved", "presolver", "resultsolved", "served", " resolving", "resolves", "resultsolver", " resolve", "consolution", "rolution", "presolution", "remolved", "revolution", "resultsolution", "remolves", "revolved", "solution", "remolving", "involution"], "iSource": ["qiSOURCE", "iiResource", "uiSources", "iSOURCE", "iSite", "IResource", " iSOURCE", "uiSource", "aiSource", " iService", "iuSourceFile", "iSources", " iSourceFile", "iuSources", "ISource", "uiSourceFile", "iniResource", "liSourceFile", "aiStream", "iniMember", "aiService", "liService", "iSourceFile", "iiSource", "ISite", "iuSOURCE", "qiSourceFile", " iSite", "iResource", " iSources", "qiSources", "IMember", "iniSite", "uiSite", "liSources", "iiMember", "iuSource", "iService", "iMember", "liSource", "liStream", "aiSourceFile", "iiSite", "liSite", "iniSource", "qiSource"], "url": ["arl", "build", "sl", "gl", "address", "path", "log", "Url", "str", "nl", "resource", "mail", "char", "browser", "ls", "re", "r", "mol", "dl", "null", "ll", "ssl", "link", "location", "html", "f", "uri", "rel", "URL", "web", "ur", "user", "name", "u", "bel", "hl", "http", "rl", "mount", "l", "mb", "ref", "ul"], "iStream": ["inputStream", "sourceSteam", "uStream", "iStreamer", "inputRead", "iRead", "sourceStreamer", "sourceStream", " iStack", "riSteam", "inputStack", "uStreamer", "ipStreamer", "sourcestream", "iStack", "ipSteam", "istream", " iSteam", "ipstream", "inputSteam", "ipStream", "riStream", "ustream", "iSteam", " iRead", "uSteam", "riRead", "riStack"]}}
{"id1": "7276377", "id2": "21013026", "code1": "    public static String checksum(URL url, String algorithm) {\n        MessageDigest messageDigest;\n        try {\n            messageDigest = MessageDigest.getInstance(algorithm);\n        } catch (Exception ex) {\n            throw new RuntimeException(\"Could not create an instance of MessageDigest\", ex);\n        }\n        byte[] bytes = new byte[4 * 1024];\n        try {\n            InputStream in = null;\n            try {\n                in = url.openStream();\n                int nBytesRead = 0;\n                while ((nBytesRead = in.read(bytes)) > 0) {\n                    messageDigest.update(bytes, 0, nBytesRead);\n                }\n            } finally {\n                if (in != null) {\n                    in.close();\n                }\n            }\n        } catch (Exception e) {\n            throw new RuntimeException(\"Could not read message digest for: \" + url.toExternalForm() + \" using algorithm: \" + algorithm);\n        }\n        byte[] checksumValue = messageDigest.digest();\n        return digestAsString(checksumValue);\n    }\n", "code2": "    private InputStream getPageStream(String query) throws MalformedURLException, IOException {\n        URL url = new URL(baseUrl + query + \"&rhtml=no\");\n        URLConnection connection = url.openConnection();\n        connection.connect();\n        InputStream in = connection.getInputStream();\n        BufferedInputStream bis = new BufferedInputStream(in);\n        return bis;\n    }\n", "label": 0, "substitutes": {"checksum": ["csam", "checksume", "cksum", "checksest", "cksest", "cksume", "csume", "csest", " checksume", "checksam", "cksam", " checksam", " checksest", "csum"], "url": ["build", "path", "address", "gl", "log", "file", "Url", "string", "str", "nl", "mail", "char", "browser", "ls", "email", "dl", "dll", "ll", "pattern", "host", "https", "ssl", "html", "location", "link", "uri", "base", "config", "URL", "rel", "web", "loc", "get", "ur", "q", "document", "name", "u", "bel", "http", "image", "key", "mount", "el", "rect", "l", "request", "xml", "domain", "ul"], "algorithm": ["aliment", "operabet", "malgorithm", "alabet", "opergorithm", "approgorith", "Algo", "Alabet", "Algorithm", "Alignment", "approgo", "palter", "malgo", " algo", "altergo", "malignment", "algo", "Algorith", "maliment", "Aliment", " algorith", "alignment", "alterignment", "alteriment", "operter", "altergorithm", "palabet", "palgorithm", "palgo", "approgorithm", "Alter", "Alculus", "approculus", "algorith", " alculus", "opergo", "alculus", "alter"], "messageDigest": ["messageDigidate", "messagedigests", "applicationDesignests", "messageCheckse", "messageDigist", "messageDesignests", "messageMerist", "messageDebuger", "messageMerest", "applicationDigest", "Messagedigse", "messageDse", "Messagedigest", "messageDebugse", "messageHaser", "messageHasest", "messageDigse", "messageDebugest", " messageDiger", "MessageDigest", "messageDum", "applicationDigester", "messageDesignester", "messageHasests", "messageDigests", "applicationDiger", "MessageDigse", "MessageDigum", "messageHasester", "messageCheckum", "messagedigum", "messageDigester", "applicationDesignester", "messageDer", "applicationDesigner", "messageDesignest", "Messagedigum", "messagedigest", "messagedigidate", " messageDigist", "messagediger", "MessageDiger", "applicationDigests", "messagedigist", "messageDigum", "applicationDesignest", "messageCheckest", "Messagediger", "messageDiger", "messageMerse", "messagedigester", "messageDesigner", "messageDest", " messageDigidate", "messageChecker", " messageDigse", "messagedigse", "messageDebugidate"], "bytes": ["resources", "pieces", "bos", "vs", "notes", "terms", "groups", "eps", "strings", "blocks", "bits", "users", "tes", "Bytes", "jobs", "gs", "names", "steps", "images", "pages", "units", "ces", "es", "bps", "pointers", "frames", "parts", "bs", "out", "files", "its", "ones", "versions", "vals", "bes", "services", "lines", "items", "seconds", "rows", "ies", "checks", "words", "ions", "types", "outs", "classes", "gb", "gets", "values"], "in": ["mc", "serv", "again", "h", "en", "p", "by", "io", "asin", "is", "inf", "t", "up", "al", "cin", "from", "conf", "mi", "reader", "re", "null", "n", "inc", "i", "IN", "inner", "check", "pi", "m", "on", "o", "form", "ma", "out", "din", "oin", "init", "impl", "input", "isin", "ind", "client", "name", "gin", "In", "source", "or", "socket", "ai", "one", "ins", "rin", "l", "it", "handle", "nin", "info", "bin", "can", "proc", "ain", "co", "con", "inn"], "nBytesRead": ["nItemsRead", "NBytesWritten", "NRsRead", "nBytesWritten", "nRsRead", "nBytesRun", "NBytesRun", "nTokensread", "nTokensRead", "NBytesRead", " nRsread", "nRsFound", "nbytesSupported", "nFilesRun", "nbytesRead", "nBytesSupported", " nItemsFound", "nItemsFound", "nRsReader", "nBytesFound", "nbytesread", " nRsSupported", "nRsRun", "nFramesSupported", "nFramesRead", "nbytesWritten", " nItemsReader", "nTokensRun", "nTokensWritten", "NBytesread", "NRsRun", "nBytesReader", "nItemsReader", "NRsread", "nRsread", "nBytesread", "nFilesRead", "nFramesread", "nFilesread", "nFramesWritten", " nBytesSupported", " nBytesread", " nBytesFound", " nItemsRead", "NRsWritten", "nFilesWritten", "nRsSupported", " nRsWritten", " nRsRead", "nItemsWritten", "nRsWritten", "nFramesReader", "nFramesFound", " nBytesWritten", " nBytesReader", " nItemsWritten"], "checksumValue": ["checksUMValue", "checksumVal", "checksummDocument", "checksumvalue", "checksumData", "checksUMValues", " checksumVal", "checksummValue", " checksamVal", "checksumedData", " checksamDocument", "checksamDocument", " checksummModel", "checksumValues", " checksumValues", "checksumerModel", "checksumedValue", "checksumerValues", "checksummValues", " checksumvalue", "checksamData", " checksumDocument", "checksamValue", "checksumedDocument", " checksummvalue", " checksummValues", " checksamData", "checksumervalue", " checksumModel", " checksumData", "checksummVal", "checksumModel", " checksamValue", "checksummvalue", "checksumerValue", " checksummValue", "checksumDocument", "checksamVal", "checksUMvalue", "checksummModel", "checksUMModel", "checksummData", "checksumedVal"]}}
{"id1": "7103223", "id2": "23677128", "code1": "    public void testPost() throws Exception {\n        HttpPost request = new HttpPost(baseUri + \"/echo\");\n        request.setEntity(new StringEntity(\"test\"));\n        HttpResponse response = client.execute(request);\n        assertEquals(200, response.getStatusLine().getStatusCode());\n        assertEquals(\"test\", TestUtil.getResponseAsString(response));\n    }\n", "code2": "\tpublic FTPClient sample3a(String ftpserver, int ftpport, String proxyserver, int proxyport, String username, String password) throws SocketException, IOException {\n\t\tFTPHTTPClient ftpClient = new FTPHTTPClient(proxyserver, proxyport);\n\t\tftpClient.connect(ftpserver, ftpport);\n\t\tftpClient.login(username, password);\n\t\treturn ftpClient;\n\t}\n", "label": 0, "substitutes": {"testPost": ["testPosts", " testRequest", "echoRequest", "echoPost", "testRequest", "TestPosts", "TestPost", "TestRequest", " testPosts", "echoPosts"], "request": ["search", "trip", "batch", "first", "post", "resource", "print", "join", "question", "position", "service", "record", "begin", "complete", "copy", "url", "call", "query", "instance", "claim", "initial", "insert", "job", "message", "enter", "root", "get", "project", "req", "create", "upload", "reference", "document", "Request", "template", "object", "register", "http", "load", "application", "remove", "reset", "report", "key", "QUEST", "list", "quest", "execute", "ip", "command"], "response": ["sample", "description", "sequence", "respond", "that", "channel", "remote", "onse", "service", "still", "de", "Response", "output", "network", "view", "block", "relation", "connection", "res", "status", "server", "trace", "body", "result", "message", "user", "see", "tree", "document", "client", "exit", "respons", "object", "http", "line", "application", "answer", "data", "soc", "report", "one", "social", "version", "cache", "json", "pos", "ve", "next", "reply", "resp", "entry", "command"]}}
{"id1": "5436973", "id2": "10715601", "code1": "    public String httpToStringStupid(String url) throws IllegalStateException, IOException, HttpException, InterruptedException, URISyntaxException {\n        String pageDump = null;\n        getParams().setParameter(ClientPNames.COOKIE_POLICY, org.apache.http.client.params.CookiePolicy.BROWSER_COMPATIBILITY);\n        getParams().setParameter(HttpConnectionParams.SO_TIMEOUT, getPreferenceService().getSearchSocketTimeout());\n        HttpGet httpget = new HttpGet(url);\n        httpget.getParams().setParameter(HttpConnectionParams.SO_TIMEOUT, getPreferenceService().getSearchSocketTimeout());\n        HttpResponse response = execute(httpget);\n        HttpEntity entity = response.getEntity();\n        pageDump = IOUtils.toString(entity.getContent(), \"UTF-8\");\n        return pageDump;\n    }\n", "code2": "    public static synchronized String toSHA1(String str) {\n        Nulls.failIfNull(str, \"Cannot create an SHA1 encryption form a NULL string\");\n        try {\n            MessageDigest md;\n            md = MessageDigest.getInstance(SHA1);\n            byte[] sha1hash = new byte[40];\n            md.update(str.getBytes(ISO_CHARSET), 0, str.length());\n            sha1hash = md.digest();\n            return convertToHex(sha1hash);\n        } catch (NoSuchAlgorithmException ex) {\n            ex.printStackTrace();\n        } catch (UnsupportedEncodingException ex) {\n            ex.printStackTrace();\n        }\n        return null;\n    }\n", "label": 0, "substitutes": {"httpToStringStupid": ["httpToStringUupid", "httpToStringUuff", "httpToStringRestuid", "httpToStringStuff", "httpToStringUuid", "httpToStringStuid", "httpToStringRestamp", "httpToStrUuid", "httpToStringSnupid", "httpToStrUamp", "httpToStringSnuid", "httpToStringRestupid", "httpToStringUamp", "httpToStrStuid", "httpToStringRestuff", "httpToStrUuff", "httpToStrStupid", "httpToStringSnamp", "httpToStrStuff", "httpToStrStamp", "httpToStringSnuff", "httpToStrUupid", "httpToStringStamp"], "url": ["path", "address", "string", "file", "Url", "p", "ret", "str", "id", "b", "char", "ls", "dl", "i", "pl", "pattern", "ll", "host", "https", "ssl", "link", "location", "uri", "base", "server", "URL", "web", "page", "loc", "result", "out", "ur", "name", "u", "http", "key", "password", "l", "ref", "ul"], "IOException": [" IOError", "TimeoutException", "IOError", "ioException", "TimeoutError", "ioError"], "HttpException": ["RuntimeException", "HttpError", "HTTPException", "HTTPError", "RuntimeError", "httpException", "httpError"], "InterruptedException": ["InterruptionError", "InterinterruptedEx", "InterruptEx", "InterruptException", "InterinterruptedException", "InterruptError", "InterruptionEx", " InterruptedError", " InterruptException", "InterruptedError", " InterruptedEx", " InterruptError", "InterruptionException", "InterruptedEx", "InterinterruptedError", " InterruptEx"], "URISyntaxException": ["URISyntixException", "URISyntntaxException", "URISyntntaxEx", "URISyntaxEx", "URISyntixWarning", "URISeticntaxWarning", "URISyntaxWarning", "URISeticaxEx", "URISeticntaxException", "URISyntntaxWarning", "URISeticaxWarning", "URISyntlexEx", "URISyntlexException", "URISeticntaxEx", "URISyntixEx", "URISeticaxException", "URISyntlexWarning"], "pageDump": ["pageStash", "pageDamp", "pageDumps", "pageSumps", "pagePdump", "pageDodump", "pagedumper", " pageDumper", "PageDumper", "pageddump", "PageDumps", " pageDdump", "PageDump", "pageStamp", "pageStdump", " pageDumps", "pageSump", "pageDumper", "pageDoumper", "pagePamp", " pageDamp", "pagedump", "pagedumps", "pageSumper", "PageDdump", "pageStump", "pageDdump", "pageSdump", "pagePash", "pageDoumps", "pageDoump", " pageDash", "pageDash", "pagePump"], "httpget": ["httpGet", "hoverGET", "Httppost", "HTTPcreate", " httpGET", "hoverGet", "ttpget", "httpcreate", " httpGet", "ttpfind", "ttpcall", "HTTPGet", " httpcreate", "httpcall", "Httpcall", "ttpcreate", "httpfind", "httppost", "HTTPfind", "Httpget", "HTTPget", " httpfind", "hovercreate", "ttppost", "Httpfind", "HTTPGET", "httpGET", " httpcall", "ttpGet", " httppost", "hoverget"], "response": ["description", "sequence", "given", "respond", "that", "remote", "onse", "event", "service", "still", "open", "Response", "output", "attribute", "content", "block", "connection", "res", "profile", "status", "resp", "result", "page", "message", "document", "frame", "successful", "object", "application", "answer", "report", "yes", "request", "pos", "json", "next", "reply", "body", "entry", "command"], "entity": ["address", "icon", "ce", "resource", "e", "obj", "event", "ity", "detail", "output", "ee", "model", "inv", "content", "email", "Entity", "person", "security", "encrypted", "pe", "result", "page", "voice", "environment", "activity", "ie", "document", "object", "comment", "line", "me", "image", "el", "metadata", "ITY", "group", "json", "ent", "existent", "unit", "body", "entry"]}}
{"id1": "11865906", "id2": "5808579", "code1": "    @Test\n    public void testIdentification() {\n        try {\n            String username = \"muchu\";\n            String password = \"123\";\n            MessageDigest md5 = MessageDigest.getInstance(\"MD5\");\n            md5.update(password.getBytes());\n            LogService logServiceMock = EasyMock.createMock(LogService.class);\n            DbService dbServiceMock = EasyMock.createMock(DbService.class);\n            userServ.setDbServ(dbServiceMock);\n            userServ.setLogger(logServiceMock);\n            logServiceMock.info(DbUserServiceImpl.class, \">>>identification \" + username + \"<<<\");\n            IFeelerUser user = new FeelerUserImpl();\n            user.setUsername(username);\n            user.setPassword(new String(md5.digest()));\n            EasyMock.expect(dbServiceMock.queryFeelerUser(username)).andReturn(user);\n            EasyMock.replay(logServiceMock, dbServiceMock);\n            Assert.assertTrue(userServ.identification(username, password));\n            EasyMock.verify(logServiceMock, dbServiceMock);\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        }\n    }\n", "code2": "    public static final String encryptPassword(String loginName, String password) {\n        try {\n            MessageDigest md5 = MessageDigest.getInstance(\"MD5\");\n            md5.update(loginName.toUpperCase().getBytes(\"UTF-8\"));\n            md5.update(password.getBytes(\"UTF-8\"));\n            byte[] ba = md5.digest();\n            return byte2hex(ba);\n        } catch (Exception e) {\n            return password;\n        }\n    }\n", "label": 1, "substitutes": {"testIdentification": ["TestIdentify", "testidentification", "testIDENTify", "testIdentication", "TestIdentifier", "testidentifier", "testIDENTifier", "testIdify", "testIdentifier", "testidentication", "testIdentify", "Testidentifier", "testIdification", "testIdifier", "Testidentication", "Testidentify", "testIDENTification", "testIDENTication", "testidentify", "testIdication", "TestIdentication", "TestIdentification", "Testidentification"], "username": ["stab", "localhost", "seat", "subject", "blood", "human", "string", "\u4eba", "your", "term", "uid", "component", "latest", "position", "dn", "phone", "attribute", "filename", "knife", "owner", "email", "admin", "USER", "rue", "url", "ubuntu", "NAME", "albeit", "connection", "instance", "profile", "assuming", "twitter", "title", "person", "language", "ername", "wordpress", "initial", "about", "uri", "otype", "prefix", "unknown", "sudo", "project", "lead", "taker", "pty", "minimum", "name", "operator", "sword", "source", "approximately", "impact", "john", "key", "metadata", "hello", "uno", "login", "token", "character", "pai", "account", "displayText", "information", "author"], "password": ["secret", "picture", "address", "description", "PASS", "number", "definition", "string", "height", "hash", "remember", "device", "phrase", "shadow", "auth", "attribute", "email", "REDACTED", "word", "pattern", "profile", "crypt", "confirmed", "language", "padding", "message", "database", "pass", "power", "python", "sword", "comment", " Password", "application", "reset", "value", "hello", "login", "token", "words", "account", "Password", "entry", "command"], "md5": ["mdol", "MD2", " md512", " mdol", " Md3", "md4", " Md5", "sha3", " md3", "dig5", "MD5", "digol", "md7", "sha512", " md2", "sha7", " Md7", "MD3", "md2", "MD4", "md512", "MDol", "dig3", "dig2", "sha5", " md7", " md4", " Md512", "sha4", "md3"], "logServiceMock": ["logServicemocked", "logServiceMuck", "logServiceMocker", "logServiceMocked", "logStorePox", "logServiceDocker", "logServiceMMOCK", "logServicemocker", "logServiceVocked", "logServiceMuock", "logServicemex", "logServMTck", "logStoreMox", "logServicePocker", "logServiceMXocked", "logServiceMulock", "logServicemOCK", "logServiceMck", "logServiceJMocked", "logServiceDock", "logServiceMuocked", "logServicePock", "logServiceMlock", "logStoreMock", "logServiceMOCK", "logServiceManocker", "logServiceManocked", "logServiceVocker", "logServiceMMocker", "logServiceManock", "logServiceMTck", "logServiceMTlock", "logServiceMTock", "logServMlock", "logServiceVex", "logServiceMMock", "logServMTlock", "logServiceVock", "logServMTocked", "logServiceMMox", "logStorePocker", "logServicemocks", "logServiceJMock", "logServicemlock", "logServiceMXocker", "logServiceMocks", "logServiceVocks", "logServiceMex", "logServiceManocks", "logServMTock", "logStorePOCK", "logStoreMOCK", "logServiceDocked", "logServicemck", "logServicePox", "logServicemock", "logServicePOCK", "logServiceJMocker", "logServiceMXock", "logServMock", "logServiceDex", "logServMck", "logServiceMTocked", "logServiceMox", "logServMocked", "logStoreMocker", "logServicemox", "logStorePock"], "dbServiceMock": ["dbServicemox", "dbServiceMonocked", "dbServicemock", "dbServiceMick", "dbServiceMox", "dbServiceVocked", "dbServiceMocker", "dbServiceMXocked", "dbServicemick", "dbFactoryMXocked", "dbServiceTox", "dbServiceMonox", "dbFactoryMXocks", "dbFactoryMXock", "dbServiceMXock", "dbFactoryMocked", "dbServiceJMike", "dbServiceMike", "dbFactoryMock", "dbServiceMoness", "dbServiceSocked", "dbServiceVox", "dbServiceTocked", "dbFactoryMocks", "dbServiceSocker", "dbServicemocked", "dbServicemike", "dbServiceHMess", "dbStoreMox", "dbStoreMocked", "dbServicesMock", "dbServiceMXocks", "dbStoreMock", "dbServiceSike", "dbServicemck", "dbFactoryMXck", "dbServicemocks", "dbServiceMonick", "dbServiceVock", "dbServiceMXck", "dbServiceJMocked", "dbServiceMocks", "dbServicesmaj", "dbServiceTock", "dbServiceSock", "dbServiceVrap", "dbStoremock", "dbStoreMrap", "dbStoremocked", "dbServicesmike", "dbServicesMike", "dbServicemocker", "dbServiceVocks", "dbServiceHMock", "dbServicesMaj", "dbServiceMaj", "dbServicemess", "dbFactoryMck", "dbServiceHMocked", "dbServiceMonocker", "dbServiceSick", "dbServiceMonock", "dbServicemrap", "dbServiceMocked", "dbServicesMocked", "dbServiceHMox", "dbServicemaj", "dbServiceJMock", "dbServiceTrap", "dbServicesmock", "dbServiceSaj", "dbServicesmocked", "dbServiceMess", "dbStoremrap", "dbServiceMck", "dbServiceMrap", "dbStoremox", "dbServiceVck", "dbServiceJMaj"], "user": ["system", "contact", "human", "prof", "by", "used", "char", "component", "per", "uid", "record", "temp", "auth", "output", "other", "rule", "responsible", "owner", "USER", "menu", "null", "entry", "to", "write", "instance", "profile", "person", "role", "plugin", "form", "result", "message", "entity", "core", "usr", "student", "read", "client", "name", "u", "object", "comment", "User", "report", "actor", "use", "key", "list", "response", "json", "account", "body", "reply", "usage", "usa", "author", "creator", "word"]}}
{"id1": "6260216", "id2": "8385785", "code1": "    public InputStream send(String s, String s1) throws IOException {\n        HttpURLConnection httpurlconnection = null;\n        DataInputStream datainputstream = null;\n        System.setProperty(\"java.protocol.handler.pkgs\", \"com.sun.net.ssl.internal.www.protocol\");\n        URL url = new URL(s1);\n        httpurlconnection = (HttpURLConnection) url.openConnection();\n        configureURLConnection(httpurlconnection);\n        DataOutputStream dataoutputstream = new DataOutputStream(httpurlconnection.getOutputStream());\n        dataoutputstream.write(s.getBytes());\n        httpurlconnection.connect();\n        datainputstream = new DataInputStream(httpurlconnection.getInputStream());\n        if (httpurlconnection.getResponseCode() != 200) {\n            System.out.println(\"Invalid Response Code! Code Returned = \" + Integer.toString(httpurlconnection.getResponseCode()));\n            return null;\n        }\n        if (!httpurlconnection.getContentType().equalsIgnoreCase(\"Text/xml\")) {\n            System.out.println(\"Invalid Content-Type! Content type of response received = \" + httpurlconnection.getContentType());\n            return null;\n        } else {\n            return datainputstream;\n        }\n    }\n", "code2": "    public static String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n        MessageDigest md;\n        md = MessageDigest.getInstance(\"MD5\");\n        byte[] md5hash = new byte[32];\n        md.update(text.getBytes(\"iso-8859-1\"), 0, text.length());\n        md5hash = md.digest();\n        return convertToHex(md5hash);\n    }\n", "label": 0, "substitutes": {"send": ["text", "submit", "put", "post", "append", "printf", "service", "export", "output", "call", "query", "write", "message", "get", "sent", "push", "read", "download", "transfer", "upload", "save", "report", "add", "execute", "request", "handle", "Send", "body"], "s": ["js", "v", "bytes", "string", "h", "p", "str", "b", "is", "t", "ws", "xs", "ls", "S", "strings", "gs", "rs", "r", "c", "ts", "n", "i", "a", "m", "fs", "f", "ps", "ms", "bs", "its", "data", "sts", "l", "g", "es", "ss", "os", "w"], "s1": ["S2", "rs1", "S01", " s0", " s01", "S0", "s2", "qs0", "S1", "rs0", "s0", "s01", " s2", "qs2", "rs2", "qs1"], "httpurlconnection": [" httpurlcommunication", "httpcertposition", "httpcertconnection", "apacheurlconnection", "upperurlposition", "hllopen", "httpurlcontext", "httpUrlconnected", "httpwebconnection", "upperpullgeneration", "httpuserconn", "httpUrlconnection", "apachebuildconnect", "httpdateconn", "httpsslconnected", "upperurlconnection", "httpurlcommunication", "httprelconnection", "httpuserposition", "httpbuildconn", " httpsslconnection", "httpllopen", "httpgetconn", "upperdateposition", "httpbuildconnect", "httppullapplication", "httpmailconnected", "httpUrlclient", "httploggeneration", "httpllconnection", "highconsoleconn", "httplogrelation", "httphttpposition", "apacheurlconnected", "httpurlconnect", "httpruleattribute", "ttpUrlconnect", "httpurlclient", "httpruleconnection", "httpcalconnection", "httpUrlgeneration", "httplogconnection", "httpUrlposition", "httmailconnection", "htturlcommand", "httprelconn", " httpurlconn", "httpurlattribute", "httprelcontext", "httphttpconn", " httpuserconnect", "httpgetconnection", "highconsoleposition", "apachebuildconn", "httpurlrelation", "httpurlgeneration", "httpwebconnect", "ttpUrlposition", "apachebuildconnected", "httpwebcontext", "httpsslconnect", "hurlConnection", "ttpUrlconnection", "hllConnection", "httpsslconn", "httpusercommand", "httmailconn", "httpcertconn", "httplogconn", "httpwebclient", "httpUrlcontext", "upperurlconn", "httphttpconnect", "httpllconnect", "httpgetcommand", "httphttpcontext", "ttpurlconnection", "hllconnection", "httpusercommunication", "upperurlcontext", "httplogapplication", "httpsslcontext", "ttpUrlconnected", "httpbuildconnected", " httpsslcommunication", "highurlconn", " httpurlclient", "httpruleposition", "apacheurlconn", "httpcalconn", "upperurlgeneration", "upperdateconnection", "apachebuildconnection", "hllconnect", "httphttpopen", "httpconsoleconn", "upperpullconnection", "apacheurlconnect", "htturlposition", "httpurlapplication", "htturlconn", " httpwebclient", " httpurlrelation", "hurlconnection", "highurlconnection", "httpuserconnect", "httppullconnect", "httpuserrelation", "httpsslcommunication", " httpuserrelation", "httpurlConnection", "upperdateconn", "httpruleconn", "httpbuildconnection", "httpsslconnection", "upperurlconnect", "hurlopen", "httpmailcommand", " httpusercommunication", "httplogcommunication", "httpurlposition", "httmailposition", "httpcertcontext", "httpurlopen", " httpwebcontext", "upperdatecontext", "httpurlconnected", "httpdbconnect", "httmailcommand", "ttpurlconnected", " httpurlconnect", "httphttpConnection", " httpwebconnect", "hurlconnect", " httpuserconnection", "httpurlconn", "httppullgeneration", "httphttpconnection", "highconsoleattribute", "upperpullapplication", "httplogconnect", " httpsslconn", "httpconsoleposition", "httpuserconnection", "httpUrlapplication", "httpcertattribute", "httpcalcontext", "httpmailposition", "httpmailconn", "httpUrlrelation", "httpdatecontext", "ttpurlconnect", "httpmailconnect", "httpdbopen", "highurlattribute", "httpUrlconnect", " httpsslcontext", "httplogconnected", "highconsoleconnection", "ttpurlposition", "httpdateposition", "httpllConnection", "httpmailconnection", "httpdbconnection", "httpcalclient", " httpwebconnection", "htturlconnection", "httpcalcommunication", "httpdbConnection", "httpconsoleconnection", "httpconsoleattribute", "httpurlcommand", "httppullconnection", "upperpullconnect", "httpUrlcommunication", " httpurlcontext", "httprelcommunication", "highurlposition", "upperurlapplication", "httpcalconnect", "httpgetposition", "httpdateconnection"], "datainputstream": ["datainputcontrol", "datainsoutputstream", "datainerPUTbody", "datainerputlength", "datrainoutputstore", "datainutstore", "datainsputstream", "datainoutputpipe", "datainoutputcontrol", "datainPUTstream", "datainPUTStream", "datainutStream", "datainputbody", "dataincutbody", "datainutcontrol", "datainutstream", "datainPUTlength", "datainoutputstore", "datainportStream", "datainportstore", "datainerputstream", "datainoutputstream", "datainputStream", "datainsoutputStream", "datainoutputbody", "datainPUTbody", "datainoutputStream", "datainsputStream", "datainointpipe", "dataincutstream", "datainsoutputpipe", "datainputstore", "datrainoutputStream", "datainointStream", "dataincutlength", "datainointstream", "datrainputstore", "datrainoutputstream", "datainerPUTStream", "datainutpipe", "dataincutStream", "datainportstream", "datainerPUTlength", "datainputpipe", "datrainputstream", "datrainoutputcontrol", "datainsputpipe", "datainerputbody", "datrainputcontrol", "datainerPUTstream", "datrainputStream", "datainoutputlength", "datainputlength", "datainportcontrol", "datainerputStream"], "url": ["build", "sl", "gl", "address", "Url", "abs", "str", "nl", "b", "char", "t", "loader", "ls", "r", "dl", "ll", "pl", "https", "ssl", "link", "f", "rel", "base", "URL", "web", "ur", "ml", "name", "u", "bel", "util", "http", "www", "rl", "mount", "el", "l", "il", "ref", "ul"], "dataoutputstream": ["dataconnectionStream", "dataoutputStream", " dataOutputtime", " dataOutputStream", "dataOutputtime", " dataoutputrow", " dataoutputStream", " dataOutputwindow", "dataOutputrow", "dataconnectionwindow", "datasuccessstream", "dataoutputtime", "dataOutputwindow", "dataoutputwindow", "dataputwindow", " dataoutputwindow", "datainputStream", "datasuccesswindow", "datainputrow", " dataoutputtime", " dataOutputrow", "dataputStream", "dataconnectionstream", " dataOutputstream", "dataputstream", "datasuccesstime", "dataOutputStream", "dataOutputstream", "dataconnectionrow", "datasuccessStream", "datainputwindow", "dataoutputrow", "dataputtime"]}}
{"id1": "8047989", "id2": "11005804", "code1": "    protected byte[] getHashedID(String ID) {\n        try {\n            MessageDigest md5 = MessageDigest.getInstance(\"MD5\");\n            md5.reset();\n            md5.update(ID.getBytes());\n            byte[] digest = md5.digest();\n            byte[] bytes = new byte[WLDB_ID_SIZE];\n            for (int i = 0; i < bytes.length; i++) {\n                bytes[i] = digest[i];\n            }\n            return bytes;\n        } catch (NoSuchAlgorithmException exception) {\n            System.err.println(\"Java VM is not compatible\");\n            exit();\n            return null;\n        }\n    }\n", "code2": "    public String kodetu(String testusoila) {\n        MessageDigest md = null;\n        try {\n            md = MessageDigest.getInstance(\"SHA\");\n        } catch (NoSuchAlgorithmException e) {\n            new MezuLeiho(\"Ez da zifraketa algoritmoa aurkitu\", \"Ados\", \"Zifraketa Arazoa\", JOptionPane.ERROR_MESSAGE);\n            e.printStackTrace();\n        }\n        try {\n            md.update(testusoila.getBytes(\"UTF-8\"));\n        } catch (UnsupportedEncodingException e) {\n            new MezuLeiho(\"Errorea kodetzerakoan\", \"Ados\", \"Kodeketa Errorea\", JOptionPane.ERROR_MESSAGE);\n            e.printStackTrace();\n        }\n        byte raw[] = md.digest();\n        String hash = (new BASE64Encoder()).encode(raw);\n        return hash;\n    }\n", "label": 1, "substitutes": {"getHashedID": ["getHashedHash", "getShashingId", "getHASHId", "getHackedId", "getShashingString", "getShashedString", "getHashingHash", "getHashingID", "getShashedHash", "getHASHHash", "getShashingHash", "getHASHString", "getHASHID", "getHackedString", "getShashedId", "getShashedID", "getHashingString", "getHackedID", "getHashedId", "getHashingId", "getHackedHash", "getHashedString", "getShashingID"], "ID": [" PID", "Key", "P", "ASH", "TYPE", "IDs", "INT", " fid", "id", "NOTE", "FILE", "SHA", " id", "AND", "PK", "IDA", "NAME", "DS", "UID", "ACK", "KEY", "URI", "MD", "REF", "EL", "URL", " NAME", "STR", "IDENT", "Id", "MAC", "name", "Name", "END", "JS", "DATA", "DER", "BY", "TAG", "DB", "NULL", "AD"], "md5": ["hash5", "MD2", " MD7", "MD512", " md512", " md8", "md4", "md6", " MD4", "dig512", "md75", " MD5", " MD6", " md3", "dig5", "MD5", "md7", " MD3", " MD8", " md2", "sha2", "MD7", "md8", "sha7", " md6", "MD3", "hash8", " MD75", "md2", "hash75", "MD4", "sha6", "md512", "hash7", "dig3", "dig2", " md75", " md7", "sha5", " md4", "md3", "MD6"], "digest": ["mdested", "Digast", "mdment", "mdate", " digests", "digested", " digEST", "Digested", "mdest", "DigEST", "digate", "mdEST", "digast", "Digest", "digests", "Digate", " digested", "digEST", "mdist", "Digist", "mdests", " digist", "Digests", "digment", "mdast", "digist", " digment", " digast", " digate", "Digment"], "bytes": ["windows", "pieces", "cells", "flags", "results", "binary", "terms", "gc", "groups", "xs", "gb", "strings", "fields", "blocks", "gs", "steps", "tes", "Bytes", "bits", "jobs", "nets", "images", "ios", "pages", "https", "some", "banks", "units", "fixes", "ces", "es", "bps", "options", "bis", "times", "frames", "parts", "bs", "s", "files", "tmp", "raw", "tags", "ds", "ips", "bes", "services", "lines", "items", "faces", "data", "keys", "details", "seconds", "rows", "errors", "this", "boxes", "classes", "buf", "types", "values"], "i": ["ti", "v", "ji", "I", "batch", "ic", "zi", "li", "gi", "io", "b", "is", "di", "t", "ki", "ii", "j", "span", "phi", "ri", "mi", "si", "fire", "index", "ini", "n", "a", "inner", "pi", "ci", "m", "ski", "cli", "uri", "o", "set", "ms", "multi", "q", "init", "xi", "ie", "gu", "client", "u", "ei", "ind", "ij", "x", "qi", "im", "key", "uu", "ai", "ix", "sim", "ip", "us", "bi", "it", "ui", "y"]}}
{"id1": "10176678", "id2": "7122523", "code1": "    @Test\n    public void testLoadHttpGzipped() throws Exception {\n        String url = HTTP_GZIPPED;\n        LoadingInfo loadingInfo = Utils.openFileObject(fsManager.resolveFile(url));\n        InputStream contentInputStream = loadingInfo.getContentInputStream();\n        byte[] actual = IOUtils.toByteArray(contentInputStream);\n        byte[] expected = IOUtils.toByteArray(new GZIPInputStream(new URL(url).openStream()));\n        assertEquals(expected.length, actual.length);\n    }\n", "code2": "    public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        InstanciaDelegate delegate = RegistroManager.recuperarInstancia(request);\n        if (delegate == null) {\n            ActionErrors errors = new ActionErrors();\n            errors.add(null, new ActionError(\"errors.session\"));\n            saveErrors(request, errors);\n            return mapping.findForward(\"fail\");\n        }\n        AyudaPantalla ayudaPantalla = delegate.obtenerAyudaPantalla();\n        TraAyudaPantalla traAyudaPantalla = (TraAyudaPantalla) ayudaPantalla.getTraduccion();\n        String urlSonido = traAyudaPantalla.getUrlSonido();\n        if (urlSonido == null) {\n            return null;\n        }\n        URL url = new URL(urlSonido);\n        URLConnection urlConnection = url.openConnection();\n        urlConnection.connect();\n        String tipoMime = urlConnection.getContentType();\n        log.debug(\"Tipo Mime: \" + tipoMime);\n        Map audioOptions = new HashMap();\n        if (tipoMime.indexOf(\"audio\") != -1 || tipoMime.indexOf(\"asf\") != -1 || tipoMime.equals(\"unknown/unknown\")) {\n            audioOptions.put(\"id\", \"MediaPlayer\");\n            audioOptions.put(\"codeBase\", \"http://activex.microsoft.com/activex/controls/mplayer/en/nsmp2inf.cab#Version=6,4,7,1112\");\n            audioOptions.put(\"classId\", \"CLSID:22D6F312-B0F6-11D0-94AB-0080C74C7E95\");\n            audioOptions.put(\"mimeType\", \"application/x-mplayer2\");\n            audioOptions.put(\"urlSonido\", urlSonido);\n            audioOptions.put(\"pluginSpage\", \"http://www.microsoft.com/Windows/Downloads/Contents/Products/MediaPlayer/\");\n        } else if (tipoMime.indexOf(\"real\") != -1) {\n            audioOptions.put(\"id\", \"RVOCX\");\n            audioOptions.put(\"codeBase\", \"\");\n            audioOptions.put(\"classId\", \"clsid:CFCDAA03-8BE4-11cf-B84B-0020AFBBCCFA\");\n            audioOptions.put(\"mimeType\", \"audio/x-pn-realaudio-plugin\");\n            audioOptions.put(\"urlSonido\", urlSonido);\n            audioOptions.put(\"pluginSpage\", \"\");\n        }\n        request.setAttribute(\"audioOptions\", audioOptions);\n        log.debug(\"entra success\");\n        return mapping.findForward(\"success\");\n    }\n", "label": 0, "substitutes": {"testLoadHttpGzipped": ["testLoadHttpgzipped", "testLoadHttpGzipipping", "testLoadHttpGzipipped", "testLoadHttpgZipping", "testLoadHttpGZIP", "testLoadHttpgzipping", "testLoadHttpGzipping", "testLoadHttpgZips", "testLoadHttpGzIP", "testLoadHttpGZips", "testLoadHttpGgzIP", "testLoadHttpGgzipped", "testLoadHttpGzips", "testLoadHttpGgzipping", "testLoadHttpGgzips", "testLoadHttpgzips", "testLoadHttpGZipped", "testLoadHttpgZIP", "testLoadHttpgZipped", "testLoadHttpgzIP", "testLoadHttpGzipIP", "testLoadHttpGZipping", "testLoadHttpGzipips"], "url": ["err", "build", "path", "lr", "string", "ret", "Url", "p", "str", "id", "mail", "b", "test", "browser", "msg", "ls", "dl", "ll", "pattern", "pl", "status", "host", "ssl", "link", "location", "html", "options", "uri", "reason", "URL", "config", "rel", "web", "format", "result", "fail", "loc", "ur", "q", "name", "acl", "base", "http", "key", "mount", "rect", "l", "ref", "type", "state", "sql", "full", "policy"], "loadingInfo": ["loadingNow", "readingInfo", "LoadingData", "readingNow", "LoadingStatus", "contentInfo", "LoadingNow", "contentData", "loadingData", "readingInf", "LoadingInfo", "contentNow", "loadingInf", "LoadingInf", " loadingInf", "contentInf", " loadingNow", " loadingStatus", " loadingData", "readingStatus", "loadingStatus"], "contentInputStream": ["contentInfoStream", "contentIntSteam", "contentOutputForm", "fileStreamstream", "contentInputForm", "contentByteStream", "contentStreamSteam", "contentByteSteam", "contentInfostream", " contentInputForm", "contentReadStream", " contentOutputSteam", "contentInfoSteam", "contentReadPoint", " contentInputSteam", "contentReadForm", "contentInputstream", "contentInputThread", "fileStreamStream", "contentIntForm", "contentStreamStream", "fileInputSteam", "contentInputSteam", "contentStreamstream", "contentBytestream", "contentInfoThread", "fileInputStream", "contentIntStream", "contentOutputSteam", "contentStreamThread", "fileStreamThread", "contentIntPoint", "contentOutputPoint", "contentByteThread", "fileInputThread", "fileInputstream", " contentOutputForm", " contentOutputPoint", " contentOutputStream", " contentInputPoint", "fileStreamSteam", "contentOutputStream", "contentReadSteam", "contentInputPoint"], "actual": ["fake", "truth", "true", "currently", "false", "old", "test", "latest", "reported", "rendered", "current", "total", "original", "other", "required", "real", "view", "act", "present", "valid", "initial", "ual", "tested", "result", "raw", "older", "all", "verified", " Actual", "affected", "approximately", "produced", "virtual", "array", "Act", "received", "full", "actually", "now", "partial"], "expected": ["fake", " unexpected", " expecting", "umed", "ert", "supported", "always", "want", "pect", "old", "test", "planned", "reported", "ired", "ed", "current", "required", "ex", "awaited", "anted", "confirmed", "valid", "nexpected", "tested", "example", "announced", "allowed", "pects", " expect", "EXP", "pected", "produced", "or", "anticipated", "erved", "received", "important", "checked"]}}
{"id1": "5998352", "id2": "237493", "code1": "    @Test\n    public void testStandardTee() throws Exception {\n        final String reference = \"test\";\n        final Reader source = new StringReader(reference);\n        final StringWriter destination1 = new StringWriter();\n        final StringWriter destination2 = new StringWriter();\n        final TeeWriter tee = new TeeWriter(destination1, destination2);\n        org.apache.commons.io.IOUtils.copy(source, tee);\n        tee.close();\n        assertEquals(\"the two string are equals\", reference, destination1.toString());\n        assertEquals(\"the two string are equals\", reference, destination2.toString());\n        assertEquals(\"byte count\", reference.length(), tee.getSize());\n    }\n", "code2": "    public Configuration(URL url) {\n        InputStream in = null;\n        try {\n            load(in = url.openStream());\n        } catch (Exception e) {\n            throw new RuntimeException(\"Could not load configuration from \" + url, e);\n        } finally {\n            if (in != null) {\n                try {\n                    in.close();\n                } catch (IOException ignore) {\n                }\n            }\n        }\n    }\n", "label": 0, "substitutes": {"testStandardTee": [" testStandardNees", " testStandardTe", " testStandardMees", " testStandardEee", " teststandardMe", " testStandardMee", " teststandardMees", " testStandardTees", " teststandardTees", " testStandardNe", " testStandardMette", " teststandardTette", " testStandardEette", " teststandardMette", " testStandardEees", " testStandardTette", " testStandardNee", " testStandardEe", " testStandardNette", " testStandardMe", " teststandardTee", " teststandardMee", " teststandardTe"], "reference": ["search", "address", "sample", "description", "function", "definition", "string", "sequence", "operation", "reverse", "back", "print", "test", "remote", "position", "internal", "specified", "service", "resolution", "relative", "attribute", "filename", "external", "section", "re", "library", "relation", "condition", "pattern", "alias", "title", "link", "Reference", "expression", "note", "prefix", "example", "using", "argument", "message", "see", "associated", "document", "template", "name", "register", "pointer", "value", "report", "approximately", "memory", "use", "hello", "key", "request", "directory", "ref", "type", "information", "collection", "word"], "source": ["seed", "sample", "force", "file", "sequence", "resource", "src", "store", "loader", "context", "SOURCE", "service", "select", "from", "username", "copy", "target", "reader", "shell", "style", "ource", "inner", "instance", "console", "base", "iterator", "buffer", "Source", "format", "get", "sql", "core", "input", "template", "spec", "ser", "unit", "operator", "stream"], "destination1": ["destificateOne", "destension1", "destinationName", "destregationName", "Destinator1", "destinator1", "destination01", "destinationFirst", "stinationFirst", "destinationsFirst", "destificationone", "stinationOne", "Destination1", "stension2", "destinator01", "destificationName", "DestinatorOne", "destification1", "stension1", "DestinationName", "destinatorOne", "stination2", "stensionFirst", "destinations2", "DestinationOne", "destinations1", "destation1", "destension2", "Destinationone", "destinationOne", "destregationone", "desturationOne", "Destination01", "desturation2", "destensionOne", "destationOne", "stensionOne", "desturationFirst", "destregation1", "destinatorName", "desturation1", "destinatorone", "destregationOne", "Destinator01", "destinationsOne", "destation01", "destificate01", "destificate1", "stination1", "DestinatorName", "destificationOne", "destensionFirst", "destinationone", "Destinatorone"], "destination2": ["destinateTwo", "destension1", "destinator2", "destinate1", "destinator52", " desturation2", "DestinationTwo", "Destination2", "destensionTwo", "destension4", "estination3", "destendanttwo", "Destination1", "Destension2", "destinationtwo", "destinated3", "destendantB", "DestensionTwo", "desturation4", "desturationB", "estinition3", "destendant4", " desturationtwo", "destinate2", " desturation4", "destination52", "destinated52", "destociation2", " destination4", "destination3", "destinition52", "desturation2", "destinition3", " destinationtwo", "Destension1", "desturationtwo", "destensiontwo", "destinationB", "estination52", "destinated2", "destination4", "destensionB", "estination2", "estinition2", "destendant2", "destinition2", "estinition52", "destociation1", "destociationTwo", "destinator3", "destinationTwo", "destension2", " desturationB", " destinationB"], "tee": ["teee", "seee", "ceE", "cees", "teer", "peE", "cheee", "teoe", "pees", "pee", "peoe", "ceee", " teea", "peee", "chete", "tees", "cee", "ceoe", "teE", " teE", "tete", "seoe", "ceer", "see", " tees", "teea", "ieee", "ieea", "iee", "cheea", " teer", "seE", " teoe", " tete", "chee", "peer", "iete", " teee"]}}
{"id1": "2324868", "id2": "21425787", "code1": "            @Override\n            public void actionPerformed(ActionEvent e) {\n                try {\n                    Pattern delim = Pattern.compile(\"[ ]\");\n                    BufferedReader r = new BufferedReader(new InputStreamReader(new GZIPInputStream(new FileInputStream(\"/home/lindenb/jeter.txt.gz\"))));\n                    String line = null;\n                    URL url = new URL(\"http://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi\");\n                    URLConnection conn = url.openConnection();\n                    conn.setDoOutput(true);\n                    OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());\n                    wr.write(\"db=snp&retmode=xml\");\n                    while ((line = r.readLine()) != null) {\n                        String tokens[] = delim.split(line, 2);\n                        if (!tokens[0].startsWith(\"rs\")) continue;\n                        wr.write(\"&id=\" + tokens[0].substring(2).trim());\n                    }\n                    wr.flush();\n                    r.close();\n                    InputStream in = conn.getInputStream();\n                    IOUtils.copyTo(in, System.err);\n                    in.close();\n                    wr.close();\n                } catch (IOException err) {\n                    err.printStackTrace();\n                }\n            }\n", "code2": "    private static void copyFile(File in, File out) {\n        try {\n            FileChannel sourceChannel = new FileInputStream(in).getChannel();\n            FileChannel destinationChannel = new FileOutputStream(out).getChannel();\n            sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);\n            sourceChannel.close();\n            destinationChannel.close();\n        } catch (IOException ex) {\n            ex.printStackTrace();\n        }\n    }\n", "label": 1, "substitutes": {"actionPerformed": [" actionOccceived", " actionExecformed", " actionPeruted", " actionTransformed", "actionExecuted", " actionOccform", " actionTransuted", " actionTransceived", " actionOccformed", "actionPerform", "actionExecform", " actionExecform", " actionExecceived", " actionExecuted", " actionOccuted", " actionPerceived", "actionPerceived", "actionExecceived", " actionPerform", "actionExecformed", " actionTransform", "actionPeruted"], "e": ["ev", "v", "ce", "E", " event", "b", "t", "event", "te", "ed", "se", "ee", "re", "n", "a", "m", "o", "Event", "events", "ie", "or", "cb", "ef", "ec", "es", "er", "w", "ea"], "delim": [" delimeter", " delif", "delif", "separimeter", "Delib", "delam", "separif", "Delim", "Delam", " deliter", "drimm", "dlimeter", "dliter", "drib", "separim", "delib", "delimm", "dlif", " delam", "deliter", " delimm", "drim", "Delimm", "separiter", "dram", " delib", "dlim", "delimeter"], "r": ["d", "sr", "dr", "lr", "p", "rx", "nr", "rb", "vr", "mr", "w", "reader", "re", "rs", "rw", "c", "n", "rg", "rate", "res", "cr", "m", "br", "rd", "hr", "ur", "rt", "usr", "rr", "pr", "rl", "rc", "tr", "l", "fr", "kr", "it", "R", "er", "rar", "rn"], "line": ["text", "ln", "sample", "cell", "string", "file", "log", "sequence", "ste", "nl", "inline", "mail", "point", "row", "stroke", "detail", "record", "run", "range", "ice", "block", "node", "check", "link", "ode", "base", "normal", "page", "lin", "out", "raw", "pass", "user", "lo", "frame", "liner", "comment", "lines", "ine", "le", "online", "eline", "chain", "Line", "l", "LINE", "handle", "ole", "stream", "entry", "word"], "url": ["build", "sl", "gl", "blog", "log", "ret", "Url", "hub", "str", "abs", "nl", "browser", "ls", "open", "dl", "ll", "https", "ssl", "link", "f", "uri", "rel", "api", "URL", "base", "web", "net", "loc", "ur", "cert", "client", "hl", "bel", "http", "rl", "addr", "l", "ref", "gb", "org", "lb", "ul"], "conn": ["ln", "cur", "canon", "nl", "ws", "conv", "Conn", "nt", "obj", "ctrl", "open", "inv", "pas", "cp", "Connection", "c", "dl", "n", "ctx", "comm", "connection", "write", "secure", "res", "https", "fin", "ssl", "close", "ns", "rel", "syn", "ct", "ann", "net", "connect", "loc", "cl", "cn", "ch", "db", "nw", "cert", "yn", "client", "ait", "sync", "nc", "con", "socket", "addr", "cb", "enc", "cmd", "nec", "resp", "org", "jp", "dial", "rn"], "wr": ["tw", "ln", "ev", "dr", "spr", "rn", "fw", "wrote", "ell", "mt", "wn", "sw", "Wr", "rex", "kl", "ws", "vr", "RW", "mr", "WR", "we", "pipe", "writ", "rw", "write", "wx", "wi", "wp", "wm", "wer", "writers", "resp", "wl", "wy", "iw", "writer", "nw", "vet", "fn", "wt", "pr", "Writer", "mg", "wk", "tn", "kr", "fr", "wire", "wb", "wa", "w", "rew"], "tokens": [" tokENS", "todENS", " tOKents", "tocwords", "todents", "tokents", "tOKeds", "takawords", "todonds", "Tokens", "stokonds", "takaens", "tookonds", " tOKENS", "Tokers", "todeds", "stokets", " tokents", "tikeds", "tokENS", "stodens", "toksonds", "stodonds", "Tokswords", "takaers", "tokskens", "Toksets", "stokens", "tookkens", "tookets", "tikENS", "toksens", "tikents", "tokswords", "tokeds", "Toksens", "tOKENS", "tocers", "toksers", "todens", "Tokets", " tOKeds", "tokets", "tokonds", "tokwords", "tokers", "tocets", "tokkens", "tookens", "stokkens", "tikens", "Tokwords", "stodkens", "takaets", "toksets", "tOKents", "stodets", "tOKens", " tokeds", "todkens", "tocens", "Toksers", "todets", " tOKens"], "in": ["win", "mc", "err", "irm", "ic", "en", "io", "is", "inf", "cin", "from", "reader", "null", "IN", "inc", "i", "inner", "ini", "ar", " din", "on", "iter", "ma", "out", "din", "all", "input", "read", "ind", "mm", "gin", "In", "mn", "ins", "l", "rin", "it", "bin", "body", "ill", "con", "inn"]}}
{"id1": "8973505", "id2": "17580775", "code1": "    public static void writeFileType(String uriFile, String outputfile, int num) {\n        BufferedWriter writer = null;\n        String uri = null;\n        try {\n            int counter = 1;\n            writer = new BufferedWriter(new FileWriter(outputfile));\n            BufferedReader reader = new BufferedReader(new FileReader(uriFile));\n            uri = null;\n            while (counter < num) {\n                uri = reader.readLine();\n                counter++;\n            }\n            while ((uri = reader.readLine()) != null) {\n                try {\n                    System.err.println(\"working on the [\" + counter + \"]th document.\");\n                    counter++;\n                    URL url = new URL(uri);\n                    URLConnection myConnection = url.openConnection();\n                    BufferedReader myReader = new BufferedReader(new InputStreamReader(myConnection.getInputStream()));\n                    String line = null;\n                    boolean hasOWL = false;\n                    boolean hasRDFS = false;\n                    boolean hasRDF = false;\n                    int linecount = 0;\n                    while ((line = myReader.readLine()) != null) {\n                        if (line.indexOf(\"http://www.w3.org/2002/07/owl\") != -1) hasOWL = true; else if (line.indexOf(\"http://www.w3.org/2000/01/rdf-schema\") != -1) hasRDFS = true; else if (line.indexOf(\"http://www.w3.org/1999/02/22-rdf-syntax-ns\") != -1) hasRDF = true;\n                        linecount++;\n                        if (linecount > 100) break;\n                    }\n                    if (hasOWL) writer.write(uri + \"\\t\" + OWL); else if (hasRDFS) writer.write(uri + \"\\t\" + RDFS); else if (hasRDF) writer.write(uri + \"\\t\" + RDF); else writer.write(uri + \"\\t\" + UNKNOWN);\n                    writer.newLine();\n                    writer.flush();\n                } catch (Exception e) {\n                    e.printStackTrace();\n                    try {\n                        writer.write(uri + \"\\t\" + BROKEN);\n                        writer.newLine();\n                        writer.flush();\n                    } catch (Exception ex) {\n                        ex.printStackTrace();\n                    }\n                }\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n", "code2": "        public void runInternal() {\n            connection = null;\n            boolean itemsLoadedPartially = false;\n            boolean loadNext = false;\n            HashSet<String> visited = new HashSet<String>();\n            do {\n                try {\n                    setProgressMessage(url.toString(), -1);\n                    visited.add(url.toString());\n                    long startTimeStamp = System.currentTimeMillis();\n                    delayedProgress = coolReader.getEngine().showProgressDelayed(0, progressMessage, PROGRESS_DELAY_MILLIS);\n                    URLConnection conn = url.openConnection();\n                    if (conn instanceof HttpsURLConnection) {\n                        onError(\"HTTPs is not supported yet\");\n                        return;\n                    }\n                    if (!(conn instanceof HttpURLConnection)) {\n                        onError(\"Only HTTP supported\");\n                        return;\n                    }\n                    connection = (HttpURLConnection) conn;\n                    connection.setRequestProperty(\"User-Agent\", \"CoolReader/3(Android)\");\n                    if (referer != null) connection.setRequestProperty(\"Referer\", referer);\n                    connection.setInstanceFollowRedirects(true);\n                    connection.setAllowUserInteraction(false);\n                    connection.setConnectTimeout(CONNECT_TIMEOUT);\n                    connection.setReadTimeout(READ_TIMEOUT);\n                    connection.setDoInput(true);\n                    String fileName = null;\n                    String disp = connection.getHeaderField(\"Content-Disposition\");\n                    if (disp != null) {\n                        int p = disp.indexOf(\"filename=\");\n                        if (p > 0) {\n                            fileName = disp.substring(p + 9);\n                        }\n                    }\n                    int response = -1;\n                    response = connection.getResponseCode();\n                    L.d(\"Response: \" + response);\n                    if (response != 200) {\n                        onError(\"Error \" + response);\n                        return;\n                    }\n                    String contentType = connection.getContentType();\n                    String contentEncoding = connection.getContentEncoding();\n                    int contentLen = connection.getContentLength();\n                    L.d(\"Entity content length: \" + contentLen);\n                    L.d(\"Entity content type: \" + contentType);\n                    L.d(\"Entity content encoding: \" + contentEncoding);\n                    setProgressMessage(url.toString(), contentLen);\n                    InputStream is = connection.getInputStream();\n                    delayedProgress.cancel();\n                    is = new ProgressInputStream(is, startTimeStamp, progressMessage, contentLen, 80);\n                    final int MAX_CONTENT_LEN_TO_BUFFER = 256 * 1024;\n                    boolean isZip = contentType != null && contentType.equals(\"application/zip\");\n                    if (expectedType != null) contentType = expectedType; else if (contentLen > 0 && contentLen < MAX_CONTENT_LEN_TO_BUFFER) {\n                        byte[] buf = new byte[contentLen];\n                        if (is.read(buf) != contentLen) {\n                            onError(\"Wrong content length\");\n                            return;\n                        }\n                        is.close();\n                        is = null;\n                        is = new ByteArrayInputStream(buf);\n                        if (findSubstring(buf, \"<?xml version=\") >= 0 && findSubstring(buf, \"<feed\") >= 0) contentType = \"application/atom+xml\";\n                    }\n                    if (contentType.startsWith(\"application/atom+xml\")) {\n                        L.d(\"Parsing feed\");\n                        parseFeed(is);\n                        itemsLoadedPartially = true;\n                        if (handler.docInfo.nextLink != null && handler.docInfo.nextLink.type.startsWith(\"application/atom+xml;profile=opds-catalog\")) {\n                            if (handler.entries.size() < MAX_OPDS_ITEMS) {\n                                url = new URL(handler.docInfo.nextLink.href);\n                                loadNext = !visited.contains(url.toString());\n                                L.d(\"continue with next part: \" + url);\n                            } else {\n                                L.d(\"max item count reached: \" + handler.entries.size());\n                                loadNext = false;\n                            }\n                        } else {\n                            loadNext = false;\n                        }\n                    } else {\n                        if (fileName == null) fileName = defaultFileName;\n                        L.d(\"Downloading book: \" + contentEncoding);\n                        downloadBook(contentType, url.toString(), is, contentLen, fileName, isZip);\n                        if (progressShown) coolReader.getEngine().hideProgress();\n                        loadNext = false;\n                        itemsLoadedPartially = false;\n                    }\n                } catch (Exception e) {\n                    L.e(\"Exception while trying to open URI \" + url.toString(), e);\n                    if (progressShown) coolReader.getEngine().hideProgress();\n                    onError(\"Error occured while reading OPDS catalog\");\n                    break;\n                } finally {\n                    if (connection != null) try {\n                        connection.disconnect();\n                    } catch (Exception e) {\n                    }\n                }\n            } while (loadNext);\n            if (progressShown) coolReader.getEngine().hideProgress();\n            if (itemsLoadedPartially) BackgroundThread.guiExecutor.execute(new Runnable() {\n\n                @Override\n                public void run() {\n                    L.d(\"Parsing is finished successfully. \" + handler.entries.size() + \" entries found\");\n                    callback.onFinish(handler.docInfo, handler.entries);\n                }\n            });\n        }\n", "label": 1, "substitutes": {"writeFileType": ["writeFileInfo", "readFileType", "writefiletype", "writePagetype", "writefileType", "writeContenttype", "readFiletype", "readfileInfo", "readFileInfo", "writeFileName", "writePageType", "readfileType", "readFileName", "writePageInfo", "writefileInfo", "writeFiletype", "readfiletype", "writePageName", "writeContentName", "readfileName", "writeContentInfo", "writefileName", "writeContentType"], "uriFile": ["iriFILE", "rangeData", "uriFiles", "iriFile", "uriFilename", "filefile", "URIFile", "URIfile", "irifile", "filenameFiles", "fileFiles", "URIFilename", "urifile", "rangefile", "URIData", "fileFilename", "filenameFilename", "uriFILE", "uriData", "filenamefile", "filenameFile", "iriData", "rangeFILE", "fileFile", "rangeFile", "URIFiles", "URIFILE"], "outputfile": ["outputport", "inputf", "inputFILE", "outputf", " outputf", "imageFILE", "inputFile", "outputFile", "outbase", "inputport", "imageport", "Outputport", "outfile", "imagefile", "inputfile", "inputbase", "Outputfile", "imageFile", " outputbase", "outf", "outputFILE", " outputFile", "outFile", "outputbase", "OutputFILE", "OutputFile"], "num": ["cmp", "number", "nam", "alph", "np", "mult", "nb", "count", "Number", "no", "max", "total", "nm", "mon", "current", "NUM", "required", "nom", "index", "n", "check", "m", "end", "multi", "all", "random", "zero", "x", "done", "add", "Num", "um", "con"], "writer": ["director", "function", "timer", "wrapper", "test", "processor", "wright", "network", "owner", "external", "widget", "console", "runner", "iterator", "document", "caster", "comment", "memory", "window", "operator", "er", "handler", "entry", "w", "ener", "utils", "loader", "Reader", "RW", "linger", "flush", "maker", "storage", "write", "worker", "server", "read", "client", "data", "Writer", "driver", "stream", "written", "layer", "term", "variable", "event", "ner", "record", "writ", "to", "inner", "writers", "buffer", "journal", "commit", "liner", "width", "writing", "wire", "author", "creator", "player", "ender", "file", "riter", "resource", "service", "manager", "editor", "connection", "usher", "link", "builder", "table", "format", "will", "thus"], "uri": ["description", "queue", "uni", "qu", "username", "copy", "sofar", "obo", "ource", "location", " URI", "iterator", "via", "iri", "qi", "source", "details", "ir", "ui", "rid", "uid", "doi", "umi", "phi", "ri", "filename", "mi", "href", "query", "URI", "prefix", "ur", "reference", "http", "folder", "image", "uu", "chain", "ip", "du", "subject", "address", "bid", "id", "channel", "browser", "basic", "phrase", "ni", "wiki", "range", "inner", "pi", "https", "form", "result", "multi", "user", "ei", "general", "ugi", "hi", "ref", "origin", "hyper", "file", "resource", "remote", "i", "connection", "link", "verb", "uno", "directory", "domain", "unit"], "counter": ["system", "cms", "cover", "card", "number", "ctr", "sequence", "term", "ier", "amount", "timer", "Counter", "processor", "count", "nr", "loader", "browser", "context", "TER", "conv", "phrase", "total", "const", "mr", "manager", "norm", "walker", "frequency", "index", "time", "mer", "editor", "clock", "inner", "instance", "scope", "money", "outer", "book", "meter", "iterator", "loop", "cookie", "buffer", "message", "container", "ounter", "ter", "common", "random", "currency", "pointer", "memory", "key", "finder", "coll", "another", "mill", "controller", "order", "machine", "continue", "entry", "creator"], "reader": ["address", "layer", "player", "file", "timer", "redo", "resource", "roller", "rx", "processor", "loader", "ner", "method", "context", "row", "Reader", "r", "editor", "ro", "inner", "rar", "upper", "yer", "builder", "runner", "server", "iterator", "iter", "buffer", "dd", "older", "journal", "parser", "read", "input", "document", "liner", "rl", "driver", "er", "handler", "entry"], "url": ["build", "sl", "gl", "address", "Url", "li", "str", "nl", "resource", "mail", "char", "browser", "open", "re", "r", "dl", "ll", "https", "ssl", "link", "location", "rel", "base", "URL", "google", "web", "loc", "get", "ur", "github", "name", "client", "bel", "hl", "www", "http", "mount", "l", "il", "ref"], "myConnection": ["newLink", " myconnection", "yourconnection", "myConnector", "thisConnection", "thisConn", " myLink", "myConnect", " myConnect", "MyConnection", "thisLink", "MyLink", "Myconnection", "myConn", " myConnector", "yourConnection", "yourLink", "MyConnector", "thisConnect", "newConnect", " myConn", "yourConnector", "newConnection", "newConn", "myconnection", "myLink"], "myReader": ["MyRead", "yWriter", "yourWriter", "MyWriter", " myWriter", "MyParser", "yourParser", "yReader", "mxFr", "mxSer", " myParser", "ySer", "yourReader", "yFr", " mySer", "mxReader", " myRead", "myRead", "myParser", "yourRead", "myFr", "myWriter", " myFr", "MyReader", "mySer", "mxWriter"], "line": ["text", "ln", "sample", "cell", "definition", "log", "sequence", "inline", "point", "channel", "part", "char", "row", " LINE", "stroke", "detail", "no", "style", "rule", "email", "edge", "range", "block", " Line", "label", "code", "side", "cli", "link", "ode", "ge", "normal", "iter", "trace", "message", "page", "lin", "raw", "user", "lo", "frame", "liner", "comment", "lane", "ine", "le", "one", "eline", "online", "Line", "l", "LINE", "ip", "body", "ole", "entry", "word"], "linecount": [" lineconfig", "linconsider", "linerfound", "LineCount", " lineconst", "strokeconsider", "linercount", "lineconst", "inlinecounter", "elinelength", "lineconsider", "Lineconfig", "lineCount", " linecounter", " linefound", "elineconst", "elinecounter", "inlinelength", "linerconfig", "Linecount", "strokenumber", " lineCount", " lineamount", "inlinecount", " linelength", "strokeamount", "strokecount", "linnumber", " linenumber", "lincount", "linecounter", "elinecount", "linenumber", "lineconfig", "linerCount", "lineamount", "linelength", "linamount", " lineconsider", "linefound", "inlineconst", "Linefound"], "hasOWL": ["hasEWLP", " hasOWSL", "HasOWSB", "HasOWSLP", "hasEWS", "hasOHS", " hasOWR", "hasOWNNL", "hasOWSB", " hasEWL", "hasOHLP", " hasEWLS", " hasOWSNL", "hasROLP", "hasROR", "hasEWLS", "hasEWR", "hasOWB", "hasOWSLS", "hasOWSNL", "hasOWNL", "hasOWNR", " hasEWLP", "HasOWSL", "hasRONL", "hasOHL", " hasOWSLP", "hasOWNLP", "HasOWB", "hasSOR", "hasOWLP", "hasSOLS", " hasEWR", "hasROL", "hasSOLP", "hasOWSR", "HasOWSS", "hasEWL", "HasOWLP", "HasOWS", "hasOWS", "hasOWR", " hasOWSR", "hasOWLS", "hasSOL", "hasOHB", "hasOWSS", " hasOWLS", " hasOWLP", "HasOWL", "hasOWSLP", "hasOWSL", "hasEWB", " hasOWNL"], "hasRDFS": ["hasRDFCS", "hasRRIB", "hasRMLDS", "hasRNFs", "hasRdfCS", "hasORDSS", "hasRMLS", "hasRDFB", "hasSRDSCS", "hasXDSs", "hasSRDFB", "hasORDSDS", "hasRNFS", "hasRMLM", "hasSRDSs", "hasORDFDS", "hasRdfs", "hasSRDSS", "hasRDSM", "hasRDSS", "hasXDFs", "hasSRDFs", "hasXDFS", "hasRdfS", "hasXDSS", "hasORDFS", "hasSRDFCS", "hasRRICS", "hasXDFM", "hasORDFM", "hasRdfM", "hasRdfDS", "hasRDSCS", "hasORDSM", "hasRDSs", "hasXDFDS", "hasSRDFS", "hasRNFM", "hasRRIs", "hasRDFM", "hasXDSM", "hasRDFDS", "hasRRIS", "hasRMLs", "hasXDSDS", "hasRDSDS", "hasRNFDS", "hasRdfB", "hasRDSB", "hasORDFs", "hasSRDSB", "hasORDSs", "hasRDFs"], "hasRDF": ["hasDDF", "hasRADI", "hasDNF", "hasRTDS", "hasRRdf", " hasRNF", "hasORDF", "hasRRDS", "hasRTDF", "hsRDF", "hsRDI", "hasDCD", "hasDdf", "hasREDF", " hasRRDF", "hsRRDF", " hasRRNF", " hasDdf", "hasRCCD", " hasRRDR", " hasRDR", "hasRRDR", "hasRDT", "hsRDS", "hasRADT", "hasREDI", "hasRRCD", "hasRCD", "hasRTDR", "hasORDR", "hsRRDS", " hasDDF", " hasDCD", "hsRRDI", "hasREDS", "hasRRDI", "hasRCNF", "hasRADF", "hasRNF", "hasRdf", "hasRRNF", "hasRDR", " hasRRDS", "hasRDS", "hasORDS", "hasORNF", " hasRDS", " hasRdf", "hasRDI", "hasRCDF", "hasRCdf", "hasRADS", " hasDNF", "hasRRDF", "hasRRDT", "hsRRDT", " hasRCD", "hasREDT", "hasRTNF", "hsRDT"]}}
{"id1": "19549577", "id2": "1005108", "code1": "    protected InputStream callApiPost(String apiUrl, Map<String, List<String>> parameters, int expected) {\n        try {\n            URL url = new URL(apiUrl);\n            HttpURLConnection request = (HttpURLConnection) url.openConnection();\n            if (ApplicationConstants.CONNECT_TIMEOUT > -1) {\n                request.setConnectTimeout(ApplicationConstants.CONNECT_TIMEOUT);\n            }\n            if (ApplicationConstants.READ_TIMEOUT > -1) {\n                request.setReadTimeout(ApplicationConstants.READ_TIMEOUT);\n            }\n            for (String headerName : requestHeaders.keySet()) {\n                request.setRequestProperty(headerName, requestHeaders.get(headerName));\n            }\n            request.setRequestMethod(\"POST\");\n            request.setDoOutput(true);\n            PrintStream out = new PrintStream(new BufferedOutputStream(request.getOutputStream()));\n            out.print(getParametersString(parameters));\n            out.flush();\n            out.close();\n            request.connect();\n            if (request.getResponseCode() != expected) {\n                throw new BingMapsException(convertStreamToString(request.getErrorStream()));\n            } else {\n                return getWrappedInputStream(request.getInputStream(), GZIP_ENCODING.equalsIgnoreCase(request.getContentEncoding()));\n            }\n        } catch (IOException e) {\n            throw new BingMapsException(e);\n        }\n    }\n", "code2": "    public void googleImageSearch(String search, String start) {\n        try {\n            String u = \"http://images.google.com/images?q=\" + search + start;\n            if (u.contains(\" \")) {\n                u = u.replace(\" \", \"+\");\n            }\n            URL url = new URL(u);\n            HttpURLConnection httpcon = (HttpURLConnection) url.openConnection();\n            httpcon.addRequestProperty(\"User-Agent\", \"Mozilla/4.76\");\n            BufferedReader readIn = new BufferedReader(new InputStreamReader(httpcon.getInputStream()));\n            googleImages.clear();\n            String text = \"\";\n            String lin = \"\";\n            while ((lin = readIn.readLine()) != null) {\n                text += lin;\n            }\n            readIn.close();\n            if (text.contains(\"\\n\")) {\n                text = text.replace(\"\\n\", \"\");\n            }\n            String[] array = text.split(\"\\\\Qhref=\\\"/imgres?imgurl=\\\\E\");\n            for (String s : array) {\n                if (s.startsWith(\"http://\") || s.startsWith(\"https://\") && s.contains(\"&amp;\")) {\n                    String s1 = s.substring(0, s.indexOf(\"&amp;\"));\n                    googleImages.add(s1);\n                }\n            }\n        } catch (Exception ex4) {\n            MusicBoxView.showErrorDialog(ex4);\n        }\n        MusicBoxView.jButton7.setEnabled(true);\n        ImageIcon icon;\n        try {\n            icon = new ImageIcon(new URL(googleImages.elementAt(MusicBoxView.googleImageLocation)));\n            ImageIcon ico = new ImageIcon(icon.getImage().getScaledInstance(100, 100, Image.SCALE_SMOOTH));\n            MusicBoxView.albumArtLabel.setIcon(ico);\n        } catch (MalformedURLException ex1) {\n            MusicBoxView.showErrorDialog(ex1);\n        }\n    }\n", "label": 0, "substitutes": {"callApiPost": ["callUapiDelete", "callAapiPut", "callActionsPut", "callUapiPOST", "callAiPOST", "callAapiPOST", "callAiPost", "callAiPut", "callApiPOST", "callAiDelete", "callUapiPut", "callActionsPost", "callApiPut", "callUpiPut", "callUpiDelete", "callAapiPost", "callUapiPost", "callUpiPOST", "callUpiPost", "callApiDelete", "callActionsPOST", "callActionsDelete", "callAapiDelete"], "apiUrl": ["resourceUr", "piUr", "piName", "baseUr", "apiPath", "resourceUrl", "baseURL", "piPath", " apiURL", "resourceName", "apURL", "apiUr", "apPath", "resourceURL", "apUrl", "baseUrl", "piUrl", " apiUr", "piURL", "apiURL", "apiName", " apiName", "apUr", "basePath"], "parameters": ["authortons", "questions", "mperties", "authorants", "paramperties", "quants", "queters", "questParameters", "questperties", "pperties", "pParameters", "authoreters", "paytons", "authorels", "payeters", "mParameters", "payants", "qutons", "paramels", "meters", "quels", "payels", "paramParameters", "peters", "paramants", "pions", "mions", "paramions", "paramtons", "questeters"], "expected": ["sex", "force", " unexpected", "future", "finished", " expecting", "posted", "pect", "ped", "odd", "e", "count", "event", "test", "reported", "needed", "current", "required", " expectation", "safe", "seen", "actual", "code", " expects", "failed", "encrypted", "set", "example", "allowed", "pects", "sent", " expect", "foo", "error", "pected", "value", "done", "hello", "default", "empty", "json", "received", "type", "checked", "size"], "url": ["arl", "build", "sl", "gl", "address", "log", "Url", "abs", "str", "nl", "mail", "oul", "loader", "service", "ls", "re", "r", "dl", "ll", "pl", "https", "ssl", "link", "f", "uri", "base", "URL", "loc", "get", "q", "ur", "impl", "ml", "hl", "bel", "www", "http", "rl", "mount", "l", "gc", "ul"], "request": ["search", "java", "pair", "re", "session", "rate", "close", "require", "requ", "web", "root", "project", "req", "parse", "exit", "name", "document", "media", "register", "object", "reset", "memory", "use", "header", "forward", "order", "command", "run", "open", "complete", "access", "query", "worker", "release", "get", "create", "change", "reference", "client", "socket", "QUEST", "quest", "first", "friend", "parent", "question", "position", "record", "volume", "accept", "buffer", "connect", "message", "enter", "user", "setup", "over", "remove", "application", "report", "response", "xml", "send", "pull", "reverse", "resource", "store", "process", "remote", "begin", "call", "condition", "initial", "q", "Request", "version"], "headerName": ["methodSpec", "methodName", " headerFamily", "headerNAME", "componentFamily", "componentName", "headername", "attributeNAME", "profileHandle", "componentNAME", "headingSpec", "propertySet", "headingFamily", "methodHandle", "headerSet", "headingName", "methodLetter", "authorName", "authorSet", "propertyNAME", "authorname", "authorNAME", "propertyName", "headingHandle", "profileLetter", "profileName", "propertyname", "headerLetter", "attributeSet", "headerSpec", "attributeName", "headerFamily", " headerNAME", "profileSpec", "headingNAME", "attributename", "headingLetter", "headerHandle"], "out": ["outs", "at", "log", "io", "help", "print", "t", "conv", "up", "in", "aos", "output", "flush", "to", "null", "n", "check", "ex", "inner", "write", "res", "console", "auto", "outer", "o", "server", "set", "net", "table", "s", "tmp", "cn", "init", "all", "writer", "client", "pretty", "comment", "sys", "source", "OUT", "Out", "ent", "ou", "can", "stream", "co", "os", "timeout"]}}
{"id1": "1362", "id2": "4481712", "code1": "    public static int[] bubbleSort(int... a) {\n        boolean swapped;\n        do {\n            swapped = false;\n            for (int i = 0; i < a.length - 1; i++) {\n                if (a[i] > a[i + 1]) {\n                    int tmp = a[i];\n                    a[i] = a[i + 1];\n                    a[i + 1] = tmp;\n                    swapped = true;\n                }\n            }\n        } while (swapped);\n        return a;\n    }\n", "code2": "    public void deleteObject(String id) throws SQLException {\n        boolean selfConnection = true;\n        Connection conn = null;\n        PreparedStatement stmt = null;\n        try {\n            if (dbConnection == null) {\n                DatabaseConn dbConn = new DatabaseConn();\n                conn = dbConn.getConnection();\n                conn.setAutoCommit(false);\n            } else {\n                conn = dbConnection;\n                selfConnection = false;\n            }\n            stmt = conn.prepareStatement(this.deleteSql);\n            stmt.setString(1, id);\n            stmt.executeUpdate();\n            if (selfConnection) conn.commit();\n        } catch (Exception e) {\n            if (selfConnection && conn != null) conn.rollback();\n            throw new SQLException(e.getMessage());\n        } finally {\n            if (stmt != null) {\n                stmt.close();\n                stmt = null;\n            }\n            if (selfConnection && conn != null) {\n                conn.close();\n                conn = null;\n            }\n        }\n    }\n", "label": 0, "substitutes": {"bubbleSort": ["bubblesCompare", "bubblingCompare", "gobblingCompare", "bubblingLess", "gobblingSort", "bubargeCompare", "bubbleLess", "bubbleCompare", "bubargeLess", "bubblingSort", "gobblingLess", "gobbleLess", "bubargeSort", "gobbleSort", "bubblesSort", "bubblesLess", "gobbleCompare"], "a": ["aka", "ae", "v", "ata", "h", "da", "p", "eas", "ga", "isa", "b", "A", "aaa", "alpha", "t", "history", "z", "aa", "arr", "an", "ed", "ab", "go", "c", "act", "apa", "area", "sa", "f", "as", "o", "form", "va", "ma", "trace", "out", "app", "changes", "all", "la", "att", "data", "ap", "am", "ao", "ac", "el", "array", "era", "aaaa", "list", "l", "na", "window", "au", "g", "cache", "order", "es", "ia", "oa", "w", "ea"], "swapped": ["scaps", "swap", "swaped", "scapped", " swaped", " snapped", "scapping", " swaps", "scaped", "SWapped", "Swapped", "snaped", "snaps", " snaped", "Swaped", "swapping", "Swapping", " snap", "waps", "stickapping", "swaps", "stickapped", "SWapping", "wapped", " swapping", " snapping", "snapping", "waped", "stickaps", "wapping", "stickaped", "snapped", "Swap", "SWaped", " swap", "SWap"], "i": ["ti", "ji", "I", "ic", "zi", "li", "id", "io", "my", "gi", "is", "di", "t", "ki", "ii", "in", "j", "phi", "oi", "ri", "mi", "si", "index", "c", "ini", "iu", "pi", "status", "ci", "m", "cli", "f", "uri", "base", "multi", "init", "xi", "uli", "ie", "gu", "client", "u", "ind", "ei", "iri", "ij", "x", "qi", "im", "me", "key", "chain", "ai", "ix", "sim", "ip", "us", "bi", "it", "ui", "hi", "ori", "ir", "origin", "ami", "y", "iso"], "tmp": ["sq", "cmp", "cur", "perm", "lib", "txt", "np", "my", "orig", "emp", "nb", "clip", "test", "timeout", "t", "obj", "managed", "ctx", "nom", "tf", "sam", "sup", "tg", "m", "pre", "prefix", "result", "sp", "attr", "comp", "td", "db", "xy", "etc", "mk", "mut", "same", "amp", "mp", "pkg", "cache", "MP", "gm", "tt", "temp"]}}
{"id1": "6036012", "id2": "13063241", "code1": "    public byte[] getClassBytes(String className, ClassLoader classLoader) {\n        URLClassLoader cl = new URLClassLoader(urls, classLoader);\n        String resource = className.replace('.', '/') + \".class\";\n        InputStream is = null;\n        try {\n            URL url = cl.getResource(resource);\n            if (url == null) {\n                throw new RuntimeException(\"Class Resource not found for \" + resource);\n            }\n            is = url.openStream();\n            byte[] classBytes = InputStreamTransform.readBytes(is);\n            return classBytes;\n        } catch (IOException e) {\n            throw new RuntimeException(\"IOException reading bytes for \" + className, e);\n        } finally {\n            if (is != null) {\n                try {\n                    is.close();\n                } catch (IOException e) {\n                    throw new RuntimeException(\"Error closing InputStream for \" + className, e);\n                }\n            }\n        }\n    }\n", "code2": "    public static void copyFile(File src, File dest) throws IOException {\n        FileInputStream fis = new FileInputStream(src);\n        FileOutputStream fos = new FileOutputStream(dest);\n        java.nio.channels.FileChannel channelSrc = fis.getChannel();\n        java.nio.channels.FileChannel channelDest = fos.getChannel();\n        channelSrc.transferTo(0, channelSrc.size(), channelDest);\n        fis.close();\n        fos.close();\n    }\n", "label": 0, "substitutes": {"getClassBytes": ["readClassbytes", "readClassBytes", "getMethodClass", "getMethodByte", "getclassBytes", "getClassByte", "getMethodbytes", "getclassClass", "readclassBytes", "getMethodBytes", "getClassClass", "getclassbytes", "readclassbytes", "readClassClass", "getclassByte", "readclassByte", "readclassClass", "getClassbytes", "readClassByte"], "className": ["ClassNames", "certName", " classname", " classWeb", "CLASSWeb", "ClassName", "clWeb", "CLASSLabel", "classname", "CLASSname", "longName", "classStart", "classLabel", "Classname", "classClass", " classNAME", "clname", "ClassNAME", "longStart", "clLabel", " classStart", " classNames", "CLASSName", "entityName", "longNAME", " classLabel", "certNames", "certStart", "entityNames", "ClassClass", "classWeb", "longname", "certNAME", "clName", "classNAME", "entityNAME", "entityClass", " classClass", "longNames", "classNames"], "classLoader": ["ClassReader", "ClassName", " classPath", " ClassPath", "classPath", "ClassLoader", " Classloader", "classReader", "classloader", "Classloader", " classReader", "fileName", "fileReader", "fileLoader", "ClassPath", " ClassLoader", "filePath", " classloader", " ClassName"], "cl": ["CL", "sl", "gl", "scl", "fl", "ld", "nl", "Cl", "kl", "cu", "lf", "class", "ctrl", "lc", "ocl", " CL", "pl", "ll", "sol", "ssl", "cc", " pl", "cle", "cf", " Cl", "sc", "ipl", "loc", "ch", "acl", "lim", "hl", "rl", "l", "cal", "co", "lb"], "resource": ["local", "resources", "path", "address", "subject", "description", "string", "file", "ce", "property", "channel", "component", "remote", "hash", "Resource", "row", "phrase", "route", "attribute", "from", "filename", "re", "r", "range", "query", "pattern", "res", "title", "release", "ge", "uri", "role", "prefix", "message", "core", "reference", "name", "source", "pointer", "image", "region", "key", "directory", "state", "ace", "entry", "word"], "is": ["iss", "vs", "isl", "abs", "isa", "was", "ists", "sis", "in", "still", "ist", "ls", "mis", "ais", "iris", "mi", "si", "bits", "i", "ios", "are", "has", "ims", "bis", "fs", "dis", "es", "IS", "ms", "s", "bs", "lis", "ois", "oss", "its", "init", "isin", "ris", "sys", "im", "isf", "tis", "Is", "ins", "nis", "ip", "us", "it", "isi", "isc", "ires", "stream", "inst", "gets", "os", "iso"], "url": ["arl", "sl", "gl", "address", "val", "path", "file", "Url", "li", "abs", "str", "nl", "kl", "mail", "char", "tool", "r", "dl", "pl", "ll", "ssl", "link", "f", "uri", "rel", "URL", "job", "web", "loc", "ur", "user", "db", "impl", "cert", "ml", "hl", "bel", "http", "util", "rl", "mount", "rect", "l", "mb", "ref", "org", "lb"], "classBytes": ["ClassNames", " classValues", " classbytes", "ClassGs", "classValues", "fileBytes", "filebytes", "ClassValues", " classByte", "CLASSGs", "ClassByte", "CLASSNames", "CLASSbytes", "classbytes", "CLASSBytes", " classGs", " classNames", "classByte", "ClassBytes", "Classbytes", "fileValues", "classGs", "fileByte", "classNames"]}}
{"id1": "7948308", "id2": "10715601", "code1": "    private void getRandomGUID(boolean secure) {\n        MessageDigest md5 = null;\n        StringBuffer sbValueBeforeMD5 = new StringBuffer();\n        try {\n            md5 = MessageDigest.getInstance(\"MD5\");\n        } catch (NoSuchAlgorithmException e) {\n            logger.error(\"At RandomGUID !!!\", e);\n        }\n        try {\n            long time = System.currentTimeMillis();\n            long rand = 0;\n            if (secure) {\n                rand = mySecureRand.nextLong();\n            } else {\n                rand = myRand.nextLong();\n            }\n            sbValueBeforeMD5.append(s_id);\n            sbValueBeforeMD5.append(\":\");\n            sbValueBeforeMD5.append(Long.toString(time));\n            sbValueBeforeMD5.append(\":\");\n            sbValueBeforeMD5.append(Long.toString(rand));\n            valueBeforeMD5 = sbValueBeforeMD5.toString();\n            md5.update(valueBeforeMD5.getBytes());\n            byte[] array = md5.digest();\n            StringBuffer sb = new StringBuffer();\n            for (int j = 0; j < array.length; ++j) {\n                int b = array[j] & 0xFF;\n                if (b < 0x10) sb.append('0');\n                sb.append(Integer.toHexString(b));\n            }\n            valueAfterMD5 = sb.toString();\n        } catch (Exception e) {\n            logger.error(\"At RandomGUID !!!\", e);\n        }\n    }\n", "code2": "    public static synchronized String toSHA1(String str) {\n        Nulls.failIfNull(str, \"Cannot create an SHA1 encryption form a NULL string\");\n        try {\n            MessageDigest md;\n            md = MessageDigest.getInstance(SHA1);\n            byte[] sha1hash = new byte[40];\n            md.update(str.getBytes(ISO_CHARSET), 0, str.length());\n            sha1hash = md.digest();\n            return convertToHex(sha1hash);\n        } catch (NoSuchAlgorithmException ex) {\n            ex.printStackTrace();\n        } catch (UnsupportedEncodingException ex) {\n            ex.printStackTrace();\n        }\n        return null;\n    }\n", "label": 1, "substitutes": {"getRandomGUID": ["getRandomGuuid", "getRandUuid", "getRandGuid", "getRandomUID", "getRandomUUID", "getRandomSUID", "getRandomUuid", "getRandUID", "getRandomGuid", "getRandGid", "getRandGID", "getRandomGuID", "getRandomSid", "getRandUid", "getRandUUID", "getRandomGid", "getRandomUid", "getRandomSID", "getRandomGID", "getRandGUID", "getRandomSuid", "getRandomGuUID"], "secure": ["sec", " securely", "sr", "force", "nice", "dirty", "stable", " Secure", "service", "weak", "style", "Secure", "strong", "safe", "trust", "status", "https", "ssl", "clear", "confirmed", "security", "google", "prime", "server", "encrypted", "quiet", "active", "ie", "client", "pretty", "sync", "sys", "http", "sensitive", "domain", " insecure"], "md5": [" Md2", "MD2", " Md3", "md4", " mdle", "md6", "mdson", " MDke", " Md5", "MDle", " mdson", " MD5", "MDson", " Mdson", "sha3", " md3", "digle", "dig5", "MD5", " MD3", " md2", "sha2", " md6", "MD3", "sha6", "md2", "dig4", "MD4", "mdle", " mdke", " MD2", "dig3", "mdke", "MDke", "sha5", " md4", "md3", "MD6"], "sbValueBeforeMD5": ["sbValueBeforemd512", "sbValueBeforeHEADLE", "sbValueAtMD2", "sbValueBeforeMP5", "sbValueBeforePDody", "sbValueAfterMD2", "sbValueLikeMD55", "sbValueUnderMD2", "sbValueLikeMD5", "sbValueBeforeMC2", "sbValueBeforeMODFive", "sbValueBeforeND3", "sbValueBeforeMAC512", "sbValueBeforeMD512", "sbValueBeforeHEAD2", "sbValueLikemd2", "sbValueBeforeUM55", "sbValueBeforeMD25", "sbValueBeforemd5", "sbValueBeforeMD55", "sbValueBeforeMT2", "sbValueBeforeMDody", "sbValueBeforeDD2", "sbValueAtMAC2", "sbValueBeforeDD8", "sbValueBeforePDLE", "sbValueBeforemdPD", "sbValueAtMAC5", "sbValueBeforeMP2", "sbValueBeforeMTFive", "sbValueBeforemd2", "sbValueBeforeMD8", "sbValueBeforeMD3", "sbValueBeforeMDLE", "sbValueBeforeUM2", "sbValueBeforeMOD05", "sbValueAtMACse", "sbValueLikeMD2", "sbValueBeforeMOD5", "sbValueBeforeMDFive", "sbValueUnderMD5", "sbValueAfterMD05", "sbValueBeforeMT5", "sbValueBeforeUMPD", "sbValueAfterMDody", "sbValueAfterMD5", "sbValueBeforePD2", "sbValueAfterMD25", "sbValueBeforeMACse", "sbValueLikemd5", "sbValueBeforeDD3", "sbValueAfterMDFive", "sbValueBeforeMC5", "sbValueAfterMD8", "sbValueAfterMD3", "sbValueBeforeMDPD", "sbValueBeforeND2", "sbValueBeforePD5", "sbValueBeforeMOD25", "sbValueBeforeMAC5", "sbValueUnderMD3", "sbValueLikeMDPD", "sbValueBeforemd55", "sbValueAfterMDLE", "sbValueBeforeAMD2", "sbValueBeforeMOD2", "sbValueBeforeHEADody", "sbValueBeforeMP3", "sbValueAtMAC512", "sbValueBeforeDD5", "sbValueLikemd55", "sbValueAtMD5", "sbValueBeforeMAC2", "sbValueBeforeMD2", "sbValueBeforeMC3", "sbValueBeforeUM5", "sbValueAtMDse", "sbValueBeforeHEAD5", "sbValueBeforeMD05", "sbValueBeforeAMD25", "sbValueLikemdPD", "sbValueBeforeAMD5", "sbValueAtMD512", "sbValueBeforemdse", "sbValueBeforeND5", "sbValueBeforeMP8", "sbValueBeforeMT05", "sbValueBeforeMDse"], "time": ["system", "race", "when", "sequence", "TIME", "id", "timer", "length", "t", "start", "history", "current", "total", "runtime", "work", "age", "ts", "clock", "rate", "estamp", "duration", "times", "counter", "date", "user", "ime", "frame", "Time", "name", "tim", "today", "client", "hour", "x", "etime", "value", "top", "ty", "year", "type", "tt", "now", "timeout"], "rand": ["seed", "sample", "dr", "rid", "quant", "id", "mid", "uid", "hash", "z", "nt", "did", "msg", "nd", "frac", "sid", "inv", "gz", "gen", "r", "rev", "range", "ng", "sam", "trust", "rate", "res", "rank", "rss", "cr", "gt", "rot", "round", "serial", "rd", "init", "pid", "reg", "random", "dist", "and", "rc", "pick", "grad", "rh", "Rand", "R"], "valueBeforeMD5": ["valueBeforeDER5", "valueBeforeMD2", "valuebeforeMD3", "valueBeforeMCFive", "valuebeforeMD5", "valuebeforeMTFive", "valueAfterMD2", "valueBeforeMTFive", "valueAfterMD7", "valueAfterND2", "valueAfterND7", "valueBeforeMT5", "valueBeforeMT2", "valueBeforeMD7", "valueBeforeND3", "valueBeforeND7", "valueAfterMD3", "valueBeforeDER3", "valueBeforemd2", "valuebeforeMD2", "valueBeforeMC5", "valueBeforeND5", "valueAfterND5", "valueBeforeND2", "valueAfterND3", "valueBeforemd7", "valuebeforeMT2", "valuebeforeMT3", "valuebeforeMT5", "valueBeforeMD3", "valueBeforeMDFive", "valueBeforemd3", "valueBeforeMT3", "valuebeforeMDFive", "valueBeforeDER7", "valueBeforeMC2", "valueBeforeMC3", "valueBeforeDER2", "valueBeforemd5"], "array": ["sample", "address", "batch", "number", "binary", "var", "pair", "ash", "angle", "length", "map", "hash", "angular", "arr", "audio", "row", "arrow", "record", "attribute", "storage", "external", "range", "a", " Array", "instance", "area", "ray", "expression", "feature", "buffer", "vector", "ary", "Array", "app", "RAY", "av", "ashes", "atomic", "object", "random", "data", "our", "value", "image", "list", "response", "rays", "share", "archive", "collection"], "sb": ["sr", "sq", "pb", "lp", "sw", "nb", "bt", "bg", "rb", "ls", "kb", "ctrl", "sg", "rob", "bb", "hs", "shell", "si", "obs", "sa", "bh", "xb", "ssl", "bis", "ib", "sf", "bps", "sth", "sc", "bs", "erb", "s", "abb", "eb", "wb", "bsp", "ub", "soc", "sv", "bf", "zb", "cb", "bp", "ob", "gc", "gb", "sh", "SB", "lb"], "j": ["js", "ji", "v", "jj", "dj", "aj", "str", "by", "J", "k", "obj", "z", "msg", "ja", "_", "index", "n", "i", "kj", "jo", "m", "je", "oj", "job", "br", "ct", "yy", "jp", "jump", "jack", "q", "jit", "ind", "jc", "ij", "att", "uj", "key", "jl", "json", "g", "it", "fr", "bj", "state", "y", "__", "bot"], "b": ["d", "ba", "v", "bound", "bar", "nb", "bt", "bg", "be", "k", "bu", "rb", "ab", "bb", "i", "ib", "bis", "B", "fb", "br", "bs", "db", "eb", "u", "bd", "bf", "bp", "cb", "bi", "mb", "beta", "gb", "y", "bc"], "valueAfterMD5": ["valueAftermd6", "valueBeforeMD2", "valueAfterMT4", "valueAfterMD2", "valueAftermd5", "valueAftermd2", "valueBeforeMD6", "valueAfterMT6", "valueAfterMT2", "valueAfterMD4", "valueAfterMT5", "valueAfterMD6", "valueAftermd4", "valueBeforeMD4"]}}
{"id1": "1769771", "id2": "3945236", "code1": "    private void copyFile(File in, File out) throws IOException {\n        FileChannel inChannel = new FileInputStream(in).getChannel();\n        FileChannel outChannel = new FileOutputStream(out).getChannel();\n        try {\n            inChannel.transferTo(0, inChannel.size(), outChannel);\n        } catch (IOException e) {\n            throw e;\n        } finally {\n            if (inChannel != null) inChannel.close();\n            if (outChannel != null) outChannel.close();\n        }\n    }\n", "code2": "    public static void hash(String... plainTexts) {\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            for (String plainText : plainTexts) md.update(plainText.getBytes());\n            byte b[] = md.digest();\n            int i;\n            StringBuffer buf = new StringBuffer(\"\");\n            for (int offset = 0; offset < b.length; offset++) {\n                i = b[offset];\n                if (i < 0) i += 256;\n                if (i < 16) buf.append(\"0\");\n                buf.append(Integer.toHexString(i));\n            }\n            String str = buf.toString();\n            System.out.println(\"result: \" + buf.toString());\n            System.out.println(\"result: \" + buf.toString().substring(8, 24));\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        }\n    }\n", "label": 0, "substitutes": {"copyFile": [" copyStream", "copyStream", " copyFiles", "CopyFiles", "copyLine", " CopyLine", "CopyLine", " copyLine", " CopyFile", "copyFiles", "CopyFile", " CopyStream", " CopyFiles", "CopyStream"], "in": ["ic", "en", "io", "b", "old", "inf", "is", "up", "cin", "from", "r", "ini", "IN", "inc", "i", "inner", "on", "din", "init", " input", "input", "isin", "ind", "mm", "gin", "source", "In", "el", "ins", "rin", "l", "bin", "inn"], "out": ["err", "v", "serv", "op", "at", "log", "file", "p", "io", "help", "b", "t", "po", "update", "up", "nt", "ot", "msg", "output", "c", "ex", "n", "to", "res", "gt", "o", "net", "s", "OUT", "Out", "l", "it", "ou", "outs", "os", "w"], "inChannel": ["inConnection", " inButton", "InChan", " inConnection", "outChan", "insideChannel", " inCase", "dinchannel", "innCase", "ainChannel", "ainCategory", "insideScope", "insideClient", "innChannel", "inCommand", "outConnection", " inchannel", "dinChan", "sinChannel", "sinButton", "inCategory", "inRoom", " inScope", "inCase", "dinConnection", "innClient", "inButton", " inRoom", "cinRoom", "cinCommand", "sinClient", " inChan", "sinCommand", "insideCategory", "inClient", "intchannel", "intChannel", "ainScope", "outchannel", "innButton", "inChan", "inchannel", "inScope", "ainClient", "intCommand", "sinCase", "InChannel", " inCommand", "dinChannel", "cinChannel", "Inchannel", "InCommand", "intChan", " inCategory", " inClient", "sinRoom"], "outChannel": ["blockChan", "outChan", " outMany", "outputChannel", "neMember", "inMember", "neChan", " outGate", "neSection", "neChannel", "parentChan", "blockGate", "outCh", "cnChan", "cnChannel", "cnManager", "outMember", " outChan", "outGate", "inCh", "outputchannel", "blockChannel", "aosSection", "outSection", "aosMember", "outMany", " outCh", "outchannel", "parentChannel", "inChan", "inchannel", "outputCh", " outManager", "outputChan", "inSection", "blockMany", "aosChan", "outputManager", "parentMany", " outchannel", "parentGate", "outManager", "aosChannel"]}}
{"id1": "14878593", "id2": "16142024", "code1": "    public void hyperlinkUpdate(HyperlinkEvent e) {\n        if (e.getEventType() == EventType.ACTIVATED) {\n            try {\n                URL url = e.getURL();\n                InputStream stream = url.openStream();\n                try {\n                    StringWriter writer = new StringWriter();\n                    IOUtils.copy(stream, writer, \"UTF-8\");\n                    JEditorPane editor = new JEditorPane(\"text/plain\", writer.toString());\n                    editor.setEditable(false);\n                    editor.setBackground(Color.WHITE);\n                    editor.setCaretPosition(0);\n                    editor.setPreferredSize(new Dimension(600, 400));\n                    String name = url.toString();\n                    name = name.substring(name.lastIndexOf('/') + 1);\n                    JDialog dialog = new JDialog(this, \"\u5185\u5bb9\u89e3\u6790: \" + name);\n                    dialog.add(new JScrollPane(editor));\n                    dialog.pack();\n                    dialog.setVisible(true);\n                } finally {\n                    stream.close();\n                }\n            } catch (IOException exception) {\n                exception.printStackTrace();\n            }\n        }\n    }\n", "code2": "    private static final void copyFile(File srcFile, File destDir, byte[] buffer) {\n        try {\n            File destFile = new File(destDir, srcFile.getName());\n            InputStream in = new FileInputStream(srcFile);\n            OutputStream out = new FileOutputStream(destFile);\n            int bytesRead;\n            while ((bytesRead = in.read(buffer)) != -1) out.write(buffer, 0, bytesRead);\n            in.close();\n            out.close();\n        } catch (IOException ioe) {\n            System.err.println(\"Couldn't copy file '\" + srcFile + \"' to directory '\" + destDir + \"'\");\n        }\n    }\n", "label": 1, "substitutes": {"hyperlinkUpdate": ["hyperLinkUpdate", " hyperlinkupdate", "hyperLinkUpdated", "hyperloadClick", "hyperloadUpdated", "hyperLinkupdate", " hyperLinkUpdate", " hyperlinkClick", "hyperlineUpdated", "hyperlineClick", "hyperLinkClick", "hyperlineUpdate", "hyperloadupdate", " hyperLinkUpdated", " hyperLinkupdate", "hyperlinkupdate", " hyperlinkUpdated", "hyperlineupdate", "hyperlinkUpdated", "hyperlinkClick", "hyperloadUpdate", " hyperLinkClick"], "e": ["d", "ev", "err", "ae", "v", "h", "et", "en", "p", "ce", "E", "oe", "b", "t", "event", "ame", "eg", "te", "eeee", "eur", "esc", "ed", "se", "ee", "re", "r", "c", "fe", "n", "ex", "a", "m", "f", "ge", "o", "es", "s", "Event", "ue", "ie", "u", "eu", "one", "el", "l", "ef", "it", "ent", "ve", "ec", "de", "er", "w", "ea"], "url": ["sl", "path", "address", "gl", "lr", "log", "string", "Url", "term", "str", "nl", "id", "mail", "resource", "char", "browser", "ls", "filename", "re", "r", "ll", "pl", "host", "ssl", "html", "location", "link", "f", "uri", "rel", "base", "URL", "job", "web", "buffer", "form", "loc", "ur", "hl", "bel", "http", "rl", "addr", "mount", "el", "l", "ob", "json", "this", "sql"], "stream": ["sl", "path", "sample", "file", "REAM", "str", "sw", "clean", "channel", "Stream", "transform", "resource", "in", "context", "row", "stack", "open", "reader", "pipe", "view", "secure", "res", "zip", "feed", "present", "console", "down", "iterator", "iter", "form", "buffer", "message", "out", "user", "input", "download", "read", "upload", "http", "sync", "data", "our", "source", "ream", "image", "mount", "steam", "enc", "window", "pool", "body"], "writer": ["master", "local", "player", "string", "wrote", "file", "riter", "io", "browser", "loader", "wright", "ner", "creator", "output", "WR", "storage", "reader", "maker", "writ", "manager", "widget", "to", "null", "write", "worker", "unsigned", "console", "builder", "writers", "buffer", "draw", "client", "caster", "liner", "document", "Writer", "writing", "window", "wire", "white", "er", "written", "w", "word"], "editor": ["settings", "player", "description", "definition", "term", "cer", "oder", "browser", "loader", "author", "edited", "maker", "external", "button", "reader", "offer", "owner", "widget", "storage", "view", "instance", "paper", "code", "area", "auto", "language", "accept", "builder", "options", "Editor", "license", "server", "article", "buffer", "insert", "vector", "enter", "older", "init", "action", "core", "upload", "document", "video", "liner", "media", "over", "application", "answer", "folder", "actor", "or", "key", "finder", "ui", "order", "translation", "option", "er", "edit", "EDIT", "entry", "creator"], "name": ["local", "text", "system", "path", "description", "string", "file", "term", "str", "nl", "id", "resource", "length", "part", "ame", "alpha", "position", "family", "no", "nm", "filename", "names", "NAME", "null", "named", "n", "label", "title", "code", "base", "normal", "size", "prefix", "format", "root", "lower", "init", "all", "tree", "Name", "comment", "source", "me", "one", "key", "version", "info", "order", "type", "word"], "dialog": ["Dialch", "doiz", "dialresh", "initialog", "choog", "Dialop", "dialch", "doect", "conog", "dlogue", "conresh", "Dialresh", "doog", "tdog", "dlop", "Dialog", "dialogs", "Dialose", "dlag", "choogs", "dialect", "compog", "initialag", "compresh", "initialOG", "redect", "rediz", "dlogs", "conch", "Dialag", "tdect", "DialOG", "compoder", "dialag", "dialOG", "redg", "Dialogs", "dialoder", "tdg", "dialose", "conoder", "redog", "dlose", "choogue", "dog", "compch", "initialose", "dialg", "dialop", "choop", "dialogue", "tdiz", "dlog", "dlOG", "Dialoder", "dializ", "Dialogue"]}}
{"id1": "14567939", "id2": "8921716", "code1": "    private static byte[] baseHash(String name, String password) {\n        try {\n            MessageDigest digest = MessageDigest.getInstance(\"MD5\");\n            digest.reset();\n            digest.update(name.toLowerCase().getBytes());\n            digest.update(password.getBytes());\n            return digest.digest();\n        } catch (NoSuchAlgorithmException ex) {\n            d(\"MD5 algorithm not found!\");\n            throw new RuntimeException(\"MD5 algorithm not found! Unable to authenticate\");\n        }\n    }\n", "code2": "    public static String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n        MessageDigest md;\n        md = MessageDigest.getInstance(\"MD5\");\n        byte[] md5hash = new byte[32];\n        md.update(text.getBytes(\"iso-8859-1\"), 0, text.length());\n        md5hash = md.digest();\n        return convertToHex(md5hash);\n    }\n", "label": 1, "substitutes": {"baseHash": ["Basehash", "basichash", "BaseHash", "baseSign", "basicSign", "basehash", " baseSign", " baseKey", "BaseSign", "basicKey", "basicHash", "baseKey", " basehash", "BaseKey"], "name": ["local", "search", "address", "term", "id", "parent", "ame", "hash", "family", "current", "run", "username", "names", "NAME", "admin", "named", "n", "alias", "title", "person", "initial", "prefix", "table", "ident", "user", "create", "Name", "common", "john", "key", "login", "default", "domain", "order", "info", "account", "author", "word"], "password": ["secret", "picture", "description", "restricted", "hash", "remember", "phrase", "Password", "shadow", "auth", "username", "attribute", "session", "crypt", "padding", "prefix", "message", "command", "database", "pass", "user", "sword", "reset", "value", "key", "hello", "login", "token", "wd", "entry", "word"], "digest": [" Digester", " digend", "Digend", "mdested", "decester", "digested", "Diggest", "Digse", "Digested", "descested", "mdest", "displayum", "DigEST", "dest", "descest", "mdEST", "Digest", "digum", "mdester", "displayEST", "diger", "dgest", "Diger", "displayester", " digested", " Digest", "Digester", " diger", "digEST", "mdgest", " Diger", " digester", "diggest", "decgest", "decest", " Digend", "dested", "dEST", " digum", "Digum", "descester", "descse", "digse", "displayest", "descgest", "displayested", "mdse", "digester", "decested", "digend"]}}
{"id1": "11562173", "id2": "7911686", "code1": "    private void checkInputStream(InputStream in, byte[] cmp, boolean all) throws IOException {\n        ByteArrayOutputStream stream = new ByteArrayOutputStream();\n        IOUtils.copy(in, stream);\n        byte[] out = stream.toByteArray();\n        if (all) assertEquals(cmp.length, out.length);\n        for (int i = 0; i < cmp.length; i++) assertEquals(cmp[i], out[i]);\n    }\n", "code2": "    public static void copyFile(File source, File destination) throws IOException {\n        FileChannel in = null;\n        FileChannel out = null;\n        try {\n            in = new FileInputStream(source).getChannel();\n            out = new FileOutputStream(destination).getChannel();\n            in.transferTo(0, in.size(), out);\n        } finally {\n            if (in != null) in.close();\n            if (out != null) out.close();\n        }\n    }\n", "label": 1, "substitutes": {"checkInputStream": ["assertOutputChannel", "checkAudioChannel", "checkOutputChannel", "checkAudioFile", "checkContentStream", "checkInputstream", "checkInputFile", "assertInputStream", "checkContentFile", "checkContentstream", "checkOutputstream", "checkAudioStream", "checkOutputFile", "assertOutputStream", "checkAudiostream", "checkInputChannel", "assertOutputFile", "assertInputstream", "assertOutputstream", "assertInputFile", "checkContentChannel", "checkOutputStream", "assertInputChannel"], "in": ["mc", "file", "en", "io", "b", "is", "old", "st", "up", "al", "cin", "from", "c", "ex", "n", "inc", "IN", "inner", "on", "o", "s", "din", "get", "raw", "doc", "input", "mm", "ind", "gin", "source", "cont", "In", "or", "ins", "l", "it", "con", "inn"], "cmp": ["cv", "mc", "eq", "match", "different", "vp", "cu", "conv", "msg", "compl", "dict", "ctrl", "pres", "comm", "cp", "cod", "c", "ctx", "good", "omp", "cs", "cc", "csv", "rel", "desc", "com", "comp", "result", "tmp", "cn", "ck", "diff", "ch", "cd", "same", "qual", "mp", "cb", "Comp", "pkg", "coll", "equal", "tc", "cmd", "cond", "resp", "par", "co"], "all": ["alph", "first", "any", "All", "always", "only", "test", "alpha", "al", "total", "attribute", "also", "other", "call", "bl", "null", "ll", "a", "ssl", "m", "kill", "valid", "oll", "each", "app", "active", "none", " ALL", "and", "list", "ALL", "l", "empty", "equal", "default", "both", "full"], "stream": ["local", "system", "sample", "REAM", "sw", "parent", "ost", "clean", "store", "Stream", "channel", "st", "event", "context", "service", "row", "stack", "output", "pipe", "network", "ST", "view", "time", "port", "zip", "host", "console", "engine", "form", "screen", "buffer", "dd", "sudo", "tmp", "draw", "each", "input", "upload", "sign", "Steam", "our", "ream", "socket", "mount", "shape", "window", "sync", "collection", "se"], "out": ["v", "serv", "batch", "at", "log", "not", "des", "p", "str", "io", "help", "clean", "b", "t", "conv", "obj", "up", "ot", "aos", "output", "external", "to", "n", "good", "check", "ex", "res", "outer", "o", "net", "raw", "tmp", "cn", "exp", "sys", "data", "OUT", "list", "Out", "array", "pkg", "it", "ent", "ne", "outs", "con"], "i": ["ti", "v", "ji", "I", "batch", "perm", "ic", "zi", "li", "id", "gi", "point", "is", "di", "ki", "ii", "z", "\u0438", "j", "span", "phi", "ri", "mi", "si", "sym", "index", "ini", "n", "iu", "pi", "ci", "m", "ims", "cli", "uri", "iter", "ms", "multi", "q", "init", "xi", "ind", "gu", "u", "client", "ei", "ij", "x", "qi", "me", "key", "chain", "ai", "ix", "vi", "sim", "us", "it", "bi", "hi", "ui", "info", "json", "y"]}}
{"id1": "3330775", "id2": "10547671", "code1": "    public static JSONObject getJSONData(String url) throws JSONException {\n        JSONObject jObject = null;\n        InputStream data = null;\n        DefaultHttpClient httpClient = new DefaultHttpClient();\n        URI uri;\n        try {\n            uri = new URI(url);\n            HttpGet httpGet = new HttpGet(uri);\n            HttpResponse response = httpClient.execute(httpGet);\n            data = response.getEntity().getContent();\n            String line;\n            StringBuilder builder = new StringBuilder();\n            BufferedReader reader;\n            reader = new BufferedReader(new InputStreamReader(data), 8192);\n            while ((line = reader.readLine()) != null) builder.append(line);\n            reader.close();\n            jObject = (JSONObject) new JSONTokener(builder.toString()).nextValue();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return jObject;\n    }\n", "code2": "    private String retrieveTemplate() throws Exception {\n        if (cachedTemplate == null) {\n            final URL url = new URL(blogEditor.getBlogInfo().getBlogUrl());\n            final BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n            final StringBuilder result = new StringBuilder();\n            String line;\n            while ((line = in.readLine()) != null) {\n                result.append(line);\n            }\n            in.close();\n            cachedTemplate = result.toString();\n        }\n        return cachedTemplate;\n    }\n", "label": 1, "substitutes": {"getJSONData": ["getJContent", "getJSONResponse", "getjsonContent", "loadJSONObject", "getJObject", "loadJSONResponse", "getBasicObject", "getJSONContent", "loadJSONData", "loadjsonObject", "getJSONObject", "loadJSONContent", "loadjsonResponse", "getJResponse", "loadjsonContent", "getjsonData", "getjsonResponse", "loadjsonData", "getBasicResponse", "getBasicData", "getJData", "getjsonObject", "getBasicContent"], "url": ["sl", "path", "item", "address", "string", "file", "Url", "ret", "log", "str", "id", "nl", "b", "remote", "ls", "href", "dl", "i", "ll", "pattern", "pl", "host", "ssl", "link", "location", "rel", "base", "URL", "web", "loc", "result", "ur", "name", "lim", "util", "http", "addr", "l", "json", "ul"], "jObject": ["objObject", "jsonData", "jsonobject", "jpAnonymous", "jpobject", " jDocument", " jObj", "jData", "reportData", "jAnonymous", "jsonNull", "jpNull", "jpObject", "reportDocument", "reportObject", "jsonObject", " jNull", "jDocument", " jAnonymous", "jObj", "jsonAnonymous", "jNull", "jsonObj", "jobject", " jData", "reportObj", "jsonDocument", "objDocument", "objObj", "objData", " jobject"], "data": ["text", "sample", "bytes", "trans", "results", "ata", "dat", "sequence", "string", "resource", "aw", "no", "output", "content", "mu", "block", "session", "ad", "area", "feed", "html", "api", "buffer", "message", "result", "raw", "input", "name", "media", "error", "source", "done", "image", "details", "value", "or", "DATA", "window", "cache", "json", "ne", "body", "dev", "stream", "size"], "httpClient": [" httpclient", " httpBuilder", "httpsBuilder", "httpBuilder", "httpsclient", "httpControl", "ttpContext", "httpsClient", "httpContext", "ttpClient", "httpsContext", "ttpclient", "HttpBuilder", "HttpControl", " httpControl", "ttpGet", "HttpGet", "httpclient", "Httpclient", "httpsControl", "HttpContext", "HttpClient", "httpsGet"], "uri": ["du", "path", "address", " ur", "subject", "Url", "term", "hub", "hu", "resource", "uni", "qu", "char", "point", "remote", "phi", "manager", "ri", "cp", "range", "i", "connection", "pi", "URI", "ilo", "host", "link", "location", " URI", "base", "api", "URL", "server", "ur", "lu", "via", "client", "u", "util", "iri", "http", "qi", "source", "uu", "ip", "directory", "hi", "ui", "domain", "ref", "nu", "origin", "archive"], "httpGet": ["hGET", "HTTPQuery", "httpPut", " httpGET", "hGate", "htmlGET", "httpQuery", "httpGate", " httpPut", "htmlGet", "hGet", "HTTPGet", " httpQuery", "HTTPPut", "htmlQuery", "htmlPut", "HTTPGET", "httpGET", "htmlGate", " httpGate", "hQuery"], "response": ["description", "respond", "resource", "remote", "onse", "opening", "success", "context", "service", "resolution", "still", "Response", "output", "block", "connection", "status", "server", "resp", "result", "message", "page", "client", "document", "frame", "object", "successful", "http", "answer", "application", "socket", "report", "image", "hello", "version", "yes", "request", "pos", "json", "next", "reply", "body"], "line": ["text", "ln", "sample", "cell", "number", "log", "file", "sequence", "field", "nl", "inline", "point", "print", "part", "e", "row", "stroke", "phrase", "len", "block", "ice", " Line", "label", "code", "status", "link", "page", "message", "lin", "entity", "column", "user", "frame", "name", "liner", "comment", "error", "ine", "online", "eline", "key", "chain", "header", "Line", "l", "LINE", "next", "entry", "word"], "builder": ["build", "black", "ener", "utils", "number", "ender", "alph", "builders", "atter", "bar", "by", "eng", " builders", "b", "length", "oster", "join", "loader", "ward", "board", "row", "control", "library", "inner", "upper", "built", "language", "bean", "sf", "base", "fb", "trace", "building", "buffer", "web", "sb", "message", "lower", "lu", "writer", "parser", "name", "BU", "operator", "Builder", "der", "uf", "order", "full", "er"], "reader": ["river", "where", "dr", " readers", "field", "ger", " writer", "wrapper", " read", "roller", "oder", "e", "loader", "per", "ner", "row", "Reader", "record", "mr", "ri", "r", "bo", "range", "ro", "inner", "worker", "rar", "runner", "iterator", "iter", "buffer", "message", "dd", "older", "writer", "dra", "read", "parser", "readable", "ator", "util", "reading", "rl", "driver", "peer", "er", "stream", "handler", "entry"]}}
{"id1": "10451698", "id2": "20310134", "code1": "    private void copy(File source, File destinationDirectory) throws IOException {\n        if (source.isDirectory()) {\n            File newDir = new File(destinationDirectory, source.getName());\n            newDir.mkdir();\n            File[] children = source.listFiles();\n            for (int i = 0; i < children.length; i++) {\n                if (children[i].getName().equals(\".svn\")) {\n                    continue;\n                }\n                copy(children[i], newDir);\n            }\n        } else {\n            File newFile = new File(destinationDirectory, source.getName());\n            if (newFile.exists() && source.lastModified() == newFile.lastModified()) {\n                return;\n            }\n            FileOutputStream output = new FileOutputStream(newFile);\n            FileInputStream input = new FileInputStream(source);\n            byte[] buff = new byte[2048];\n            int read = 0;\n            while ((read = input.read(buff)) > 0) {\n                output.write(buff, 0, read);\n            }\n            output.flush();\n            output.close();\n            input.close();\n        }\n    }\n", "code2": "    public static void copyFile(File in, File out) throws IOException {\n        FileChannel inChannel = new FileInputStream(in).getChannel();\n        FileChannel outChannel = new FileOutputStream(out).getChannel();\n        try {\n            inChannel.transferTo(0, inChannel.size(), outChannel);\n        } catch (IOException e) {\n            throw e;\n        } finally {\n            if (inChannel != null) inChannel.close();\n            if (outChannel != null) outChannel.close();\n        }\n    }\n", "label": 1, "substitutes": {"copy": ["perm", "proxy", "file", "clone", "delete", "Cop", "cat", "pixel", "clip", "map", "cop", "export", "cp", "write", "zip", "link", "split", "crop", "slice", "paste", "core", "create", "Copy", "download", "transfer", "share", "sync", "remove", "move", "gc", "continue", "co", "archive", "opy"], "source": ["local", "subject", "force", "file", "site", "parent", "sin", "ce", "resource", "src", "store", "remote", "start", "in", "class", "service", "SOURCE", "current", "from", "style", "target", "shell", "original", "index", "null", "query", "ource", "scope", "inner", "secure", "instance", "status", "sit", "base", "config", "note", "size", "table", "Source", "sp", "get", "raw", "init", "sql", "none", "create", "ie", "name", "template", "spec", "http", "image", "details", "use", "empty", "cache", "directory", "unit", "body", "origin", "space", "entry", "se"], "destinationDirectory": ["identinatorLocation", "destinationsInternal", "destineDirectory", " destationFolder", "identinationDirectory", "destinationsLocation", "destinateFolder", " destinationApplication", "destinationsDir", "destarationLocation", "destinatorLocation", "identinatorInternal", "destinateApplication", " destationApplication", "destinationFolder", "destmentDirectory", "identinationLocation", "destinationLocation", "targetinationsdirectory", "targetinationsDir", "destationFolder", "destineFolder", "targetinationDirectory", " destationdirectory", "destarationDirectory", "destationdirectory", "destationDirectory", "destarationInternal", "destinateDirectory", "destinationsFolder", "destinedirectory", "destineApplication", "destinationsDirectory", "targetinationDir", "targetinationsDirectory", "targetinationdirectory", "identinationInternal", "destinatorInternal", "destinatorDirectory", " destationDirectory", "destinationdirectory", "targetinationFolder", "destmentFolder", " destinationFolder", "destmentDir", "targetinationsFolder", "destmentdirectory", "destinationApplication", " destinationdirectory", "destationApplication", "destinationInternal", "destinationDir", "identinatorDirectory", "destinationsdirectory", "destinatedirectory"], "newDir": ["newDirectory", "newsDirectory", "newsDir", "newsdir", " newDirectory", "NewFile", "newRel", "nextDir", "nextRel", "NewFolder", "NewDirectory", "Newdir", "nextdir", " newFolder", "NewRel", "nextFile", "newsFolder", "newdir", "NewDir", "newsFile", "newFolder", " newRel", " newdir"], "children": ["resources", "nil", "members", "follow", "related", "when", "packages", "objects", "modules", "groups", "child", "ids", "ls", "pres", "blocks", "ren", "reports", "users", "links", "names", "parents", "jobs", "these", "images", "pages", "may", "Children", "projects", "his", "gc", "ports", "times", "desc", "unknown", "many", "files", "each", "stories", "its", "all", "ml", "relations", "services", "kids", "lines", "items", "cont", "keys", "details", "uploads", "sub", "cache", "apps", "classes", "bc"], "i": ["ti", "ji", "I", "batch", "ic", "iq", "li", "id", "gi", "my", "point", "io", "is", "di", "t", "ki", "ii", "remote", "in", "j", "span", "you", "phi", "oi", "ri", "mi", "si", "index", "ex", "ini", "iu", "pi", "ci", "m", "ims", "ski", "base", "iter", "ms", "multi", "q", "init", "xi", "ie", "gu", "client", "u", "ij", "x", "me", "im", "qi", "key", "uu", "chain", "ai", "ix", "sim", "ip", "us", "g", "hi", "ui", "bi", "um", "json", "it", "info", "y"], "newFile": ["newsfile", "newsDir", "ewLe", "ewFile", "NewFile", "nextfile", "NewLe", " newfile", "nextDir", "newsTh", " newGlobal", " newSourceFile", "NewTh", "Newfile", "newSourceFile", "goodSourceFile", "nextLe", "goodFile", "goodfile", "NewGlobal", "newfile", "goodDir", "ewfile", "createfile", "createDir", "newGlobal", "NEWfile", "ewDir", "nextFile", "newLe", "newTh", "createFile", "NewDir", "NEWDir", "newsFile", "createSourceFile", "NEWTh", "newsGlobal", "NEWFile"], "output": ["text", "Output", "batch", "put", "monitor", "file", "parent", "io", "print", "update", "position", "internal", "success", "cut", "current", "export", "open", "network", "admin", "block", "connection", "write", "ilo", "auto", "console", "outer", "config", "web", "net", "buffer", "result", "format", "out", "enabled", "message", "connect", "blue", "writer", "exit", "document", "pretty", "client", "object", "four", "online", "response", "next", "body", "stream", "display"], "input": ["local", "op", "ic", "back", "io", "before", "inf", "Input", "internal", "in", "start", "child", "ink", "current", "from", "open", "storage", "reader", "inc", "inner", "unsigned", "feed", "initial", "insert", "iter", "form", "buffer", "out", "get", "ahead", "active", "init", "raw", "upload", "error", "add", "image", "exec", "rc", "ip", "it", "info", "operator"], "buff": ["text", "xx", "bed", "black", "bytes", "qq", "batch", "pb", "bound", "txt", "cat", "nb", "b", "old", "bg", "printf", "msg", "nd", "bb", " buf", "bo", "bl", "ff", "uff", "box", "mem", "img", "fb", "seq", "buffer", "sb", "bs", "comp", "ch", "eb", "ind", "tab", "data", "Buff", "bf", "cb", "uf", "hold", "mb", "cmd", "bin", "buf", "tt", "gb", "xff", "cond"], "read": ["text", " count", "d", "send", "en", "height", "str", "print", "before", "length", "old", "count", "t", "start", "bind", "test", "in", " write", "ink", "select", "skip", "run", "len", "index", "check", "query", "mem", "write", "tell", "like", "feed", "wait", "config", "iter", "set", "buffer", "end", "READ", "get", "q", "reads", "each", "raw", "push", "ind", "seek", "readable", "load", "reading", "give", "add", "and", "Read", "ready", "hello", "need", "handle", "hold", " Read", "stream", "find", "size"]}}
{"id1": "20181656", "id2": "13657103", "code1": "    private int[] sortRows(int[] rows) {\n        for (int i = 0; i < rows.length; i++) {\n            for (int j = 0; j < rows.length - 1; j++) {\n                if (rows[j] > rows[j + 1]) {\n                    int temp = rows[j];\n                    rows[j] = rows[j + 1];\n                    rows[j + 1] = temp;\n                }\n            }\n        }\n        return rows;\n    }\n", "code2": "    private void forBundle(BundleManipulator manip) {\n        ByteArrayOutputStream bout = null;\n        try {\n            bout = new ByteArrayOutputStream();\n            ZipOutputStream zout = new ZipOutputStream(bout);\n            Bundle bundle = getBundle();\n            Enumeration<URL> files = bundle.findEntries(\"/\", \"*.vm\", false);\n            if (files != null) {\n                while (files.hasMoreElements()) {\n                    URL url = files.nextElement();\n                    String name = url.getFile();\n                    if (name.startsWith(\"/\")) {\n                        name = name.substring(1);\n                    }\n                    if (manip.includeEntry(name)) {\n                        zout.putNextEntry(new ZipEntry(name));\n                        IOUtils.copy(url.openStream(), zout);\n                    }\n                }\n            }\n            manip.finish(bundle, zout);\n            Manifest mf = new Manifest(bundle.getEntry(\"META-INF/MANIFEST.MF\").openStream());\n            zout.putNextEntry(new ZipEntry(\"META-INF/MANIFEST.MF\"));\n            mf.write(zout);\n            zout.close();\n            File tmpFile = File.createTempFile(TEMPLATES_SYMBOLIC_NAME, \".jar\");\n            FileUtils.writeByteArrayToFile(tmpFile, bout.toByteArray());\n            if (pluginAccessor.getPlugin(TEMPLATES_SYMBOLIC_NAME) != null) {\n                pluginController.uninstall(pluginAccessor.getPlugin(TEMPLATES_SYMBOLIC_NAME));\n            } else if (pluginAccessor.getPlugin(TEMPLATES_PLUGIN_KEY) != null) {\n                pluginController.uninstall(pluginAccessor.getPlugin(TEMPLATES_PLUGIN_KEY));\n            }\n            pluginController.installPlugin(new JarPluginArtifact(tmpFile));\n            ServiceReference ref = bundleContext.getServiceReference(PackageAdmin.class.getName());\n            ((PackageAdmin) bundleContext.getService(ref)).refreshPackages(null);\n            tmpFile.delete();\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            IOUtils.closeQuietly(bout);\n        }\n    }\n", "label": 0, "substitutes": {"sortRows": ["sortDords", "sortRrows", "sortDues", "sortRecords", " sortLues", "sortRecrows", " sortRrows", "sortLues", " sortLords", " sortLrows", "sortRecows", "sortLows", " sortRords", "sortRords", "sortRues", "sortLords", " sortLows", " sortRues", "sortRecues", "sortLrows", "sortDrows", "sortDows"], "rows": ["resources", "forms", "members", "results", "abs", "reports", "rs", "users", "names", "rown", "rates", "dates", "ports", "ros", "frames", "rices", "orts", "list", "ins", "tracks", "cells", "packages", "vs", "ges", "modules", "groups", "arr", "blocks", "links", "stats", "projects", "ms", "ries", "bs", "series", "raw", "relations", "data", "ints", "months", "heads", "checks", "rooms", "outs", "roots", "tests", "terms", "history", "xs", "ows", "orders", "headers", "images", "res", "ards", "workers", "models", "files", "ris", "posts", "lines", "views", "keys", "errors", "types", "values", "sheets", "ids", "row", "ls", "fields", "cases", "uds", "pages", "ues", "maps", "changes", "events", "items", "rules", "issues", "runs", "ods", "docs"], "i": ["ti", "ji", "v", "ic", "zi", "p", "li", "gi", "io", "id", "is", "di", "e", "ki", "ii", "in", "phi", "ri", "mi", "si", "ini", "iu", "pi", "ci", "m", "ar", "out", "q", "init", "xi", "ie", "ei", "u", "ai", "ix", "ip", "it", "bi", "g", "ui", "hi", "ori", "us", "ia"], "j": ["err", "js", "ji", "v", "ret", "jj", "dj", "aj", "by", "my", "uni", "b", "k", "J", "obj", "e", "z", "jet", "di", "ja", "adj", "other", "rem", "si", "kid", "kj", "son", "jo", "m", "je", "o", "oj", "job", "br", "rel", "note", "jump", "s", "out", "q", "og", "req", "user", "jit", "jc", "u", "jac", "ij", "x", "pr", "im", "uj", "jl", "ix", "sim", "l", "json", "g", "it", "bj", "next", "state", "fr", "er", "last", "y", "jp", "bot"], "temp": ["fake", "mint", "local", "cell", "perm", "dat", "cum", "txt", "term", "variable", "orig", "mod", "clean", "test", "level", "tem", "fac", "t", "vt", "current", "const", "null", "Temp", "mem", "status", "EMP", "pre", "base", "buffer", "result", "tmp", "kw", "template", "tim", "alt", "mp", "tr", "tc", "porary", "tt", "emp", " tmp"]}}
{"id1": "9096319", "id2": "4481712", "code1": "    private void handleNodeRegainedService(long eventID, long nodeID, String ipAddr, long serviceID, String eventTime) {\n        Category log = ThreadCategory.getInstance(OutageWriter.class);\n        if (eventID == -1 || nodeID == -1 || ipAddr == null || serviceID == -1) {\n            log.warn(EventConstants.NODE_REGAINED_SERVICE_EVENT_UEI + \" ignored - info incomplete - eventid/nodeid/ip/svc: \" + eventID + \"/\" + nodeID + \"/\" + ipAddr + \"/\" + serviceID);\n            return;\n        }\n        Connection dbConn = null;\n        try {\n            dbConn = DatabaseConnectionFactory.getInstance().getConnection();\n            if (openOutageExists(dbConn, nodeID, ipAddr, serviceID)) {\n                try {\n                    dbConn.setAutoCommit(false);\n                } catch (SQLException sqle) {\n                    log.error(\"Unable to change database AutoCommit to FALSE\", sqle);\n                    return;\n                }\n                PreparedStatement outageUpdater = dbConn.prepareStatement(OutageConstants.DB_UPDATE_OUTAGE_FOR_SERVICE);\n                outageUpdater.setLong(1, eventID);\n                outageUpdater.setTimestamp(2, convertEventTimeIntoTimestamp(eventTime));\n                outageUpdater.setLong(3, nodeID);\n                outageUpdater.setString(4, ipAddr);\n                outageUpdater.setLong(5, serviceID);\n                outageUpdater.executeUpdate();\n                outageUpdater.close();\n                try {\n                    dbConn.commit();\n                    if (log.isDebugEnabled()) log.debug(\"nodeRegainedService: closed outage for nodeid/ip/service \" + nodeID + \"/\" + ipAddr + \"/\" + serviceID + \" in DB\");\n                } catch (SQLException se) {\n                    log.warn(\"Rolling back transaction, nodeRegainedService could not be recorded  for nodeId/ipAddr/service: \" + nodeID + \"/\" + ipAddr + \"/\" + serviceID, se);\n                    try {\n                        dbConn.rollback();\n                    } catch (SQLException sqle) {\n                        log.warn(\"SQL exception during rollback, reason\", sqle);\n                    }\n                }\n            } else {\n                log.warn(\"\\'\" + EventConstants.NODE_REGAINED_SERVICE_EVENT_UEI + \"\\' for \" + nodeID + \"/\" + ipAddr + \"/\" + serviceID + \" does not have open record.\");\n            }\n        } catch (SQLException se) {\n            log.warn(\"SQL exception while handling \\'nodeRegainedService\\'\", se);\n        } finally {\n            try {\n                if (dbConn != null) dbConn.close();\n            } catch (SQLException e) {\n                log.warn(\"Exception closing JDBC connection\", e);\n            }\n        }\n    }\n", "code2": "    public void deleteObject(String id) throws SQLException {\n        boolean selfConnection = true;\n        Connection conn = null;\n        PreparedStatement stmt = null;\n        try {\n            if (dbConnection == null) {\n                DatabaseConn dbConn = new DatabaseConn();\n                conn = dbConn.getConnection();\n                conn.setAutoCommit(false);\n            } else {\n                conn = dbConnection;\n                selfConnection = false;\n            }\n            stmt = conn.prepareStatement(this.deleteSql);\n            stmt.setString(1, id);\n            stmt.executeUpdate();\n            if (selfConnection) conn.commit();\n        } catch (Exception e) {\n            if (selfConnection && conn != null) conn.rollback();\n            throw new SQLException(e.getMessage());\n        } finally {\n            if (stmt != null) {\n                stmt.close();\n                stmt = null;\n            }\n            if (selfConnection && conn != null) {\n                conn.close();\n                conn = null;\n            }\n        }\n    }\n", "label": 1, "substitutes": {"handleNodeRegainedService": ["handleNodeRegalledSite", "handleNoderegainedServices", "handleNodeRegalledServices", "handleNoderegainedService", "handleNoderegainsSite", "handleNoderegainsService", "handleNoderegainsServices", "handleNodeRegainedServices", "handleNodeRegalledService", "handleNodeRegainsSite", "handleNoderegainedSite", "handleNodeRegifiedService", "handleNodeRegainsService", "handleNodeRegainsServices", "handleNodeRegainedSite", "handleNodeRegifiedSite", "handleNodeRegifiedServices"], "eventID": ["EventTime", "nodeId", "nodeName", "nodeType", "EventId", "serviceKey", "EventName", " eventName", "nodeTime", "eventId", "EventUID", "eventUID", "serviceUID", "nodeUID", "EventID", "serviceId", " eventUID", "serviceTime", "eventType", "eventName", " eventType", "eventKey", "EventType", " eventKey", " eventId", "nodeKey"], "nodeID": ["NodeId", "nodeId", "nodeName", "volumeName", "moduleID", "moduleIDE", " nodeName", " nodeIDs", "serverID", "Nodeid", "instanceID", "entityJS", "odeId", "instanceId", "moduleIT", "serverIDs", "NodeIT", "nodeJS", "volumeIT", "moduleid", "NodeName", "nodeIDs", "serverName", " nodeIDE", "instanceIDs", " nodeInfo", "resourceId", "localID", "instanceInfo", "serverId", "resourceName", "localJS", " nodeIT", "NodeID", "nodeIDE", " nodeid", "localId", "entityId", "volumeID", "entityID", "resourceID", "serverInfo", "NodeIDs", "odeIDE", "volumeId", "nodeInfo", " nodeJS", " nodeId", "moduleId", "nodeid", "nodeIT", "odeID"], "ipAddr": ["ipAndrt", " ipAdder", " ipAddn", "ipAddressrs", "ipAddsn", " ipAddrt", "ipStorer", "ipAddsrs", "ipAndri", "ipStorehr", "ipAddressr", "epAddressr", " ipAddaddr", "ipAndp", "ipAddhr", "ipSendp", " ipAddressr", "ipAttp", "ipIntp", " ipaddr", "ipReshr", "ipAddsr", "ipaddrs", "ipAddrar", "ipIntrs", "ipAcn", "ipSender", "ipaddl", "ipAddaddr", "ipAddressrar", " ipAddrs", "epAddri", "ipAttr", "epAddressl", "ipAtter", "ipAcrs", "ipResrs", " ipAddressrs", " ipaddp", " ipAttr", " ipAddrar", "epAddr", "ipSendr", "ipAdder", "ipStorers", " ipAddl", "epAddl", " ipAttp", "ipaddrt", "epAddressrs", "ipAddressp", "ipAddrb", "ipaddr", "ipAddrs", "ipAcrb", " ipaddrt", "ipAddressl", "ipAddressri", "ipAddresser", "ipAndl", "epAddressri", "ipAddn", "ipAddl", "ipAttrar", " ipAddressp", " ipAddressaddr", "ipSendrar", "ipStorert", "ipIntaddr", "ipAddsrb", " ipAddrb", "ipAndr", "ipAcr", "ipAddri", "ipResrt", "ipAddressaddr", "ipAddp", "ipAndrs", " ipAttrar", "ipIntr", " ipAddhr", "epAddrs", "ipAddrt", "ipaddp", " ipAddp", " ipaddrs", " ipAtter", "ipResr"], "serviceID": ["serviceNOTE", "ServiceName", "serviceid", "componentNOTE", "securityName", "sourceName", "ServiceLAN", "ServiceNAME", "ServiceType", "componentName", "serviceKey", "sourceID", "servId", "securityid", " serviceName", "serviceType", "ServiceID", "servID", "serviceLAN", "ServiceKey", "resourceId", "securityID", " serviceid", "serviceName", "Serviceid", " serviceNOTE", "ServiceId", " serviceJO", "resourceName", "serviceJO", "sourceId", "servid", "componentId", " serviceNAME", "componentID", "sourceJO", "serviceNAME", "servName", "serviceId", "servNAME", "resourceType", "resourceID", " serviceType", "servKey", " serviceKey", " serviceId", "servLAN", "ServiceNOTE", "ServiceJO", "securityId", " serviceLAN"], "eventTime": ["eventtime", "EventTime", "Eventtime", "ventType", "eventTIME", "EventTIME", "agetime", "eventTimes", "attributeType", " eventtime", "ventTime", "attributeTime", "eventType", " eventTimes", "ageTIME", " eventType", "attributeTimes", "EventType", "ventTimes", "ventTIME", "ageTime", " eventTIME", "ageType", "attributeTIME"], "log": ["crit", "ger", "prot", "t", "msg", "scale", "conf", "base", "com", "og", "db", "use", "json", "full", "de", "ome", "entry", "w", "gob", "err", "at", "tag", "be", "ex", "ext", "pl", "set", "net", "out", "iam", "lo", "tab", "or", "and", " logger", "sql", "blog", "cell", "pel", "cat", "mail", "channel", "debug", "event", "bug", "url", "zip", "ge", "Log", "message", "enter", "user", "error", "cont", "report", "l", "xml", "it", "lock", "file", "en", "store", "row", "call", "email", "category", "link", "LOG", "ar", "config", "note", "low", "util", "le", "cal", "se"], "dbConn": ["bCon", " dbCons", "cbConnect", "fbConnect", "dbconn", "gbConnection", " dbObj", "gbCon", "gbConn", "DBCon", "dbConnect", "DbObj", "bdObj", "dbObj", " dbConnect", "gbConnect", "sbObj", "Dbconn", "cbCon", "DbCon", "DbConnect", "DBConn", "DbConn", "sbConn", "DBCons", "tableCon", "fbConn", "userObj", "tableObj", "bCons", "sbConnect", "bConnect", "fbCon", "sbCon", " dbconn", "bConn", "cbConnection", "userCon", "dbCons", "sbConnection", "userConn", "bdConnect", "userConnect", " dbCon", "tableConn", "cbConn", "dbCon", "fbObj", "bdConn", "dbConnection", "tableconn", "DBConnect", "bdCon"], "outageUpdater": ["outageUptater", "outageUpDarer", "outageUdaser", "outageUpddATER", "outageUptarer", "outageUpdetter", "outageUPtaser", "outageUpnitter", "outageUpdager", "outageUPnarer", "outageUplitter", "outageUpnATER", "outageUpdbater", "outageUpnatter", "outageUplater", "outageUpdatemater", "outageUpdatater", "outageUPdarer", "outageUpDater", "outageUpDatter", "outageUpdatedaters", "outageUpndater", "outageUpDager", "outageUpdrer", "outageUppaser", "outageUPnaters", "outageUpdatedaser", "outageUdatoder", "outageUppater", "outageUndATER", "outageUtdoder", "outageUpdatoder", "outageUtDaser", "outageUpddater", "outageUpnaser", "outageUpmATER", "outageUptatter", "outageUpddomer", "outageUpdatemATER", "outageUPtitter", "outageUtDrer", "outageUpnoder", "outageUptoder", "outageUppoder", "outageUpmter", "outageUpmoder", "outageUpmomer", "outageUPdaser", "outageUploder", "outageUptter", "outageUpmaser", "outageUdater", "outageUpndter", "outageUPdoder", "outageUpdatter", "outageUPdaters", "outageUPdATER", "outageUPditter", "outageUpdoder", "outageUpnomer", "outageUplter", "outageUpdboder", "outageUpnarer", "outageUPtater", "outageUPnater", "outageUpdatemaser", "outageUpdarer", "outageUdoder", "outageUpdomer", "outageUpndATER", "outageUpdateraters", "outageUdetter", "outageUpmitter", "outageUndater", "outageUpdaser", "outageUtdrer", "outageUPnATER", "outageUpprer", "outageUpdatetter", "outageUpdaterater", "outageUptaser", "outageUtdater", "outageUptager", "outageUPtoder", "outageUdataser", "outageUnndATER", "outageUdatater", "outageUpdter", "outageUpnaters", "outageUpmetter", "outageUpdbaser", "outageUpdaterager", "outageUpditter", "outageUpdatedarer", "outageUpDaser", "outageUpdaters", "outageUptaters", "outageUnndater", "outageUpnater", "outageUpdatedater", "outageUpdatedager", "outageUPdater", "outageUpddaser", "outageUPtatter", "outageUpmater", "outageUpnter", "outageUpmrer", "outageUtDoder", "outageUPtter", "outageUpDoder", "outageUplaters", "outageUnndter", "outageUpnditter", "outageUpdatedomer", "outageUpdbetter", "outageUndter", "outageUprarer", "outageUPdatter", "outageUprater", "outageUpDATER", "outageUpdataser", "outageUprager", "outageUpraters", "outageUpdatemomer", "outageUPdter", "outageUpdatedATER", "outageUnditter", "outageUnnditter", "outageUpDaters", "outageUpdaterarer", "outageUplarer", "outageUplATER", "outageUPtaters", "outageUptitter", "outageUpdATER", "outageUdatetter", "outageUtdaser", "outageUpDrer", "outageUtDater"]}}
{"id1": "12034046", "id2": "4016687", "code1": "    private InputStream openRemoteStream(String remoteURL, String pathSuffix) {\n        URL url;\n        InputStream in = null;\n        try {\n            url = new URL(remoteURL + pathSuffix);\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n            in = connection.getInputStream();\n        } catch (Exception e) {\n        }\n        return in;\n    }\n", "code2": "    public static void main(String[] args) {\n        FTPClient client = new FTPClient();\n        String sFTP = \"ftp.miservidor.com\";\n        String sUser = \"usuario\";\n        String sPassword = \"password\";\n        try {\n            System.out.println(\"Conectandose a \" + sFTP);\n            client.connect(sFTP);\n            boolean login = client.login(sUser, sPassword);\n            if (login) {\n                System.out.println(\"Login correcto\");\n                boolean logout = client.logout();\n                if (logout) {\n                    System.out.println(\"Logout del servidor FTP\");\n                }\n            } else {\n                System.out.println(\"Error en el login.\");\n            }\n            System.out.println(\"Desconectando.\");\n            client.disconnect();\n        } catch (IOException ioe) {\n            ioe.printStackTrace();\n        }\n    }\n", "label": 0, "substitutes": {"openRemoteStream": ["openLocalResource", "openExternalStream", "closeRawResource", "openRawSocket", "closeRemoteSocket", "openRawFile", "openRemoteFile", "openExternalResource", "openExternalFile", "closeRemoteFile", "closeRemoteStream", "openRawResource", "openRawStream", "openLocalSocket", "closeRawStream", "openRemoteSocket", "openLocalStream", "closeRawSocket", "openExternalSocket", "closeRemoteResource", "openRemoteResource", "closeRawFile", "openLocalFile"], "remoteURL": ["serverID", "remoteurl", "fromUrl", "remoteURI", "remoteUrl", " remoteURI", "sceneUrl", "fromurl", "sceneurl", "serverURL", "RemoteURI", "Remoteurl", "remoteID", "sceneUR", "serverURI", " remoteUR", "fromUR", "RemoteID", "RemoteUR", "RemoteUrl", "remoteUR", "serverUR", "sceneURL", " remoteID", "fromURL", "RemoteURL"], "pathSuffix": ["pathSPrefux", "pathPufffix", "pathSumpixed", "pathSefffix", "pathSufux", "pathSfffix", "pathSumpess", "pathSuffixed", "pathSeffess", "pathSeuffix", "pathSufIX", "pathSPreffix", "pathSeffix", "pathSufix", "pathSumpix", "pathPsufffix", "pathPsuffIX", "pathSeuffess", "pathSPrefix", "pathSeffixed", "pathPuffIX", "pathSsufffix", "pathSsuffess", "pathSeufffix", "pathPuffux", "pathSeuffixed", "pathSsuffixed", "pathSsuffIX", "pathPuffix", "pathSffixed", "pathPsuffix", "pathSffix", "pathSsuffux", "pathSufffix", "pathSuffess", "pathPsuffux", "pathSuffux", "pathSumpfix", "pathSsuffix", "pathSPrefIX", "pathSuffIX", "pathSffess"], "url": ["build", "sl", "gl", "address", "lr", "h", "file", "Url", "hub", "str", "nl", "resource", "print", "mail", "char", "browser", "ls", "run", "r", "ll", "pl", "host", "https", "ssl", "link", "console", "uri", "base", "URL", "rel", "web", "get", "ur", "conn", "raw", "user", "cert", "ml", "client", "name", "bel", "hl", "http", "www", "self", "mount", "l", "xml", "cmd", "ul"], "in": ["ln", "mc", "kin", "pin", "file", "en", "p", "channel", "is", "po", "up", "cin", "from", "inv", "mi", "qa", "ini", "IN", "inc", "i", "n", "inner", "a", "m", " din", "as", "ma", "out", "oin", "din", "conn", "vin", "input", "isin", "gin", "qi", "In", "source", "ai", "ins", "rin", "login", "sum", "it", "nin", "bin", "thin", "ain", "stream", "con", "inn"], "connection": ["description", "number", "communication", "resource", "channel", "cone", "position", "ion", "context", "service", "still", "Connection", "network", "c", "entry", "relation", "session", "condition", "statement", "link", "city", "web", "connect", "result", "conn", "database", "associated", "client", "generation", "application", "pointer", "version", "response", "l", "connected", "directory", "character", "controller", "con", "command"]}}
{"id1": "8815137", "id2": "17947246", "code1": "    public void copyToDir(File dir) {\n        if (!dir.exists()) {\n            dir.mkdirs();\n        } else if (this.file.getParentFile() != null && this.file.getParentFile().equals(dir)) {\n            return;\n        }\n        File file = getEstimatedFileName(dir);\n        try {\n            file.createNewFile();\n            FileOutputStream fileOutputStream = new FileOutputStream(file);\n            FileInputStream fileInputStream = new FileInputStream(this.file);\n            int read = 0;\n            byte[] buffer = new byte[1024];\n            while (read != -1) {\n                fileOutputStream.write(buffer, 0, read);\n                read = fileInputStream.read(buffer);\n            }\n            fileInputStream.close();\n            fileOutputStream.close();\n            this.file = file;\n        } catch (IOException e) {\n            Logger.log(e);\n        }\n    }\n", "code2": "    public String readURL(String urlLocation, ArrayList headers, RenderEngine c) throws Exception {\n        URL url = null;\n        HttpURLConnection conn = null;\n        InputStream istream = null;\n        try {\n            url = new URL(urlLocation);\n            conn = (HttpURLConnection) url.openConnection();\n        } catch (Exception e) {\n            throw new Exception(\"Soap is unable to retrieve URL for '\" + urlLocation + \"': \" + e.getMessage());\n        }\n        loadCookies(urlLocation, conn, c);\n        if (headers != null) {\n            for (int i = 0; i < headers.size(); i++) {\n                String header = (String) headers.get(i);\n                String key = header.substring(0, header.indexOf(\":\"));\n                String value = header.substring(header.indexOf(\":\") + 2);\n                Debug.log(\"Adding new request header '\" + key + \"'='\" + value + \"'\");\n                conn.setRequestProperty(key, value);\n            }\n        }\n        Debug.debug(\"Set to use GET, URL=\" + urlLocation);\n        try {\n            istream = conn.getInputStream();\n        } catch (Exception e) {\n            Debug.debug(\"Unable to capture input stream: \" + e.getMessage());\n            throw new Exception(\"Unable to capture input stream from URL '\" + urlLocation + \"': \" + e.getMessage());\n        }\n        Debug.debug(\"'GET' - Got input stream.\");\n        if (conn.getContentLength() == -1) {\n            Debug.debug(\"Content length = unknown\");\n        } else {\n            Debug.debug(\"Content length = \" + conn.getContentLength());\n        }\n        byte data[] = null;\n        int curPos = 0, contentLength = conn.getContentLength();\n        if (conn.getContentLength() == -1) {\n            String byteSize = NodeUtil.walkNodeTree(Server.getConfig(), \"//configuration/object[@type='engine.tunable']/property[@type='engine.unknowncontentsize']/@value\");\n            if (byteSize == null) {\n                contentLength = 4096;\n            } else {\n                contentLength = Integer.parseInt(byteSize);\n            }\n            Debug.debug(\"Content length unknown.  Allowing fuzz of \" + contentLength + \" bytes.\");\n        }\n        data = new byte[contentLength];\n        try {\n            int dataRead = 0;\n            while ((dataRead = istream.read(data, curPos, contentLength - curPos)) != -1) {\n                if (dataRead == 0) {\n                    break;\n                }\n                curPos += dataRead;\n            }\n        } catch (Exception e) {\n            throw new Exception(\"Soap is unable to read data from HTTP connection: \" + e.getMessage());\n        }\n        try {\n            istream.close();\n            conn.disconnect();\n        } catch (MalformedURLException e) {\n            throw new Exception(\"Soap request to site '\" + urlLocation + \"' is invalid: \" + e.getMessage());\n        } catch (IOException e) {\n            throw new Exception(\"Soap request to site '\" + urlLocation + \"' failed to connect.\");\n        }\n        String dataOut = new String(data);\n        int counter = 0;\n        data = null;\n        istream = null;\n        conn = null;\n        url = null;\n        return dataOut.trim();\n    }\n", "label": 0, "substitutes": {"copyToDir": ["transfer2Path", "copy2File", "copytoDir", "transferToDir", "copyToPath", "copyFromPath", "transfer2Dir", "copyToFile", "copy2Path", "transferToPath", "transfer2File", "copyToDirectory", "copyFromDirectory", "copy2Dir", "copytoDirectory", "copyFromFile", "copytoPath", "transferToDirectory", "copy2Directory", "copytoFile", "transfer2Directory", "copyFromDir", "transferToFile"], "dir": ["local", "d", "path", "module", "dr", "cur", "lib", "parent", "id", "mod", "disk", "src", "old", "fd", "rec", "manager", "re", "null", "ext", "vol", "det", "res", "fin", "md", "base", "rel", "def", "desc", "dis", "dd", "loc", "out", "root", "tmp", "init", "doc", "req", "Dir", "db", "ds", "name", "mk", "spec", "data", "dist", "folder", "cont", "dm", "tr", "pkg", "window", "ir", "directory", "pos", "del", "draft", "DIR", "full", "de", "wd", "div"], "file": ["local", "path", "module", "used", "print", "FILE", "msg", "File", "output", "model", "f", "base", "job", "project", "all", "db", "fp", "core", "name", "comment", "line", "source", "use", "task", "full", "this", "entry", "h", "p", "io", "disk", "class", "open", "rule", "filename", "issue", "status", "play", "out", "get", "create", "change", "http", "image", "el", "handle", "il", "state", "force", "log", "field", "parent", "current", "url", "null", "to", "port", "title", "form", "entity", "page", "message", "result", "init", "tree", "fn", "report", "value", "flag", "cache", "type", "lock", "resource", "ile", "limit", "label", "link", "table", "format", "foo", "le", "controller", "domain", "unit", "info"], "fileOutputStream": ["filePutForm", " fileWriteSteam", " fileOutputForm", "fileOutputForm", "fileWriteSteam", "fileSystemView", "FileOutputSocket", "fileOutputView", "filePutstream", "fileLogSteam", " fileWritestream", "fileOutputSteam", "fileSystemSocket", "fileWritestream", "fileInputView", "fileSystemSteam", "fileLogForm", " fileOutputstream", " fileOutputSteam", "fileWriteForm", "fileSystemStream", "fileControlSteam", "fileWriteStream", "fileControlView", "fileControlSocket", "FileInputView", " fileWriteStream", "fileInputSteam", "fileInputForm", " fileWriteForm", "FileOutputSteam", "FileOutputView", "FileInputForm", "filePutStream", "fileLogStream", "fileControlStream", "FileOutputForm", "FileInputStream", "FileInputSocket", "fileInputstream", "filePutSteam", "FileOutputStream", "fileOutputSocket", "fileInputSocket", "fileOutputstream", "FileInputSteam"], "fileInputStream": ["fileInSource", "fileInterStreamer", "fileinputSteam", "fileInterstream", " fileOutputController", "fileInputStreamer", "FILEInputStreamer", "FileInputRead", "fileInsertRead", "fileOutputSteam", "FILEInputstream", "fileinputList", "fileinputStream", "FileOutputList", "fileInsertList", "fileInStream", "fileInController", " fileInputSteam", "FILEInputThread", "fileOutputList", "fileOutputSource", "FILEInputStream", "FileOutputRead", " fileOutputSteam", "fileInterThread", "fileInterStream", "FILEOutputThread", "fileInputList", "fileOutputController", "fileInSteam", " fileInputSource", "fileInputSource", "fileInputSteam", " fileInputController", "FILEOutputStream", "FileInputSteam", "fileOutputRead", "FileOutputSteam", "fileInsertSteam", "fileInputController", "FILEOutputstream", "fileinputSource", "fileinputRead", "fileinputController", " fileOutputSource", "fileOutputThread", "fileInputThread", "FileInputStream", "fileInputstream", "FileOutputStream", "fileOutputStreamer", "fileOutputstream", "fileInsertStream", "FileInputList", "fileInputRead", "FILEOutputStreamer"], "read": ["send", "parse", "height", "print", "length", "count", "start", "num", "in", " write", "skip", "open", "run", "reader", "len", "r", "index", "pack", "n", "check", "seen", "trust", "write", "i", "ok", "stream", "tell", "close", "wait", "set", "end", "READ", "get", "each", "reads", "raw", "req", "ask", "push", "input", "ind", "seek", "readable", "offset", "shift", "load", "x", "reading", "add", "report", "Read", "need", "shape", "ready", "with", "have", "hold", "last", "find", "size"], "buffer": ["text", "sample", "batch", "filter", "binary", "sequence", "variable", "append", "bar", "print", "char", "event", "history", "row", "stack", "phrase", "attribute", "button", "word", "block", "Buffer", "initial", "reason", "iter", "table", "message", "buff", "page", "result", "capacity", "frame", "template", "document", "memory", "chain", "header", "window", "cache", "available", "buf", "body", "stream", "command"]}}
{"id1": "22801734", "id2": "13063241", "code1": "    private static void setup() throws Exception {\n        String path = Webcam.class.getProtectionDomain().getCodeSource().getLocation().getFile();\n        File jarFile = new File(URLDecoder.decode(path, \"UTF-8\") + \"/Hanasu.jar\");\n        if (!jarFile.exists()) jarFile = new File(\"/home/marc/Virtual Machine/Hanasu.jar\");\n        File f = File.createTempFile(\"tempabca\", \"bdfafad\");\n        f.delete();\n        f.mkdir();\n        String parent = f.getAbsolutePath() + \"/\";\n        byte[] buf = new byte[1024];\n        ZipInputStream zipinputstream = null;\n        ZipEntry zipentry;\n        zipinputstream = new ZipInputStream(new FileInputStream(jarFile));\n        zipentry = zipinputstream.getNextEntry();\n        while (zipentry != null) {\n            String entryName = zipentry.getName();\n            if (entryName.startsWith(\"native\")) {\n                int n;\n                FileOutputStream fileoutputstream;\n                File newFile = new File(parent + entryName);\n                if (zipentry.isDirectory()) {\n                    newFile.mkdirs();\n                    zipentry = zipinputstream.getNextEntry();\n                    continue;\n                }\n                fileoutputstream = new FileOutputStream(newFile);\n                while ((n = zipinputstream.read(buf, 0, 1024)) > -1) fileoutputstream.write(buf, 0, n);\n                fileoutputstream.close();\n                zipinputstream.closeEntry();\n            }\n            zipentry = zipinputstream.getNextEntry();\n        }\n        zipinputstream.close();\n        String arch = \"\";\n        boolean x64 = false;\n        for (String key : keys) {\n            String property = System.getProperty(key);\n            if (property != null) {\n                x64 = (property.indexOf(\"64\") >= 0);\n            }\n        }\n        if (JPTrayIcon.isUnix()) {\n            if (x64) arch = \"linux-amd64\"; else arch = \"linux-x86\";\n        }\n        if (JPTrayIcon.isWindows()) {\n            System.out.println(\"Arch: \" + System.getProperty(\"sun.arch.data.model\"));\n            if (x64 && !System.getProperty(\"sun.arch.data.model\").equals(\"32\")) arch = \"win64-amd64\"; else arch = \"win32-x86\";\n        }\n        if (JPTrayIcon.isMac()) arch = \"macosx-universal\";\n        System.out.println(\"Using native/\" + arch + \"/\");\n        addLibraryPath(parent + \"native/\" + arch + \"/\");\n    }\n", "code2": "    public static void copyFile(File src, File dest) throws IOException {\n        FileInputStream fis = new FileInputStream(src);\n        FileOutputStream fos = new FileOutputStream(dest);\n        java.nio.channels.FileChannel channelSrc = fis.getChannel();\n        java.nio.channels.FileChannel channelDest = fos.getChannel();\n        channelSrc.transferTo(0, channelSrc.size(), channelDest);\n        fis.close();\n        fos.close();\n    }\n", "label": 1, "substitutes": {"setup": ["build", "seed", "clean", "construct", "test", "update", "up", "sleep", "boot", "release", "close", "config", "set", "connect", "init", "touch", "create", " Setup", "upload", "load", "reset", "save", "mount", "ready", "login", "Setup", "sync", "install"], "path": ["text", "where", "local", "address", "module", "dir", "file", "string", "p", "log", "context", "family", "relative", "route", "filename", "url", "ath", "c", "PATH", "pattern", "host", "title", "location", "base", "prefix", "root", "cert", "tree", "name", "template", "Path", "home", "mount", "pkg", "directory", "ref", "full"], "jarFile": [" jarE", "jarWeb", "tarFile", " jarResource", "javaFile", "certPath", "zipFiles", "magicFile", "jarPath", "certFilename", "sessionChain", "javaFilename", "javaFolder", "sessionfile", "JarWeb", "jarFilename", "zipFile", "tarE", "zipWeb", "jarfile", "tarFILE", " jarFiles", "jarChain", " jarFilename", "jarResource", "zipE", "jarE", "tarfile", "jarFILE", "JarFiles", " jarFolder", " jarfile", " jarWeb", " jarFILE", "jarFolder", "certFile", "magicChain", "sessionFile", "zipfile", "jarFiles", "JarFile", " jarPath", "sessionResource", "zipFILE", "magicResource", "certFolder", " jarChain", "javaPath", "Jarfile", "magicfile"], "f": ["elf", "F", "d", "v", "fc", "h", "file", "dir", "p", "part", "b", "fd", "lf", "e", "t", "fac", "c", "tf", "i", "ff", "life", "fs", "o", "cf", "sf", "fb", "out", "alf", "fp", "rf", "fn", "fo", "bf", "fm", "fi", "l", "of", "fr", "ent", "full", "fa", "af", "y", "w"], "parent": ["localhost", "ppa", "dir", "file", "p", "child", "family", "relative", "filename", "owner", "parents", "port", "title", "host", "location", "base", "server", "prefix", "ma", "root", "global", "tmp", "out", "pid", "fp", "tree", "name", "template", "folder", "home", "pa", "pkg", "directory", "Parent", "pool", "full", "temp"], "buf": ["cv", "aka", "bed", "bytes", "batch", "bag", "str", "queue", "b", "fun", "printf", "rb", "boxes", "msg", "norm", "blocks", "rw", "bl", "mem", "vec", "img", "obs", "fb", "br", "seq", "buffer", "paste", "result", "buff", "out", "raw", "cap", "db", "wb", "tab", "Buff", "data", "cb", "pkg", "uf", "ob", "mb", "cmd", "pool", "Buffer", "temp"], "zipinputstream": ["zipoutputfield", " zipoutputStream", "zipcontrolstream", "zipinputengine", "zipInputservice", "archiveinputrow", "zipoutputstyle", "zipcontrolengine", "zipuploadStream", " zipoutputengine", "zipInputStream", " zipinputStream", "ZipInputconsole", "zipinputfield", "zipopenstream", "zipenterStream", "zipoutputengine", "zipuploadrow", "zipinputreader", "ZipinputStream", "zipinputservice", " zipinputfield", "zipoutputloop", "zipoutputStream", " zipinputengine", "zipinputsign", " zipoutputstream", "zipoutputconsole", "zipinnerform", "archiveoutputstream", "archiveinputconsole", "zipcontextstyle", "zipInputrow", "archiveoutputStream", "zipenterconsole", "zipfeedstream", "zipuploadstream", "zipinputrow", "zipenterstream", " zipoutputreader", " zipinputloop", "archiveoutputservice", "zipoutputrow", " zipoutputloop", "zipcontrolstack", "zipinputloop", "zipoutputreader", "zipoutputstream", " zipoutputstyle", "Zipinputstream", "zipoutputform", "archiveoutputconsole", "zipoutputservice", "zipinputstyle", "zipuploadloop", "zipfeedloop", "zipuploadstyle", "zipinputStream", "archiveoutputsign", "zipfeedfield", "zipcontextstream", "zipopenStream", " zipinputstack", "zipInputform", "archiveoutputrow", "zipinputconsole", "zipInputconsole", "archiveinputform", "archiveinputstream", "zipopenservice", " zipoutputfield", "zipoutputsign", "archiveinputservice", "ZipInputStream", "zipinnerstream", "zipinputstack", "zipInputsign", "zipInputstream", "archiveinputsign", "zipfeedStream", "zipInputengine", "ZipInputstream", " zipinputstyle", "zipopensign", "zipcontrolStream", "zipinputform", "Zipinputconsole", " zipoutputstack", "zipcontextreader", "zipuploadfield", "archiveoutputform", "zipuploadreader", "zipInputstack", "zipinnerStream", "zipoutputstack", " zipinputreader", "archiveinputStream", "zipcontextloop"], "zipentry": ["loopent", "Zipcomment", "Ziprecord", "packentry", "archivecell", "newEntry", "newentry", "archivesearch", "loopmatch", "zipelement", "zeelement", "zipconnection", "zimage", "archivese", "zcell", "zapplication", "zeEntry", " zipconnection", "packcell", "csventry", "csvEntry", " zipse", "zipimage", "Zipapplication", "Zipcell", "zsearch", "csvfield", "zmatch", "archiveconnection", "archiveent", " zipEntry", "zipfield", "zipent", "packelement", "ZipEntry", "zeentry", "archiveentry", "zentry", " zipcell", "loopconnection", "packEntry", "Zipimage", "zcomment", "Zipelement", "archivematch", "newapplication", "Zipfield", "loopentry", "zipcomment", "ziprecord", "zconnection", "zecell", "zEntry", "zent", "zipmatch", " ziprecord", "newcomment", " zipsearch", "zse", " zipfield", "zipsearch", "zrecord", "Zipentry", "zipcell", "zipEntry", "zipapplication", " zipimage", "zipse"], "entryName": ["entryKey", "archiveList", "EntryKey", "archiveTitle", "membername", "entryList", "memberNAME", "elementId", "connectionname", "archivename", "entryNAME", "channelname", "EntryList", "elementName", "entryId", "connectionFamily", " entryname", "EntryName", "archiveName", "elementKey", "entryTitle", "memberFamily", "connectionName", "archiveKey", "entryname", "channelTitle", "validName", "entryFamily", "archiveId", "elementList", "validNAME", "channelName", "validname", " entryTitle", "memberName", "validFamily", "connectionNAME", "EntryId"], "n": ["ln", "d", "v", "number", "en", "p", "np", "nl", "length", "k", "t", "nr", "num", "nt", "nn", "z", "count", "no", "j", "nm", "N", "_", "an", "ren", "len", "ni", "r", "c", "ng", "i", "ll", "m", "ns", "nu", " len", "o", "s", "nor", "cn", "name", "fn", "nan", "x", "nc", "gn", "l", "na", "pos", "ne", "none", "y", "sn"], "fileoutputstream": ["fileoutview", "fileobjecttable", " fileconnectionStream", " fileoutputwindow", "filecolumnStream", "fileoutwindow", " fileoutputview", "filecolumntable", "fileoutputSteam", " fileoutputter", " fileinputview", " fileconnectionsystem", "fileobjectstream", " filecolumnwindow", "filecutstream", "fileinputstream", " fileoutputsystem", "filecutview", "fileoutputStream", " filecolumnstream", "fileoutputconsole", "fileinputter", "fileoutputsystem", " fileoutputStream", "Fileoutputtable", "filecutter", "fileobjectStream", "Fileinputstream", "fileconnectionStream", " filecolumntable", "fileOutputconsole", " fileinputStream", "Fileinputtable", "filecontentconsole", "filecolumnwindow", "fileoutputtable", "FileinputSteam", " fileinputstream", "filecolumnstream", "filecutStream", "fileoutputter", "FileoutputStream", " fileoutputtable", "fileoutputwindow", "fileinputtable", "FileoutputSteam", "fileinputStream", "fileouttable", "fileOutputStream", "filecontentStream", " fileconnectionconsole", "fileoutputview", "FileinputStream", " fileinputter", "fileinputview", "fileobjectSteam", " fileconnectionstream", "filecontentstream", "fileconnectionconsole", "fileoutStream", "fileinputSteam", "fileconnectionstream", "fileOutputsystem", "fileconnectionsystem", "Fileoutputstream", " fileoutputconsole", "fileinputwindow", "fileoutstream", " filecolumnStream", "fileoutter", "fileOutputstream", "filecontentsystem"], "newFile": ["newDirectory", "NewFile", " newfile", " newDir", "anotherFolder", "freshfile", "anotherFile", "Newfile", "freshFile", "bigfile", "bigFile", "NEWField", "freshDir", "freshField", "NewDirectory", "bigFILE", "newField", "newDir", "newFILE", "NEWFILE", "newfile", " newField", "anotherField", " newFolder", "NEWDirectory", "NEWfile", "NewFILE", "anotherfile", "NEWDir", "bigDirectory", "NEWFolder", "newFolder", "NEWFile"], "arch": ["mac", "system", "os", "build", "race", "rpm", "ppa", "dr", "egg", "dar", "print", "component", "program", "archs", "imp", "arc", "family", "work", " architecture", "owner", "act", "cpu", "dll", "library", "ext", "host", "ph", "brand", "ar", "ARCH", "form", "pe", "Arch", "chart", "app", "comp", "ch", "chip", "deb", "war", "arm", "hex", "hard", "rep", "version", "pkg", "install", "ip", "platform", "mask", "type", "rar", "archive", "craft"], "key": ["val", "item", "ico", "Key", "step", "var", "variable", "pair", "id", "print", "char", "k", "ame", "child", "row", "phrase", "attribute", "index", "cy", "ice", "KEY", "title", "code", "link", "prefix", "feature", "air", "ie", "name", "shift", "x", "me", "value", "chain", "option", "important", "prop", "ace", "y", "entry", "word"], "property": ["address", "description", "function", "string", "field", "sequence", "variable", "pro", "pair", "resource", "print", "complex", "store", "char", "event", "properties", "class", "position", "style", "attribute", "owner", "rue", "relation", "category", "label", "title", "language", "expression", "feature", "pe", "tie", "power", "frame", "value", "ty", "character", "option", "info", "state", "displayText", "prop", "translation", "Property"], "x64": ["px66", "px64", "ox48", "rx86", "ex64", " x509", "x65", "x864", "mxox", "rex32", "mx86", " x32", " x65", " xox", " x66", "xox", " x62", " x48", "x32", "mx64", "rx64", "mx864", "ex62", "x66", "x86", "ox65", "rex64", "px65", "rxox", "x48", "ox66", " x86", "x62", "ox64", "rex62", "ex509", "px48", "rex509", "ex32", "x509", " x864", "rx864"]}}
{"id1": "14303294", "id2": "8665649", "code1": "    public String getServerHash(String passwordHash, String PasswordSalt) throws PasswordHashingException {\n        byte[] hash;\n        try {\n            MessageDigest digest = MessageDigest.getInstance(\"SHA-256\");\n            digest.reset();\n            digest.update(PasswordSalt.getBytes(\"UTF-16\"));\n            hash = digest.digest(passwordHash.getBytes(\"UTF-16\"));\n            return bytesToHex(hash);\n        } catch (NoSuchAlgorithmException ex) {\n            throw new PasswordHashingException(\"Current environment does not supply needed security algorithms. Please update Java\");\n        } catch (UnsupportedEncodingException ex) {\n            throw new PasswordHashingException(\"Current environment does not supply needed character encoding. Please update Java\");\n        }\n    }\n", "code2": "    private BufferedImage _getImage(String urlStr) throws IOException {\n        URL url = new URL(urlStr);\n        HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n        conn.connect();\n        InputStream in = null;\n        try {\n            in = conn.getInputStream();\n            return ImageIO.read(in);\n        } finally {\n            IOUtilities.close(in);\n        }\n    }\n", "label": 0, "substitutes": {"getServerHash": ["toClientHash", "getUserPassword", "getServerSalt", "getserverSalt", "getUserMac", "getServerPassword", "toServerHash", "getserverPassword", "toServerSalt", "getClientHash", "getServerMac", "toClientPassword", "toClientSalt", "getserverMac", "getserverHash", "getClientPassword", "toServerPassword", "toClientMac", "toServerMac", "getUserHash", "getClientSalt", "getClientMac", "getUserSalt"], "passwordHash": ["swordSalt", "PasswordHTML", "swordHash", "swordHTML", "emailHash", "PasswordHas", "swordHas", "passwordHTML", "emailSalt", "serverHash", "emailHTML", "emailHas", "serverSalt", "passwordSalt", " passwordKey", "PasswordHash", "passwordPassword", "PasswordPassword", "serverPassword", "passwordKey", " passwordSalt", "PasswordKey", " passwordPassword", "passwordHas", "serverKey"], "PasswordSalt": ["PasswordToken", "passwordSecret", "UserSecret", " PasswordHash", " PasswordToken", "passwordSalt", "PasswordHash", "PasswordPassword", "passwordPassword", " PasswordPassword", "PasswordSecret", " passwordSalt", "passwordToken", "UserToken", " PasswordSecret", " passwordPassword", " passwordToken", "UserSalt", "UserHash"], "hash": ["mac", "build", "search", "address", "sample", "match", "filter", "h", "log", "echo", "height", "ash", "tag", "transform", "print", "char", "test", "map", "component", "row", "total", "copy", "index", "block", "html", "crypt", "serial", "message", "result", "dig", "shift", "score", "hex", "value", "key", "sha", "password", "report", "Hash", "response", "handle", "sum", "cache", "mask", "json", "sh", "word"], "digest": ["mdested", "decester", "decse", "digested", " digEST", "Diggest", "Digse", "Digested", "descested", "mdest", "dester", "dest", "DigEST", "descest", "mdEST", "Digest", "hashester", "mdester", "displayester", " digested", "Digester", "digEST", " digester", "diggest", "decest", "dested", "hashest", "dEST", "descester", " digse", "descse", "digse", "displayest", "hashgest", "displayested", "decested", "digester", "hashested", "displaygest"]}}
{"id1": "5237257", "id2": "11032546", "code1": "    private void download(String fileName) {\n        String filePath = Activator.showSaveDialog(fileName, new String[] { \".xls\" });\n        if (filePath != null) {\n            InputStream in = null;\n            OutputStream out = null;\n            try {\n                in = this.getClass().getResourceAsStream(\"/\" + fileName);\n                out = new FileOutputStream(filePath);\n                IOUtils.copy(in, out);\n            } catch (IOException ioe) {\n                Activator.showExceptionDialog(ioe);\n            } finally {\n                if (in != null) {\n                    try {\n                        in.close();\n                    } catch (IOException e1) {\n                        Activator.showExceptionDialog(e1);\n                    }\n                }\n                if (out != null) {\n                    try {\n                        out.close();\n                    } catch (IOException e1) {\n                        Activator.showExceptionDialog(e1);\n                    }\n                }\n            }\n        }\n    }\n", "code2": "    @Test\n    public void testCopyUnknownSize() throws IOException {\n        final InputStream in = new ByteArrayInputStream(TEST_DATA);\n        final ByteArrayOutputStream out = new ByteArrayOutputStream(TEST_DATA.length);\n        final int cpySize = ExtraIOUtils.copy(in, out, (-1));\n        assertEquals(\"Mismatched copy size\", TEST_DATA.length, cpySize);\n        final byte[] outArray = out.toByteArray();\n        assertArrayEquals(\"Mismatched data\", TEST_DATA, outArray);\n    }\n", "label": 1, "substitutes": {"download": [" downloads", " recover", "file", "delete", " drop", " upload", " restore", "export", " seek", "copy", "open", " browse", "Download", "write", "dump", " downloaded", "paste", " Download", "get", "init", " checkpoint", "upload", " retrieve", "load", "save", " dump", " zip", " downloading"], "fileName": ["FILEPath", "fileTime", " fileFilename", " filename", "projectFilename", "FILEName", " fileType", "FILEFilename", "filename", "imagePath", "resourceName", "projectPath", "projectName", "resourcePath", "FilePath", "FILEname", "FileName", "fileFilename", "resourceType", "FileType", "imageName", "fileType", " fileTime", "resourceTime", "FileTime", "projectname"], "filePath": ["FILEPath", "languageName", "fileId", "fileUrl", "ileP", "fileP", "ilePath", "FILEpath", "FILEName", "FILEP", "resourceUrl", "fileStart", " fileId", "FileStart", "filepath", "resourceName", "languagePath", "resourcePath", "FilePath", "languageId", "FileId", "FILEStart", "FileName", " filepath", "FileP", "FILEUrl", "resourcepath", " fileUrl", "ileStart", "ileName"], "in": ["local", "win", "ln", "en", "id", "io", "sin", "is", "inf", "st", "up", "al", "cin", "from", "mi", "re", "r", "ini", "IN", "n", "i", "inc", "inner", "pi", "inside", "m", "ar", "on", "f", "o", "iter", "net", "din", "init", "input", "isin", "ind", "ie", "read", "gin", "im", "In", "one", "or", "ai", "el", "ins", "rin", "l", "login", "it", "bin", "nin", "ain", "co", "con", "inn"], "out": ["v", "cos", "op", "at", "outs", "file", "not", "p", "OU", "io", "t", "conv", "po", "nt", "ion", "obj", "aos", "up", "no", "output", "we", "null", "n", "to", "ex", "i", "write", "boot", "inner", "gt", "outer", "ns", "on", "o", "note", "net", "end", "oss", "conn", "cn", "user", "ch", "client", "name", "sys", "con", "OUT", "or", "Out", "na", "it", "ent", "nin", "ou", "ne", "can", "co", "os", "w"]}}
{"id1": "11183087", "id2": "3514286", "code1": "    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        String senha = \"\";\n        String email = request.getParameter(\"EmailLogin\");\n        try {\n            MessageDigest messageDigest = MessageDigest.getInstance(\"MD5\");\n            messageDigest.update(request.getParameter(\"SenhaLogin\").getBytes(), 0, request.getParameter(\"SenhaLogin\").length());\n            senha = new BigInteger(1, messageDigest.digest()).toString(16);\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        }\n        Usuario usuario = UsuarioBll.getUsuarioByEmailAndSenha(email, senha);\n        String redirect = request.getHeader(\"REFERER\").replace(\"?msg=3\", \"\").replace(\"&msg=3\", \"\") + \"?&msg=3\";\n        if (request.getHeader(\"REFERER\").indexOf(\"?\") != -1) {\n            redirect = request.getHeader(\"REFERER\").replace(\"?msg=3\", \"\").replace(\"&msg=3\", \"\") + \"&msg=3\";\n        }\n        if (usuario.getNome() != null) {\n            HttpSession session = request.getSession();\n            session.setAttribute(\"usuario\", usuario);\n            redirect = \"index.jsp\";\n        }\n        response.sendRedirect(redirect);\n    }\n", "code2": "    public static String getHashedPassword(String password) {\n        try {\n            MessageDigest digest = MessageDigest.getInstance(\"MD5\");\n            digest.update(password.getBytes());\n            BigInteger hashedInt = new BigInteger(1, digest.digest());\n            return String.format(\"%1$032X\", hashedInt);\n        } catch (NoSuchAlgorithmException nsae) {\n            System.err.println(nsae.getMessage());\n        }\n        return \"\";\n    }\n", "label": 1, "substitutes": {"doPost": ["handlePOST", " doPOST", "dopost", "doAdd", " doAdd", "handlePost", "doPOST", " dopost", "DoPost", "DoPOST", "handlepost", "Dopost", "handleAdd", "DoAdd"], "request": ["search", "print", "the", "model", "re", "require", "requ", "web", "project", "req", "input", "document", "register", "object", "reset", "hello", "list", "forward", "order", "command", "system", "run", "open", "complete", "query", "server", "argument", "get", "raw", "create", "reference", "frame", "client", "http", "QUEST", "quest", "handle", "address", "subject", "first", "parent", "browser", "question", "start", "position", "event", "current", "record", "work", "url", "law", "connect", "message", "enter", "result", "user", "setup", "application", "report", "xml", "post", "remote", "context", "select", "begin", "call", "connection", "initial", "Request", "version", "controller", "collection"], "response": ["send", "respond", "ce", "print", "e", "onse", "success", "context", "service", "Response", "output", "re", "view", "content", "to", "write", "connection", "res", "status", "server", "message", "page", "out", "result", "environment", "exit", "document", "frame", "application", "one", "report", "image", "default", "next", "reply", "resp", "entry", "collection", "ve"], "senha": ["senja", "Senwa", "senHA", "tenja", "ensenca", "Senigma", "SenHa", "senhas", "renwa", "senigma", "renja", "ensenha", " senhas", "renha", "Senhas", "tenha", "senho", " senca", "ensenHA", "tinigma", "tinhas", "Senho", "tinha", "ensenho", "tinhi", "Senhi", "Senca", "senHa", "tenHa", "senwa", "Senha", "senhi", "Senja", " senigma", "senca", " senhi", "tenwa", "renHa", " senho", " senHA", "SenHA"], "email": ["path", "address", "sample", "secret", "string", "file", "echo", "lock", "Email", "mail", "oe", "e", "live", "detail", "username", "url", "external", "office", "alias", "label", "zip", "ilo", "quote", "license", "ails", "example", "message", "enter", "elly", "name", "line", "IL", "le", "image", "password", "addr", "el", "hello", "login", "ip", "Mail", "domain", "ne", "gmail", "ql"], "messageDigest": [" messagediger", "messagemdest", "messageMDse", "MessagedigEST", "messageDse", "Messagedigse", "Messagedigest", "messageDester", "messagedigEST", "messageMDest", "messageDigse", " messagedigester", " messageDiger", "MessageDigest", "MessageDig5", "MessageDigse", "messageDigester", "messagemd5", "messageDer", "messageDigEST", "MessageDigester", "messageMDEST", " messagedigse", "messagedigest", "messagediger", "messagemdester", " messageDigester", "messageIGEST", "Messagedig5", "messagemdEST", "messageDig5", "messageIGester", "messageMDester", "messageDiger", "Messagedigester", "messageDest", "messageIGest", " messagedigest", "messageIGse", " messageDigse", "MessageDigEST", "messagedigse", "messagedig5", "messagedigester"], "usuario": ["usuiarios", "usuarius", "uscuarial", "cussuarios", "cusuario", "usruino", " ussuarius", " ussuario", "cussuario", "cussuarial", "ussuarius", "ususrio", "uscuino", "ussurio", "ususarius", "uscuarios", "usuarios", "ususario", "uscuario", "usnuarius", "usui\u00e9r", " usurio", "cusuarial", "ussuario", " ussuarial", "usruarial", "cussuino", " usuarial", "cussu\u00e9r", "usu\u00e9r", "ussuino", " ussurio", "usnurio", "usnuario", "usuino", "ussuarios", "usruario", "usnuarial", "usuarial", "cusuarios", "usuiario", "usuiarial", "usruarios", "ussuarial", "ussu\u00e9r", "uscu\u00e9r", "cusu\u00e9r", "ususarial", " usuarius", "cusuino", "usurio"], "redirect": [" redirection", "indrict", "rederer", " reddraw", "rightirection", " redir", " redurl", "reddirection", "reddigate", "redurl", "REDir", "redirection", "REDirect", "redRECT", "Redirect", "REDurl", "preddraw", "REDirection", "edrict", "RedRECT", "Rederer", "reddRECT", "redigate", "ederer", "rightirect", "predirect", "indirection", "edirection", "inderer", "Reddraw", "reddirect", "predurl", "edirect", "Redurl", "Redrict", "Redirection", "predirection", "redrict", "edir", "redir", "rightigate", "reddraw", "indirect", "Redigate", "edurl", "rightRECT"], "session": ["local", "system", "ESSION", "trip", "ess", "store", "browser", "context", "still", "current", "sid", "relation", "connection", "instance", "condition", "person", "server", "cookie", "params", "s", "environment", "container", "user", "activity", "shared", "input", "client", "data", "application", "save", "use", "metadata", "group", "ession", "window", "cache", "task", "Session", "layout", "json", "state", "sql"]}}
{"id1": "942693", "id2": "6188784", "code1": "    public void convert(File src, File dest) throws IOException {\n        InputStream in = new BufferedInputStream(new FileInputStream(src));\n        DcmParser p = pfact.newDcmParser(in);\n        Dataset ds = fact.newDataset();\n        p.setDcmHandler(ds.getDcmHandler());\n        try {\n            FileFormat format = p.detectFileFormat();\n            if (format != FileFormat.ACRNEMA_STREAM) {\n                System.out.println(\"\\n\" + src + \": not an ACRNEMA stream!\");\n                return;\n            }\n            p.parseDcmFile(format, Tags.PixelData);\n            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n                System.out.println(\"\\n\" + src + \": contains UIDs!\" + \" => probable already DICOM - do not convert\");\n                return;\n            }\n            boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n            int pxlen = p.getReadLength();\n            if (hasPixelData) {\n                if (inflate) {\n                    ds.putUS(Tags.BitsAllocated, 16);\n                    pxlen = pxlen * 4 / 3;\n                }\n                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n                    System.out.println(\"\\n\" + src + \": mismatch pixel data length!\" + \" => do not convert\");\n                    return;\n                }\n            }\n            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n            ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n            ds.putUI(Tags.SOPClassUID, classUID);\n            if (!ds.contains(Tags.NumberOfSamples)) {\n                ds.putUS(Tags.NumberOfSamples, 1);\n            }\n            if (!ds.contains(Tags.PhotometricInterpretation)) {\n                ds.putCS(Tags.PhotometricInterpretation, \"MONOCHROME2\");\n            }\n            if (fmi) {\n                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n            }\n            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n            try {\n            } finally {\n                ds.writeFile(out, encodeParam());\n                if (hasPixelData) {\n                    if (!skipGroupLen) {\n                        out.write(PXDATA_GROUPLEN);\n                        int grlen = pxlen + 8;\n                        out.write((byte) grlen);\n                        out.write((byte) (grlen >> 8));\n                        out.write((byte) (grlen >> 16));\n                        out.write((byte) (grlen >> 24));\n                    }\n                    out.write(PXDATA_TAG);\n                    out.write((byte) pxlen);\n                    out.write((byte) (pxlen >> 8));\n                    out.write((byte) (pxlen >> 16));\n                    out.write((byte) (pxlen >> 24));\n                }\n                if (inflate) {\n                    int b2, b3;\n                    for (; pxlen > 0; pxlen -= 3) {\n                        out.write(in.read());\n                        b2 = in.read();\n                        b3 = in.read();\n                        out.write(b2 & 0x0f);\n                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n                        out.write(b3 >> 4);\n                    }\n                } else {\n                    for (; pxlen > 0; --pxlen) {\n                        out.write(in.read());\n                    }\n                }\n                out.close();\n            }\n            System.out.print('.');\n        } finally {\n            in.close();\n        }\n    }\n", "code2": "    public static void copy(File source, File dest) throws IOException {\n        FileChannel in = null, out = null;\n        try {\n            in = new FileInputStream(source).getChannel();\n            out = new FileOutputStream(dest).getChannel();\n            long size = in.size();\n            MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);\n            out.write(buf);\n        } finally {\n            if (in != null) in.close();\n            if (out != null) out.close();\n        }\n    }\n", "label": 1, "substitutes": {"convert": ["CONversion", "compvert", "CONverting", "consverting", "Converted", "Converts", "consversion", "confer", "unprocess", "conversion", "unvert", "consvert", "unverted", "compverts", "CONVERT", "unfer", "Conversion", "Convert", "unversion", "CONverted", "unverts", "Converting", "CONfer", "ConVERT", "conprocess", "converting", "converts", "CONvert", "Conprocess", "conVERT", "consVERT", "Confer", "compprocess", "compversion", "converted"], "src": ["sr", "path", "sq", "cur", "scan", "file", "txt", "str", "sin", "orig", "rx", "st", "start", "SOURCE", "from", "filename", "url", "rs", "href", "RC", "ource", "img", "host", "cc", "buster", "sit", "uri", "rel", "config", "sc", "Source", "s", "loc", "ipl", "attr", "ur", "its", "req", "usr", "input", "upload", "scene", "hl", "http", "sys", "dist", "source", "SourceFile", "cont", "addr", "rest", "func", "rc", "ser", "ins", "pkg", "inst", "ebin", "stream", "iv"], "dest": ["foreign", "dir", "dat", " Destination", "txt", " orig", "orig", "disk", "test", "Dest", "target", "tif", "write", " destinations", "port", "img", "table", "result", "est", " Dest", " dst", " destination", "gin", "dist", "rest", "source", "temp", "mat"], "in": ["d", "serv", "file", "en", "io", "b", "is", "inf", "st", "up", "cin", "from", "reader", "r", "IN", "i", "inner", "ad", "res", "m", "ar", "as", "din", "isin", "input", "ind", "source", "In", "el", "ins", "rin", "l", "bin", "sql", "stream", "inn"], "p": ["d", "ping", "op", "pb", "P", "pt", "tp", "lp", "pd", "py", "pro", "h", "post", "vp", "part", "b", "prot", "per", "t", "dp", "j", "pg", "at", "cp", "r", "c", "i", "pl", "pi", "wp", "ph", "m", "pre", "f", "ps", "pm", "pers", "pe", "sp", "er", "parse", "fp", "parser", "ap", "pa", "pp", "rep", "pkg", "l", "it", "g", "php", "pc", "jp"], "ds": ["tp", "des", "lists", "gs", "rs", "dates", "ns", "nas", "ps", "ports", "dd", "db", "yes", "amps", "sets", "ks", "mys", "vs", "ats", "obs", "ils", "s", "bs", "hd", " des", " DS", "Ds", "drivers", "iffs", "dos", "outs", "qs", "tests", "d", "js", "aws", "eds", "pd", "points", "dds", "terms", "eps", "ws", "xs", "tes", "dl", "workers", "sd", "dt", " d", "edes", "posts", "loads", "scripts", "ras", "df", "els", "ss", "gd", "di", "dp", "ls", "hs", "cks", "ts", "uds", "DS", "cs", " dd", "ads", "its", " ads", "tags", "ands", "ags", "sts", "dh", " os", "ods", "docs", "os", "ys"], "format": ["settings", "path", "module", "filter", "fc", "at", "file", "mt", "ats", "tag", "id", "lat", "mode", "t", "sche", "feat", "style", "output", "act", "pattern", "pi", " Format", "status", "title", "f", "cf", "Format", "form", "ct", "feature", "table", "set", "parse", "name", "template", "pretty", "spec", "MAT", "source", "top", "fm", "shape", "version", "l", "it", "layout", "unit", "type", "policy", "mat", "size"], "hasPixelData": ["haspixelDATA", " hasPixeldata", "haspixeldata", "haspixelData", "Haspixeldata", "hasFramedata", "hasFrameDATA", "hasixeldata", "HaspixelData", "hasPixeldata", "hasixelData", "HasPixelDATA", "hasixelDATA", " hasPixelDATA", "hasFrameData", "HasPixelData", "HaspixelDATA", "hasPixelDATA", "HasPixeldata"], "inflate": ["inflATE", " invalidATE", "inFLate", "infolat", "incelATE", "informate", "inflicate", "Informate", "inFlicate", " inflATE", "inFlATE", "inFLocate", "inFlocate", "Informated", "informocate", "incelicate", "invalidocate", "infolate", "inflat", "Inflate", "inFlate", "invalidate", " invalidicate", "Inflat", " invalidate", " inflocate", "incelate", "incelocate", " invalidocate", " inflicate", "infolocate", "inFLat", "Informat", "informated", "Inflated", "informat", "inFLated", "invalidicate", "infolated", "inflated", "invalidATE", "Inflocate", "Informocate", "inflocate"], "pxlen": ["xylin", "mmlength", "pxlength", "cpden", "xplength", "pixellen", "cplen", "pexls", "pexden", "tmplength", "packlength", "mmlen", "mxlen", "cplength", "mmln", "pixelfun", "tmplin", "pexlen", "phpdec", "tmplen", "pixellength", "tmpln", "mxdec", "mmlin", "cpln", "pxls", "xyln", "mxlength", "packlen", "xpln", "pxden", "pxdec", "phpln", "mxln", "pexlength", "pxlin", "xpden", "packls", "xplen", "xylen", "packln", "pixells", "pexfun", "pxln", "packdec", "phplen", "packfun", "xylength", "phplength", "pexln", "pxfun"], "out": ["ln", "err", "log", "dir", "io", "crit", "store", "print", "obj", "up", "aos", "msg", "output", "inv", "ex", "res", "inter", "outer", "prefix", "net", "screen", "conn", "init", "user", "cfg", "writer", "gr", "client", "pretty", "name", "sys", "OUT", "group", "list", "Out", "sum", "gov", "cmd", "ou", "outs", "temp"]}}
{"id1": "804637", "id2": "12172485", "code1": "    private static void readAndRewrite(File inFile, File outFile) throws IOException {\n        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n        Dataset ds = DcmObjectFactory.getInstance().newDataset();\n        dcmParser.setDcmHandler(ds.getDcmHandler());\n        dcmParser.parseDcmFile(null, Tags.PixelData);\n        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        System.out.println(\"reading \" + inFile + \"...\");\n        pdReader.readPixelData(false);\n        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n        ds.writeDataset(out, dcmEncParam);\n        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n        System.out.println(\"writing \" + outFile + \"...\");\n        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        pdWriter.writePixelData();\n        out.flush();\n        out.close();\n        System.out.println(\"done!\");\n    }\n", "code2": "    public static boolean decodeFileToFile(String infile, String outfile) {\n        boolean success = false;\n        java.io.InputStream in = null;\n        java.io.OutputStream out = null;\n        try {\n            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);\n            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n            byte[] buffer = new byte[65536];\n            int read = -1;\n            while ((read = in.read(buffer)) >= 0) {\n                out.write(buffer, 0, read);\n            }\n            success = true;\n        } catch (java.io.IOException exc) {\n            exc.printStackTrace();\n        } finally {\n            try {\n                in.close();\n            } catch (Exception exc) {\n            }\n            try {\n                out.close();\n            } catch (Exception exc) {\n            }\n        }\n        return success;\n    }\n", "label": 1, "substitutes": {"readAndRewrite": ["readAndrewWrite", "readAndResrite", "readAndResend", "readAndReprites", "readAndRewWrite", "readAndrewrites", "readAndRewend", "readAndResrites", "readAndrewend", "readAndReprite", "readAndResWrite", "readAndRepWrite", "readAndRewrites", "readAndRepend", "readAndrewrite"], "inFile": ["docFile", "InFilename", "inFILE", "docFILE", "initFilename", "docFilename", "Infile", "inputFile", "iTime", "inputFilename", "iFilename", "INPlace", " inFilename", "outfile", " infile", "inputFace", "InFile", "infile", "INFILE", "INFilename", "INFace", "inPlace", "inFace", "initFile", "initFace", "iFile", "initPlace", "INFile", "iFILE", "inputPlace", "inTime", "outFilename", "INTime", "inFilename", "docTime"], "outFile": ["outFILE", "checkFile", "inFILE", "checkFilename", " outFilename", "checkfile", " outfile", "nameFILE", " outFILE", "reportFILE", "outfile", "reportFile", "toFilename", "infile", "nameFile", "reportFilename", "tofile", "checkFILE", "namefile", "outFilename", "nameFilename", "inFilename", "toFILE", "reportfile", "toFile"], "iis": ["liisc", "eIS", " iIS", "eis", "iiss", "iisc", "ii", "liIs", "iIS", "Iiss", " iisc", "liris", "iiis", "Iis", "diIs", "aiis", "iris", "iiris", "diiss", "IIs", "iIs", " iiss", "diis", "aiIS", "iiisc", "dii", " ii", " iIs", "liis", "Ii", "iiIs", " iris", "aiIs", "eIs"], "dcmParser": ["dcfStatement", "dmodulePrivate", " dpmPar", " dpmLoader", "dmmAdapter", "dmoduleParser", " dpmReader", "dpmLoader", "dfmLoader", "dromAssistant", "dmmmAdapter", "dcmAssistant", "DpmAdapter", "dpmparser", "dcfReader", "dmmparser", "dcfParser", "DpmReader", "DcmAdapter", "dcomParser", "dmmmParser", "dmoduleReader", " dcmarser", " dcmLoader", "dcommReader", "dcrParser", "deromarser", "dcrBuilder", "dcmBuilder", "dmparser", "dpcParser", "dpmParser", "dpmarser", "dmmarser", "dfmParser", "dromListener", "dcomLoader", "dcomBuilder", "dcomReader", " dcmListener", "decmReader", "drumBuilder", "dpmAssistant", "dpcPrivate", "drumReader", "dmmmReader", "dpmReader", "dpmBuilder", "dromparser", "decmParser", "dpmPar", "DcmBuilder", "dmmmparser", "dcmLoader", " dpmParser", "decmarser", " dcmparser", "dcrReader", " dpmPrivate", "dpmListener", "deromReader", "drumParser", " dpmBuilder", "dromarser", "decmparser", "dcommParser", "dmParser", " dcmPar", "Dpmparser", "dmmParser", "dfmBuilder", "deromparser", "dpcAssistant", "dmmReader", "DpmParser", "dromParser", "dgrPar", "dgrStatement", " dcmAssistant", "dcfPar", "dcmarser", " dcmBuilder", "DcmReader", " dcmReader", " dpmStatement", "dmoduleAssistant", "dpcReader", "dcommAssistant", "dromReader", " dpmarser", "dcmparser", "dcrparser", "DcmPar", "dmarser", "dpmAdapter", " dpmAssistant", "dcmReader", "dfmReader", "dgrReader", "dcmPrivate", "DpmPar", "dmReader", " dpmparser", "DpmBuilder", "dcmStatement", "dcmListener", "dpmPrivate", " dcmPrivate", " dpmListener", "dcmPar", "dpmStatement", "drumPar", "dgrParser", "dcmAdapter", "Dcmparser", "deromParser", "dcommListener", " dcmStatement", "DcmParser"], "ds": ["d", "js", "ks", "eds", "outs", "pd", "des", "vs", "dat", "da", "dds", "gd", "qs", "dq", "eps", "ws", "xs", "in", "aos", "ls", "hs", "gs", "rs", "tes", "dl", "dx", "uds", "DS", "cs", "obs", "ims", "fs", "ns", "as", "ps", "ads", "sets", "ils", "sd", "dt", "dd", "s", "bs", "pers", "hd", " des", "its", "db", " DS", "services", "Ds", "sys", "data", "bd", "drivers", "sv", "details", "dos", "dh", "der", "ins", "df", "es", "ss", "ods", "os", "ys"], "pdReader": ["dpReader", "tdParser", "dpCar", "pdHelper", "hdReader", "pedReader", "tdWriter", "hdParser", "ddCar", "ddRunner", "hdWriter", "vdReader", "vdHelper", "pdCar", "dpLoader", "pdParser", "pdRead", "xdWriter", "xdReader", "ddRead", "pdLoader", "ddParser", "ddHelper", "vdWriter", "ddLoader", "xdLoader", "pedRunner", "tdReader", "hdRead", "ddReader", "vdLoader", "pdRunner", "tdRead", "pedLoader", "pedCar", "ddWriter", "xdHelper", "dpRunner"], "out": ["serv", "sw", "t", "conv", "msg", "aos", "output", "gen", "auto", "on", "opt", "screen", "ch", "all", "cfg", "name", "con", "list", "ins", "pos", "ent", "pool", "full", "w", "err", "v", "at", "p", "txt", "io", "up", "in", "flush", "c", "ex", " err", "inter", "status", "o", "net", "s", "raw", "tmp", "conn", "cn", "gr", "client", "sys", "data", "one", "sum", "cmd", "outs", "js", "log", "str", "id", "obj", "we", "to", "n", "null", "inner", "res", "outer", "desc", "writer", "over", "OUT", "Out", "cache", "it", "ou", "en", "nr", "nt", "inv", "go", "gt", "end", "oss", "cb", "co", "os"], "dcmEncParam": ["dmmencCmd", "dcmDecNum", "dmmEnPar", "dcmencPar", "dcmEscParam", "dmmencMsg", "dmmEncMsg", "dmmencParam", "dcmEncVal", "dcmEscVal", "dmmEnParam", "dmmEncVal", "dmmEncPar", "dcmEnNum", "dcmEnPar", "dcmDecCmd", "dcmencMsg", "dcmencCmd", "dmmEncNum", "dcmEnVal", "dcmEncMsg", "dcmEncCmd", "dcmDecParam", "dmmEncParam", "dcmencNum", "dcmEscNum", "dcmDecMsg", "dmmEncCmd", "dmmEnNum", "dcmEncNum", "dmmencNum", "dcmencParam", "dcmEscPar", "dcmEnParam", "dcmEncPar"], "pdWriter": ["dpReader", "PDWrite", "dpWrite", "dpEditor", "tdWriter", "pcwriter", "pidWrite", "dpWriter", "PDWriter", "tdWrite", "tdEditor", "PDEditor", "pdEditor", "pdwriter", "pidWriter", "pidWriting", "tdwriter", "pidwriter", "tdReader", "pdWrite", "pcWriter", "PDReader", "pcWrite", "pcWriting", "pdWriting", "tdWriting"]}}
{"id1": "19549489", "id2": "11562165", "code1": "    public static void copy(File sourceFile, File destinationFile) throws IOException {\n        FileChannel sourceFileChannel = (new FileInputStream(sourceFile)).getChannel();\n        FileChannel destinationFileChannel = (new FileOutputStream(destinationFile)).getChannel();\n        sourceFileChannel.transferTo(0, sourceFile.length(), destinationFileChannel);\n        sourceFileChannel.close();\n        destinationFileChannel.close();\n    }\n", "code2": "    private void streamContains(String in, InputStream stream) throws IOException {\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        IOUtils.copy(stream, baos);\n        byte[] bytes = baos.toByteArray();\n        String cmp = new String(bytes, \"UTF-8\");\n        assertTrue(cmp.contains(in));\n        baos.close();\n    }\n", "label": 1, "substitutes": {"copy": ["clone", "delete", "Cop", "cat", " cp", "replace", "map", "export", "cp", "write", "csv", "slice", "paste", "rm", "create", "Copy", "upload", "download", "transfer", "read", " mirror", " duplicate", "load", " Copy", "save", "add", "move", "sync"], "sourceFile": ["inputLine", "inputPage", "ourcefile", "ourcePage", "ourceFile", "sourcefile", "inputFile", "ourceFilename", "ourceLine", "SourceFilename", " sourceLine", " sourceFilename", "inputfile", "sourceFilename", "SourceLine", " sourcefile", "SourcePage", " sourcePage", "SourceFile", "sourcePage", "Sourcefile", "sourceLine"], "destinationFile": ["destinationfile", "destinatedPlace", "destinationsfile", "declinatorFile", "destinationPath", "destinatorFile", "destinatedfile", "estinatedFilename", "estinationFile", "destinatePlace", "destrativePlace", "destinatorPath", "estinationPlace", "destinationsPlace", "declinationPlace", "estinatedFile", "declinationFilename", "declinatorPlace", "destinoFilename", "destrativeFile", "destinatedFilename", "declinationPath", "declinatorFilename", "destinatePath", "estinatedPlace", "destinatorPlace", "destinatedFile", "destinationPlace", "destinationFilename", "estinationfile", "declinationFile", "estinationFilename", "destinoFile", "destinationsFilename", "destinatorFilename", "destrativePath", "estinatedfile", "declinatorPath", "destinofile", "destrativeFilename", "destinoPlace", "destinationsFile", "destinateFile", "destinateFilename"], "sourceFileChannel": ["sourceFileApplication", "sourceBaseHandler", "ourceEntrychannel", "sourceBaseChuck", "ourceEntryChan", "sourceBlockConnection", "srcFilechannel", "sourceStreamChan", "sourceFilechannel", "srcFileChannel", "sourceStreamChuck", "sourceEntrychannel", "srcBlockchannel", "sourceEntryChannel", "sourceStreamchannel", "sourceBlockchannel", "sourceFileChuck", "sourceBaseChannel", "sourceEntryConnection", "sourceEntryChan", "ourceFileChannel", "srcBlockConnection", "sourceFileHandler", " sourceFileHandler", "sourceStreamChannel", "sourceByteEntry", "srcBlockEntry", "srcFileEntry", "sourceStreamApplication", "sourceByteConnection", "sourceLineEntry", "ourceFileChan", " sourceFileApplication", "ourceFilechannel", "sourceLineConnection", "ourceFileConnection", "sourceLineChan", "sourceFileChan", "sourceFileConnection", "sourceBytechannel", "sourceBlockEntry", "sourceByteChannel", "sourceBaseApplication", "sourceFileEntry", "sourceLineChannel", "sourceBlockChannel", "srcBlockChannel", "sourceStreamHandler", "ourceEntryChannel", "sourceLinechannel", " sourceFileChuck", "srcFileConnection", "sourceStreamConnection", "ourceEntryConnection"], "destinationFileChannel": ["destinationDirectoryChan", "destinatorFilesChannel", "destinatorFilesCh", "destmentResourceManager", "destmentPageContext", "destmentResourcechannel", "destmentFileContext", "destinationDirectoryChannel", "destinationResourcechannel", "destinationPageChan", "destinationFileConnection", "destinationfileManager", "destinationPageContext", "destinationChannelContext", "destinationFilesChan", "destinationfilechannel", "destinationfileConnection", "destinatorFileCh", "destinationChannelCh", "destinationChannelChannel", "destinationResourceChan", "destmentResourceChan", "destinationPageChannel", "destinatorFileConnection", "destinationFileContext", "destinationFileCh", "destinationResourceChannel", "destmentResourceChannel", "destinationDirectoryManager", "destinationPageEntry", "destinationChannelEntry", "destinatorFilesConnection", "destmentPageEntry", "destinatorFileChannel", "destinationFileManager", "destinatorFilesChan", "destinationDirectorychannel", "destmentFilechannel", "destinationfileChannel", "destinationFileChan", "destinationFileEntry", "destinationFilesChannel", "destmentFileManager", "destmentFileChan", "destmentFileEntry", "destinationResourceManager", "destinationFilechannel", "destinationChannelConnection", "destinatorFileChan", "destmentFileChannel", "destinationfileChan", "destinationfileCh", "destmentPageChan", "destinationFilesConnection", "destinationfileContext", "destinationChannelChan", "destinationFilesCh", "destinationfileEntry", "destmentPageChannel"]}}
{"id1": "2017833", "id2": "11049257", "code1": "    public static String hash(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n        MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n        byte[] sha1hash = new byte[40];\n        md.update(text.getBytes(\"iso-8859-1\"), 0, text.length());\n        sha1hash = md.digest();\n        return SHA1.convertToHex(sha1hash);\n    }\n", "code2": "    public static String generate(boolean secure, boolean sep) throws UnknownHostException {\n        MessageDigest messagedigest;\n        StringBuilder stringbuffer = new StringBuilder();\n        try {\n            messagedigest = MessageDigest.getInstance(\"MD5\");\n        } catch (NoSuchAlgorithmException nosuchalgorithmexception) {\n            throw new RuntimeException(nosuchalgorithmexception);\n        }\n        StringBuffer stringbuffer2;\n        InetAddress inetaddress = InetAddress.getLocalHost();\n        long l = System.currentTimeMillis();\n        long l1 = 0L;\n        if (secure) l1 = _secureRand.nextLong(); else l1 = _rand.nextLong();\n        stringbuffer.append(inetaddress.toString());\n        stringbuffer.append(\":\");\n        stringbuffer.append(Long.toString(l));\n        stringbuffer.append(\":\");\n        stringbuffer.append(Long.toString(l1));\n        messagedigest.update(stringbuffer.toString().getBytes());\n        byte abyte0[] = messagedigest.digest();\n        StringBuffer stringbuffer1 = new StringBuffer();\n        for (int i = 0; i < abyte0.length; i++) {\n            int j = abyte0[i] & 0xff;\n            if (j < 16) stringbuffer1.append('0');\n            stringbuffer1.append(Integer.toHexString(j));\n        }\n        String s = stringbuffer1.toString();\n        stringbuffer2 = new StringBuffer();\n        if (sep) {\n            stringbuffer2.append(s.substring(0, 8));\n            stringbuffer2.append(\"-\");\n            stringbuffer2.append(s.substring(8, 12));\n            stringbuffer2.append(\"-\");\n            stringbuffer2.append(s.substring(12, 16));\n            stringbuffer2.append(\"-\");\n            stringbuffer2.append(s.substring(16, 20));\n            stringbuffer2.append(\"-\");\n            stringbuffer2.append(s.substring(20));\n            return stringbuffer2.toString();\n        } else {\n            return s;\n        }\n    }\n", "label": 1, "substitutes": {"hash": ["string", "str", "tag", "transform", "render", "print", "replace", "test", "update", " digest", "to", "check", "write", "code", "dump", "message", "format", "parse", " fingerprint", "read", "sign", "hex", "sha", "hello", "Hash", "sum", " hashing"], "text": ["path", "v", "pt", "string", "log", "txt", "Text", "str", "print", "test", "t", "event", "nt", "msg", "select", "output", "aut", "url", "content", "act", "ext", "pattern", "title", "code", "config", "form", "prefix", "buffer", "ct", "message", "format", "out", "command", "q", "input", "read", "document", "name", "comment", "data", "cont", "source", "value", "password", "TEXT", "tx", "translation", "body", "now", "word"], "UnsupportedEncodingException": ["UnsupportedDecoderFailure", "UnsupportedDecodingFailure", "UnsupportedEncoderFailure", "UnsupportedEncensionException", "UnsupportedEncodingFailure", "UnsupportedEncoderException", "UnsupportedEncensionFailure", "UnsupportedEncryptionError", "UnsupportedDecoderException", "UnsupportedEncryptionException", "UnsupportedEncensionError", "UnsupportedDecodingError", "UnsupportedDecodingException", "UnsupportedEncodingError", "UnsupportedDecoderError", "UnsupportedEncryptionFailure", "UnsupportedEncoderError"], "md": ["d", "mc", "dr", "pdf", "h", "pd", "dir", "ld", "mt", "amd", "mod", "di", "sm", "red", "ad", "det", "m", "pm", "ct", "sd", "ms", "dd", "mand", "rm", "hd", "mm", "ind", "mk", "cd", "od", "bd", "add", "mn", "sha", "dm", "mg", "and", "der", "dh", "df", "mb", "cmd", "grad", "MD", " Md"], "sha1hash": ["sha2sum", "sha3hash", "shaonesum", "ha3hash", "sha3key", "ha1hex", "sha512Hash", "sha5hex", "ha3Hash", "sha11hash", "haonehash", "sha11h", "sha2hash", "ha1h", "sha1key", "haonehex", "ha2dig", "sha11dig", "ha1dig", "ha1sum", "sha1sum", "shaonehex", "ha1hash", "sha1Hash", "sha5sum", "sha3Hash", "sha2hex", "shaoneHash", "sha3sum", "sha5key", "ha2h", "sha512hash", "ha3key", "ha3sum", "ha1key", "sha11Hash", "sha512h", "ha2Hash", "shaonehash", "sha2Hash", "sha1dig", "sha5Hash", "sha1h", "sha2key", "ha1Hash", "sha2h", "sha5hash", "ha2hash", "sha512dig", "sha2dig", "sha1hex", "haoneHash", "haonesum"]}}
{"id1": "6341264", "id2": "3536332", "code1": "    public static byte[] getJarEntry(String jarName, String entry, int port) {\n        byte[] b = null;\n        try {\n            String codebase = System.getProperty(\"java.rmi.server.codebase\", InetAddress.getLocalHost().getHostName());\n            String protocol = \"http://\";\n            int x = codebase.indexOf(protocol) + protocol.length();\n            String s2 = codebase.substring(x);\n            int x2 = s2.indexOf('/');\n            String downloadHost = s2.substring(0, x2);\n            if (downloadHost.indexOf(':') == -1) {\n                downloadHost += \":\" + port;\n            }\n            URL url = new URL(\"jar:http://\" + downloadHost + \"/\" + jarName + \"!/\" + entry);\n            JarURLConnection jurl = (JarURLConnection) url.openConnection();\n            JarEntry je = jurl.getJarEntry();\n            InputStream is = jurl.getInputStream();\n            BufferedInputStream bis = new BufferedInputStream(is);\n            int size = (int) je.getSize();\n            b = new byte[size];\n            int rb = 0;\n            int chunk = 0;\n            while ((size - rb) > 0) {\n                chunk = bis.read(b, rb, size - rb);\n                if (chunk == -1) {\n                    break;\n                }\n                rb += chunk;\n            }\n            bis.close();\n            is.close();\n            bis = null;\n            is = null;\n            url = null;\n            jurl = null;\n        } catch (UnknownHostException e) {\n            e.printStackTrace();\n            return null;\n        } catch (IOException e) {\n            e.printStackTrace();\n            return null;\n        }\n        return b;\n    }\n", "code2": "    private String digest(String input) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        byte[] md5hash = new byte[64];\n        md.update(input.getBytes(\"iso-8859-1\"), 0, input.length());\n        md5hash = md.digest();\n        return this.convertToHex(md5hash);\n    }\n", "label": 0, "substitutes": {"getJarEntry": [" getFileResource", "getJarResource", "getModuleEntry", "getFileResource", " getZipEnt", "getJavaItem", "getZipEntry", "getJarEnt", " getJarItem", " getJarFile", " getFileInfo", "getZipEnt", "getServerItem", " getFileItem", "getResourceInfo", "getServerEntry", "getResourceResource", " getZipItem", "getJarFile", "getFileInfo", "getJavaFile", "getResourceItem", "getServerInfo", "getModuleFile", " getJarInfo", "getModuleEnt", "getJavaEntry", "getZipFile", " getJarEnt", "getResourceEntry", " getJarResource", "getFileEntry", "getJarItem", " getZipFile", "getServerResource", " getFileEntry", " getZipEntry", "getModuleItem", "getZipItem", "getJavaEnt", "getJarInfo", "getFileItem"], "jarName": [" jarKey", "JarLocal", "jobname", "binaryname", "JarName", " jarN", "sessionName", " jarLocal", "jarLocal", "binaryName", "sessionKey", "sessionname", "Jarname", "JarN", " jarname", "jobName", "jobN", "binaryKey", "jarname", "jobLocal", "jarN", "jarKey"], "entry": ["text", "jar", "search", "path", "address", "cell", "description", "string", "file", "field", "delete", "log", "resource", "print", "Entry", "e", "row", "archive", "index", "word", "query", "zip", "uri", "server", "er", "enter", "element", "input", "ie", "ry", "name", "comment", "data", "key", "xml", "ent", "quit", "command"], "port": ["localhost", "path", "address", "pt", "string", "p", "point", "Port", "length", "remote", "count", "start", "position", "PORT", "row", "limit", "ort", "export", "age", "index", "connection", "eport", "host", "server", "ports", "page", "format", "project", "offset", "priority", "width", "socket", "value", "key", "version", "pos", "ip", "it", "type", "pc"], "b": ["d", "ba", "v", "pb", "h", "p", "bt", "nb", "e", "be", "j", "ab", "bb", "bits", "r", "c", "bl", "bit", "i", "a", "ib", "xb", "B", "f", "base", "fb", "br", "buffer", "sb", "bs", "s", "buff", "emb", "eb", "db", "u", "bf", "cb", "bas", "bp", "l", "ob", "bi", "mb", "bin", "buf", "wb", "gb", "y"], "codebase": ["codeBase", "codease", "cheBase", "codespace", "chebase", "Codebased", "chefile", "codebas", "corespace", " codebased", "linkbas", "codefile", "corefile", "cease", " codease", "corebase", "cebase", "codebased", "Codease", " codebas", "Codespace", "Codebas", "linkBase", "ceBase", "cebased", "Codefile", "linkbase", "coreBase", "chespace", "CodeBase", "Codebase", " codeBase"], "protocol": ["phyix", "scheication", "cryptotype", "protol", "protix", "proavior", "patocol", "pronotype", "pronicle", "scheix", "pertocol", "pronavior", "cryptication", "proocol", "pertavior", "protility", "phyility", "protavior", "cryptix", "cryptocol", "scheocol", "perticle", "pronocol", "patotype", "cryptility", "proicle", "proos", "cryptos", "protos", "patol", "pertotype", "cryptol", "phyocol", "phyication", "prototype", "proticle", "prootype", "patos", "protication", "scheility", "prool"], "x": ["xx", "nex", "p", "ax", "mx", "px", "rx", "t", "z", "xs", "ox", "max", "xa", " cx", "index", "dx", "ex", "n", "i", "wx", "xd", "xxxxxxxx", "inx", "X", "xf", "xi", "xes", "xy", "xc", "ux", "ix", "xp", "tx", "y", "w"], "s2": ["ss3", "ps02", "svtwo", "ss02", "s4", "x1", "ps2", "es02", "s1", " slt", "ss2", "es2", "s3", "sv02", "xlt", "ts2", "x02", " stwo", "stwo", "es1", " s1", "s02", "sv2", "ts4", "slt", "ps1", "pslt", "sv1", "ss4", " s02", "ts3", "ts02", "estwo"], "x2": ["ax1", "ix02", "rx02", "x1", "x3", " x1", "ex1", "ax3", "x02", "ax02", "ix2", "ex2", "ix1", " x02", "ax2", "ex3", "rx2", " x3", "rx1", "ex02"], "downloadHost": ["DownloadPort", "downloadPort", "archiveHost", "dumpHost", "DownloadHead", "dumpDomain", "transferPort", "dumpNode", "downloadhost", "transferUrl", "archiveUrl", " downloadPath", "DownloadPath", "downloadUrl", "Downloadhost", "DownloadDomain", " downloadPort", "downloadPath", "dumpUrl", " downloadhost", "DownloadHost", " downloadDomain", "transferhost", "downloadHead", " downloadUrl", "downloadNode", "downloadDomain", "archiveHead", "DownloadNode", "archivehost", " downloadHead", "dumpPath", "transferHost", "dumphost", " downloadNode", "DownloadUrl"], "url": ["arl", "build", "sl", "gl", "jar", "lr", "serv", "log", "ret", "Url", "file", "str", "nl", "mil", "mail", "browser", "obj", "ls", "open", "call", "dl", "atl", "ll", "pl", "zip", "ssl", "link", "rel", "uri", "URL", "base", "web", "loc", "sb", "ur", "download", "ml", "name", "bel", "hl", "http", "www", "rl", "mount", "el", "l", "ob", "json", "il", "ref", "lb", "ul"], "jurl": ["jjUrl", "jcname", "jsUrl", "jsll", " jgl", " jsl", "zll", "jjjob", "jarkl", "jname", "jUrl", "Jname", "jURL", "JUrl", "jssl", "zUrl", "jpurl", "jpsl", "jll", "jsurl", "jpUrl", " jjob", " jUrl", "jjURL", "jjurl", "jcurl", "jcUrl", "jkl", " jURL", "jpgl", "jsjob", "jarurl", "Jkl", " jll", "jsgl", "Jurl", "zurl", "jgl", "jarname", "jjob", "zgl", "jarUrl", "jckl", "jsURL", "jsl"], "je": ["sec", "js", "ae", "zy", "elt", "pet", "nex", "dj", "jj", "oe", "e", "jet", "te", "j", "ja", "ese", "se", "ee", "jo", "zip", "ze", "ele", "ge", "pe", "zo", " Je", "ffe", "exe", "ie", "ei", "jl", "bj", "ne", "jen", "vre", "jp", "ve"], "is": ["js", "iss", "isl", "isa", "ists", "ii", "sis", "in", "ist", "ais", "ri", "mi", "si", "bits", "i", "ios", "obs", "ib", "fs", "es", "IS", "s", "bs", "sb", "lis", "ois", "its", "\u00eds", "isin", "ris", "im", "ai", "tis", "Is", "ins", "nis", "ir", "bi", "il", "ires", "isc", "atis", "isi", "os", "iso"], "bis": ["os", "bytes", "serv", "bos", "binary", "vs", "sbm", "rots", "conv", "aos", "onis", "ls", "rison", "oi", "bb", "ais", "bits", "ri", "abin", "rs", "gs", "uds", "ios", "res", "obs", "bh", "fs", "bps", "ns", "ses", "pins", "sb", "bs", "buff", "lis", "oss", "bil", "its", "xy", "isin", "ris", "bes", "ibe", "tis", "cb", "ins", "nis", "ob", "fr", "bi", "ubis", "isi", "es", "uffy"], "size": ["settings", "send", "sample", "sex", "number", "zie", "sy", "ose", "Size", "length", "mode", "count", "nr", "num", "max", "scale", "se", "storage", "si", "len", "re", "index", "time", "range", "ize", "n", "pi", "scroll", "status", "area", "ze", "notice", "small", "message", "iz", "capacity", "name", "score", "sv", "use", "shape", "sum", "SIZE", "empty", "year", "unit", "type", "body", "news", "space", "sn", "now"], "rb": ["err", "lr", "rid", "pb", "ctr", "umb", "rex", "RB", "nb", "nr", "num", "ruby", "kb", "ptr", "rob", "bb", "rab", "rod", "mr", "ri", "rs", "r", "rw", "ring", "rg", "rss", "ro", "cr", "xb", "buster", "bone", "ord", "fb", "br", "sb", "erb", "rd", "rm", "rt", "db", "eb", "rf", "cb", "bp", "rc", "ru", "ob", "ref", "buf", "wb", "gb", "rar", "lb"], "chunk": ["charunks", "echunk", " chump", "cpow", "charbyte", "chedunks", " chunks", "ichunks", " chord", "ichunk", "charord", "tchow", "tchunk", "cork", "charoint", "tchork", "chedoint", "chord", "cow", "cpork", "charump", "chbyte", "cpunk", "cunk", "cpunks", "charunk", "echord", "tchunks", "Chunk", "chump", "Chunks", "echbyte", " chulk", "chedump", "echunks", " choint", "chunks", "Chulk", "chulk", "ichulk", "cunks", "chow", " chbyte", "choint", "chedunk", "chork"]}}
{"id1": "17286898", "id2": "7425022", "code1": "                public void run() {\n                    BufferedReader reader = null;\n                    String message = null;\n                    int messageStyle = SWT.ICON_WARNING;\n                    try {\n                        URL url = new URL(Version.LATEST_VERSION_URL);\n                        URLConnection conn = url.openConnection();\n                        reader = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n                        String latestVersion = reader.readLine();\n                        latestVersion = latestVersion.substring(latestVersion.indexOf(' ') + 1);\n                        if (!Version.getVersion().equals(latestVersion)) {\n                            message = Labels.getLabel(\"text.version.old\");\n                            message = message.replaceFirst(\"%LATEST\", latestVersion);\n                            message = message.replaceFirst(\"%VERSION\", Version.getVersion());\n                            messageStyle = SWT.ICON_QUESTION | SWT.YES | SWT.NO;\n                        } else {\n                            message = Labels.getLabel(\"text.version.latest\");\n                            messageStyle = SWT.ICON_INFORMATION;\n                        }\n                    } catch (Exception e) {\n                        message = Labels.getLabel(\"exception.UserErrorException.version.latestFailed\");\n                        Logger.getLogger(getClass().getName()).log(Level.WARNING, message, e);\n                    } finally {\n                        try {\n                            if (reader != null) reader.close();\n                        } catch (IOException e) {\n                        }\n                        final String messageToShow = message;\n                        final int messageStyleToShow = messageStyle;\n                        Display.getDefault().asyncExec(new Runnable() {\n\n                            public void run() {\n                                statusBar.setStatusText(null);\n                                MessageBox messageBox = new MessageBox(statusBar.getShell(), messageStyleToShow);\n                                messageBox.setText(Version.getFullName());\n                                messageBox.setMessage(messageToShow);\n                                if (messageBox.open() == SWT.YES) {\n                                    BrowserLauncher.openURL(Version.DOWNLOAD_URL);\n                                }\n                            }\n                        });\n                    }\n                }\n", "code2": "    private String transferWSDL(String wsdlURL, String userPassword) throws WiseConnectionException {\n        String filePath = null;\n        try {\n            URL endpoint = new URL(wsdlURL);\n            HttpURLConnection conn = (HttpURLConnection) endpoint.openConnection();\n            conn.setDoOutput(false);\n            conn.setDoInput(true);\n            conn.setUseCaches(false);\n            conn.setRequestMethod(\"GET\");\n            conn.setRequestProperty(\"Accept\", \"text/xml,application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5\");\n            conn.setRequestProperty(\"Connection\", \"close\");\n            if (userPassword != null) {\n                conn.setRequestProperty(\"Authorization\", \"Basic \" + (new BASE64Encoder()).encode(userPassword.getBytes()));\n            }\n            InputStream is = null;\n            if (conn.getResponseCode() == 200) {\n                is = conn.getInputStream();\n            } else {\n                is = conn.getErrorStream();\n                InputStreamReader isr = new InputStreamReader(is);\n                StringWriter sw = new StringWriter();\n                char[] buf = new char[200];\n                int read = 0;\n                while (read != -1) {\n                    read = isr.read(buf);\n                    sw.write(buf);\n                }\n                throw new WiseConnectionException(\"Remote server's response is an error: \" + sw.toString());\n            }\n            File outputDir = new File(wiseProperties.getProperty(\"wise.tmpDir\"));\n            if (!outputDir.exists()) {\n                outputDir.mkdir();\n                wiseProperties.setProperty(\"wise.forceImportObject\", \"true\");\n            }\n            File file = new File(wiseProperties.getProperty(\"wise.tmpDir\"), new StringBuffer(\"Wise\").append(IDGenerator.nextVal()).append(\".xml\").toString());\n            OutputStream fos = new BufferedOutputStream(new FileOutputStream(file));\n            IOUtils.copyStream(fos, is);\n            fos.close();\n            is.close();\n            filePath = file.getPath();\n        } catch (WiseConnectionException wce) {\n            throw wce;\n        } catch (Exception e) {\n            throw new WiseConnectionException(\"Wsdl download failed!\", e);\n        }\n        return filePath;\n    }\n", "label": 0, "substitutes": {"run": ["build", "function", "apply", "log", "show", "render", "process", "fun", "begin", "work", "call", "thread", "block", "status", "runner", "def", "loop", "play", "job", "get", "pass", "un", "Run", "name", "exit", "ran", "func", "exec", "execute", "handle", "running", "task", "runs", "sync"], "reader": ["lr", "layer", "file", "io", "handler", "resource", "redo", "rx", "loader", "ner", "context", "row", "Reader", "holder", "mr", "r", "rs", "query", "ro", "inner", "connection", "upper", "builder", "runner", "uri", "rot", "iterator", "iter", "buffer", "dd", "READ", "older", "writer", "read", "parser", "input", "client", "rr", "readable", "liner", "reading", "source", "rl", "rc", "rows", "peer", "body", "er", "stream", "rar", "entry"], "message": ["module", "description", "show", "Message", "print", "msg", "attribute", "content", "m", "console", "location", "base", "trace", "maximum", "document", "media", "comment", "memory", "hello", "command", "menu", "status", "summary", "html", "minimum", "template", "warning", "image", "metadata", "body", "flash", "where", "subject", "address", "log", "field", "definition", "missing", "mail", "mode", "question", "position", "success", "mess", "phrase", "style", "view", "title", "code", "language", "license", "notice", "result", "error", "application", "report", "value", "response", "translation", "text", "number", "string", "sequence", "hash", "email", "time", "label", "essage", "reason", "note", "expression", "format", "password", "version", "request"], "messageStyle": ["minimumColor", "metadataStyle", "sequenceStyle", " messageType", "MessageStyle", "displaystyle", "MessageSty", "messageWeight", "documentstyle", "sequenceSty", "Messagestyle", "messagestyle", "messageColor", "minimumStyle", "messageType", "minimumSty", "MessageTheme", "displayTheme", "maximumTheme", "maximumStyle", "metadataTheme", "displayWeight", "displayStyle", "metadatastyle", "documentType", " messageWeight", " messageColor", "metadataWeight", " messageSty", "messageTheme", "MessageType", " messageTheme", "minimumstyle", "documentStyle", "documentSty", "maximumSty", "messageSty", "sequencestyle", " messagestyle", "maximumType", "sequenceColor"], "url": ["address", "Url", "str", "nl", "resource", "b", "browser", "loader", "ls", "open", "r", "cp", "dl", "ll", "connection", "host", "https", "ssl", "link", "f", "uri", "server", "rel", "URL", "base", "loc", "ur", "cert", "client", "name", "bel", "http", "socket", "rl", "mount", "l", "con", "lb"], "conn": ["cur", "ws", "conv", "Conn", "nt", "obj", "loader", "ls", "cp", "Connection", "c", "comm", "connection", "res", "cc", "ns", "ct", "net", "connect", "out", "iw", "cn", "ch", "cert", "client", "ait", "nc", "socket", "addr", "cb", "enc", "handle", "l", "cmd", "con"], "latestVersion": ["largestVer", "oldVersion", "uniqueVersion", "lastString", "lastValue", "finalVer", " latestLine", "stableVersion", " latestKey", "olderVERSION", "highestKey", "highestVer", "highestString", "latestKey", "highestVersion", "stableOne", "olderLine", "oldVERSION", "largestUrl", "highestPoint", "uniqueValue", "stableVer", "highestValue", " latestValue", "releasedVer", "releasedOne", "largestString", "latestValue", "finalValue", " latestUrl", "largestVersion", " latestVer", "olderVer", "latestVERSION", "largestLine", "finalVersion", "latestOne", "stableVERSION", "latestLine", "largestValue", "oldPoint", "lastOne", "uniqueUrl", "lastVersion", "finalPoint", "latestVer", "uniqueLine", "latestUrl", "latestString", "lastVer", "olderVersion", "oldLine", "releasedVERSION", "largestKey", "oldVer", " latestVERSION", "oldValue", "lastVERSION", "latestPoint", "releasedVersion"], "messageToShow": ["messageWillSee", "MessageTOShow", "messageTOShow", "messagetoSh", "messageTOshow", "commandToSh", "messageTODisplay", "messageWillShow", "commandtoShow", "messageWillSh", "message2show", "messageToshow", "messageToSee", "commandToShow", "MessageToshow", "MessageTOshow", "commandtoSh", "MessageToShow", "commandtoSee", "messagetoShow", "MessageToDisplay", "messageToSh", "commandToSee", "messagetoSee", "MessageTODisplay", "message2Show", "message2Display", "messageToDisplay"], "messageStyleToShow": ["messageStyleTOFind", "messageStyleTypeShow", "messageSizeToFind", "messageTypeTODisplay", "messageStyleTOUse", "messageTypeToshow", "messageStyleTOshow", "messageSizeToShow", "messageSizeTOshow", "messageStyletoFind", "messageStyleTODisplay", "messageStyleToshow", "messageStyleToUse", "messageStyleToFind", "messageTypeTOshow", "messageTypeTOShow", "messageStyletoUse", "messageStyleetoFind", "messageStyleTOShow", "messageSizeTODisplay", "messageSizeToDisplay", "messageSizeTOShow", "messageStyleetoDisplay", "messageSizeTOFind", "messageStyleetoShow", "messageStyletoDisplay", "messageStyletoShow", "messageStyleetoshow", "messageStyleToDisplay", "messageTypeToUse", "messageStyleTypeDisplay", "messageTypeTOUse", "messageStyleTypeshow", "messageTypeToDisplay", "messageStyleTypeUse", "messageStyletoshow", "messageTypeToShow", "messageSizeToshow"], "messageBox": ["messagebox", " messageArea", "messageArea", "MessageRoot", "MessageArea", " messageSet", "messagePanel", "MessageBox", "descriptionBOX", "msgPanel", "consolebox", "msgBOX", "messageSet", "consoleArea", "createRoot", " messageRoot", "createbox", " messageBar", "messageBar", "createBox", " messagebox", "Messagebox", "messageRoot", "descriptionSet", "consoleBox", " messagePanel", "statusLabel", "messageLabel", "messageBOX", "descriptionBox", "statusPanel", "statusBox", "descriptionPanel", "statusBOX", " messageLabel", "statusSet", "msgBox", " messageBOX", "MessageBar", "consoleBar", "msgLabel"]}}
{"id1": "2017833", "id2": "9398454", "code1": "    public static String hash(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n        MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n        byte[] sha1hash = new byte[40];\n        md.update(text.getBytes(\"iso-8859-1\"), 0, text.length());\n        sha1hash = md.digest();\n        return SHA1.convertToHex(sha1hash);\n    }\n", "code2": "    private static RemoteFile getRemoteFile(String url) {\n        long size = 0;\n        String realUrl = \"\";\n        try {\n            HttpURLConnection conn = (HttpURLConnection) (new URL(url)).openConnection();\n            size = conn.getContentLength();\n            realUrl = conn.getURL().toString();\n            conn.disconnect();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        RemoteFile rf = new RemoteFile(size, realUrl);\n        return rf;\n    }\n", "label": 0, "substitutes": {"hash": ["string", "str", "tag", "transform", "render", "print", "replace", "test", "update", " digest", "to", "check", "write", "code", "dump", "message", "format", "parse", " fingerprint", "read", "sign", "hex", "sha", "hello", "Hash", "sum", " hashing"], "text": ["path", "v", "pt", "string", "log", "txt", "Text", "str", "print", "test", "t", "event", "nt", "msg", "select", "output", "aut", "url", "content", "act", "ext", "pattern", "title", "code", "config", "form", "prefix", "buffer", "ct", "message", "format", "out", "command", "q", "input", "read", "document", "name", "comment", "data", "cont", "source", "value", "password", "TEXT", "tx", "translation", "body", "now", "word"], "UnsupportedEncodingException": ["UnsupportedDecoderFailure", "UnsupportedDecodingFailure", "UnsupportedEncoderFailure", "UnsupportedEncensionException", "UnsupportedEncodingFailure", "UnsupportedEncoderException", "UnsupportedEncensionFailure", "UnsupportedEncryptionError", "UnsupportedDecoderException", "UnsupportedEncryptionException", "UnsupportedEncensionError", "UnsupportedDecodingError", "UnsupportedDecodingException", "UnsupportedEncodingError", "UnsupportedDecoderError", "UnsupportedEncryptionFailure", "UnsupportedEncoderError"], "md": ["d", "mc", "dr", "pdf", "h", "pd", "dir", "ld", "mt", "amd", "mod", "di", "sm", "red", "ad", "det", "m", "pm", "ct", "sd", "ms", "dd", "mand", "rm", "hd", "mm", "ind", "mk", "cd", "od", "bd", "add", "mn", "sha", "dm", "mg", "and", "der", "dh", "df", "mb", "cmd", "grad", "MD", " Md"], "sha1hash": ["sha2sum", "sha3hash", "shaonesum", "ha3hash", "sha3key", "ha1hex", "sha512Hash", "sha5hex", "ha3Hash", "sha11hash", "haonehash", "sha11h", "sha2hash", "ha1h", "sha1key", "haonehex", "ha2dig", "sha11dig", "ha1dig", "ha1sum", "sha1sum", "shaonehex", "ha1hash", "sha1Hash", "sha5sum", "sha3Hash", "sha2hex", "shaoneHash", "sha3sum", "sha5key", "ha2h", "sha512hash", "ha3key", "ha3sum", "ha1key", "sha11Hash", "sha512h", "ha2Hash", "shaonehash", "sha2Hash", "sha1dig", "sha5Hash", "sha1h", "sha2key", "ha1Hash", "sha2h", "sha5hash", "ha2hash", "sha512dig", "sha2dig", "sha1hex", "haoneHash", "haonesum"]}}
{"id1": "18238468", "id2": "12389873", "code1": "    @Test\n    public void testLoadSource() throws IOException {\n        ArticleMetadata metadata = new ArticleMetadata();\n        metadata.setId(\"http://arxiv.org/abs/math/0205003v1\");\n        InputStream inputStream = arxivDAOFacade.loadSource(metadata);\n        Assert.assertNotNull(inputStream);\n        StringWriter writer = new StringWriter();\n        IOUtils.copy(inputStream, writer, \"utf8\");\n        String contents = writer.toString();\n        Assert.assertTrue(contents.contains(\"A strengthening of the Nyman\"));\n        inputStream.close();\n    }\n", "code2": "    private void load() throws SQLException {\n        Connection conn = null;\n        Statement stmt = null;\n        try {\n            conn = FidoDataSource.getConnection();\n            conn.setAutoCommit(false);\n            stmt = conn.createStatement();\n            ClearData.clearTables(stmt);\n            stmt.executeUpdate(\"insert into Objects (ObjectId, Description) values (100, 'Living Thing')\");\n            stmt.executeUpdate(\"insert into Objects (ObjectId, Description) values (200, 'Inanimate Object')\");\n            stmt.executeUpdate(\"insert into Objects (ObjectId, Description) values (300, 'Dog')\");\n            stmt.executeUpdate(\"insert into Objects (ObjectId, Description) values (400, 'Sheltie')\");\n            stmt.executeUpdate(\"insert into Objects (ObjectId, Description) values (500, 'Eskimo')\");\n            stmt.executeUpdate(\"insert into Objects (ObjectId, Description) values (600, 'Person')\");\n            stmt.executeUpdate(\"insert into Objects (ObjectId, Description) values (700, 'Collar')\");\n            stmt.executeUpdate(\"insert into Objects (ObjectId, Description) values (800, 'Ball')\");\n            stmt.executeUpdate(\"insert into Objects (ObjectId, Description) values (401, 'Fido')\");\n            stmt.executeUpdate(\"insert into Objects (ObjectId, Description) values (501, 'Samantha')\");\n            stmt.executeUpdate(\"insert into Objects (ObjectId, Description) values (801, 'A collar')\");\n            stmt.executeQuery(\"select setval('objects_objectid_seq', 1000)\");\n            stmt.executeUpdate(\"insert into ClassLinkTypes (LinkName, LinkType) values ('hasa', 2)\");\n            stmt.executeUpdate(\"insert into ClassLinkTypes (LinkName, LinkType) values ('partof', 2)\");\n            stmt.executeUpdate(\"insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (100, 'isa', 1)\");\n            stmt.executeUpdate(\"insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (200, 'isa', 1)\");\n            stmt.executeUpdate(\"insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (300, 'isa', 100)\");\n            stmt.executeUpdate(\"insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (400, 'isa', 300)\");\n            stmt.executeUpdate(\"insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (500, 'isa', 300)\");\n            stmt.executeUpdate(\"insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (600, 'isa', 100)\");\n            stmt.executeUpdate(\"insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (700, 'isa', 200)\");\n            stmt.executeUpdate(\"insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (800, 'isa', 200)\");\n            stmt.executeUpdate(\"insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (401, 'instance', 400)\");\n            stmt.executeUpdate(\"insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (501, 'instance', 500)\");\n            stmt.executeUpdate(\"insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (801, 'instance', 800)\");\n            stmt.executeUpdate(\"insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (401, 'hasa', 801)\");\n            stmt.executeUpdate(\"insert into AttributeCategories (CategoryName) values ('color')\");\n            stmt.executeUpdate(\"insert into AttributeCategories (CategoryName) values ('weight')\");\n            stmt.executeUpdate(\"insert into AttributeCategories (CategoryName) values ('length')\");\n            stmt.executeUpdate(\"insert into Attributes (AttributeName, Category) values ('green', 'color')\");\n            stmt.executeUpdate(\"insert into Attributes (AttributeName, Category) values ('blue', 'color')\");\n            stmt.executeUpdate(\"insert into Attributes (AttributeName, Category) values ('light', 'weight')\");\n            stmt.executeUpdate(\"insert into Attributes (AttributeName, Category) values ('heavy', 'weight')\");\n            stmt.executeUpdate(\"insert into Attributes (AttributeName, Category) values ('short', 'length')\");\n            stmt.executeUpdate(\"insert into Attributes (AttributeName, Category) values ('long', 'length')\");\n            stmt.executeUpdate(\"insert into ObjectAttributes (ObjectId, AttributeName) values (401, 'light')\");\n            stmt.executeUpdate(\"insert into ObjectAttributes (ObjectId, AttributeName) values (401, 'short')\");\n            stmt.executeUpdate(\"insert into ObjectAttributes (ObjectId, AttributeName) values (801, 'blue')\");\n            stmt.executeUpdate(\"insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('LEFT-WALL', '1', 'AV+ | NP+', 1)\");\n            stmt.executeUpdate(\"insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('the', '1', 'D+', 1)\");\n            stmt.executeUpdate(\"insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('big', '1', 'ADJ+', 400)\");\n            stmt.executeUpdate(\"insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('dog', '1', '[@ADJ-] & [D-] & (S+ | DO- | PO- | NP-)', 700)\");\n            stmt.executeUpdate(\"insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('run', '1', '[S-] & AV- & [PREP+]', 800)\");\n            stmt.executeUpdate(\"insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('across', '1', 'PREP- & PO+', 800)\");\n            stmt.executeUpdate(\"insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('street', '1', '[@ADJ-] & [D-] & (S+ | DO- | PO- | NP-)', 800)\");\n            stmt.executeUpdate(\"insert into AdjectivePrepositions (PrepositionName, ObjectId, LinkName) values ('with', 100, 'hasa')\");\n            stmt.executeUpdate(\"insert into AdjectivePrepositions (PrepositionName, ObjectId, LinkName) values ('in', 200, 'partof')\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'superlative', 1, 'good', 'best', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'superlative', 2, '*y', '*iest', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'superlative', 3, '*e', '*est', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'superlative', 4, '*', '*est', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'comparative', 1, 'good', 'better', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'comparative', 2, '*y', '*ier', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'comparative', 3, '*e', '*er', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'comparative', 4, '*', '*er', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'possessive', 1, '*s', '*s\\\\'', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'possessive', 2, '*', '*\\\\'s', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 1, 'be', 'being', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 2, '*Vy', '*Vying', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 3, '*c', '*cking', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 4, '*VVC', '*VVCing', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 5, '*VC', '*VCCing', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 6, '*ie', '*ying', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 7, '*e', '*ing', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 8, '*', '*ing', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 1, 'sing', 'sang', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 2, 'give', 'gave', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 3, 'swim', 'swam', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 4, 'have', 'had', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 5, 'run', 'ran', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 6, 'do', 'did', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 7, 'be', 'was', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 8, 'throw', 'threw', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 9, 'sleep', 'slept', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 10, '*c', '*cked', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 11, '*VVC', '*VVCed', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 12, '*VC', '*VCCed', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 13, '*y', '*ied', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 14, '*oe', '*oed', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 15, '*e', '*ed', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 16, '*', '*ed', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 1, 'sing', 'sung', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 2, 'give', 'given', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 3, 'swim', 'swum', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 4, 'have', 'had', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 5, 'do', 'done', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 6, 'be', 'been', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 7, 'sleep', 'slept', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 8, '*e', '*ed', FALSE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 9, '*', '*ed', FALSE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'first singular', 1, 'be', 'am', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'first singular', 2, 'have', 'have', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'first singular', 3, '*', '*', FALSE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'second singular', 1, 'be', 'are', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'second singular', 2, 'have', 'have', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'second singular', 3, '*', '*', FALSE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 1, 'be', 'is', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 2, 'have', 'has', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 3, 'do', 'do', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 4, '*ch', '*ches', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 5, '*sh', '*shes', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 6, '*x', '*xes', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 7, '*z', '*zes', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 8, '*Cy', '*Cies', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 9, '*s', '*ses', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 10, '*o', '*oes', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 11, '*', '*s', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'first plural', 1, 'be', 'are', FALSE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'first plural', 2, 'have', 'have', FALSE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'first plural', 3, '*', '*', FALSE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third plural', 1, 'be', 'are', FALSE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third plural', 2, 'have', 'have', FALSE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third plural', 3, '*', '*', FALSE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 1, 'leaf', 'leaves', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 2, 'knife', 'knives', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 3, 'elf', 'elves', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 4, 'half', 'halves', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 5, 'loaf', 'loaves', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 6, 'shelf', 'shelves', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 7, 'wife', 'wives', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 8, 'person', 'people', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 9, 'deer', 'deer', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 10, 'child', 'children', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 11, '*Co', '*Coes', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 12, '*s', '*ses', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 13, '*ch', '*ches', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 14, '*sh', '*shes', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 15, '*x', '*xes', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 16, '*z', '*zes', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 17, '*Cy', '*Cies', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 18, '*', '*s', TRUE)\");\n            stmt.executeUpdate(\"insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (1, '$N[.N]', 'D+', 100, 'money')\");\n            stmt.executeUpdate(\"insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (2, 'N/N/N', 'D+', 200, 'date')\");\n            stmt.executeUpdate(\"insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (3, '[/](C/)C', 'D+', 300, 'unix path')\");\n            stmt.executeUpdate(\"insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (4, '[A:](C\\\\\\\\)C', 'D+', 400, 'dos path')\");\n            stmt.executeUpdate(\"insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (5, 'N:N', 'D+', 500, 'time')\");\n            stmt.executeUpdate(\"insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (6, 'N.N.N.N', 'D+', 600, 'internet')\");\n            stmt.executeUpdate(\"insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (7, 'E(.E)', 'D+', 700, 'hostname')\");\n            stmt.executeUpdate(\"insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (8, '{+-}N[.N]', 'D+', 800, 'number')\");\n            stmt.executeUpdate(\"insert into Pronouns (Pronoun, Person, Gender, Plural) values ('i', 1, 3, FALSE)\");\n            stmt.executeUpdate(\"insert into Pronouns (Pronoun, Person, Gender, Plural) values ('we', 1, 3, TRUE)\");\n            stmt.executeUpdate(\"insert into Pronouns (Pronoun, Person, Gender, Plural) values ('they', 3, 3, TRUE)\");\n            stmt.executeUpdate(\"insert into Pronouns (Pronoun, Person, Gender, Plural) values ('he', 3, 1, FALSE)\");\n            stmt.executeUpdate(\"insert into Pronouns (Pronoun, Person, Gender, Plural) values ('she', 3, 2, FALSE)\");\n            stmt.executeUpdate(\"insert into Pronouns (Pronoun, Person, Gender, Plural) values ('it', 3, 3, FALSE)\");\n            stmt.executeUpdate(\"insert into Pronouns (Pronoun, Person, Gender, Plural) values ('you', 2, 3, FALSE)\");\n            stmt.executeUpdate(\"insert into FrameSlots (SlotName) values ('actor')\");\n            stmt.executeUpdate(\"insert into FrameSlots (SlotName) values ('origin')\");\n            stmt.executeUpdate(\"insert into FrameSlots (SlotName) values ('destination')\");\n            stmt.executeUpdate(\"insert into FrameSlots (SlotName) values ('object')\");\n            stmt.executeUpdate(\"insert into FrameSlots (SlotName) values ('instrument')\");\n            stmt.executeUpdate(\"insert into FrameSlots (SlotName) values ('beneficiary')\");\n            stmt.executeUpdate(\"insert into FrameSlots (SlotName) values ('location')\");\n            stmt.executeUpdate(\"insert into Verbs (VerbName, SubjectSlot, IndirectObjectSlot, PredicateNounSlot) values ('throw', 'actor', 'destination', 'object')\");\n            stmt.executeUpdate(\"insert into Verbs (VerbName, SubjectSlot, IndirectObjectSlot, PredicateNounSlot) values ('melt', 'actor', '', '')\");\n            stmt.executeUpdate(\"insert into Verbs (VerbName, SubjectSlot, IndirectObjectSlot, PredicateNounSlot) values ('kill', 'actor', '', 'object')\");\n            stmt.executeUpdate(\"insert into AdverbPrepositions (PrepositionName, ObjectId, FrameSlot) values ('with', 200, 'instrument')\");\n            stmt.executeUpdate(\"insert into AdverbPrepositions (PrepositionName, ObjectId, FrameSlot) values ('at', 1, 'location')\");\n            stmt.executeUpdate(\"insert into Articles (ArticleName, Dereference) values ('the', 1)\");\n            stmt.executeUpdate(\"insert into Articles (ArticleName, Dereference) values ('a', 2)\");\n            stmt.executeUpdate(\"insert into Articles (ArticleName, Dereference) values ('an', 2)\");\n            stmt.executeUpdate(\"insert into GrammarLinks (LinkName, LinkType) values ('S', 1)\");\n            stmt.executeUpdate(\"insert into GrammarLinks (LinkName, LinkType) values ('PN', 2)\");\n            stmt.executeUpdate(\"insert into GrammarLinks (LinkName, LinkType) values ('DO', 3)\");\n            stmt.executeUpdate(\"insert into GrammarLinks (LinkName, LinkType) values ('IO', 4)\");\n            stmt.executeUpdate(\"insert into GrammarLinks (LinkName, LinkType) values ('PO', 5)\");\n            stmt.executeUpdate(\"insert into GrammarLinks (LinkName, LinkType) values ('NP', 6)\");\n            stmt.executeUpdate(\"insert into GrammarLinks (LinkName, LinkType) values ('AV', 7)\");\n            stmt.executeUpdate(\"insert into GrammarLinks (LinkName, LinkType) values ('LV', 8)\");\n            stmt.executeUpdate(\"insert into GrammarLinks (LinkName, LinkType) values ('PREP', 9)\");\n            stmt.executeUpdate(\"insert into GrammarLinks (LinkName, LinkType) values ('D', 10)\");\n            stmt.executeUpdate(\"insert into GrammarLinks (LinkName, LinkType) values ('ADJ', 11)\");\n            stmt.executeUpdate(\"insert into GrammarLinks (LinkName, LinkType) values ('ADV', 12)\");\n            stmt.executeUpdate(\"insert into GrammarLinks (LinkName, LinkType) values ('CONJ', 13)\");\n            stmt.executeUpdate(\"insert into GrammarLinks (LinkName, LinkType) values ('INTJ', 14)\");\n            stmt.executeUpdate(\"insert into GrammarLinks (LinkName, LinkType) values ('PA', 15)\");\n            stmt.executeUpdate(\"insert into GrammarLinks (LinkName, LinkType) values ('HV', 16)\");\n            stmt.executeQuery(\"select setval('instructions_instructionid_seq', 1)\");\n            int next = 2;\n            stmt.executeUpdate(\"insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) \" + \"values (3, 'throw', null, 0, null, null, null)\");\n            stmt.executeUpdate(\"insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) \" + \"values (3, 'test', null, 0, null, null, null)\");\n            stmt.executeUpdate(\"insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) \" + \"values (2, null, 'actor', 1, 'hasa', '300', '')\");\n            stmt.executeUpdate(\"insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) \" + \"values (2, null, 'instrument', 3, null, null, 'blue')\");\n            stmt.executeUpdate(\"insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) \" + \"values (1, null, null, 0, null, null, null)\");\n            stmt.executeUpdate(\"insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) \" + \"values (3, 'get', null, 0, null, null, null)\");\n            stmt.executeUpdate(\"insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) \" + \"values (3, 'drop', null, 0, null, null, null)\");\n            stmt.executeUpdate(\"insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values (\" + (next + 2) + \", 1, \" + (next + 0) + \")\");\n            stmt.executeUpdate(\"insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values (\" + (next + 2) + \", 2, \" + (next + 1) + \")\");\n            stmt.executeUpdate(\"insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values (\" + (next + 3) + \", 1, \" + (next + 1) + \")\");\n            stmt.executeUpdate(\"insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values (\" + (next + 3) + \", 2, \" + (next + 0) + \")\");\n            stmt.executeUpdate(\"insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values (\" + (next + 4) + \", 1, \" + (next + 2) + \")\");\n            stmt.executeUpdate(\"insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values (\" + (next + 4) + \", 2, \" + (next + 3) + \")\");\n            stmt.executeQuery(\"select setval('transactions_transactionid_seq', 1)\");\n            stmt.executeUpdate(\"insert into Transactions (InstructionId, Description) values (\" + (next + 4) + \", 'throw something')\");\n            stmt.executeUpdate(\"insert into Transactions (InstructionId, Description) values (\" + (next + 5) + \", 'get something')\");\n            stmt.executeUpdate(\"insert into Transactions (InstructionId, Description) values (\" + (next + 6) + \", 'drop something')\");\n            stmt.executeUpdate(\"insert into TransactionPreconditions (TransactionId, IfFrameSlot, Operator, LinkName, LinkFrameSlot, AttributeName, SatisfyTransactionId) \" + \"values (2, 'actor', 1, 'hasa', 'object', '', 3)\");\n            stmt.executeUpdate(\"insert into TransactionPreconditions (TransactionId, IfFrameSlot, Operator, LinkName, LinkFrameSlot, AttributeName, SatisfyTransactionId) \" + \"values (2, 'object', 4, '', '', 'heavy', 4)\");\n            stmt.executeUpdate(\"insert into TransactionSlots (TransactionId, FrameSlot, InstructionId) values (2, 'object', \" + (next + 6) + \")\");\n            stmt.executeUpdate(\"insert into TransactionSlots (TransactionId, FrameSlot, InstructionId) values (2, 'destination', \" + (next + 5) + \")\");\n            stmt.executeQuery(\"select setval('verbtransactions_verbid_seq', 1)\");\n            stmt.executeUpdate(\"insert into VerbTransactions (VerbString, MoodType, TransactionId) values ('throw', 2, 2)\");\n            stmt.executeUpdate(\"insert into VerbConstraints (VerbId, FrameSlot, ObjectId) values (2, 'object', 200)\");\n            stmt.executeUpdate(\"update SystemProperties set value = 'Play Data' where name = 'DB Data Version'\");\n            conn.commit();\n        } catch (SQLException e) {\n            if (conn != null) conn.rollback();\n            throw e;\n        } finally {\n            if (stmt != null) stmt.close();\n            if (conn != null) conn.close();\n        }\n    }\n", "label": 0, "substitutes": {"testLoadSource": ["testLoadFile", " testAddSources", " testLoadSources", " testAddSource", " testloadSources", "testloadSourceFile", "testLoadSourceFile", "testLoadSources", " testAddSourceFile", " testloadSource", "testloadFile", " testloadFile", "testloadSources", " testloadSourceFile", " testAddFile", " testLoadFile", "testloadSource", " testLoadSourceFile"], "metadata": ["sample", "pdf", "definition", "material", "mt", "sheet", "my", "dirty", "wrapper", "map", "properties", "managed", "basic", "still", "detail", "manager", "met", "content", "primary", "ad", "meta", "summary", "m", "valid", "md", "license", "article", "about", "iterator", "desc", "config", "params", "dd", "message", "unknown", "payment", "tmp", "activity", "parser", "mk", "document", "template", "common", "data", "report", "password", "details", "header", "adata", "default", "json", "xml", "layout", "df", "cmd", "directory", "info", "policy"], "inputStream": ["InputForm", "inputView", "InputPresent", "dataPort", "thisPresent", "inputstream", " inputstream", "inputStreamer", "currentPort", "Inputstream", "inputPort", "currentStreamer", "loadSteam", "loadStream", "dataSteam", "inputStore", "thisSteam", "currentStream", "dataStream", "InputView", "formForm", "inputPresent", "inputSteam", "formStream", "loadstream", " inputView", "loadStore", " inputSteam", "dataStreamer", " inputForm", "inputForm", "currentSteam", " inputPresent", " inputStreamer", "thisStream", "thisView", " inputPort", "InputStream", "InputStore", " inputStore", "InputSteam", "formSteam"], "writer": ["master", "written", "string", "wrote", "riter", "handler", "wrapper", "channel", "loader", "wright", "event", "adder", "creator", "temp", "output", "manager", "storage", "reader", "walker", "network", "maker", "writ", "WR", "null", "to", "editor", "worker", "write", "unsigned", "inner", "console", "builder", "outer", "iterator", "writers", "buffer", "counter", "out", "caster", "Writer", "writing", "window", "order", "wire", "operator", "stream", "woman", "her", "w", "rew"], "contents": [" CONTodes", "Contens", "ContENT", "Contents", "utfents", "contENT", "Content", "contented", "utfented", " CONTens", "content", "Contented", "CONTented", "Contodes", "CONTent", " CONTENT", "CONTents", "utfent", " CONTents", " contens", " contENT", "contens", "contodes", " contodes"]}}
{"id1": "10131427", "id2": "335223", "code1": "    public static void copyFile(File in, File out) throws IOException {\n        FileChannel sourceChannel = new FileInputStream(in).getChannel();\n        FileChannel destinationChannel = new FileOutputStream(out).getChannel();\n        sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);\n        sourceChannel.close();\n        destinationChannel.close();\n    }\n", "code2": "    private static void readAndRewrite(File inFile, File outFile) throws IOException {\n        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n        Dataset ds = DcmObjectFactory.getInstance().newDataset();\n        dcmParser.setDcmHandler(ds.getDcmHandler());\n        dcmParser.parseDcmFile(null, Tags.PixelData);\n        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        System.out.println(\"reading \" + inFile + \"...\");\n        pdReader.readPixelData(false);\n        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n        ds.writeDataset(out, dcmEncParam);\n        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n        System.out.println(\"writing \" + outFile + \"...\");\n        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        pdWriter.writePixelData();\n        out.flush();\n        out.close();\n        System.out.println(\"done!\");\n    }\n", "label": 1, "substitutes": {"copyFile": [" copyStream", " cpStream", " Copyfile", " cpfile", " CopyStream", " copyfile", " CopyFile", "CopyFile", " cpFile", "Copyfile", "CopyImage", " CopyImage", "CopyStream", " cpImage", " copyImage"], "in": ["ic", "en", "b", "is", "inf", "old", "st", "up", "cin", "from", "edIn", "r", "IN", "inc", "i", "n", "ar", "on", "o", "s", "din", "vin", "isin", "input", "ind", "mm", "gin", "source", "In", "el", "ins", "rin", "l", "it", "inn"], "out": ["err", "v", "serv", "log", "file", "str", "io", "help", "b", "t", "po", "ot", "nt", "output", "ex", "n", "check", "i", "to", "gt", "o", "net", "s", "oss", "ch", "OUT", "Out", "l", "it", "ou", "outs", "ne", "os", "w"], "sourceChannel": ["matchApplication", "ourceChannel", "srcchannel", "seedButton", "inputConnection", "sourceChuck", "sourceChan", "seedApplication", "sourceButton", " sourceConnection", "inputChain", "singleApplication", "sourceStream", " sourceChain", "SourceChannel", "inputChan", "resourceStream", "resourceChannel", "srcStream", " sourceButton", "singleChannel", "Sourcechannel", "ourceConnection", "seedChannel", "inputChannel", "sourceConnection", "sourceApplication", " sourceChan", "ourceButton", "singleChuck", "matchChuck", "ourceChan", "SourceStream", "resourceConnection", "sourceChain", "ourceChain", "singleButton", " sourcechannel", "srcChannel", "resourcechannel", "matchButton", "sourcechannel", "matchChannel", "seedChuck", "srcButton", "SourceConnection", " sourceStream", "ourceStream", "ourcechannel"], "destinationChannel": ["destationConnection", "destinatedContext", "destensionChan", "destinatoryChannel", "desticationBlock", "DestationCow", "destinationBlock", "destroyClient", "destinatedChannel", "DestinationCow", "destensionClient", "desticationChannel", "destinatedConnection", "DestensionChannel", "DestensionConnection", "DestationConnection", "destinationsContext", "destationCow", "DestinationConnection", "DestinationChannel", "DestinationClient", "DestensionClient", "destroyChan", "DestationContext", "desticationCow", "destinatoryCow", "destensionConnection", "destinationsConnection", "destinatoryChan", "DestensionChan", "DestinationBlock", "destinationCow", "destinationClient", "destroyChannel", "destinationContext", "destationChannel", "DestationChan", "desticationChan", "destinationsChan", "DestationBlock", "DestinationContext", "destationBlock", "DestinationChan", "destationClient", "destationChan", "destinationsChannel", "destensionChannel", "destinationChan", "destinatoryBlock", "destinatedChan", "destinationConnection", "destroyConnection", "DestationChannel", "destationContext"]}}
{"id1": "15799935", "id2": "21092340", "code1": "    public static void saveAttachmentBody(Context context, Part part, Attachment localAttachment, long accountId) throws MessagingException, IOException {\n        if (part.getBody() != null) {\n            long attachmentId = localAttachment.mId;\n            InputStream in = part.getBody().getInputStream();\n            File saveIn = AttachmentProvider.getAttachmentDirectory(context, accountId);\n            if (!saveIn.exists()) {\n                saveIn.mkdirs();\n            }\n            File saveAs = AttachmentProvider.getAttachmentFilename(context, accountId, attachmentId);\n            saveAs.createNewFile();\n            FileOutputStream out = new FileOutputStream(saveAs);\n            long copySize = IOUtils.copy(in, out);\n            in.close();\n            out.close();\n            String contentUriString = AttachmentProvider.getAttachmentUri(accountId, attachmentId).toString();\n            localAttachment.mSize = copySize;\n            localAttachment.mContentUri = contentUriString;\n            ContentValues cv = new ContentValues();\n            cv.put(AttachmentColumns.SIZE, copySize);\n            cv.put(AttachmentColumns.CONTENT_URI, contentUriString);\n            Uri uri = ContentUris.withAppendedId(Attachment.CONTENT_URI, attachmentId);\n            context.getContentResolver().update(uri, cv, null, null);\n        }\n    }\n", "code2": "    public static URL addToArchive(Pod pod, ZipOutputStream podArchiveOutputStream, String filename, InputStream source) throws IOException {\n        ZipEntry entry = new ZipEntry(filename);\n        podArchiveOutputStream.putNextEntry(entry);\n        IOUtils.copy(source, podArchiveOutputStream);\n        podArchiveOutputStream.closeEntry();\n        return PodArchiveResolver.withinPodArchive(pod, filename);\n    }\n", "label": 1, "substitutes": {"saveAttachmentBody": ["saveAttachableFile", "saveAttachmentFile", "saveAttachmentPart", "saveAttachedBody", "saveAttentionBody", "saveAttachedFile", "saveExtachedPart", "saveAttachablePart", "saveAttentionFile", "saveAttachedbody", "saveExtachmentFile", "saveExtachedFile", "saveExtachedBody", "saveAttachedPart", "saveExtachedbody", "saveAttachmentbody", "saveAttachableBody", "saveExtachmentPart", "saveAttentionbody", "saveAttachablebody", "saveExtachmentBody", "saveExtachmentbody", "saveAttentionPart"], "context": ["course", "system", "search", "background", "contact", "subject", "java", "parent", "ce", "component", "history", "service", "stack", "current", "comments", "network", "content", "ctx", "view", "null", "center", "connection", "instance", "host", "present", "cc", "config", "cf", "message", "environment", "container", "support", "foundation", "frame", "template", "client", "Context", "document", "media", "application", "chain", "version", "response", "request", "cache", "tx", "state", "translation", "command"], "part": ["pod", "sample", "trans", "bound", "file", "p", "post", "pair", "parent", "component", "join", "PART", "start", "zone", "temp", "se", "work", "thread", "block", "session", "connection", "instance", "piece", "host", "base", "job", "parts", "message", "sp", "tmp", "art", "name", "Part", "patch", "data", "add", "report", "top", "and", "version", "task", "tx", "reply", "body", "type", "partial", "word"], "localAttachment": ["localAssachment", " localAttached", "localAttachached", " localAttignment", "localDetignment", " localAssached", "localAcachment", " localDetached", " localDetail", "localDetached", "localAppachment", " localDetachment", "localAttachail", "localAttachignment", "localAssention", " localAttachention", "localattention", "localAssment", "localAttignment", " localAttachignment", "localAttachention", "localAttachachment", "localAttail", "localAttention", "localATTignment", "localAcail", " localAttachachment", " localAttail", "localattached", "localAppention", "localAssignment", "localAttached", " localDetignment", "localAcignment", "localDetention", "localAssail", "localATTachment", "localAppail", "localAttment", "localDetail", "localATTention", "localATTment", "localattachment", "localAssached", " localAttachached", " localAssail", " localAssachment", " localAttment", "localAcached", "localAppached", " localAttention", " localAssention", "localDetachment"], "accountId": ["objectName", "objectID", " accountDb", "containerId", "bankId", "accountID", "AccountById", "bankS", "accountNum", "accountDb", " accountById", " accountS", "accS", "bankAnd", "amountDb", "accId", "AccountID", "AccountId", "accountName", "amountInt", "accNum", "accID", "accountS", " accountName", " accountID", "amountId", "accountAnd", "accInt", "bankID", "accDb", "containerNum", "accountById", "containerInt", "accAnd", " accountAnd", "AccountName", "accountInt", "containerID", "amountID", "objectId", "objectById", " accountInt", " accountNum"], "attachmentId": ["contachmentId", "contachmentid", "attionId", "contachmentById", "AttociationById", "attachmentById", "assachmentById", "Attociationid", "AttachmentId", "assignmentId", "assignmentid", "assachmentID", "attignmentID", "contachedById", "attociationid", "assachmentId", "assachmentid", "attociationID", "AttociationID", "attmentId", "attionid", "attachmentID", "attociationSerial", "AttociationId", "attacheID", "attacheById", "contachmentSerial", "attachedById", "attmentID", "attacheid", "attachmentSerial", "attociationById", "attionById", "attachmentid", "attachedID", "contachedSerial", "assignmentID", "attachedId", "attociationId", "AttachmentID", "attignmentid", "contachedId", "attignmentById", "assignmentById", "Attachmentid", "contachedid", "attionSerial", "attmentid", "attmentById", "attignmentId", "attachedSerial", "attachedid", "attacheId", "AttachmentById"], "in": ["mc", "file", "en", "p", "id", "is", "inf", "per", "up", "al", "cin", "from", "conf", "r", "act", "ex", "IN", "inc", "i", "inner", "inside", "m", "on", "as", "iter", "din", "raw", "init", "ch", "all", "vin", "isin", "input", "ind", "mm", "read", "gin", "In", "source", "ai", "ins", "rin", "sum", "l", "it", "info", "bin", "body", "con", "inn"], "saveIn": ["storeOut", "savIn", "secureAs", " saveOut", "saveIN", "sendOut", "sendPath", "storePath", "getIN", " saveIN", "sendIN", " saveIns", "aveIn", "savAs", "secureIn", "sendIn", "saveOut", "getOut", "secureIns", "storeIn", "savePath", "secureIN", "aveIN", "getIns", " savePath", "savIN", "aveOut", "saveIns", "getIn", "aveIns", "savIns", "storeIN"], "saveAs": ["aveAn", " saveAn", "dumpTo", "Saveas", "saveAS", "saveAn", "SaveIn", "SaveAS", "aveAS", "submitIn", "aveAs", " saveAS", " saveTo", " saveBy", "aveIn", "saveTo", "dumpAn", "dumpAs", "submitBy", "submitas", "submitAs", "SaveBy", "saveBy", "SaveAs", "aveas", "saveas", "submitAS", "aveTo"], "out": ["os", "v", "serv", "cos", "log", "OU", "io", "t", "conv", "obj", "up", "aos", "output", "copy", "inv", "to", "null", "ex", "i", "n", "inner", "res", "gc", "auto", "outer", "o", "net", "oss", "cn", "all", "name", "sys", "OUT", "one", "ao", "Out", "sum", "it", "ent", "ou", "outs", "can", "co", "con"], "copySize": ["likeCount", "copyCount", "pushLength", "msgSIZE", "opySIZE", "copyFontSize", "likeSize", "CopyPercent", "pushFontSize", " copyCount", "copySIZE", "CopyCount", "pushCount", "opySize", " copyLength", "msgSize", "CopyFontSize", "msgLength", "opyLength", "likeFontSize", "copyLength", " copyFontSize", "msgPercent", "CopySize", "CopySIZE", "copyPercent", "CopyLength", "pushSize", "likeLength", "opyPercent"], "contentUriString": ["contentIriStr", "contentUrisString", "contentUistring", "contentIiStatic", "contentIiStr", "contentUriStr", "contentUniStr", "contentUnristring", "contentUnuriNumber", "contentUuriStatic", "contentUnuriStr", "contentUnistring", "contentIriString", "contentUuriNumber", "contentUiStatic", "contentUuristring", "contentUnuristring", "contentUristring", "contentUriStatic", "contentUicString", "contentUniString", "contentUnuriString", "contentUriNumber", "contentUiStr", "contentUuriStr", "contentUniNumber", "contentUrisNumber", "contentUiString", "contentUrisStr", "contentUnriNumber", "contentUnriString", "contentUnriStr", "contentUrisstring", "contentIristring", "contentIriStatic", "contentUicstring", "contentIiString", "contentUuriString", "contentIistring", "contentUicStr", "contentUicStatic"], "mSize": ["mLength", "moBytes", "lPos", "lSize", "lBytes", "moLength", "mBytes", "nLength", "nBytes", "lLength", "nPos", "mPos", "moSize", "nSize", "moPos"], "mContentUri": ["mContentUuid", "mResourceUris", "mContentUris", "mResourceUuid", "mResourceIuid", "mContentPuid", "mContentURI", "mContent_RI", "mContentIris", "mContentIuid", "mContentPRI", "mResourceURI", "mContent_ris", "mContentIRI", "mContent_uid", "mContentPri", "mResourceUri", "mContentPris", "mResourceIris", "mResourceIRI", "mResourceIri", "mContent_ri", "mContentIri"], "cv": ["CV", "ev", "cmp", "v", "nv", "pb", "fc", "mult", "vp", "qu", "cu", "vt", "conv", "lv", "vr", "ctrl", "const", "lc", "cp", "cod", "c", "act", "box", "vol", "uv", "cc", "vm", "gc", "csv", "cf", "desc", "ct", "cn", "cap", "vv", "av", "xc", "cm", "nc", "sv", "GV", "cont", "qv", "ov", "cb", "rc", "tc", "vc", "buf", "um", "dc", "cas"], "uri": ["du", "subject", "address", "picture", "bid", "dir", "term", "id", "resource", "uni", "component", "uid", "doi", "phi", "ri", "url", "range", "i", "query", "URI", " ni", "link", " URI", "prefix", "result", " Uri", "ur", "q", "ue", "u", "iri", "qi", "folder", "report", "uu", "handle", "ip", "directory", "ui", "unit", "origin"]}}
{"id1": "6190356", "id2": "16549995", "code1": "    public static String hashPasswordForOldMD5(String password) {\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            md.update(password.getBytes(\"UTF-8\"));\n            byte messageDigest[] = md.digest();\n            StringBuffer hexString = new StringBuffer();\n            for (int i = 0; i < messageDigest.length; i++) {\n                String hex = Integer.toHexString(0xFF & messageDigest[i]);\n                if (hex.length() == 1) {\n                    hexString.append('0');\n                }\n                hexString.append(hex);\n            }\n            return hexString.toString();\n        } catch (NoSuchAlgorithmException nsae) {\n            throw new IllegalStateException(nsae.getMessage());\n        } catch (UnsupportedEncodingException uee) {\n            throw new IllegalStateException(uee.getMessage());\n        }\n    }\n", "code2": "    public static String mysqlPasswordHash(String string) {\n        try {\n            MessageDigest digest = MessageDigest.getInstance(HashAlgorithms.SHA1);\n            try {\n                digest.update(string.getBytes(\"UTF-8\"));\n            } catch (UnsupportedEncodingException e) {\n                throw new RuntimeException(e);\n            }\n            byte[] encodedPassword = digest.digest();\n            digest.update(encodedPassword);\n            encodedPassword = digest.digest();\n            String hash = new BigInteger(1, encodedPassword).toString(16).toUpperCase();\n            while (hash.length() < 40) {\n                hash = \"0\" + hash;\n            }\n            return \"*\" + hash;\n        } catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n        }\n    }\n", "label": 1, "substitutes": {"hashPasswordForOldMD5": [" hashPasswordForOldMD4", " hashPasswordForOldMB1", " hashPasswordForOldSHA5", " hashPasswordForoldMD4", " hashPasswordForOldSHAHash", " hashPasswordForoldMDHash", " hashPasswordForoldMD1", " hashPasswordForOldMDHash", " hashPasswordForOldSHA1", " hashPasswordForOldMB5", " hashPasswordForOldMB4", " hashPasswordForOldSHA4", " hashPasswordForoldMD5", " hashPasswordForOldMBHash", " hashPasswordForOldMD1"], "password": ["text", "secret", "address", "description", "string", "p", "hash", "phrase", "Password", "shadow", "username", "attribute", "pattern", "wordpress", "prefix", "padding", "message", "command", "raw", "database", "pass", "user", "input", "name", "sword", "data", "reset", "value", "token", "login", "default", "words", "wd", "entry", "word"], "md": ["d", "mc", "cmp", "dr", "pdf", "dir", "pd", "ld", "mt", "mod", "mode", "di", " MD", "sm", "de", "deep", "red", "det", "m", "down", "pm", "ct", "sd", "ms", "dd", "mand", "hd", "dig", "mm", "ds", "mk", "cd", "ind", "od", "bd", "add", "mn", "sha", "dm", "and", "der", "dh", "df", "mb", "cmd", "grad", "MD", "del", " Md"], "messageDigest": ["messageDatatest", "messageDigist", "messageDigtest", "MessagedigEST", "messageDigested", "messagedigested", "Messagedigse", "Messagedigest", "Messagedigtest", "messageDriist", "messageDataester", "messageWithist", "messagedigEST", " messagedigist", "messageDigse", "messageDrise", "Messagedigear", "messageDigitalEST", "MessageDigest", "messageWithse", "messageDataEST", "MessageDigse", "MessageDigear", "messageDigester", "messageDigEST", "MessageDigester", "messageDesignest", "messagedigest", " messageDigist", "messageWithest", "messagedigtest", "messageDriest", "messagedigist", "messageWithear", "messageDriear", "MessageDigtest", "messageDigitalested", "messageDigitalest", " messagedigested", "messagedigear", " messagedigEST", "messageDesignEST", "Messagedigester", "messageDesignist", "messageDesignested", "messageDigitalist", " messagedigest", " messageDigested", " messageDigEST", "messageDigear", "messageDataest", "MessageDigist", "MessageDigEST", "messagedigse", "Messagedigist", "messagedigester"], "hexString": ["octstring", "hexstring", "octString", "phpSite", "hexChain", "colorBuffer", "colorString", " hexStr", "hexBuffer", "hexSingle", " hexBuffer", "phpChain", "hexResponse", "phpBuffer", " HexString", " HexResponse", "octResponse", " HexSet", "exSingle", "hexSet", " hexResponse", " HexStr", "phpRest", "colorSet", "phpStr", " hexstring", " hexSingle", "colorStr", " Hexstring", " HexBuffer", " HexChain", "exBuffer", " hexArray", "hexRest", "hexStr", " HexRest", "phpSingle", " hexSet", "exString", "exStr", " hexChain", " HexArray", " hexSite", "hexSite", "octArray", "phpString", "hexArray", " hexRest", " HexSite"], "i": ["ti", "ji", "I", "ic", "zi", "li", "id", "gi", "my", "is", "di", "e", "t", "ii", "z", "in", "conv", "j", "phi", "mi", "si", "index", "c", "ini", "n", "a", "pi", "ci", "m", "ski", "yi", "uri", "o", "set", "loop", "multi", "q", "init", "ie", "ind", "gu", "u", "ij", "x", "qi", "im", "key", "chain", "ai", "ix", "sim", "ip", "it", "g", "bi", "ui", "hi", "y"], "hex": ["sex", "solid", "h", "alph", "tex", "EX", "pex", "prof", "rex", "print", "row", "rendered", " Hex", "php", "mix", "percent", "oct", "ex", "ext", "check", "red", "zip", "ph", "html", "dump", "cf", "def", "form", "com", "br", "serial", "comp", "raw", "xf", "exp", "imal", "hl", "x", "cont", "sv", "hello", "lit", "json", "it", "hi", "tx", "full", "none", "prop", "sh", "flash"]}}
{"id1": "20414923", "id2": "7843322", "code1": "    protected int deleteBitstreamInfo(int id, Connection conn) {\n        PreparedStatement stmt = null;\n        int numDeleted = 0;\n        try {\n            stmt = conn.prepareStatement(DELETE_BITSTREAM_INFO);\n            stmt.setInt(1, id);\n            numDeleted = stmt.executeUpdate();\n            if (numDeleted > 1) {\n                conn.rollback();\n                throw new IllegalStateException(\"Too many rows deleted! Number of rows deleted: \" + numDeleted + \" only one row should be deleted for bitstream id \" + id);\n            }\n        } catch (SQLException e) {\n            LOG.error(\"Problem deleting bitstream. \" + e.getMessage(), e);\n            throw new RuntimeException(\"Problem deleting bitstream. \" + e.getMessage(), e);\n        } finally {\n            cleanup(stmt);\n        }\n        return numDeleted;\n    }\n", "code2": "    public void run(IAction action) {\n        int style = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell().getStyle();\n        Shell shell = new Shell((style & SWT.MIRRORED) != 0 ? SWT.RIGHT_TO_LEFT : SWT.NONE);\n        GraphicalViewer viewer = new ScrollingGraphicalViewer();\n        viewer.createControl(shell);\n        viewer.setEditDomain(new DefaultEditDomain(null));\n        viewer.setRootEditPart(new ScalableFreeformRootEditPart());\n        viewer.setEditPartFactory(new TableEditPartFactory());\n        viewer.setContents(getContents());\n        viewer.flush();\n        int printMode = new PrintModeDialog(shell).open();\n        if (printMode == -1) return;\n        PrintDialog dialog = new PrintDialog(shell, SWT.NULL);\n        PrinterData data = dialog.open();\n        if (data != null) {\n            PrintGraphicalViewerOperation op = new PrintGraphicalViewerOperation(new Printer(data), viewer);\n            op.setPrintMode(printMode);\n            op.run(selectedFile.getName());\n        }\n    }\n", "label": 0, "substitutes": {"deleteBitstreamInfo": ["deletebitStreamInfo", "deleteBitstreamINFO", "deletebitStreamINFO", "deletebitStreamInformation", "deleteBitstreamInf", "deletebitstreamInf", "deleteBitlogINFO", "deleteBitStreamINFO", "deleteBitmapInf", "deletebitstreamInfo", "deleteBitlogInformation", "deleteBitStreamInfo", "deleteBitStreamInformation", "deleteBitlogInf", "deleteBitmapINFO", "deleteBitstreamInformation", "deleteBitmapInformation", "deletebitStreamInf", "deleteBitStreamInf", "deletebitstreamInformation", "deletebitstreamINFO", "deleteBitmapInfo", "deleteBitlogInfo"], "id": ["d", "item", "rid", "bid", "number", "sequence", "p", " fid", "parent", "uid", "k", "mid", "event", "t", "num", "hash", "ids", "obj", "no", "aid", "record", "sid", "url", "index", "kid", "n", "i", "connection", "ad", "status", "ID", "md", "table", "result", "vid", "ident", "pid", "db", "Id", "ide", "name", "oid", "data", "one", "key", "and", "addr", "version", "it", "info", "ref", "type", "entry", "size"], "conn": ["mc", "cur", "pt", "gate", "ws", "obj", "Conn", "nt", "bind", "ca", "pg", "open", "conf", "Connection", "comm", "cp", "ctx", "session", "connection", "res", "cs", "cc", "close", "ns", "col", "ct", "ann", "connect", "cn", "sql", "ch", "db", "yn", "client", "ait", "cm", "nc", "addr", "exec", "enc", "handle", "cmd", "pool", "gc", "con"], "stmt": ["tmr", "Stmp", "ctnt", "strtx", "stmb", "stmr", "stmp", "ctMT", "StMT", " sttx", " stm", "Stgr", "sttx", "stMT", "stpt", "Stpt", " stmb", "Stem", "istmm", "strm", "stem", "strmb", "tm", " stem", "istmt", "ctmt", "Sttx", "Stmt", " stgr", "Stm", "ctpt", "stmm", "stnt", "stgr", "istm", "strgr", " stmm", "Stmb", " stmp", " stpt", "strmp", " stmr", "strem", "stm", " stnt", "tmm", "Stnt", "istmr", " stMT", "tmt", "strmt"], "numDeleted": ["nomDEleted", "numDroleted", "numDElected", "NUMDEletes", "umDecanted", "numDeued", "umDeanted", "umDecleted", "nomDEued", "numDuued", "numExued", "numDulated", "numdelete", "numDeoved", "umDeslected", "numTeleted", "numDuleted", "numDellected", "numDeletes", "numDeclected", "numDuarted", "numUnlected", "numUnoved", "numTearted", "numDecanted", "umDeoved", "numDeslated", "numDEued", "nomDeined", " numDemitted", "numUnlete", "numDEanted", "numDEletes", "NUMDelected", "numDelete", "numDecleted", "numDEared", "nomDeoved", "numDecletes", "numDesoved", "numTemitted", "numDelleted", "numDelected", "nomDeued", "umDesleted", "NUMDEared", "umDeleted", "numDelletes", "numDEoved", "umDeclet", "nomDEined", "numDesarted", "numDeined", " numDeslated", "numExined", "numDuined", " numDesleted", " numDesmitted", "umDelected", "numDelated", "numDesleted", "numDeclet", "numdeoved", "umDesoved", "NUMDeleted", "NUMDeletes", "numDeclete", "numDElet", "numDesmitted", " numDelated", "numUnleted", "numDeslete", "numDroanted", "numDuoved", "numdelected", "umDeslete", "umDelet", "numDumitted", "numDEleted", " numDearted", "numDElete", "numDEined", "numTelated", "numExoved", "numExleted", "numDrolete", "numDemitted", "umDelete", "numDelet", "NUMDeared", "numDeslected", "numDecared", "nomDEoved", "numDeared", "nomDeleted", "NUMDElected", "numDearted", "numdeleted", "numDelared", " numDesarted", "numDrolet", "numDeanted", "umDeclete", "NUMDEleted"]}}
{"id1": "23666973", "id2": "5543349", "code1": "    private InputStream openStreamRaw(String filename) {\n        InputStream stream = null;\n        if (filename == null) return null;\n        if (filename.length() == 0) {\n            return null;\n        }\n        try {\n            URL url = new URL(filename);\n            stream = url.openStream();\n            return stream;\n        } catch (MalformedURLException mfue) {\n        } catch (FileNotFoundException fnfe) {\n        } catch (IOException e) {\n            e.printStackTrace();\n            return null;\n        }\n        ClassLoader cl = getClass().getClassLoader();\n        stream = cl.getResourceAsStream(\"data/\" + filename);\n        if (stream != null) {\n            String cn = stream.getClass().getName();\n            if (!cn.equals(\"sun.plugin.cache.EmptyInputStream\")) {\n                return stream;\n            }\n        }\n        stream = cl.getResourceAsStream(filename);\n        if (stream != null) {\n            String cn = stream.getClass().getName();\n            if (!cn.equals(\"sun.plugin.cache.EmptyInputStream\")) {\n                return stream;\n            }\n        }\n        return stream;\n    }\n", "code2": "    public UserFunction loadMFileViaWeb(URL codeBase, String directoryAndFile, String mFileName) {\n        String code = \"\";\n        UserFunction function = null;\n        ErrorLogger.debugLine(\"MFileLoader: loading >\" + mFileName + \".m<\");\n        try {\n            URL url = new URL(codeBase, directoryAndFile);\n            InputStream in = url.openStream();\n            BufferedReader inReader = new BufferedReader(new InputStreamReader(in));\n            String line;\n            while ((line = inReader.readLine()) != null) {\n                code += line + \"\\n\";\n            }\n            inReader.close();\n        } catch (Exception e) {\n            Errors.throwMathLibException(\"MFileLoader: m-file exception via web\");\n        }\n        ErrorLogger.debugLine(\"MFileLoader: code: begin \\n\" + code + \"\\ncode end\");\n        FunctionParser funcParser = new FunctionParser();\n        function = funcParser.parseFunction(code);\n        function.setName(mFileName);\n        ErrorLogger.debugLine(\"MFileLoader: finished webloading >\" + mFileName + \".m<\");\n        return function;\n    }\n", "label": 0, "substitutes": {"openStreamRaw": ["openFileRaw", "loadSteamInternal", "openResourceRAW", "loadStreamInternal", "openResourceInternal", "loadSteamRaw", "openSteamInternal", "openResourceRaw", "openStreamRAW", "openFileSimple", "openFileInternal", "openSteamSimple", "loadStreamRaw", "openSteamRaw", "openResourceSimple", "openSteamRAW", "openFileRAW", "openStreamSimple", "openStreamInternal", "loadSteamRAW", "loadStreamRAW", "loadSteamSimple", "loadStreamSimple"], "filename": ["river", "nil", "path", "subject", "description", "java", "string", "file", "fil", "sequence", "txt", "missing", "LCS", "src", "kl", "FILE", "length", "ame", "bol", "whatever", "nm", "ename", "username", "original", "ren", "wikipedia", "til", "title", "Filename", "location", "f", "uri", "stem", "initial", "mson", "prefix", "message", "journal", "fp", "png", "reference", "download", "println", "name", "fn", "upload", "document", "jpg", "source", "bf", "mpeg", "metadata", "lua", "directory", "sql", "word"], "stream": ["local", "sample", "sw", "wrapper", "Stream", "test", "conv", "stack", "export", "output", "pipe", "content", "present", "console", "ssl", "iterator", "poll", "trace", "engine", "dd", "input", "load", "source", "list", "shape", "window", "peer", "pool", "proc", "find", "then", "filter", "back", "clean", "open", "check", "instance", "status", "valid", "iter", "set", "loop", "get", "read", "http", "socket", "rest", "chain", "next", "body", "where", "sl", "head", "log", "parent", "transform", "channel", "old", "event", "history", "still", "control", "view", "port", "zip", "form", "buffer", "message", "result", "impl", "upload", "cont", "response", "sync", "pod", "file", "resource", "store", "length", "context", "row", "reader", "feed", "link", "table", "draw", "download", "ream", "mount", " Stream", "temp", "collection"], "url": ["build", "sl", "gl", "path", "lr", "fl", "file", "Url", "str", "nl", "kl", "resource", "mail", "b", "char", "browser", "ls", "call", "r", "external", "dl", "ll", "pl", "ssl", "link", "uri", "rel", "URL", "job", "web", "loc", "ur", "impl", "hl", "bel", "http", "rl", "mount", "pkg", "l", "mb", "cal", "ul"], "cl": ["CL", "gl", "fl", "scl", "fc", "decl", "log", "lp", "Cl", "kl", "lf", "loader", "class", "ctrl", "comm", "lc", "ocl", "c", "dl", "ctx", "dll", "pl", "ll", "cr", "ssl", "cc", "cf", "cle", "ct", "sc", "com", "ck", "impl", "acl", "hl", "cm", "load", "rl", "el", "tc", "sh"], "cn": ["uan", "cv", "osen", "avan", "wn", "nic", "unc", "oul", "nn", "tan", "unn", "ocon", "aren", "dn", "cin", "hn", "tun", "bean", "ns", "csv", "cf", "ct", "non", "atten", "conn", "arn", "cap", "yn", "jc", "cdn", "nan", "fn", "cm", "nc", "pan", "bn", "ern", "mn", "gn", "san", "crow", "enn", "CN", "sen", "tn", "css", "can", "gc", "pn", "CNN", "rn"]}}
{"id1": "12039034", "id2": "16063533", "code1": "    public static ArrayList<RoleName> importRoles(String urlString) {\n        ArrayList<RoleName> results = new ArrayList<RoleName>();\n        try {\n            URL url = new URL(urlString);\n            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n            StringBuffer buff = new StringBuffer();\n            String line;\n            while ((line = in.readLine()) != null) {\n                buff.append(line);\n                if (line.equals(\"</RoleName>\")) {\n                    RoleName name = ProfileParser.parseRoleName(buff.toString());\n                    results.add(name);\n                    buff = new StringBuffer();\n                } else {\n                    buff.append(NL);\n                }\n            }\n        } catch (MalformedURLException e) {\n        } catch (IOException e) {\n        } catch (ParsingException e) {\n        }\n        return results;\n    }\n", "code2": "    public static byte[] encrypt(String x) throws Exception {\n        java.security.MessageDigest d = null;\n        d = java.security.MessageDigest.getInstance(\"SHA-1\");\n        d.reset();\n        d.update(x.getBytes());\n        return d.digest();\n    }\n", "label": 0, "substitutes": {"importRoles": [" importRules", "importPoles", "importPles", " importRles", "importResoles", "importRole", "importPules", "importResole", "importPole", " importRole", "importResles", "importRles", "importRules", "importResules"], "urlString": ["UrlString", "uriSource", "urlSource", " urlstring", " urlRest", " URLList", " URLRest", "UrlStr", "urlstring", "UrlSource", " curlRest", " curlList", "uriString", "uriStr", " curlString", "uristring", " URLStr", " curlStr", " URLString", " urlList", " urlStr", "urlRest", "urlStr", " urlSource", "urlList", "Urlstring"], "results": ["tests", "settings", "pieces", "places", "forms", "features", "prints", "objects", "modules", "ults", "works", "properties", "abilities", "rings", "artifacts", "finals", "tops", "blocks", "reports", "users", "parents", "olds", "rates", "images", "RESULTS", "res", "chains", "games", "ces", "maps", "csv", "options", "es", "times", "products", "Results", "result", "locks", "s", " Results", "parts", "reads", "its", "changes", "vals", "relations", "ands", "successful", "posts", "items", "details", "uploads", "rows", "photos", "helps", "runs", "outs", "sets", "roots", "values"], "url": ["sl", "gl", "file", "Url", "p", "ret", "str", "nl", "resource", "mail", "b", "char", "browser", "open", "re", "r", "dl", "ll", "pl", "ssl", "link", "f", "uri", "base", "rel", "URL", "web", "loc", "get", "ur", "q", "u", "http", "mount", "el", "l", "lb", "ul"], "in": ["serv", "file", "by", "io", "is", "inf", "cin", "from", "conf", "reader", "IN", "inc", "i", "inner", "m", "on", "f", "fs", "iter", "buffer", "out", "din", "get", "doc", "input", "ind", "In", "and", "el", "ins", "rin", "sum", "l", "bin", "body", "ill", "con", "inn"], "buff": ["build", "aux", "bed", "zz", "ack", "qq", "pdf", "pb", "alph", "bound", "urg", "txt", "prof", "b", "bg", "conv", "bind", "rend", "grow", "printf", "butt", "row", "nd", "bb", "raf", "bo", "ff", "uff", "tf", "mem", "zip", "builder", "col", "supp", "tm", "fb", "form", "buffer", "sb", "bs", "comp", "tmp", "ck", "bm", "roc", "tab", "Buff", "cb", "uf", "ob", "mb", "cmd", "hold", "buf", "Buffer", "quit", "off", "fr", "cond"], "line": ["text", "ln", "sample", "cell", "string", "log", "file", "str", "nl", "inline", "point", "channel", "lf", "e", "msg", "stroke", "no", "row", "record", "len", "email", "range", "n", "ice", "block", "node", "label", "code", "link", "note", "iter", "buffer", "pe", "page", "lin", "out", "command", "lo", "frame", "liner", "comment", "lines", "lane", "ine", "le", "eline", "chain", "header", "Line", "l", "LINE", "cmd", "body", "entry", "word"], "name": ["system", "number", "nam", "string", "sequence", "member", " names", "id", "part", "ame", "num", "zone", "nm", "ename", "names", "NAME", "ni", "named", "n", "node", "alias", "mem", "profile", "instance", "title", "person", "role", "ns", " NAME", "prefix", "cn", "ident", "cap", "Name", "common", "spe", "value", "key", "qual", "group", " Name"]}}
{"id1": "7872659", "id2": "14764852", "code1": "    private static boolean genCustRatingFileAndMovieIndexFile(String completePath, String masterFile, String CustRatingFileName, String MovieIndexFileName) {\n        try {\n            File inFile = new File(completePath + fSep + \"SmartGRAPE\" + fSep + masterFile);\n            FileChannel inC = new FileInputStream(inFile).getChannel();\n            File outFile1 = new File(completePath + fSep + \"SmartGRAPE\" + fSep + MovieIndexFileName);\n            FileChannel outC1 = new FileOutputStream(outFile1, true).getChannel();\n            File outFile2 = new File(completePath + fSep + \"SmartGRAPE\" + fSep + CustRatingFileName);\n            FileChannel outC2 = new FileOutputStream(outFile2, true).getChannel();\n            int fileSize = (int) inC.size();\n            int totalNoDataRows = fileSize / 7;\n            ByteBuffer mappedBuffer = inC.map(FileChannel.MapMode.READ_ONLY, 0, fileSize);\n            int startIndex = 1, count = 0;\n            short currentMovie = 1;\n            while (mappedBuffer.hasRemaining()) {\n                count++;\n                short movieName = mappedBuffer.getShort();\n                int customer = mappedBuffer.getInt();\n                byte rating = mappedBuffer.get();\n                if (movieName != currentMovie) {\n                    ByteBuffer outBuf1 = ByteBuffer.allocate(10);\n                    outBuf1.putShort(currentMovie);\n                    outBuf1.putInt(startIndex);\n                    outBuf1.putInt(count - 1);\n                    outBuf1.flip();\n                    outC1.write(outBuf1);\n                    currentMovie = movieName;\n                    startIndex = count;\n                }\n                ByteBuffer outBuf2 = ByteBuffer.allocate(5);\n                outBuf2.putInt(customer);\n                outBuf2.put(rating);\n                outBuf2.flip();\n                outC2.write(outBuf2);\n            }\n            ByteBuffer endOfIndexFile = ByteBuffer.allocate(10);\n            endOfIndexFile.putShort(currentMovie);\n            endOfIndexFile.putInt(startIndex);\n            endOfIndexFile.putInt(100480506);\n            endOfIndexFile.flip();\n            outC1.write(endOfIndexFile);\n            outC1.close();\n            outC2.close();\n            return true;\n        } catch (IOException e) {\n            System.err.println(e);\n            return false;\n        }\n    }\n", "code2": "    public HttpResponse<E> doRequest(HttpMethods method, HttpHeader[] headers, boolean auth, URI target, BlipMessagePart body) throws HttpRequestException {\n        HttpRequest<E> con = createConnection(method, target);\n        if (defaultHeaders != null) {\n            putHeaders(con, defaultHeaders);\n        }\n        if (headers != null) {\n            putHeaders(con, headers);\n        }\n        try {\n            if (auth && authStrategy != null) {\n                authStrategy.perform(con);\n            }\n            if (body != null) {\n                bodyGenerator.writeBody(con, body);\n            }\n            HttpResponse<E> res = execute(con);\n            return res;\n        } catch (IOException e) {\n            throw new HttpRequestException(\"Error executing request\", e);\n        }\n    }\n", "label": 0, "substitutes": {"genCustRatingFileAndMovieIndexFile": [" genCustRatingFileAndMovieVersionfile", " genCustRatingFileAndVideoindexFiles", " genCustRatingFileAndVideoIndexFile", " genCustRatingFileAndMovieVersionFile", " genCustRatingFileAndMovieIndexfile", " genCustRatingFileAndVideoIndexfile", " genCustRatingFileAndVideoindexFile", " genCustRatingFileAndMovieVersionFiles", " genCustRatingFileAndMovieindexTable", " genCustRatingFileAndVideoindexfile", " genCustRatingFileAndMovieIndexFiles", " genCustRatingFileAndVideoIndexTable", " genCustRatingFileAndMovieIndexTable", " genCustRatingFileAndMovieindexFile", " genCustRatingFileAndVideoindexTable", " genCustRatingFileAndVideoIndexFiles", " genCustRatingFileAndMovieindexfile", " genCustRatingFileAndMovieVersionTable", " genCustRatingFileAndMovieindexFiles"], "completePath": ["CompleteLocation", " completeLocation", "CompleteNow", "pleteLocation", "CompleteDirectory", "completeRoot", "pleteScript", " completeDir", "CompletePath", "COMPLEPath", "totalRoot", "CompleteDir", "totalPod", "completeNow", "completeProject", " completesPath", "COMPLEDir", " completesLocation", "completeLog", "pletionProject", "totalLocation", "CompleteProject", "pletePath", "pleteProject", "pleteDir", "pletionDir", " completeDirectory", "completeLocation", "completePod", "COMPLELog", "fullLocation", " completesDirectory", " completesDir", "completeScript", "completeDir", "fullPod", "fullPath", "pletePod", "pletionPath", "CompleteLog", "pleteRoot", "pleteLog", "CompleteScript", "pletionNow", "pleteNow", "completeDirectory", "COMPLEScript", "totalPath", "fullRoot"], "masterFile": ["MasterFilename", " masterFilename", "currentPath", "masterfile", "MasterName", "managerFilename", "Masterfile", "completeName", "masterName", "MasterFile", "managerfile", "managerPath", " masterPath", "managerFile", "MasterPath", " masterfile", "currentName", "masterPath", "currentFile", "completefile", "masterFilename", "currentfile", "completeFile"], "CustRatingFileName": ["CustRankFileType", "CustRatingFieldInfo", "CustRatingFilesname", "CustRatingTableSet", "CustRatingFilenameNames", "CustRatingFieldType", "CustRatingTableType", "CustRatingTableInfo", "CustRatingfileType", "CustRatingFileInfo", "CustRatingFilesType", "CustRatingfileNames", "CustRankFilesType", "CustRatingFilesName", "CustRatingFilesInfo", "CustRatedfileSet", "CustRatingfileName", "CustRankFileInfo", "CustRatingFilenameType", "CustRatedFileNames", "CustRatingFilename", "CustRatedFileType", "CustRatingTablename", "CustRatingFilenameName", "CustRatedfileName", "CustRankFileName", "CustRankFilesName", "CustRatingFilenameSet", "CustRatingFileNames", "CustRankFilesname", "CustRatingFieldName", "CustRatingFieldname", "CustRatingTableNames", "CustRatingfileSet", "CustRatedFileName", "CustRankFilename", "CustRatedfileType", "CustRatedfileNames", "CustRatedFileSet", "CustRankFilesInfo", "CustRatingTableName", "CustRatingFileSet", "CustRatingFileType"], "MovieIndexFileName": ["MovieIndexFieldName", "MovieIndexFieldNames", "MovieIndexFILENumber", "MovieindexfileKey", "MovieIndexfileName", "MovieIndexTableKey", "MovieindexfileType", "MovieIndexfileNames", "MovieindexFileNames", "MovieIndexFileNames", "MovieIndexFILEName", "MovieindexFileKey", "MovieIndexFileNumber", "MovieindexFileName", "MovieindexfileNumber", "MovieIndexTableType", "MovieindexfileNames", "MovieIndexfileNumber", "MovieIndexFILENames", "MovieIndexFileKey", "MovieIndexFieldKey", "MovieIndexFILEType", "MovieIndexTableName", "MovieindexFileType", "MovieIndexfileType", "MovieIndexFieldType", "MovieIndexFileType", "MovieIndexTableNames", "MovieindexfileName", "MovieindexFileNumber", "MovieIndexfileKey"], "inFile": ["inFILE", "outC", "localFILE", "outF", "localfile", " infile", "outfile", " inFILE", "inF", "infile", "INFILE", "INC", "INF", "INFile", "INfile", "localFile", " inF", "outFile", "localC"], "inC": ["inCS", "intR", " inL", "inG", "outC", "inCL", " outC", "inCI", "inputFile", "iCS", " inR", "iCI", "outF", " inCS", "inputG", "intCS", " inG", "iR", "iC", "outG", "outL", "inF", " outL", " inCL", "inputC", "intC", " inCI", "intCI", "inR", "inL", " inF", "outFile", " outCL", "outCL", " outF", "inputF"], "outFile1": ["outFILE2", "outputPage9", "outputFile9", "outputFileOne", "outFile0", "outPage0", "outputPage1", "outfile1", "outPageOnce", "outPage1", "outFile6", "outfile2", "outFileOnce", "outChannelOne", "outFILE6", " outfile2", " outfile1", "outputPageOnce", " outfile6", " outfile0", "outputFileOnce", " outFile6", "outFileOne", "outChannel9", "outFILE0", "outputFile1", "outPage2", " outFile0", "outPageOne", "outChannel1", "outFILE1", "outFile9", "outPage6", "outputPageOne", "outChannelOnce", "outfile0", "outfile6", "outPage9"], "outC1": ["outROne", "outC0", "inFile2", "inC2", "outP2", "outR3", "inC3", "outP3", "outR1", "outC3", "inCOne", "outFileOne", "outCB2", "outR2", "inC1", "outCOne", "outPOne", "outc2", "outCB1", "outCB0", "outP1", "outc3", "outFile3", "outc0", "outCB3", "inFile1", "outc1", "inFile3", "inFileOne", "inC0"], "outFile2": ["outFile0", "outfile3", "outfile1", "exFile3", " outFile02", "outfile2", "outTableTwo", "outF3", "exChannel2", "outF1", "exChannel3", "outF2", "outfile02", "outTable3", "outChannel2", " outFile3", "outF0", "outChannel1", "outTable02", "outTable2", "outFile3", "outChannel3", "exChannel0", "exFile2", "outFileTwo", "exFile0", "outChannel0", "outFile02", "exChannel1", "outfile0", "exFile1", " outFileTwo", "outfileTwo"], "outC2": ["outB2", "outCTwo", "OutC4", "outC22", "outM22", "outS22", "outE1", "outBTwo", "allCTwo", "outR3", "outMTwo", "outB3", "outR4", "allB3", "OutC1", "allC2", "outSTwo", "outR1", "outC3", "OutR3", "outS3", "outM2", "OutR1", "OutR4", "allB22", "outM3", "allBTwo", "outC4", "outR2", "OutC2", "allC22", "outE4", "allC3", "allB2", "outE2", "OutR2", "outS2", "outE3", "outB22", "OutC3"], "fileSize": ["byteLength", "issueSIZE", " fileLength", "byteSize", "issueName", "baseCount", " fileCount", "baseSIZE", "FileCount", "fileLength", "fileSIZE", "baseName", "FileLength", "byteName", "byteSIZE", " fileSIZE", "FileName", " fileName", "fileName", "FileSIZE", "baseSize", "fileCount", "FileSize", "issueSize", "issueLength"], "totalNoDataRows": ["totalNoDataBoles", "totalNoDataSloles", "totalNodataRecoles", "totalNoDataRecoles", "totalNodataRows", "totalNodataRocks", "totalNoDataBues", "totalNodataRecocks", "totalNoDataBocks", "totalNodataRues", "totalNodataRecows", "totalNodataRoles", "totalNoDataSlues", "totalNodataRecues", "totalNoDataRecows", "totalNoDataRocks", "totalNoDataSlows", "totalNoDataBows", "totalNoDataRues", "totalNoDataRecues", "totalNoDataRoles", "totalNoDataSlocks", "totalNoDataRecocks"], "mappedBuffer": [" mappedQueue", "mapedBuffer", "mappedFB", "mmappedQueue", "mressedCallback", "MappedData", "mattedBB", " mapedFB", "mapedData", "mappedData", "mmappingbuffer", "mmappingBuff", " mapperCounter", " mapperBuffer", "mapperBB", "matchedBuff", "maphBuff", "MapperBuff", "MapedBB", "mappedCallback", " mapperQueue", "maphBuffer", " mapedCallback", "mressedFB", "MapedBuffer", "MappedBuff", "mappedCounter", "mappedQueue", "mappingBuff", "mapperBuff", "mappingBuffer", "mapperQueue", "mapBuffer", "MappedBB", " mappedCounter", "mressedBuff", "mappedbuffer", "mattedBuffer", "maphFB", "mapBB", "mapedbuffer", "mapedBuff", "mmappingQueue", "mappingQueue", "mattedBuff", "mappingData", "mapedBB", " mapedBuff", " mapedBuffer", "mappedBuff", " mapperBuff", "mapedQueue", "mmappedBuffer", "MapedBuff", "mapperBuffer", "mattedData", "mappingbuffer", "matchedQueue", "mapedFB", "MappedBuffer", " mappedCallback", " mappedFB", "mmappedBuff", "mapperbuffer", "matchedCounter", " mappedBuff", "mmappingBuffer", "MapperBB", "mappingCounter", "matchedBuffer", "maphCallback", "mapBuff", "mappingBB", "MapperBuffer", "mappedBB", "mressedBuffer", "mapedCallback", "MapedData", "mapperCounter", "mmappedbuffer"], "startIndex": [" startPoint", "Startindex", "startPoint", "endIndex", "currentPoint", "endIter", " startPage", " startPosition", " startindex", "endPage", "StartIndex", "startInd", "StartPos", "firstInd", "firstPosition", "currentIndex", "StartPosition", "firstindex", "initIndex", "StartIter", "StartPoint", "startPosition", "StartInd", "startPos", "firstIndex", "initPosition", "startPage", "currentPos", " startInd", " startPos", "initindex", "currentPosition", "startindex", " startIter", "startIter", "endPosition", "StartPage"], "count": ["created", "force", "batch", "number", "ctr", "first", "ount", "amount", "id", "process", "length", "start", "num", "cast", "current", "total", "limit", "more", "conf", "max", "call", "index", "c", "act", "n", "i", "check", "category", "code", "status", "counter", "result", "page", "found", "user", "core", "ind", "name", "Count", "last", "add", "mount", "list", "coll", "sum", "depth", "cloud", "order", "state", "next", "continue", "info", "find", "type", "now", "con", "size"], "currentMovie": ["primaryVideo", "reportedMovie", " currentImage", "currentlyMonster", " currentMouse", "currentImage", "currentDate", "currentMedia", "presentImage", "firstHero", "presentMovie", "activeVideo", " currentMonster", "primaryDate", " currentPlayer", "currentMouse", " currentMusic", "reportedMedia", "currentVideo", " currentSpider", "firstMonster", "reportedHero", "firstVideo", "presentMusic", "currentHero", "firstDate", "currentlyDate", "currentlySpider", "activePlayer", "reportedImage", "reportedMouse", "firstMedia", "firstMouse", "firstMovie", "currentlyMovie", "currentSpider", "activeMovie", "presentHero", "primaryMovie", "activeSpider", "reportedMusic", "currentMusic", "currentPlayer", " currentVideo", "currentMonster", "currentlyPlayer", " currentMedia", "primaryHero", "currentlyHero", "currentlyVideo", " currentHero"], "movieName": ["movieType", "filmname", "httpName", " movieType", "movieNAME", "ovieName", "httpname", "mpegname", "oviename", "ovieNAME", "mpegName", "MovieName", "monsterNAME", "movieTitle", "filmGroup", "monsterName", "filmName", "moviename", " moviename", "filmType", "ovieGroup", "httpNAME", "filmNAME", "Moviename", "movieGroup", "MovieType", "mpegGroup", " movieNAME", "monstername", "mpegNAME", "MovieTitle", " movieTitle", "filmTitle"], "customer": ["customizer", "customator", "Customity", "CustomER", "developER", "customity", "stickizer", " customator", "ustomorder", "customER", "Customer", "developizer", "sticker", "developity", "stickity", "developator", " customER", "ustomER", "customorder", "developorder", "ustomator", "stickER", "Customizer", "ustomer", "developer", " customorder"], "rating": ["ping", "card", "weight", " Rating", "term", "rage", "saving", "tag", "credit", "Rating", "scoring", "review", "ranking", "ating", "attribute", "scale", "rank", "rate", "rat", "boarding", "reporting", "format", "rated", "user", "core", "having", "heading", "score", "error", "reading", "strength", "testing", "playing", "setting", "option", "translation", "type", "average"], "outBuf1": ["outBbuf0", "outBuffyl", "outBbuf1", "outBdf3", "outBBuff0", "outBufl", "outBulp64", "outDbuf3", "outBBuff1", "outDuf0", "outBool1", "outBuff1", "outBbufOne", "outBbuf3", "outBlf1", "outDbuf0", "outBbufone", "outBurg18", "outDuf11", "outBBuff3", "outRuf18", "outBuf3", "outBulp3", "outRuf5", "outBulp1", "outRuf3", "outRbuf0", "outBucOne", "outBdfOnce", "outDbuf1", "outRbuf1", "outBlf0", "outDuf3", "outRbuf5", "outBbufl", "outBulpOnce", "outBuffy3", "outBuc5", "outBooll", "outDbuf11", "outBdf64", "outBurg1", "outRuf1", "outBuf18", "outBurg3", "outBuffyone", "outBbuf11", "outBuf64", "outBuff0", "outBuf11", "outBuffy1", "outBlf3", "outBuc0", "outBBuff11", "outBbuf5", "outBbuf18", "outBoolone", "outBuffy0", "outRufOne", "outRbufOne", "outBurg0", "outRbuf18", "outDuf1", "outBbuf64", "outBuf5", "outBufOnce", "outBfx11", "outBdf1", "outBuf0", "outBfx1", "outBuff2", "outBlf2", "outBfx0", "outRuf0", "outBuc1", "outBuff3", "outRbuf3", "outBfx3", "outBuffy18", "outBufone", "outBufOne", "outBbufOnce", "outBool3"], "outBuf2": ["outBuf4", "outFbufTwo", "outBuf42", "outBuffy3", "outBuffy2", "outBfg4", "outBfgTwo", "outMuf15", "outMbuf2", "outBbuf42", "outBbufj", "outMbuf15", "outBbuf1", "outBbuff4", "outMuf1", "outBfx1", "outBuf3", "outBbuff42", "outBuff2", "outBuffTwo", "outBuffy4", "outBuf02", "outFuf2", "outFbuf02", "outMbuf3", "outFbuf2", "outBfx2", "outBbuff3", "outBuffyTwo", "outFbuf4", "outBfx15", "outBufj", "outBbuff2", "outBfg2", "outBuf15", "outBuff42", "outBbuffj", "outMbuf1", "outBfg02", "outBuff4", "outBbuf4", "outBuff3", "outMuf3", "outBuff1", "outBbuff1", "outBfx3", "outBbuf3", "outBbuf02", "outBufTwo", "outBbuf15", "outBuffy02", "outFufTwo", "outBuffj", "outBbufTwo", "outFuf4", "outBbuf2", "outBbuff15", "outFuf02", "outMuf2"], "endOfIndexFile": ["endOfErrorfile", "endOfindexFile", "endOfIndexF", "endOfindexTable", "endofIndexFiles", "endOfindexfile", "endOfIndfile", "endofIndexfile", "endOFindexFile", "endOfIndexTable", "endOfIndFile", " endFile", "endOfErrorF", "endOfIndLine", "EndFile", "endofindexFile", "endOfPositionFile", "endOfindexLine", "endofindexFiles", "endedFile", "endofindexfile", "endOFIndexfile", "endOFindexLine", "endofIndexFile", "endOfIndexfile", "endofindexF", "endOfErrorFile", "endOfindexF", "endOfindexFiles", "endOfPositionFiles", "endOFindexfile", "endOfPositionTable", "endFile", "endOfIndexFiles", "endOfIndexLine", "endofIndexTable", "endOfErrorFiles", "endOFIndexLine", "endOfPositionfile", "endofindexTable", "endofIndexF", "endOFIndexFile"]}}
{"id1": "13981689", "id2": "8921716", "code1": "    public static String md5Hash(String src) {\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            md.update(src.getBytes());\n            return bytesArrayToHexString(md.digest());\n        } catch (Exception e) {\n            return null;\n        }\n    }\n", "code2": "    public static String MD5(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n        MessageDigest md;\n        md = MessageDigest.getInstance(\"MD5\");\n        byte[] md5hash = new byte[32];\n        md.update(text.getBytes(\"iso-8859-1\"), 0, text.length());\n        md5hash = md.digest();\n        return convertToHex(md5hash);\n    }\n", "label": 1, "substitutes": {"md5Hash": ["md3Sum", "md7hash", "md7Hash", "md5Sum", "MD7Hash", "md2hash", "md3Hash", "md2Sum", "MD5Hash", "md7Sum", "md3hash", "MD5hash", "MD5Sum", "MD7hash", "md5hash", "MD7Sum", "md2Hash"], "src": ["text", "sec", "sr", "sq", "bytes", "string", "ctr", "txt", "str", "b", "rx", "obj", "st", "conv", "fx", "dest", "filename", "url", "r", "rs", "RC", "obl", "mph", "sc", "ipl", "sb", "s", "usc", "impl", "input", "name", "sys", "data", "jpg", "source", "rc", "ser", "inst", "this"], "md": ["d", "mc", "dr", "spread", "pt", "dir", "pd", "ld", "mt", "amd", "mod", "hash", "sm", "nt", "msg", "nd", "red", "det", "m", "down", "pm", "sd", "ms", "dd", "mand", "rm", "hd", "db", "mm", "ds", "mk", "cd", "ind", "od", "bd", "mg", "mn", "dm", "mp", "der", "df", "mb", "cmd", "MD"]}}
{"id1": "18339787", "id2": "17202157", "code1": "    private void reload() {\n        if (xml != null) {\n            try {\n                String currentDate = new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date());\n                if (currentDate.equalsIgnoreCase(exchangeRateDate)) {\n                    return;\n                }\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n        XPath xpath = null;\n        try {\n            DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();\n            DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();\n            URLConnection conn = null;\n            URL url = new URL(\"http://www.ecb.int/stats/eurofxref/eurofxref-daily.xml\");\n            conn = url.openConnection();\n            xml = docBuilder.parse(conn.getInputStream());\n            xpath = XPathFactory.newInstance().newXPath();\n            exchangeRateDate = xpath.evaluate(\"/Envelope/Cube/Cube/@time\", xml);\n            xpath = XPathFactory.newInstance().newXPath();\n            NodeList currenciesNode = (NodeList) xpath.evaluate(\"/Envelope/Cube/Cube/Cube[@currency]\", xml, XPathConstants.NODESET);\n            currencies = new String[currenciesNode.getLength()];\n            for (int i = 0; i < currencies.length; i++) {\n                currencies[i] = currenciesNode.item(i).getAttributes().getNamedItem(\"currency\").getTextContent();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n", "code2": "    static Matrix readMatrix(String filename, int nrow, int ncol) {\n        Matrix cij = new Matrix(nrow, ncol);\n        try {\n            URL url = filename.getClass().getResource(filename);\n            LineNumberReader lnr = new LineNumberReader(new InputStreamReader(url.openStream()));\n            for (int i = 0; i < nrow; i++) for (int j = 0; j < ncol; j++) cij.set(i, j, Double.parseDouble(lnr.readLine()));\n        } catch (Exception xc) {\n            xc.printStackTrace();\n        }\n        return cij;\n    }\n", "label": 0, "substitutes": {"reload": ["Reload", "replay", "disbuild", "overplay", "overbuild", "Replay", "Rebuild", "rebuild", "overLoad", "disLoad", "reLoad", "overload", "ReLoad", "display", "disload"], "currentDate": ["reportedData", " CurrentData", "reportedTime", "currentTime", "reportedDoc", "currentYear", " CurrentDate", "currentData", " currentYear", " CurrentTime", "CurrentTime", "reportedDate", "currentDoc", "reportedYear", "CurrentDate", " currentTime", " CurrentDoc", " currentDoc", "CurrentYear", " currentData"], "xpath": ["dxpath", "xxtrace", "txgraph", "axwhere", " xPath", " xtrace", "rxpointer", "expointer", "ixpt", "xpr", "wpath", " xgraph", "dxprop", "xxpt", "xxpath", "dxPath", "xxpointer", "wprop", "rxpath", "expath", "ixath", "xgraph", "xath", "ixpointer", "rxpr", "xxath", "axPath", "axtrace", "txPath", "xpt", "rxPath", "expr", "wPath", "exPath", "xPath", "xtrace", "axpath", " xpr", "axgraph", "xpointer", " xprop", " xpt", "axpointer", "xwhere", "txpath", "dxwhere", "xxwhere", " xath", "xprop", " xpointer", " xwhere", "ixpath", "txpointer", "wwhere"], "docBuilderFactory": ["docMakerFact", " docBuilderFact", "docBuildFactor", " docBuilderClass", "docBuilderFact", "docPathFact", "docMakerInterface", "docPathFactory", "docBuilderClass", "docBuilderFactor", "docMakerFactor", "docBuilderInterface", "docBuildClass", " docBuilderInterface", "docBuildInterface", "docPathFactor", "docMakerFactory", "docBuildFact", "docBuildFactory", " docBuilderFactor", "docPathClass"], "docBuilder": ["DocumentBu", " docParser", "DocBu", "documentBuild", "docBu", "DocumentParser", "DocBuild", "DocBuilder", " DOCBuild", "documentBu", "docBuild", " docBuild", " docbuilder", "docParser", " DOCParser", "Docbuilder", " DOCBuilder", "DocumentBuild", "documentbuilder", "docbuilder", "documentBuilder", " DOCBu", "DocumentBuilder", " docBu"], "conn": ["lang", "gate", "ws", "obj", "Conn", "nt", "conv", "ls", "open", "opens", "Connection", "cp", "ctx", "c", "comm", "n", "connection", "res", "ssl", "close", "link", "syn", "ct", "ann", "connect", "loc", "out", "iw", "cn", "oss", "ch", "db", "cert", "client", "cm", "nc", "socket", "addr", "cb", "enc", "handle", "cmd", "resp", "jp", "con"], "url": ["sl", "gl", "Url", "abs", "str", "nl", "b", "char", "browser", "obj", "ls", "open", "r", "cp", "dl", "n", "connection", "ll", "https", "ssl", "link", "f", "base", "rel", "URL", "web", "net", "sb", "ur", "cert", "client", "u", "bel", "util", "http", "socket", "rl", "mount", "l", "window", "mb", "ref", "sql", "con", "lb", "ul"], "xml": ["text", "path", "item", "pdf", "log", "file", "p", "txt", "str", "mail", "print", "px", "eps", "ws", "event", "context", "output", "model", "content", "email", "dl", "rss", "node", "zip", "feed", "html", "config", "tm", "body", "page", "format", "date", "raw", "element", "xf", "doc", "parse", "cert", "input", "ml", "document", "template", "tree", "dom", "wt", "x", "data", "http", "image", "details", "el", "list", "response", "json", "tml", "xp", "full", "php", "news"], "exchangeRateDate": ["excelRateMessage", "exchangeCountTime", "exactionrateDays", "exchangeRangeDay", "excelrateDay", "excelRateDate", "exchangeCountMessage", "exactionRateDay", "exchangerateMessage", "exchangerateTime", "exactionrateDay", "excelrateDate", "excelRateTime", "exchangeCountDay", "exchangeRangeDate", "excelrateMessage", "exchangeRuleDay", "exchangeRuleTime", "exchangeRangeTime", "exactionrateTime", "exchangerateDays", "excelRateDay", "exchangeRateDays", "exchangeTimeDays", "exchangeTimeDay", "exchangeRateDay", "exchangeTimeDate", "exchangeRuleMessage", "exactionRateTime", "exchangeRateMessage", "exchangerateDay", "exchangeTimeTime", "exchangerateDate", "exactionRateDays", "exchangeRangeDays", "exchangeCountDate", "excelrateTime", "exchangeRuleDate", "exchangeRateTime", "exactionRateDate", "exactionrateDate"], "currenciesNode": ["curriersN", "curreditsList", "curreditsEvent", "curthsNode", "curriersList", "CurriesEvent", "curreditsNode", "currenciesList", "curthsN", "CurriesNode", "curreditsN", "CurriesCard", "currsEvent", "curriesChan", "curthsList", "curriesEvent", "curriesNode", "curriesList", " curriesCard", "CurrenciesEvent", "currenciesChan", "cururrenciesChan", "CurriesN", "currenciesN", "CurriesList", "CurrenciesN", " currenciesCard", "CurrenciesNode", "CurrenciesCard", "curriesCard", "curriesN", "curthsCard", "curriersNode", "curriersCard", "currsList", "currsN", " currenciesChan", "CurrenciesList", "cururrenciesCard", "currenciesEvent", " curriesNode", "currencyCard", "cururrenciesNode", "currenciesCard", " curriesChan", "currencyNode", "currencyChan", "currsNode"], "currencies": [" cururrencies", "corurrencies", "charurrencies", "chrencies", "Cururrencies", "carractions", "chpora", "Curries", "Curarters", "charrencies", "carrencies", "charables", "chractions", "chries", "curables", "corarters", "corrates", "constries", "curractions", "constrencies", "curpora", "correncies", "charrates", "crencies", "Currencies", "curarters", "constractions", "carpora", "cururrencies", "currates", "crates", "curries", "corries", "constpora", " curries", " curarters", "cables", "carries", "corables"], "i": ["ti", "ji", "I", "batch", "ic", "iq", "sequence", "li", "id", "io", "gi", "is", "di", "e", "ki", "ii", "in", "\u0438", "j", "span", "phi", "oi", "ri", "mi", "si", "index", "c", "ini", "n", "a", "pi", "status", "ci", "m", "cli", "yi", "uri", "o", "ms", "multi", "init", "xi", "ie", "gu", "u", "x", "me", "qi", "key", "ai", "ix", "sim", "ip", "it", "bi", "ui", "ami", "y"]}}
{"id1": "22441244", "id2": "6421904", "code1": "    public void send(org.hibernate.Session hsession, Session session, String repositoryName, int ideIdint, String to, String cc, String bcc, String subject, String body, Vector attachments, boolean isHtml, String charset, InternetHeaders headers, String priority) throws MailException {\n        try {\n            if (charset == null) {\n                charset = MimeUtility.javaCharset(Charset.defaultCharset().displayName());\n            }\n            if ((body == null) || body.trim().equals(\"\")) {\n                body = \" \";\n            }\n            Email email = null;\n            if (isHtml) {\n                email = new HtmlEmail();\n            } else {\n                email = new MultiPartEmail();\n            }\n            email.setCharset(charset);\n            Users user = getUser(hsession, repositoryName);\n            Identity identity = getIdentity(hsession, ideIdint, user);\n            InternetAddress _returnPath = new InternetAddress(identity.getIdeEmail(), identity.getIdeName());\n            InternetAddress _from = new InternetAddress(identity.getIdeEmail(), identity.getIdeName());\n            InternetAddress _replyTo = new InternetAddress(identity.getIdeReplyTo(), identity.getIdeName());\n            InternetAddress[] _to = MessageUtilities.encodeAddresses(to, null);\n            InternetAddress[] _cc = MessageUtilities.encodeAddresses(cc, null);\n            InternetAddress[] _bcc = MessageUtilities.encodeAddresses(bcc, null);\n            if (_from != null) {\n                email.setFrom(_from.getAddress(), _from.getPersonal());\n            }\n            if (_returnPath != null) {\n                email.addHeader(\"Return-Path\", _returnPath.getAddress());\n                email.addHeader(\"Errors-To\", _returnPath.getAddress());\n                email.addHeader(\"X-Errors-To\", _returnPath.getAddress());\n            }\n            if (_replyTo != null) {\n                email.addReplyTo(_replyTo.getAddress(), _replyTo.getPersonal());\n            }\n            if ((_to != null) && (_to.length > 0)) {\n                HashSet aux = new HashSet(_to.length);\n                Collections.addAll(aux, _to);\n                email.setTo(aux);\n            }\n            if ((_cc != null) && (_cc.length > 0)) {\n                HashSet aux = new HashSet(_cc.length);\n                Collections.addAll(aux, _cc);\n                email.setCc(aux);\n            }\n            if ((_bcc != null) && (_bcc.length > 0)) {\n                HashSet aux = new HashSet(_bcc.length);\n                Collections.addAll(aux, _bcc);\n                email.setBcc(aux);\n            }\n            email.setSubject(subject);\n            Date now = new Date();\n            email.setSentDate(now);\n            File dir = new File(System.getProperty(\"user.home\") + File.separator + \"tmp\");\n            if (!dir.exists()) {\n                dir.mkdir();\n            }\n            if ((attachments != null) && (attachments.size() > 0)) {\n                for (int i = 0; i < attachments.size(); i++) {\n                    ByteArrayInputStream bais = null;\n                    FileOutputStream fos = null;\n                    try {\n                        MailPartObj obj = (MailPartObj) attachments.get(i);\n                        File file = new File(dir, obj.getName());\n                        bais = new ByteArrayInputStream(obj.getAttachent());\n                        fos = new FileOutputStream(file);\n                        IOUtils.copy(bais, fos);\n                        EmailAttachment attachment = new EmailAttachment();\n                        attachment.setPath(file.getPath());\n                        attachment.setDisposition(EmailAttachment.ATTACHMENT);\n                        attachment.setDescription(\"File Attachment: \" + file.getName());\n                        attachment.setName(file.getName());\n                        if (email instanceof MultiPartEmail) {\n                            ((MultiPartEmail) email).attach(attachment);\n                        }\n                    } catch (Exception ex) {\n                    } finally {\n                        IOUtils.closeQuietly(bais);\n                        IOUtils.closeQuietly(fos);\n                    }\n                }\n            }\n            String mid = getId();\n            if (headers != null) {\n                Header xheader;\n                Enumeration xe = headers.getAllHeaders();\n                for (; xe.hasMoreElements(); ) {\n                    xheader = (Header) xe.nextElement();\n                    if (xheader.getName().equals(RFC2822Headers.IN_REPLY_TO)) {\n                        email.addHeader(xheader.getName(), xheader.getValue());\n                    } else if (xheader.getName().equals(RFC2822Headers.REFERENCES)) {\n                        email.addHeader(xheader.getName(), xheader.getValue());\n                    }\n                }\n            } else {\n                email.addHeader(RFC2822Headers.IN_REPLY_TO, \"<\" + mid + \".JavaMail.duroty@duroty\" + \">\");\n                email.addHeader(RFC2822Headers.REFERENCES, \"<\" + mid + \".JavaMail.duroty@duroty\" + \">\");\n            }\n            if (priority != null) {\n                if (priority.equals(\"high\")) {\n                    email.addHeader(\"Importance\", priority);\n                    email.addHeader(\"X-priority\", \"1\");\n                } else if (priority.equals(\"low\")) {\n                    email.addHeader(\"Importance\", priority);\n                    email.addHeader(\"X-priority\", \"5\");\n                }\n            }\n            if (email instanceof HtmlEmail) {\n                ((HtmlEmail) email).setHtmlMsg(body);\n            } else {\n                email.setMsg(body);\n            }\n            email.setMailSession(session);\n            email.buildMimeMessage();\n            MimeMessage mime = email.getMimeMessage();\n            int size = MessageUtilities.getMessageSize(mime);\n            if (!controlQuota(hsession, user, size)) {\n                throw new MailException(\"ErrorMessages.mail.quota.exceded\");\n            }\n            messageable.saveSentMessage(mid, mime, user);\n            Thread thread = new Thread(new SendMessageThread(email));\n            thread.start();\n        } catch (MailException e) {\n            throw e;\n        } catch (Exception e) {\n            throw new MailException(e);\n        } catch (java.lang.OutOfMemoryError ex) {\n            System.gc();\n            throw new MailException(ex);\n        } catch (Throwable e) {\n            throw new MailException(e);\n        } finally {\n            GeneralOperations.closeHibernateSession(hsession);\n        }\n    }\n", "code2": "    public DataRecord addRecord(InputStream input) throws DataStoreException {\n        File temporary = null;\n        try {\n            temporary = newTemporaryFile();\n            DataIdentifier tempId = new DataIdentifier(temporary.getName());\n            usesIdentifier(tempId);\n            long length = 0;\n            MessageDigest digest = MessageDigest.getInstance(DIGEST);\n            OutputStream output = new DigestOutputStream(new FileOutputStream(temporary), digest);\n            try {\n                length = IOUtils.copyLarge(input, output);\n            } finally {\n                output.close();\n            }\n            DataIdentifier identifier = new DataIdentifier(digest.digest());\n            File file;\n            synchronized (this) {\n                usesIdentifier(identifier);\n                file = getFile(identifier);\n                if (!file.exists()) {\n                    File parent = file.getParentFile();\n                    parent.mkdirs();\n                    if (temporary.renameTo(file)) {\n                        temporary = null;\n                    } else {\n                        throw new IOException(\"Can not rename \" + temporary.getAbsolutePath() + \" to \" + file.getAbsolutePath() + \" (media read only?)\");\n                    }\n                } else {\n                    long now = System.currentTimeMillis();\n                    if (getLastModified(file) < now + ACCESS_TIME_RESOLUTION) {\n                        setLastModified(file, now + ACCESS_TIME_RESOLUTION);\n                    }\n                }\n                if (file.length() != length) {\n                    if (!file.isFile()) {\n                        throw new IOException(\"Not a file: \" + file);\n                    }\n                    throw new IOException(DIGEST + \" collision: \" + file);\n                }\n            }\n            inUse.remove(tempId);\n            return new FileDataRecord(identifier, file);\n        } catch (NoSuchAlgorithmException e) {\n            throw new DataStoreException(DIGEST + \" not available\", e);\n        } catch (IOException e) {\n            throw new DataStoreException(\"Could not add record\", e);\n        } finally {\n            if (temporary != null) {\n                temporary.delete();\n            }\n        }\n    }\n", "label": 1, "substitutes": {"send": ["build", "submit", "apply", "post", "mail", "print", "msg", "export", "write", "security", "set", "message", "end", "get", "init", "sent", "push", "create", "parse", "transfer", "save", "add", "report", "execute", "Send", "reply"], "hsession": ["hhessions", "hspace", " HSession", "rssession", "hsettings", "HSsession", "rspace", "HSess", "hhettings", "hessions", "hship", "hession", "HSession", "hssession", "hsessions", "hhip", "rsess", "hhession", " HSess", "HSpace", "hsess", "rsession", " HSsession", "hettings", "HSettings", " HSpace", "HShip", "HSessions", "hhsession", "hhhip"], "session": ["ess", "lock", "parent", "store", "event", "context", "manager", "sid", "content", "view", "connection", "instance", "job", "set", "message", "name", "client", "document", "object", "password", "driver", "ession", "cache", "ip", "Session", "state", "account"], "repositoryName": ["reposositoryName", "repositoryData", "repoositoryName", "repositorName", "reposoryData", "repositoryname", "reposoryName", "reposositoryData", "reposositoryPath", "repoitoryname", "repositorPath", "repositableNAME", "repositorNAME", "repositoryTitle", "repoitoryName", "repositablename", "repositionNAME", "repoositoryNAME", "reposositoryname", "repoitoryNAME", "repositionPath", "repoositoryData", "repoositoryTitle", "repositorTitle", "repoitoryTitle", "repositoryPath", "repoitoryData", "reposoryNAME", "repositionName", "repositableData", "repositoryNAME", "repoositoryPath", "repositionTitle", "repoitoryPath", "reposositoryTitle", "repoositoryname", "reposositoryNAME", "repositableName", "reposoryname"], "ideIdint": ["ideidst", "IDEidint", "ideIDline", "ideDint", " ideThind", "ideIdINT", "ideInfoINT", "ideDINT", "IDEIdst", "ideThind", "ideIdentind", "ideIDno", " ideThint", "ideThline", "ideThint", "IDEIdINT", "ideIdind", "ideIdentno", "ideIdentint", "ideIDint", "ideIdentline", "IDEidst", "ideDst", " ideThline", "ideIdline", " ideThno", "ideIdno", "ideIdst", "ideidint", "ideidINT", "ideThno", "IDEidINT", "ideIDind", "ideInfost", " ideIdline", " ideIdind", "IDEIdint", " ideIdno", "ideInfoint"], "to": ["topic", "address", "contact", "tp", "site", "pro", "by", "t", "po", "toc", "st", "no", "phone", "route", "target", "company", "range", "eto", "auto", "tel", "o", "about", "ta", "client", "too", "TO", "addr", "top", "ato", "tr", "token", "pos", "tt", "To", "co", "os"], "cc": ["cv", "mc", "ico", "cmp", "fc", "ic", "cca", "CC", "ce", "toc", "ca", "cci", "ctrl", "control", "company", "cin", "cp", "cy", "cs", "cr", "ci", "cf", "ct", "cl", "sc", "ck", "cn", "cd", "cm", "ac", "cb", "rc", "ec", "cmd", "cloud", "tc", "co", "dc"], "bcc": [" bCC", "bck", "sbcc", "rbCC", " bcm", "rbcc", "cbCC", "vcc", "cbcc", "rbce", "rbcm", "sbck", "cbck", " bck", "vce", "sbcy", "bcy", "vck", "vcy", "rbck", "bcm", "rbcy", "bce", "sbce", "bCC", "cbcm"], "subject": ["text", "topic", "head", "description", "Subject", "id", "mail", "face", "filename", "content", "title", "host", "html", "security", "uri", "note", "form", "prefix", "message", "heading", "name", "template", "comment", "source", "metadata", "header", "author"], "body": ["text", "background", "head", "bytes", "description", "h", "binary", "post", "any", "back", "inline", "mail", "part", "b", "ODY", "ody", "no", "output", "other", "url", "shell", "content", "null", "query", "inner", "title", "zip", "code", "bh", "summary", "html", "Body", "base", "note", "padding", "params", "buffer", "message", "parts", "files", "name", "template", "object", "comment", "line", "hex", "data", "bill", "source", "report", "top", "response", "handle", "default", "json", "layout", "business", "news"], "attachments": ["attresses", "achmenttypes", "Attachresses", "attments", "achmentments", "attachresses", "atttypes", "Attachachment", "attachachment", "Attachtypes", "attachtypes", "Attachments", "achmentachment", "achmentresses"], "isHtml": ["isVtml", " isWhHTML", " isWhip", "isVhtml", " isWhtml", "isWhtml", "IsHttp", "isWhHTML", "isChhtml", "isHip", "ishtml", "IsHhtml", "ishap", " isHHTML", "isWhhtml", "ishttp", "isJtml", "isVip", "isHHTML", "isJap", "IsHtml", "isChip", "isChtml", "isChHTML", "ishhtml", "isHap", "isJhtml", "isJttp", "IsHap", "isVHTML", "isHhtml", " isHhtml", " isWhhtml", "isHttp", "isWhip", " isHip"], "charset": ["cherset", "charpetic", "chacterspace", "Charset", "charsET", "chippetter", "clarspace", "chatsec", "chippet", "CHarsets", "chARSpace", "charsetter", "charsett", "chippET", "quatsec", "chARSetter", "chippett", "chacterset", "channelsetic", "chactersets", "clerspace", "chersets", "quarsale", "chippale", "channelsET", "CHarsett", "chARSets", "charpett", "CHippets", "chatsetter", "CHarsET", "quatsale", "chARSET", "quarset", "charpetter", "clersetter", "chablesec", "chARSet", "clarsetter", "charsec", "CHarset", "chactersetter", "Charsetic", "charpET", "charpet", "clarsets", "ChARSet", "charsale", "chippec", "channelset", "clerset", "chippets", "Charsetter", "quarsec", "clarset", "ChARSET", "charsetic", "CHippett", "clersets", "charspace", "chersetter", "chatset", "chablesetter", "quatsetter", "CharsET", "ChARSetter", "charpets", "channelsetter", "chableset", "chatsale", "chARSetic", "CHippet", "CHippET", "cherspace", "charsets", "ChARSetic", "quarsetter", "quatset", "chablesale"], "headers": ["head", "dr", "members", "ors", "limits", "authors", "fields", "comments", "names", "users", " heads", " trailers", "params", "files", "codes", "relations", "ers", "lines", "keys", "details", "header", "metadata", "heads", "ppers", "ters", "types", "ilers"], "priority": ["flags", "description", "id", "level", "position", "properties", "context", " severity", "due", "phone", "company", "comments", "primary", "grade", "profile", "status", "title", "security", "prefix", "serial", " urgency", "password", "pos", "order", "state", "origin", "policy"], "email": ["fax", "search", "address", "sample", "contact", "description", "log", "echo", "ell", "et", "delete", "Email", "mail", "print", "oe", "test", "e", "event", "ome", "msg", "detail", "company", "ee", "model", "shell", "external", "view", "url", "output", "call", "office", "instance", "label", "ilo", "html", "console", "ssl", "link", "license", "initial", "server", "note", "example", "message", "result", "enter", "voice", "element", "database", "all", "document", "template", "object", "liner", "line", "die", "http", "comment", "reset", "report", "password", "el", "em", "response", "xml", "domain", "il", "ne", "er", "gmail", "entry"], "user": ["system", "match", "human", "by", "id", "used", "uid", "browser", "auth", "from", "username", "output", "manager", "owner", "users", "admin", "USER", "connection", "profile", "person", "result", "entity", "ident", "usr", "student", "client", "name", "util", "User", "me", "actor", "use", "login", "ip", "account", "usage", "usa", "author", "creator"], "identity": ["equator", "recognentity", "IDENTalty", "personificate", "personity", "primicate", "identitate", "presentularity", "identularity", "idularity", "primity", "IDENTentity", "IDENTality", "IDENTicate", "solidentity", "identiciary", "recognity", "IDENTifier", "IDENTITY", "IDENTitate", "identality", "idity", "primificate", "ententity", "IDENTiciary", "ethnicity", "idality", "IDENTularity", "instentity", "solidality", "equentity", "instity", "recognance", "instifier", "recognicate", "solidity", "identalty", "IDENTance", "ethnicitate", "personITY", "equity", "presentity", "entity", "identance", "identifier", "identicate", "IDENTity", "idententity", "instator", "personentity", "identificate", "primentity", "ethnicularity", "personicate", "entifier", "equalty", "presententity", "primance", "idiciary", "identator", "IDENTificate", "ethnicentity", "personiciary", "instularity", "entularity", "presentitate", "solidularity", "instalty", "identITY", "idITY", "IDENTator"], "_returnPath": ["_replyDir", "_returnTo", "setsaveTo", "_savePath", "_ReturnPath", "_retLocation", "_getDir", "_deletePoint", "_returnpath", "_retpath", "_retUrl", "_returnAddress", "_replyCode", "_requestName", "_errorpath", "_saveUrl", "_requestPoint", "_errorAddress", " _errorPath", "_replyPath", "setreturnpath", " _errorPoint", " _returnAddress", "setsavepath", "_returnPoint", "_returnLocation", "_errorName", " _errorAddress", "_getTo", "_returnUrl", " _errorName", "_errorPath", "_returnDir", "_retCode", "_resultPath", "_resultTo", " _returnPoint", "_retPoint", "_errorPoint", "_returnCode", "_getPath", "_deletePath", "_ReturnName", "_resultPoint", "_requestAddress", "setsaveUrl", "setreturnPath", "_ReturnAddress", "_getCode", "_retPath", "_ReturnPoint", " _returnName", "setreturnTo", "_requestPath", "_deleteTo", "_saveTo", "_returnName", "_errorLocation", "_retDir", "_errorUrl", "_retTo", "_resultLocation", "setreturnUrl", "_savepath", "_deletepath", "_errorTo", "setsavePath"], "_from": [" _about", " _form", "remlocal", "remfrom", "longreset", "_actor", "letfrom", " _reset", "_owner", "letsource", "_source", "longfrom", "letto", "longto", "_about", "_local", "remowner", "_author", "\tactor", "\tauthor", " _author", "_reset", "remaddr", "_addr", "longsource", "letabout", "\tform", " _source", "_form", " _actor", "\tfrom"], "_replyTo": ["_closeTo", "_ReplyTO", "_closeOf", "_backFrom", "_commentTo", "_returnTo", "_commentTO", "_ReplyOnly", "_commentLine", "_respondTo", "_responseOf", "_ReplyTo", "_returnFrom", "_returnTO", "_closeLine", "_responsePath", "_responseLine", "_ReplyPath", "_respondFrom", "_replyOf", "_replyLine", "_returnOnly", "_responseFrom", "_backPath", "_responseTo", "_ReplyFrom", "_backTo", "_commentOf", "_replyFrom", "_replyOnly", "_backTO", "_replyPath", "_respondTO", "_replyTO", "_closeTO", "_respondOnly", "_responseTO"], "_to": ["successtopic", "successsite", "successta", "prito", "prita", "_site", "pritopic", "successto", "_topic", "prisite", "_ta"], "_cc": ["_cca", " _cs", "_cs", " _subject", " _cca", "_subject"], "_bcc": ["_rck", "_rca", "_wca", "_rbca", "_rcc", "_rbcc", "_bca", "_rbck", "_bck", "_wck", "_bacc", "_rbacc", "_wacc", "_wcc", "_racc"]}}
{"id1": "18731843", "id2": "9805906", "code1": "    public void doBody(JWebLiteRequestWrapper req, JWebLiteResponseWrapper resp) throws SkipException {\n        BufferedInputStream bis = null;\n        BufferedOutputStream bos = null;\n        try {\n            bis = new BufferedInputStream(new FileInputStream(this.loadData(req)));\n            bos = new BufferedOutputStream(resp.getOutputStream());\n            IOUtils.copy(bis, bos);\n            bos.flush();\n        } catch (Exception e) {\n            _cat.warn(\"Write data failed!\", e);\n        } finally {\n            IOUtils.closeQuietly(bis);\n            IOUtils.closeQuietly(bos);\n        }\n    }\n", "code2": "    public static boolean dump(File source, File target) {\n        boolean done = false;\n        try {\n            InputStream is = new BufferedInputStream(new FileInputStream(source));\n            OutputStream os = new BufferedOutputStream(new FileOutputStream(target));\n            while (is.available() > 0) {\n                os.write(is.read());\n            }\n            os.flush();\n            os.close();\n            is.close();\n            return true;\n        } catch (IOException e) {\n        }\n        return done;\n    }\n", "label": 1, "substitutes": {"doBody": [" sendHead", " writeBody", " doContent", " writebody", " writeContent", " dobody", "loadbody", " sendContent", "loadContent", "loadBody", " sendBody", " sendbody", "loadHead", " doHead", " writeHead"], "req": ["err", "js", "sq", "qq", "urg", "aj", "pro", "crit", "rec", "j", "Requ", "conf", "inv", "ctx", "proc", "query", "wx", "res", "requ", "ps", "def", "express", "hr", "q", "reg", "gr", "Request", "http", "exec", "quest", "request", "pkg", "fr", "cmd", "qt", "tx", "jp", "quick"], "resp": ["err", "js", "serv", "esp", "trans", "ret", "respond", "rec", "Resp", "Response", "output", "comm", "re", "sol", "vol", "res", "rel", "def", "cl", "sp", "result", "out", "wr", "RES", "exp", "client", "respons", "http", "soc", "rep", "response", "Res", "pos", "Rep", "next", "wa", " res"], "bis": ["pin", "bid", "iss", "bt", "idis", "is", "be", "onis", "mis", "oi", "ais", "mi", "iris", "bits", "bie", "rison", "cin", "ios", "obs", "bh", "bps", "ads", "ses", "fps", "pins", "sb", "bs", "los", "lis", "oss", "bil", "aus", "lbs", "zo", "lin", "isin", "avi", "inet", "ris", "bat", "bes", "phis", "nis", "bi", "ubis", "isi", "atis", "os", "iso", "webkit"], "bos": ["asket", "oos", "stones", "outs", "ubs", "uts", "is", "ows", "aos", "fits", "oi", "bits", "gs", "tes", "bo", "ts", "ols", "uds", "oops", "ios", "obs", "bh", "banks", "jas", "fs", "pins", "bs", "los", "oss", "acs", "bil", "its", "asis", "eros", "bes", "mes", "BS", "vas", "nos", "tis", "zb", "dos", "bi", "ubis", "bin", "bas", "ods", "os", "ys"]}}
{"id1": "13362846", "id2": "7948308", "code1": "    public static void setContenu(ContenuFichierElectronique contenuFichier, FichierElectronique fichierElectronique, UtilisateurIFGD utilisateurCourant) throws IOException, DocumentVideException {\n        if (contenuFichier != null) {\n            SupportDocument support = fichierElectronique.getSupport();\n            support.setFichierElectronique(fichierElectronique);\n            FicheDocument ficheDocument = support.getFicheDocument();\n            String nomFichier = contenuFichier.getNomFichier();\n            String extension = FilenameUtils.getExtension(nomFichier);\n            if (ficheDocument.getFichierElectronique(nomFichier) != null) {\n                FichierElectronique fichierElectroniqueExistant = ficheDocument.getFichierElectronique(nomFichier);\n                if (fichierElectroniqueExistant.getId() != null && !fichierElectroniqueExistant.getId().equals(fichierElectronique.getId())) {\n                    throw new FichierElectroniqueExistantException(nomFichier, ficheDocument);\n                }\n            }\n            if (fichierElectronique.getId() == null) {\n                if (OfficeDocumentPropertiesUtil.canWriteIdIGID(extension)) {\n                    Long idIgid = OfficeDocumentPropertiesUtil.getIdIGID(contenuFichier);\n                    if (idIgid != null) {\n                        throw new FichierElectroniqueExistantException(nomFichier, idIgid, ficheDocument);\n                    }\n                }\n            }\n            InputStream inputStream = contenuFichier.getInputStream();\n            OutputStream outputStream = fichierElectronique.getOutputStream();\n            try {\n                IOUtils.copy(inputStream, outputStream);\n            } finally {\n                try {\n                    inputStream.close();\n                } finally {\n                    outputStream.close();\n                }\n            }\n            String typeMime = contenuFichier.getContentType();\n            long tailleFichier = contenuFichier.getTailleFichier();\n            Date dateDerniereModification = new Date();\n            fichierElectronique.setNom(nomFichier);\n            fichierElectronique.setTypeMime(extension);\n            creerFormatSiNecessaire(typeMime, extension);\n            fichierElectronique.setTaille(tailleFichier);\n            fichierElectronique.setDateDerniereModification(dateDerniereModification);\n            fichierElectronique.setSoumetteur(utilisateurCourant);\n            if (extension.endsWith(\"msg\")) {\n                CourrielUtils.peuplerMetadonneesCourriel(fichierElectronique.getNom(), ficheDocument, contenuFichier.getInputStream(), utilisateurCourant);\n            } else if (extension.endsWith(\"eml\")) {\n                Map<String, Object> properties = new GestionnaireProprietesMimeMessageParser().parseMsg(contenuFichier.getInputStream());\n                CourrielUtils.peuplerMetadonneesCourriel(fichierElectronique.getNom(), ficheDocument, properties, utilisateurCourant);\n            } else {\n                FGDProprietesDocumentUtils.copierMetadonneesProprietes(fichierElectronique, ficheDocument);\n            }\n        }\n    }\n", "code2": "    private void getRandomGUID(boolean secure) {\n        MessageDigest md5 = null;\n        StringBuffer sbValueBeforeMD5 = new StringBuffer();\n        try {\n            md5 = MessageDigest.getInstance(\"MD5\");\n        } catch (NoSuchAlgorithmException e) {\n            logger.error(\"At RandomGUID !!!\", e);\n        }\n        try {\n            long time = System.currentTimeMillis();\n            long rand = 0;\n            if (secure) {\n                rand = mySecureRand.nextLong();\n            } else {\n                rand = myRand.nextLong();\n            }\n            sbValueBeforeMD5.append(s_id);\n            sbValueBeforeMD5.append(\":\");\n            sbValueBeforeMD5.append(Long.toString(time));\n            sbValueBeforeMD5.append(\":\");\n            sbValueBeforeMD5.append(Long.toString(rand));\n            valueBeforeMD5 = sbValueBeforeMD5.toString();\n            md5.update(valueBeforeMD5.getBytes());\n            byte[] array = md5.digest();\n            StringBuffer sb = new StringBuffer();\n            for (int j = 0; j < array.length; ++j) {\n                int b = array[j] & 0xFF;\n                if (b < 0x10) sb.append('0');\n                sb.append(Integer.toHexString(b));\n            }\n            valueAfterMD5 = sb.toString();\n        } catch (Exception e) {\n            logger.error(\"At RandomGUID !!!\", e);\n        }\n    }\n", "label": 0, "substitutes": {"setContenu": ["setcontensenue", "setContennU", "setCont\u00ednux", "setContennux", "setContenU", "setcontenue", "setContensenU", "setContensenue", "setcontenu", "setContensenux", "setcontensenux", "setContennue", "setContensenu", "setcontenux", "setContenue", "setContennu", "setcontenU", "setcontensenU", "setCont\u00ednue", "setContenux", "setCont\u00ednU", "setcontensenu", "setCont\u00ednu"], "contenuFichier": ["contenuVchiere", "contenuFamilyachorie", "contenuFachiers", "contenuFileichie", "contenuFichtier", "contenuFicheieri", "contenuFsechier", "contenuFolfer", "contenuFachier", "contenuFicheire", "contenuMicheaire", "contenuFichtie", "contenuFamilyachiere", "contenuFechieri", "contenuFileichier", "contenuMichaire", "contenuFichIER", "contenuFicheer", "contenuFichtiere", "contenuVechiest", "contenuFchier", "contenuFithiest", "contenuFithorie", "contenuFsicher", "contenuFechiere", "contenuFchie", "contenuFsichieri", "contenuVichiest", "contenuFchIER", "contenuFiverire", "contenuFileochie", "contenuFrenchier", "contenuMicher", "contenuFihyr", "contenuFrenchaire", "contenuFithier", "contenuFihiere", "contenuFachie", "contenuFamilyichiere", "contenuVichiere", "contenuFechiest", "contenuVchier", "contenuFicheaire", "contenuFihier", "contenuFechyr", "contenuFolfire", "contenuFileichiers", "contenuFigniere", "contenuMichier", "contenuFuffier", "contenuFiverier", "contenuFchiere", "contenuFochie", "contenuFiverieri", "contenuFuffieri", "contenuFuffire", "contenuFichie", "contenuFochiere", "contenuFigner", "contenuFecher", "contenuFihiest", "contenuFicheie", "contenuFichorie", "contenuFichiest", "contenuFsrenchaire", "contenuFicheorie", "contenuFochiers", "contenuFileochiers", "contenuFechier", "contenuFichire", "contenuFichieri", "contenuFsichire", "contenuFamilyachier", "contenuVichyr", "contenuFsrenchieri", "contenuFileichiere", "contenuFochIER", "contenuFithiere", "contenuFichiers", "contenuFamilyichie", "contenuFsechieri", "contenuFsichier", "contenuFolfier", "contenuVchIER", "contenuFChier", "contenuMicheier", "contenuFolfieri", "contenuFrenchieri", "contenuFicheiere", "contenuMicheer", "contenuFChaire", "contenuFicheier", "contenuFochier", "contenuVechier", "contenuMicheiere", "contenuFsrenchier", "contenuVichIER", "contenuFamilyichorie", "contenuFsecher", "contenuVechyr", "contenuFichaire", "contenuVichie", "contenuFCher", "contenuFachiere", "contenuFamilyichier", "contenuFechire", "contenuFamilyachie", "contenuVchie", "contenuFicheiers", "contenuFithie", "contenuFignaire", "contenuFsichaire", "contenuFichyr", "contenuFichtIER", "contenuFicher", "contenuFileochiere", "contenuFsrenchire", "contenuFileochier", "contenuVichier", "contenuVechiere", "contenuFrenchire", "contenuFichiere", "contenuFChiere", "contenuFignier", "contenuFuffer", "contenuFiveraire", "contenuFachorie", "contenuFithyr", "contenuMichiere", "contenuFsechire"], "fichierElectronique": ["fichierElectroniques", "fichierElectromic", "fichierSelectronique", "fichierElectronsiq", "fichierElectrenier", "fichierElectroneius", "fichierSelectroniques", "fichierelectreniques", "fichierSelectroneique", "fichierElectonic", "fichierElectronicy", "fichierElectronoch", "fichierElectronsique", "fichierCentRONicy", "fichierElectroneoch", "fichierSelectronicity", "fichierElectronsie", "fichierTransferradoric", "fichierElectrenius", "fichierElectchronicy", "fichierElectromaire", "fichierTransferradorie", "fichierCentRONaire", "fichierElectronicity", "fichierCentronaire", "fichierElectromipolar", "fichierElectronticity", "fichierTransferradorius", "fichierElectronie", "fichierElectreniques", "fichierElectronsicity", "fichierelectronique", "fichierelectrenic", "fichierElectroneie", "fichierCentronique", "fichierElectroneique", "fichierElectronier", "fichierTransferradorique", "fichierElectRONicy", "fichierCentronius", "fichierAdministronique", "fichierElectrontique", "fichierElectradorique", "fichierElectronius", "fichierElectroneicity", "fichierElectromie", "fichierTransferronius", "fichierTransferronie", "fichierElectrenicy", "fichierElectrenaire", "fichierElectroneiques", "fichierAdministroneique", "fichierElectronaire", "fichierElectroneiq", "fichierElectonique", "fichierAdministroneie", "fichierElectoniques", "fichierelectrenique", "fichierElectchronique", "fichierSelectroneiques", "fichierelectronic", "fichierAdministroniq", "fichierElectradoric", "fichierElectrontaire", "fichierSelectroneicity", "fichierElectricie", "fichierElectronsiques", "fichierElectrenique", "fichierElectromius", "fichierElectrontipolar", "fichierTransferronique", "fichierElectronsoch", "fichierelectrenier", "fichierElectroniq", "fichierCentronicy", "fichierElectromicity", "fichierElectriciq", "fichierElectchronius", "fichierAdministroniques", "fichierElectRONius", "fichierElectronic", "fichierElectradorie", "fichierElectroneaire", "fichierAdministroneiques", "fichierelectroniques", "fichierElectchronoch", "fichierElectRONique", "fichierAdministronie", "fichierElectonier", "fichierElectriciques", "fichierElectchronicity", "fichierElectroneipolar", "fichierElectronsic", "fichierElectRONaire", "fichierElectrenic", "fichierelectronier", "fichierTransferronic", "fichierElectchroniques", "fichierCentRONique", "fichierSelectroneoch", "fichierElectricique", "fichierAdministroneiq", "fichierSelectronoch", "fichierCentRONius", "fichierElectronsier", "fichierElectronipolar", "fichierElectromique", "fichierElectradorius", "fichierElectroneic", "fichierElectchronaire"], "utilisateurCourant": ["utilisateursGovernante", "utilisateurGovernants", "utilisateursCourante", "utilisateurCourante", "utilisateurParticipant", "utilisateurRepresentiant", "utilisateurRepresentant", "utilisateurGovernant", "utilisateurRepresentante", "utilisateursCourant", "utilisateurGovernante", "utilisateursCourants", "utilisateurRepresentants", "utilisateurGoverniant", "utilisateursGovernants", "utilisateurParticipante", "utilisateurParticipiant", "utilisateurCouriant", "utilisateursGoverniant", "utilisateursCouriant", "utilisateursGovernant", "utilisateurParticipants", "utilisateurCourants"], "support": ["Support", "allow", "system", "pport", "cover", "force", "please", "help", "supported", "replace", "SUP", "history", "context", "success", "service", " Support", "control", "storage", "access", "null", "library", "trust", "port", "profile", "know", "language", "accept", "evidence", "supp", "feature", "format", "cap", "see", "document", "media", "proof", "use", "prototype", "share", "collection", "install"], "ficheDocument": ["ficiDatabase", "flicheDatabase", " frenchDatabase", "frenchDatabase", "FicheDocument", "fayeDoc", "FayeDocument", "fiqueDescription", "frenchDoc", "fruitDocument", "FicheDoc", "facheJournal", "hachedocument", "fcheDoc", "bacheDocument", "ficidocument", " frenchDescription", "bicheDatabase", "fiqueDocument", "hacheDocument", "frenchDescription", "FayeDocuments", "fruitJournal", "ficheDoc", "fifaDoc", "FicheDatabase", " ficheDatabase", "ficheTransaction", "bicheDoc", "FicheDocuments", "flicheTransaction", "fayeDocument", "ficiTransaction", "fitimeDatabase", "bacheDatabase", "frenchMatrix", "hicheDocument", "fitimeDocument", "frenchDocuments", "fliciDatabase", "fayeDatabase", "ficiDocument", "bacheDoc", "fcheDatabase", "fifaDatabase", "ficiMatrix", "ficheMatrix", " frenchDocument", "hicheTransaction", "fliciMatrix", "FayeDoc", "fitimeMatrix", "facheTree", "foyerDocument", "ficheDocuments", "fruitdocument", "ficheDatabase", "hichedocument", "foyerDatabase", "fcheDocument", "fichedocument", "fitimeDescription", "flicheMatrix", "ficheDescription", "hacheJournal", "facheTransaction", "fiqueDatabase", "fliciDocument", "foyerDoc", "ficiJournal", "fayeDocuments", "fachedocument", "FayeDatabase", "fliciTransaction", "frenchTransaction", "fruitTransaction", "hicheJournal", " ficheDescription", "fitimeTransaction", "ficheJournal", "flicheDocument", "bicheTree", "fifaDocument", "bicheDocument", "bacheTree", "facheDocument", "foyerTree", "facheDoc", "facheDatabase", "frenchDocument", "hacheTransaction", "fcheTree", "fifaDocuments", "ficheTree"], "nomFichier": ["nomFichie", "nomFilicjer", "nomUFachery", "nomFachomer", "nomFicER", "nomFicheier", "nomFachire", "nomPFoilier", "nomFericier", "nomNolfiere", "nomUFichire", "nomNolfie", "nomFericanger", "nomPFoilER", "nomFiverire", "nomFichoier", "nomPFoililler", "nomFichiere", "nomPachier", "nomFichiner", "nomFichoIER", "nomFacherer", "nomFicheire", "nomFicier", "nomFichanger", "nomFachery", "nomFihIER", "nomFicomer", "nomFichiller", "nomFolfie", "nomFiliciller", "nomUFichier", "nomFichancer", "nomFchiner", "nomFcher", "nomFachIER", "nomFiciller", "nomFachiner", "nomFchomer", "nomPFichjer", "nomFihier", "nomNichie", "nomNichiere", "nomNolfire", "nomFicher", "nomPFichier", "nomFachiere", "nomFicheie", "nomFiverIER", "nomFiverery", "nomUFachire", "nomFichoancer", "nomFichER", "nomFicheer", "nomPachire", "nomFichomer", "nomNolfier", "nomUFichIER", "nomUFachier", "nomFolfiere", "nomFoilier", "nomPichomer", "nomFericancer", "nomFericIER", "nomNichier", "nomFachie", "nomPacherer", "nomPFichiller", "nomFihery", "nomFchire", "nomFchier", "nomFicheiner", "nomFilicER", "nomFichoanger", "nomFicherer", "nomFichIER", "nomFcherer", "nomFicheiere", "nomPachomer", "nomFolfier", "nomFacher", "nomPFichER", "nomFachanger", "nomFilicier", "nomPichier", "nomPichire", "nomFicerer", "nomPFoiljer", "nomFoiljer", "nomFachier", "nomFolfire", "nomUFichery", "nomFoililler", "nomPicherer", "nomNichire", "nomFchiere", "nomFihire", "nomFachancer", "nomFiverier", "nomFoilER", "nomFichjer", "nomFicjer", "nomFicire", "nomUFachIER", "nomFichery", "nomFichire"], "extension": ["protitude", "Extensions", "strension", "protension", "extention", "protention", "expitude", "contention", "extending", "contractor", "xtending", "extitude", "contitude", "strending", "contension", "strensions", "Extending", "extractor", "expractor", "expention", "protractor", "xtensions", "Extension", "extensions", "expension", "xtension"], "fichierElectroniqueExistant": ["fichierElectronicityInvant", "fichierElectroniqueAssistent", "fichierElectroniqueAssclusive", "fichierElectroniqueInistant", "fichierElectronogramLocalistent", "fichierElectronogramExistant", "fichierElectroniqueExister", "fichierElectroniquePersistent", "fichierElectroniqueLocalistance", "fichierElectronoguePersistant", "fichierElectroniqueExiker", "fichierElectronicityInistant", "fichierElectronicityInert", "fichierElectroniqueExplvant", "fichierElectronogueExistent", "fichierElectronicityInistance", "fichierElectroniqueLocalistant", "fichierElectroniqueEXistance", "fichierElectronicityExvant", "fichierElectronogueExistant", "fichierElectroniqueExistance", "fichierElectroniqueEXistant", "fichierElectroniquePlusistent", "fichierElectroniqueEXert", "fichierElectroniqueInistance", "fichierElectronicityExistant", "fichierElectroniqueInvant", "fichierElectroniqueExvant", "fichierElectroniquePersistant", "fichierElectroniqueLocalistent", "fichierElectroniquePlusister", "fichierElectronogramLocalistant", "fichierElectroniqueEXvant", "fichierElectronicityExert", "fichierElectroniquePresentistent", "fichierElectronogramExclusive", "fichierElectroniqueAssistance", "fichierElectroniqueExistent", "fichierElectronogramExistance", "fichierElectroniqueExclusive", "fichierElectronogramExistent", "fichierElectroniquePersister", "fichierElectroniqueInclusive", "fichierElectronoguePersistent", "fichierElectroniqueExplistant", "fichierElectroniqueAssistant", "fichierElectronoguePersiker", "fichierElectroniquePlusiker", "fichierElectroniqueLocalclusive", "fichierElectroniquePersiker", "fichierElectroniquePresentiker", "fichierElectroniqueExert", "fichierElectronogueExister", "fichierElectronoguePersister", "fichierElectroniqueInistent", "fichierElectronogramLocalclusive", "fichierElectronogramLocalistance", "fichierElectroniquePlusistant", "fichierElectronicityExistance", "fichierElectroniqueExplert", "fichierElectroniqueInert", "fichierElectroniquePresentister", "fichierElectronogueExiker", "fichierElectroniqueExplistance", "fichierElectroniquePresentistant"], "idIgid": ["idIkgis", "idIvgdata", "idIglimit", "idIgcido", "idIgido", "idImgkey", "idIvgid", "idIigmid", "idIvgids", "idAmgis", "idIgkey", "idIgdida", "idIgzido", "idIgoid", "idIIgzoid", "idImgids", "idIvgkey", "idIgids", "idAgid", "idImglimit", "idIgzid", "idIgdata", "idIIgido", "idIgdid", "idIgzida", "idIgcid", "idIgcoid", "idAgis", "idIgaddress", "idAmgid", "idIgzoid", "idIegids", "idAglimit", "idIgida", "idIegid", "idIigmis", "idIIgzida", "idAmglimit", "idImgid", "idIIgzid", "idImgdata", "idIgdido", "idIigmaddress", "idIgcida", "idIgdoid", "idIigmlimit", "idIgis", "idAmgaddress", "idIIgid", "idIegdata", "idIIgida", "idIIgoid", "idIIgzido", "idIkglimit", "idAgaddress", "idImgaddress", "idIegkey", "idImgis", "idIkgid", "idIkgaddress"], "inputStream": ["helloStreamer", "outputChannel", "inputstream", " inputstream", "inputStreamer", "Inputstream", "outputSteam", "inputThread", "InputThread", "helloSteam", "imageLoop", "outputStreamer", "inputChannel", "inputSteam", " inputChannel", "imageTime", " inputThread", " inputSteam", " inputLoop", "imageStream", "helloStream", "InputLoop", "outputstream", "inputLoop", "inputTime", " inputStreamer", "InputTime", "InputStream", "imageSteam", " inputTime", "outputThread", "helloChannel", "InputSteam"], "outputStream": ["sequenceStyle", "inputView", "webStreamer", "OutputStreamer", "outputForm", "OutputStyle", "outputSteam", "writeSteam", " outputStreamer", " outputView", "OutputForm", "writeForm", "webView", "writeView", "outputStreamer", " outputSteam", "outputView", "inputSteam", "webStream", "sequenceStreamer", "OutputSteam", "OutputView", "inputForm", "writeStream", "OutputStream", "outputStyle", "sequenceSteam", " outputStyle", "webSteam", "sequenceStream"], "typeMime": ["typeSmim", "Typemim", "typeMim", "typeRim", "typemime", "typemIME", "typeRime", "typeRIME", "Typemime", "typeMIME", "TypeMime", "TypeMme", "TypeMim", "typeSmme", "TypemIME", "typeSmime", "typeMme", "typemim", "Typemme", "TypeMIME", "typemme", "typeSmIME", "typeRme"], "tailleFichier": [" tailleFixies", " tailleFixier", " tailleficheies", " tailleficheie", " tailleFuzziers", " tailleFixie", " tailleFicheies", " tailleficheier", " taillefichie", " tailleFicheie", " tailleFicheiers", " tailleFichie", " tailleFixiers", " tailleFichiers", " taillefichiers", " tailleficheiers", " taillefichier", " tailleFuzzie", " taillefichies", " tailleFicheier", " tailleFuzzies", " tailleFuzzier", " tailleFichies"]}}
{"id1": "21821404", "id2": "21308543", "code1": "    public static String getWebPage(URL urlObj) {\n        try {\n            String content = \"\";\n            InputStreamReader is = new InputStreamReader(urlObj.openStream());\n            BufferedReader reader = new BufferedReader(is);\n            String line;\n            while ((line = reader.readLine()) != null) {\n                content += line;\n            }\n            return content;\n        } catch (IOException e) {\n            throw new Error(\"The page \" + dbg.quote(urlObj.toString()) + \"could not be retrieved.\" + \"\\nThis is could be caused by a number of things:\" + \"\\n\" + \"\\n  - the computer hosting the web page you want is down, or has returned an error\" + \"\\n  - your computer does not have Internet access\" + \"\\n  - the heat death of the universe has occurred, taking down all web servers with it\");\n        }\n    }\n", "code2": "    private static void copyFile(String src, String target) throws IOException {\n        FileChannel ic = new FileInputStream(src).getChannel();\n        FileChannel oc = new FileOutputStream(target).getChannel();\n        ic.transferTo(0, ic.size(), oc);\n        ic.close();\n        oc.close();\n    }\n", "label": 0, "substitutes": {"getWebPage": ["getLivePage", "getDebugPage", "getWebpage", "downloadwebUrl", "getwebpage", "downloadwebPages", "downloadWebPages", "downloadWebpage", "downloadwebPage", "getwebPage", "getLiveUrl", "getWebPages", "getWebUrl", "downloadWebPage", "getDebugpage", "getLivepage", "getwebPages", "downloadwebpage", "getDebugUrl", "getDebugPages", "downloadWebUrl", "getwebUrl", "getLivePages"], "urlObj": [" urlOb", " urlobj", "UrlOnce", "urlCtrl", "UrlObject", "urlOb", "uriCtrl", "urlOnce", " urlInd", "UrlObj", "httpInfo", "UrlCtrl", "uriInd", "UrlInd", "httpObject", "httpObj", "urlObject", "urlInfo", "logInfo", " urlCtrl", " urlInfo", "uriOnce", "uriobj", " urlOnce", "Urlobj", "httpOb", " urlObject", "urlobj", "uriObj", "logObj", "uriObject", "logObject", "logOb", "urlInd"], "content": ["text", "address", "string", "sequence", "txt", "str", "ce", "clean", "wrapper", "ontent", "Content", "context", "articles", "current", "temp", "output", "comments", "complete", "section", "view", "ext", "write", "code", "title", "html", "article", "reason", "buffer", "message", "page", "result", "raw", "equ", "format", "core", "read", "document", "template", "cm", "comment", "object", "data", "load", "cont", "source", "value", "header", "response", "empty", "layout", "body", "continue", "display", "command"], "is": ["being", "not", "isl", "by", "was", "ists", "e", "sis", "ot", "re", "rs", "rys", "ios", "has", "sit", "job", "web", "name", "nis", "ir", "isi", "isc", "err", "were", "be", "in", "more", "ese", "ais", "ri", "c", "a", "are", "internet", "as", "ms", "net", "s", "out", "lis", "sys", "isf", "or", "chain", "and", "Is", "where", "plays", "iss", "when", "id", "ism", "isa", "ist", "other", "res", "fs", "ois", "ris", "iso", "ians", "does", "string", "mis", "iris", "ire", "i", "his", "bis", "IS", "its", "\u00eds", "isin", "tis", "sels", "es", "os", "se"], "reader": ["dr", "ocker", "iper", "file", "io", "roller", "per", "loader", "ader", "ner", "in", "row", "Reader", "ri", "r", "editor", "ro", "inner", "rar", "runner", "ipper", "iterator", "iter", "buffer", "writer", "anger", "parser", "read", "dra", "rr", "liner", "reading", "ser", "er", "stream", "handler"], "line": ["text", "ln", "sample", "cell", "string", "file", "sequence", "nl", "inline", "point", "print", "part", "char", "e", "zone", "row", "stroke", "detail", "record", "section", "email", "range", "block", "label", "piece", "link", "message", "lin", "page", "column", "lo", "frame", "liner", "comment", "lane", "ine", "le", "online", "eline", "lined", "el", "Line", "l", "LINE", "entry", "word"]}}
{"id1": "13122204", "id2": "12586404", "code1": "    public static void unzipModel(String filename, String tempdir) throws EDITSException {\n        try {\n            BufferedOutputStream dest = null;\n            FileInputStream fis = new FileInputStream(filename);\n            int BUFFER = 2048;\n            ZipInputStream zis = new ZipInputStream(new BufferedInputStream(fis));\n            ZipEntry entry;\n            while ((entry = zis.getNextEntry()) != null) {\n                int count;\n                byte data[] = new byte[BUFFER];\n                FileOutputStream fos = new FileOutputStream(tempdir + entry.getName());\n                dest = new BufferedOutputStream(fos, BUFFER);\n                while ((count = zis.read(data, 0, BUFFER)) != -1) dest.write(data, 0, count);\n                dest.flush();\n                dest.close();\n            }\n            zis.close();\n        } catch (Exception e) {\n            throw new EDITSException(\"Can not expand model in \\\"\" + tempdir + \"\\\" because:\\n\" + e.getMessage());\n        }\n    }\n", "code2": "    @Override\n    public List<ProvaSolution[]> run(ProvaService prova, String agent, String key, String src) throws IOException {\n        File file = new File(src);\n        BufferedReader in;\n        InputStream is = null;\n        try {\n            if (!file.exists() || !file.canRead()) {\n                try {\n                    is = Thread.currentThread().getContextClassLoader().getResourceAsStream(src);\n                    in = new BufferedReader(new InputStreamReader(is));\n                } catch (Exception ex1) {\n                    try {\n                        is = RuleReaderImpl.class.getResourceAsStream(src);\n                        in = new BufferedReader(new InputStreamReader(is));\n                    } catch (Exception ex2) {\n                        try {\n                            URL url = new URL(src);\n                            in = new BufferedReader(new InputStreamReader(url.openStream()));\n                        } catch (Exception ex3) {\n                            throw new IOException(\"Cannot read from \" + src);\n                        }\n                    }\n                }\n            } else {\n                FileReader fr = new FileReader(file);\n                in = new BufferedReader(fr);\n            }\n            List<ProvaSolution[]> results = prova.consult(agent, in, key);\n            return results;\n        } finally {\n            if (is != null) is.close();\n        }\n    }\n", "label": 0, "substitutes": {"unzipModel": ["unzipModule", "unarchiveImage", "unlateModule", "unzipImage", "unarchivemodel", "unlateModel", "UnarchiveModule", "Unzipmodel", "uncodeModel", "unlateImage", "UnarchiveModel", "Unarchivemodel", "UnzipModule", "uncodeImage", "unlatemodel", "unarchiveModel", "UnzipModel", "uncodemodel", "unzipmodel", "uncodeModule", "UnzipImage", "UnarchiveImage", "unarchiveModule"], "filename": ["river", "ln", "nil", "path", "subject", "ivo", "file", "fil", "FIL", "txt", "nl", "kl", "FILE", "fle", "nm", "ename", "username", "original", "output", "n", "til", "title", "Filename", "location", "stem", "origin", "mson", "wl", "journal", "fp", "dra", "download", "println", "name", "fn", "FN", "jpg", "source", "SourceFile", "directory", "sql"], "tempdir": [" tempdirectory", "testpath", "tempDir", "Tempfile", " tempfile", "testfolder", "Tempdirectory", " tempDir", "tempath", "temfolder", "tmpdirectory", "tmpfolder", "Tempdir", "TempDir", "temdirectory", "tempfile", " tempDIR", "tempfolder", "tmpfile", "tempDIR", "testDir", "temDir", "testdir", "tmpdir", "temDIR", "temppath", "temdir", "tempdirectory", "tmppath", "tmpDIR", "tmpDir"], "dest": ["master", "send", "foreign", "tail", "trans", "decl", "ctr", "dat", "des", "generated", "parent", "src", "store", "test", "st", "Dest", "nt", "obj", "ptr", "temp", "slave", "output", "target", "pipe", "inv", "deep", "nom", "null", "stream", "write", "port", "desc", "buffer", "table", "result", "loc", "out", "est", "tmp", "usr", "writer", "document", "dist", "cont", "rest", "source", "comb", "tr", "sum", "pos", "peer", "default", "del", "bin", "dev", "origin", "coord", "display", "dc"], "fis": ["zjs", "flatis", "fjs", "zi", "flis", "li", "ifatis", "fli", "fljs", "ifos", "zos", "flos", "ifis", "ifi", "fatis", "los", "lis", "ljs", "fi", "zatis"], "BUFFER": ["BufferBER", " BUULT", "FFERFFER", "CUFFER", " BUBuffer", "BufferFFER", "BUFR", " BUOUNT", "BLBER", "BLFFER", "BBER", "CUBuffer", "MAXBuffer", "BUBER", "MAXOUNT", "LOCKBER", "BAFFER", "BUULT", "LOCKFFER", "BULT", "MAXFFER", "BLBuffer", "CUFR", "BFFER", " BUMT", "MAXBER", "FFERMT", "BUBuffer", " BUFR", "FFERBER", "CUBER", "BUMT", "BAULT", "BAOUNT", "LOCKFR", "BufferMT", "LOCKBuffer", "BOUNT", " BUBER", "FFERBuffer", "BLOUNT", "BABER", "BUOUNT", "BufferBuffer"], "zis": ["zeIS", "zi", "zeos", " zes", "zeits", " zits", "zoneits", "zoneiss", "Zos", "zeis", "zees", "xis", "zeris", "xos", "ziss", "zos", " zris", " zos", "fiss", "zits", "Zis", "zip", "zeiss", " zi", "ozi", "zies", "ozis", "xiss", "fip", "zoneris", "xi", "zris", " zIS", "oziss", " ziss", "ziIS", "Ziss", " zip", "fi", "zios", "ziis", "zIS", "zoneis", "ozip", "zes", "Zi"], "entry": ["system", "jar", "item", "card", "cell", "match", "log", "file", "member", "ce", "Entry", "part", "char", "e", "nt", "row", "record", "index", "way", "word", "connection", "jo", "zip", "inter", "piece", "link", "ze", "je", "def", "table", "pe", "result", "zo", "enter", "element", "ie", "ry", "name", "comment", "source", "key", "image", "or", "chain", "escape", "header", "ent", "existent", "se"], "count": ["match", "force", "cell", "number", "batch", "ctr", "ount", "amount", "ce", "nb", "length", "part", "start", "z", "child", "nt", "num", "max", "current", "total", "len", "call", "index", "c", "n", "check", "code", "cc", "f", "base", "ct", "buffer", "counter", "page", "found", "acc", "core", "all", "read", "Count", "common", "comment", "OUNT", "cont", "add", "sum", "cache", "cloud", "cond", "size"], "data": ["text", "d", "dec", "sample", "bytes", "batch", "results", "ata", "dat", "p", "step", "str", "part", "ATA", "output", "content", "dl", "n", "area", "valid", "accept", "rel", " DATA", "table", "buffer", "message", "format", "result", "out", "raw", "all", "zero", "value", "image", "done", "DATA", "window", "cache", "next", "mat", "size"], "fos": ["voses", "Fos", "fios", " fOS", " foes", " fios", "Foses", "lOS", "foss", "foes", "vos", "Foes", "voes", "loss", "los", "Fios", " foses", "voss", "lios", "foses", "fOS", "FOS", " foss", "Foss"]}}
{"id1": "8917658", "id2": "16825994", "code1": "    public static void copyAll(URL url, Writer out) {\n        Reader in = null;\n        try {\n            in = new InputStreamReader(new BufferedInputStream(url.openStream()));\n            copyAll(in, out);\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        } finally {\n            close(in);\n        }\n    }\n", "code2": "    public int run(String[] args) throws Exception {\n        if (args.length < 2) {\n            System.err.println(\"Download dir local\");\n            return 1;\n        }\n        OutputStream out = new FileOutputStream(args[1]);\n        Path srcDir = new Path(args[0]);\n        Configuration conf = new Configuration();\n        FileSystem srcFS = FileSystem.get(conf);\n        if (!srcFS.getFileStatus(srcDir).isDirectory()) {\n            System.err.println(args[0] + \" is not a directory.\");\n            return 1;\n        }\n        try {\n            FileStatus contents[] = srcFS.listStatus(srcDir);\n            for (int i = 0; i < contents.length; i++) {\n                if (contents[i].isFile()) {\n                    System.err.println(contents[i].getPath());\n                    InputStream in = srcFS.open(contents[i].getPath());\n                    try {\n                        IOUtils.copyBytes(in, out, conf, false);\n                    } finally {\n                        in.close();\n                    }\n                }\n            }\n        } finally {\n            out.close();\n        }\n        return 0;\n    }\n", "label": 0, "substitutes": {"copyAll": ["transferFrom", "transferall", "copySome", "copyFiles", "getSome", "getall", "transferAll", "transferMultiple", " copySome", " copyMultiple", "getAll", "cloneFiles", " copyFiles", " copyall", "copyFrom", "cloneAll", "Copyall", "cloneall", "copyall", " copyFrom", "cloneSome", "copyMultiple", "getFiles", "CopyFrom", "CopyMultiple", "CopyAll"], "url": ["sl", "gl", "address", "log", "file", "Url", "ret", "str", "nl", "id", "kl", "print", "mail", "b", "char", "browser", "ls", "dl", "dll", "ll", "pattern", "ssl", "link", "html", "uri", "base", "URL", "job", "web", "ur", "un", "name", "bel", "http", "mount", "el", "rect", "l", "xml", "sql", "lb", "ul"], "out": ["v", "log", "file", "io", "b", "k", "t", "nt", "ot", "output", "to", "n", "check", "gt", "outer", "f", "o", "set", "net", "end", "oss", "user", "ch", "writer", "all", "gr", "client", "OUT", "Out", "list", "it", "g", "ou", "outs", "w"], "in": ["mc", "serv", "again", "h", "file", "en", "p", "io", "old", "is", "inf", "k", "up", "cin", "mr", "from", "mi", "reader", "re", " IN", "r", "qa", "IN", "inc", "i", "ro", "inner", "m", " din", "on", "o", "as", "iter", "ma", "din", "conn", "ck", "user", "vin", "input", "isin", "ind", "read", "gin", "line", "In", "source", "or", "and", "ins", "rin", "sum", "it", "bin", "body", "er", "con", "inn", "se"]}}
{"id1": "19549489", "id2": "88047", "code1": "    public static void copy(File sourceFile, File destinationFile) throws IOException {\n        FileChannel sourceFileChannel = (new FileInputStream(sourceFile)).getChannel();\n        FileChannel destinationFileChannel = (new FileOutputStream(destinationFile)).getChannel();\n        sourceFileChannel.transferTo(0, sourceFile.length(), destinationFileChannel);\n        sourceFileChannel.close();\n        destinationFileChannel.close();\n    }\n", "code2": "    private static void readAndRewrite(File inFile, File outFile) throws IOException {\n        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n        Dataset ds = DcmObjectFactory.getInstance().newDataset();\n        dcmParser.setDcmHandler(ds.getDcmHandler());\n        dcmParser.parseDcmFile(null, Tags.PixelData);\n        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        System.out.println(\"reading \" + inFile + \"...\");\n        pdReader.readPixelData(false);\n        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n        ds.writeDataset(out, dcmEncParam);\n        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n        System.out.println(\"writing \" + outFile + \"...\");\n        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        pdWriter.writePixelData();\n        out.flush();\n        out.close();\n        System.out.println(\"done!\");\n    }\n", "label": 1, "substitutes": {"copy": ["clone", "delete", "Cop", "cat", " cp", "replace", "map", "export", "cp", "write", "csv", "slice", "paste", "rm", "create", "Copy", "upload", "download", "transfer", "read", " mirror", " duplicate", "load", " Copy", "save", "add", "move", "sync"], "sourceFile": ["inputLine", "inputPage", "ourcefile", "ourcePage", "ourceFile", "sourcefile", "inputFile", "ourceFilename", "ourceLine", "SourceFilename", " sourceLine", " sourceFilename", "inputfile", "sourceFilename", "SourceLine", " sourcefile", "SourcePage", " sourcePage", "SourceFile", "sourcePage", "Sourcefile", "sourceLine"], "destinationFile": ["destinationfile", "destinatedPlace", "destinationsfile", "declinatorFile", "destinationPath", "destinatorFile", "destinatedfile", "estinatedFilename", "estinationFile", "destinatePlace", "destrativePlace", "destinatorPath", "estinationPlace", "destinationsPlace", "declinationPlace", "estinatedFile", "declinationFilename", "declinatorPlace", "destinoFilename", "destrativeFile", "destinatedFilename", "declinationPath", "declinatorFilename", "destinatePath", "estinatedPlace", "destinatorPlace", "destinatedFile", "destinationPlace", "destinationFilename", "estinationfile", "declinationFile", "estinationFilename", "destinoFile", "destinationsFilename", "destinatorFilename", "destrativePath", "estinatedfile", "declinatorPath", "destinofile", "destrativeFilename", "destinoPlace", "destinationsFile", "destinateFile", "destinateFilename"], "sourceFileChannel": ["sourceFileApplication", "sourceBaseHandler", "ourceEntrychannel", "sourceBaseChuck", "ourceEntryChan", "sourceBlockConnection", "srcFilechannel", "sourceStreamChan", "sourceFilechannel", "srcFileChannel", "sourceStreamChuck", "sourceEntrychannel", "srcBlockchannel", "sourceEntryChannel", "sourceStreamchannel", "sourceBlockchannel", "sourceFileChuck", "sourceBaseChannel", "sourceEntryConnection", "sourceEntryChan", "ourceFileChannel", "srcBlockConnection", "sourceFileHandler", " sourceFileHandler", "sourceStreamChannel", "sourceByteEntry", "srcBlockEntry", "srcFileEntry", "sourceStreamApplication", "sourceByteConnection", "sourceLineEntry", "ourceFileChan", " sourceFileApplication", "ourceFilechannel", "sourceLineConnection", "ourceFileConnection", "sourceLineChan", "sourceFileChan", "sourceFileConnection", "sourceBytechannel", "sourceBlockEntry", "sourceByteChannel", "sourceBaseApplication", "sourceFileEntry", "sourceLineChannel", "sourceBlockChannel", "srcBlockChannel", "sourceStreamHandler", "ourceEntryChannel", "sourceLinechannel", " sourceFileChuck", "srcFileConnection", "sourceStreamConnection", "ourceEntryConnection"], "destinationFileChannel": ["destinationDirectoryChan", "destinatorFilesChannel", "destinatorFilesCh", "destmentResourceManager", "destmentPageContext", "destmentResourcechannel", "destmentFileContext", "destinationDirectoryChannel", "destinationResourcechannel", "destinationPageChan", "destinationFileConnection", "destinationfileManager", "destinationPageContext", "destinationChannelContext", "destinationFilesChan", "destinationfilechannel", "destinationfileConnection", "destinatorFileCh", "destinationChannelCh", "destinationChannelChannel", "destinationResourceChan", "destmentResourceChan", "destinationPageChannel", "destinatorFileConnection", "destinationFileContext", "destinationFileCh", "destinationResourceChannel", "destmentResourceChannel", "destinationDirectoryManager", "destinationPageEntry", "destinationChannelEntry", "destinatorFilesConnection", "destmentPageEntry", "destinatorFileChannel", "destinationFileManager", "destinatorFilesChan", "destinationDirectorychannel", "destmentFilechannel", "destinationfileChannel", "destinationFileChan", "destinationFileEntry", "destinationFilesChannel", "destmentFileManager", "destmentFileChan", "destmentFileEntry", "destinationResourceManager", "destinationFilechannel", "destinationChannelConnection", "destinatorFileChan", "destmentFileChannel", "destinationfileChan", "destinationfileCh", "destmentPageChan", "destinationFilesConnection", "destinationfileContext", "destinationChannelChan", "destinationFilesCh", "destinationfileEntry", "destmentPageChannel"]}}
{"id1": "3584508", "id2": "19584877", "code1": "    private void copyResource() throws Exception {\n        URL url = getResource(source);\n        InputStream input;\n        if (url != null) {\n            input = url.openStream();\n        } else if (new File(source).exists()) {\n            input = new FileInputStream(source);\n        } else {\n            throw new Exception(\"Could not load resource: \" + source);\n        }\n        OutputStream output = new FileOutputStream(destinationFile());\n        int b;\n        while ((b = input.read()) != -1) output.write(b);\n        input.close();\n        output.close();\n    }\n", "code2": "    public static boolean encodeFileToFile(String infile, String outfile) {\n        boolean success = false;\n        java.io.InputStream in = null;\n        java.io.OutputStream out = null;\n        try {\n            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);\n            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n            byte[] buffer = new byte[65536];\n            int read = -1;\n            while ((read = in.read(buffer)) >= 0) {\n                out.write(buffer, 0, read);\n            }\n            success = true;\n        } catch (java.io.IOException exc) {\n            exc.printStackTrace();\n        } finally {\n            try {\n                in.close();\n            } catch (Exception exc) {\n            }\n            try {\n                out.close();\n            } catch (Exception exc) {\n            }\n        }\n        return success;\n    }\n", "label": 1, "substitutes": {"copyResource": [" copyUrl", "downloadUrl", "downloadAddress", " copiedUrl", "copyFile", " copyFile", " copiedAddress", " copiedResource", " copiedFile", "downloadResource", " copyAddress", "downloadFile", "copyUrl", "copyAddress"], "url": ["sl", "gl", "address", "path", "fl", "string", "file", "Url", "ret", "str", "nl", "resource", "mail", "char", "browser", "service", "ls", "re", "r", "dl", "null", "ll", "host", "https", "ssl", "link", "html", "f", "uri", "rel", "base", "URL", "cl", "web", "gif", "loc", "ur", "github", "cert", "ml", "hl", "util", "http", "source", "rl", "mount", "el", "l", "mb", "ref", "ul"], "input": ["local", "text", "pull", "PUT", "op", "file", "missing", "before", "start", "Input", "in", "context", "up", "eval", "audio", "select", "open", "reader", "index", "qa", "null", "act", "access", "inner", "inside", "feed", "ssl", "accept", "initial", "base", "config", "iter", "form", "unknown", "enter", "raw", "get", "init", "active", "user", "parse", "read", "upload", "acl", "http", "source", "cont", "image", "add", "exec", "focus", "sum", "ip", "it", "empty", "request", "info", "state", "can", "ain", "stream"], "output": ["text", "Output", "icon", "put", "bool", "file", "print", "component", "remote", "update", "position", "success", "current", "you", "other", "network", "null", "write", "connection", "unsigned", "secure", "ilo", "console", "auto", "hidden", "outer", "o", "web", "net", "table", "format", "entity", "out", "exit", "client", "object", "four", "online", "secondary", "image", "group", "response", "next", "ou", "beta", "continue", "ne", "display"], "b": ["d", "v", "ba", "binary", "p", "by", "nb", "char", "k", "be", "t", "obj", "z", "rb", "j", "ab", "bb", "bits", "r", "c", "bit", "i", "block", "m", "ib", "f", "B", "base", "fb", "br", "body", "sb", "bs", "buff", "eb", "db", "u", "bf", "ble", "cb", "bp", "l", "ob", "bi", "mb", "g", "wb", "gb", "y", "bc"]}}
{"id1": "20306677", "id2": "1141361", "code1": "    public int update(BusinessObject o) throws DAOException {\n        int update = 0;\n        Bill bill = (Bill) o;\n        try {\n            PreparedStatement pst = connection.prepareStatement(XMLGetQuery.getQuery(\"UPDATE_BILL\"));\n            pst.setInt(1, bill.getId());\n            update = pst.executeUpdate();\n            if (update <= 0) {\n                connection.rollback();\n                throw new DAOException(\"Number of rows <= 0\");\n            } else if (update > 1) {\n                connection.rollback();\n                throw new DAOException(\"Number of rows > 1\");\n            }\n            connection.commit();\n        } catch (SQLException e) {\n            Log.write(e.getMessage());\n            throw new DAOException(\"A SQLException has occured\");\n        } catch (NullPointerException npe) {\n            Log.write(npe.getMessage());\n            throw new DAOException(\"Connection null\");\n        }\n        return update;\n    }\n", "code2": "    @Override\n    public void makeRead(final String user, final long databaseID, final long time) throws SQLException {\n        final String query = \"insert into fs.read_post (post, user, read_date) values (?, ?, ?)\";\n        ensureConnection();\n        final PreparedStatement statement = m_connection.prepareStatement(query);\n        try {\n            statement.setLong(1, databaseID);\n            statement.setString(2, user);\n            statement.setTimestamp(3, new Timestamp(time));\n            final int count = statement.executeUpdate();\n            if (0 == count) {\n                throw new SQLException(\"Nothing updated.\");\n            }\n            m_connection.commit();\n        } catch (final SQLException e) {\n            m_connection.rollback();\n            throw e;\n        } finally {\n            statement.close();\n        }\n    }\n", "label": 1, "substitutes": {"update": ["local", "where", "build", "send", "database", "match", "batch", "op", "put", "delete", "id", "replace", "print", "test", "latest", "up", "num", "current", " UPDATE", "fill", "run", "flush", "call", "ask", "index", "query", "updated", "write", "check", "status", "insert", "set", " Update", "date", "get", "out", "touch", "init", "draw", "all", "create", "commit", "change", "upload", "push", "patch", "user", "offset", "u", "Update", "UPDATE", "load", "save", "add", "report", "value", "use", "version", "execute", "oo", "login", "json", "state", "edit", "find", "now", "size"], "o": ["v", "p", "mo", "b", "k", "po", "e", "t", "obj", " mo", "onet", "bo", "to", "n", "i", "a", "m", "y", "ooo", "O", "out", "oin", "vo", "om", "u", "oid", "object", "fo", "ao", "oice", " os", "oa", "ob", "oo", "os", "iso"], "bill": ["fax", "build", "stuff", "batch", "bar", "nb", "b", "fund", "biz", "nn", "unk", "pay", "service", " billing", "bb", "work", "gross", "inv", "company", "bo", "iban", " Bill", "ll", "money", "BILL", "quote", "bean", "book", "lex", "sk", "ann", "net", "vo", "conn", "project", "Bill", "ship", "phy", "bank", " billed", "trade", "report", "kick", "handle"], "pst": ["apst", "cstra", "pkgth", "apct", "apsp", " pST", "pct", "tpst", "psp", "pkgstro", "opstra", "tpST", " pse", "tpse", "pkgst", "tpstra", " pstra", "cstro", "tpct", "cst", "opct", "picstra", "pST", "apST", "picst", "opse", "pstra", " pct", " psp", "picth", "pkgstra", "pth", "pse", "picstro", "pstro", "opst", "tpsp", "cth"]}}
{"id1": "11968328", "id2": "22022715", "code1": "    public static String getMD5(String _pwd) {\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            md.update(_pwd.getBytes());\n            return toHexadecimal(new String(md.digest()).getBytes());\n        } catch (NoSuchAlgorithmException x) {\n            x.printStackTrace();\n            return \"\";\n        }\n    }\n", "code2": "    protected static final byte[] digest(String s) {\n        byte[] ret = null;\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            md.update(s.getBytes());\n            ret = md.digest();\n        } catch (NoSuchAlgorithmException e) {\n            System.err.println(\"no message digest algorithm available!\");\n            System.exit(1);\n        }\n        return ret;\n    }\n", "label": 1, "substitutes": {"getMD5": [" getmdState", " getMDState", " getmd5", " calculatemd5", " calculateMD5", " getMD2", " calculateMD2", " getMT1", " getHash1", " calculatemd2", " calculateMDState", " getmd2", " getMT5", " getMD1", " getMT2", " getmd1", " calculatemdState", " calculateMD1", " getHash5", " getHashState", " getHash2", " getMTState", " calculatemd1"], "_pwd": ["_vppriv", "_passfx", " _pword", "_passwd", " _sppriv", " _ppriv", "_passwords", " _pfx", " _passwd", " _spword", "_wpw", " _spwd", "_wpword", "_pfx", " _passfx", "_ppriv", "_pword", "_spfx", "_pwords", "_vpw", "_cfx", "_spwd", " _spw", " _passw", "_vpword", "_wpwd", " _pwords", "_spw", "_sppriv", "_spwords", "_passw", "_vpwd", " _pw", "_wppriv", "_cwd", " _passwords", "_spword", "_pw", "_cwords", "_cw"], "md": ["d", "mc", "h", "pd", "dir", "ld", "mt", "mail", "mod", "sm", "msg", "de", "nd", "ng", "red", "det", "m", "down", "pm", "sd", "ms", "dd", "mand", "tmp", "rm", "hd", "dig", "db", "mm", "ind", "mk", "cd", "od", "bd", "mg", "mn", "bf", "dm", "and", "add", "mp", "der", "dh", "man", "df", "mb", "cmd", "del", "MD", " Md"]}}
{"id1": "2168610", "id2": "12306305", "code1": "    public int update(BusinessObject o) throws DAOException {\n        int update = 0;\n        Contact contact = (Contact) o;\n        try {\n            PreparedStatement pst = connection.prepareStatement(XMLGetQuery.getQuery(\"UPDATE_CONTACT\"));\n            pst.setString(1, contact.getName());\n            pst.setString(2, contact.getFirstname());\n            pst.setString(3, contact.getPhone());\n            pst.setString(4, contact.getEmail());\n            if (contact.getAccount() == 0) {\n                pst.setNull(5, java.sql.Types.INTEGER);\n            } else {\n                pst.setInt(5, contact.getAccount());\n            }\n            pst.setBoolean(6, contact.isArchived());\n            pst.setInt(7, contact.getId());\n            update = pst.executeUpdate();\n            if (update <= 0) {\n                connection.rollback();\n                throw new DAOException(\"Number of rows <= 0\");\n            } else if (update > 1) {\n                connection.rollback();\n                throw new DAOException(\"Number of rows > 1\");\n            }\n            connection.commit();\n        } catch (SQLException e) {\n            Log.write(e.getMessage());\n            throw new DAOException(\"A SQLException has occured\");\n        } catch (NullPointerException npe) {\n            Log.write(npe.getMessage());\n            throw new DAOException(\"Connection null\");\n        }\n        return update;\n    }\n", "code2": "    private static void doCopyFile(File srcFile, File destFile, boolean preserveFileDate) throws IOException {\n        if (destFile.exists() && destFile.isDirectory()) {\n            throw new IOException(\"Destination '\" + destFile + \"' exists but is a directory\");\n        }\n        FileChannel input = new FileInputStream(srcFile).getChannel();\n        try {\n            FileChannel output = new FileOutputStream(destFile).getChannel();\n            try {\n                output.transferFrom(input, 0, input.size());\n            } finally {\n                IOUtil.closeQuietly(output);\n            }\n        } finally {\n            IOUtil.closeQuietly(input);\n        }\n        if (srcFile.length() != destFile.length()) {\n            throw new IOException(\"Failed to copy full contents from '\" + srcFile + \"' to '\" + destFile + \"'\");\n        }\n        if (preserveFileDate) {\n            destFile.setLastModified(srcFile.lastModified());\n        }\n    }\n", "label": 0, "substitutes": {"update": ["print", "msg", "updated", "grade", "dates", "touch", "exit", "offset", "UPDATE", "load", "use", "edit", "find", "now", "latest", "up", "run", "check", "write", "status", "set", " Update", "out", "get", "action", "diff", "create", "change", "http", "Update", "handle", "equal", "state", "where", "batch", "op", "delete", "id", "component", "current", "insert", "result", "date", "init", "user", "commit", "remove", "report", "value", "size", "ul", "send", "put", "resource", "count", "num", "row", "select", " UPDATE", "fill", "call", "index", "database", "draw", "u", "save", "add", "login", "info", "continue"], "o": ["h", "p", "mo", "k", "e", "t", "po", "obj", "onet", "c", "bo", "n", "to", "i", "a", "ilo", "m", "aco", "oco", "ooo", "O", "out", "oin", "q", "om", "lo", "oid", "object", "cont", "fo", "ao", "l", "oa", "ob", "oo", "co", "os", "iso"], "contact": ["fax", "address", "cell", "match", "force", "module", "trans", "communication", "mail", "print", "char", "component", "conduct", "service", "detail", "phone", "control", "company", "work", "responsible", "comm", "content", "cp", "act", "Contact", "check", "panel", "port", "connection", "title", "cc", "close", "claim", "aco", "config", "ct", "form", "message", "charge", "format", "lead", "action", "transfer", "client", "CONT", "att", "cont", "compliance", "report", "impact", "details", "add", "pp", "group", "hello", "addr", "l", "ACT", "controller", "info", "character", "translation", "consider", "acts", "display", "entry", "international", "country"], "pst": ["apst", "drest", "prst", "ipct", "bpstan", "ipsta", "epst", "dpst", "pingstra", "vpct", "epstal", "pster", "psta", "pmt", "ipst", "lct", "lST", "dpct", "pth", "epnt", "vply", "dpsy", "Pct", "jpsy", " pset", "bpost", "psth", "ipSt", "jpset", "ppt", "Pst", "ipsth", "tpstra", "phpct", "apstan", "jpct", "bpst", "jpmt", "lse", " post", " pct", " pster", "Ppt", " pSt", "psy", "prST", "pingth", "presta", "jpST", "prse", "preSt", "pect", "lst", " psth", "perest", "pingst", "jpster", "vpst", "pingct", "apSt", "dpt", "prest", "ipmt", "dst", "pept", "tpct", "apost", "bpSt", "presth", "PST", " ply", " psy", "Prest", "Pse", "pstal", "jply", " pmt", "post", "pingSt", " pST", "jpst", "pct", "tpst", "ply", "prct", "phpstal", "tpstal", "dpster", "phpst", "pnt", "pstan", "vpset", "prect", "ipST", "preth", "dct", " pstra", "ipth", "epct", "pST", " pnt", "phpnt", "pset", "pstra", "pSt", "pest", " pstal", "pingstal", "pse", " pstan", "pingsta", "jpSt"]}}
{"id1": "15737836", "id2": "6682825", "code1": "    public void delete(Site site) throws Exception {\n        DBOperation dbo = null;\n        Connection connection = null;\n        PreparedStatement preparedStatement = null;\n        ResultSet resultSet = null;\n        try {\n            String chkSql = \"select id from t_ip_doc where channel_path=?\";\n            dbo = createDBOperation();\n            connection = dbo.getConnection();\n            connection.setAutoCommit(false);\n            String[] selfDefinePath = getSelfDefinePath(site.getPath(), \"1\", connection, preparedStatement, resultSet);\n            selfDefineDelete(selfDefinePath, connection, preparedStatement);\n            preparedStatement = connection.prepareStatement(chkSql);\n            preparedStatement.setString(1, site.getPath());\n            resultSet = preparedStatement.executeQuery();\n            if (resultSet.next()) {\n                throw new Exception(\"\u027e\ufffd\ufffd\u02a7\ufffd\u0723\ufffd\" + site.getName() + \"\ufffd\ufffd\ufffd\u047e\ufffd\ufffd\ufffd\ufffd\u0135\ufffd\ufffd\ufffd\ufffd\u06a3\ufffd\");\n            } else {\n                String sqlStr = \"delete from t_ip_site where site_path=?\";\n                dbo = createDBOperation();\n                connection = dbo.getConnection();\n                preparedStatement = connection.prepareStatement(sqlStr);\n                preparedStatement.setString(1, site.getPath());\n                preparedStatement.executeUpdate();\n            }\n            connection.commit();\n        } catch (SQLException ex) {\n            connection.rollback();\n            throw ex;\n        } finally {\n            close(resultSet, null, preparedStatement, connection, dbo);\n        }\n    }\n", "code2": "    KeyStore getKeyStore() throws JarSignerException {\n        if (keyStore == null) {\n            KeyStore store = null;\n            if (providerName == null) {\n                try {\n                    store = KeyStore.getInstance(this.storeType);\n                } catch (KeyStoreException e) {\n                    e.printStackTrace();\n                }\n            } else {\n                try {\n                    store = KeyStore.getInstance(storeType, providerName);\n                } catch (KeyStoreException e) {\n                    e.printStackTrace();\n                } catch (NoSuchProviderException e) {\n                    e.printStackTrace();\n                }\n            }\n            if (storeURI == null) {\n                throw new JarSignerException(\"Cannot load the keystore \" + \" error con el keystore\");\n            }\n            try {\n                storeURI = storeURI.replace(File.separatorChar, '/');\n                URL url = null;\n                try {\n                    url = new URL(storeURI);\n                } catch (java.net.MalformedURLException e) {\n                    url = new File(storeURI).toURI().toURL();\n                }\n                InputStream is = null;\n                try {\n                    is = url.openStream();\n                    store.load(is, storePass);\n                } finally {\n                    if (is != null) {\n                        is.close();\n                    }\n                }\n            } catch (Exception e) {\n                throw new JarSignerException(\"Cannot load the keystore \" + storeURI, e);\n            }\n            keyStore = store;\n        }\n        return keyStore;\n    }\n", "label": 0, "substitutes": {"delete": ["clean", "update", "select", "disable", "write", "clear", "link", "dump", "insert", "set", "Delete", "lete", "get", "touch", "database", "create", "download", "load", "remove", "save", "drop", "add", "move", "execute", "destroy", "del", "de", "quit"], "site": ["settings", "course", "localhost", "item", "path", "scan", "sample", "at", "ste", "file", "store", "test", "remote", "e", "service", "sites", "rule", "network", "index", "node", "isite", "session", "theme", "link", "sit", "ze", "server", "config", "base", "set", "page", "station", "software", "environment", "ite", "name", "template", "http", "sys", "data", "source", "Site", "chain", "group", "pse", "info", "unit", "domain", "se"], "dbo": ["drabo", "dambo", "ddBo", "delbo", " dambo", "gbo", "Dpo", "pbo", "dbon", " dbon", "lambo", " dado", "sdBO", "ddBO", "DBo", "delbu", "DBO", "ddpo", "Dbon", "delpo", " dpo", "gbu", " dbu", "debugambo", "draBo", "odBo", "pbu", "dBO", "dBo", "odbu", "Dbu", "dmu", "Dmu", "lBo", "delmu", "drapo", "debugpo", "dado", "lpo", "dpo", "ddbo", "gBO", "Dado", "Dbo", "odbo", " dBo", "drabon", "pmu", "ppo", "sdbo", "debugBo", "ddbu", "debugbo", "ddado", "lbo", "odpo", "dbu", "sdbu", " dBO"], "connection": ["settings", "created", "system", "subject", "function", "operation", "communication", "collection", "resource", "handler", "binding", "cone", "po", "closure", "ion", "position", "context", "current", "open", "output", "manager", " Connection", "Connection", "network", "c", "bo", "intention", "library", "relation", "session", "condition", "office", "computer", "statement", "auto", "link", "location", "city", "console", "server", "config", "engine", "net", "connect", "table", "information", "container", "conn", "database", "db", "writer", "reference", "associated", "document", "client", "generation", "application", "socket", "pointer", "chain", "response", "connected", "directory", "character", "established", "controller", "pool", "government", "management", "usage", "con", "creator", "command"], "preparedStatement": ["prearedStatement", "preinitializedAdapter", "preppedCall", "preparedstatement", " preachedCall", "postparedstatement", "prearedCall", " preparedQuery", "premittedComment", "prepparedSQL", "preculatedStatement", "preparedAdapter", "prelatedDevice", "prearedstatement", "postppedCall", " preparedCall", "preachedstatement", "prearedStat", "prepferredSQL", "preachedAdapter", "preachedStatement", "prepparedCall", "prepletedDevice", "pretparableStatement", "preparedStatus", "preparedCopy", "prepletedComment", "preformedStatement", "prepparedQuery", "PreppedQuery", " preparedstatement", "prepparedStatement", "prefixedstatement", "postppedstatement", "premedStatus", "preferredSQL", "perachedStyle", "prefixedQuery", "premedListener", "preformedCall", "prejectedCopy", "perachedStatement", " preparedStat", "prefixedCopy", "preformedGrant", "preachedComment", "prepferredQuery", "pparedStat", "paredQuery", "prearedListener", "perparedAdapter", "Prearedstatement", "perparedStyle", "preachedCall", "PreparedQuery", "preparableStatus", "preferredstatement", "PreppedStatement", "prearedDevice", "preparedSQL", "PrearedComment", "pretparableListener", "preppedStatement", "premittedStyle", "preferredStatement", "preparedGrant", " preachedStatement", "preparedQuery", "preparedStat", "previsedQuery", "preferredCall", "preppedStatus", "prearedCopy", "preparedComment", "prejectedstatement", "Preparedstatement", "premittedStatement", "preferredQuery", "prepletedStat", "prearedSQL", "prepletedStatement", "perachedComment", " preparedCopy", "premedStatement", "preparedStyle", "prefixedCall", "preinitializedStyle", "prelatedstatement", "preachedStat", " preachedStat", " preachedGrant", "prepletedCall", "preparedListener", "preparableStatement", "pretparedStatus", "PrearedDevice", "prearedQuery", "premittedAdapter", "PreparedStatement", " prefixedstatement", "prearedComment", "preppedQuery", "perparedStatement", "PreparedComment", "prefixedStatement", "preachedStyle", "preparedDevice", "perparedComment", "prearedStatus", "preparableListener", "previsedStatus", "prejectedQuery", "preculatedstatement", "previsedStatement", "preformedStat", "postppedStatement", "preendedstatement", "preendedQuery", "previsedStat", "prepferredstatement", "preculatedQuery", "prelatedStatement", "prejectedStatement", "paredStat", "postparedCall", "pparedStatement", " prefixedCopy", "perachedAdapter", "PrearedStatement", "prepferredStatement", "preinitializedStatement", "paredStatus", "prepletedstatement", "pparedStatus", "postparedStatement", "preparedCall", "Preppedstatement", " preparedGrant", "PreparedDevice", "pretparableStatus", "preculatedSQL", "preppedStat", "prepparedstatement", "pretparedListener", "preendedStatement", "pparedQuery", "pretparedStatement", "preinitializedComment", "prelatedComment", "paredStatement", "preachedGrant", "preppedstatement", "prepletedGrant", " prefixedQuery", " prefixedStatement"], "resultSet": ["resultSession", "rowHandle", "ResultSum", "ResultSource", " resultSource", "resultUn", "resultSum", "responseSet", "dataSet", "resultSource", " resultHandle", "ResultStream", "ResultPath", " resultPath", "resultStream", "ResultUn", "characterSum", " resultTime", "responseUn", "resultsPath", " resultSum", " resultStream", "dataStream", "dataTime", "rowSet", "ResultHandle", "resultHandle", "characterStream", " resultList", " resultSession", "resultList", "characterSet", "ResultList", "resultPath", "rowSource", "ResultSet", "resultsStream", "resultsUn", "responseStream", "ResultTime", "resultsList", "resultTime", "ResultSession", "resultsSet", "rowSession"], "chkSql": ["chkDyl", "chKDk", "chkRSk", "chkSq", "chKSk", "chkStrQL", "chKSyl", "chkRSyl", "chKSq", "chkSQL", "chKInsq", "chkDql", "chkDk", "chkInsql", "chkRSQL", "chkSyl", "chkStrql", "chKSQL", "chkInsQL", "chkSk", "chkInsq", "chKInsQL", "chKInsql", "chkDq", "chKSql", "chkRSql", "chkDQL", "chKDyl", "chKDQL", "chKDql", "chkStrq"], "selfDefinePath": ["selfDefinesPath", "selfDefineSet", "selfDefiningPath", "selfDeliningKey", "selfDefiningKey", "selfDeliningpath", "selfDefiningDir", "selfDefiningSet", "selfdefinepath", "selfDefINEKey", "selfDefinesPattern", "selfDefineDir", "selfdefinePath", "selfDelineKey", "selfdefinesPattern", "selfdefinespath", "selfDefidepath", "selfDefideDir", "selfDefinedPath", "selfDefiningPattern", "selfdefinePattern", "selfDeliningPath", "selfDefiningpath", "selfDelinepath", "selfDefINEPath", "selfDefinedpath", "selfDefineKey", "selfDefinePattern", "selfDefINEpath", "selfDelinePath", "selfDefinesDir", "selfDefinespath", "selfDelineSet", "selfDefinedKey", "selfdefineDir", "selfDeliningSet", "selfDefidePattern", "selfDefINESet", "selfdefinesPath", "selfdefinesDir", "selfDefinedSet", "selfDefidePath", "selfDefinepath"], "sqlStr": [" sqlString", "SQLWr", " sqlName", "SQLStr", "sqlString", "SQLstr", "sqWr", " sqlstr", "qlName", "SQLSt", "sqStr", "sqlstr", "qlstr", "sqString", "sqstr", "qlStr", "sqlSt", "sqlName", "sqlWr", " sqlSt", " sqlWr", "sqName", "sqSt", "qlString"]}}
{"id1": "7087108", "id2": "10547671", "code1": "    @Override\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {\n        String path = request.getPathTranslated().substring(0, request.getPathTranslated().length() - request.getPathInfo().length()) + request.getServletPath() + request.getPathInfo();\n        File file = new File(path);\n        if (file.exists()) {\n            FileInputStream in = new FileInputStream(file);\n            IOUtils.copyLarge(in, response.getOutputStream());\n            in.close();\n        }\n    }\n", "code2": "    private String retrieveTemplate() throws Exception {\n        if (cachedTemplate == null) {\n            final URL url = new URL(blogEditor.getBlogInfo().getBlogUrl());\n            final BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n            final StringBuilder result = new StringBuilder();\n            String line;\n            while ((line = in.readLine()) != null) {\n                result.append(line);\n            }\n            in.close();\n            cachedTemplate = result.toString();\n        }\n        return cachedTemplate;\n    }\n", "label": 0, "substitutes": {"doGet": [" handleSet", " handleGet", " handleGET", "doGET", " doget", "invokeget", "doget", " doSet", " handleget", "invokeSet", " doGET", "doSet", "invokeGET", "invokeGet"], "request": ["local", "search", "address", "subject", "first", "post", "transform", "store", "construct", "the", "question", "position", "context", "select", "relative", "open", "attribute", "complete", "model", "begin", "call", "re", "index", "url", "query", "worker", "instance", "initial", "requ", "server", "message", "enter", "each", "get", "raw", "project", "req", "create", "core", "input", "setup", "reference", "frame", "Request", "document", " Request", "change", "http", "client", "application", "remove", "reset", "report", "QUEST", "hello", "quest", "version", "handle", "xml", "controller", "forward", "order", "info", "command"], "response": ["description", "respond", "ce", "print", "render", "onse", "success", "context", "output", "Response", "re", "view", "write", "connection", "res", "status", "server", "resp", "message", "result", "out", "page", "frame", "respons", "http", "application", "one", "report", "image", "default", "xml", "next", "reply", "body", "os"], "path": ["text", "where", "system", "dir", "string", "log", "p", "transform", "print", "test", "dest", "relative", "select", "prop", "route", "output", "filename", "url", "ath", "check", "query", "PATH", "pattern", "title", "location", "uri", "base", "config", "prefix", "th", "project", "name", "template", "patch", "hex", "Path", "value", "key", "chain", "mount", "pkg", "full", "temp"], "file": ["local", "lock", "binary", "bool", "bar", "resource", "channel", "FILE", "mail", "ile", "e", "be", "disk", "ca", "File", "run", "output", "rule", "filename", "model", "view", "real", "bo", "null", "to", "library", "fe", "relation", "check", "port", "console", "valid", "link", "f", "base", "job", "form", "table", "result", "page", "user", "db", "upload", "tree", "document", "name", "spec", "object", "load", "source", "le", "report", "image", "key", "chain", "handle", "full", "word"], "in": ["kin", "mc", "sample", "again", "ic", "en", "sin", "asin", "is", "up", "al", "cin", "copy", "reader", "ini", "IN", "inc", "i", "inner", "on", " din", "as", "s", "out", "din", "ck", "isin", "input", "ind", "mm", "read", "gin", "cm", "In", "source", "mn", "and", "or", "one", "pic", "ins", "l", "sum", "rin", "it", "bin", "thin", "con", "inn"]}}
{"id1": "6908537", "id2": "5436973", "code1": "    public String login() {\n        System.out.println(\"Logging in to LOLA\");\n        try {\n            String data = URLEncoder.encode(\"email\", \"UTF-8\") + \"=\" + URLEncoder.encode(get_email(), \"UTF-8\");\n            data += \"&\" + URLEncoder.encode(\"pw\", \"UTF-8\") + \"=\" + URLEncoder.encode(get_pw(), \"UTF-8\");\n            URL url = new URL(URL_LOLA + FILE_LOGIN);\n            URLConnection conn = url.openConnection();\n            conn.setDoOutput(true);\n            OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());\n            wr.write(data);\n            wr.flush();\n            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n            String line, sessid;\n            line = rd.readLine();\n            sessid = get_sessid(line);\n            this.set_session(sessid);\n            wr.close();\n            rd.close();\n            return sessid;\n        } catch (Exception e) {\n            System.out.println(\"Login Error\");\n            return \"\";\n        }\n    }\n", "code2": "    public String httpToStringStupid(String url) throws IllegalStateException, IOException, HttpException, InterruptedException, URISyntaxException {\n        String pageDump = null;\n        getParams().setParameter(ClientPNames.COOKIE_POLICY, org.apache.http.client.params.CookiePolicy.BROWSER_COMPATIBILITY);\n        getParams().setParameter(HttpConnectionParams.SO_TIMEOUT, getPreferenceService().getSearchSocketTimeout());\n        HttpGet httpget = new HttpGet(url);\n        httpget.getParams().setParameter(HttpConnectionParams.SO_TIMEOUT, getPreferenceService().getSearchSocketTimeout());\n        HttpResponse response = execute(httpget);\n        HttpEntity entity = response.getEntity();\n        pageDump = IOUtils.toString(entity.getContent(), \"UTF-8\");\n        return pageDump;\n    }\n", "label": 0, "substitutes": {"login": [" Login", "Login", "submit", "log", "update", "in", "auth", "open", "username", "session", "write", "connection", "console", "close", "config", "connect", "user", "setup", "download", "register", "save", "password", "hello", "request", "layout", "account", "dial"], "data": ["text", "d", "ata", "dat", "string", "p", "post", "str", "id", "debug", "part", "test", "join", "success", "no", "output", "content", "dl", "red", "connection", "session", "feed", "html", "rel", "reason", "def", " DATA", "api", "message", "result", "format", "out", "action", "db", "input", "name", "error", "reset", "value", "password", "done", "key", "response", "DATA", "window", "default", "json", "div", "info", "next", "this", "body", "ment", "command"], "url": ["build", "sl", "gl", "log", "ret", "Url", "ld", "abs", "str", "nl", "mail", "conv", "ls", "open", "re", "r", "call", "dl", "atl", "ll", "pl", "ssl", "link", "uri", "rel", "URL", "web", "net", "loc", "get", "ur", "cert", "hl", "bel", "http", "www", "el", "pkg", "l", "xml", "il", "gc", "lb", "ul"], "conn": ["win", "cur", "canon", "dat", "nl", "obj", "Conn", "nt", "conv", "ls", "ctrl", "open", "inv", "comm", "cp", "call", "c", "pas", "n", "act", "connection", "ll", "res", "fin", "close", "ns", "rel", "syn", "ct", "ann", "net", "connect", "loc", "cn", "ch", "nw", "cert", "yn", "nc", "cont", "socket", "addr", "exec", "cb", "enc", "pkg", "cmd", "nec", "resp", "jp", "co", "con"], "wr": ["tw", "ln", "dr", "lr", "spr", "fw", "wrote", "wn", "sw", "nl", "kl", "vr", "RW", "mr", "WR", "writ", "r", "rw", "wx", "write", "wm", "wer", "hr", "wy", "iw", "writer", "nw", "vet", "wt", "pr", "mn", "wo", "wk", "wid", "tn", "kr", "fr", "wb", "hw", "wa", "w", "rew"], "rd": ["sr", "dr", "lr", "rid", "ld", "rex", "rx", "rend", "rb", "erd", "ptr", "rob", "mr", "ri", "rod", "nd", "r", "rs", "rw", "rh", "red", "ro", "rar", "cr", "dd", "hr", "rt", "RD", "ry", "rr", "ris", "rad", "nder", "rand", "rl", "rer", "rog", "rc", "ra", "fr", "ird", "rn"], "line": ["text", "ln", "cell", "log", "ste", "file", "string", "str", "nl", "id", "inline", "part", "char", "lf", "e", "row", "no", "len", "word", "block", "code", "link", "ode", "stay", "iter", "buffer", "pe", "page", "lin", "out", "column", "ide", "lo", "frame", "liner", "comment", "ine", "le", "eline", "chain", "el", "header", "Line", "l", "LINE", "fr", "ne", "entry", "se"], "sessid": [" ssessionid", "descessid", "secessname", "sESSid", "Sessionkey", "Sessionname", "descessuid", " ssessionname", "scessuid", "Sessname", "scessid", " sesskey", "sessionuid", "scessoid", " ssessionkey", "desessid", "ssessionuid", "sessinfo", "descesskey", "scessinfo", "seessid", "desessuid", "Sessid", "seessinfo", "sESSoid", "sessionname", " ssessioninfo", "ssessioninfo", "sesskey", "ssessionname", "sessioninfo", "seessoid", "sessionoid", "Sesskey", "Sessionid", "sESSkey", "Sessionuid", "sESSuid", "sessionkey", " sessname", "desessoid", "secessid", "sessuid", "Sessuid", "seessname", "ssessionid", "descessoid", "secessoid", "sessionid", "secessinfo", "desesskey", " sessinfo", "sessoid", "ssessionkey", "ssessionoid", "scessname", "sessname", "scesskey", "sESSname"]}}
{"id1": "17193692", "id2": "10212189", "code1": "    public void execUpdate(String sqlStmts[]) throws SQLException {\n        if (conn == null || conn.isClosed()) throw new SQLException(\"The connection has not been established yet.\");\n        if (sqlStmts == null || sqlStmts.length == 0) throw new SQLException(\"SQL-statement is null.\");\n        conn.setAutoCommit(false);\n        try {\n            for (int i = 0; i < sqlStmts.length; i++) {\n                stmt = conn.createStatement();\n                stmt.executeUpdate(sqlStmts[i]);\n                logger.debug(sqlStmts[i]);\n                stmt.close();\n            }\n            conn.commit();\n        } catch (SQLException ex) {\n            conn.rollback();\n            throw ex;\n        }\n    }\n", "code2": "    public String getXML(String servletURL, String request) {\n        StringBuffer stringBuffer = new StringBuffer();\n        try {\n            String encodedRequest = URLEncoder.encode(request, \"UTF-8\");\n            URL url = new URL(servletURL + request);\n            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n            String inputLine;\n            while ((inputLine = in.readLine()) != null) {\n                stringBuffer.append(inputLine);\n            }\n            in.close();\n        } catch (MalformedURLException ex) {\n            return null;\n        } catch (UnsupportedEncodingException ex) {\n            return null;\n        } catch (IOException ex) {\n            return null;\n        }\n        return stringBuffer.toString();\n    }\n", "label": 0, "substitutes": {"execUpdate": [" ExecUpdate", " ExecSet", " ExecSelect", " executeSelect", "ExecAction", "ExecUpdate", " executeSet", "executeUpdate", "executeSelect", "ExecSet", " executeUpdate", " executeAction", " ExecAction", "executeSet", "ExecSelect", "executeAction"], "sqlStmts": ["sqlStrrts", "sqlStmtns", "sqlStrrmps", "sqlStmls", "sqlStrrmters", "sqlStamuts", "sqlStrmths", "sqlStrls", "sqlSylms", "sqlStrrmts", "sqlStrms", "sqlSttmters", "sqlSylsts", "sqlStmtsts", "sqlStmuts", "sqlStrks", "sqlStrters", "sqlStrrms", "sqlStamths", "sqlStrrmnt", "sqlStmrts", "sqlStmrters", "sqlStamts", "sqlStruts", "sqlStrrns", "sqlSylps", "sqlStmtks", "sqlSymsts", "sqlStsts", "sqlStrrks", "sqlSttmps", "sqlStlters", "sqlStarmms", "sqlStrrters", "sqlSymps", "sqlStmnt", "sqlStarmments", "sqlStmtters", "sqlStrmls", "sqlStrments", "sqlStmns", "sqlStrmments", "sqlStrts", "sqlStrmsts", "sqlStmtts", "sqlStlts", "sqlStmks", "sqlStrps", "sqlStrrths", "sqlSymts", "sqlStamters", "sqlStrrnt", "sqlStlsts", "sqlStrmuts", "sqlStmths", "sqlStlms", "sqlStmtms", "sqlStrmps", "sqlStrruts", "sqlSylts", "sqlStrmnt", "sqlStrmts", "sqlStmrns", "sqlStsls", "sqlStmrks", "sqlStlps", "sqlStmments", "sqlSttmts", "sqlStmsts", "sqlStrns", "sqlStrrls", "sqlStrrments", "sqlStsnt", "sqlStrths", "sqlStrnt", "sqlStrmters", "sqlStmters", "sqlSymms", "sqlStmms", "sqlSttmls", "sqlStrmns", "sqlStsps", "sqlStmps", "sqlSttmnt", "sqlStrrps", "sqlStmtps", "sqlStrmks", "sqlStrmms", "sqlStarmts", "sqlStlments", "sqlStarmters"], "i": ["ti", "v", "ji", "I", "ic", "zi", "li", "id", "gi", "my", "point", "is", "di", "ii", "z", "in", "\u0438", "j", "phi", "ri", "mi", "si", "index", "c", "ini", "n", "iu", "a", "pi", "ci", "m", "ims", "cli", "yi", "uri", "o", "ma", "slice", "multi", "xi", "ie", "ind", "ei", "u", "ij", "x", "qi", "im", "me", "key", "ai", "ix", "sim", "ip", "asi", "bi", "us", "ui", "it", "g", "hi", "info", "ori", "y"], "stmt": ["Stmp", "smp", "Stt", "stmp", "stmsg", "StMT", " stt", "sm", "st", "stg", " stm", " stg", "stym", "stMT", "stymsg", "stymt", "smt", "Stg", "ostm", " stmsg", "stt", "ostmt", "Stmsg", "styMT", "ostg", "ostMT", "Stmt", "Stm", " stmp", "stm", " stMT"]}}
{"id1": "947406", "id2": "841724", "code1": "    static void copy(String src, String dest) throws IOException {\n        InputStream in = null;\n        OutputStream out = null;\n        try {\n            in = new FileInputStream(src);\n            out = new FileOutputStream(dest);\n            byte[] buf = new byte[1024];\n            int n;\n            while ((n = in.read(buf)) > 0) out.write(buf, 0, n);\n        } finally {\n            if (in != null) in.close();\n            if (out != null) out.close();\n        }\n    }\n", "code2": "    private static void readAndRewrite(File inFile, File outFile) throws IOException {\n        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n        Dataset ds = DcmObjectFactory.getInstance().newDataset();\n        dcmParser.setDcmHandler(ds.getDcmHandler());\n        dcmParser.parseDcmFile(null, Tags.PixelData);\n        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        System.out.println(\"reading \" + inFile + \"...\");\n        pdReader.readPixelData(false);\n        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n        ds.writeDataset(out, dcmEncParam);\n        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n        System.out.println(\"writing \" + outFile + \"...\");\n        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        pdWriter.writePixelData();\n        out.flush();\n        out.close();\n        System.out.println(\"done!\");\n    }\n", "label": 1, "substitutes": {"copy": ["clone", "delete", "Cop", "cat", " cp", " cop", "map", "printf", "ls", "cp", "gc", "link", "csv", "slice", "paste", "init", "create", "Copy", "download", "transfer", "println", "upload", "load", " Copy", "save", " replicate", "move", "sync"], "src": ["sec", "sr", "sq", "cur", "subject", "ctr", "orig", "rx", "st", "start", "fx", "ls", "from", "url", "rs", "img", "obs", "sit", "sf", "rel", "config", "sc", "Source", "sb", "bs", "tmp", "init", "usr", "req", "input", "sys", "dist", "source", "rl", "rc", "ser", "pkg", "ins", "inst", "iv"], "dest": ["master", "d", "trans", "decl", "dir", "des", "id", "orig", "mod", "test", "st", "Dest", "temp", "target", "deg", "pas", "nom", "good", "https", "desc", "loc", "end", "est", "tmp", "usr", "req", "nw", "mm", "dist", "source", "rest", "cont", "home", "pub", "del", "origin"], "in": ["local", "win", "mc", "ln", "pin", "file", "en", "sin", "is", "inf", "st", "up", "al", "cin", "from", "mi", "r", "act", "ini", "IN", "inc", "i", "inner", "inside", "m", "ar", "on", "o", "iter", "ma", "net", "din", "ck", "init", "conn", "doc", "user", "oin", "raw", "input", "isin", "ind", "min", "mm", "read", "gin", "ie", "all", "In", "or", "ai", "ac", "ins", "rin", "l", "it", "info", "bin", "ain", "co", "con", "inn"], "out": ["cos", "at", "outs", "file", "en", "not", "io", "oe", "t", "obj", "conv", "ot", "nt", "up", "aos", "no", "output", "flush", "rem", "ex", "to", "null", "write", "inner", "res", "gt", "on", "outer", "o", "note", "ns", "net", "oss", "conn", "cn", "user", "writer", "mit", "client", "sys", "con", "OUT", "one", "Out", "list", "sum", "it", "nin", "cmd", "bin", "ou", "ne", "can", "co", "os"], "buf": ["aka", "cv", "cur", "bytes", "batch", "log", "bag", "bar", "cat", "queue", "b", "conv", "rb", "font", "msg", "len", "gen", "bl", "good", "mu", "block", "box", "mem", "vec", "img", "bh", "bus", "col", "cf", "fb", "br", "seq", "buffer", "buff", "bs", "cap", "db", "tab", "Buff", "cam", "pad", "cb", "pkg", "uf", "mb", "cmd", "ref", "Buffer", "prop", "bc"], "n": ["ln", "d", "v", "number", "en", "nl", "nb", "b", "k", "t", "nn", "nt", "num", "z", "no", "an", "j", "N", "nm", "span", "ren", "max", "len", "names", "ni", "i", "ll", "m", "on", "ns", "syn", "nor", "cn", "acc", "un", "yn", "nan", "nc", " l", "mn", "nos", "gn", "l", "na", "ne", "nu", "y", "sn"]}}
{"id1": "838844", "id2": "8182932", "code1": "    public void convert(File src, File dest) throws IOException {\n        InputStream in = new BufferedInputStream(new FileInputStream(src));\n        DcmParser p = pfact.newDcmParser(in);\n        Dataset ds = fact.newDataset();\n        p.setDcmHandler(ds.getDcmHandler());\n        try {\n            FileFormat format = p.detectFileFormat();\n            if (format != FileFormat.ACRNEMA_STREAM) {\n                System.out.println(\"\\n\" + src + \": not an ACRNEMA stream!\");\n                return;\n            }\n            p.parseDcmFile(format, Tags.PixelData);\n            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n                System.out.println(\"\\n\" + src + \": contains UIDs!\" + \" => probable already DICOM - do not convert\");\n                return;\n            }\n            boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n            int pxlen = p.getReadLength();\n            if (hasPixelData) {\n                if (inflate) {\n                    ds.putUS(Tags.BitsAllocated, 16);\n                    pxlen = pxlen * 4 / 3;\n                }\n                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n                    System.out.println(\"\\n\" + src + \": mismatch pixel data length!\" + \" => do not convert\");\n                    return;\n                }\n            }\n            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n            ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n            ds.putUI(Tags.SOPClassUID, classUID);\n            if (!ds.contains(Tags.NumberOfSamples)) {\n                ds.putUS(Tags.NumberOfSamples, 1);\n            }\n            if (!ds.contains(Tags.PhotometricInterpretation)) {\n                ds.putCS(Tags.PhotometricInterpretation, \"MONOCHROME2\");\n            }\n            if (fmi) {\n                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n            }\n            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n            try {\n            } finally {\n                ds.writeFile(out, encodeParam());\n                if (hasPixelData) {\n                    if (!skipGroupLen) {\n                        out.write(PXDATA_GROUPLEN);\n                        int grlen = pxlen + 8;\n                        out.write((byte) grlen);\n                        out.write((byte) (grlen >> 8));\n                        out.write((byte) (grlen >> 16));\n                        out.write((byte) (grlen >> 24));\n                    }\n                    out.write(PXDATA_TAG);\n                    out.write((byte) pxlen);\n                    out.write((byte) (pxlen >> 8));\n                    out.write((byte) (pxlen >> 16));\n                    out.write((byte) (pxlen >> 24));\n                }\n                if (inflate) {\n                    int b2, b3;\n                    for (; pxlen > 0; pxlen -= 3) {\n                        out.write(in.read());\n                        b2 = in.read();\n                        b3 = in.read();\n                        out.write(b2 & 0x0f);\n                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n                        out.write(b3 >> 4);\n                    }\n                } else {\n                    for (; pxlen > 0; --pxlen) {\n                        out.write(in.read());\n                    }\n                }\n                out.close();\n            }\n            System.out.print('.');\n        } finally {\n            in.close();\n        }\n    }\n", "code2": "    public static void unzip(File file, ZipFile zipFile, File targetDirectory) throws BusinessException {\n        LOG.info(\"Unzipping zip file '\" + file.getAbsolutePath() + \"' to directory '\" + targetDirectory.getAbsolutePath() + \"'.\");\n        assert (file.exists() && file.isFile());\n        if (targetDirectory.exists() == false) {\n            LOG.debug(\"Creating target directory.\");\n            if (targetDirectory.mkdirs() == false) {\n                throw new BusinessException(\"Could not create target directory at '\" + targetDirectory.getAbsolutePath() + \"'!\");\n            }\n        }\n        ZipInputStream zipin = null;\n        try {\n            zipin = new ZipInputStream(new FileInputStream(file));\n            ZipEntry entry = null;\n            while ((entry = zipin.getNextEntry()) != null) {\n                LOG.debug(\"Unzipping entry '\" + entry.getName() + \"'.\");\n                if (entry.isDirectory()) {\n                    LOG.debug(\"Skipping directory.\");\n                    continue;\n                }\n                final File targetFile = new File(targetDirectory, entry.getName());\n                final File parentTargetFile = targetFile.getParentFile();\n                if (parentTargetFile.exists() == false) {\n                    LOG.debug(\"Creating directory '\" + parentTargetFile.getAbsolutePath() + \"'.\");\n                    if (parentTargetFile.mkdirs() == false) {\n                        throw new BusinessException(\"Could not create target directory at '\" + parentTargetFile.getAbsolutePath() + \"'!\");\n                    }\n                }\n                InputStream input = null;\n                FileOutputStream output = null;\n                try {\n                    input = zipFile.getInputStream(entry);\n                    if (targetFile.createNewFile() == false) {\n                        throw new BusinessException(\"Could not create target file '\" + targetFile.getAbsolutePath() + \"'!\");\n                    }\n                    output = new FileOutputStream(targetFile);\n                    int readBytes = 0;\n                    byte[] buffer = new byte[BUFFER_SIZE];\n                    while ((readBytes = input.read(buffer, 0, buffer.length)) > 0) {\n                        output.write(buffer, 0, readBytes);\n                    }\n                } finally {\n                    FileUtil.closeCloseable(input);\n                    FileUtil.closeCloseable(output);\n                }\n            }\n        } catch (IOException e) {\n            throw new BusinessException(\"Could not unzip file '\" + file.getAbsolutePath() + \"'!\", e);\n        } finally {\n            FileUtil.closeCloseable(zipin);\n        }\n    }\n", "label": 1, "substitutes": {"convert": ["CONversion", "compvert", "CONverting", "consverting", "Converted", "Converts", "consversion", "confer", "unprocess", "conversion", "unvert", "consvert", "unverted", "compverts", "CONVERT", "unfer", "Conversion", "Convert", "unversion", "CONverted", "unverts", "Converting", "CONfer", "ConVERT", "conprocess", "converting", "converts", "CONvert", "Conprocess", "conVERT", "consVERT", "Confer", "compprocess", "compversion", "converted"], "src": ["sr", "path", "sq", "cur", "scan", "file", "txt", "str", "sin", "orig", "rx", "st", "start", "SOURCE", "from", "filename", "url", "rs", "href", "RC", "ource", "img", "host", "cc", "buster", "sit", "uri", "rel", "config", "sc", "Source", "s", "loc", "ipl", "attr", "ur", "its", "req", "usr", "input", "upload", "scene", "hl", "http", "sys", "dist", "source", "SourceFile", "cont", "addr", "rest", "func", "rc", "ser", "ins", "pkg", "inst", "ebin", "stream", "iv"], "dest": ["foreign", "dir", "dat", " Destination", "txt", " orig", "orig", "disk", "test", "Dest", "target", "tif", "write", " destinations", "port", "img", "table", "result", "est", " Dest", " dst", " destination", "gin", "dist", "rest", "source", "temp", "mat"], "in": ["d", "serv", "file", "en", "io", "b", "is", "inf", "st", "up", "cin", "from", "reader", "r", "IN", "i", "inner", "ad", "res", "m", "ar", "as", "din", "isin", "input", "ind", "source", "In", "el", "ins", "rin", "l", "bin", "sql", "stream", "inn"], "p": ["d", "ping", "op", "pb", "P", "pt", "tp", "lp", "pd", "py", "pro", "h", "post", "vp", "part", "b", "prot", "per", "t", "dp", "j", "pg", "at", "cp", "r", "c", "i", "pl", "pi", "wp", "ph", "m", "pre", "f", "ps", "pm", "pers", "pe", "sp", "er", "parse", "fp", "parser", "ap", "pa", "pp", "rep", "pkg", "l", "it", "g", "php", "pc", "jp"], "ds": ["tp", "des", "lists", "gs", "rs", "dates", "ns", "nas", "ps", "ports", "dd", "db", "yes", "amps", "sets", "ks", "mys", "vs", "ats", "obs", "ils", "s", "bs", "hd", " des", " DS", "Ds", "drivers", "iffs", "dos", "outs", "qs", "tests", "d", "js", "aws", "eds", "pd", "points", "dds", "terms", "eps", "ws", "xs", "tes", "dl", "workers", "sd", "dt", " d", "edes", "posts", "loads", "scripts", "ras", "df", "els", "ss", "gd", "di", "dp", "ls", "hs", "cks", "ts", "uds", "DS", "cs", " dd", "ads", "its", " ads", "tags", "ands", "ags", "sts", "dh", " os", "ods", "docs", "os", "ys"], "format": ["settings", "path", "module", "filter", "fc", "at", "file", "mt", "ats", "tag", "id", "lat", "mode", "t", "sche", "feat", "style", "output", "act", "pattern", "pi", " Format", "status", "title", "f", "cf", "Format", "form", "ct", "feature", "table", "set", "parse", "name", "template", "pretty", "spec", "MAT", "source", "top", "fm", "shape", "version", "l", "it", "layout", "unit", "type", "policy", "mat", "size"], "hasPixelData": ["haspixelDATA", " hasPixeldata", "haspixeldata", "haspixelData", "Haspixeldata", "hasFramedata", "hasFrameDATA", "hasixeldata", "HaspixelData", "hasPixeldata", "hasixelData", "HasPixelDATA", "hasixelDATA", " hasPixelDATA", "hasFrameData", "HasPixelData", "HaspixelDATA", "hasPixelDATA", "HasPixeldata"], "inflate": ["inflATE", " invalidATE", "inFLate", "infolat", "incelATE", "informate", "inflicate", "Informate", "inFlicate", " inflATE", "inFlATE", "inFLocate", "inFlocate", "Informated", "informocate", "incelicate", "invalidocate", "infolate", "inflat", "Inflate", "inFlate", "invalidate", " invalidicate", "Inflat", " invalidate", " inflocate", "incelate", "incelocate", " invalidocate", " inflicate", "infolocate", "inFLat", "Informat", "informated", "Inflated", "informat", "inFLated", "invalidicate", "infolated", "inflated", "invalidATE", "Inflocate", "Informocate", "inflocate"], "pxlen": ["xylin", "mmlength", "pxlength", "cpden", "xplength", "pixellen", "cplen", "pexls", "pexden", "tmplength", "packlength", "mmlen", "mxlen", "cplength", "mmln", "pixelfun", "tmplin", "pexlen", "phpdec", "tmplen", "pixellength", "tmpln", "mxdec", "mmlin", "cpln", "pxls", "xyln", "mxlength", "packlen", "xpln", "pxden", "pxdec", "phpln", "mxln", "pexlength", "pxlin", "xpden", "packls", "xplen", "xylen", "packln", "pixells", "pexfun", "pxln", "packdec", "phplen", "packfun", "xylength", "phplength", "pexln", "pxfun"], "out": ["ln", "err", "log", "dir", "io", "crit", "store", "print", "obj", "up", "aos", "msg", "output", "inv", "ex", "res", "inter", "outer", "prefix", "net", "screen", "conn", "init", "user", "cfg", "writer", "gr", "client", "pretty", "name", "sys", "OUT", "group", "list", "Out", "sum", "gov", "cmd", "ou", "outs", "temp"]}}
{"id1": "14047629", "id2": "19109981", "code1": "    protected ExternalDecoder(InputStream source, Process process) {\n        super(source);\n        this.process = process;\n        this.processStdOut = process.getInputStream();\n        this.processStdIn = process.getOutputStream();\n        new Thread() {\n\n            @Override\n            public void run() {\n                try {\n                    IOUtils.copy(getSource(), processStdIn);\n                    System.err.println(\"Copy done.\");\n                    close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                    IOUtils.closeQuietly(ExternalDecoder.this);\n                }\n            }\n        }.start();\n    }\n", "code2": "    private void startScript(wabclient.Attributes prop) throws SAXException {\n        dialog.beginScript();\n        String url = prop.getValue(\"src\");\n        if (url.length() > 0) {\n            try {\n                BufferedReader r = new BufferedReader(new InputStreamReader(new URL(url).openStream()));\n                String buffer;\n                while (true) {\n                    buffer = r.readLine();\n                    if (buffer == null) break;\n                    dialog.script += buffer + \"\\n\";\n                }\n                r.close();\n                dialog.endScript();\n            } catch (IOException ioe) {\n                System.err.println(\"[IOError] \" + ioe.getMessage());\n                System.exit(0);\n            }\n        }\n    }\n", "label": 0, "substitutes": {"source": ["system", "seed", "sample", "address", "file", "sequence", "src", "resource", "channel", "event", "position", "in", "service", "SOURCE", "from", "output", "copy", "reader", "shell", "content", "query", "ource", "console", "iterator", "expression", "buffer", "Source", "format", "message", "result", "q", "input", "data", "image", "request", "proc", "sql", "stream", "se"], "process": ["build", "function", "place", "file", "p", "post", "term", "make", "store", "component", "program", "processor", "complex", "method", "context", "class", "service", "run", "se", "work", "pipe", "network", "call", "cp", "thread", "check", "node", "condition", "session", "mem", "code", "status", "console", "link", "job", "pm", "connect", "project", "init", "pid", "flow", "Process", "parse", "create", "frame", "object", "processing", "sys", "memory", "and", "exec", "pp", "chain", "execute", "use", "handle", "task", "script", "cmd", "state", "proc", "command"], "processStdOut": ["processStrEr", "processStrdIn", "processStstdEx", "processStdEx", "processStstEr", "processStstdEr", "processStrrEx", "processStrIn", "processStrrIn", "processStrdEr", "processStrdEx", "processStstdOut", "processStstOut", "processStstIn", "processStrEx", "processStrrEr", "processStstEx", "processStdEr", "processStstdIn", "processStrdOut", "processStrrOut", "processStrOut"], "processStdIn": ["processStdsOut", "processSTtOut", "processStdsIN", "processSttIn", "processSTdIns", "processStdin", "processStackdOut", "processStackdIN", "processSttIN", "processStdsin", "processStdIN", "processStrIn", "processSTtIns", "processSTtIN", "processSttOut", "processStrIns", "processStdsIns", "processStdIns", "processStrin", "processStackdsIn", "processStackdsIN", "processStrIN", "processSTtIn", "processStackdIn", "processStsIn", "processSTdIN", "processStackdsin", "processStrOut", "processStdsIn", "processSTdOut", "processSttIns", "processStackdsOut", "processStsOut", "processStsin", "processStackdin", "processStsIN", "processSTdIn"]}}
{"id1": "6963063", "id2": "18782385", "code1": "    public static void main(String args[]) {\n        int[] mas = { 3, 5, 6, 9, 1, -3, -4, -88 };\n        int sort = 0;\n        for (int j = 0; j < (mas.length); j++) {\n            for (int i = 0; i < mas.length - 1; i++) {\n                if (mas[i] > mas[i + 1]) {\n                    sort = mas[i];\n                    mas[i] = mas[i + 1];\n                    mas[i + 1] = sort;\n                }\n            }\n        }\n        for (int i = 0; i < mas.length; i++) {\n            System.out.print(\" \" + mas[i]);\n        }\n    }\n", "code2": "    public void saveFile(MainWindow window) {\n        FileOutputStream stream = null;\n        try {\n            Document outputDoc = new Document();\n            DocType dtd = new DocType(UI, DIRECTORY + File.separator + FILE_NAME_DTD);\n            Element uiElement = new Element(UI);\n            outputDoc.setDocType(dtd);\n            outputDoc.addContent(uiElement);\n            outputDoc.setRootElement(uiElement);\n            uiElement.setAttribute(USE_DEFAULT, \"false\");\n            uiElement.setAttribute(SHOW_TOOL_BAR, Boolean.toString(window.getToolToolBar().isVisible()));\n            uiElement.setAttribute(SHOW_UNIT_BAR, Boolean.toString(window.getUnitToolBar().isVisible()));\n            String currentLFClassName = UIManager.getLookAndFeel().getClass().getName();\n            String systemLFClassName = UIManager.getSystemLookAndFeelClassName();\n            if (currentLFClassName.equals(systemLFClassName)) uiElement.setAttribute(LOOK_AND_FEEL, \"native\"); else uiElement.setAttribute(LOOK_AND_FEEL, \"default\");\n            Element mainWindowElement = new Element(MAIN_WINDOW);\n            uiElement.addContent(mainWindowElement);\n            mainWindowElement.setAttribute(LOCATION_X, Integer.toString(window.getFrame().getX()));\n            mainWindowElement.setAttribute(LOCATION_Y, Integer.toString(window.getFrame().getY()));\n            mainWindowElement.setAttribute(WIDTH, Integer.toString(window.getFrame().getWidth()));\n            mainWindowElement.setAttribute(HEIGHT, Integer.toString(window.getFrame().getHeight()));\n            Element volumeElement = new Element(VOLUME);\n            uiElement.addContent(volumeElement);\n            AudioPlayer player = window.getDesktop().getSoundPlayer();\n            volumeElement.setAttribute(SOUND, Float.toString(player.getVolume()));\n            volumeElement.setAttribute(MUTE, Boolean.toString(player.isMute()));\n            Element internalWindowsElement = new Element(INTERNAL_WINDOWS);\n            uiElement.addContent(internalWindowsElement);\n            MainDesktopPane desktop = window.getDesktop();\n            JInternalFrame[] windows = desktop.getAllFrames();\n            for (JInternalFrame window1 : windows) {\n                Element windowElement = new Element(WINDOW);\n                internalWindowsElement.addContent(windowElement);\n                windowElement.setAttribute(Z_ORDER, Integer.toString(desktop.getComponentZOrder(window1)));\n                windowElement.setAttribute(LOCATION_X, Integer.toString(window1.getX()));\n                windowElement.setAttribute(LOCATION_Y, Integer.toString(window1.getY()));\n                windowElement.setAttribute(WIDTH, Integer.toString(window1.getWidth()));\n                windowElement.setAttribute(HEIGHT, Integer.toString(window1.getHeight()));\n                windowElement.setAttribute(DISPLAY, Boolean.toString(!window1.isClosed()));\n                if (window1 instanceof ToolWindow) {\n                    windowElement.setAttribute(TYPE, TOOL);\n                    windowElement.setAttribute(NAME, ((ToolWindow) window1).getToolName());\n                } else if (window1 instanceof UnitWindow) {\n                    windowElement.setAttribute(TYPE, UNIT);\n                    windowElement.setAttribute(NAME, ((UnitWindow) window1).getUnit().getName());\n                } else {\n                    windowElement.setAttribute(TYPE, \"other\");\n                    windowElement.setAttribute(NAME, \"other\");\n                }\n            }\n            Unit[] toolBarUnits = window.getUnitToolBar().getUnitsInToolBar();\n            for (Unit toolBarUnit : toolBarUnits) {\n                UnitWindow unitWindow = desktop.findUnitWindow(toolBarUnit);\n                if ((unitWindow == null) || unitWindow.isIcon()) {\n                    Element windowElement = new Element(WINDOW);\n                    internalWindowsElement.addContent(windowElement);\n                    windowElement.setAttribute(TYPE, UNIT);\n                    windowElement.setAttribute(NAME, toolBarUnit.getName());\n                    windowElement.setAttribute(DISPLAY, \"false\");\n                }\n            }\n            File configFile = new File(DIRECTORY, FILE_NAME);\n            if (!configFile.getParentFile().exists()) {\n                configFile.getParentFile().mkdirs();\n            }\n            InputStream in = getClass().getResourceAsStream(\"/dtd/ui_settings.dtd\");\n            IOUtils.copy(in, new FileOutputStream(new File(DIRECTORY, \"ui_settings.dtd\")));\n            XMLOutputter fmt = new XMLOutputter();\n            fmt.setFormat(Format.getPrettyFormat());\n            stream = new FileOutputStream(configFile);\n            OutputStreamWriter writer = new OutputStreamWriter(stream, \"UTF-8\");\n            fmt.output(outputDoc, writer);\n        } catch (Exception e) {\n            logger.log(Level.SEVERE, e.getMessage());\n        } finally {\n            IOUtils.closeQuietly(stream);\n        }\n    }\n", "label": 0, "substitutes": {"mas": ["oos", "alis", "vs", "lists", "ales", "eas", "stro", "phas", "ists", "boxes", "aos", "mon", "mis", "pres", "finals", "mont", "pas", "mos", "nets", "men", "mares", "rums", "Mas", "mons", "jas", "sa", "makes", "ims", "als", "vers", "stal", "as", "asks", "ias", "ames", "ms", "ma", "dal", "bs", "rices", "mad", "lands", "aus", "ares", "mus", "wal", "amas", "asis", "ris", "mes", "ums", "mers", "sts", "phis", "MAS", "tis", "ints", "ras", "marks", "las", "sels", "mast", "ams", "pse", "mails", "bas", "masters", "cas"], "sort": ["late", "search", "val", "orter", "cmp", "send", "trans", "weight", "lock", "lib", "dir", "first", "store", "test", "alpha", "start", "ist", "ORT", "ort", "scale", "index", "sup", "orting", "label", "rank", "port", "status", "ord", "Sort", "desc", "su", "s", "lower", "rm", "tmp", "rol", "min", "ind", "score", "orts", "orted", "alt", "save", "use", "tr", "l", "default", "pos", "it", "sum", "order", "share"], "j": ["js", "ji", "v", "ia", "lock", "at", "dj", "jj", "aj", "is", "J", "k", "obj", "nr", "z", "ja", "adj", "other", "n", "kj", "jo", "m", "jas", "ge", "oj", "job", "br", "jump", "q", "jit", "ind", "ie", "jc", "ij", "x", "pr", "im", "uj", "jl", "json", "fr", "g", "bj", "it", "jp"], "i": ["I", "iq", "fire", "ini", "iy", "ci", "m", "gu", "iri", "qi", "ix", "fi", "ir", "ui", "php", "iii", "ia", "zi", "ic", "ret", "gi", "io", "in", "\u0438", "phi", "oi", "ri", "mi", "iu", "status", "cli", "iter", "me", "chain", "ip", "ori", "ti", "li", "id", "is", "si", "ni", "port", "pi", "yi", "multi", "init", "ind", "ei", "ij", "im", "ai", "sim", "it", "bi", "hi", "asi", "origin", "ami", "iso", "ji", "di", "ki", "ii", "iti", "wi", "uri", "xi", "ie", "ish", "g", "info"]}}
{"id1": "6421904", "id2": "530882", "code1": "    public DataRecord addRecord(InputStream input) throws DataStoreException {\n        File temporary = null;\n        try {\n            temporary = newTemporaryFile();\n            DataIdentifier tempId = new DataIdentifier(temporary.getName());\n            usesIdentifier(tempId);\n            long length = 0;\n            MessageDigest digest = MessageDigest.getInstance(DIGEST);\n            OutputStream output = new DigestOutputStream(new FileOutputStream(temporary), digest);\n            try {\n                length = IOUtils.copyLarge(input, output);\n            } finally {\n                output.close();\n            }\n            DataIdentifier identifier = new DataIdentifier(digest.digest());\n            File file;\n            synchronized (this) {\n                usesIdentifier(identifier);\n                file = getFile(identifier);\n                if (!file.exists()) {\n                    File parent = file.getParentFile();\n                    parent.mkdirs();\n                    if (temporary.renameTo(file)) {\n                        temporary = null;\n                    } else {\n                        throw new IOException(\"Can not rename \" + temporary.getAbsolutePath() + \" to \" + file.getAbsolutePath() + \" (media read only?)\");\n                    }\n                } else {\n                    long now = System.currentTimeMillis();\n                    if (getLastModified(file) < now + ACCESS_TIME_RESOLUTION) {\n                        setLastModified(file, now + ACCESS_TIME_RESOLUTION);\n                    }\n                }\n                if (file.length() != length) {\n                    if (!file.isFile()) {\n                        throw new IOException(\"Not a file: \" + file);\n                    }\n                    throw new IOException(DIGEST + \" collision: \" + file);\n                }\n            }\n            inUse.remove(tempId);\n            return new FileDataRecord(identifier, file);\n        } catch (NoSuchAlgorithmException e) {\n            throw new DataStoreException(DIGEST + \" not available\", e);\n        } catch (IOException e) {\n            throw new DataStoreException(\"Could not add record\", e);\n        } finally {\n            if (temporary != null) {\n                temporary.delete();\n            }\n        }\n    }\n", "code2": "    private static void readAndRewrite(File inFile, File outFile) throws IOException {\n        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n        Dataset ds = DcmObjectFactory.getInstance().newDataset();\n        dcmParser.setDcmHandler(ds.getDcmHandler());\n        dcmParser.parseDcmFile(null, Tags.PixelData);\n        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        System.out.println(\"reading \" + inFile + \"...\");\n        pdReader.readPixelData(false);\n        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n        ds.writeDataset(out, dcmEncParam);\n        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n        System.out.println(\"writing \" + outFile + \"...\");\n        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        pdWriter.writePixelData();\n        out.flush();\n        out.close();\n        System.out.println(\"done!\");\n    }\n", "label": 1, "substitutes": {"addRecord": ["AddDocument", "AddFile", "addrecord", "Addrecord", "newFile", "AddRecord", "writeRecord", "addFile", "writeDocument", "writerecord", "newDocument", "newrecord", "writeFile", "newRecord", "addDocument"], "input": ["address", "p", "io", "is", "start", "Input", "in", "up", "context", "current", "from", "open", "reader", "content", "m", "initial", "base", "config", "table", "format", "out", "get", "q", "upload", "media", "error", "data", "source", "add", "image", "request", "it", "this", "stream", "w"], "temporary": ["comarily", "semperature", "remcreated", "temient", "typorary", "comporary", "themediate", "temputable", "stporal", "Temperature", "tempperature", "tmperature", "temptemp", "tyutable", "sememp", "temporal", "timarily", "stperature", "semporary", "remporary", "tmutable", "timmanent", " tempty", "transperature", "temcreated", "comporal", " temporal", "tmient", "stemmanent", "transporal", "timutable", "transporary", "timperature", "memutable", "Temporal", "temarily", "tmporal", "timporary", "tmpor", "tememp", "temperature", "stporary", "tmporary", "rempty", "temmanent", "stemperature", "transmanent", "theperature", "tempient", "stemporary", "temutable", "tempor", "tempporal", "tempporary", "theporary", "Temutable", "typoral", "temmediate", "memporary", " temcreated", "typerature", "temtemp", "tenporary", "remporal", "memperature", "temppty", "timtemp", "Temporary", "tenperature", "tmemp", "tenporal", "theporal", "tytemp", "tenarily", "tyient", "memporal", "timporal", "tymediate", "stemp", "tempcreated", "semporal", "temppor", "timmediate", "typor", "stemporal", "comperature", "tempty"], "tempId": ["uniqueIs", "fakeID", "uniqueK", "TempID", "poraryID", "fakeId", "currentId", "templateK", "templatePart", "templateIs", "tempPart", "poraryUrl", "templateID", "TempId", "currentUrl", "tempRef", "currentK", "templateId", "tempUrl", "stemId", "tempID", "poraryRef", "tempK", "uniqueUrl", "tempIs", "templateUrl", "poraryId", "stemID", "uniqueId", "fakePart", "fakeRef", "TempUrl", "poraryPart", "stemUrl", "templateRef", "currentIs"], "length": ["text", "path", "bytes", "description", "number", "Length", "string", "sequence", "height", "amount", "supported", "count", "ength", "position", "loaded", "total", "limit", "L", "ENGTH", "filename", "len", "content", "time", "n", "duration", "code", "present", "volume", "location", "padding", "buffer", "message", "end", "all", "maximum", "capacity", "read", "offset", "name", "readable", "width", "load", "data", "value", "shape", "version", "l", "default", "json", "SIZE", "available", "type", "full", "size"], "digest": ["mdested", "digested", "signester", " digEST", "fingerester", "moder", "digig", "Digested", "fingerested", "mdest", "DigEST", "Digig", "Digest", "mdester", "identig", "diger", "Diger", "modested", " digested", "modest", "digEST", "Digester", " diger", "Digist", " digester", "fingerEST", "signested", " digist", "identested", "modEST", "signist", "digist", "fingerest", "identester", "identest", "signest", "digester", "mdig"], "output": ["Output", "icon", "put", "that", "io", "channel", "no", "cut", "current", "you", "open", "other", "network", "to", "write", "connection", "unsigned", "ilo", "auto", "console", "hidden", "outer", "o", "web", "net", "buffer", "result", "message", "out", "page", "none", "see", "exit", "generation", "client", "object", "four", "data", "source", "application", "image", "response", "next", "ou", "body", "stream", "display"], "file": ["local", "path", "module", "dir", "print", "FILE", "e", "File", "f", "base", "fp", "db", "document", "name", "common", "comment", "line", "source", "this", "full", "entry", "place", "h", "io", "child", "class", "in", "run", "target", "filename", "rule", "valid", "single", "out", "get", "action", "create", "http", "data", "same", "image", "chain", "handle", "il", "body", "word", "log", "id", "channel", "old", "record", "work", "url", "null", "to", "relation", "port", "form", "buffer", "result", "page", "entity", "files", "message", "user", "upload", "tree", "error", "report", "value", "type", "binary", "resource", "ile", "remote", "al", "real", "library", "block", "stat", " File", "link", "table", "format", "le", "info", "temp"], "parent": ["master", "path", "op", "dir", "p", "mother", "ger", "wrapper", "part", "per", "child", "holder", "from", "rule", "owner", "parents", "to", "null", "block", "relation", "port", "m", "base", "ma", "sp", "root", "out", "tmp", "global", "tree", "name", "line", "folder", "source", "shape", "man", "ip", "Parent", "g", "pool", "this"], "now": ["system", "cmp", "onew", "when", "aj", "post", "sw", "always", "since", "before", "st", "aw", "fx", "after", "then", "current", "from", "here", "time", "null", "day", "omp", "present", "wait", "ord", "set", "ct", "loc", "dd", "date", "draw", "diff", "mm", "exp", "ow", "tim", "zero", "recent", "done", "amp", "Now", "ready", "yes", "sum", "gov", "mb", "full", "off", "NOW", "size"]}}
{"id1": "17724879", "id2": "17190057", "code1": "    public byte[] getDigest(OMAttribute attribute, String digestAlgorithm) throws OMException {\n        byte[] digest = new byte[0];\n        if (!(attribute.getLocalName().equals(\"xmlns\") || attribute.getLocalName().startsWith(\"xmlns:\"))) try {\n            MessageDigest md = MessageDigest.getInstance(digestAlgorithm);\n            md.update((byte) 0);\n            md.update((byte) 0);\n            md.update((byte) 0);\n            md.update((byte) 2);\n            md.update(getExpandedName(attribute).getBytes(\"UnicodeBigUnmarked\"));\n            md.update((byte) 0);\n            md.update((byte) 0);\n            md.update(attribute.getAttributeValue().getBytes(\"UnicodeBigUnmarked\"));\n            digest = md.digest();\n        } catch (NoSuchAlgorithmException e) {\n            throw new OMException(e);\n        } catch (UnsupportedEncodingException e) {\n            throw new OMException(e);\n        }\n        return digest;\n    }\n", "code2": "    private static String encode(final String input) throws UnsupportedEncodingException, NoSuchAlgorithmException {\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.reset();\n        md.update(input.getBytes(\"UTF-8\"));\n        return toHexString(md.digest());\n    }\n", "label": 1, "substitutes": {"getDigest": ["getMDest", "getDigEST", " getMDse", " getDigEST", "getHashest", "getHashEST", " getDigested", "getdigest", "getdigse", "getMDested", "getMDse", "getDigse", " getMDest", " getMDEST", "getdigested", " getDigse", "getDigested", "getHashse", "getMDEST", "getdigEST", " getMDested", "getHashested"], "attribute": ["space", "item", "address", "subject", "description", "at", "operation", "definition", "member", "variable", "missing", "communication", "pair", "property", "event", "position", "al", "Attribute", "relation", "a", "article", "expression", "qualified", "attr", "message", "argument", "information", "element", "each", "command", "ident", "input", "associated", "reference", "document", "name", "object", "att", "data", "application", "value", "report", "password", "and", "metadata", "add", "request", "ribute", "directory", "character", "option", "type", "operator", "management", "policy", "entry", "word"], "digestAlgorithm": ["digestALgo", "digesteralgorithm", "digestAlgebra", "digestSchego", "digestsalgebra", "digestAlgorith", "digestalgebra", "digesterAlgorith", "digestsAlgo", "digestalgorith", "digesteralgebra", "digestALgebra", "digestsalgorithm", "digestPalgorith", "digestsAlgorithm", "digestalgo", "digesterAlgo", "digestPalgorithm", "digesteralgorith", "digestSchegebra", "digesterAlgebra", "digestalgorithm", "digestPalgo", "digestALgorithm", "digestAlgo", "digesterAlgorithm", "digestsalgo", "digestPalgebra", "digesteralgo", "digestSchegorithm", "digestALgorith", "digestsAlgebra"], "digest": ["Digend", "designests", "mdtest", "mdested", "diagnse", "designEST", " digests", "digested", " digEST", "hashEST", "Digested", "Digse", "digitude", "mdest", "DigEST", "Digest", "digests", "designest", "equested", " digested", "digEST", "mditude", "digtest", " digtest", "Digist", "equend", "Digtest", "diagnitude", "diagnest", "equest", "diagnested", " digitude", "hashest", " digist", "Digests", " digse", "digist", "hashend", "digse", "designist", "mdse", "hashested", "equEST", "digend"], "md": ["mac", "mc", "d", "js", "dr", "ud", "pdf", "rpm", "pt", "pd", "mt", "ld", "amd", "mod", "fd", "di", "sm", "nt", "managed", "esm", "nd", "met", "strong", "good", "red", "det", "m", "pm", "ct", "ms", "sd", "dd", "ma", "rm", "hd", "mm", "ds", "mk", "cd", "mind", "ind", "bd", "mg", "mn", "dm", "metadata", "der", "dh", "df", "mb", "cmd", "grad", "MD", "cond", "wd"]}}
{"id1": "13657527", "id2": "7044685", "code1": "    synchronized List<String> getDatasetsList(String surl) {\n        if (datasetsList == null) {\n            datasetsList = new HashMap<String, List<String>>();\n        }\n        List<String> result = datasetsList.get(surl);\n        if (result == null) {\n            BufferedReader reader = null;\n            try {\n                URL url = new URL(surl + \"?server=list\");\n                reader = new BufferedReader(new InputStreamReader(url.openStream()));\n                String s = reader.readLine();\n                ArrayList<String> list = new ArrayList<String>();\n                while (s != null) {\n                    list.add(s);\n                    s = reader.readLine();\n                }\n                datasetsList.put(surl, list);\n            } catch (IOException ex) {\n                Logger.getLogger(Das2ServerDataSourceFactory.class.getName()).log(Level.SEVERE, null, ex);\n                throw new RuntimeException(ex);\n            } finally {\n                try {\n                    reader.close();\n                } catch (IOException ex) {\n                    Logger.getLogger(Das2ServerDataSourceFactory.class.getName()).log(Level.SEVERE, null, ex);\n                }\n            }\n        }\n        return datasetsList.get(surl);\n    }\n", "code2": "    static String encrypt(String plaintext) {\n        MessageDigest d = null;\n        try {\n            d = MessageDigest.getInstance(\"SHA-1\");\n            d.update(plaintext.getBytes(\"UTF-8\"));\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return new String(Base64.encodeBase64(d.digest()));\n    }\n", "label": 0, "substitutes": {"getDatasetsList": ["getDatisetList", "getDatasesResult", "getDatisetResult", "getDatisetsResult", "getDatasetResult", "getDatasuresStatus", "getDatasuresResult", "getDatisetsStatus", "getDatasetStatus", "getDatasetsResult", "getDatasuresList", "getDatasesStatus", "getDatisetStatus", "getDatisetsList", "getDatasetsStatus", "getDatasesList", "getDatasetList"], "surl": ["slim", " suri", "jsuri", "esname", "jsUrl", "ssURL", "sUrl", "esuri", "ssuri", "lsuri", "stsuri", "stslt", "ssurl", " smail", "esUrl", "stsserver", "esURL", "jsurl", "suri", "sysuri", " sUrl", "lsurl", "esurl", "lsUrl", "lsserver", "smail", "sslim", "stsurl", "jslim", "slt", "sysurl", "syslt", " sname", "sname", "lslt", "sserver", "sURL", "sysserver", "ssUrl", "lsmail"], "datasetsList": ["datasuresList", "datarsetsSet", "datarsetList", "datassetsData", "datmasetsList", "datasetGroup", "datarssetsList", "datassetsTable", "datasuresSet", "datasagesData", "datasetMap", "datasetsData", "datassetslist", "datasetData", "datmassetsData", "datassetsMap", "datasetlist", "datasetList", "datarssetsLock", "datarsetsMap", "datasetsTable", "datisetsName", "datasetsName", "datasourcesSet", "datmassetsList", "datasenslist", "datarsetsLock", "datarsetSet", "datasetName", "datasETSGroup", "datasagesTable", "datasureslist", "datasamesList", "datasagesMap", "datassetsList", "datmassetsMap", "datmassetsLock", "datasETSMap", "datisetsGroup", "dataselinesName", "datasourcesLock", "datarsetslist", "datasetLock", "datasagesLock", "dataselinesGroup", "datisetMap", "datmasetsMap", "datasETSName", "datasensList", "datasagesList", "datasameslist", "datasamesMap", "datasourcesTable", "datasamesSet", "datisetGroup", "datisetList", "datasetslist", "dataselinesMap", "datisetsMap", "datasetsMap", "datasetsGroup", "datarsetsList", "datarsetMap", "datisetName", "datasETSList", "datasourcesList", "datarssetsTable", "datasensMap", "datasetsLock", "datasetsSet", "datmasetsData", "datasagesSet", "dataselinesList", "datarsetlist", "datisetsList", "datasuresMap", "datasetSet", "datmasetsLock", "datassetsSet", "datassetsLock", "datarssetsSet", "datarsetsTable"], "result": ["search", "contact", "description", "results", "first", "sequence", "ret", "test", "success", "exist", "detail", "record", "complete", "menu", "successfully", "relation", "res", "status", "valid", "def", "set", "form", "table", "buffer", "message", "found", "Result", "diff", "cert", "successful", "comment", "answer", "folder", "report", "chain", "details", "response", "default", "there"], "reader": ["river", "dr", "layer", "field", "file", "timer", "handler", "resource", "redo", "roller", "wrapper", "test", "per", "loader", "ner", "row", "Reader", "mr", "r", "bo", "range", "query", "ro", "inner", "upper", "runner", "iterator", "iter", "buffer", "rd", "READ", "older", "writer", "via", "read", "parser", "client", "rr", "operator", "liner", "reading", "socket", "rer", "rl", "driver", "ser", "handle", "peer", "body", "er", "stream", "rar", "author"], "url": ["sl", "address", "lr", "file", "Url", "str", "nl", "id", "resource", "mail", "char", "browser", "loader", "row", "ls", "r", "dl", "null", "ll", "ssl", "link", "location", "uri", "URL", "web", "ur", "user", "client", "http", "rl", "key", "mount", "l", "il", "stream", "org", "ul"], "s": ["js", "sq", "sample", "v", "string", "h", "abs", "str", "sw", "ats", "b", "is", "t", "ws", "ids", "still", "ls", "S", "strings", "hs", "gs", "rs", "r", "tes", "ts", "n", "sym", "i", "cs", "has", "csv", "ns", "es", "as", "ps", "ms", "sb", "series", "bs", "sql", "its", "ds", "sts", "sv", "source", "ins", "l", "us", "full", "less", "ss", "qs", "y", "gets", "os"], "list": ["local", "batch", "log", "sequence", "lists", "li", "member", "print", "part", "test", "listed", "join", "st", "stack", "ls", "ist", "detail", "L", "left", "dl", "block", "ll", "LIST", "note", "def", "set", "form", "table", "single", "format", "all", "ml", "pretty", "cont", "add", "top", "chain", "group", "array", "l", "layout", "pool", "full", "php", "collection", "word"]}}
{"id1": "6470716", "id2": "21308543", "code1": "    public static void main(String[] args) throws Exception {\n        String st = \"http://www.kmzlinks.com/redirect.asp?id=113&file=HeartShapedIsland.kmz\";\n        URL url = new URL(st);\n        InputStream fis = null;\n        if (\"file\".equals(url.getProtocol())) fis = new FileInputStream(url.getFile()); else if (\"http\".equals(url.getProtocol())) fis = url.openStream();\n        ZipInputStream zis = new ZipInputStream(fis);\n        ZipEntry entry;\n        while ((entry = zis.getNextEntry()) != null) {\n            System.out.println(\"Extracting: \" + entry);\n            int count;\n            byte data[] = new byte[BUFFER];\n            FileOutputStream fos = new FileOutputStream(entry.getName());\n            BufferedOutputStream dest = new BufferedOutputStream(fos, BUFFER);\n            while ((count = zis.read(data, 0, BUFFER)) != -1) dest.write(data, 0, count);\n            dest.flush();\n            dest.close();\n        }\n        zis.close();\n    }\n", "code2": "    private static void copyFile(String src, String target) throws IOException {\n        FileChannel ic = new FileInputStream(src).getChannel();\n        FileChannel oc = new FileOutputStream(target).getChannel();\n        ic.transferTo(0, ic.size(), oc);\n        ic.close();\n        oc.close();\n    }\n", "label": 1, "substitutes": {"st": ["ast", "d", "ust", "St", "ste", "step", "ld", "str", "sw", "ost", "store", "std", "start", "stable", "sm", "t", "service", "stra", "ist", "nd", "ST", "sth", "sta", "set", "sp", "sty", "est", "th", "ft", "rt", "www", "sts", "rest", "inst", "tt", "stri", "stream", "sh", "sn", "se"], "url": ["build", "sl", "gl", "address", "fl", "string", "ret", "Url", "file", "li", "abs", "str", "nl", "mail", "char", "browser", "ls", "shell", "r", "dl", "null", "pl", "ll", "host", "ssl", "html", "location", "link", "f", "uri", "rel", "base", "URL", "cl", "web", "loc", "ur", "ch", "github", "cert", "impl", "client", "bel", "hl", "http", "www", "rest", "addr", "mount", "el", "rect", "l", "domain", "ref", "il", "ul"], "fis": ["feois", "Fos", "Fais", "tais", " fisl", "efis", "flis", " f\u00eds", "xfois", "ufis", "xfis", "fais", "ufisl", "fli", "xfi", "feier", " fiss", "feis", "Fois", " fi", "tos", "tiss", "fois", "fiss", "Fis", "fisl", "fei", "f\u00eds", "efi", "fliss", "ufi", " fais", "ef\u00eds", "Fiss", "efiss", "flisl", "fier", "tis", "fi", "uf\u00eds", "xfier", "ufiss", "Fier", "Fi"], "zis": ["zhIs", "czisa", "zisa", "zhes", "zhis", "zeniss", "zipisin", " zits", "zisin", "ozisa", "zhisin", "fris", "fits", "ozes", "zenris", "ziss", "zos", "zipos", "zisi", " zris", " zos", "zIs", " zisa", "zits", "ozits", "fiss", "ozis", "czis", "zipIs", "zipes", "zris", " zisi", " ziss", "ozIs", "czIs", "ozisin", "fisi", "zipis", "zenis", "czits", "zipits", "zes", " zIs", "zenisi"], "entry": ["system", "jar", "item", "card", "cell", "match", "log", "field", "member", "ce", "Entry", "char", "e", "obj", "event", "nt", "be", "row", "record", "attribute", "index", "way", "null", "word", "office", "pattern", "jo", "zip", "inter", "link", "valid", "def", "form", "result", "zo", "out", "enter", "tmp", "entity", "element", "sp", "ie", "ry", "name", "comment", "line", "source", "key", "or", "chain", "list", "fr", "ent", "info", "existent", "de", "se"], "count": ["err", "force", "cell", "batch", "number", "match", "ctr", "ount", "amount", "nb", "length", "char", "t", "start", "nt", "num", "child", "max", "current", "total", "len", "call", "index", "c", "n", "check", "code", "cc", "base", "iter", "ct", "buffer", "page", "counter", "end", "found", "acc", "ch", "core", "read", "ind", "name", "Count", "comment", "cont", "add", "sum", "depth", "last", "size"], "data": ["text", "d", "sample", "bytes", "batch", "number", "ata", "dat", "string", "step", "part", "length", "output", "good", "n", "mu", "block", "mem", "area", "reason", "def", " DATA", "buffer", "table", "message", "result", "format", "raw", "out", "all", "name", "zero", "source", "value", "image", "chain", "done", "DATA", "cache", "json", "next", "buf", "bin", "size"], "fos": ["Fos", "fooss", "fios", "woss", " fOS", "fol", "Fops", "foss", "wOS", "fiol", "fioss", "his", "fops", "hoss", "Fol", "foops", "foos", "wis", "hos", "fOS", "fiops", "hOS", "fool", "wos", " foss", "Foss"], "dest": ["master", "send", "foreign", "trans", "them", "decl", "dat", "des", "member", "parent", "gate", "crit", "src", "cat", "test", "std", "Dest", "nt", "gest", "ptr", "temp", "nd", "output", "target", "pipe", "pas", "nom", "way", "mem", "det", "desc", "comp", "loc", "out", "est", "result", "usr", "writer", "exp", "transfer", "dist", "source", "cont", "rest", "done", "comb", "sum", "bin", "origin", "coord", "dc"]}}
{"id1": "13439950", "id2": "19549489", "code1": "    public String readRemoteFile() throws IOException {\n        String response = \"\";\n        boolean eof = false;\n        URL url = new URL(StaticData.remoteFile);\n        InputStream is = url.openStream();\n        BufferedReader br = new BufferedReader(new InputStreamReader(is));\n        String s;\n        s = br.readLine();\n        response = s;\n        while (!eof) {\n            try {\n                s = br.readLine();\n                if (s == null) {\n                    eof = true;\n                    br.close();\n                } else response += s;\n            } catch (EOFException eo) {\n                eof = true;\n            } catch (IOException e) {\n                System.out.println(\"IO Error : \" + e.getMessage());\n            }\n        }\n        return response;\n    }\n", "code2": "    public static void copy(File sourceFile, File destinationFile) throws IOException {\n        FileChannel sourceFileChannel = (new FileInputStream(sourceFile)).getChannel();\n        FileChannel destinationFileChannel = (new FileOutputStream(destinationFile)).getChannel();\n        sourceFileChannel.transferTo(0, sourceFile.length(), destinationFileChannel);\n        sourceFileChannel.close();\n        destinationFileChannel.close();\n    }\n", "label": 0, "substitutes": {"readRemoteFile": ["readremoteFilename", "readLocalFilename", "downloadStaticRemote", "readStaticRemote", "readLocalFrom", "readRemoteFilename", "readremoteRemote", "downloadStaticFrom", "readRemoteFrom", "downloadStaticFilename", "readremoteFile", "readLocalRemote", "readLocalFile", "downloadRemoteRemote", "downloadStaticFile", "readRemoteRemote", "readStaticFile", "downloadRemoteFile", "readStaticFilename", "downloadRemoteFilename", "readremoteFrom", "downloadRemoteFrom", "readStaticFrom"], "response": ["settings", "send", "sample", "secret", "address", "description", "string", "sequence", "str", "print", "onse", "service", "resolution", "Response", "output", "network", "view", "block", "relation", "connection", "res", "status", "summary", "server", "vector", "example", "result", "message", "body", "format", "respons", "line", "data", "answer", "source", "application", "value", "report", "image", "reset", "version", "request", "cache", "json", "next", "reply", "resp", "continue", "command"], "url": ["build", "sl", "gl", "lr", "fl", "ret", "Url", "abs", "str", "nl", "resource", "mail", "b", "char", "browser", "r", "dl", "ll", "pl", "https", "ssl", "link", "uri", "rel", "base", "URL", "web", "loc", "ur", "name", "bel", "hl", "http", "rl", "mount", "el", "l", "cmd", "ref", "lb", "ul"], "is": ["ates", "does", "serv", "iss", "ic", "isl", "isa", "ists", "sis", "in", "ais", "ri", "iris", "rs", "i", "ios", " Is", "bis", "fs", "es", "as", "IS", "ms", "bs", "lis", "its", "\u00eds", "ris", "sys", "isf", "Is", "ins", "nis", "ir", "it", "ip", "sels", "isi", "isc", "os", "iso"], "br": ["lr", "dr", "BR", "str", "bt", "b", "be", "nr", "browser", "bridge", "rb", "vr", "repl", "rob", "mr", "r", "bl", "ro", "bro", "res", "cr", "bh", "adr", "rel", "ber", "sp", "hr", "bs", "wr", "bm", "bc", "gr", "pr", "bd", "bn", "bf", "bp", "tr", "shr", "fr", "bi", "buf", "ver", "jp", "Br"], "s": ["js", "v", "sq", "sample", "string", "h", "p", "txt", "str", "ats", "b", "e", "t", "z", "still", "S", "ls", "j", "strings", "gs", "rs", "r", "ts", "n", "sym", "i", "stats", "tes", "a", "res", "m", "csv", "ns", "es", "o", "ps", "y", "sports", "single", "ms", "ves", "bs", "sb", "sql", "series", " ts", "its", "sts", "sv", "value", "ins", "ies", "l", "g", "less", " gets", " samples", "ss", "qs", " inputs", "sn", "gets", "os", "w", "se"], "eof": ["geif", "Eof", "eeol", "eeef", " eef", "eOf", "eeof", "eov", " eomp", "eos", "eOF", "eif", "eeOf", "eeot", "seof", "Eol", "eeomp", " eow", "sef", "EOf", " eOf", "geof", "geOF", "eow", "eol", "Eef", " eif", "eeOF", "eeov", "eot", " eOF", "Eov", " ef", "eomp", "eeow", "Eos", "Eomp", " eov", " eot", "eeif", "eef", "seot", " eos", " eol", "ef", "eeos", "seef", "geow"]}}
{"id1": "12146394", "id2": "13981689", "code1": "    public static String md5Crypt(final byte[] key, final byte[] salt) throws NoSuchAlgorithmException {\n        if (key == null || key.length == 0) {\n            throw new IllegalArgumentException(\"Argument 'key' cannot be null or an empty array.\");\n        }\n        if (salt == null || salt.length == 0) {\n            throw new IllegalArgumentException(\"Argument 'salt' cannot be null or an empty array.\");\n        }\n        final MessageDigest _md = MessageDigest.getInstance(\"MD5\");\n        _md.update(key);\n        _md.update(MAGIC.getBytes());\n        _md.update(salt);\n        final MessageDigest md2 = MessageDigest.getInstance(\"MD5\");\n        md2.update(key);\n        md2.update(salt);\n        md2.update(key);\n        byte[] abyFinal = md2.digest();\n        for (int n = key.length; n > 0; n -= 16) {\n            _md.update(abyFinal, 0, n > 16 ? 16 : n);\n        }\n        abyFinal = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };\n        for (int j = 0, i = key.length; i != 0; i >>>= 1) {\n            if ((i & 1) == 1) _md.update(abyFinal, j, 1); else _md.update(key, j, 1);\n        }\n        final StringBuilder sbPasswd = new StringBuilder();\n        sbPasswd.append(MAGIC);\n        sbPasswd.append(new String(salt));\n        sbPasswd.append('$');\n        abyFinal = _md.digest();\n        for (int n = 0; n < 1000; n++) {\n            final MessageDigest md3 = MessageDigest.getInstance(\"MD5\");\n            if ((n & 1) != 0) {\n                md3.update(key);\n            } else {\n                md3.update(abyFinal);\n            }\n            if ((n % 3) != 0) {\n                md3.update(salt);\n            }\n            if ((n % 7) != 0) {\n                md3.update(key);\n            }\n            if ((n & 1) != 0) {\n                md3.update(abyFinal);\n            } else {\n                md3.update(key);\n            }\n            abyFinal = md3.digest();\n        }\n        int[] anFinal = new int[] { (abyFinal[0] & 0x7f) | (abyFinal[0] & 0x80), (abyFinal[1] & 0x7f) | (abyFinal[1] & 0x80), (abyFinal[2] & 0x7f) | (abyFinal[2] & 0x80), (abyFinal[3] & 0x7f) | (abyFinal[3] & 0x80), (abyFinal[4] & 0x7f) | (abyFinal[4] & 0x80), (abyFinal[5] & 0x7f) | (abyFinal[5] & 0x80), (abyFinal[6] & 0x7f) | (abyFinal[6] & 0x80), (abyFinal[7] & 0x7f) | (abyFinal[7] & 0x80), (abyFinal[8] & 0x7f) | (abyFinal[8] & 0x80), (abyFinal[9] & 0x7f) | (abyFinal[9] & 0x80), (abyFinal[10] & 0x7f) | (abyFinal[10] & 0x80), (abyFinal[11] & 0x7f) | (abyFinal[11] & 0x80), (abyFinal[12] & 0x7f) | (abyFinal[12] & 0x80), (abyFinal[13] & 0x7f) | (abyFinal[13] & 0x80), (abyFinal[14] & 0x7f) | (abyFinal[14] & 0x80), (abyFinal[15] & 0x7f) | (abyFinal[15] & 0x80) };\n        to64(sbPasswd, anFinal[0] << 16 | anFinal[6] << 8 | anFinal[12], 4);\n        to64(sbPasswd, anFinal[1] << 16 | anFinal[7] << 8 | anFinal[13], 4);\n        to64(sbPasswd, anFinal[2] << 16 | anFinal[8] << 8 | anFinal[14], 4);\n        to64(sbPasswd, anFinal[3] << 16 | anFinal[9] << 8 | anFinal[15], 4);\n        to64(sbPasswd, anFinal[4] << 16 | anFinal[10] << 8 | anFinal[5], 4);\n        to64(sbPasswd, anFinal[11], 2);\n        return sbPasswd.toString();\n    }\n", "code2": "    public static String md5Hash(String src) {\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            md.update(src.getBytes());\n            return bytesArrayToHexString(md.digest());\n        } catch (Exception e) {\n            return null;\n        }\n    }\n", "label": 1, "substitutes": {"md5Crypt": ["md4Enc", "md4Crypt", " Md3Dec", "md4crypt", " Md5Enc", "md5Enc", "md2Crypt", " Md3Enc", " Md3Crypt", "md2crypt", " Md5crypt", " Md5Crypt", "md3Crypt", "md3Enc", "md2Enc", " Md5Dec", "md5crypt", "md5Dec", "md4Dec", "md2Dec", " Md3crypt", "md3crypt", "md3Dec"], "key": ["seed", "pair", "by", "test", "blow", "base", "root", "input", "name", "source", "list", "window", "json", "er", "y", "policy", "entry", "mac", "p", "ce", "ion", "ca", "ex", "ice", "query", "check", "host", "prefix", "net", "ek", "change", "client", "data", "image", "chain", "sum", "ey", "ip", "state", "ace", "gem", "iv", "word", "item", "address", "Key", "str", "id", "event", "start", "phrase", "to", "null", "KEY", "code", "piece", "prime", "poly", "form", "message", "user", "air", "cert", "x", "value", "keys", "default", "type", "text", "icon", "string", "file", "any", "char", "length", "k", "hash", "no", "ke", "index", "act", "box", "block", "link", "note", "table", "password", "version", "token", "none"], "salt": [" sig", "seil", "unsig", "Save", " sint", "slil", "calt", "Sil", " sass", "psave", "siv", "sash", "Salt", "pig", "sig", "Sash", " salted", "unsalted", "Sass", "tsave", "piv", "cass", "palt", "Siv", "hALT", "tsalt", "Sol", "psalt", "tsALT", "sert", "seash", "pALT", " sert", "Salted", "sol", "halt", "sealt", "chet", "cig", "Sig", "sint", "unsalt", " sol", "hig", "unsALT", "sALT", "hiv", " shet", "sil", "psALT", "slash", "save", " save", "sass", "tsol", "shet", "slalt", "SALT", "slALT", "Sert", "psass", "seALT", " sALT", "salted", "Sint"], "_md": ["___MD", " _df", "_mk", "_____mb", "_df", "_____md", " _MD", "_MD", "___dm", "___mn", "_cmd", " _sd", "___md", "_mg", "_mb", "_mn", "_____mn", "_____dm", "_dm", "_____mp", "_mand", " _cmd", " _mand", "_mp", "_sd", " _dm", "_____mg", " _mn"], "md2": ["ddTwo", "dd2", "mb4", "md4", "cmdtwo", "cmdto", "md6", "dd5", "mdto", "mode4", "mandto", "rm6", "sd5", "dd4", "modetwo", "mb52", "sdTwo", "dd1", " mdto", "rm2", "mode2", "sd1", "md52", " md6", "sd2", "mand2", "md1", " md1", "cmd4", "cmd6", "ddtwo", "md5", " md52", "mdTwo", "rm5", " mdTwo", "mdtwo", "mand4", "cmd5", "cmd52", " md5", "mand5", "cmd2", " md4", "mb2", "mb5", "rm4", "mode5"], "abyFinal": ["agusFixed", "boatFixed", "seatTotal", "abyZero", "washingComplete", "seatFinal", "sayTotal", "abyFin", "satFinal", "abyDual", "alyComplete", "satLast", "abyComplete", "abyInitial", "aberFin", "agusTotal", "BabyFin", "sayUpdated", "washingReal", "uffyTotal", "seatFin", "inessReal", "washingFin", "uffyFinal", "uyInitial", "uffyUpdated", "BabyLast", "BabyZero", "washingFull", "washingFixed", "BabyFinal", "agusUpdated", "phiFull", "sayFinal", "washingLast", "aberFinal", "andyFinal", "abyAll", "andyAll", "aberTotal", "abyFixed", "abyUpdated", "andyFixed", "uyFin", "inessFixed", "aberInitial", "inessFinal", "seatInitial", "sayFixed", "sayInitial", "boatReal", "agusFinal", "washingDual", "inessInitial", "abyReal", "abyLast", "uyTotal", "phiReal", "washingAll", "boatFinal", "boatInitial", "boatFull", "alyAll", "washingZero", "abyFull", "boatDual", "phiFinal", "sayReal", "alyFinal", "uffyFixed", "washingFinal", "satFin", "uyFinal", "phiDual", "abyTotal", "alyFixed", "satZero", "andyComplete"], "n": ["ln", "d", "v", "number", "en", "p", "np", "nl", "nb", "k", "t", "nr", "count", "nn", "z", "nt", "num", "no", "nm", "N", "an", "norm", "ren", "network", "ni", "len", "names", "c", "ng", "m", "ns", "o", "syn", "note", "size", "non", "net", "out", "nor", "cn", "all", "dn", "nw", "un", "yn", "name", "nan", "nc", "gn", "mn", "el", "l", "na", "g", " N", "ne", "nu", "pn", "y", "sn", "con", "w", "ul"], "j": ["js", "ji", "v", "I", "ia", "at", "p", "jj", "dj", "aj", "b", "k", "J", "obj", "z", "ja", "si", "index", "kj", "oj", "br", "jump", "out", "q", "jit", "jc", "ij", "x", "im", "uj", "jl", "ix", "it", "g", "json", "bj", "bi", "y", "jp"], "i": ["ti", "ji", "v", "I", "ic", "p", "li", "gi", "k", "di", "ki", "ii", "phi", "ri", "mi", "si", "ni", "c", "ini", "iu", "pi", "ci", "m", "cli", "multi", "init", "xi", "gu", "ei", "u", "ij", "qi", "ai", "ix", "l", "ip", "it", "bi", "hi", "info", "ami", "y", "ia"], "sbPasswd": ["sbDefw", "sbChainword", "ebPasswd", "zbDefwd", "zbDefsword", "cbpassrc", "sbPushrc", "sbPushWD", "sbWorkwd", "sbGuenc", "sbAssweight", "sbPassword", "sbAssword", "zbPasswd", "cbMasswd", "cbPassw", "sbMassWD", "sbMassenc", "sbDefweight", "zbPassw", "sbDefwd", "cbPassenc", "sbChainweight", "ebPassweight", "ebPassword", "zbDefweight", "cbpassgrad", "sbPassenc", "sbGuess", "sbWorkw", "sbAssWD", "ebChainwd", "zbPassweight", "ebChainweight", "sbPASSgrad", "cbPassrc", "sbPushw", "sbPASSwd", "sbGuwd", "sbPushgrad", "sbPassw", "sbpasswd", "sbPushwd", "sbMasswd", "sbPushess", "cbPasswd", "sbPassweight", "sbChainWD", "cbPassess", "ebPassWD", "sbPushenc", "cbMassenc", "sbpassweight", "sbPassess", "sbPassgrad", "sbPassrc", "cbPassgrad", "cbPassWD", "zbDefw", "sbDefsword", "sbPASSw", "sbpasssword", "sbWorkweight", "sbMassess", "sbGuWD", "cbMassWD", "sbpassw", "sbPasssword", "cbpasswd", "sbAsswd", "sbWorksword", "zbPasssword", "cbpassw", "sbPassWD", "sbPASSrc", "ebChainword", "sbpassrc", "sbChainwd", "ebChainWD", "cbMassess", "sbpassgrad"], "md3": ["rm3", "mt2", "MD2", "mb43", "mt3", "mt33", " md43", "mb4", "md4", "cmd3", "rm30", "cmd30", "mt30", "m5", "m3", "m4", "md33", "cmd43", "mt43", "MD5", "rmThree", "dm03", "cmd33", "MD3", "mtThree", "md30", "md43", "md5", "rm5", "mt5", "dm3", "cmd5", "mt03", "MD43", "mdThree", "dm33", " md5", "m43", "cmd03", "md03", " md4", "dm5", "mb5", "cmd2", "cmdThree", "mb3"]}}
{"id1": "2834524", "id2": "13333160", "code1": "    public void write() throws IOException {\n        JarOutputStream jarOut = new JarOutputStream(outputStream, manifest);\n        if (includeJars != null) {\n            HashSet allEntries = new HashSet(includeJars);\n            if (!ignoreDependencies) expandSet(allEntries);\n            for (Iterator iterator = allEntries.iterator(); iterator.hasNext(); ) {\n                JarFile jar = getJarFile(iterator.next());\n                Enumeration jarEntries = jar.entries();\n                while (jarEntries.hasMoreElements()) {\n                    ZipEntry o1 = (ZipEntry) jarEntries.nextElement();\n                    if (o1.getName().equalsIgnoreCase(\"META-INF/MANIFEST.MF\") || o1.getSize() <= 0) continue;\n                    jarOut.putNextEntry(o1);\n                    InputStream entryStream = jar.getInputStream(o1);\n                    IOUtils.copy(entryStream, jarOut);\n                    jarOut.closeEntry();\n                }\n            }\n        }\n        jarOut.finish();\n        jarOut.close();\n    }\n", "code2": "    private void run(Reader xmlIn, OutputStream out) throws IOException, SAXException {\n        Document dom = null;\n        try {\n            DocumentBuilderFactory f = DocumentBuilderFactory.newInstance();\n            f.setNamespaceAware(false);\n            f.setCoalescing(true);\n            f.setIgnoringComments(true);\n            f.setValidating(false);\n            DocumentBuilder b = f.newDocumentBuilder();\n            dom = b.parse(new InputSource(xmlIn));\n        } catch (ParserConfigurationException err) {\n            throw new IOException(err);\n        }\n        Element root = dom.getDocumentElement();\n        if (root == null) throw new SAXException(\"Not root in document\");\n        Attr att = root.getAttributeNode(\"label\");\n        if (att == null) root.setAttribute(\"label\", \"Wikipedia\");\n        Menu menu = parseMenu(root);\n        menu.id = \"menuWikipedia\";\n        ZipOutputStream zout = new ZipOutputStream(out);\n        String content = ResourceUtils.getContent(XUL4Wikipedia.class, \"chrome.manifest\");\n        addEntry(zout, \"chrome.manifest\", content);\n        content = ResourceUtils.getContent(XUL4Wikipedia.class, \"install.rdf\");\n        addEntry(zout, \"install.rdf\", content);\n        content = ResourceUtils.getContent(XUL4Wikipedia.class, \"library.js\");\n        addDir(zout, \"chrome/\");\n        addDir(zout, \"chrome/content/\");\n        addDir(zout, \"chrome/skin/\");\n        String signal = \"/*INSERT_CMD_HERE*/\";\n        int n = content.indexOf(signal);\n        if (n == -1) throw new RuntimeException(\"where is \" + signal + \" ??\");\n        ZipEntry entry = new ZipEntry(\"chrome/content/library.js\");\n        zout.putNextEntry(entry);\n        PrintWriter pout = new PrintWriter(zout);\n        pout.write(content.substring(0, n));\n        menu.toJS(pout);\n        pout.write(content.substring(n + signal.length()));\n        pout.flush();\n        zout.closeEntry();\n        entry = new ZipEntry(\"chrome/content/menu.xul\");\n        zout.putNextEntry(entry);\n        pout = new PrintWriter(zout);\n        pout.println(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\");\n        pout.println(\"<overlay id=\\\"xul4wikipedia\\\" xmlns=\\\"\" + XUL.NS + \"\\\">\");\n        pout.println(\"<script src=\\\"library.js\\\"/>\");\n        pout.println(\"<popup id=\\\"contentAreaContextMenu\\\">\");\n        pout.println(\"<menuseparator/>\");\n        menu.toXUL(pout);\n        pout.println(\"</popup>\");\n        pout.println(\"</overlay>\");\n        pout.flush();\n        zout.closeEntry();\n        InputStream png = XUL4Wikipedia.class.getResourceAsStream(\"32px-Wikipedia-logo.png\");\n        if (png == null) throw new IOException(\"Cannot get icon\");\n        entry = new ZipEntry(\"chrome/skin/wikipedia.png\");\n        zout.putNextEntry(entry);\n        IOUtils.copyTo(png, zout);\n        zout.closeEntry();\n        zout.finish();\n        zout.flush();\n    }\n", "label": 1, "substitutes": {"write": ["filter", "apply", "lock", "file", "append", "print", "update", "service", "export", "flush", "check", "zip", "link", "dump", "end", "rite", "Write", "create", "read", "commit", "download", "println", " overwrite", "save", "add", "handle", " rewrite", "next"], "jarOut": ["jarout", "jamNet", "JarStore", "browserout", "jamOver", "jarIn", "jarOver", "Jarout", "pkgOver", "browserOutput", " jarGen", "jarGen", "javaout", " jarOutput", "pkgNet", "jamIn", "JarOutput", "JarNet", "jarStore", " jarStore", "javaStore", "pkgOut", "javaOutput", "browserIn", "JarOver", "jarOutput", " jarout", "javaGen", "jamOut", "javaIn", "jarNet", "JarIn", "javaOut", "JarGen", "JarOut", "browserOut", " jarIn", "pkgIn"], "allEntries": [" allEntlections", "allEnies", " allEntrys", "allEnrys", "allEnarts", "allEntryies", " allents", "allents", "allENTrys", "allEntlections", "allENTries", "allENTlections", "allENTies", " allEnties", "allEntrys", " allenties", "allentarts", "allEnties", " allentrys", "allEnts", "allEntarts", "allEnries", " allentries", "allEntryries", "allenties", " allEnts", "allentlections", "allentrys", "allEntryrys", "allentries", " allEntarts"], "iterator": ["river", "sample", "members", "number", "immigration", "sequence", "timer", "inator", "pee", "iver", "loader", "former", "creator", "current", "copy", "walker", "reader", "Iterator", "range", "menu", "i", "internet", "inner", "iner", "instance", "ski", "ippy", "continue", "runner", "builder", "outer", "iter", "loop", "pie", "trace", "set", "vector", "series", "table", "counter", "tmp", "database", "writer", "starter", "versions", "ter", "ator", "liner", "pointer", "finder", "list", "rows", "issues", "next", "values", "operator", "stream", "integer", "collection", "size"], "jar": ["tar", "pod", "bare", "module", "java", "batch", "dir", "file", "binary", "bag", "jj", "magic", "lib", "resource", "char", "browser", "be", "class", "zone", "j", "archive", "cp", "pack", "library", "vol", "jo", "zip", "cf", "job", "sp", "parse", "cert", "tab", "gem", "war", "car", "folder", "Jar", "pkg", "json", "rar", "jp", "entry"], "jarEntries": ["jarAddries", "jarEntarts", "JarEntries", "JarEntrs", "jarContents", "jarMatries", "jarIntires", "jarMatires", "jarContrys", "Jarentires", " jarentries", "JarEntires", "jarIntrs", "jarenties", "jarIntries", "JarEnties", "jarContries", "jarentries", " jarEntrys", "jarEntities", "jarContities", "jarentents", " jarEntents", "Jarentrs", "Jarenties", " jarEntities", "jarEnries", "jarEries", "jarAddarts", "jarAddies", "jarEntents", "jarEents", "jarEnents", "jarMatrs", "jarentires", " jarContents", " jarenties", "jarEntires", "jarAddents", " jarentarts", " jarContities", "jarEnrys", "jarMaties", "jarentarts", "jarEnties", "jarEntrs", "jarentrs", "jarEntrys", " jarContries", "Jarentries", " jarEntarts", "jarEarts", "jarInties", " jarContrys", "jarEies", " jarentents", "jarEnities", " jarEnties"], "o1": ["oone", "os2", " o10", "oa6", " o5", "e5", "o5", "oOne", "oa1", " o6", "o0", "o2", "co1", "co2", "o11", "e2", " oOne", "e512", "oo10", "ico2", "oo8", "oa11", "o10", "e0", "co6", "ico1", " o2", "o8", "os1", "oa8", "co11", " oone", "os512", "os5", " o0", " o512", "oa10", "o6", " o11", "a1", "oo1", "a0", "aOne", "eOne", "a2", "eone", "ico512", " o8", "o512", "oa2", "e1", "icoone"], "entryStream": ["EntryStream", "inputStream", "enterStream", "inputStreamer", "enterSteam", "enterStreamer", "entryPoint", "entryStreamer", " entrySteam", "resultSteam", "entrySteam", "EntrySteam", "resultStream", "EntryForm", "resultPoint", " entryPage", "resultPage", "inputSteam", "rowSteam", "inputForm", "rowPage", "EntryStreamer", "rowPoint", "entryPage", "rowStream", " entryPoint", "enterForm", "entryForm"]}}
{"id1": "771802", "id2": "2324868", "code1": "    public BufferedWriter createOutputStream(String inFile, String outFile) throws IOException {\n        int k_blockSize = 1024;\n        int byteCount;\n        char[] buf = new char[k_blockSize];\n        File ofp = new File(outFile);\n        ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(ofp));\n        zos.setMethod(ZipOutputStream.DEFLATED);\n        OutputStreamWriter osw = new OutputStreamWriter(zos, \"ISO-8859-1\");\n        BufferedWriter bw = new BufferedWriter(osw);\n        ZipEntry zot = null;\n        File ifp = new File(inFile);\n        ZipInputStream zis = new ZipInputStream(new FileInputStream(ifp));\n        InputStreamReader isr = new InputStreamReader(zis, \"ISO-8859-1\");\n        BufferedReader br = new BufferedReader(isr);\n        ZipEntry zit = null;\n        while ((zit = zis.getNextEntry()) != null) {\n            if (zit.getName().equals(\"content.xml\")) {\n                continue;\n            }\n            zot = new ZipEntry(zit.getName());\n            zos.putNextEntry(zot);\n            while ((byteCount = br.read(buf, 0, k_blockSize)) >= 0) bw.write(buf, 0, byteCount);\n            bw.flush();\n            zos.closeEntry();\n        }\n        zos.putNextEntry(new ZipEntry(\"content.xml\"));\n        bw.flush();\n        osw = new OutputStreamWriter(zos, \"UTF8\");\n        bw = new BufferedWriter(osw);\n        return bw;\n    }\n", "code2": "            @Override\n            public void actionPerformed(ActionEvent e) {\n                try {\n                    Pattern delim = Pattern.compile(\"[ ]\");\n                    BufferedReader r = new BufferedReader(new InputStreamReader(new GZIPInputStream(new FileInputStream(\"/home/lindenb/jeter.txt.gz\"))));\n                    String line = null;\n                    URL url = new URL(\"http://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch.fcgi\");\n                    URLConnection conn = url.openConnection();\n                    conn.setDoOutput(true);\n                    OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());\n                    wr.write(\"db=snp&retmode=xml\");\n                    while ((line = r.readLine()) != null) {\n                        String tokens[] = delim.split(line, 2);\n                        if (!tokens[0].startsWith(\"rs\")) continue;\n                        wr.write(\"&id=\" + tokens[0].substring(2).trim());\n                    }\n                    wr.flush();\n                    r.close();\n                    InputStream in = conn.getInputStream();\n                    IOUtils.copyTo(in, System.err);\n                    in.close();\n                    wr.close();\n                } catch (IOException err) {\n                    err.printStackTrace();\n                }\n            }\n", "label": 1, "substitutes": {"createOutputStream": ["createInputSteam", "createOutputFile", "createOutputstream", " createInputstream", " createInputStream", " createOutputFile", " createOutSteam", " createOutputSteam", " createOutFile", " createFileFile", "createInputstream", "createOutputSteam", " createInputFile", " createOutStream", " createOutputstream", " createFilestream", " createFileStream", " createInputSteam", "createInputFile", " createOutstream", "createInputStream", " createFileSteam"], "inFile": ["ninPath", " inPort", "dinPath", "dinFile", "inputPort", "ninFilename", "inputFile", "inPort", "outPath", " inFilename", "outfile", " infile", "infile", "inputDir", "ninfile", "inPath", "dinDir", "inputPath", "ninFile", " inDir", "outFilename", " inPath", "inDir", "inFilename", "dinPort"], "outFile": ["outputfile", "outPlace", "OutFilename", "outputFile", "inPort", "OutPort", "outfile", "exFilename", "toFilename", "toPort", "outputFilename", "infile", "exFile", "newfile", "newFilename", "outputPlace", "exPlace", "exfile", "outPort", "tofile", "newPlace", "newFile", "outFilename", "Outfile", "inFilename", "OutFile", "toFile"], "k_blockSize": ["k_byteTime", "k2blockCount", "k_BlockLength", "k_byteSize", "k4BlockSize", "k_BlockStyle", "k4blockCount", "k_BlockCount", "k2blockLength", "k_blockName", "k_byteCount", "k4BlockStyle", "k_BlockTime", "k2byteSize", "k2blockSize", "k_batchSize", "k_byteName", "k4blockSize", "k4BlockName", "k2byteCount", "k_batchLength", "k_byteLength", "k2byteTime", "k_blockCount", "k_byteStyle", "k2blockTime", "k_BlockName", "k_blockLength", "k_blockStyle", "k4blockName", "k_batchCount", "k2byteLength", "k4blockStyle", "k4BlockCount", "k_BlockSize", "k_batchTime", "k_blockTime"], "byteCount": ["bbSize", "byteLength", "bytePtr", "bytecount", "byteCheck", "wordSize", "byteCode", "byteSize", "blockLength", "bitN", "bitCode", "bbN", "linecount", "byteCounter", " byteLength", "byteN", " byteCounter", "bitCounter", "wordN", "charPtr", "lineCount", " bytecount", "blockCounter", "wordCode", "bbCount", "bitLength", "charLength", "blockCount", "linePtr", "charCount", " byteCheck", "bitCheck", "lineLength", "bitCount", "charcount", " bytePtr", "bitSize", "blockCheck", "wordCount", "bbCode"], "buf": ["cv", "cur", "fg", "bytes", "batch", "pb", "alph", "bag", "ctr", "txt", "str", "queue", "cat", "b", "bg", "conv", "arr", "rb", "msg", "cast", "ctx", "bl", "proc", "block", "mem", "vec", "img", "seq", "buffer", "buff", "raw", "cap", "doc", "db", "exp", "Buff", "bn", "cb", "pkg", "uf", "cmd", "tx", "Buffer", "bc"], "ofp": [" ofl", "ofd", "ofl", "OFP", "owlp", "owlP", " ofpa", "OFd", "Ofl", "OFp", " ofd", "Ofd", "owlpa", "ofpa", "Ofpa", " ofP", "owld", "Ofp", "OfP", "OFl", "ofP"], "zos": ["psy", "settings", "zu", "js", "cos", "zy", "zi", "ez", "rose", "zh", "sbm", "zers", "ws", "std", "sis", "z", "zon", "zzle", "zag", "zona", "hz", "gs", "ossus", "south", "esa", "rss", "za", "zip", "jas", "cz", "ze", "zik", "nz", "ps", "zen", "osi", "zo", "zl", "oss", "los", "bs", "init", "zer", "zin", "eros", "hess", "bes", "python", "rez", "socket", "zb", "tis", "amia", "enos", "css", "LOS", "es", "zes", "sch", "jp", "os", "webkit"], "osw": ["osiw", "oW", "oswd", "aosW", "aospace", "sysw", "ossW", "sysrw", "iswx", "syswd", " osd", " osew", "osssw", "osswx", "aoswd", "oswa", "cosd", "osipace", "issw", "aosw", "osws", "ospace", "oswx", "osd", "isW", " ossw", "osew", "ossw", "osswd", "osiW", "sysW", "aosws", " osws", "ow", "cosw", "cosew", "osW", "opace", "cosws", "aosew", " oswx", "osiwa", "aosd", " osW", "isw", "owa", "aoswa", "osrw", "ossrw", "aosrw"], "bw": ["rbw", "obz", "pbwt", "bwl", "besw", "sbwt", "wbw", "pbwe", "bwk", " bex", "wbwt", "bwy", "bbwt", "pbwy", "obwt", "bz", "bwt", "wbz", " bws", "obw", " bwk", "pbew", "sbz", "obsw", "bbw", "nbwe", "rbz", "bwp", "bbex", "obwb", " bend", "bx", " bwt", " bx", "abw", " bz", "bbem", "rbex", "pbwb", "bem", "bbwp", "bwb", "bsw", "abwy", "obwk", " bsw", "bws", "bewl", "abwe", "pbw", "wbx", "pbz", "sbw", "bbws", "obwl", "nbw", "wbend", " bem", " bwp", "rbws", "bex", "nbew", "bwe", "bbz", "sbwb", "bbend", "bend", "wbwp", "abew", "bew", " bwl", "bbx", "wbem", "nbwy", "bewk"], "zot": ["zipot", " zonet", "zipiat", " zote", "zipiot", " zhot", "zoor", "zoo", "zonet", "zerit", "zerot", "zote", "zoonet", "Zote", "ziphot", "zerott", " zo", "Zott", "zhot", "zor", "zoot", " zott", " zor", "Zit", "zerhot", " ziot", "zeriot", "ziat", "zo", " ziat", "zeror", "zeriat", "zero", "zeronet", "zerote", "Zot", "ziot", "zott"], "ifp": [" iftp", "isjp", " ifr", "iwd", "Ifth", "iwp", "iftp", "ifP", "isP", "ifth", "ihp", "iwtp", "isth", "Ifp", "ihd", " ifjp", "ifr", "ifjp", "Ifjp", "iwr", "ifd", "ihtp", "isp", " ifth", " ifd", "IfP", "ihr", " ifP"], "zis": ["ezi", "zisa", "zi", "zisc", "zoinit", "zinit", "izis", "ziinit", "zeris", "izisc", "zeric", "zic", "ezis", "ziss", "izi", " zi", "ziiss", "eziss", " zic", " zIS", "iziss", " ziss", "zerIS", "zipIS", "zoisa", "zipis", "ezisc", " zisc", "izisa", "izinit", "ziis", "zIS", "zipic", "ziisa", "zois", "zoiss"], "isr": ["itsstr", "isrc", "iospr", "iosstr", "isalr", "issr", "iscr", "issrs", "isscr", " isrs", "isalsr", "iossr", "issrc", "itsr", "sisrs", " isrc", "sisrc", " iscr", "itspr", "itssr", "siscr", "isalstr", "isrs", "ispr", "isstr", "isalpr", "sisr", "iosr"], "br": ["sr", "js", "dr", "ba", "BR", "lr", "ctr", "str", "yr", "bt", "b", "rb", "vr", "Fr", "ptr", "mr", "r", "bl", "bro", "obl", "cr", "bh", "rel", "ber", "hr", "wr", "bm", "gr", " Br", "pr", "bd", "bn", "bf", "bp", "tr", "shr", "fr", "kr", "bi", "bj", "Br"], "zit": ["zeip", "zite", "ziplit", "lexIT", "ezit", "ezIT", "zipist", "izunit", "zeit", "zist", "zIT", "izit", "czot", " zite", "zipIT", "zipite", "zipit", "izip", "ziti", " zIT", "lexIt", "zipIt", "ziit", "zip", "zop", "zunit", "czop", " zlit", "ziIt", "lexit", "ozit", "czunit", "iziti", "ezite", "lexist", "czit", " zop", "ziIT", " zip", "zeop", "ezlit", "zlit", "cziti", "ziist", "zIt", "ozip", "ozunit", "oziti", "zeot", "czip"]}}
{"id1": "6009527", "id2": "7087108", "code1": "    private void doFinishLoadAttachment(long attachmentId) {\n        if (attachmentId != mLoadAttachmentId) {\n            return;\n        }\n        Attachment attachment = Attachment.restoreAttachmentWithId(MessageView.this, attachmentId);\n        Uri attachmentUri = AttachmentProvider.getAttachmentUri(mAccountId, attachment.mId);\n        Uri contentUri = AttachmentProvider.resolveAttachmentIdToContentUri(getContentResolver(), attachmentUri);\n        if (mLoadAttachmentSave) {\n            try {\n                File file = createUniqueFile(Environment.getExternalStorageDirectory(), attachment.mFileName);\n                InputStream in = getContentResolver().openInputStream(contentUri);\n                OutputStream out = new FileOutputStream(file);\n                IOUtils.copy(in, out);\n                out.flush();\n                out.close();\n                in.close();\n                Toast.makeText(MessageView.this, String.format(getString(R.string.message_view_status_attachment_saved), file.getName()), Toast.LENGTH_LONG).show();\n                new MediaScannerNotifier(this, file, mHandler);\n            } catch (IOException ioe) {\n                Toast.makeText(MessageView.this, getString(R.string.message_view_status_attachment_not_saved), Toast.LENGTH_LONG).show();\n            }\n        } else {\n            try {\n                Intent intent = new Intent(Intent.ACTION_VIEW);\n                intent.setData(contentUri);\n                intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);\n                startActivity(intent);\n            } catch (ActivityNotFoundException e) {\n                mHandler.attachmentViewError();\n            }\n        }\n    }\n", "code2": "    @Override\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {\n        String path = request.getPathTranslated().substring(0, request.getPathTranslated().length() - request.getPathInfo().length()) + request.getServletPath() + request.getPathInfo();\n        File file = new File(path);\n        if (file.exists()) {\n            FileInputStream in = new FileInputStream(file);\n            IOUtils.copyLarge(in, response.getOutputStream());\n            in.close();\n        }\n    }\n", "label": 1, "substitutes": {"doFinishLoadAttachment": ["doFinishLoadAssachment", "doFinishLoadAttachachment", "doFinishShowDetached", "doFinishLoadAttention", "doFinishShowAttached", "doFinishShowAttention", "doFinishShowAttachment", "doFinishLoadDetached", "doFinishLoadDetention", "doFinishLoadAttached", "doFinishShowDetention", "doFinishLoadAttachached", "doFinishLoadAssention", "doFinishLoadAssached", "doFinishShowDetachment", "doFinishLoadDetachment", "doFinishLoadAttachention"], "attachmentId": ["detachedid", "attentionID", "atutationId", "attachmentById", "ATTociationKey", "attentionId", "attociationKey", "detachmentid", "atutationID", "attociationid", "attagramId", "attagramById", "attociationID", "attagramid", "attachmentName", "attachmentID", "attutationName", "attentionById", "detachedId", "atachmentName", "attachedById", "attgmentid", "atachmentID", "attociationById", "ATTachmentid", "ATTociationId", "atutationById", "attentionName", "detachedKey", "attgmentKey", "attachmentid", "detachmentKey", "attutationID", "atutationName", "ATTociationid", "ATTociationById", "attutationById", "ATTachmentId", "attachedId", "attociationId", "ATTachmentKey", "attachmentKey", "detachmentId", "attagramKey", "atachmentById", "ATTachmentById", "attutationId", "attociationName", "attgmentId", "attachedKey", "atachmentId", "attachedid"], "attachment": ["attached", "ATTached", "detacher", "attacher", "attachention", "addached", "attention", "detment", "contached", "ATTachment", "assention", "attachociation", "ATTention", "assacher", "attociation", "ATTacher", "detached", " attacher", " attached", "contachment", "attachaching", " attment", "attment", "detachment", "addaching", "attaching", "contment", "contacher", "association", "attachacher", "assachment", "attachachment", "addachment", "attachached", "addociation", "assaching", "assached"], "attachmentUri": ["attachmentOuri", "attachmentOURI", "attachmentURI", "attachmentupi", "attachmentUnri", "attachmentUnpi", "attachmentUtpi", "attentionUtpi", "attachmentTri", "attachmentOpi", "attachableOURI", "attentionUrid", "attachableOpi", "attachmentuRI", "attachmentUtrid", "attachmenturi", "attachmentTURI", "attentionUtRI", "attentionUtrid", "attachmentTuri", "attachmentUpi", "attachableUri", "attachmentTpi", "attentionUpi", "attachmentUURI", "attachableOuri", "attachableUURI", "attachableUuri", "attachmentUtRI", "attachmentOri", "attentionURI", "attachmentUnuri", "attentionUtri", "attachmentUtri", "attachableUpi", "attachmentUrid", "attentionUri", "attachmenturid", "attachableOri", "attachmentUuri", "attachmentUnURI"], "contentUri": ["contentUturi", "contentURres", "contentSric", "messageUric", "contentURuri", "contentures", "resourceURRI", "messageUtric", "contentUtris", "contentUruri", "messageUuri", "contenturi", "messageUtri", "contentUres", "contentUrri", "contentSri", "contentUtRI", "ContentUsris", "contentUris", "resourceURuri", "contentUtres", "contentUsuri", "contentUriri", "resourceURres", "messageUtiri", "contentUiri", "contentuuri", "resourceURI", "contentUtric", "contentuRI", "contentUsri", "contentUrid", "contentUrric", "ContentUri", "contentUsris", "contentUnris", "contentURri", "contentUtiri", "messageUturi", "contentUtrid", "ContentUrid", "resourceURri", "contentURI", "resourceUuri", "resourceUres", "resourceUri", "contentSuri", "messageUiri", "messageUri", "contentUtri", "contentUsrid", "ContentUuri", "contentUnri", "ContentUris", "ContentUsuri", "contentSiri", "contentURRI", "ContentUsrid", "ContentUsri", "contentUnuri", "contentUnrid", "contentUuri", "contentUric"], "file": ["local", "path", "picture", "dir", "h", "angle", "resource", "FILE", "disk", "channel", "ile", "ca", "File", "from", "output", "work", "filename", "rule", "content", "to", "port", "zip", "link", "f", "sf", "base", "play", "buffer", "table", "page", "format", "files", "entity", "init", "message", "user", "result", "db", "fp", "create", "upload", "tree", "name", "document", "template", "media", "line", "source", "le", "folder", "image", "save", "header", "il", "type", "pool"], "in": ["ic", "en", "io", "is", "inf", "up", "al", "cin", "from", "mi", " IN", "ini", "IN", "inc", "i", "inner", "inside", "ar", " din", "on", "play", "din", "isin", "input", "ind", "read", "gin", "ain", "In", "source", "and", "ins", "rin", "l", "it", "bin", "body", "sql", "con", "inn"], "out": ["os", "v", "serv", "put", "OU", "io", "print", "b", "conv", "stable", "nt", "obj", "aos", "output", "flush", "null", "to", "n", "i", "check", "write", "ex", "res", "auto", "outer", "o", "net", "screen", "oss", "all", "writer", "client", "sys", "OUT", "ao", "Out", "it", "g", "ou", "outs", "can", "co", "con", "w"], "intent": ["text", "ic", "prom", "activation", "asso", "term", "ence", "communication", "Activity", "event", "method", "context", "device", "service", "ink", "agent", "phrase", "concept", "complete", "inv", "ant", "automatic", "widget", "act", "intention", "venture", "query", "skill", "condition", "verbal", " Intent", "statement", "wordpress", "initial", "activate", "express", "entity", "voice", "q", "init", "ident", "activity", "action", "spirit", "alert", "man", "window", "xml", "json", "ent", "animate", "inst", "displayText", "continue", "ment", "entry"]}}
{"id1": "17630906", "id2": "324679", "code1": "    public static int[] sortAscending(float input[]) {\n        int[] order = new int[input.length];\n        for (int i = 0; i < order.length; i++) order[i] = i;\n        for (int i = input.length; --i >= 0; ) {\n            for (int j = 0; j < i; j++) {\n                if (input[j] > input[j + 1]) {\n                    float mem = input[j];\n                    input[j] = input[j + 1];\n                    input[j + 1] = mem;\n                    int id = order[j];\n                    order[j] = order[j + 1];\n                    order[j + 1] = id;\n                }\n            }\n        }\n        return order;\n    }\n", "code2": "    public boolean import_hints(String filename) {\n        int pieceId;\n        int i, col, row;\n        int rotation;\n        int number;\n        boolean byurl = true;\n        e2piece temppiece;\n        String lineread;\n        StringTokenizer tok;\n        BufferedReader entree;\n        try {\n            if (byurl == true) {\n                URL url = new URL(baseURL, filename);\n                InputStream in = url.openStream();\n                entree = new BufferedReader(new InputStreamReader(in));\n            } else {\n                entree = new BufferedReader(new FileReader(filename));\n            }\n            pieceId = 0;\n            lineread = entree.readLine();\n            tok = new StringTokenizer(lineread, \" \");\n            number = Integer.parseInt(tok.nextToken());\n            for (i = 0; i < number; i++) {\n                lineread = entree.readLine();\n                if (lineread == null) {\n                    break;\n                }\n                tok = new StringTokenizer(lineread, \" \");\n                pieceId = Integer.parseInt(tok.nextToken());\n                col = Integer.parseInt(tok.nextToken()) - 1;\n                row = Integer.parseInt(tok.nextToken()) - 1;\n                rotation = Integer.parseInt(tok.nextToken());\n                System.out.println(\"placing hint piece : \" + pieceId);\n                place_piece_at(pieceId, col, row, 0);\n                temppiece = board.get_piece_at(col, row);\n                temppiece.reset_rotation();\n                temppiece.rotate(rotation);\n                temppiece.set_as_hint();\n            }\n            return true;\n        } catch (IOException err) {\n            return false;\n        }\n    }\n", "label": 0, "substitutes": {"sortAscending": ["sortAsscend", "sortASCended", "sortAucended", "sortAsScend", "sortAucender", "sortAsscender", "sortAsScender", "sortASCender", "sortAsScended", "sortAucending", "sortAucend", "sortAScended", "sortAScend", "sortAscender", "sortAsscending", "sortAsscended", "sortAscended", "sortASCending", "sortAScending", "sortASCend", "sortAsScending", "sortAscend", "sortAScender"], "input": ["local", "sample", "alpha", "output", "content", "pattern", "base", "parse", "document", "comment", "source", "list", " inputs", "command", "cur", "filter", "p", "Input", "up", "in", "open", "bit", "query", "check", "img", "valid", "out", "raw", "get", "read", "data", "image", "ip", "um", "stream", "batch", "before", "start", "internal", "history", "current", "from", "view", "qa", "inner", "hidden", "accept", "form", "buffer", "error", "exec", "need", "xml", "it", "cache", "quick", "text", "file", "sequence", " Input", "context", "select", "inc", "feed", "initial", "config", "table", "q", "active", "focus", "array", "request"], "order": ["allow", "where", "search", "master", "address", "v", "force", "dir", "sequence", "show", "only", "store", "before", "test", "ordering", "count", "position", "after", "arr", "record", "rule", "orders", "here", "r", "index", "good", "ice", "Order", "rank", "are", "grade", "condition", "code", "ord", "ordered", "iter", "trace", "sort", "result", "page", "message", "q", "core", "create", "priority", "comment", "error", "over", "random", "direction", "memory", "or", "and", "use", "group", "array", "move", "der", "list", "cache", "info", "unit", "er", "cycle", "graph", "command"], "i": ["eni", "ti", "g", "v", "I", "zi", "ic", "at", "iq", "MI", "li", "p", "gi", "io", "is", "di", "ki", "t", "ii", "iat", "ity", "phi", "ri", "mi", "si", "iti", "index", "ini", "iu", "pi", "ci", "m", "ims", "cli", "f", "multi", "q", "init", "xi", "mm", "ie", "ind", "ij", "qi", "im", "ai", "ix", "sim", "l", "ip", "it", "bi", "hi", "ui", "info", "ori", " I", "ir", "ami", "y", "integer"], "j": ["js", "ji", "v", "pt", "at", "ret", "jj", "dj", "aj", "str", "by", "my", "b", "J", "obj", "z", "ion", "jet", "ja", "adj", "other", "r", "kid", "kj", "jo", "res", "opt", "je", "o", "oj", "job", "br", "jack", "note", "jump", "server", "bs", "out", "q", "rel", "og", "req", "user", "jit", "ind", "jc", "jac", "ij", "pr", "uj", "key", "jl", "el", "ix", "tr", "l", "window", "json", "g", "fr", "bj", "it", "next", "state", "er", "last", "y", "jp", "bot"], "mem": ["js", "mop", "mt", "my", "ame", "sm", "med", "slot", "mi", "met", "cpu", "mu", "sam", "alloc", "dim", "m", "ib", "md", "Mem", "ms", "buff", "req", "reg", "mm", " Mem", "lim", "tim", "memory", "dem", "use", "em", "sim", "sum", "mb", "cmd", "pool", "ram", "temp", "mat", "size"], "id": ["d", "rid", "bid", "ld", " fid", "tag", "orig", "fd", "mid", "uid", "med", "ids", "aid", "sid", "mi", "index", "kid", "red", "ad", " tid", "ID", "link", "md", "sd", "vid", "ident", "pid", "hd", "Id", "ide", "ind", "name", "oid", "rand", "key", "and", "use", "wid", "info", "tx", "jp"]}}
{"id1": "22560224", "id2": "1235538", "code1": "    public static String hashStringMD5(String string) throws NoSuchAlgorithmException {\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(string.getBytes());\n        byte byteData[] = md.digest();\n        StringBuffer sb = new StringBuffer();\n        for (int i = 0; i < byteData.length; i++) {\n            sb.append(Integer.toString((byteData[i] & 0xff) + 0x100, 16).substring(1));\n        }\n        StringBuffer hexString = new StringBuffer();\n        for (int i = 0; i < byteData.length; i++) {\n            String hex = Integer.toHexString(0xff & byteData[i]);\n            if (hex.length() == 1) hexString.append('0');\n            hexString.append(hex);\n        }\n        return hexString.toString();\n    }\n", "code2": "    public static String encrypt(final String pass) {\n        try {\n            final MessageDigest md = MessageDigest.getInstance(\"SHA\");\n            md.update(pass.getBytes(\"UTF-8\"));\n            return new String(Base64.encodeBase64(md.digest()));\n        } catch (final Exception e) {\n            throw new RuntimeException(\"No se pudo encriptar el password.\", e);\n        }\n    }\n", "label": 1, "substitutes": {"hashStringMD5": [" hashStringSM5", " hashStringMTHash", " hashBytesMTHash", " hashStringMT0", " hashStringMDHash", " hashStringMD0", " hashBytesMD5", " hashStringSHA0", " hashStringMT5", " hashBytesMD1", " hashStringSM0", " hashStringSHAHash", " hashBytesMD0", " hashStringSM1", " hashStringSHA5", " hashBytesMT0", " hashStringSHA1", " hashBytesMDHash", " hashStringMD1", " hashBytesMT1", " hashBytesMT5", " hashStringSMHash", " hashStringMT1"], "string": ["text", "address", "v", "function", "number", "file", "sequence", "site", "str", "print", "char", "test", "service", "strings", "filename", "content", "null", "ring", "host", "prefix", "buffer", "message", "result", "format", "s", "ident", "input", "name", "spec", "object", "comment", "data", "source", "value", "password", "array", "list", "setting", "sql", "space", "word"], "md": ["mc", "d", "dr", "pdf", "dir", "pd", "ld", "mt", "amd", "mod", "mode", "di", " MD", "sm", "nt", "de", "nd", "red", "det", "ad", "m", "down", "desc", "sd", "ms", "dd", "mand", "alg", "hd", "mm", "ind", "mk", "cd", "od", "dist", "bd", "add", "mn", "and", "dm", "Cmd", "der", "dh", "df", "mb", "cmd", "grad", "MD", "cond", " Md"], "byteData": [" byteDo", "worddata", "componentParts", " byteBytes", "ByteData", "ByteDat", "helloBytes", "componentData", "displayDo", "displayCount", "nodeForm", "seeBuffer", " byteBuffer", " byteParts", "byteParts", "seeForm", "nodeData", "viewDo", "ByteBytes", "byteDat", "wordDATA", " ByteLens", "phraseData", "byteForm", "byteLens", "nodeLens", "charDATA", "helloDat", "byteCount", " byteDATA", "helloData", "ByteParts", "ByteDo", "viewData", "displaydata", " ByteBuffer", "byteBuffer", "bytedata", "componentBytes", "componentBuffer", "seeLens", "viewdata", "viewCount", " byteCount", "phraseDo", "chardata", " ByteForm", "byteDATA", "charData", "seeData", "nodeBuffer", " bytedata", "byteDo", "phraseBytes", "wordData", "byteBytes", "displayData", "phraseDat", " ByteData", "helloDo", "ByteBuffer"], "sb": ["sq", "pb", "alph", "sw", "src", "nb", "bt", "b", "bg", "ws", "rb", "kb", "sg", "bb", "shell", "sam", "bash", "bh", "sa", "xb", "ssl", "sth", "ib", "sf", "web", "sc", "erb", "sp", "bs", "eb", "bsp", "soc", "sv", "bf", "zb", "cb", "mb", "bj", "sync", "gb", "sh", "SB", "lb"], "i": ["I", "iq", "point", "print", "conv", "ini", "cgi", "iy", "ci", "m", "base", "gu", "name", "qi", "list", "ix", "json", "ui", "this", "er", "y", "err", "v", "ic", "zi", "gi", "io", "z", "in", "\u0438", "phi", "oi", "ri", "mi", "c", "ex", "iu", "kj", "cli", "o", "set", "series", "client", "me", "chain", "ip", "ti", "batch", "li", "id", "my", "history", "ity", "si", "pi", "yi", "multi", "init", "ei", "ij", "im", "ai", "it", "bi", "hi", "ji", "any", "di", "ki", "remote", "ii", "j", "span", "ski", "uri", "q", "xi", "ie", "us", "g", "info"], "hexString": ["expSet", "exStatement", " hexScreen", "viewBuffer", "hexNumber", "httpScreen", "hexSocket", " hexStr", "hexBuffer", "serialText", "exList", " hexBuffer", "httpString", "hexText", "viewString", "hexSet", "alphaSite", "alphaString", "sexString", "expString", "expBuffer", "pexSocket", "pexStatement", " hexText", "serialString", "exSocket", "sexSocket", "serialBuffer", " hexNumber", "exBuffer", "hexStr", "alphaScreen", "viewNumber", "viewSet", " hexSet", "sexList", "exString", "httpSite", "expNumber", "pexString", "hexScreen", "exStr", "pexList", "alphaStr", "httpStr", "hexList", "hexStatement", "exText", "serialStr", "sexStatement", " hexSite", "hexSite"], "hex": ["aux", "sex", "cmp", "h", "des", "tex", "term", "zh", "pex", "cat", "rex", "print", "char", "hash", " Hex", "hz", "oct", "he", "ex", "ext", "rh", "ph", "html", "hw", "dump", "def", "form", "com", "comp", "buff", "raw", "xf", "exp", " ex", "hl", "x", "cont", " sex", "sv", "hp", "hello", "lit", "handle", "ip", "json", "hi", "tx", "full", "none", "prop", "sh"]}}
{"id1": "22441244", "id2": "2199604", "code1": "    public void send(org.hibernate.Session hsession, Session session, String repositoryName, int ideIdint, String to, String cc, String bcc, String subject, String body, Vector attachments, boolean isHtml, String charset, InternetHeaders headers, String priority) throws MailException {\n        try {\n            if (charset == null) {\n                charset = MimeUtility.javaCharset(Charset.defaultCharset().displayName());\n            }\n            if ((body == null) || body.trim().equals(\"\")) {\n                body = \" \";\n            }\n            Email email = null;\n            if (isHtml) {\n                email = new HtmlEmail();\n            } else {\n                email = new MultiPartEmail();\n            }\n            email.setCharset(charset);\n            Users user = getUser(hsession, repositoryName);\n            Identity identity = getIdentity(hsession, ideIdint, user);\n            InternetAddress _returnPath = new InternetAddress(identity.getIdeEmail(), identity.getIdeName());\n            InternetAddress _from = new InternetAddress(identity.getIdeEmail(), identity.getIdeName());\n            InternetAddress _replyTo = new InternetAddress(identity.getIdeReplyTo(), identity.getIdeName());\n            InternetAddress[] _to = MessageUtilities.encodeAddresses(to, null);\n            InternetAddress[] _cc = MessageUtilities.encodeAddresses(cc, null);\n            InternetAddress[] _bcc = MessageUtilities.encodeAddresses(bcc, null);\n            if (_from != null) {\n                email.setFrom(_from.getAddress(), _from.getPersonal());\n            }\n            if (_returnPath != null) {\n                email.addHeader(\"Return-Path\", _returnPath.getAddress());\n                email.addHeader(\"Errors-To\", _returnPath.getAddress());\n                email.addHeader(\"X-Errors-To\", _returnPath.getAddress());\n            }\n            if (_replyTo != null) {\n                email.addReplyTo(_replyTo.getAddress(), _replyTo.getPersonal());\n            }\n            if ((_to != null) && (_to.length > 0)) {\n                HashSet aux = new HashSet(_to.length);\n                Collections.addAll(aux, _to);\n                email.setTo(aux);\n            }\n            if ((_cc != null) && (_cc.length > 0)) {\n                HashSet aux = new HashSet(_cc.length);\n                Collections.addAll(aux, _cc);\n                email.setCc(aux);\n            }\n            if ((_bcc != null) && (_bcc.length > 0)) {\n                HashSet aux = new HashSet(_bcc.length);\n                Collections.addAll(aux, _bcc);\n                email.setBcc(aux);\n            }\n            email.setSubject(subject);\n            Date now = new Date();\n            email.setSentDate(now);\n            File dir = new File(System.getProperty(\"user.home\") + File.separator + \"tmp\");\n            if (!dir.exists()) {\n                dir.mkdir();\n            }\n            if ((attachments != null) && (attachments.size() > 0)) {\n                for (int i = 0; i < attachments.size(); i++) {\n                    ByteArrayInputStream bais = null;\n                    FileOutputStream fos = null;\n                    try {\n                        MailPartObj obj = (MailPartObj) attachments.get(i);\n                        File file = new File(dir, obj.getName());\n                        bais = new ByteArrayInputStream(obj.getAttachent());\n                        fos = new FileOutputStream(file);\n                        IOUtils.copy(bais, fos);\n                        EmailAttachment attachment = new EmailAttachment();\n                        attachment.setPath(file.getPath());\n                        attachment.setDisposition(EmailAttachment.ATTACHMENT);\n                        attachment.setDescription(\"File Attachment: \" + file.getName());\n                        attachment.setName(file.getName());\n                        if (email instanceof MultiPartEmail) {\n                            ((MultiPartEmail) email).attach(attachment);\n                        }\n                    } catch (Exception ex) {\n                    } finally {\n                        IOUtils.closeQuietly(bais);\n                        IOUtils.closeQuietly(fos);\n                    }\n                }\n            }\n            String mid = getId();\n            if (headers != null) {\n                Header xheader;\n                Enumeration xe = headers.getAllHeaders();\n                for (; xe.hasMoreElements(); ) {\n                    xheader = (Header) xe.nextElement();\n                    if (xheader.getName().equals(RFC2822Headers.IN_REPLY_TO)) {\n                        email.addHeader(xheader.getName(), xheader.getValue());\n                    } else if (xheader.getName().equals(RFC2822Headers.REFERENCES)) {\n                        email.addHeader(xheader.getName(), xheader.getValue());\n                    }\n                }\n            } else {\n                email.addHeader(RFC2822Headers.IN_REPLY_TO, \"<\" + mid + \".JavaMail.duroty@duroty\" + \">\");\n                email.addHeader(RFC2822Headers.REFERENCES, \"<\" + mid + \".JavaMail.duroty@duroty\" + \">\");\n            }\n            if (priority != null) {\n                if (priority.equals(\"high\")) {\n                    email.addHeader(\"Importance\", priority);\n                    email.addHeader(\"X-priority\", \"1\");\n                } else if (priority.equals(\"low\")) {\n                    email.addHeader(\"Importance\", priority);\n                    email.addHeader(\"X-priority\", \"5\");\n                }\n            }\n            if (email instanceof HtmlEmail) {\n                ((HtmlEmail) email).setHtmlMsg(body);\n            } else {\n                email.setMsg(body);\n            }\n            email.setMailSession(session);\n            email.buildMimeMessage();\n            MimeMessage mime = email.getMimeMessage();\n            int size = MessageUtilities.getMessageSize(mime);\n            if (!controlQuota(hsession, user, size)) {\n                throw new MailException(\"ErrorMessages.mail.quota.exceded\");\n            }\n            messageable.saveSentMessage(mid, mime, user);\n            Thread thread = new Thread(new SendMessageThread(email));\n            thread.start();\n        } catch (MailException e) {\n            throw e;\n        } catch (Exception e) {\n            throw new MailException(e);\n        } catch (java.lang.OutOfMemoryError ex) {\n            System.gc();\n            throw new MailException(ex);\n        } catch (Throwable e) {\n            throw new MailException(e);\n        } finally {\n            GeneralOperations.closeHibernateSession(hsession);\n        }\n    }\n", "code2": "    private static void unzipEntry(ZipFile zipfile, ZipEntry entry, File outputDir) throws IOException {\n        if (entry.isDirectory()) {\n            createDir(new File(outputDir, entry.getName()));\n            return;\n        }\n        File outputFile = new File(outputDir, entry.getName());\n        if (!outputFile.getParentFile().exists()) {\n            createDir(outputFile.getParentFile());\n        }\n        BufferedInputStream inputStream = new BufferedInputStream(zipfile.getInputStream(entry));\n        BufferedOutputStream outputStream = new BufferedOutputStream(new FileOutputStream(outputFile));\n        try {\n            IOUtils.copy(inputStream, outputStream);\n        } finally {\n            outputStream.close();\n            inputStream.close();\n        }\n    }\n", "label": 1, "substitutes": {"send": ["build", "submit", "apply", "post", "mail", "print", "msg", "export", "write", "security", "set", "message", "end", "get", "init", "sent", "push", "create", "parse", "transfer", "save", "add", "report", "execute", "Send", "reply"], "hsession": ["hhessions", "hspace", " HSession", "rssession", "hsettings", "HSsession", "rspace", "HSess", "hhettings", "hessions", "hship", "hession", "HSession", "hssession", "hsessions", "hhip", "rsess", "hhession", " HSess", "HSpace", "hsess", "rsession", " HSsession", "hettings", "HSettings", " HSpace", "HShip", "HSessions", "hhsession", "hhhip"], "session": ["ess", "lock", "parent", "store", "event", "context", "manager", "sid", "content", "view", "connection", "instance", "job", "set", "message", "name", "client", "document", "object", "password", "driver", "ession", "cache", "ip", "Session", "state", "account"], "repositoryName": ["reposositoryName", "repositoryData", "repoositoryName", "repositorName", "reposoryData", "repositoryname", "reposoryName", "reposositoryData", "reposositoryPath", "repoitoryname", "repositorPath", "repositableNAME", "repositorNAME", "repositoryTitle", "repoitoryName", "repositablename", "repositionNAME", "repoositoryNAME", "reposositoryname", "repoitoryNAME", "repositionPath", "repoositoryData", "repoositoryTitle", "repositorTitle", "repoitoryTitle", "repositoryPath", "repoitoryData", "reposoryNAME", "repositionName", "repositableData", "repositoryNAME", "repoositoryPath", "repositionTitle", "repoitoryPath", "reposositoryTitle", "repoositoryname", "reposositoryNAME", "repositableName", "reposoryname"], "ideIdint": ["ideidst", "IDEidint", "ideIDline", "ideDint", " ideThind", "ideIdINT", "ideInfoINT", "ideDINT", "IDEIdst", "ideThind", "ideIdentind", "ideIDno", " ideThint", "ideThline", "ideThint", "IDEIdINT", "ideIdind", "ideIdentno", "ideIdentint", "ideIDint", "ideIdentline", "IDEidst", "ideDst", " ideThline", "ideIdline", " ideThno", "ideIdno", "ideIdst", "ideidint", "ideidINT", "ideThno", "IDEidINT", "ideIDind", "ideInfost", " ideIdline", " ideIdind", "IDEIdint", " ideIdno", "ideInfoint"], "to": ["topic", "address", "contact", "tp", "site", "pro", "by", "t", "po", "toc", "st", "no", "phone", "route", "target", "company", "range", "eto", "auto", "tel", "o", "about", "ta", "client", "too", "TO", "addr", "top", "ato", "tr", "token", "pos", "tt", "To", "co", "os"], "cc": ["cv", "mc", "ico", "cmp", "fc", "ic", "cca", "CC", "ce", "toc", "ca", "cci", "ctrl", "control", "company", "cin", "cp", "cy", "cs", "cr", "ci", "cf", "ct", "cl", "sc", "ck", "cn", "cd", "cm", "ac", "cb", "rc", "ec", "cmd", "cloud", "tc", "co", "dc"], "bcc": [" bCC", "bck", "sbcc", "rbCC", " bcm", "rbcc", "cbCC", "vcc", "cbcc", "rbce", "rbcm", "sbck", "cbck", " bck", "vce", "sbcy", "bcy", "vck", "vcy", "rbck", "bcm", "rbcy", "bce", "sbce", "bCC", "cbcm"], "subject": ["text", "topic", "head", "description", "Subject", "id", "mail", "face", "filename", "content", "title", "host", "html", "security", "uri", "note", "form", "prefix", "message", "heading", "name", "template", "comment", "source", "metadata", "header", "author"], "body": ["text", "background", "head", "bytes", "description", "h", "binary", "post", "any", "back", "inline", "mail", "part", "b", "ODY", "ody", "no", "output", "other", "url", "shell", "content", "null", "query", "inner", "title", "zip", "code", "bh", "summary", "html", "Body", "base", "note", "padding", "params", "buffer", "message", "parts", "files", "name", "template", "object", "comment", "line", "hex", "data", "bill", "source", "report", "top", "response", "handle", "default", "json", "layout", "business", "news"], "attachments": ["attresses", "achmenttypes", "Attachresses", "attments", "achmentments", "attachresses", "atttypes", "Attachachment", "attachachment", "Attachtypes", "attachtypes", "Attachments", "achmentachment", "achmentresses"], "isHtml": ["isVtml", " isWhHTML", " isWhip", "isVhtml", " isWhtml", "isWhtml", "IsHttp", "isWhHTML", "isChhtml", "isHip", "ishtml", "IsHhtml", "ishap", " isHHTML", "isWhhtml", "ishttp", "isJtml", "isVip", "isHHTML", "isJap", "IsHtml", "isChip", "isChtml", "isChHTML", "ishhtml", "isHap", "isJhtml", "isJttp", "IsHap", "isVHTML", "isHhtml", " isHhtml", " isWhhtml", "isHttp", "isWhip", " isHip"], "charset": ["cherset", "charpetic", "chacterspace", "Charset", "charsET", "chippetter", "clarspace", "chatsec", "chippet", "CHarsets", "chARSpace", "charsetter", "charsett", "chippET", "quatsec", "chARSetter", "chippett", "chacterset", "channelsetic", "chactersets", "clerspace", "chersets", "quarsale", "chippale", "channelsET", "CHarsett", "chARSets", "charpett", "CHippets", "chatsetter", "CHarsET", "quatsale", "chARSET", "quarset", "charpetter", "clersetter", "chablesec", "chARSet", "clarsetter", "charsec", "CHarset", "chactersetter", "Charsetic", "charpET", "charpet", "clarsets", "ChARSet", "charsale", "chippec", "channelset", "clerset", "chippets", "Charsetter", "quarsec", "clarset", "ChARSET", "charsetic", "CHippett", "clersets", "charspace", "chersetter", "chatset", "chablesetter", "quatsetter", "CharsET", "ChARSetter", "charpets", "channelsetter", "chableset", "chatsale", "chARSetic", "CHippet", "CHippET", "cherspace", "charsets", "ChARSetic", "quarsetter", "quatset", "chablesale"], "headers": ["head", "dr", "members", "ors", "limits", "authors", "fields", "comments", "names", "users", " heads", " trailers", "params", "files", "codes", "relations", "ers", "lines", "keys", "details", "header", "metadata", "heads", "ppers", "ters", "types", "ilers"], "priority": ["flags", "description", "id", "level", "position", "properties", "context", " severity", "due", "phone", "company", "comments", "primary", "grade", "profile", "status", "title", "security", "prefix", "serial", " urgency", "password", "pos", "order", "state", "origin", "policy"], "email": ["fax", "search", "address", "sample", "contact", "description", "log", "echo", "ell", "et", "delete", "Email", "mail", "print", "oe", "test", "e", "event", "ome", "msg", "detail", "company", "ee", "model", "shell", "external", "view", "url", "output", "call", "office", "instance", "label", "ilo", "html", "console", "ssl", "link", "license", "initial", "server", "note", "example", "message", "result", "enter", "voice", "element", "database", "all", "document", "template", "object", "liner", "line", "die", "http", "comment", "reset", "report", "password", "el", "em", "response", "xml", "domain", "il", "ne", "er", "gmail", "entry"], "user": ["system", "match", "human", "by", "id", "used", "uid", "browser", "auth", "from", "username", "output", "manager", "owner", "users", "admin", "USER", "connection", "profile", "person", "result", "entity", "ident", "usr", "student", "client", "name", "util", "User", "me", "actor", "use", "login", "ip", "account", "usage", "usa", "author", "creator"], "identity": ["equator", "recognentity", "IDENTalty", "personificate", "personity", "primicate", "identitate", "presentularity", "identularity", "idularity", "primity", "IDENTentity", "IDENTality", "IDENTicate", "solidentity", "identiciary", "recognity", "IDENTifier", "IDENTITY", "IDENTitate", "identality", "idity", "primificate", "ententity", "IDENTiciary", "ethnicity", "idality", "IDENTularity", "instentity", "solidality", "equentity", "instity", "recognance", "instifier", "recognicate", "solidity", "identalty", "IDENTance", "ethnicitate", "personITY", "equity", "presentity", "entity", "identance", "identifier", "identicate", "IDENTity", "idententity", "instator", "personentity", "identificate", "primentity", "ethnicularity", "personicate", "entifier", "equalty", "presententity", "primance", "idiciary", "identator", "IDENTificate", "ethnicentity", "personiciary", "instularity", "entularity", "presentitate", "solidularity", "instalty", "identITY", "idITY", "IDENTator"], "_returnPath": ["_replyDir", "_returnTo", "setsaveTo", "_savePath", "_ReturnPath", "_retLocation", "_getDir", "_deletePoint", "_returnpath", "_retpath", "_retUrl", "_returnAddress", "_replyCode", "_requestName", "_errorpath", "_saveUrl", "_requestPoint", "_errorAddress", " _errorPath", "_replyPath", "setreturnpath", " _errorPoint", " _returnAddress", "setsavepath", "_returnPoint", "_returnLocation", "_errorName", " _errorAddress", "_getTo", "_returnUrl", " _errorName", "_errorPath", "_returnDir", "_retCode", "_resultPath", "_resultTo", " _returnPoint", "_retPoint", "_errorPoint", "_returnCode", "_getPath", "_deletePath", "_ReturnName", "_resultPoint", "_requestAddress", "setsaveUrl", "setreturnPath", "_ReturnAddress", "_getCode", "_retPath", "_ReturnPoint", " _returnName", "setreturnTo", "_requestPath", "_deleteTo", "_saveTo", "_returnName", "_errorLocation", "_retDir", "_errorUrl", "_retTo", "_resultLocation", "setreturnUrl", "_savepath", "_deletepath", "_errorTo", "setsavePath"], "_from": [" _about", " _form", "remlocal", "remfrom", "longreset", "_actor", "letfrom", " _reset", "_owner", "letsource", "_source", "longfrom", "letto", "longto", "_about", "_local", "remowner", "_author", "\tactor", "\tauthor", " _author", "_reset", "remaddr", "_addr", "longsource", "letabout", "\tform", " _source", "_form", " _actor", "\tfrom"], "_replyTo": ["_closeTo", "_ReplyTO", "_closeOf", "_backFrom", "_commentTo", "_returnTo", "_commentTO", "_ReplyOnly", "_commentLine", "_respondTo", "_responseOf", "_ReplyTo", "_returnFrom", "_returnTO", "_closeLine", "_responsePath", "_responseLine", "_ReplyPath", "_respondFrom", "_replyOf", "_replyLine", "_returnOnly", "_responseFrom", "_backPath", "_responseTo", "_ReplyFrom", "_backTo", "_commentOf", "_replyFrom", "_replyOnly", "_backTO", "_replyPath", "_respondTO", "_replyTO", "_closeTO", "_respondOnly", "_responseTO"], "_to": ["successtopic", "successsite", "successta", "prito", "prita", "_site", "pritopic", "successto", "_topic", "prisite", "_ta"], "_cc": ["_cca", " _cs", "_cs", " _subject", " _cca", "_subject"], "_bcc": ["_rck", "_rca", "_wca", "_rbca", "_rcc", "_rbcc", "_bca", "_rbck", "_bck", "_wck", "_bacc", "_rbacc", "_wacc", "_wcc", "_racc"]}}
{"id1": "12389873", "id2": "13565787", "code1": "    private void load() throws SQLException {\n        Connection conn = null;\n        Statement stmt = null;\n        try {\n            conn = FidoDataSource.getConnection();\n            conn.setAutoCommit(false);\n            stmt = conn.createStatement();\n            ClearData.clearTables(stmt);\n            stmt.executeUpdate(\"insert into Objects (ObjectId, Description) values (100, 'Living Thing')\");\n            stmt.executeUpdate(\"insert into Objects (ObjectId, Description) values (200, 'Inanimate Object')\");\n            stmt.executeUpdate(\"insert into Objects (ObjectId, Description) values (300, 'Dog')\");\n            stmt.executeUpdate(\"insert into Objects (ObjectId, Description) values (400, 'Sheltie')\");\n            stmt.executeUpdate(\"insert into Objects (ObjectId, Description) values (500, 'Eskimo')\");\n            stmt.executeUpdate(\"insert into Objects (ObjectId, Description) values (600, 'Person')\");\n            stmt.executeUpdate(\"insert into Objects (ObjectId, Description) values (700, 'Collar')\");\n            stmt.executeUpdate(\"insert into Objects (ObjectId, Description) values (800, 'Ball')\");\n            stmt.executeUpdate(\"insert into Objects (ObjectId, Description) values (401, 'Fido')\");\n            stmt.executeUpdate(\"insert into Objects (ObjectId, Description) values (501, 'Samantha')\");\n            stmt.executeUpdate(\"insert into Objects (ObjectId, Description) values (801, 'A collar')\");\n            stmt.executeQuery(\"select setval('objects_objectid_seq', 1000)\");\n            stmt.executeUpdate(\"insert into ClassLinkTypes (LinkName, LinkType) values ('hasa', 2)\");\n            stmt.executeUpdate(\"insert into ClassLinkTypes (LinkName, LinkType) values ('partof', 2)\");\n            stmt.executeUpdate(\"insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (100, 'isa', 1)\");\n            stmt.executeUpdate(\"insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (200, 'isa', 1)\");\n            stmt.executeUpdate(\"insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (300, 'isa', 100)\");\n            stmt.executeUpdate(\"insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (400, 'isa', 300)\");\n            stmt.executeUpdate(\"insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (500, 'isa', 300)\");\n            stmt.executeUpdate(\"insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (600, 'isa', 100)\");\n            stmt.executeUpdate(\"insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (700, 'isa', 200)\");\n            stmt.executeUpdate(\"insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (800, 'isa', 200)\");\n            stmt.executeUpdate(\"insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (401, 'instance', 400)\");\n            stmt.executeUpdate(\"insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (501, 'instance', 500)\");\n            stmt.executeUpdate(\"insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (801, 'instance', 800)\");\n            stmt.executeUpdate(\"insert into ObjectLinks (ObjectId, LinkName, LinkToObject) values (401, 'hasa', 801)\");\n            stmt.executeUpdate(\"insert into AttributeCategories (CategoryName) values ('color')\");\n            stmt.executeUpdate(\"insert into AttributeCategories (CategoryName) values ('weight')\");\n            stmt.executeUpdate(\"insert into AttributeCategories (CategoryName) values ('length')\");\n            stmt.executeUpdate(\"insert into Attributes (AttributeName, Category) values ('green', 'color')\");\n            stmt.executeUpdate(\"insert into Attributes (AttributeName, Category) values ('blue', 'color')\");\n            stmt.executeUpdate(\"insert into Attributes (AttributeName, Category) values ('light', 'weight')\");\n            stmt.executeUpdate(\"insert into Attributes (AttributeName, Category) values ('heavy', 'weight')\");\n            stmt.executeUpdate(\"insert into Attributes (AttributeName, Category) values ('short', 'length')\");\n            stmt.executeUpdate(\"insert into Attributes (AttributeName, Category) values ('long', 'length')\");\n            stmt.executeUpdate(\"insert into ObjectAttributes (ObjectId, AttributeName) values (401, 'light')\");\n            stmt.executeUpdate(\"insert into ObjectAttributes (ObjectId, AttributeName) values (401, 'short')\");\n            stmt.executeUpdate(\"insert into ObjectAttributes (ObjectId, AttributeName) values (801, 'blue')\");\n            stmt.executeUpdate(\"insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('LEFT-WALL', '1', 'AV+ | NP+', 1)\");\n            stmt.executeUpdate(\"insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('the', '1', 'D+', 1)\");\n            stmt.executeUpdate(\"insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('big', '1', 'ADJ+', 400)\");\n            stmt.executeUpdate(\"insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('dog', '1', '[@ADJ-] & [D-] & (S+ | DO- | PO- | NP-)', 700)\");\n            stmt.executeUpdate(\"insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('run', '1', '[S-] & AV- & [PREP+]', 800)\");\n            stmt.executeUpdate(\"insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('across', '1', 'PREP- & PO+', 800)\");\n            stmt.executeUpdate(\"insert into Dictionary (Word, SenseNumber, GrammarString, ObjectId) values ('street', '1', '[@ADJ-] & [D-] & (S+ | DO- | PO- | NP-)', 800)\");\n            stmt.executeUpdate(\"insert into AdjectivePrepositions (PrepositionName, ObjectId, LinkName) values ('with', 100, 'hasa')\");\n            stmt.executeUpdate(\"insert into AdjectivePrepositions (PrepositionName, ObjectId, LinkName) values ('in', 200, 'partof')\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'superlative', 1, 'good', 'best', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'superlative', 2, '*y', '*iest', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'superlative', 3, '*e', '*est', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'superlative', 4, '*', '*est', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'comparative', 1, 'good', 'better', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'comparative', 2, '*y', '*ier', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'comparative', 3, '*e', '*er', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'comparative', 4, '*', '*er', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'possessive', 1, '*s', '*s\\\\'', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'possessive', 2, '*', '*\\\\'s', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 1, 'be', 'being', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 2, '*Vy', '*Vying', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 3, '*c', '*cking', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 4, '*VVC', '*VVCing', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 5, '*VC', '*VCCing', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 6, '*ie', '*ying', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 7, '*e', '*ing', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'present perfect', 8, '*', '*ing', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 1, 'sing', 'sang', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 2, 'give', 'gave', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 3, 'swim', 'swam', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 4, 'have', 'had', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 5, 'run', 'ran', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 6, 'do', 'did', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 7, 'be', 'was', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 8, 'throw', 'threw', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 9, 'sleep', 'slept', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 10, '*c', '*cked', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 11, '*VVC', '*VVCed', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 12, '*VC', '*VCCed', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 13, '*y', '*ied', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 14, '*oe', '*oed', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 15, '*e', '*ed', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past', 16, '*', '*ed', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 1, 'sing', 'sung', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 2, 'give', 'given', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 3, 'swim', 'swum', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 4, 'have', 'had', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 5, 'do', 'done', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 6, 'be', 'been', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 7, 'sleep', 'slept', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 8, '*e', '*ed', FALSE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'past perfect', 9, '*', '*ed', FALSE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'first singular', 1, 'be', 'am', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'first singular', 2, 'have', 'have', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'first singular', 3, '*', '*', FALSE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'second singular', 1, 'be', 'are', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'second singular', 2, 'have', 'have', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'second singular', 3, '*', '*', FALSE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 1, 'be', 'is', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 2, 'have', 'has', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 3, 'do', 'do', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 4, '*ch', '*ches', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 5, '*sh', '*shes', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 6, '*x', '*xes', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 7, '*z', '*zes', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 8, '*Cy', '*Cies', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 9, '*s', '*ses', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 10, '*o', '*oes', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third singular', 11, '*', '*s', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'first plural', 1, 'be', 'are', FALSE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'first plural', 2, 'have', 'have', FALSE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'first plural', 3, '*', '*', FALSE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third plural', 1, 'be', 'are', FALSE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third plural', 2, 'have', 'have', FALSE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'third plural', 3, '*', '*', FALSE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 1, 'leaf', 'leaves', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 2, 'knife', 'knives', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 3, 'elf', 'elves', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 4, 'half', 'halves', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 5, 'loaf', 'loaves', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 6, 'shelf', 'shelves', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 7, 'wife', 'wives', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 8, 'person', 'people', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 9, 'deer', 'deer', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 10, 'child', 'children', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 11, '*Co', '*Coes', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 12, '*s', '*ses', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 13, '*ch', '*ches', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 14, '*sh', '*shes', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 15, '*x', '*xes', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 16, '*z', '*zes', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 17, '*Cy', '*Cies', TRUE)\");\n            stmt.executeUpdate(\"insert into LanguageMorphologies (LanguageName, MorphologyTag, Rank, Root, Surface, Used) values ('English', 'plural', 18, '*', '*s', TRUE)\");\n            stmt.executeUpdate(\"insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (1, '$N[.N]', 'D+', 100, 'money')\");\n            stmt.executeUpdate(\"insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (2, 'N/N/N', 'D+', 200, 'date')\");\n            stmt.executeUpdate(\"insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (3, '[/](C/)C', 'D+', 300, 'unix path')\");\n            stmt.executeUpdate(\"insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (4, '[A:](C\\\\\\\\)C', 'D+', 400, 'dos path')\");\n            stmt.executeUpdate(\"insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (5, 'N:N', 'D+', 500, 'time')\");\n            stmt.executeUpdate(\"insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (6, 'N.N.N.N', 'D+', 600, 'internet')\");\n            stmt.executeUpdate(\"insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (7, 'E(.E)', 'D+', 700, 'hostname')\");\n            stmt.executeUpdate(\"insert into WordClassifications (Rank, Pattern, GrammarString, ObjectId, Description) values (8, '{+-}N[.N]', 'D+', 800, 'number')\");\n            stmt.executeUpdate(\"insert into Pronouns (Pronoun, Person, Gender, Plural) values ('i', 1, 3, FALSE)\");\n            stmt.executeUpdate(\"insert into Pronouns (Pronoun, Person, Gender, Plural) values ('we', 1, 3, TRUE)\");\n            stmt.executeUpdate(\"insert into Pronouns (Pronoun, Person, Gender, Plural) values ('they', 3, 3, TRUE)\");\n            stmt.executeUpdate(\"insert into Pronouns (Pronoun, Person, Gender, Plural) values ('he', 3, 1, FALSE)\");\n            stmt.executeUpdate(\"insert into Pronouns (Pronoun, Person, Gender, Plural) values ('she', 3, 2, FALSE)\");\n            stmt.executeUpdate(\"insert into Pronouns (Pronoun, Person, Gender, Plural) values ('it', 3, 3, FALSE)\");\n            stmt.executeUpdate(\"insert into Pronouns (Pronoun, Person, Gender, Plural) values ('you', 2, 3, FALSE)\");\n            stmt.executeUpdate(\"insert into FrameSlots (SlotName) values ('actor')\");\n            stmt.executeUpdate(\"insert into FrameSlots (SlotName) values ('origin')\");\n            stmt.executeUpdate(\"insert into FrameSlots (SlotName) values ('destination')\");\n            stmt.executeUpdate(\"insert into FrameSlots (SlotName) values ('object')\");\n            stmt.executeUpdate(\"insert into FrameSlots (SlotName) values ('instrument')\");\n            stmt.executeUpdate(\"insert into FrameSlots (SlotName) values ('beneficiary')\");\n            stmt.executeUpdate(\"insert into FrameSlots (SlotName) values ('location')\");\n            stmt.executeUpdate(\"insert into Verbs (VerbName, SubjectSlot, IndirectObjectSlot, PredicateNounSlot) values ('throw', 'actor', 'destination', 'object')\");\n            stmt.executeUpdate(\"insert into Verbs (VerbName, SubjectSlot, IndirectObjectSlot, PredicateNounSlot) values ('melt', 'actor', '', '')\");\n            stmt.executeUpdate(\"insert into Verbs (VerbName, SubjectSlot, IndirectObjectSlot, PredicateNounSlot) values ('kill', 'actor', '', 'object')\");\n            stmt.executeUpdate(\"insert into AdverbPrepositions (PrepositionName, ObjectId, FrameSlot) values ('with', 200, 'instrument')\");\n            stmt.executeUpdate(\"insert into AdverbPrepositions (PrepositionName, ObjectId, FrameSlot) values ('at', 1, 'location')\");\n            stmt.executeUpdate(\"insert into Articles (ArticleName, Dereference) values ('the', 1)\");\n            stmt.executeUpdate(\"insert into Articles (ArticleName, Dereference) values ('a', 2)\");\n            stmt.executeUpdate(\"insert into Articles (ArticleName, Dereference) values ('an', 2)\");\n            stmt.executeUpdate(\"insert into GrammarLinks (LinkName, LinkType) values ('S', 1)\");\n            stmt.executeUpdate(\"insert into GrammarLinks (LinkName, LinkType) values ('PN', 2)\");\n            stmt.executeUpdate(\"insert into GrammarLinks (LinkName, LinkType) values ('DO', 3)\");\n            stmt.executeUpdate(\"insert into GrammarLinks (LinkName, LinkType) values ('IO', 4)\");\n            stmt.executeUpdate(\"insert into GrammarLinks (LinkName, LinkType) values ('PO', 5)\");\n            stmt.executeUpdate(\"insert into GrammarLinks (LinkName, LinkType) values ('NP', 6)\");\n            stmt.executeUpdate(\"insert into GrammarLinks (LinkName, LinkType) values ('AV', 7)\");\n            stmt.executeUpdate(\"insert into GrammarLinks (LinkName, LinkType) values ('LV', 8)\");\n            stmt.executeUpdate(\"insert into GrammarLinks (LinkName, LinkType) values ('PREP', 9)\");\n            stmt.executeUpdate(\"insert into GrammarLinks (LinkName, LinkType) values ('D', 10)\");\n            stmt.executeUpdate(\"insert into GrammarLinks (LinkName, LinkType) values ('ADJ', 11)\");\n            stmt.executeUpdate(\"insert into GrammarLinks (LinkName, LinkType) values ('ADV', 12)\");\n            stmt.executeUpdate(\"insert into GrammarLinks (LinkName, LinkType) values ('CONJ', 13)\");\n            stmt.executeUpdate(\"insert into GrammarLinks (LinkName, LinkType) values ('INTJ', 14)\");\n            stmt.executeUpdate(\"insert into GrammarLinks (LinkName, LinkType) values ('PA', 15)\");\n            stmt.executeUpdate(\"insert into GrammarLinks (LinkName, LinkType) values ('HV', 16)\");\n            stmt.executeQuery(\"select setval('instructions_instructionid_seq', 1)\");\n            int next = 2;\n            stmt.executeUpdate(\"insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) \" + \"values (3, 'throw', null, 0, null, null, null)\");\n            stmt.executeUpdate(\"insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) \" + \"values (3, 'test', null, 0, null, null, null)\");\n            stmt.executeUpdate(\"insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) \" + \"values (2, null, 'actor', 1, 'hasa', '300', '')\");\n            stmt.executeUpdate(\"insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) \" + \"values (2, null, 'instrument', 3, null, null, 'blue')\");\n            stmt.executeUpdate(\"insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) \" + \"values (1, null, null, 0, null, null, null)\");\n            stmt.executeUpdate(\"insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) \" + \"values (3, 'get', null, 0, null, null, null)\");\n            stmt.executeUpdate(\"insert into Instructions (Type, ExecuteString, FrameSlot, Operator, LinkName, ObjectId, AttributeName) \" + \"values (3, 'drop', null, 0, null, null, null)\");\n            stmt.executeUpdate(\"insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values (\" + (next + 2) + \", 1, \" + (next + 0) + \")\");\n            stmt.executeUpdate(\"insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values (\" + (next + 2) + \", 2, \" + (next + 1) + \")\");\n            stmt.executeUpdate(\"insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values (\" + (next + 3) + \", 1, \" + (next + 1) + \")\");\n            stmt.executeUpdate(\"insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values (\" + (next + 3) + \", 2, \" + (next + 0) + \")\");\n            stmt.executeUpdate(\"insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values (\" + (next + 4) + \", 1, \" + (next + 2) + \")\");\n            stmt.executeUpdate(\"insert into InstructionGroups (InstructionId, Rank, GroupInstruction) values (\" + (next + 4) + \", 2, \" + (next + 3) + \")\");\n            stmt.executeQuery(\"select setval('transactions_transactionid_seq', 1)\");\n            stmt.executeUpdate(\"insert into Transactions (InstructionId, Description) values (\" + (next + 4) + \", 'throw something')\");\n            stmt.executeUpdate(\"insert into Transactions (InstructionId, Description) values (\" + (next + 5) + \", 'get something')\");\n            stmt.executeUpdate(\"insert into Transactions (InstructionId, Description) values (\" + (next + 6) + \", 'drop something')\");\n            stmt.executeUpdate(\"insert into TransactionPreconditions (TransactionId, IfFrameSlot, Operator, LinkName, LinkFrameSlot, AttributeName, SatisfyTransactionId) \" + \"values (2, 'actor', 1, 'hasa', 'object', '', 3)\");\n            stmt.executeUpdate(\"insert into TransactionPreconditions (TransactionId, IfFrameSlot, Operator, LinkName, LinkFrameSlot, AttributeName, SatisfyTransactionId) \" + \"values (2, 'object', 4, '', '', 'heavy', 4)\");\n            stmt.executeUpdate(\"insert into TransactionSlots (TransactionId, FrameSlot, InstructionId) values (2, 'object', \" + (next + 6) + \")\");\n            stmt.executeUpdate(\"insert into TransactionSlots (TransactionId, FrameSlot, InstructionId) values (2, 'destination', \" + (next + 5) + \")\");\n            stmt.executeQuery(\"select setval('verbtransactions_verbid_seq', 1)\");\n            stmt.executeUpdate(\"insert into VerbTransactions (VerbString, MoodType, TransactionId) values ('throw', 2, 2)\");\n            stmt.executeUpdate(\"insert into VerbConstraints (VerbId, FrameSlot, ObjectId) values (2, 'object', 200)\");\n            stmt.executeUpdate(\"update SystemProperties set value = 'Play Data' where name = 'DB Data Version'\");\n            conn.commit();\n        } catch (SQLException e) {\n            if (conn != null) conn.rollback();\n            throw e;\n        } finally {\n            if (stmt != null) stmt.close();\n            if (conn != null) conn.close();\n        }\n    }\n", "code2": "    public static String encryptPassword(String plainPassword) {\n        StringBuffer sb = new StringBuffer();\n        try {\n            MessageDigest messageDigest = MessageDigest.getInstance(\"MD5\");\n            messageDigest.update(plainPassword.getBytes());\n            byte[] digestBytes = messageDigest.digest();\n            String hex = null;\n            for (int i = 0; i < digestBytes.length; i++) {\n                hex = Integer.toHexString(0xFF & digestBytes[i]);\n                if (hex.length() < 2) sb.append(\"0\");\n                sb.append(hex);\n            }\n        } catch (Exception ex) {\n            System.out.println(ex.getMessage());\n        }\n        return new String(sb);\n    }\n", "label": 0, "substitutes": {"load": [" startup", " recover", " cleanup", " refresh", " reload", "construct", " read", " build", " scan", " Init", " find", " test", " search", "insert", " ping", "init", " fill", " register", " destroy", "save", " parse", " ingest", " dump", "execute", " construct", " validate", " fetch"], "conn": ["ln", "mc", "Con", "cur", "pt", "ctr", "en", "mt", "gate", "obj", "Conn", "nt", "conv", "dn", "pg", "open", "conf", "Connection", "comm", "cp", "ctx", "c", "act", "n", "pas", "connection", "cc", "close", "ns", "col", "rel", "ct", "ann", "ens", "connect", "com", "cn", "wr", "ch", "cfg", "db", "cert", "ds", "yn", "client", "die", "nc", "mn", "enc", "pen", "cb", "coll", "cmd", "org", "co", "con"], "stmt": [" stgt", "constmt", "stmb", "stoprm", "puttab", "strmn", " ststat", "histgt", "Stgr", "stmg", "osttab", "estmg", "stopmm", "restgt", "stmem", "ostgt", " sttry", " stmb", "ostolt", "estmb", "strm", "STMT", "staddr", "styMT", "sttry", "istMT", "Stmt", "stackpt", "Stgt", " StMT", "STgt", "stackgt", "stacktab", "Stmb", "restpt", "stolt", "ostpt", "resttx", "sttr", "stm", "styaddr", " staddr", "estm", "restmt", "Stmm", "ostgr", "stmsg", "puttx", "Stmem", "istgt", "stytx", "stcmd", "stackMT", " stm", " supersttr", "sttx", "constm", "stopmn", " superstMT", "stackmt", "istmt", "stymb", "stygt", "strstat", "stst", " Sttr", " stmem", "ostmem", " stmm", "putmp", "ostrm", "ostmid", " stmp", " stpt", "putMT", "STmt", " sttr", "stackolt", " superstm", "restmg", "histmt", "ostmm", "strmt", "sttab", "histtry", " stmg", "STmsg", "stackmm", "StMT", " sttx", "stgt", "stMT", "stymsg", "stpt", "stymt", "constst", " Stmt", "estmm", "ststat", " stmsg", "ostmt", "stmid", "Stmsg", "restgr", "stmn", " stmid", " stgr", "Stm", "Sttry", "putolt", " stMT", "STtx", "histcmd", "stymg", "restMT", " superstmn", " stcmd", "stmp", " strm", " superstmt", "stopmt", "restaddr", "restmm", " stolt", "Stcmd", "estgr", "stym", " Stm", "stymem", "esttx", "estmt", "ostmn", "strmg", "putmt", "stackmid", "estgt", "STmb", "restmp", " superststat", " stmn", "stmm", " stst", "stgr", "Stst", "putmm", "constMT", " superstmg"]}}
{"id1": "14820302", "id2": "18114701", "code1": "    protected void innerProcess(ProcessorURI curi) throws InterruptedException {\n        Pattern regexpr = curi.get(this, STRIP_REG_EXPR);\n        ReplayCharSequence cs = null;\n        try {\n            cs = curi.getRecorder().getReplayCharSequence();\n        } catch (Exception e) {\n            curi.getNonFatalFailures().add(e);\n            logger.warning(\"Failed get of replay char sequence \" + curi.toString() + \" \" + e.getMessage() + \" \" + Thread.currentThread().getName());\n            return;\n        }\n        MessageDigest digest = null;\n        try {\n            try {\n                digest = MessageDigest.getInstance(SHA1);\n            } catch (NoSuchAlgorithmException e1) {\n                e1.printStackTrace();\n                return;\n            }\n            digest.reset();\n            String s = null;\n            if (regexpr != null) {\n                s = cs.toString();\n            } else {\n                Matcher m = regexpr.matcher(cs);\n                s = m.replaceAll(\" \");\n            }\n            digest.update(s.getBytes());\n            byte[] newDigestValue = digest.digest();\n            curi.setContentDigest(SHA1, newDigestValue);\n        } finally {\n            if (cs != null) {\n                try {\n                    cs.close();\n                } catch (IOException ioe) {\n                    logger.warning(TextUtils.exceptionToString(\"Failed close of ReplayCharSequence.\", ioe));\n                }\n            }\n        }\n    }\n", "code2": "    public InputSource resolveEntity(String publicId, String systemId) {\n        String resolved = getResolvedEntity(publicId, systemId);\n        if (resolved != null) {\n            try {\n                InputSource iSource = new InputSource(resolved);\n                iSource.setPublicId(publicId);\n                URL url = new URL(resolved);\n                InputStream iStream = url.openStream();\n                iSource.setByteStream(iStream);\n                return iSource;\n            } catch (Exception e) {\n                catalogManager.debug.message(1, \"Failed to create InputSource (\" + e.toString() + \")\", resolved);\n                return null;\n            }\n        }\n        return null;\n    }\n", "label": 0, "substitutes": {"innerProcess": [" doProcess", " inlineHandle", " innerRun", " doRun", " inlineWork", "internalProcess", "internalRun", " doWork", " inlineRun", "internalWork", " innerHandle", " inlineProcess", " doHandle", " innerWork", "internalHandle"], "curi": [" cris", "cpri", "CURI", "ctURI", "contumi", " ciri", "gcuri", "cris", "ccris", "mcuri", " curl", "ccumi", "Curl", "cturi", "mciti", "cpuri", "rcui", " cui", "gcdu", "pcuri", "cri", "lciri", "curl", "pcpu", " cdu", " cURI", "rcuri", "Cri", "cpu", "mcri", "rcdu", " citi", "cpiri", "cdu", "contdu", "cui", "ctri", "vcris", "ctiti", "ccui", " cri", "lcuri", "citi", "mcURI", "cumi", " cpu", "Ciri", "lcURI", "rcumi", "gcumi", "cURI", "vcui", "contpu", "vcumi", "ccuri", "lcri", "cpurl", "vcuri", " cumi", "gcui", "pcumi", "ciri", "conturi", "pcdu", "Curi"], "regexpr": ["regexexpr", "revrepr", "cregexexpr", "regexPr", "reactp", "Regexpr", "regexpre", "Regexfr", "reactpr", "reacePr", "remapr", "rentaxpre", "revelopPR", "cregexp", "reroxexpr", "rentaxpr", "regexp", "rentaxPR", "reveloppre", "reroxpr", "revreexpr", "regexPR", "rentaxexpr", "revrePr", "Regexexpr", "frentaxPR", "reacepr", "cregexpr", "frentaxpre", "reveloppr", "reaceexpr", "revelopexpr", "fregexPR", "remaPR", "reroxfr", "frentaxexpr", "reroxp", "reactexpr", "fregexpr", "fregexexpr", "fregexpre", "Regexp", "remapre", "reacep", "regexfr", "frentaxpr", "remaexpr", "cregexPr", "revrep", "reactfr"], "cs": ["mc", "js", "cms", "Cs", "ks", "cos", "fc", "ctr", "vs", "ics", "ats", "cer", "ws", "wcs", "ls", "hs", "cons", "cks", "gs", "cp", "rs", "c", "ts", "ctx", "res", "caps", "cc", "ces", "csv", "fs", "ns", "qs", "cf", "ps", "sc", "ms", "acs", "bs", "ck", "cn", "cus", "cd", "CS", "nc", "sts", "aches", "pc", "rc", "tc", "css", "gc", "ss", "acts", "cas"], "digest": ["digested", " digEST", "Digse", "Digested", "hashEST", "hashse", "mixested", "DigEST", "dest", "Digest", "hashester", "digum", "displayEST", "diger", "Diger", "displayester", " digested", " diger", "Digester", "digEST", "displayse", "Digist", " digester", "columnum", "dse", "mixest", "mixist", "hashest", "signested", " digist", " digum", "dist", "Digum", " digse", "signist", "digist", "digse", "columnist", "mixse", "displayest", "displayer", "der", "displayested", "signest", "digester", "columnest", "signse"], "s": ["space", "js", "sq", "bytes", "h", "p", "abs", "str", "ats", "prints", "b", "is", "eps", "e", "t", "ws", "S", "ls", "hs", "gs", "rs", "c", "ts", "n", "sam", "sol", "has", "https", "ims", "ns", "fs", "es", "ps", "ms", "bs", "sb", "sql", "reads", "its", "ds", "services", "sts", "sv", "ins", "less", "ss", "qs", "gets"], "m": ["mac", "d", "mc", "v", "perm", "p", "mt", "mo", "b", "t", "sm", "managed", "esm", "nm", "mr", "met", "n", "mu", "i", "mem", "vm", "md", "f", "tm", "ms", "ma", " M", "rm", "M", "mm", "om", "cm", "me", "dm", "em", "l", "gm"], "newDigestValue": ["newDigseValues", "newDigestedV", "newdigestValue", "newdigistValue", "newdigestedVal", "newDigseVal", "newdigestVal", "newdigestData", "newdigestedValues", "newDigestData", "newDigestV", "newDigistValue", "newdigestValues", "newDigestedValue", "newDigestedData", "newDigumentVal", "newDigumentV", "newDigestedValues", "newDigseData", "newDigistVal", "newDigestValues", "newDigumentValue", "newdigestV", "newDigestedVal", "newdigestedValue", "newDigumentValues", "newdigistVal", "newdigestedV", "newDigestVal", "newdigistData", "newDigistData", "newDigseValue", "newDigseV"]}}
{"id1": "7872659", "id2": "16590954", "code1": "    private static boolean genCustRatingFileAndMovieIndexFile(String completePath, String masterFile, String CustRatingFileName, String MovieIndexFileName) {\n        try {\n            File inFile = new File(completePath + fSep + \"SmartGRAPE\" + fSep + masterFile);\n            FileChannel inC = new FileInputStream(inFile).getChannel();\n            File outFile1 = new File(completePath + fSep + \"SmartGRAPE\" + fSep + MovieIndexFileName);\n            FileChannel outC1 = new FileOutputStream(outFile1, true).getChannel();\n            File outFile2 = new File(completePath + fSep + \"SmartGRAPE\" + fSep + CustRatingFileName);\n            FileChannel outC2 = new FileOutputStream(outFile2, true).getChannel();\n            int fileSize = (int) inC.size();\n            int totalNoDataRows = fileSize / 7;\n            ByteBuffer mappedBuffer = inC.map(FileChannel.MapMode.READ_ONLY, 0, fileSize);\n            int startIndex = 1, count = 0;\n            short currentMovie = 1;\n            while (mappedBuffer.hasRemaining()) {\n                count++;\n                short movieName = mappedBuffer.getShort();\n                int customer = mappedBuffer.getInt();\n                byte rating = mappedBuffer.get();\n                if (movieName != currentMovie) {\n                    ByteBuffer outBuf1 = ByteBuffer.allocate(10);\n                    outBuf1.putShort(currentMovie);\n                    outBuf1.putInt(startIndex);\n                    outBuf1.putInt(count - 1);\n                    outBuf1.flip();\n                    outC1.write(outBuf1);\n                    currentMovie = movieName;\n                    startIndex = count;\n                }\n                ByteBuffer outBuf2 = ByteBuffer.allocate(5);\n                outBuf2.putInt(customer);\n                outBuf2.put(rating);\n                outBuf2.flip();\n                outC2.write(outBuf2);\n            }\n            ByteBuffer endOfIndexFile = ByteBuffer.allocate(10);\n            endOfIndexFile.putShort(currentMovie);\n            endOfIndexFile.putInt(startIndex);\n            endOfIndexFile.putInt(100480506);\n            endOfIndexFile.flip();\n            outC1.write(endOfIndexFile);\n            outC1.close();\n            outC2.close();\n            return true;\n        } catch (IOException e) {\n            System.err.println(e);\n            return false;\n        }\n    }\n", "code2": "    public void createJAR(String fileString, String ext) {\n        try {\n            File file = new File(fileString);\n            int i = fileString.lastIndexOf(java.io.File.separator);\n            String dir = fileString.substring(0, i + 1);\n            if (ext.matches(\"jar\")) {\n                jarFile = new File(getClass().getClassLoader().getResource(\"jsdviewer.jar\").toURI());\n                java.io.FileOutputStream fstrm = new java.io.FileOutputStream(file);\n                FileChannel in = (new java.io.FileInputStream(jarFile)).getChannel();\n                FileChannel out = fstrm.getChannel();\n                in.transferTo(0, jarFile.length(), out);\n                in.close();\n                out.close();\n            } else {\n                file.mkdir();\n            }\n            File.umount(file);\n            File temp = new File(dir + \"document.jsd\");\n            FileOutputStream fstrm2 = new FileOutputStream(temp.getCanonicalPath());\n            ostrm = new ObjectOutputStream(fstrm2);\n            ostrm.writeObject(doc);\n            ostrm.flush();\n            ostrm.close();\n            File.umount();\n            File docFile = new File(file.getCanonicalPath() + java.io.File.separator + \"document.jsd\");\n            File.cp_p(temp, docFile);\n            File.umount();\n            temp.delete();\n            File.umount(file);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n", "label": 1, "substitutes": {"genCustRatingFileAndMovieIndexFile": [" genCustRatingFileAndMovieVersionfile", " genCustRatingFileAndVideoindexFiles", " genCustRatingFileAndVideoIndexFile", " genCustRatingFileAndMovieVersionFile", " genCustRatingFileAndMovieIndexfile", " genCustRatingFileAndVideoIndexfile", " genCustRatingFileAndVideoindexFile", " genCustRatingFileAndMovieVersionFiles", " genCustRatingFileAndMovieindexTable", " genCustRatingFileAndVideoindexfile", " genCustRatingFileAndMovieIndexFiles", " genCustRatingFileAndVideoIndexTable", " genCustRatingFileAndMovieIndexTable", " genCustRatingFileAndMovieindexFile", " genCustRatingFileAndVideoindexTable", " genCustRatingFileAndVideoIndexFiles", " genCustRatingFileAndMovieindexfile", " genCustRatingFileAndMovieVersionTable", " genCustRatingFileAndMovieindexFiles"], "completePath": ["CompleteLocation", " completeLocation", "CompleteNow", "pleteLocation", "CompleteDirectory", "completeRoot", "pleteScript", " completeDir", "CompletePath", "COMPLEPath", "totalRoot", "CompleteDir", "totalPod", "completeNow", "completeProject", " completesPath", "COMPLEDir", " completesLocation", "completeLog", "pletionProject", "totalLocation", "CompleteProject", "pletePath", "pleteProject", "pleteDir", "pletionDir", " completeDirectory", "completeLocation", "completePod", "COMPLELog", "fullLocation", " completesDirectory", " completesDir", "completeScript", "completeDir", "fullPod", "fullPath", "pletePod", "pletionPath", "CompleteLog", "pleteRoot", "pleteLog", "CompleteScript", "pletionNow", "pleteNow", "completeDirectory", "COMPLEScript", "totalPath", "fullRoot"], "masterFile": ["MasterFilename", " masterFilename", "currentPath", "masterfile", "MasterName", "managerFilename", "Masterfile", "completeName", "masterName", "MasterFile", "managerfile", "managerPath", " masterPath", "managerFile", "MasterPath", " masterfile", "currentName", "masterPath", "currentFile", "completefile", "masterFilename", "currentfile", "completeFile"], "CustRatingFileName": ["CustRankFileType", "CustRatingFieldInfo", "CustRatingFilesname", "CustRatingTableSet", "CustRatingFilenameNames", "CustRatingFieldType", "CustRatingTableType", "CustRatingTableInfo", "CustRatingfileType", "CustRatingFileInfo", "CustRatingFilesType", "CustRatingfileNames", "CustRankFilesType", "CustRatingFilesName", "CustRatingFilesInfo", "CustRatedfileSet", "CustRatingfileName", "CustRankFileInfo", "CustRatingFilenameType", "CustRatedFileNames", "CustRatingFilename", "CustRatedFileType", "CustRatingTablename", "CustRatingFilenameName", "CustRatedfileName", "CustRankFileName", "CustRankFilesName", "CustRatingFilenameSet", "CustRatingFileNames", "CustRankFilesname", "CustRatingFieldName", "CustRatingFieldname", "CustRatingTableNames", "CustRatingfileSet", "CustRatedFileName", "CustRankFilename", "CustRatedfileType", "CustRatedfileNames", "CustRatedFileSet", "CustRankFilesInfo", "CustRatingTableName", "CustRatingFileSet", "CustRatingFileType"], "MovieIndexFileName": ["MovieIndexFieldName", "MovieIndexFieldNames", "MovieIndexFILENumber", "MovieindexfileKey", "MovieIndexfileName", "MovieIndexTableKey", "MovieindexfileType", "MovieIndexfileNames", "MovieindexFileNames", "MovieIndexFileNames", "MovieIndexFILEName", "MovieindexFileKey", "MovieIndexFileNumber", "MovieindexFileName", "MovieindexfileNumber", "MovieIndexTableType", "MovieindexfileNames", "MovieIndexfileNumber", "MovieIndexFILENames", "MovieIndexFileKey", "MovieIndexFieldKey", "MovieIndexFILEType", "MovieIndexTableName", "MovieindexFileType", "MovieIndexfileType", "MovieIndexFieldType", "MovieIndexFileType", "MovieIndexTableNames", "MovieindexfileName", "MovieindexFileNumber", "MovieIndexfileKey"], "inFile": ["inFILE", "outC", "localFILE", "outF", "localfile", " infile", "outfile", " inFILE", "inF", "infile", "INFILE", "INC", "INF", "INFile", "INfile", "localFile", " inF", "outFile", "localC"], "inC": ["inCS", "intR", " inL", "inG", "outC", "inCL", " outC", "inCI", "inputFile", "iCS", " inR", "iCI", "outF", " inCS", "inputG", "intCS", " inG", "iR", "iC", "outG", "outL", "inF", " outL", " inCL", "inputC", "intC", " inCI", "intCI", "inR", "inL", " inF", "outFile", " outCL", "outCL", " outF", "inputF"], "outFile1": ["outFILE2", "outputPage9", "outputFile9", "outputFileOne", "outFile0", "outPage0", "outputPage1", "outfile1", "outPageOnce", "outPage1", "outFile6", "outfile2", "outFileOnce", "outChannelOne", "outFILE6", " outfile2", " outfile1", "outputPageOnce", " outfile6", " outfile0", "outputFileOnce", " outFile6", "outFileOne", "outChannel9", "outFILE0", "outputFile1", "outPage2", " outFile0", "outPageOne", "outChannel1", "outFILE1", "outFile9", "outPage6", "outputPageOne", "outChannelOnce", "outfile0", "outfile6", "outPage9"], "outC1": ["outROne", "outC0", "inFile2", "inC2", "outP2", "outR3", "inC3", "outP3", "outR1", "outC3", "inCOne", "outFileOne", "outCB2", "outR2", "inC1", "outCOne", "outPOne", "outc2", "outCB1", "outCB0", "outP1", "outc3", "outFile3", "outc0", "outCB3", "inFile1", "outc1", "inFile3", "inFileOne", "inC0"], "outFile2": ["outFile0", "outfile3", "outfile1", "exFile3", " outFile02", "outfile2", "outTableTwo", "outF3", "exChannel2", "outF1", "exChannel3", "outF2", "outfile02", "outTable3", "outChannel2", " outFile3", "outF0", "outChannel1", "outTable02", "outTable2", "outFile3", "outChannel3", "exChannel0", "exFile2", "outFileTwo", "exFile0", "outChannel0", "outFile02", "exChannel1", "outfile0", "exFile1", " outFileTwo", "outfileTwo"], "outC2": ["outB2", "outCTwo", "OutC4", "outC22", "outM22", "outS22", "outE1", "outBTwo", "allCTwo", "outR3", "outMTwo", "outB3", "outR4", "allB3", "OutC1", "allC2", "outSTwo", "outR1", "outC3", "OutR3", "outS3", "outM2", "OutR1", "OutR4", "allB22", "outM3", "allBTwo", "outC4", "outR2", "OutC2", "allC22", "outE4", "allC3", "allB2", "outE2", "OutR2", "outS2", "outE3", "outB22", "OutC3"], "fileSize": ["byteLength", "issueSIZE", " fileLength", "byteSize", "issueName", "baseCount", " fileCount", "baseSIZE", "FileCount", "fileLength", "fileSIZE", "baseName", "FileLength", "byteName", "byteSIZE", " fileSIZE", "FileName", " fileName", "fileName", "FileSIZE", "baseSize", "fileCount", "FileSize", "issueSize", "issueLength"], "totalNoDataRows": ["totalNoDataBoles", "totalNoDataSloles", "totalNodataRecoles", "totalNoDataRecoles", "totalNodataRows", "totalNodataRocks", "totalNoDataBues", "totalNodataRecocks", "totalNoDataBocks", "totalNodataRues", "totalNodataRecows", "totalNodataRoles", "totalNoDataSlues", "totalNodataRecues", "totalNoDataRecows", "totalNoDataRocks", "totalNoDataSlows", "totalNoDataBows", "totalNoDataRues", "totalNoDataRecues", "totalNoDataRoles", "totalNoDataSlocks", "totalNoDataRecocks"], "mappedBuffer": [" mappedQueue", "mapedBuffer", "mappedFB", "mmappedQueue", "mressedCallback", "MappedData", "mattedBB", " mapedFB", "mapedData", "mappedData", "mmappingbuffer", "mmappingBuff", " mapperCounter", " mapperBuffer", "mapperBB", "matchedBuff", "maphBuff", "MapperBuff", "MapedBB", "mappedCallback", " mapperQueue", "maphBuffer", " mapedCallback", "mressedFB", "MapedBuffer", "MappedBuff", "mappedCounter", "mappedQueue", "mappingBuff", "mapperBuff", "mappingBuffer", "mapperQueue", "mapBuffer", "MappedBB", " mappedCounter", "mressedBuff", "mappedbuffer", "mattedBuffer", "maphFB", "mapBB", "mapedbuffer", "mapedBuff", "mmappingQueue", "mappingQueue", "mattedBuff", "mappingData", "mapedBB", " mapedBuff", " mapedBuffer", "mappedBuff", " mapperBuff", "mapedQueue", "mmappedBuffer", "MapedBuff", "mapperBuffer", "mattedData", "mappingbuffer", "matchedQueue", "mapedFB", "MappedBuffer", " mappedCallback", " mappedFB", "mmappedBuff", "mapperbuffer", "matchedCounter", " mappedBuff", "mmappingBuffer", "MapperBB", "mappingCounter", "matchedBuffer", "maphCallback", "mapBuff", "mappingBB", "MapperBuffer", "mappedBB", "mressedBuffer", "mapedCallback", "MapedData", "mapperCounter", "mmappedbuffer"], "startIndex": [" startPoint", "Startindex", "startPoint", "endIndex", "currentPoint", "endIter", " startPage", " startPosition", " startindex", "endPage", "StartIndex", "startInd", "StartPos", "firstInd", "firstPosition", "currentIndex", "StartPosition", "firstindex", "initIndex", "StartIter", "StartPoint", "startPosition", "StartInd", "startPos", "firstIndex", "initPosition", "startPage", "currentPos", " startInd", " startPos", "initindex", "currentPosition", "startindex", " startIter", "startIter", "endPosition", "StartPage"], "count": ["created", "force", "batch", "number", "ctr", "first", "ount", "amount", "id", "process", "length", "start", "num", "cast", "current", "total", "limit", "more", "conf", "max", "call", "index", "c", "act", "n", "i", "check", "category", "code", "status", "counter", "result", "page", "found", "user", "core", "ind", "name", "Count", "last", "add", "mount", "list", "coll", "sum", "depth", "cloud", "order", "state", "next", "continue", "info", "find", "type", "now", "con", "size"], "currentMovie": ["primaryVideo", "reportedMovie", " currentImage", "currentlyMonster", " currentMouse", "currentImage", "currentDate", "currentMedia", "presentImage", "firstHero", "presentMovie", "activeVideo", " currentMonster", "primaryDate", " currentPlayer", "currentMouse", " currentMusic", "reportedMedia", "currentVideo", " currentSpider", "firstMonster", "reportedHero", "firstVideo", "presentMusic", "currentHero", "firstDate", "currentlyDate", "currentlySpider", "activePlayer", "reportedImage", "reportedMouse", "firstMedia", "firstMouse", "firstMovie", "currentlyMovie", "currentSpider", "activeMovie", "presentHero", "primaryMovie", "activeSpider", "reportedMusic", "currentMusic", "currentPlayer", " currentVideo", "currentMonster", "currentlyPlayer", " currentMedia", "primaryHero", "currentlyHero", "currentlyVideo", " currentHero"], "movieName": ["movieType", "filmname", "httpName", " movieType", "movieNAME", "ovieName", "httpname", "mpegname", "oviename", "ovieNAME", "mpegName", "MovieName", "monsterNAME", "movieTitle", "filmGroup", "monsterName", "filmName", "moviename", " moviename", "filmType", "ovieGroup", "httpNAME", "filmNAME", "Moviename", "movieGroup", "MovieType", "mpegGroup", " movieNAME", "monstername", "mpegNAME", "MovieTitle", " movieTitle", "filmTitle"], "customer": ["customizer", "customator", "Customity", "CustomER", "developER", "customity", "stickizer", " customator", "ustomorder", "customER", "Customer", "developizer", "sticker", "developity", "stickity", "developator", " customER", "ustomER", "customorder", "developorder", "ustomator", "stickER", "Customizer", "ustomer", "developer", " customorder"], "rating": ["ping", "card", "weight", " Rating", "term", "rage", "saving", "tag", "credit", "Rating", "scoring", "review", "ranking", "ating", "attribute", "scale", "rank", "rate", "rat", "boarding", "reporting", "format", "rated", "user", "core", "having", "heading", "score", "error", "reading", "strength", "testing", "playing", "setting", "option", "translation", "type", "average"], "outBuf1": ["outBbuf0", "outBuffyl", "outBbuf1", "outBdf3", "outBBuff0", "outBufl", "outBulp64", "outDbuf3", "outBBuff1", "outDuf0", "outBool1", "outBuff1", "outBbufOne", "outBbuf3", "outBlf1", "outDbuf0", "outBbufone", "outBurg18", "outDuf11", "outBBuff3", "outRuf18", "outBuf3", "outBulp3", "outRuf5", "outBulp1", "outRuf3", "outRbuf0", "outBucOne", "outBdfOnce", "outDbuf1", "outRbuf1", "outBlf0", "outDuf3", "outRbuf5", "outBbufl", "outBulpOnce", "outBuffy3", "outBuc5", "outBooll", "outDbuf11", "outBdf64", "outBurg1", "outRuf1", "outBuf18", "outBurg3", "outBuffyone", "outBbuf11", "outBuf64", "outBuff0", "outBuf11", "outBuffy1", "outBlf3", "outBuc0", "outBBuff11", "outBbuf5", "outBbuf18", "outBoolone", "outBuffy0", "outRufOne", "outRbufOne", "outBurg0", "outRbuf18", "outDuf1", "outBbuf64", "outBuf5", "outBufOnce", "outBfx11", "outBdf1", "outBuf0", "outBfx1", "outBuff2", "outBlf2", "outBfx0", "outRuf0", "outBuc1", "outBuff3", "outRbuf3", "outBfx3", "outBuffy18", "outBufone", "outBufOne", "outBbufOnce", "outBool3"], "outBuf2": ["outBuf4", "outFbufTwo", "outBuf42", "outBuffy3", "outBuffy2", "outBfg4", "outBfgTwo", "outMuf15", "outMbuf2", "outBbuf42", "outBbufj", "outMbuf15", "outBbuf1", "outBbuff4", "outMuf1", "outBfx1", "outBuf3", "outBbuff42", "outBuff2", "outBuffTwo", "outBuffy4", "outBuf02", "outFuf2", "outFbuf02", "outMbuf3", "outFbuf2", "outBfx2", "outBbuff3", "outBuffyTwo", "outFbuf4", "outBfx15", "outBufj", "outBbuff2", "outBfg2", "outBuf15", "outBuff42", "outBbuffj", "outMbuf1", "outBfg02", "outBuff4", "outBbuf4", "outBuff3", "outMuf3", "outBuff1", "outBbuff1", "outBfx3", "outBbuf3", "outBbuf02", "outBufTwo", "outBbuf15", "outBuffy02", "outFufTwo", "outBuffj", "outBbufTwo", "outFuf4", "outBbuf2", "outBbuff15", "outFuf02", "outMuf2"], "endOfIndexFile": ["endOfErrorfile", "endOfindexFile", "endOfIndexF", "endOfindexTable", "endofIndexFiles", "endOfindexfile", "endOfIndfile", "endofIndexfile", "endOFindexFile", "endOfIndexTable", "endOfIndFile", " endFile", "endOfErrorF", "endOfIndLine", "EndFile", "endofindexFile", "endOfPositionFile", "endOfindexLine", "endofindexFiles", "endedFile", "endofindexfile", "endOFIndexfile", "endOFindexLine", "endofIndexFile", "endOfIndexfile", "endofindexF", "endOfErrorFile", "endOfindexF", "endOfindexFiles", "endOfPositionFiles", "endOFindexfile", "endOfPositionTable", "endFile", "endOfIndexFiles", "endOfIndexLine", "endofIndexTable", "endOfErrorFiles", "endOFIndexLine", "endOfPositionfile", "endofindexTable", "endofIndexF", "endOFIndexFile"]}}
{"id1": "14567939", "id2": "11968328", "code1": "    private static byte[] baseHash(String name, String password) {\n        try {\n            MessageDigest digest = MessageDigest.getInstance(\"MD5\");\n            digest.reset();\n            digest.update(name.toLowerCase().getBytes());\n            digest.update(password.getBytes());\n            return digest.digest();\n        } catch (NoSuchAlgorithmException ex) {\n            d(\"MD5 algorithm not found!\");\n            throw new RuntimeException(\"MD5 algorithm not found! Unable to authenticate\");\n        }\n    }\n", "code2": "    public static String getMD5(String _pwd) {\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            md.update(_pwd.getBytes());\n            return toHexadecimal(new String(md.digest()).getBytes());\n        } catch (NoSuchAlgorithmException x) {\n            x.printStackTrace();\n            return \"\";\n        }\n    }\n", "label": 1, "substitutes": {"baseHash": ["Basehash", "basichash", "BaseHash", "baseSign", "basicSign", "basehash", " baseSign", " baseKey", "BaseSign", "basicKey", "basicHash", "baseKey", " basehash", "BaseKey"], "name": ["local", "search", "address", "term", "id", "parent", "ame", "hash", "family", "current", "run", "username", "names", "NAME", "admin", "named", "n", "alias", "title", "person", "initial", "prefix", "table", "ident", "user", "create", "Name", "common", "john", "key", "login", "default", "domain", "order", "info", "account", "author", "word"], "password": ["secret", "picture", "description", "restricted", "hash", "remember", "phrase", "Password", "shadow", "auth", "username", "attribute", "session", "crypt", "padding", "prefix", "message", "command", "database", "pass", "user", "sword", "reset", "value", "key", "hello", "login", "token", "wd", "entry", "word"], "digest": [" Digester", " digend", "Digend", "mdested", "decester", "digested", "Diggest", "Digse", "Digested", "descested", "mdest", "displayum", "DigEST", "dest", "descest", "mdEST", "Digest", "digum", "mdester", "displayEST", "diger", "dgest", "Diger", "displayester", " digested", " Digest", "Digester", " diger", "digEST", "mdgest", " Diger", " digester", "diggest", "decgest", "decest", " Digend", "dested", "dEST", " digum", "Digum", "descester", "descse", "digse", "displayest", "descgest", "displayested", "mdse", "digester", "decested", "digend"]}}
{"id1": "5744493", "id2": "6171406", "code1": "    protected void onlyFileCopy(File in, File out) throws IOException {\n        FileChannel inChannel = new FileInputStream(in).getChannel();\n        FileChannel outChannel = new FileOutputStream(out).getChannel();\n        try {\n            int maxCount = (1024 * 1024 * 64) - (1024 * 32);\n            long size = inChannel.size();\n            long pos = 0;\n            while (pos < size) {\n                pos += inChannel.transferTo(pos, maxCount, outChannel);\n            }\n        } catch (IOException e) {\n            throw e;\n        } finally {\n            if (inChannel != null) inChannel.close();\n            if (outChannel != null) outChannel.close();\n        }\n    }\n", "code2": "    public static void createTar(File directoryToPack, File targetTarFile) throws IOException {\n        if (directoryToPack == null) {\n            throw new NullPointerException(\"The parameter 'directoryToPack' must not be null\");\n        }\n        if (targetTarFile == null) {\n            throw new NullPointerException(\"The parameter 'targetTarFile' must not be null\");\n        }\n        if (!directoryToPack.exists() || !directoryToPack.isDirectory()) {\n            throw new IllegalArgumentException(\"The target file '\" + directoryToPack + \"' does not exist or is not a directory.\");\n        }\n        if (targetTarFile.exists()) {\n            log.warn(\"The target file '\" + targetTarFile + \"' already exists. Will overwrite\");\n        }\n        log.debug(\"Creating tar from all files in directory '\" + directoryToPack + \"'\");\n        byte buffer[] = new byte[BUFFER_SIZE];\n        FileOutputStream targetOutput = new FileOutputStream(targetTarFile);\n        TarOutputStream targetOutputTar = new TarOutputStream(targetOutput);\n        try {\n            List<File> fileList = collectFiles(directoryToPack);\n            for (Iterator<File> iter = fileList.iterator(); iter.hasNext(); ) {\n                File file = iter.next();\n                if (file == null || !file.exists() || file.isDirectory()) {\n                    log.info(\"The file '\" + file + \"' is ignored - is a directory or non-existent\");\n                    continue;\n                }\n                if (file.equals(targetTarFile)) {\n                    log.debug(\"Skipping file: '\" + file + \"' - is the tar file itself\");\n                    continue;\n                }\n                log.debug(\"Adding to archive: file='\" + file + \"', archive='\" + targetTarFile + \"'\");\n                String filePathInTar = getFilePathInTar(file, directoryToPack);\n                log.debug(\"File path in tar: '\" + filePathInTar + \"' (file=\" + file + \")\");\n                TarEntry tarAdd = new TarEntry(file);\n                tarAdd.setModTime(file.lastModified());\n                tarAdd.setName(filePathInTar);\n                targetOutputTar.putNextEntry(tarAdd);\n                if (file.isFile()) {\n                    FileInputStream in = new FileInputStream(file);\n                    try {\n                        while (true) {\n                            int nRead = in.read(buffer, 0, buffer.length);\n                            if (nRead <= 0) break;\n                            targetOutputTar.write(buffer, 0, nRead);\n                        }\n                    } finally {\n                        StreamUtil.tryCloseStream(in);\n                    }\n                }\n                targetOutputTar.closeEntry();\n            }\n        } finally {\n            StreamUtil.tryCloseStream(targetOutputTar);\n            StreamUtil.tryCloseStream(targetOutput);\n        }\n        log.info(\"Tar Archive created successfully '\" + targetTarFile + \"'\");\n    }\n", "label": 1, "substitutes": {"onlyFileCopy": [" doFileCopy", " doFileDownload", " synchronizedFullMove", " doFileMove", " synchronizedFullCopy", " synchronizedFileDownload", " synchronizedFileCopy", " doStreamMove", " doPageMove", " doStreamDownload", " doPageCopy", " synchronizedFullDownload", " synchronizedFileMove", " doFullMove", " doPageDownload", " doFullCopy", " doStreamCopy", " doFullDownload"], "in": ["ic", "file", "en", "b", "old", "inf", "up", "cin", "from", "r", "ex", "IN", "inc", "i", "n", "o", "as", "din", "ck", "init", " input", "isin", "input", "ind", "mm", "gin", "source", "In", "or", "el", "ac", "ins", "rin", "l", "it", "ain", "inn"], "out": ["v", "serv", "op", "at", "log", "file", "p", "io", "help", "t", "po", "up", "nt", "ot", "output", "c", "null", "n", "ex", "check", "to", "write", "res", "gt", "o", "as", "net", "s", "ch", "OUT", "Out", "l", "it", "ou", "outs", "ne", "os", "w"], "inChannel": ["inConnection", "outChan", "InChan", " inConnection", " inButton", " inCase", " inCategory", "innCommand", "InCh", "innChannel", "innerStream", "inCommand", "INChan", " inchannel", " inCh", "outCh", "dinChan", "inCategory", "dinButton", "inCase", "dinConnection", "inButton", "inStream", "INchannel", "cinCommand", "inCh", "isinConnection", " inChan", "outStream", "INChannel", "isinChan", "innCategory", "INStream", "innerChannel", "dinCommand", "vinCase", "outchannel", "innButton", "inChan", "inchannel", "isinButton", "cinButton", "dinChannel", "dinCase", "InChannel", " inCommand", "cinChannel", "vinConnection", "innerChan", "Inchannel", "innerchannel", "vinCommand", "isinChannel", "cinCategory", "vinChannel"], "outChannel": ["aosMachine", "outChan", "upSection", "outerChannel", " outRoom", "outputChannel", "onChan", "upChannel", "OutStream", "outConnection", "OutChan", "cosMachine", "aosDisk", "outerChan", "outCh", "outerStream", " outStream", "onchannel", "onChannel", "newChannel", "upDisk", "inRoom", "outDisk", "inStream", " outChan", "onConnection", "OutChannel", "outputStream", "upMachine", "aosSection", "outSection", "cosSection", "outStream", "cosChannel", "newchannel", " outCh", "outchannel", "outMachine", "inChan", "OutCh", "outRoom", "outputCh", "outputChan", "newConnection", " outchannel", "cosDisk", " outConnection", "outerRoom", "newChan", "aosChannel"], "maxCount": ["minFlag", "maxLength", "MAXLength", " maxSize", "MaxCount", " maxFlag", "minSize", "minCount", "minCast", "minLength", "maxFlag", "maxSize", "MAXCount", "MaxCast", "maxCast", "MaxLength", " maxLength", "MAXFlag", "MaxSize", " maxCast"], "size": ["send", "sample", "bytes", "height", "show", "any", "ose", "speed", "Size", "fee", "length", "is", "count", "start", "position", "resolution", "total", "export", "scale", "si", "len", "range", "ize", "south", "write", "scroll", "duration", "area", "m", "close", "ze", "notice", "small", "set", "sd", "message", "ms", "sent", "capacity", "read", "seek", "name", "score", "readable", "shift", "keys", "shape", "sum", "SIZE", "empty", "equal", "body", "space", "gets"], "pos": ["pose", "cos", "pt", "p", "Pos", "pro", "point", "part", "length", "po", "start", "position", "row", "slot", "no", "pg", "limit", "left", "len", "index", "to", "n", "i", "pl", "port", "pi", "o", "rel", "ps", "def", "seq", "loc", "Position", "sp", "coord", "page", "pass", "pid", "doc", "exp", "offset", "POS", "spec", "zero", "pr", "x", "pointer", "l", "it", "resp", "pc", "off", "os"]}}
{"id1": "12085127", "id2": "3409084", "code1": "    public final void navigate(final URL url) {\n        try {\n            EncogLogging.log(EncogLogging.LEVEL_INFO, \"Navigating to page:\" + url);\n            final URLConnection connection = url.openConnection();\n            final InputStream is = connection.getInputStream();\n            navigate(url, is);\n            is.close();\n        } catch (final IOException e) {\n            EncogLogging.log(EncogLogging.LEVEL_ERROR, e);\n            throw new BrowseError(e);\n        }\n    }\n", "code2": "    protected String getRequestContent(String urlText) throws Exception {\n        URL url = new URL(urlText);\n        HttpURLConnection urlcon = (HttpURLConnection) url.openConnection();\n        urlcon.connect();\n        BufferedReader reader = new BufferedReader(new InputStreamReader(urlcon.getInputStream()));\n        String line = reader.readLine();\n        reader.close();\n        urlcon.disconnect();\n        return line;\n    }\n", "label": 0, "substitutes": {"navigate": ["generiate", "configigation", "naviate", "generigate", "avate", "navigation", "Navigate", "Navure", "avinate", "navate", "navure", "configigate", "generinate", "Naviate", "Navate", "generigation", "configure", "Navigation", "avigate", "configate", "navinate", "aviate", "avure", "Navinate", "avigation"], "url": ["build", "sl", "path", "gl", "address", "string", "file", "Url", "ret", "log", "term", "str", "nl", "b", "char", "ls", "external", "email", "dl", "null", "ll", "pl", "host", "html", "ssl", "link", "location", "f", "uri", "base", "URL", "web", "job", "page", "loc", "ur", "conn", "req", "cert", "document", "name", "util", "http", "www", "key", "mount", "rect", "l", "xml", "domain", "il", "this", "ref", "org", "ul"], "connection": ["created", "description", "communication", "resource", "channel", "cone", "position", "opening", "ion", "still", "open", "Connection", "network", "entry", "relation", "condition", "session", "statement", "console", "city", "set", "net", "connect", "message", "conn", "database", "client", "generation", "nc", "application", "pointer", "socket", "response", "connected", "directory", "established", "controller", "character", "sql", "con", "command"], "is": ["iss", "ic", "isl", "ism", "isa", "sis", "in", "mis", "ais", "iris", "ri", "si", "rs", "i", "ios", "are", "ims", "bis", "fs", "dis", "as", "IS", "ms", "s", "bs", "lis", "ois", "oss", "its", "ris", "im", "tis", "Is", "ins", "nis", "ip", "us", "isi", "isc", "stream", "os", "iso"]}}
{"id1": "3631989", "id2": "21656668", "code1": "    public void run() {\n        URL url;\n        try {\n            url = new URL(\"http://localhost:8080/glowaxes/dailytrend.jsp\");\n            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n            while ((str = in.readLine()) != null) {\n            }\n            in.close();\n        } catch (MalformedURLException e) {\n        } catch (IOException e) {\n        }\n    }\n", "code2": "    private void copyResourceToFile(final String resourceFilename, final String destinationFilename) throws IOException {\n        InputStream inStream = null;\n        OutputStream outStream = null;\n        try {\n            inStream = MatsimResource.getAsInputStream(resourceFilename);\n            outStream = new FileOutputStream(destinationFilename);\n            IOUtils.copyStream(inStream, outStream);\n        } finally {\n            if (inStream != null) {\n                try {\n                    inStream.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n            if (outStream != null) {\n                try {\n                    outStream.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n", "label": 0, "substitutes": {"run": ["evaluate", "background", "sample", "submit", "show", "render", "process", "test", "start", " Run", "begin", "call", "thread", "profile", "runner", "loop", "web", "app", "Run", "exec", "execute", "running", "unit", "runs", "launch"], "url": ["sl", "gl", "address", "v", "h", "file", "Url", "p", "ret", "hub", "git", "nl", "id", "mail", "channel", "b", "char", "k", "t", "browser", "re", "r", "dl", "null", "ll", "https", "ssl", "link", "location", "f", "uri", "base", "URL", "web", "ur", "github", "cert", "name", "u", "client", "hl", "bel", "http", "pr", "key", "mount", "el", "l", "window", "xml", "il", "stream"], "in": ["ln", "ic", "en", "print", "is", "inf", "al", "cin", "from", "reader", "r", "IN", "inc", "n", "inner", " din", "on", "ma", "er", "out", "din", "oin", "all", "input", "isin", "ind", "read", "gin", "line", "In", "mn", "and", "el", "ins", "rin", "sum", "l", "it", "bin", "ill", "con", "inn"], "str": ["text", "ln", "err", "serv", "string", "p", "txt", "nl", "char", "st", "obj", "j", "r", "c", "bl", "n", "i", "status", "f", "Str", "iter", "s", "sp", "out", "ch", "list", "l", "fr", "body"]}}
{"id1": "14783950", "id2": "6301863", "code1": "    public static void compressWithZip(Vector fileList, String zipFileName) throws IOException {\n        if (fileList == null || fileList.size() == 0) return;\n        FileOutputStream fos = new FileOutputStream(zipFileName);\n        ZipOutputStream zos = new ZipOutputStream(fos);\n        Iterator iter = fileList.iterator();\n        while (iter.hasNext()) {\n            String fileName = (String) iter.next();\n            int ind = Math.max(fileName.lastIndexOf('/'), fileName.lastIndexOf('\\\\'));\n            String shortName = \"unknown\";\n            if (ind < fileName.length() - 1) shortName = fileName.substring(ind + 1);\n            zos.putNextEntry(new ZipEntry(shortName));\n            FileInputStream fis = new FileInputStream(fileName);\n            byte[] buf = new byte[10000];\n            int bytesRead;\n            while ((bytesRead = fis.read(buf)) > 0) zos.write(buf, 0, bytesRead);\n            fis.close();\n            zos.closeEntry();\n        }\n        zos.close();\n    }\n", "code2": "    protected String doRawRequest(String postData) throws IOException {\n        URL url = new URL(SERVICE_URL);\n        URLConnection conn = url.openConnection();\n        conn.setDoOutput(true);\n        OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());\n        wr.write(postData);\n        wr.flush();\n        BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n        StringBuffer sb = new StringBuffer();\n        String line;\n        while ((line = rd.readLine()) != null) {\n            sb.append(line);\n        }\n        wr.close();\n        rd.close();\n        return sb.toString();\n    }\n", "label": 0, "substitutes": {"compressWithZip": ["composeWithzip", "compressWithFiles", "compressWithExt", "composeWithoutFiles", "compressWithoutExt", "compresswithExt", "compresswithFiles", "compressWithoutZip", "composeWithFiles", "compressWithzip", "compresswithzip", "compresswithZip", "composeWithoutzip", "compressByZip", "compressByzip", "compressByFiles", "composeWithoutZip", "composeWithoutExt", "composeWithExt", "composeWithZip", "compressWithoutFiles", "compressWithoutzip", "compressByExt"], "fileList": ["ileL", "resourceList", "itemList", " fileNames", " fileLIST", "ilelist", "ileList", "fileLIST", "resourceLock", "pageList", "itemLock", "fileNames", "fileL", "pageLIST", "fileCode", "itemNames", "wordSet", "fileLock", "fileSet", "tileList", "wordList", "filelist", " fileLock", "tileIterator", "pageCode", " fileSet", "wordIterator", " FileLIST", " fileL", "ileLIST", " FileCode", "pageSet", "pageL", " FileList", "resourceNames", " fileCode", "pagelist", " FileSet", "tileLIST", " fileIterator", "wordLIST", "tileSet", " filelist", "fileIterator"], "zipFileName": ["zipileFilename", "zipfileNames", "zipFilePath", "zipFileNames", " zipfileFilename", "zipDirPath", " zipFileFilename", "zFilenameName", "zipFilenamename", " zipFileNames", "zFileFilename", "zipFilenamePath", "zipileName", "zipDirNames", "zipFilenameFilename", "zipilename", "zFilenameFilename", "zipFileFilename", "zipDirFilename", "zFilename", " zipfilePath", "zipfilePath", "zipilePath", "zipfileFilename", "zipFilenameNames", "zipDirName", "zipfileName", "zFilenamePath", "zFilePath", " zipFilePath", "zipFilenameName", " zipfileNames", "zFileName", "zipFilename", " zipfileName", "zipfilename", "zFilenamename"], "fos": ["Fos", "flis", "woss", " fOS", "flOS", "lOS", "foss", "wOS", "Foos", "flos", "woos", "loos", "lfos", "lfoos", "floos", "loss", "los", "foos", "lfis", " foos", "lfOS", "fOS", "FOS", "wos", "Foss"], "zos": ["zu", "js", "ss", "ess", "zi", "ez", "zh", "sbm", "zers", "ws", "sis", "z", "zon", "zzle", "zag", "iners", "hz", "zar", "ossus", "Sax", "rys", "za", "zip", "jas", "cz", "ze", "zik", "es", "nz", "enz", "ps", "ses", "zan", "han", "zen", "zo", "los", "oss", "zer", "zin", "eros", "ippers", "hess", "bes", "zero", "rez", "zb", "enos", "css", "less", "zes", "os", "iaz", "webkit"], "iter": ["gener", "where", "li", "ger", "cer", "iver", "is", "loader", "ner", "former", "ptr", "ee", "maker", "walker", "re", "here", "reader", "Iterator", "izer", "vis", "i", "orient", "inner", "iner", "inter", "Iter", "valid", "outer", "ipper", "iterator", "loop", "loc", "its", "user", "oper", "kit", "ter", "exp", "ait", "ator", "fer", "list", "el", "ser", "tr", "coll", "train", "ip", "it", "ir", "order", "ver", "er", "liter", "iv"], "fileName": ["ileCurrent", "shortname", " filePath", "tablePath", "getStore", "fileNumber", " fileNames", "fNumber", "fileNAME", "ileBody", " filename", "getSource", "ilePath", "fieldNAME", "fileString", " fileNumber", "fileStore", "fileCurrent", "fieldname", "ileList", "fNames", " fileSource", "FileString", "fileSource", "filename", "fileNames", "getName", "localName", "localNAME", "ileNAME", " fileBody", "fieldList", "fieldName", "fname", "Filename", "fString", "fileSet", "FilePath", "ileString", "shortSource", "ileNumber", " fileStore", " fileString", " fileSet", "fSource", "ilename", "FileName", "fName", "tableName", "fileBody", "localname", "ileSource", "FileNames", "ileSet", "filePath", "FileCurrent", "tableSet", "shortStore", "localList", " fileCurrent", "ileName", "getname", "fBody"], "ind": ["d", "Ind", "seed", "IND", "typ", "ld", "dj", "mod", "count", "med", "num", "bind", "butt", "j", "ptr", "roll", "nd", "index", "cod", "n", "inc", "i", "red", "inder", "ded", "pl", "stick", "md", "kind", "pred", "loc", "td", "draw", "req", "cd", "mind", "sign", "att", "hend", "pos", "wind", "ent", "cond", "find", "div", "dial", "inn", "cand"], "shortName": ["ShortName", "shortname", "quickName", " shortKey", "quickname", "fullType", "ShortString", "recentname", "shortCode", "fullString", "ShortFilename", " shortname", "smallFilename", "recentFilename", "recentCode", "fullname", "shortString", "quickKey", "smallname", "smallCode", "shortKey", "recentName", "Shortname", "ShortCode", " shortString", "ShortKey", "smallName", "shortType", "quickString", "ShortType", "shortFilename", "fullName", " shortType"], "fis": ["cfris", "hris", "ufis", "cfi", "pois", "fris", "sfIs", "cfis", "sfois", "fois", "ufIs", "wi", "pi", "pris", "fIs", "Fis", " fris", "his", "FIs", "wois", "sfis", "ufi", "ufois", "pis", "ufris", "wis", "wIs", "Fris", "fi", "sfi", "cfois", " fIs", "hi", "hois"], "buf": ["cv", "aka", "bed", "cur", "fg", "bytes", "batch", "bag", "var", "bar", "cat", "orig", "b", "conv", "arr", "rb", "msg", "bl", "mu", "block", "box", "mem", "vec", "img", "bus", "fb", "br", "seq", "buffer", "buff", "fam", "cap", "db", "wb", "tab", "Buff", "cb", "tr", "pkg", "uf", "cmd", "bin", "Buffer", "temp", "ref", "bc"], "bytesRead": ["bytesLength", "bytesFind", "flowsFind", "usersLoad", "BytesLength", "secondsRead", "bytesWritten", "linesWritten", "bytesReady", "blocksWrite", "bytesNeed", "secondsWritten", "BytesRead", " bytesWrite", "linesLength", "usersReady", "flowsRead", " bytesLength", "flowsReady", "postsFind", "blocksWritten", "bytesWrite", "BytesNeed", "flowsLoad", "usersRead", "postsRead", "bytesLoad", " bytesWritten", "BytesWritten", " bytesNeed", "postsLoad", "blocksLoad", "usersFind", "blocksRead", "secondsWrite", " bytesLoad", "secondsLoad", "linesNeed", "postsReady", "linesRead"]}}
{"id1": "19849797", "id2": "22560224", "code1": "    public static void copyFile(File sourceFile, File destFile) throws IOException {\n        if (!destFile.exists()) {\n            destFile.createNewFile();\n        }\n        FileChannel source = null;\n        FileChannel destination = null;\n        try {\n            source = new FileInputStream(sourceFile).getChannel();\n            destination = new FileOutputStream(destFile).getChannel();\n            destination.transferFrom(source, 0, source.size());\n        } finally {\n            if (source != null) {\n                source.close();\n            }\n            if (destination != null) {\n                destination.close();\n            }\n        }\n    }\n", "code2": "    public static String hashStringMD5(String string) throws NoSuchAlgorithmException {\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(string.getBytes());\n        byte byteData[] = md.digest();\n        StringBuffer sb = new StringBuffer();\n        for (int i = 0; i < byteData.length; i++) {\n            sb.append(Integer.toString((byteData[i] & 0xff) + 0x100, 16).substring(1));\n        }\n        StringBuffer hexString = new StringBuffer();\n        for (int i = 0; i < byteData.length; i++) {\n            String hex = Integer.toHexString(0xff & byteData[i]);\n            if (hex.length() == 1) hexString.append('0');\n            hexString.append(hex);\n        }\n        return hexString.toString();\n    }\n", "label": 0, "substitutes": {"copyFile": ["copyfile", " copyStream", "copyStream", " cpStream", " cpFiles", "transferfile", " cpfile", "copyFiles", " copyfile", "transferFile", " cpFile", "transferStream", " copyFiles", "transferFiles"], "sourceFile": ["srcFile", "sourceField", "ourcefile", "srcPath", "ourcePage", "sourcePath", "ourceFile", "sourcefile", "ourcePath", " sourcePath", "ourceLine", " sourceLine", "sourceTable", "srcfile", "srcPage", "srcTable", " sourcefile", " sourcePage", " sourceTable", "ourceTable", "srcLine", " sourceField", "sourcePage", "ourceField", "srcField", "sourceLine"], "destFile": ["datPlace", "srcFile", "destEntity", "destPath", "restFiles", "srcPath", "destFiles", "declEntity", "declFolder", "destPlace", " destPlace", "srcFolder", "optEntity", "declDir", "datFilename", " destDir", "DestFile", "destFolder", " destFiles", "srcEntity", "srcDir", "optFolder", "restFile", "datFile", "destDir", "optFile", "datFiles", "restPlace", " destPath", "DestPath", " destFilename", "restFilename", "optPath", "optDir", "destFilename", "DestFiles", "optFilename", "DestFilename", "declFile", "DestDir", "srcFiles"], "source": ["local", "pose", "search", "send", "sample", "subject", "match", "force", "proxy", "sequence", "show", "missing", "parent", "back", "ce", "resource", "src", "store", "channel", "component", "char", "before", "start", "cause", "in", "update", "service", "SOURCE", "from", "target", "slave", "style", "reader", "shell", "copy", "index", "attribute", "scale", "owner", "query", "ource", "scope", "inner", "check", "console", "iterator", "iter", "note", "table", "Source", "result", "series", "init", "none", "create", "parse", "input", "ie", "score", "spec", "comment", "load", "image", "OURCE", "use", "standard", "body", "origin", "stream", "se"], "destination": ["separment", " destinate", "descination", " destificate", "noninator", "terminination", "destinated", "separination", "destined", "Destinated", " destined", "decinate", "destinator", "Destificate", "restination", "nonination", "descinate", " destation", "verination", "noninated", " destment", "decinated", "Destment", "veration", "descation", "termininated", "Destination", "Destation", "destment", "verinated", "noninate", "verificate", "termininate", "separinated", " destinator", "Destinate", "restinate", "Destinator", "destinate", "separation", "decination", "restinator", "terminined", " destinated", "destation", "decined", "descinator", "restinated", "destificate"]}}
{"id1": "20991673", "id2": "20588811", "code1": "    public NodeId generateTopicId(String topicName) {\n        MessageDigest md = null;\n        try {\n            md = MessageDigest.getInstance(\"SHA\");\n        } catch (NoSuchAlgorithmException e) {\n            System.err.println(\"No SHA support!\");\n        }\n        if (m_ready) System.out.println(\"Scribe is ready at\" + getNodeId() + \" , topic is \" + topicName);\n        md.update(topicName.getBytes());\n        byte[] digest = md.digest();\n        NodeId newId = new NodeId(digest);\n        return newId;\n    }\n", "code2": "    public void run() {\n        long time = System.currentTimeMillis();\n        logger.info(\"Version: \" + version);\n        String hostname = properties.getProperty(\"mercuriushost\");\n        String protocol = properties.getProperty(\"mercuriusprotocol\");\n        String port = properties.getProperty(\"mercuriusport\");\n        String path = properties.getProperty(\"mercuriuspath\");\n        String action = properties.getProperty(\"mercuriusaction\");\n        logger.info(\"Getting Timex Data --- \" + getTimeDifferent(time));\n        String xml = timexfrmk.getUnsynchedSessionsXMLFormat();\n        logger.info(\"Done getting Timex Data --- \" + getTimeDifferent(time));\n        if (timexfrmk.getSessionCount() > 0) {\n            try {\n                logger.info(\"Sending Timex Data to Mercurius --- \" + getTimeDifferent(time));\n                String data = URLEncoder.encode(\"action\", \"UTF-8\") + \"=\" + URLEncoder.encode(action, \"UTF-8\");\n                data += \"&\" + URLEncoder.encode(\"data\", \"UTF-8\") + \"=\" + URLEncoder.encode(xml, \"UTF-8\");\n                if (isAdminFeedKeySet()) {\n                    data += \"&\" + URLEncoder.encode(\"adminfeedkey\", \"UTF-8\") + \"=\" + URLEncoder.encode(adminfeedkey, \"UTF-8\");\n                    logger.debug(\"Using adminfeedkey to authenticate\");\n                } else {\n                    Authenticator.setDefault(new CustomAuthenticator(user, password));\n                    logger.debug(\"Using user/pwd to authenticate\");\n                }\n                String u = protocol + \"://\" + hostname + \":\" + port + path;\n                logger.debug(\"Posting xml data to: \" + u);\n                URL url = new URL(u);\n                URLConnection conn = url.openConnection();\n                conn.setRequestProperty(\"User-Agent\", \"TimexMercurius/\" + version);\n                conn.setDoOutput(true);\n                OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());\n                wr.write(data);\n                wr.flush();\n                BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n                String line;\n                StringBuffer s = new StringBuffer();\n                while ((line = rd.readLine()) != null) {\n                    s.append(line);\n                }\n                if (s.length() > 0) {\n                    logger.debug(s.toString());\n                    if (s.toString().indexOf(\"Result:\") != -1) {\n                        logger.info(s.toString().substring(s.toString().indexOf(\"Result:\")));\n                        if (s.toString().indexOf(\"Result: Successful\") != -1) {\n                            timexfrmk.updateSessionsStatus();\n                        }\n                    } else {\n                        logger.error(s.toString());\n                    }\n                } else {\n                    logger.info(\"No data returned\");\n                }\n                wr.close();\n                rd.close();\n            } catch (MalformedURLException e) {\n                logger.error(e);\n                logger.trace(e, e);\n            } catch (IOException e) {\n                logger.error(e);\n                logger.trace(e, e);\n            } catch (Exception e) {\n                logger.error(e);\n                logger.trace(e, e);\n            }\n        } else {\n            logger.info(\"There is nothing to send.  Everything has already been synchronized\");\n        }\n        timexfrmk.close();\n        logger.info(\"Done!!! Total Time: \" + getTimeDifferent(time));\n    }\n", "label": 0, "substitutes": {"generateTopicId": ["generatesTopicDir", "generateNodeID", "generateNodeDir", "generateThreadName", "generateTransactionId", "generateTransactionID", "generateTopicID", "generatesNodeId", "generateThreadDir", "generateThreadID", "generateTransactionDir", "generateNodeId", "generatesTopicId", "generatesNodeName", "generatesTopicName", "generateTopicName", "generateNodeName", "generateThreadId", "generatesNodeID", "generateTopicDir", "generatesTopicID", "generatesNodeDir", "generateTransactionName"], "topicName": ["TopicData", "Topicname", "opicInfo", " topicFamily", "topicData", "topicKey", "topicname", "threadKey", "messageInfo", "opicFamily", "threadname", "opicData", "threadData", "threadName", "messageNames", "opicName", " topicKey", "messageName", "topicNames", " topicname", " topicData", " topicInfo", "topicInfo", "TopicNames", "TopicName", "TopicInfo", "TopicKey", " topicNames", "messagename", "topicFamily", "TopicFamily"], "md": ["mac", "mc", "d", "dr", "pdf", "pd", "mt", "ld", "mod", "di", "hash", "med", "sm", "msg", "de", " mc", "ng", "red", "det", "m", "ms", "ma", "dd", "sd", "mand", "rm", "alg", "hd", "dig", "M", "mm", "ind", "cd", "mk", "od", "me", "bd", "mg", "mn", "sha", "dm", "metadata", "mp", "bf", "der", "dh", "df", "mb", "cmd", "grad", "MD", " Md", "ME"], "digest": ["Digressed", "designEST", "candested", "digested", " digEST", "Diggest", "Digested", "hashEST", "DigEST", "digressed", "Digest", "digests", "designest", "candressed", " digested", "digEST", "signidate", "diggest", "decidate", "decest", "digidate", "decests", "designested", "hashest", "signested", " digressed", "Digests", "signests", "candest", "candEST", "hashgest", "signest", "decested", "hashested", "designgest", "Digidate"], "newId": ["nodeId", " newid", "newid", "nextId", "newsById", "Newid", "nodeMid", "nextById", "newsId", " newMid", "NewMid", "nodeById", "nextid", "newsid", "newsMid", "nextMid", "newMid", "NewId", "nodeid", " newById", "NewById", "newById"]}}
{"id1": "13757855", "id2": "22338097", "code1": "    public void process(@NotNull Template tpl, @NotNull Document model, @NotNull String packageName, @NotNull String outFileName, Map<String, String> xsltParam, String artifact) throws ModelGenerationException {\n        System.out.print(\"Processing with \" + tpl);\n        String destinationPath;\n        switch(tpl.destination) {\n            case target:\n                if (tpl.path == null) {\n                    destinationPath = where.buildDir + separatorChar + \"generated-sources\" + separatorChar + GENERATION_TARGET;\n                } else {\n                    destinationPath = where.buildDir;\n                }\n                break;\n            case source:\n                if (tpl.path == null) {\n                    destinationPath = where.sourceDir;\n                } else {\n                    destinationPath = \"src\";\n                }\n                break;\n            case redora:\n                destinationPath = where.redoraDir;\n                break;\n            default:\n                throw new IllegalArgumentException(\"Unused destination \" + tpl.destination);\n        }\n        if (tpl.path == null) {\n            if (tpl.destination == Destination.redora) destinationPath += separator + artifact; else destinationPath += separator + packageName.replace('.', separatorChar);\n        } else {\n            destinationPath += separator + tpl.path.replace('/', separatorChar).replace('\\\\', separatorChar);\n        }\n        System.out.println(\" to \" + destinationPath + \"...\" + outFileName);\n        if (tpl.destination == Destination.source) {\n            if (new File(destinationPath, outFileName).exists()) {\n                System.out.println(\"Stub \" + outFileName + \" already exists.\");\n                return;\n            }\n        }\n        new File(destinationPath).mkdirs();\n        InputStream in = null;\n        Writer out;\n        try {\n            out = new FileWriter(new File(destinationPath, outFileName));\n        } catch (IOException e) {\n            throw new ModelGenerationException(\"Can't find: \" + destinationPath + separatorChar + outFileName, e);\n        }\n        switch(tpl.type) {\n            case freemarker:\n                Map<String, NodeModel> root = new HashMap<String, NodeModel>();\n                root.put(\"doc\", NodeModel.wrap(model));\n                try {\n                    freemarker.template.Template template = freemarkerConf.getTemplate(tpl.getTemplateFileName());\n                    template.process(root, out);\n                } catch (ParseException e) {\n                    throw new ModelGenerationException(\"There is an error in template: \" + tpl + \". I found it when generating \" + outFileName, e);\n                } catch (IOException e) {\n                    throw new ModelGenerationException(\"Can't find '\" + tpl + \"' when generating \" + outFileName, e);\n                } catch (TemplateException e) {\n                    throw new ModelGenerationException(\"There is an error in template: \" + tpl + \". I found it when generating \" + outFileName, e);\n                } catch (RuntimeException e) {\n                    throw new ModelGenerationException(\"There is another error while trying this template: \" + tpl + \". I found it when generating \" + outFileName, e);\n                }\n                break;\n            case xslt:\n                try {\n                    in = new FileInputStream(tpl.getAbsolutePath());\n                    xsltTransform(model.getFirstChild(), in, out, xsltParam);\n                } catch (FileNotFoundException e) {\n                    throw new ModelGenerationException(\"Can't find \" + tpl, e);\n                } catch (TransformerException e) {\n                    throw new ModelGenerationException(\"Sorry, i failed to use this template: \" + tpl + \". It broke when generating \" + outFileName, e);\n                } finally {\n                    IOUtils.closeQuietly(in);\n                }\n                break;\n            case copy:\n                try {\n                    in = new FileInputStream(tpl.getAbsolutePath());\n                    IOUtils.copy(in, out);\n                } catch (IOException e) {\n                    throw new ModelGenerationException(\"File copy failed \" + tpl.getTemplateFileName(), e);\n                } finally {\n                    IOUtils.closeQuietly(in);\n                }\n        }\n        IOUtils.closeQuietly(out);\n    }\n", "code2": "    private final String createMD5(String pwd) throws Exception {\n        MessageDigest md = (MessageDigest) MessageDigest.getInstance(\"MD5\").clone();\n        md.update(pwd.getBytes(\"UTF-8\"));\n        byte[] pd = md.digest();\n        StringBuffer app = new StringBuffer();\n        for (int i = 0; i < pd.length; i++) {\n            String s2 = Integer.toHexString(pd[i] & 0xFF);\n            app.append((s2.length() == 1) ? \"0\" + s2 : s2);\n        }\n        return app.toString();\n    }\n", "label": 0, "substitutes": {"process": ["build", "filter", "apply", "step", "replace", "transform", "render", "processor", "run", "call", "write", "loop", "format", "project", "Process", "parse", "create", "processing", "load", "save", "add", "execute", "handle", "task", "proc", "display"], "tpl": ["templ", "timpl", "tmbl", "stplug", " tPL", "tpr", "tmpp", " tph", "tspl", "temPL", "stplate", "tmPL", "typl", "stpl", "otld", "tPL", "ttph", "Tph", "ttpl", "Tpl", "tuple", " tld", "Tplate", "ttopl", "turtle", " tpp", "TPL", "timplug", "stspl", "itplate", "ttbl", "otplate", "ttPL", " tplate", "atpl", "atplate", "tplug", " tplates", " tuple", "Tspl", "terpl", "otpl", "tph", "Tbl", "stopl", "terplate", "tsbl", "timplate", "ttplug", "ptbl", "tmpl", "topl", "tld", "tspr", "itpl", "stpg", " turtle", "tsPL", "Tplates", "otbl", "timbl", "tempr", "ptpl", "tpg", "tmplate", "ttpg", "itPL", " tbl", "tyurtle", "Tpp", "Tpr", "tyPL", "tembl", "tplates", "itbl", "stbl", "ptld", "timspl", "timpg", "terld", "tbl", "Tld", "tsurtle", "ptplates", "timopl", "tmplates", "teruple", "tpp", "tplate", "atuple", "atld"], "model": ["module", "log", "file", "parent", "Model", "record", " Model", "content", "product", " models", "node", "m", "html", "md", "base", "models", "project", "M", "ml", "tree", "document", "object", "data", "el", "Document"], "packageName": ["viewname", "PackageClass", "packageClass", "groupName", " packagename", "pkgNames", "PackageRoot", "pkgVersion", " packageClass", " packageFamily", "viewRoot", "groupVersion", "packageVersion", " packageRoot", "groupFamily", "packageRoot", "groupNames", "pkgName", "packagename", "viewClass", "PackageName", "Packagename", "packageFamily", " packageVersion", " packageNames", "pkgFamily", "viewName", "packageNames"], "outFileName": ["outFilenameChain", "outStreamNames", "infileNames", "outFileChain", "outfileNames", "outFileNames", "outDirPath", " outFilenamePath", "outStreamName", "outFileType", " outTableName", "outfileType", "outFPath", " outFileTime", "inFileType", "outStreamPath", " outFilenameSize", "outTableName", "outfileChain", "infilePath", " outfileNames", "outFilenameType", "outTableTime", " outfilename", "outTableChain", "outTableType", "outFNames", "outTablename", "outFilenamename", " outFilenamename", "outImagePath", "outFileTime", "outImageName", " outFileNames", " outFileType", " outTablePath", "outFilename", "outTablePath", "inFileNames", "outFilenameSize", "outfileTime", " outTableTime", " outFilePath", "outFname", "outFilenameTime", "outFName", " outFileChain", "outImageSize", " outFilenameType", "outFilePath", " outFileSize", " outTableSize", "outFilenamePath", " outfileName", "inFileTime", "outStreamType", "outDirName", " outFilenameChain", "outStreamTime", "outfilePath", "infileTime", " outFilename", "outfileName", "infileName", "outDirTime", "inFileName", "outTableSize", "outImagename", "inFilePath", "outFilenameName", "outFilenameNames", "outfilename", "outFileSize", "outDirSize", "infileType", " outfilePath", " outFilenameName"], "xsltParam": ["xsqlConf", "xsmlParam", "xsslParam", "xsmlConf", "xltParameter", "xmlConf", "xsltParameter", "xltConf", "xmlParameter", "xsslParameter", "xmlParam", "xsslConf", "xsmlParameter", "xsqlParameter", "xltParam", "xsltConf", "xsqlParam"], "artifact": [" artificial", "Artifacts", "partifact", " artificate", "partifacts", "artifacts", "anifact", "arifact", "artificate", "anificial", "anifacts", "ardificial", "ardifact", "artificial", "ardificate", "ardifacts", "anificate", " artifacts", "Artifact", "arifacts"], "destinationPath": ["destificationPath", "destociationDisk", "destventionPath", "destinationInfo", "destinatorpath", "destesticAt", "destinatorHost", "destitutionPoint", "destATIONParent", "destinatedChain", "destitutionpath", "termininerpath", "destinationLocation", "destregationPath", "destinatorPath", "destitutionPath", "destregationpath", "destinationHost", "destigationPath", "destationLocation", "destinationDisk", "destATIONPath", "destinateAt", "destinateTime", "descositoryHost", "delinatePoints", "destinatedPath", "DestinationHost", "identinationChain", "termininationpath", "estinationPart", "DestensionPath", "estionpath", "destinatePath", "estinationKey", "DestificationPath", "identinateChain", "destesticJar", "delinationPoints", "destinatorKey", "descinationPort", "estationDir", "destificationDir", "destinateUrl", "destinationPort", "estinoTime", "delinationPath", "generinatePath", "estinoKey", "DestinationPod", "chaininatedDisk", "identinatePath", "destesticSystem", "desticationTemp", "desticationPath", "descinationHost", "estationPath", "destinationPATH", "delinationLog", "chaininatedDriver", "destATIONHost", "termininationTarget", "DestensionPoint", "desturationpath", "destranceForm", "destinerJar", "generinationSystem", "destinoDir", "delinateLog", "destinationName", "destinationTime", "destinateChain", "generinateSystem", "destinatorInfo", "destinatedNow", "identinateKey", "destinatorPATH", "desturationPath", "DestinationLocation", "destensionPoint", "destinateName", "DestinationTemp", "DestinationUrl", " destociationPath", " destociationTarget", "origininationNow", "destinationDriver", "destinoKey", "destinerTarget", "destationHost", "desturationTarget", "desturationJar", "destinateJar", "destinatedTarget", "estionPATH", "destinatePart", "destacementTime", "descositoryParent", "destinationAt", "destranceLog", "termininationJar", "destionPath", "origininationPath", "estinationTime", "destensionTemp", "destrancePoints", "destationUrl", "DestificationDir", "destinerSystem", "destinerDir", "origininatedForm", "destinerpath", "destinationKey", "destregationTarget", "destinoTime", "destociationDir", "destrancePath", "destinoPoint", "destinoPath", "destationPart", "DestensionTemp", "destinatedInfo", "generinateJar", "destensionHost", "generinationPath", "destinoHost", "destinationSystem", "destociationTarget", "destigationNow", "destinationDir", "desticationPod", "destATIONPort", " destinationTarget", "desticationDir", "destitutionPATH", "destociationForm", "estinationHost", "destensionPod", "delinatePath", "destociationDriver", "destacementName", "destigationChain", "destinateInfo", "destinationLog", "destinationJar", "destificationLocation", "descinationParent", "DestinationPoint", "destinantDir", "destinateSystem", "destinateForm", "estionPath", "descositoryPath", "descinationPath", "destinatedDriver", "estinationPath", "DestensionHost", "destionPATH", "destinationTemp", "DestensionPod", "termininerPath", "estinationDir", "destinationForm", "termininerJar", "destociationPath", "destinationNow", "destinationpath", "delinationForm", "destinateDir", "estinationpath", "delinateForm", "DestificationLocation", " destinationpath", "destinateNow", "destinatedDisk", "destinatorPoint", "destinateKey", "identinationPath", "destinationPart", "destociationPoint", "chaininationHome", "destionPoint", "destociationHome", "estationHost", "identinationInfo", "origininationChain", "generinateAt", "destinationHome", "termininationPath", "destinatedHome", "destinateLocation", "destregationDisk", "destinerHost", "destacementKey", "destinationPod", "destificationUrl", "estationPart", "destinatorPort", "destesticPath", "estinoPath", "DestensionDir", "destventionDisk", "DestinationPath", "origininatedChain", "destinatedKey", " destociationpath", "destinateLog", "destositoryParent", "identinateInfo", "estinationName", "destinoName", "destinationParent", "destinatedForm", "descositoryPort", "origininatedPath", "destinatePoints", "destociationPoints", "destationPath", "destinerPath", "chaininationPath", "destositoryPath", "destinerAt", "estinationPoint", "estinoName", "identinationKey", "destventionDriver", "origininationForm", "destinantTemp", "estionPoint", "destociationLog", "destventionHome", "destensionPath", "DestinationDir", "origininatedNow", "destinerPart", "destigationForm", "destacementPath", "destinateHost", "destinantPod", "destociationpath", "destociationHost", "destinatorChain", "destinationTarget", "chaininatedHome", "destinateTarget", "destositoryPort", "destinatedpath", "destinantPath", "destinationUrl", "generinationAt", "termininerTarget", "destinatorParent", "DestificationUrl", "destionpath", " destinationDisk", "destensionDir", "chaininatedPath", "destinatepath", "destinationPoints", "destositoryHost", "estinationPATH", "destinationPoint", "chaininationDisk", "generinationJar", "destinationChain", " destociationDisk", "chaininationDriver", "destationDir"], "in": ["d", "file", "id", "io", "t", "reader", " IN", "r", "c", "IN", "n", "i", "inner", "m", "f", "o", "din", "doc", "input", "In", "ins", "l", "info", "bin", "w"], "out": ["ln", "err", "os", "v", "log", "file", "p", "io", "ger", "print", "oe", "b", "e", "obj", "nr", "nt", "up", "t", "msg", "aos", "output", "conf", "inv", "gen", "go", "c", "null", "n", "ex", "to", "inner", "write", "res", "outer", "f", "dis", "o", "screen", "net", "s", "raw", "conn", "cn", "ch", "cfg", "all", "gr", "writer", "println", "client", "u", "sys", "OUT", "report", "or", "Out", "list", "ins", "l", "cache", "it", "cmd", "ou", "outs", "can", "co", "con", "w"], "root": ["dir", " roots", "p", "parent", "id", "start", "child", "context", "_", "r", "parents", "Template", "node", "scope", "ok", "m", "initial", "dump", "config", "def", "table", "create", "impl", "tree", "name", "println", "Root", "data", "chain", "group", "json", "de", "graph", "New", "roots", "se"]}}
{"id1": "23532405", "id2": "18693224", "code1": "    public void persist(FreeFormConfigurable ffConfigurable, String relativePath) {\n        File file = getConfigFile(ffConfigurable, relativePath, PROPERTIES_CONFIG_EXT);\n        InputStream is = ffConfigurable.getInputConfigStream();\n        try {\n            OutputStream os = new FileOutputStream(file);\n            IOUtils.copy(is, os);\n        } catch (Exception e) {\n            throw new ConfigurationException(\"Failed to store free from config for class \" + ffConfigurable.getClass().getName() + \" into file \" + file.getAbsolutePath());\n        }\n    }\n", "code2": "    public void runDynusT(final boolean cleanUp) {\n        final String[] exeFiles = new String[] { \"DynusT.exe\", \"DLL_ramp.dll\", \"Ramp_Meter_Fixed_CDLL.dll\", \"Ramp_Meter_Feedback_CDLL.dll\", \"Ramp_Meter_Feedback_FDLL.dll\", \"libifcoremd.dll\", \"libmmd.dll\", \"Ramp_Meter_Fixed_FDLL.dll\", \"libiomp5md.dll\" };\n        final String[] modelFiles = new String[] { \"network.dat\", \"scenario.dat\", \"control.dat\", \"ramp.dat\", \"incident.dat\", \"movement.dat\", \"vms.dat\", \"origin.dat\", \"destination.dat\", \"StopCap4Way.dat\", \"StopCap2Way.dat\", \"YieldCap.dat\", \"WorkZone.dat\", \"GradeLengthPCE.dat\", \"leftcap.dat\", \"system.dat\", \"output_option.dat\", \"bg_demand_adjust.dat\", \"xy.dat\", \"TrafficFlowModel.dat\", \"parameter.dat\" };\n        log.info(\"Creating iteration-directory...\");\n        File iterDir = new File(this.tmpDir);\n        if (!iterDir.exists()) {\n            iterDir.mkdir();\n        }\n        log.info(\"Copying application files to iteration-directory...\");\n        for (String filename : exeFiles) {\n            log.info(\"  Copying \" + filename);\n            IOUtils.copyFile(new File(this.dynusTDir + \"/\" + filename), new File(this.tmpDir + \"/\" + filename));\n        }\n        log.info(\"Copying model files to iteration-directory...\");\n        for (String filename : modelFiles) {\n            log.info(\"  Copying \" + filename);\n            IOUtils.copyFile(new File(this.modelDir + \"/\" + filename), new File(this.tmpDir + \"/\" + filename));\n        }\n        for (File f : new File(this.modelDir).listFiles()) {\n            if (f.getName().toLowerCase(Locale.ROOT).endsWith(\".dws\")) {\n                log.info(\"  Copying \" + f.getName());\n                IOUtils.copyFile(f, new File(this.tmpDir + \"/\" + f.getName()));\n            }\n        }\n        String logfileName = this.tmpDir + \"/dynus-t.log\";\n        String cmd = this.tmpDir + \"/DynusT.exe\";\n        log.info(\"running command: \" + cmd + \" in directory \" + this.tmpDir);\n        int timeout = 7200;\n        int exitcode = ExeRunner.run(cmd, logfileName, timeout, this.tmpDir);\n        if (exitcode != 0) {\n            throw new RuntimeException(\"There was a problem running Dynus-T. exit code: \" + exitcode);\n        }\n        if (cleanUp) {\n            for (String filename : exeFiles) {\n                log.info(\"  Deleting \" + filename);\n                new File(this.tmpDir + \"/\" + filename).delete();\n            }\n        }\n    }\n", "label": 1, "substitutes": {"persist": ["Persiste", "remain", "remist", "insain", "remiste", "persiste", "Persist", "insister", "insiste", "remister", "Persister", "insist", "persain", "persister", "Persain"], "ffConfigurable": ["ffConfuer", "ffConfigurationurable", "ffCertured", "effConfigutable", "uffConfiguer", "uffconfigurable", "ffRequestorable", "ffRequesturing", "ffconfiguring", "ffConfurable", "efConfigurable", "ffConfigurationured", "ffConfigURA", "ffCertural", "ffConfiguring", "effConfigurated", "ffCerturable", "efConfiguring", "effPorturer", "ffconfigural", "ffConfigurationurated", "effCerturable", "ffConfurated", "ffConfigorable", "efconfigurable", "ffConfigurationURA", "effConfigURA", "effPorturated", "effCerturated", "uffConfiguring", "ffLogutable", "ffLogurated", "ffconfigurate", "effPortutable", "ffRequesturable", "effConfigurable", "ffSpecuring", "ffCertURA", "ffCerturated", "effCertured", "ffconfigurated", "efconfigurate", "uffconfigorable", "ffRequestuer", "effConfigurer", "ffconfigURA", "efConfigurate", "ffConfigural", "ffPortutable", "ffconfigorable", "ffConfigutable", "ffPorturer", "ffConfigurate", "uffConfigurable", "efConfigural", "effCertURA", "efconfiguring", "uffconfiguring", "uffconfiguer", "ffPorturable", "ffconfigured", "ffConfigurated", "ffConfurer", "ffConfuring", "ffConforable", "ffSpecurate", "ffconfigurable", "ffConfigurer", "ffconfiguer", "uffConfigorable", "effConfigured", "ffConfutable", "ffConfigured", "ffSpecurable", "ffLogurer", "efconfigural", "ffCerturate", "ffSpecural", "effPorturable", "ffPorturated", "ffConfiguer", "ffLogurable", "ffCerturing"], "relativePath": ["qualifiedName", "relRoot", " relativeUrl", "relativeFile", "absolutePath", "relDir", "qualifiedDir", "absoluteFile", "qualifiedPath", "absoluteRoot", " relativeRoot", " relativeFile", "absoluteName", " relativeName", "absoluteDir", "relUrl", "relativeDir", " relativeDir", "qualifiedFile", "absoluteUrl", "relativeName", "relativeRoot", "relPath", "relativeUrl"], "file": ["local", "path", "force", "lock", "string", "fil", "dir", "log", "queue", "resource", "FILE", "store", "ile", "e", "class", "al", "File", "output", "work", "filename", "rule", "issue", "url", "view", "word", "to", "port", " File", "auto", "link", "f", "base", "set", "play", "table", "buffer", "page", "message", "format", "out", "project", "user", "fp", "db", "create", "document", "name", "spec", "template", "frame", "folder", "le", "memory", "image", "use", "header", "list", "handle", "pool", "full", "stream", "entry", "command"], "is": ["js", "iss", "ic", "isl", "isa", "ists", "sis", "in", "xs", "ls", "ist", "ais", "iris", "bits", "i", "isc", "ios", "are", " Is", "ib", "bis", "fs", "es", "IS", "ms", "s", "bs", "lis", "its", "isin", "ris", "im", "ins", "Is", "nis", "us", "ip", "ir", "isi", "ires", "iso"], "os": ["cos", "oos", "bos", "oses", " Os", "des", "oz", "io", "ose", "ot", "mot", "ox", "OS", "ls", "si", "ols", "i", "ios", "obs", "fs", "o", "ms", "osi", "bs", "los", "oss", "oS", "ops", "ds", "sys", "Os", "us", "pos", "ui", "es", "oa", "iso", "ys"]}}
{"id1": "6379126", "id2": "11952735", "code1": "    public boolean gerarTutorialPage() {\n        try {\n            File indexDir = criarDiretorioSite();\n            File cssDir = criarDiretorioCss();\n            File capDir = criarDiretorioCapitulos();\n            File licDir = criarDiretorioLicoes();\n            File midDir = criarDiretorioMidias();\n            File filesDir = criarDiretorioArquivos();\n            File videosDir = new File(filesDir + \"/videos\");\n            videosDir.mkdir();\n            File imagensDir = new File(filesDir + \"/imagens\");\n            imagensDir.mkdir();\n            String local = System.getProperty(\"user.dir\");\n            FileChannel srcCss1 = new FileInputStream(local + \"/bin/style/layout.css\").getChannel();\n            FileChannel destCss1 = new FileOutputStream(cssDir + \"/layout.css\").getChannel();\n            destCss1.transferFrom(srcCss1, 0, srcCss1.size());\n            srcCss1.close();\n            destCss1.close();\n            FileChannel srcCss2 = new FileInputStream(local + \"/bin/style/elementos.css\").getChannel();\n            FileChannel destCss2 = new FileOutputStream(cssDir + \"/elementos.css\").getChannel();\n            destCss2.transferFrom(srcCss2, 0, srcCss2.size());\n            srcCss2.close();\n            destCss2.close();\n            FileChannel srcCss3 = new FileInputStream(local + \"/bin/style/estilo-cap-lic-mid.css\").getChannel();\n            FileChannel destCss3 = new FileOutputStream(cssDir + \"/estilo-cap-lic-mid.css\").getChannel();\n            destCss3.transferFrom(srcCss3, 0, srcCss3.size());\n            srcCss3.close();\n            destCss3.close();\n            FileChannel srcCss4 = new FileInputStream(local + \"/bin/style/layout_ie.css\").getChannel();\n            FileChannel destCss4 = new FileOutputStream(cssDir + \"/layout_ie.css\").getChannel();\n            destCss4.transferFrom(srcCss4, 0, srcCss4.size());\n            srcCss4.close();\n            destCss4.close();\n            FileChannel srcCss5 = new FileInputStream(local + \"/bin/style/elementos_ie.css\").getChannel();\n            FileChannel destCss5 = new FileOutputStream(cssDir + \"/elementos_ie.css\").getChannel();\n            destCss5.transferFrom(srcCss5, 0, srcCss5.size());\n            srcCss5.close();\n            destCss5.close();\n            FileChannel srcCss6 = new FileInputStream(local + \"/bin/style/estilo-cap-lic-mid_ie.css\").getChannel();\n            FileChannel destCss6 = new FileOutputStream(cssDir + \"/estilo-cap-lic-mid_ie.css\").getChannel();\n            destCss6.transferFrom(srcCss6, 0, srcCss6.size());\n            srcCss6.close();\n            destCss6.close();\n            copiarMidias(videosDir, imagensDir);\n            escreverMidiasPage(midDir);\n            escreverLicoesPage(licDir);\n            escreverCapitulosPages(capDir);\n            FileWriter indexHtml = new FileWriter(indexDir + \"/index.html\");\n            indexHtml.write(escreverIndexHead() + escreverBodyHeader() + escreverIndexBodyContent() + escreverFooter());\n            indexHtml.close();\n            System.out.println(\"Site gerado com sucesso\");\n            JOptionPane.showMessageDialog(null, \"Web Site gerado com sucesso\", \"\\\\o/\", JOptionPane.INFORMATION_MESSAGE);\n            return true;\n        } catch (Exception e) {\n            e.printStackTrace();\n            System.err.println(\"Site n\u00e3o gerado\");\n            JOptionPane.showMessageDialog(null, \"Web Site n\u00e3o gerado corretamente\", \"Ops...\", JOptionPane.ERROR_MESSAGE);\n            return false;\n        }\n    }\n", "code2": "    public static boolean copyFile(String sourceName, String destName) {\n        FileChannel sourceChannel = null;\n        FileChannel destChannel = null;\n        boolean wasOk = false;\n        try {\n            sourceChannel = new FileInputStream(sourceName).getChannel();\n            destChannel = new FileOutputStream(destName).getChannel();\n            destChannel.transferFrom(sourceChannel, 0, sourceChannel.size());\n            wasOk = true;\n        } catch (Throwable exception) {\n            logger.log(Level.SEVERE, \"Exception in copyFile\", exception);\n        } finally {\n            try {\n                if (sourceChannel != null) sourceChannel.close();\n            } catch (Throwable tt) {\n            }\n            try {\n                if (destChannel != null) destChannel.close();\n            } catch (Throwable tt) {\n            }\n        }\n        return wasOk;\n    }\n", "label": 1, "substitutes": {"gerarTutorialPage": [" crearTutorialScreen", " crearTeoyServer", " crearTeutorialServer", " crearTiaryServer", " crearTiaryScreen", " crearTutorialPage", " crearTeutorialPages", " crearToyServer", " crearTiaryPages", " crearTeoyPages", " crearTeutorialPage", " crearTiblPages", " crearTeoyPage", " crearTeutorialScreen", " crearToyScreen", " crearToyPages", " crearTiblScreen", " crearTiblServer", " crearToyPage", " crearTiblPage", " crearTeoyScreen", " crearTutorialServer", " crearTutorialPages", " crearTiaryPage"], "indexDir": ["scriptDIR", "htmlFolder", "htmlDIR", "indexPath", "scriptDir", "appFolder", "htmlDir", "scriptPath", "scriptFolder", "indexDIR", "appDIR", "appPath", "indexFolder", "appDir", "htmlPath"], "cssDir": ["statsDir", "cmsdir", "csDirectory", "cmsDir", "stylesDb", "stylesDIR", "cmsDIR", "cssRect", "csdir", "icsDir", "cssDirectory", "statsDb", "ssDIR", "ssDirectory", "cssUrl", "icsDirectory", "stylesUrl", "csRect", "stylesDir", "cssdir", "ssDir", "statsUrl", "cmsDirectory", "stylesDirectory", "ssRect", "cssDIR", "ssDb", "csUrl", "ssdir", "cssDb", "icsdir", "stylesdir", "csDir", "icsRect", "ssUrl"], "capDir": ["cmpFile", "configTier", "cmpDb", "CapTier", "capTier", "CapFile", "CapDb", "capFile", "cmpTier", "configDb", "configDir", "cmpDir", "configFile", "CapDir", "capDb"], "licDir": ["liaDb", "licDs", "liaDs", "libDs", "vidDir", "vidRot", "licDb", "libDb", "libRot", "vidDs", "liaRot", "liaDir", "vidDb", "libDir", "licRot"], "midDir": ["pidCat", "manCat", "midDirectory", "midRot", "mnCat", "pidDir", "manRot", "mnDir", "mnRot", "manDir", "pidRot", "pidDirectory", "mnDirectory", "manDirectory", "midCat"], "filesDir": ["framesFolder", "framesIter", "sectionsRect", "framesRel", "videosdir", "framesDir", "sectionsDir", "pagesDir", "filesFolder", "videosRel", "tagsIter", "framesFix", "pagesFolder", "framesRect", "tagsJar", "filesFix", "filesDIR", "filesdir", "videosFolder", "pagesRel", "framesDIR", "sectionsIter", "filesRel", "framesdir", "pagesdir", "tagsRect", "imagesDir", "sectionsJar", "videosFix", "filesIter", "filesJar", "framesJar", "imagesFix", "filesRect", "videosDIR", "imagesDIR", "imagesFolder", "tagsDir"], "videosDir": ["versionsFile", "versionsFolder", "videosdir", "imagesdir", "imagesFile", "videosFile", "videosFolder", "videodir", " videosFolder", "imagesDir", "videoFolder", "imagesFolder", " videosFile", "videoDir", "versionsDir", " videosdir"], "imagensDir": ["imagensesDir", "imagensFolder", " imagensIn", "imagetsDir", "imagotsDir", "imagmesDirectory", "imagearsDir", "imagotsDirectory", " imagensFolder", "imgetsDir", "imgensDir", " imagensDb", "imagensesDb", " imagetsDb", "imgetsFolder", "imgetsDirectory", "imagetsDb", "imagmesDir", "imagetsDirectory", "imagotsFolder", "imagotsDIR", "imagetsIn", " imagetsIn", "imagearsFolder", "imgensDIR", "imagensIn", "imagetsDIR", "imagensDirectory", "imagmesDIR", "imagmesFolder", "imagensesFolder", "imagetsFolder", "imagensDIR", "imagensesIn", "imagearsDb", "imagearsIn", " imagetsFolder", " imagetsDir", "imagensDb", "imgensDirectory", "imgensFolder", "imgetsDIR"], "local": ["where", "system", "localhost", "val", "western", "dir", "lib", "lock", "parent", "back", "mail", "part", "test", "remote", "alpha", "internal", "managed", "al", "current", "south", "upper", "present", "location", "valid", "initial", "Local", "base", "pal", "single", "server", "serial", "land", "loc", "global", "root", "tmp", "simple", "central", "pid", "shared", "client", "hid", "util", "http", "home", "self", "list", "personal", "l", "installed", "standard", "full", "state", "temp", "install"], "srcCss1": ["srcSss3", "srcCssasso", "srcSCss2", "srcCssOnce", "srcScss2", "srcCson2", "srcCSS0", "srcCass1", "srcScss3", "srcSCss0", "srcCass10", "srcCxx10", "srcSCss1", "srcCson1", "srcCfgOnce", "srcLass10", "srcChess10", "srcLassOnce", "srcCss10", "srcCcss0", "srcCcss3", "srcLssOnce", "srcCson10", "srcChess0", "srcSCass3", "srcChess1", "srcCassasso", "srcCass0", "srcSssOnce", "srcCSS2", "srcSss2", "srcCcss1", "srcCfg2", "srcChessasso", "srcCss0", "srcSCass1", "srcCfg1", "srcCass2", "srcSss1", "srcLss2", "srcCassOnce", "srcCxxasso", "srcCass3", "srcCSS1", "srcLss10", "srcCxx1", "srcSCass0", "srcSCass2", "srcScssOnce", "srcCfg3", "srcLass1", "srcLss1", "srcCcssOnce", "srcCSS3", "srcCcss10", "srcScss1", "srcCsonOnce", "srcSCss3", "srcCcss2", "srcLass2", "srcCxx0"], "destCss1": ["destCass5", "destSass0", "destChess0", "destCrss0", "destCxxPre", "destScss0", "destCcss100", "destCxx2", "destScss1", "destSss2", "destCss0", "destChess100", "destSassPre", "destCass2", "destCxx0", "destCcssPre", "destScss2", "destChess1", "destSss5", "destScss5", "destCass1", "destCxx1", "destCcss2", "destSss100", "destSss1", "destCss100", "destCcss1", "destCrss1", "destCassPre", "destSss0", "destCrss2", "destCcss0", "destSass100", "destSssPre", "destCcss5", "destSass1", "destCssPre", "destCrss5", "destCass100", "destSass2", "destCass0", "destChess2"], "srcCss2": ["srcCcss4", "srcCsv52", "srcCtx1", "srcSCss2", "srcCss8", "srcCsv2", "srcCffee1", "srcCson2", "srcCsv3", "srcCcssTwo", "srcSCss1", "srcCson1", "srcCfg4", "srcCcss52", "srcCson8", "srcCcss3", "srcCtxTwo", "srcCson4", "srcCcss48", "srcCsv48", "srcCcss1", "srcCtx2", "srcCfg8", "srcCfg2", "srcCsv1", "srcCass4", "srcSCass1", "srcCfg1", "srcCass2", "srcCss52", "srcCss48", "srcCffee52", "srcSCss4", "srcCssTwo", "srcCassTwo", "srcCcss8", "srcSCass2", "srcSCssTwo", "srcSCassTwo", "srcCffee3", "srcSCass4", "srcCffee2", "srcCass1", "srcCcss2", "srcCtx4"], "destCss2": ["destCcss02", "destCcs42", "destCrosse1", "destSss2", "destCcss56", "destCcs2", "destCass3", "destCcss42", "destCss42", "destCss56", "destCass2", "destCSS3", "destCrosse2", "destCcss4", "destCcs3", "destCss02", "destCcss3", "destCass1", "destCass56", "destChess56", "destCcss2", "destSss1", "destCcss1", "destCass4", "destCSS42", "destSss3", "destSss56", "destCSS2", "destSass3", "destCSS02", "destSass1", "destCcs02", "destSass56", "destSass2", "destChess2", "destChess1", "destChess3", "destCrosse4"], "srcCss3": ["srcSss43", "srcScss3", "srcCossthree", "srcCrss1", "srcCcssThird", "srcCass4", "srcCass03", "srcCass3", "srcCSS1", "srcCass43", "srcCsv3", "srcCxx3", "srcCcss3", "srcCSS2", "srcCss03", "srcCsv1", "srcScss03", "srcCrss2", "srcCcss43", "srcCess6", "srcCoss3", "srcCcss4", "srcCcssThree", "srcCassThree", "srcCessthree", "srcCessThree", "srcCrss3", "srcCcssthree", "srcScss43", "srcCoss6", "srcSss3", "srcCess4", "srcCsv2", "srcCcss03", "srcCessThird", "srcCssthree", "srcCcss6", "srcCassThird", "srcCssThree", "srcCess3", "srcCxx43", "srcSss03", "srcCss43", "srcCssThird", "srcCxx03", "srcCSS3"], "destCss3": ["destCcss23", "destCss53", "destCass3", "destCass23", "destCSS30", "destCass2", "destCSS3", "destCass30", "destCcss53", "destCcss83", "destCcss3", "destCass03", "destCss23", "destCass1", "destCls83", "destCss83", "destCcss2", "destCls3", "destCfg3", "destCcss1", "destCess83", "destCess53", "destCls53", "destCcss30", "destCfg23", "destCcss03", "destCess3", "destCSS1", "destCSS2", "destCss03", "destCss30", "destCfg03"], "srcCss4": ["srcCSS4", "srcCcss4", "srcCsv2", "srcScss2", "srcCSSFour", "srcCcssFour", "srcSssFour", "srcCcss5", "srcCsv5", "srcSss2", "srcCSS2", "srcSss5", "srcCSS5", "srcScss4", "srcCssFour", "srcCsv4", "srcCsvFour", "srcScssFour", "srcScss5", "srcCcss2", "srcSss4"]}}
{"id1": "13152325", "id2": "13207437", "code1": "    public void loadExistingAntlibs(ClassLoader classLoader) {\n        URL antlibUrl;\n        URI antlibUri;\n        try {\n            Enumeration<URL> resources = classLoader == null ? ClassLoader.getSystemResources(antLibsResource) : classLoader.getResources(antLibsResource);\n            while (resources.hasMoreElements()) {\n                URL url = resources.nextElement();\n                InputStream stream = url.openStream();\n                BufferedReader reader = new BufferedReader(new InputStreamReader(stream, \"UTF-8\"));\n                for (String line = reader.readLine(); line != null; line = reader.readLine()) {\n                    String pkg = line.trim();\n                    URI uri = URI.create(\"antlib:\" + pkg);\n                    URI resource2antlib = URI.create(antLibsResource2root + pkg.replace('.', '/') + (pkg.isEmpty() ? \"\" : \"/\") + \"antlib.xml\");\n                    antlibUri = NetUtils.resolve(url.toURI(), resource2antlib);\n                    try {\n                        antlibUrl = antlibUri.toURL();\n                    } catch (IllegalArgumentException e) {\n                        System.err.println(\"base uri: \" + url);\n                        System.err.println(\"relativepath: \" + resource2antlib);\n                        System.err.println(\"target uri: \" + antlibUri);\n                        throw new RuntimeException(antlibUri.toString(), e);\n                    }\n                    loadAntLib(antlibUrl, uri);\n                }\n                reader.close();\n                stream.close();\n            }\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        } catch (URISyntaxException e) {\n            throw new RuntimeException(e);\n        }\n    }\n", "code2": "    public Object sendRequestObjectResponse(java.lang.String servletName, java.lang.String request) {\n        String osRoot = OSRoot.getRoot();\n        String fname = \"\";\n        Object retobj = null;\n        String myurl = java.util.prefs.Preferences.systemRoot().get(\"serverurl\", \"\");\n        String myport = java.util.prefs.Preferences.systemRoot().get(\"portno\", \"8080\");\n        if (myport == null || myport.trim().equals(\"\")) {\n            myport = \"80\";\n        }\n        if (this.serverURL == null) {\n            try {\n                java.net.URL codebase = newgen.presentation.NewGenMain.getAppletInstance().getCodeBase();\n                if (codebase != null) serverURL = codebase.getHost(); else serverURL = \"localhost\";\n            } catch (Exception exp) {\n                exp.printStackTrace();\n                serverURL = \"localhost\";\n            }\n            newgen.presentation.component.IPAddressPortNoDialog ipdig = new newgen.presentation.component.IPAddressPortNoDialog(myurl, myport);\n            ipdig.show();\n            serverURL = myurl = ipdig.getIPAddress();\n            myport = ipdig.getPortNo();\n            java.util.prefs.Preferences.systemRoot().put(\"serverurl\", serverURL);\n            java.util.prefs.Preferences.systemRoot().put(\"portno\", myport);\n            System.out.println(serverURL);\n        }\n        try {\n            System.out.println(\"http://\" + serverURL + \":\" + myport + \"/newgenlibctxt/\" + servletName);\n            java.net.URL url = new java.net.URL(\"http://\" + serverURL + \":\" + myport + \"/newgenlibctxt/\" + servletName);\n            java.net.URLConnection urlconn = (java.net.URLConnection) url.openConnection();\n            urlconn.setDoOutput(true);\n            urlconn.setRequestProperty(\"Content-type\", \"text/xml; charset=UTF-8\");\n            java.io.OutputStream os = urlconn.getOutputStream();\n            String req1xml = request;\n            java.util.zip.CheckedOutputStream cos = new java.util.zip.CheckedOutputStream(os, new java.util.zip.Adler32());\n            java.util.zip.GZIPOutputStream gop = new java.util.zip.GZIPOutputStream(cos);\n            java.io.OutputStreamWriter dos = new java.io.OutputStreamWriter(gop, \"UTF-8\");\n            System.out.println(req1xml);\n            try {\n                java.io.FileOutputStream pw = new java.io.FileOutputStream(\"log.txt\");\n                pw.write(req1xml.getBytes());\n                pw.flush();\n                pw.close();\n            } catch (Exception exp) {\n                exp.printStackTrace();\n            }\n            dos.write(req1xml);\n            dos.flush();\n            dos.close();\n            System.out.println(\"url conn: \" + urlconn.getContentEncoding() + \"  \" + urlconn.getContentType());\n            java.io.InputStream ios = urlconn.getInputStream();\n            java.io.File f1 = new java.io.File(osRoot + \"/localattachments/Reports\");\n            if (!f1.exists()) f1.mkdirs();\n            java.io.File file = null;\n            if (urlconn.getContentType() != null && urlconn.getContentType().trim().equals(\"application/vnd.oasis.opendocument.text\")) {\n                file = new java.io.File(osRoot + \"/localattachments/Reports/\" + System.currentTimeMillis() + \".odt\");\n            } else if (urlconn.getContentType() != null && urlconn.getContentType().trim().equals(\"text/html\")) {\n                file = new java.io.File(osRoot + \"/localattachments/Reports/\" + System.currentTimeMillis() + \".html\");\n            } else {\n                file = new java.io.File(osRoot + \"/localattachments/Reports/\" + System.currentTimeMillis() + \".xls\");\n            }\n            file = new java.io.File(file.getAbsolutePath());\n            java.io.FileOutputStream fos = new java.io.FileOutputStream(file);\n            int c;\n            while ((c = ios.read()) != -1) fos.write(c);\n            fos.close();\n            ios.close();\n            fname = file.getAbsolutePath();\n            System.out.println(fname);\n            newgen.presentation.component.Utility.getInstance().showBrowser(\"file://\" + fname);\n        } catch (Exception exp) {\n            exp.printStackTrace(System.out);\n            javax.swing.JOptionPane.showMessageDialog(null, \"<html>Could not establish connection with the server, <br>Please verify server name/IP adress, <br>Also check if NewGenLib server is running</html>\", \"Critical error\", javax.swing.JOptionPane.ERROR_MESSAGE);\n        }\n        return fname;\n    }\n", "label": 1, "substitutes": {"loadExistingAntlibs": ["loadExistingAntlibFiles", "loadExistingantlibd", "loadExistingantLibFiles", "loadExistingantlibz", "loadExistingAntibz", "loadExistingAntibd", "loadExistingAntibs", "loadExistingantLibd", "loadExistingAntlibd", "loadExistingAntribz", "loadExistingAntLibs", "loadExistingAntribd", "loadExistingAntibFiles", "loadExistingAntLibz", "loadExistingAntribFiles", "loadExistingAntribs", "loadExistingantLibs", "loadExistingantlibFiles", "loadExistingAntLibFiles", "loadExistingAntlibz", "loadExistingantLibz", "loadExistingAntLibd", "loadExistingantlibs"], "classLoader": ["ClassReader", " classPath", " ClassPath", "classPath", "ClassLoader", " Classloader", " ClassReader", " ClassLoad", "ClassLoad", "classReader", "classloader", "Classloader", " classReader", " classLoad", "classLoad", "ClassPath", " ClassLoader", " classloader"], "antlibUrl": ["antlibraryUrl", "antappUr", "antlibUr", "antsLibRel", "AntLibUrl", "antlibraryRel", "antLibUr", "antdburl", "antlibraryURL", "antriburl", "antdbURL", "antdbUr", "antlabStr", "antLibStr", "antsLibUr", "antslibStr", "antribUr", "antdbUrl", "antLibURL", "antsliburl", "antappURL", "antliburl", "Antliburl", "antLibUrl", "antlibraryurl", "antsLiburl", "antslibUr", "antlabUrl", "antribURL", "antappRel", "AntlibURL", "antlibStr", "AntLiburl", "AntlibUr", "antslibRel", "antslibUrl", "antlibRel", "antribUrl", "antlibraryUr", "antslibURL", "AntLibURL", "antlabUr", "antsLibStr", "antlaburl", "antlibraryStr", "antappUrl", "antLibRel", "antLiburl", "antsLibUrl", "antsLibURL", "antlibURL", "AntlibUrl", "AntLibUr"], "antlibUri": ["antLibUtpi", "antLibIrid", "antlibOr", "antlibUtRI", "antlibUmi", "antlibIris", "antlibURri", "antLibIri", "antlibGeRI", "antlibraryUsr", "antLibUtris", "antlibURRI", "antLibIURI", "antlibGeri", "antlibUsr", "antlibEUpi", "antlibUsne", "antLibUrid", "antlibUtpi", "antlibIpi", "antlibUpi", "antLibUtri", "antlibURmi", "antlibUsURI", "antLibUris", "antlibUsmi", "antLibUri", "antlibUis", "antlibUris", "antlibraryUr", "antLibIris", "antLibUpi", "antlibOne", "antlibUtmi", "antlibIne", "antlibraryUmi", "antlibraryURI", "antlibUtris", "antlibEUris", "antlibraryUne", "antlibEURI", "antlibGeris", "antlibUrid", "antlibEri", "antlibUsis", "antlibIURI", "antlibEUri", "antlibraryUsmi", "antlibURris", "antlibIis", "antlibURI", "antlibraryUsne", "antlibUtri", "antlibEris", "antlibEis", "antlibUURI", "antlibUr", "antlibUsri", "antlibIrid", "antLibIRI", "antlibIr", "antlibraryUris", "antlibraryUsris", "antLibUis", "antlibOris", "antlibUsRI", "antLibIis", "antlibUsris", "antlibIri", "antlibUtrid", "antlibraryUri", "antLibURI", "antlibraryUsRI", "antLibUURI", "antlibOri", "antlibUne", "antlibGerid", "antlibraryUsri", "antlibIRI"], "resources": ["stores", "bytes", "ples", "packages", "builders", "objects", "modules", "groups", "books", "works", "links", "users", "names", "rs", "reports", "headers", "these", "parents", "images", "states", "pages", "res", "ues", "dates", "maps", "workers", "Resources", "ports", "writers", "ries", "models", "files", "events", "actions", "relations", "services", "years", "keys", "iers", "seconds", "checks", "issues", "ions", "types", "classes", "archives", "roots", "values"], "url": ["sl", "path", "address", "gl", "lr", "string", "file", "Url", "li", "abs", "str", "nl", "resource", "char", "remote", "browser", "service", "ls", "r", "dl", "ll", "host", "ssl", "link", "location", "f", "base", "rel", "URL", "server", "web", "loc", "format", "date", "get", "ur", "github", "name", "util", "bel", "http", "source", "rl", "key", "add", "mount", "el", "addr", "l", "request", "xml", "ref", "entry", "lb"], "stream": ["system", "sl", "path", "sample", "file", "sw", "io", "resource", "channel", "Stream", "store", "loader", "history", "context", "row", "stack", "progress", "open", "content", "pipe", "view", "inner", "zip", "feed", "console", "iterator", "buffer", "message", "out", "user", "read", "input", "client", "data", "ream", "socket", "source", "response", "window", "standard", "body"], "reader": ["sample", "layer", "file", "resource", "roller", "length", "rx", "per", "loader", "ner", "row", "Reader", "review", "ri", "r", "range", "query", "ro", "inner", "instance", "rar", "upper", "console", "volume", "runner", "server", "iterator", "iter", "buffer", "dd", "READ", "older", "reads", "reviewed", "writer", "via", "parser", "read", "input", "rr", "client", "readable", "liner", "reading", "socket", "rl", "rer", "driver", "er", "handler", "entry", "collection"], "line": ["text", "ln", "sl", "sample", "cell", "string", "file", "log", "li", "str", "nl", "inline", "point", "print", "lf", "row", "msg", "ls", "len", "range", "n", "block", "label", "port", "profile", "link", "stay", "iter", "buffer", "pe", "page", "lin", "message", "column", "lo", "frame", "liner", "comment", "lines", "ine", "online", "le", "eline", "header", "Line", "l", "handle", "pos", "LINE", "next", "body", "sql", "entry", "word"], "pkg": ["jar", "path", "module", "pod", "rpm", "perm", "cmp", "ppa", "Package", "packages", "dir", "pt", "p", "lang", "lib", "var", "pair", "mod", "part", "fx", "imp", "msg", "family", "pg", "kg", "cp", "pack", "dl", "ctx", "kid", "alias", "port", "zip", "gp", "quote", "col", "plugin", "prefix", "root", "init", "pid", "req", "name", "deb", "patch", "key", "password", "pp", "mask", "ip", "wd", "entry"], "uri": ["local", "system", "address", "proxy", "file", "term", "id", "io", "resource", "uid", "ri", "mi", "library", "i", "connection", "pi", "profile", "URI", "cli", "link", "location", " URI", "base", "api", "ur", "reference", "util", "iri", "http", "source", "folder", "uu", "ip", "directory", "ui", "domain", "handler"], "resource2antlib": ["resource2ntLib", "resource2agentlib", "resource2AntLib", "resource2antslib", "resource2ANTlib", "resource2antsconfig", "resource2etli", "resource2antib", "resource2boltloc", "resource2Antlibrary", "resource2Antlib", "resource1antlib", "resource2antloc", "resource1agentib", "resource2antli", "resource2antLib", "resource2ANTib", "resource1antLib", "resource1agentlibrary", "resource2boltlib", "resource2boltconfig", "resource2Antli", "resource1antib", "resource2etLib", "resource2ANTloc", "resource2agentLib", "resource2ntlibrary", "resource2ntlib", "resource2Antib", "resourcetoantconfig", "resourcetoantloc", "resource2antsib", "resourcetoantib", "resourcetoANTconfig", "resource2ntli", "resource2ntib", "resourcetoANTib", "resource2agentlibrary", "resource2antsloc", "resource2antlibrary", "resourcetoANTloc", "resource2etlibrary", "resource2ANTconfig", "resource1agentLib", "resource1agentlib", "resource2agentib", "resource1antlibrary", "resource2etlib", "resource2antconfig", "resource2boltib", "resourcetoANTlib", "resourcetoantlib"]}}
{"id1": "2668634", "id2": "8490297", "code1": "    public WebmillDeploy(String inputName, String outputName, boolean stripLoggers) throws Exception {\n        File tempFile = null;\n        JarFile jin = null;\n        JarOutputStream jout = null;\n        FileChannel srcChannel = null;\n        FileChannel dstChannel = null;\n        try {\n            String portletApplicationName = getPortletApplicationName(outputName);\n            System.out.println(\"portletApplicationName = \" + portletApplicationName);\n            tempFile = File.createTempFile(\"webmill-delpoy-\", \"\");\n            tempFile.deleteOnExit();\n            jin = new JarFile(inputName);\n            jout = new JarOutputStream(new FileOutputStream(tempFile));\n            Document webXml = null;\n            Document portletXml = null;\n            Document contextXml = null;\n            ZipEntry src;\n            InputStream source;\n            Enumeration zipEntries = jin.entries();\n            while (zipEntries.hasMoreElements()) {\n                src = (ZipEntry) zipEntries.nextElement();\n                source = jin.getInputStream(src);\n                try {\n                    String target = src.getName();\n                    if (WEB_INF_WEB_XML.equals(target)) {\n                        System.out.println(\"Found web.xml\");\n                        webXml = parseXml(source);\n                    } else if (WEB_INF_PORTLET_XML.equals(target)) {\n                        System.out.println(\"Found WEB-INF/portlet.xml\");\n                        portletXml = parseXml(source);\n                    } else if (META_INF_CONTEXT_XML.equals(target)) {\n                        System.out.println(\"Found META-INF/context.xml\");\n                        contextXml = parseXml(source);\n                    }\n                } finally {\n                    source.close();\n                }\n            }\n            if (webXml == null) {\n                throw new IllegalArgumentException(\"WEB-INF/web.xml not found\");\n            }\n            if (portletXml == null) {\n                throw new IllegalArgumentException(\"WEB-INF/portlet.xml not found\");\n            }\n            WebmillWebApplicationRewriter webRewriter = new WebmillWebApplicationRewriter(webXml);\n            webRewriter.processWebXML();\n            WebmillContextRewriter contextRewriter = new WebmillContextRewriter(contextXml, portletApplicationName);\n            contextRewriter.processContextXML();\n            jin = new JarFile(inputName);\n            zipEntries = jin.entries();\n            while (zipEntries.hasMoreElements()) {\n                src = (ZipEntry) zipEntries.nextElement();\n                source = jin.getInputStream(src);\n                try {\n                    String target = src.getName();\n                    String fullTarget = '/' + target;\n                    if (stripLoggers && target.endsWith(\".jar\") && (target.startsWith(\"WEB-INF/lib/commons-logging\") || target.startsWith(\"WEB-INF/lib/log4j\"))) {\n                        System.out.println(\"Skip logger \" + target);\n                        continue;\n                    } else {\n                        if (webRewriter.getRealPortletTldFile() != null && fullTarget.equals(webRewriter.getRealPortletTldFile())) {\n                            System.out.println(\"Skip portlet tld file \" + fullTarget);\n                            continue;\n                        } else if (target.equals(WEB_INF_WEB_XML)) {\n                            System.out.println(\"Skip web.xml file \" + target);\n                            continue;\n                        } else if (target.equals(WEB_INF_PORTLET_XML)) {\n                            System.out.println(\"Skip portlet.xml file \" + target);\n                            continue;\n                        } else if (target.equals(META_INF_CONTEXT_XML)) {\n                            System.out.println(\"Skip context.xml file \" + target);\n                            continue;\n                        }\n                        System.out.println(\"Add file \" + target);\n                    }\n                    addFile(target, source, jout);\n                } finally {\n                    source.close();\n                }\n            }\n            addFile(WEB_INF_WEB_XML, webXml, jout);\n            addFile(WEB_INF_PORTLET_XML, portletXml, jout);\n            addFile(META_INF_CONTEXT_XML, contextXml, jout);\n            System.out.println(\"Attempting to add portlet.tld to war...\");\n            InputStream is = this.getClass().getResourceAsStream(\"/org/riverock/webmill/container/tags/portlet.tld\");\n            if (is == null) {\n                System.out.println(\"Failed to find portlet.tld in classpath\");\n            } else {\n                String portletTldFile = webRewriter.getRealPortletTldFile();\n                if (portletTldFile.charAt(0) == '/') {\n                    portletTldFile = portletTldFile.substring(1);\n                }\n                System.out.println(\"Adding file \" + portletTldFile);\n                try {\n                    addFile(portletTldFile, is, jout);\n                } finally {\n                    is.close();\n                }\n            }\n            jout.close();\n            jin.close();\n            jin = null;\n            jout = null;\n            System.out.println(\"Creating war \" + outputName + \" ...\");\n            System.out.flush();\n            srcChannel = new FileInputStream(tempFile).getChannel();\n            dstChannel = new FileOutputStream(outputName).getChannel();\n            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n            srcChannel.close();\n            srcChannel = null;\n            dstChannel.close();\n            dstChannel = null;\n            tempFile.delete();\n            tempFile = null;\n            System.out.println(\"War \" + outputName + \" created\");\n            System.out.flush();\n        } finally {\n            if (srcChannel != null && srcChannel.isOpen()) {\n                try {\n                    srcChannel.close();\n                } catch (IOException e1) {\n                }\n            }\n            if (dstChannel != null && dstChannel.isOpen()) {\n                try {\n                    dstChannel.close();\n                } catch (IOException e1) {\n                }\n            }\n            if (jin != null) {\n                try {\n                    jin.close();\n                    jin = null;\n                } catch (IOException e1) {\n                }\n            }\n            if (jout != null) {\n                try {\n                    jout.close();\n                    jout = null;\n                } catch (IOException e1) {\n                }\n            }\n            if (tempFile != null && tempFile.exists()) {\n                tempFile.delete();\n            }\n        }\n    }\n", "code2": "    public static void copyFile(File src, File dst) throws IOException {\n        try {\n            InputStream in = new FileInputStream(src);\n            OutputStream out = new FileOutputStream(dst);\n            byte[] buf = new byte[TEMP_FILE_BUFFER_SIZE];\n            int len;\n            while ((len = in.read(buf)) > 0) out.write(buf, 0, len);\n            in.close();\n            out.close();\n        } catch (FileNotFoundException e1) {\n            MLUtil.runtimeError(e1, src.toString());\n        } catch (IOException e2) {\n            MLUtil.runtimeError(e2, src.toString());\n        }\n    }\n", "label": 1, "substitutes": {"inputName": ["interfaceFilename", "InputFilename", "outputNames", "InputName", " inputNames", "interfaceFile", "inputFile", "InputPath", "outputFile", "inputFilename", "InputFile", "outputPath", "interfacePath", "outputFilename", " inputPath", "interfaceName", "inputPath", "InputNames", "inputNames", " inputFile"], "outputName": ["outputType", "OutputNames", "outputNames", "OutputName", "inputPort", " outputDir", " outputNames", "OutputDir", "outputPath", " outputType", "inputDir", " outputPort", "outputDir", " outputPath", "inputPath", "inputType", "OutputType", "inputNames", "OutputPath", "outputPort", "OutputPort"], "stripLoggers": ["stripDebuggers", "skiplogger", "stripDebugReferences", "stripLogger", "stripPathging", "skipLoggers", "stripLogReferences", "stripPathger", "skiplogReferences", "skipLogging", "skipLogReferences", "stripDebugger", "skipLogger", "striplogging", "skiploggers", "striploggers", "striplogReferences", "striplogger", "stripDebugging", "skiplogging", "stripLogging", "stripPathReferences", "stripPathgers"], "tempFile": ["tempPath", " temporaryDir", "temFile", " temporaryField", "tempDir", "Tempfile", "empFile", " tempfile", "empLock", "tmpFile", " tempDir", "TempFile", "tmpLock", "tempLock", "TempPlace", "empfile", "TempDirectory", "temfile", "tempField", "TempDir", "TempPath", "tempfile", "tmpPath", " temporaryFile", "tempPlace", "tempDirectory", "tmpfile", "tmpPlace", " tempDirectory", " tempPlace", "temDir", " temporaryfile", " tempPath", " temporaryDirectory", "temPath", "empField", " temporaryLock", "tmpField", "tmpDir"], "jin": ["ln", "kin", "pin", "tin", "pak", "yang", "quin", "ju", "txt", "rake", "jon", "JR", "nik", "jiang", "jet", "tan", "zon", "ja", "cin", "rison", "ini", "jing", "jo", "jad", "zip", "inx", "nu", " inj", "lin", "erb", "din", "lu", "xi", "vin", "via", "zin", "jc", "jac", "gin", "ran", " Jin", "rir", "john", "jl", "alin", "lah", "rin", "von", "json", "lig", "nin", "pai", "bin", "jen", "thin", "spin", "olin", "jp"], "jout": ["qout", " jou", "jpOut", " jio", "jsout", "zio", "zou", "jaos", "qaos", "zout", "jsin", "jpout", "qou", "qio", "jou", " jOut", "jpin", "jOut", " jaos", "zaos", "jio", "jsOut"], "srcChannel": ["srcChan", " srcchannel", "srcchannel", "sourcechannel", " srcChan", " srcCh", "sourceChannel", "rcCh", "rcchannel", "srcCh", "sourceChan", "rcChannel", "rcChan", "sourceCh"], "dstChannel": ["doutCh", "dgtFile", " ddestChan", " dstCh", "dstFile", "dgtCh", "ddestChan", "dgtChannel", "ddestChannel", "ddestCh", " dstFile", "doutFile", " dstChan", "dstCh", " ddestChannel", "dgtChan", " ddestCh", " ddestFile", "dstChan", "doutChannel", "ddestFile", "doutChan"], "portletApplicationName": ["portletAppType", "portableApplicationName", "portletAppValue", "portletapplicationKey", "portletAppCode", "portableApplicationValue", "portletServiceName", "portletApplicationValue", "portletServiceType", "portletCollectionName", "portableAppName", "portletapplicationType", "portletAppKey", "portletCollectionValue", "portletCollectionCode", "portletapplicationOrder", "portletAppOrder", "portableApplicationOrder", "portableApplicationKey", "portletApplicationType", "portletCollectionType", "portletapplicationName", "portletApplicationCode", "portableApplicationType", "portletApplicationKey", "portableApplicationCode", "portableAppOrder", "portableAppType", "portletServiceKey", "portletAppName", "portletApplicationOrder", "portletServiceOrder", "portableAppKey"], "webXml": ["webXMom", "webYxml", " webXML", "webTxml", "webMom", "WebXpl", "WebXml", "WebTxpl", "webTxML", "WebXm", "webWorklim", " webXxml", "webXpl", "webXm", "WebXML", "WebTxml", "webXMm", "webYml", "WebTxxml", "webWorkxml", " webTxxml", " webTxlim", "webYpl", "WebTxm", " webXaml", "webTxm", "webExm", "webXlim", "webYom", "webTxpl", "webXxml", "webXMxml", "webXaml", "WebTxML", "webMML", "webYML", " webYaml", "webExxml", "webExml", "webWorkml", "webYaml", " webYml", "webXML", "webTxlim", " webYML", "WebXxml", "webXMaml", " webTxML", " webYom", "webXMlim", "webXMml", " webXom", "webExML", "webXMpl", "webXom", "webTxxml", "webMaml", "webMml", " webXlim", "webXMML", " webTxml", "webWorkML"], "portletXml": ["portletTxxml", "portantXML", "portvetXxml", "portantTxng", "portableXml", "portletTxml", "portletTxql", "portableYxml", "portvetXng", "portletHeML", "portletXMql", "portletXxml", "portletYng", "portantXng", "portletHeng", "portletHexml", "portletEml", "portableXxml", "portletXng", "portletTxng", "portletEng", "portantTxML", "portletYml", "portvetXml", "portletEbl", "portantTxxml", "portantTxml", "portvetXMng", "portletXql", "portletYxml", "portvetXbl", "portletXML", "portableYML", "portletYql", "portableXML", "portableXql", "portletXMML", "portletExml", "portableYql", "portvetXMml", "portvetXMxml", "portantXxml", "portletXMxml", "portantXml", "portletTxML", "portableYml", "portletXMbl", "portletYbl", "portletHeml", "portletXMml", "portvetXMbl", "portletXMng", "portletYML", "portletXbl"], "contextXml": ["componentXml", "contextXaml", "componentXmx", "ctxXML", "contextCtml", "ctxXitml", "contextXtml", "contextEmx", "ctxXiML", "ctxXml", "contextXitml", "ctxXaml", "contextYmx", "contextYmm", "ctxXiaml", "contextXmm", "componentYmm", "componentYml", "contextAxmx", "contextAxml", "contextAxML", "ctxXiml", "ctxXtml", "contextXiml", "contextXmx", "contextYml", "contextEML", "componentYmx", "componentYML", "contextXiaml", "contextCml", "contextEml", "contextXiML", "contextYtml", "componentXmm", "contextAxmm", "contextEmm", "contextYaml", "contextXML", "componentXML", "contextCaml", "contextYML", "contextCML"], "src": ["sec", " sou", "ln", "sr", "sq", "cur", "sl", "Source", "ctr", "txt", "zh", "str", "crit", "resource", "obj", "st", "dest", "SOURCE", "rob", "from", "filename", "url", "skin", "sup", "sol", "scope", "secure", "https", "bh", "sing", "buster", "sit", "supp", "rel", "syn", "desc", "sel", "sc", "sb", "loc", "su", "sp", "tmp", "comp", "ident", "slice", "usr", "via", "ie", "ind", "sys", "cont", "addr", "rc", "ser", "kk", "inst", "proc", "sn", "entry"], "source": ["seed", "sample", "file", "sequence", "site", "parent", "resource", "store", "channel", "start", "in", "context", "dest", "service", "SOURCE", "style", "from", "se", "reader", "shell", "copy", "null", "query", "ource", "scope", "inner", "session", "check", "status", "zip", "instance", "console", "secure", "base", "iterator", "iter", "single", "set", "table", "Source", "format", "buffer", "series", "get", "raw", "sp", "feature", "result", "sql", "input", "ie", "tree", "template", "spec", "image", "ser", "sum", "it", "unit", "state", "origin", "stream", "entry", "size"], "zipEntries": ["ipEries", "ZipEntriers", "zipEntryries", "zipEnies", "zipEntrys", "zipentries", "zipEntriers", "zipEntarts", "zoneEntables", "Zipentrs", "zipEities", "zipInties", "zipEntryarts", "Zipentriers", "ZipEntries", "zipEnables", "zipEnts", "zipIntrs", "zipEntables", "ipEntires", "ZipEntrs", "zoneEnies", "ipEires", "zipIntriers", "ipEs", "zipIntries", "zoneEnables", "zipentables", "zoneEnties", "zipEies", "zipEs", "zipEntities", "ipEnts", "ipEntries", "zipentities", "zipEriers", "zipErs", "zipEntrs", "zipentrs", "ZipEnties", "zipEnties", "zoneEntities", "zipEns", "zipEntryires", "Zipenties", "zipEables", "ipEarts", "zipEnarts", "zipentriers", "zipEnities", "zoneEnries", "zipEnries", "ipEntarts", "zipEntires", "zipenties", "zipEarts", "zoneEntries", "zipEries", "zoneEnities", "Zipentries", "zipEnires", "zipEires"], "target": ["text", "local", "module", "match", "term", "Target", "tag", "parent", "resource", "test", "t", "tool", "class", "family", "route", "filename", "url", "owner", "tif", "primary", "goal", "scope", "alias", "pattern", "label", "title", "host", "arg", "gt", "location", "rel", "base", "compatible", "table", "buffer", "format", "result", "project", "name", "template", "arget", "top", "chain", "version", "pkg", "handle", "task", "peer", "layout", "controller", "type", "prop", "bolt"], "webRewriter": ["Supp", "webRebler", "log", "webRepriter", "webWrite", "webRebrite", "Entry", "Input", "aos", "File", "webWactor", "webRebriter", "webRepler", "_", "WebRewler", "webRewrite", "WebWriter", "WebWler", "WebWactor", "webRewactor", "Log", "New", "WebWrite", "get", "impl", "WebRewriter", "println", "WebRewrite", "webRepactor", "cont", "webRewler", "webReprite", "webWriter", "WebRewactor", "webWler", "json", "webRebactor", "entry"]}}
{"id1": "11183087", "id2": "19206412", "code1": "    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        String senha = \"\";\n        String email = request.getParameter(\"EmailLogin\");\n        try {\n            MessageDigest messageDigest = MessageDigest.getInstance(\"MD5\");\n            messageDigest.update(request.getParameter(\"SenhaLogin\").getBytes(), 0, request.getParameter(\"SenhaLogin\").length());\n            senha = new BigInteger(1, messageDigest.digest()).toString(16);\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        }\n        Usuario usuario = UsuarioBll.getUsuarioByEmailAndSenha(email, senha);\n        String redirect = request.getHeader(\"REFERER\").replace(\"?msg=3\", \"\").replace(\"&msg=3\", \"\") + \"?&msg=3\";\n        if (request.getHeader(\"REFERER\").indexOf(\"?\") != -1) {\n            redirect = request.getHeader(\"REFERER\").replace(\"?msg=3\", \"\").replace(\"&msg=3\", \"\") + \"&msg=3\";\n        }\n        if (usuario.getNome() != null) {\n            HttpSession session = request.getSession();\n            session.setAttribute(\"usuario\", usuario);\n            redirect = \"index.jsp\";\n        }\n        response.sendRedirect(redirect);\n    }\n", "code2": "    public static String md5String(String str) {\n        try {\n            MessageDigest md;\n            md = MessageDigest.getInstance(\"MD5\");\n            md.update(str.getBytes());\n            byte[] hash = md.digest();\n            final char[] hexChars = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };\n            StringBuffer res = new StringBuffer();\n            for (int i = 0; i < hash.length; i++) {\n                res.append(hexChars[(0xF0 & hash[i]) >> 4]);\n                res.append(hexChars[0x0F & hash[i]]);\n            }\n            return res.toString();\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n", "label": 1, "substitutes": {"doPost": ["handlePOST", " doPOST", "dopost", "doAdd", " doAdd", "handlePost", "doPOST", " dopost", "DoPost", "DoPOST", "handlepost", "Dopost", "handleAdd", "DoAdd"], "request": ["search", "print", "the", "model", "re", "require", "requ", "web", "project", "req", "input", "document", "register", "object", "reset", "hello", "list", "forward", "order", "command", "system", "run", "open", "complete", "query", "server", "argument", "get", "raw", "create", "reference", "frame", "client", "http", "QUEST", "quest", "handle", "address", "subject", "first", "parent", "browser", "question", "start", "position", "event", "current", "record", "work", "url", "law", "connect", "message", "enter", "result", "user", "setup", "application", "report", "xml", "post", "remote", "context", "select", "begin", "call", "connection", "initial", "Request", "version", "controller", "collection"], "response": ["send", "respond", "ce", "print", "e", "onse", "success", "context", "service", "Response", "output", "re", "view", "content", "to", "write", "connection", "res", "status", "server", "message", "page", "out", "result", "environment", "exit", "document", "frame", "application", "one", "report", "image", "default", "next", "reply", "resp", "entry", "collection", "ve"], "senha": ["senja", "Senwa", "senHA", "tenja", "ensenca", "Senigma", "SenHa", "senhas", "renwa", "senigma", "renja", "ensenha", " senhas", "renha", "Senhas", "tenha", "senho", " senca", "ensenHA", "tinigma", "tinhas", "Senho", "tinha", "ensenho", "tinhi", "Senhi", "Senca", "senHa", "tenHa", "senwa", "Senha", "senhi", "Senja", " senigma", "senca", " senhi", "tenwa", "renHa", " senho", " senHA", "SenHA"], "email": ["path", "address", "sample", "secret", "string", "file", "echo", "lock", "Email", "mail", "oe", "e", "live", "detail", "username", "url", "external", "office", "alias", "label", "zip", "ilo", "quote", "license", "ails", "example", "message", "enter", "elly", "name", "line", "IL", "le", "image", "password", "addr", "el", "hello", "login", "ip", "Mail", "domain", "ne", "gmail", "ql"], "messageDigest": [" messagediger", "messagemdest", "messageMDse", "MessagedigEST", "messageDse", "Messagedigse", "Messagedigest", "messageDester", "messagedigEST", "messageMDest", "messageDigse", " messagedigester", " messageDiger", "MessageDigest", "MessageDig5", "MessageDigse", "messageDigester", "messagemd5", "messageDer", "messageDigEST", "MessageDigester", "messageMDEST", " messagedigse", "messagedigest", "messagediger", "messagemdester", " messageDigester", "messageIGEST", "Messagedig5", "messagemdEST", "messageDig5", "messageIGester", "messageMDester", "messageDiger", "Messagedigester", "messageDest", "messageIGest", " messagedigest", "messageIGse", " messageDigse", "MessageDigEST", "messagedigse", "messagedig5", "messagedigester"], "usuario": ["usuiarios", "usuarius", "uscuarial", "cussuarios", "cusuario", "usruino", " ussuarius", " ussuario", "cussuario", "cussuarial", "ussuarius", "ususrio", "uscuino", "ussurio", "ususarius", "uscuarios", "usuarios", "ususario", "uscuario", "usnuarius", "usui\u00e9r", " usurio", "cusuarial", "ussuario", " ussuarial", "usruarial", "cussuino", " usuarial", "cussu\u00e9r", "usu\u00e9r", "ussuino", " ussurio", "usnurio", "usnuario", "usuino", "ussuarios", "usruario", "usnuarial", "usuarial", "cusuarios", "usuiario", "usuiarial", "usruarios", "ussuarial", "ussu\u00e9r", "uscu\u00e9r", "cusu\u00e9r", "ususarial", " usuarius", "cusuino", "usurio"], "redirect": [" redirection", "indrict", "rederer", " reddraw", "rightirection", " redir", " redurl", "reddirection", "reddigate", "redurl", "REDir", "redirection", "REDirect", "redRECT", "Redirect", "REDurl", "preddraw", "REDirection", "edrict", "RedRECT", "Rederer", "reddRECT", "redigate", "ederer", "rightirect", "predirect", "indirection", "edirection", "inderer", "Reddraw", "reddirect", "predurl", "edirect", "Redurl", "Redrict", "Redirection", "predirection", "redrict", "edir", "redir", "rightigate", "reddraw", "indirect", "Redigate", "edurl", "rightRECT"], "session": ["local", "system", "ESSION", "trip", "ess", "store", "browser", "context", "still", "current", "sid", "relation", "connection", "instance", "condition", "person", "server", "cookie", "params", "s", "environment", "container", "user", "activity", "shared", "input", "client", "data", "application", "save", "use", "metadata", "group", "ession", "window", "cache", "task", "Session", "layout", "json", "state", "sql"]}}
{"id1": "310182", "id2": "3187685", "code1": "    public void convert(File src, File dest) throws IOException {\n        InputStream in = new BufferedInputStream(new FileInputStream(src));\n        DcmParser p = pfact.newDcmParser(in);\n        Dataset ds = fact.newDataset();\n        p.setDcmHandler(ds.getDcmHandler());\n        try {\n            FileFormat format = p.detectFileFormat();\n            if (format != FileFormat.ACRNEMA_STREAM) {\n                System.out.println(\"\\n\" + src + \": not an ACRNEMA stream!\");\n                return;\n            }\n            p.parseDcmFile(format, Tags.PixelData);\n            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n                System.out.println(\"\\n\" + src + \": contains UIDs!\" + \" => probable already DICOM - do not convert\");\n                return;\n            }\n            boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n            int pxlen = p.getReadLength();\n            if (hasPixelData) {\n                if (inflate) {\n                    ds.putUS(Tags.BitsAllocated, 16);\n                    pxlen = pxlen * 4 / 3;\n                }\n                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n                    System.out.println(\"\\n\" + src + \": mismatch pixel data length!\" + \" => do not convert\");\n                    return;\n                }\n            }\n            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n            ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n            ds.putUI(Tags.SOPClassUID, classUID);\n            if (!ds.contains(Tags.NumberOfSamples)) {\n                ds.putUS(Tags.NumberOfSamples, 1);\n            }\n            if (!ds.contains(Tags.PhotometricInterpretation)) {\n                ds.putCS(Tags.PhotometricInterpretation, \"MONOCHROME2\");\n            }\n            if (fmi) {\n                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n            }\n            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n            try {\n            } finally {\n                ds.writeFile(out, encodeParam());\n                if (hasPixelData) {\n                    if (!skipGroupLen) {\n                        out.write(PXDATA_GROUPLEN);\n                        int grlen = pxlen + 8;\n                        out.write((byte) grlen);\n                        out.write((byte) (grlen >> 8));\n                        out.write((byte) (grlen >> 16));\n                        out.write((byte) (grlen >> 24));\n                    }\n                    out.write(PXDATA_TAG);\n                    out.write((byte) pxlen);\n                    out.write((byte) (pxlen >> 8));\n                    out.write((byte) (pxlen >> 16));\n                    out.write((byte) (pxlen >> 24));\n                }\n                if (inflate) {\n                    int b2, b3;\n                    for (; pxlen > 0; pxlen -= 3) {\n                        out.write(in.read());\n                        b2 = in.read();\n                        b3 = in.read();\n                        out.write(b2 & 0x0f);\n                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n                        out.write(b3 >> 4);\n                    }\n                } else {\n                    for (; pxlen > 0; --pxlen) {\n                        out.write(in.read());\n                    }\n                }\n                out.close();\n            }\n            System.out.print('.');\n        } finally {\n            in.close();\n        }\n    }\n", "code2": "    private void copyJar(File src, File dst) throws IOException {\n        FileChannel srcChannel = null;\n        FileChannel dstChannel = null;\n        try {\n            srcChannel = new FileInputStream(src).getChannel();\n            dstChannel = new FileOutputStream(dst).getChannel();\n            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n        } catch (IOException e) {\n            fLog.log(Level.SEVERE, e.getMessage(), e);\n        } finally {\n            srcChannel.close();\n            dstChannel.close();\n        }\n    }\n", "label": 1, "substitutes": {"convert": ["CONversion", "compvert", "CONverting", "consverting", "Converted", "Converts", "consversion", "confer", "unprocess", "conversion", "unvert", "consvert", "unverted", "compverts", "CONVERT", "unfer", "Conversion", "Convert", "unversion", "CONverted", "unverts", "Converting", "CONfer", "ConVERT", "conprocess", "converting", "converts", "CONvert", "Conprocess", "conVERT", "consVERT", "Confer", "compprocess", "compversion", "converted"], "src": ["sr", "path", "sq", "cur", "scan", "file", "txt", "str", "sin", "orig", "rx", "st", "start", "SOURCE", "from", "filename", "url", "rs", "href", "RC", "ource", "img", "host", "cc", "buster", "sit", "uri", "rel", "config", "sc", "Source", "s", "loc", "ipl", "attr", "ur", "its", "req", "usr", "input", "upload", "scene", "hl", "http", "sys", "dist", "source", "SourceFile", "cont", "addr", "rest", "func", "rc", "ser", "ins", "pkg", "inst", "ebin", "stream", "iv"], "dest": ["foreign", "dir", "dat", " Destination", "txt", " orig", "orig", "disk", "test", "Dest", "target", "tif", "write", " destinations", "port", "img", "table", "result", "est", " Dest", " dst", " destination", "gin", "dist", "rest", "source", "temp", "mat"], "in": ["d", "serv", "file", "en", "io", "b", "is", "inf", "st", "up", "cin", "from", "reader", "r", "IN", "i", "inner", "ad", "res", "m", "ar", "as", "din", "isin", "input", "ind", "source", "In", "el", "ins", "rin", "l", "bin", "sql", "stream", "inn"], "p": ["d", "ping", "op", "pb", "P", "pt", "tp", "lp", "pd", "py", "pro", "h", "post", "vp", "part", "b", "prot", "per", "t", "dp", "j", "pg", "at", "cp", "r", "c", "i", "pl", "pi", "wp", "ph", "m", "pre", "f", "ps", "pm", "pers", "pe", "sp", "er", "parse", "fp", "parser", "ap", "pa", "pp", "rep", "pkg", "l", "it", "g", "php", "pc", "jp"], "ds": ["tp", "des", "lists", "gs", "rs", "dates", "ns", "nas", "ps", "ports", "dd", "db", "yes", "amps", "sets", "ks", "mys", "vs", "ats", "obs", "ils", "s", "bs", "hd", " des", " DS", "Ds", "drivers", "iffs", "dos", "outs", "qs", "tests", "d", "js", "aws", "eds", "pd", "points", "dds", "terms", "eps", "ws", "xs", "tes", "dl", "workers", "sd", "dt", " d", "edes", "posts", "loads", "scripts", "ras", "df", "els", "ss", "gd", "di", "dp", "ls", "hs", "cks", "ts", "uds", "DS", "cs", " dd", "ads", "its", " ads", "tags", "ands", "ags", "sts", "dh", " os", "ods", "docs", "os", "ys"], "format": ["settings", "path", "module", "filter", "fc", "at", "file", "mt", "ats", "tag", "id", "lat", "mode", "t", "sche", "feat", "style", "output", "act", "pattern", "pi", " Format", "status", "title", "f", "cf", "Format", "form", "ct", "feature", "table", "set", "parse", "name", "template", "pretty", "spec", "MAT", "source", "top", "fm", "shape", "version", "l", "it", "layout", "unit", "type", "policy", "mat", "size"], "hasPixelData": ["haspixelDATA", " hasPixeldata", "haspixeldata", "haspixelData", "Haspixeldata", "hasFramedata", "hasFrameDATA", "hasixeldata", "HaspixelData", "hasPixeldata", "hasixelData", "HasPixelDATA", "hasixelDATA", " hasPixelDATA", "hasFrameData", "HasPixelData", "HaspixelDATA", "hasPixelDATA", "HasPixeldata"], "inflate": ["inflATE", " invalidATE", "inFLate", "infolat", "incelATE", "informate", "inflicate", "Informate", "inFlicate", " inflATE", "inFlATE", "inFLocate", "inFlocate", "Informated", "informocate", "incelicate", "invalidocate", "infolate", "inflat", "Inflate", "inFlate", "invalidate", " invalidicate", "Inflat", " invalidate", " inflocate", "incelate", "incelocate", " invalidocate", " inflicate", "infolocate", "inFLat", "Informat", "informated", "Inflated", "informat", "inFLated", "invalidicate", "infolated", "inflated", "invalidATE", "Inflocate", "Informocate", "inflocate"], "pxlen": ["xylin", "mmlength", "pxlength", "cpden", "xplength", "pixellen", "cplen", "pexls", "pexden", "tmplength", "packlength", "mmlen", "mxlen", "cplength", "mmln", "pixelfun", "tmplin", "pexlen", "phpdec", "tmplen", "pixellength", "tmpln", "mxdec", "mmlin", "cpln", "pxls", "xyln", "mxlength", "packlen", "xpln", "pxden", "pxdec", "phpln", "mxln", "pexlength", "pxlin", "xpden", "packls", "xplen", "xylen", "packln", "pixells", "pexfun", "pxln", "packdec", "phplen", "packfun", "xylength", "phplength", "pexln", "pxfun"], "out": ["ln", "err", "log", "dir", "io", "crit", "store", "print", "obj", "up", "aos", "msg", "output", "inv", "ex", "res", "inter", "outer", "prefix", "net", "screen", "conn", "init", "user", "cfg", "writer", "gr", "client", "pretty", "name", "sys", "OUT", "group", "list", "Out", "sum", "gov", "cmd", "ou", "outs", "temp"]}}
{"id1": "13981689", "id2": "21827619", "code1": "    public static String md5Hash(String src) {\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            md.update(src.getBytes());\n            return bytesArrayToHexString(md.digest());\n        } catch (Exception e) {\n            return null;\n        }\n    }\n", "code2": "    public static String SHA1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n        MessageDigest md;\n        md = MessageDigest.getInstance(\"SHA-1\");\n        byte[] sha1hash = new byte[40];\n        md.update(text.getBytes(\"iso-8859-1\"), 0, text.length());\n        sha1hash = md.digest();\n        return convertToHex(sha1hash);\n    }\n", "label": 1, "substitutes": {"md5Hash": ["md3Sum", "md7hash", "md7Hash", "md5Sum", "MD7Hash", "md2hash", "md3Hash", "md2Sum", "MD5Hash", "md7Sum", "md3hash", "MD5hash", "MD5Sum", "MD7hash", "md5hash", "MD7Sum", "md2Hash"], "src": ["text", "sec", "sr", "sq", "bytes", "string", "ctr", "txt", "str", "b", "rx", "obj", "st", "conv", "fx", "dest", "filename", "url", "r", "rs", "RC", "obl", "mph", "sc", "ipl", "sb", "s", "usc", "impl", "input", "name", "sys", "data", "jpg", "source", "rc", "ser", "inst", "this"], "md": ["d", "mc", "dr", "spread", "pt", "dir", "pd", "ld", "mt", "amd", "mod", "hash", "sm", "nt", "msg", "nd", "red", "det", "m", "down", "pm", "sd", "ms", "dd", "mand", "rm", "hd", "db", "mm", "ds", "mk", "cd", "ind", "od", "bd", "mg", "mn", "dm", "mp", "der", "df", "mb", "cmd", "MD"]}}
{"id1": "11477906", "id2": "397240", "code1": "    private static void loadDefaultSettings(final String configFileName) {\n        InputStream in = null;\n        OutputStream out = null;\n        try {\n            in = Thread.currentThread().getContextClassLoader().getResourceAsStream(META_INF_DEFAULT_CONFIG_PROPERTIES);\n            out = new FileOutputStream(configFileName);\n            IOUtils.copy(in, out);\n        } catch (final Exception e) {\n            log.warn(\"Unable to pull out the default.\", e);\n            throw new RuntimeException(e);\n        } finally {\n            IOUtils.closeQuietly(in);\n            IOUtils.closeQuietly(out);\n        }\n    }\n", "code2": "    private static void readAndRewrite(File inFile, File outFile) throws IOException {\n        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n        Dataset ds = DcmObjectFactory.getInstance().newDataset();\n        dcmParser.setDcmHandler(ds.getDcmHandler());\n        dcmParser.parseDcmFile(null, Tags.PixelData);\n        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        System.out.println(\"reading \" + inFile + \"...\");\n        pdReader.readPixelData(false);\n        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n        ds.writeDataset(out, dcmEncParam);\n        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n        System.out.println(\"writing \" + outFile + \"...\");\n        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        pdWriter.writePixelData();\n        out.flush();\n        out.close();\n        System.out.println(\"done!\");\n    }\n", "label": 1, "substitutes": {"loadDefaultSettings": ["readDefaultSettings", "loadFAULTSettings", "loadDefaultSetting", "loaddefaultSettings", "loadFAULTValues", "readDefaultsettings", "loadFAULTSetting", "loaddefaultSetting", "readdefaultsettings", "loadDefaultsettings", "readdefaultSetting", "loaddefaultValues", "loaddefaultsettings", "readDefaultSetting", "readdefaultSettings", "readDefaultValues", "loadDefaultValues", "loadFAULTsettings", "readdefaultValues"], "configFileName": ["configFileLocation", "confFilenamePath", "configFilenameName", "configfileNames", "confFilePath", "configFILEname", "confFilename", "configFILEPath", "confFileNames", "configFilename", "configFilenamePath", "conffilename", "configPageNames", "confFileName", "configStreamLocation", "conffileName", "conffilePath", "configPagename", "confFileLocation", "configfilePath", "configfilename", "configFilenameNames", "configStreamName", "confFilenameLocation", "configFilePath", "configFILELocation", "configFILEName", "configStreamname", "confFilenamename", "configStreamPath", "configPageName", "conffileNames", "configfileName", "configPagePath", "configFileNames", "configFilenamename", "configFilenameLocation", "confFilenameName"], "in": ["mc", "en", "id", "is", "inf", "t", "e", "up", "ls", "al", "cin", "run", "from", "mi", "re", "ini", "IN", "n", "i", "ro", "inner", "ad", "check", "m", "ze", "on", " din", "ar", "o", "ma", "din", "init", "doc", "user", "input", "isin", "ind", "gin", "In", "source", "or", "im", "ai", "ins", "rin", "l", "it", "info", "bin", "ain", "con", "inn"], "out": ["not", "des", "t", "conv", "update", "ot", "po", "aos", "output", "copy", "m", "auto", "all", "ins", "ent", "de", "off", "w", "v", "at", "OU", "io", "ion", "up", "ex", "check", "are", "o", "server", "net", "raw", "cn", "read", "client", "sys", "or", "handle", "ne", "outs", "can", "log", "obj", "null", "n", "to", "port", "res", "ge", "init", "user", "une", "writer", "ind", "over", "OUT", "Out", "cache", "it", "ou", "gc", "os", "file", "en", "store", "nt", "ing", "gt", "oss", "co", "con"]}}
{"id1": "16466743", "id2": "20751378", "code1": "    public String getmd5(String password) {\n        String pwHash = \"\";\n        MessageDigest md = null;\n        try {\n            md = MessageDigest.getInstance(\"MD5\");\n            md.reset();\n            md.update(password.getBytes());\n            byte[] b = md.digest();\n            for (int i = 0; i < b.length; i++) {\n                pwHash += Integer.toString((b[i] & 0xFF) + 0x100, 16).substring(1);\n            }\n        } catch (NoSuchAlgorithmException ex) {\n            Logger.fatal(\"MD5 Hash Algorithm not found\", ex);\n        }\n        Logger.info(\"PWHash erzeugt und wird \u00fcbergeben\");\n        return pwHash;\n    }\n", "code2": "    private String hashPassword(String password) throws NoSuchAlgorithmException {\n        String hash = null;\n        MessageDigest md = MessageDigest.getInstance(\"SHA\");\n        log.debug(\"secure hash on password \" + password);\n        md.update(password.getBytes());\n        hash = new String(Base64.encodeBase64(md.digest()));\n        log.debug(\"returning hash \" + hash);\n        return hash;\n    }\n", "label": 1, "substitutes": {"getmd5": ["getMD4", "getMD2", "getsha5", "getsha4", "getMD5", " getMD2", "getsha2", " getmd2", "getmd6", " getmd4", "getmd4", " getmd6", " getMD4", " getMD5", " getMD6", "getsha6", "getMD6", "getmd2"], "password": ["text", "path", "secret", "address", "description", "string", "p", "hash", "phrase", "Password", "shadow", "auth", "username", "attribute", "email", "pattern", "code", "security", "wordpress", "prefix", "padding", "message", "database", "pass", "user", "name", "sword", " Password", "data", "ew", "value", "key", "hello", "token", "login", "wd", "entry", "w", "word"], "pwHash": ["pwtHash", "pWHas", "pwdSum", "spwHash", " pwdHas", "pwtHas", "pwthash", "pwHas", "spwdSum", "pswHas", "pswSum", "spwdhash", "pWhash", "pwdHas", "pwshash", "spwdHas", "pwdhash", "pwsHash", " pwHas", "pwsHas", " pwdHash", "pswhash", " pwSum", "spwhash", "pwSum", "pWHash", " pwhash", "spwHas", "pswHash", "pwhash", "pwsSum", "spwdHash", "pwdHash", " pwdhash", "pWSum", "pwtSum", " pwdSum", "spwSum"], "md": ["mc", "d", "cmp", "dir", "pd", "material", "mt", "ld", "mail", "mo", "mod", "di", "sm", "msg", " mm", " mo", "nd", " mc", "ng", "red", "mem", "det", " Md", "ad", "m", " dd", "def", "desc", "pm", "ms", "sd", "dd", "rm", "td", "hd", "doc", "dig", "mm", "ds", "mk", "cd", "ind", "od", "bd", "mg", "mn", "add", "dm", "metadata", "mp", "exec", "der", "man", "df", "mb", "cmd", "del", "MD", "grad", "cond"], "b": ["d", "ba", "v", "bytes", "batch", "binary", "p", "abs", "bar", "nb", "bu", "be", "obj", "rb", "ab", "bb", "reb", "a", "bh", "m", "ib", "bis", "f", "B", "fb", "br", "sb", "bs", "buff", "db", "eb", "bf", "bp", "cb", "l", "ob", "bi", "mb", "g", "bas", "gb", "y", "bc", "w"], "i": ["ti", "v", "ji", "I", "ic", "p", "li", "id", "gi", "my", "io", "is", "di", "ki", "ii", "in", "\u0438", "j", "span", "phi", "oi", "ri", "mi", "si", "index", "ini", "n", "iu", "a", "pi", "ci", "m", "cli", "ski", "yi", "o", "iter", "ms", "multi", "q", "init", "xi", "ie", "ind", "gu", "u", "ei", "ij", "x", "qi", "im", "ai", "ix", "sim", "l", "ip", "it", "us", "hi", "ui", "json", "bi", "next", "y"]}}
{"id1": "8087001", "id2": "4852691", "code1": "    public static String generateStackHashKey() {\n        Exception e = null;\n        try {\n            throw new Exception();\n        } catch (Exception ex) {\n            e = ex;\n        }\n        MessageDigest digest;\n        try {\n            digest = java.security.MessageDigest.getInstance(\"MD5\");\n            digest.update(getStackTrace(e).getBytes());\n            byte[] hash = digest.digest();\n            String rtn = Base64.encode(new String(hash));\n            if (keys.contains(rtn)) {\n                return generatedIterStackHashKey(rtn);\n            }\n            keys.add(rtn);\n            return rtn;\n        } catch (NoSuchAlgorithmException ex) {\n            throw new RuntimeException(ex);\n        }\n    }\n", "code2": "    public static final synchronized String hash(String data) {\n        if (digest == null) {\n            try {\n                digest = MessageDigest.getInstance(\"MD5\");\n            } catch (NoSuchAlgorithmException nsae) {\n                System.err.println(\"Failed to load the MD5 MessageDigest. \" + \"Jive will be unable to function normally.\");\n                nsae.printStackTrace();\n            }\n        }\n        digest.update(data.getBytes());\n        return toHex(digest.digest());\n    }\n", "label": 1, "substitutes": {"generateStackHashKey": ["generateTrackhashKeys", "generateStackhashKeys", "generateTrackhashIndex", "generateStackNodePage", "generateStackStatePage", "generateStackStateKey", "generateStackHashIndex", "generateStackhashPage", "generateStackhashIndex", "generateTrackHashKeys", "generateStackStateIndex", "generateTrackHashIndex", "generateStackNodeIndex", "generateStackHashPage", "generateStackNodeKey", "generateTrackHashPage", "generateStackNodeKeys", "generateStackStateKeys", "generateTrackhashPage", "generateTrackhashKey", "generateStackHashKeys", "generateTrackHashKey", "generateStackhashKey"], "e": ["d", "err", "ae", "exc", "h", "en", "p", "xe", "E", "oe", " exc", "t", "eg", "event", "te", "eeee", "ed", "ee", "r", "email", "ex", "n", " err", "i", "a", " me", "m", "f", "ge", "o", "es", " pe", " error", "pe", " ce", "element", "ep", " te", "eb", "ue", "ie", "exp", "u", "error", "eu", "x", "me", "el", "ef", "ec", "ne", "eer", "er", "se"], "digest": ["compests", "mdested", "decester", "decse", "compested", " digests", "digested", " digEST", "Diggest", "compest", "Digse", "Digested", "mdest", "DigEST", "descest", "mdEST", "descer", "Digest", "mdester", "compEST", "digests", "diger", "Diger", " digested", "Digester", " diger", "digEST", " digester", "diggest", " diggest", "decest", "Digests", " digse", "descse", "digse", "descgest", "mdse", "digester", "decested"], "hash": ["mac", "build", "search", "sample", "filter", "h", "log", "ash", "tag", "map", "test", "shadow", "total", "style", "rh", "check", "block", "has", "html", "bh", "valid", "message", "dig", "all", "score", "hex", "report", "key", "sha", "chain", "Hash", "sum", "cache", "sh", "ashed", "her"], "rtn": ["RTnu", "otnm", "ytn", "rxmn", "RTnm", "rtr", "rtcn", "ttr", "rtyn", "latn", "aptr", "ertn", "ytyn", "rton", "vrnm", "ytns", "rtnm", "aptn", "ertr", "tton", "artnor", "rxne", "RTcn", "otn", "latne", "latnm", "ntb", "mtcn", "RTn", "rtnor", "rtb", "ttnu", "erton", "rotnor", "rotnm", "rtN", "apton", "rotcn", "otne", "rotyn", "rotns", "aptnu", "vrn", "rxn", "RTN", "ntn", "ytnor", "RTb", "ntN", "artns", "ntnm", "otmn", "ttn", "vrN", "latmn", "rtnu", "rxnm", "vrb", "artn", "artyn", "rtmn", "rtne", "mtn", "ertnu", "mtnu", "rotnu", "mtnm", "rtns", "rotn"]}}
{"id1": "21488518", "id2": "4118412", "code1": "    @Override\n    public Resource createNew(String name, InputStream in, Long length, String contentType) throws IOException {\n        File dest = new File(this.realFile, name);\n        if (allowedClient) {\n            if (\".request\".equals(name) || \".tokens\".equals(name)) {\n                FileOutputStream out = null;\n                try {\n                    out = new FileOutputStream(dest);\n                    IOUtils.copy(in, out);\n                } finally {\n                    IOUtils.closeQuietly(out);\n                }\n                if (\".request\".equals(name)) {\n                    File request = new File(realFile.getAbsolutePath() + \"/\" + name);\n                    RequestManager.manageRequest(request, null, true);\n                    return new OverEncryptedFriendsFile(factory, folderPath + \"/.response\", allowedClient);\n                }\n                return new OverEncryptedFriendsFile(factory, folderPath + \"/\" + name, allowedClient);\n            } else {\n                return null;\n            }\n        } else {\n            LOGGER.error(\"User isn't owner of this folder\");\n            return null;\n        }\n    }\n", "code2": "    private void compress(String outputFile, ArrayList<String> inputFiles, PrintWriter log, boolean compress) throws Exception {\n        String absPath = getAppConfig().getPathConfig().getAbsoluteServerPath();\n        log.println(\"Concat files into: \" + outputFile);\n        OutputStream out = new FileOutputStream(absPath + outputFile);\n        byte[] buffer = new byte[4096];\n        int readBytes;\n        for (String file : inputFiles) {\n            log.println(\" Read: \" + file);\n            InputStream in = new FileInputStream(absPath + file);\n            while ((readBytes = in.read(buffer)) != -1) {\n                out.write(buffer, 0, readBytes);\n            }\n            in.close();\n        }\n        out.close();\n        if (compress) {\n            long normalSize = new File(absPath + outputFile).length();\n            ProcessBuilder builder = new ProcessBuilder(\"java\", \"-jar\", \"WEB-INF/yuicompressor.jar\", outputFile, \"-o\", outputFile, \"--line-break\", \"4000\");\n            builder.directory(new File(absPath));\n            Process process = builder.start();\n            process.waitFor();\n            long minSize = new File(absPath + outputFile).length();\n            long diff = normalSize - minSize;\n            double percentage = Math.floor((double) diff / normalSize * 1000.0) / 10.0;\n            double diffSize = (Math.floor(diff / 1024.0 * 10.0) / 10.0);\n            log.println(\"Result: \" + percentage + \" % (\" + diffSize + \" KB)\");\n        }\n    }\n", "label": 1, "substitutes": {"createNew": ["CreateNew", "createResource", "createNext", "dataNext", "CreateNext", "getResource", "CreateFresh", "dataResource", "CreateResource", "getFresh", "dataFresh", "createFresh", "getNext", "dataNew", "getNew"], "name": ["local", "path", "address", "description", "string", "file", "missing", "id", "resource", "only", "part", "old", "ame", "lat", "event", "no", "current", "nm", "ename", "filename", "names", "NAME", "index", "time", "word", "n", "named", "null", "alias", "title", "code", "base", "normal", "prefix", "format", "end", "action", "none", "create", "Name", "template", "common", "client", "data", "source", "one", "value", "key", "password", "use", "version", "handle", "type", "body", "now", "size"], "in": ["err", "mc", "file", "en", "p", "asin", "b", "is", "t", "al", "cin", "from", "reader", "r", "c", "IN", "i", "inner", "ma", "s", "din", "get", "vin", "input", "isin", "mm", "ind", "gin", "data", "In", "source", "ins", "rin", "xml", "it", "bin", "mat", "body", "con", "inn"], "length": ["text", "path", "bytes", "description", "Length", "sequence", "height", "amount", "count", "position", "max", "total", "len", "content", "duration", "padding", "buffer", "message", "read", "input", "data", "value", "password", "shape", "enc", "body", "stream", "size"], "contentType": ["mediatype", "contentTypes", " contenttype", "mediaType", " contentTypes", "ContentTypes", "contentLength", "mediaLength", "ContentType", "contenttype", "Contenttype", " contentLength", "ContentLength", "mediaTypes"], "dest": ["d", "path", "trans", "dir", "dat", "parent", "cat", "orig", "disk", "src", "oe", "obj", "Dest", "prop", "target", "copy", "nom", "mem", "origin", "iter", "table", "loc", "result", "tmp", " Dest", " dst", " destination", "wb", "source", "home", "rest", "cont", "folder", "self", "comb", "there", "resp", "temp", "coord", "lit", "this"], "out": ["os", "serv", "cos", "op", "log", "file", "en", "OU", "io", "t", "obj", "conv", "ion", "po", "up", "aos", "output", "copy", "go", "external", "to", "n", "ex", "null", "write", "port", "res", "outer", "col", "o", "set", "net", "s", "end", "oss", "conn", "client", "sys", "OUT", "Out", "it", "ent", "ou", "outs", "can", "off", "co", "con", "w"], "request": ["search", "pair", "child", "relative", "select", "current", "open", "begin", "url", "re", "ire", "library", "query", "require", "claim", "requ", "params", "result", "message", "enter", "user", "req", "create", "push", "input", "reference", "ask", "Request", "remove", "reset", "report", "QUEST", "move", "quest", "response", "forward"]}}
{"id1": "22401746", "id2": "293167", "code1": "    public String sendRequest(java.lang.String servletName, java.lang.String request) {\n        String reqxml = \"\";\n        org.jdom.Document retdoc = null;\n        String myurl = java.util.prefs.Preferences.systemRoot().get(\"serverurl\", \"\");\n        String myport = java.util.prefs.Preferences.systemRoot().get(\"portno\", \"8080\");\n        if (this.serverURL == null) {\n            try {\n                java.net.URL codebase = newgen.presentation.NewGenMain.getAppletInstance().getCodeBase();\n                if (codebase != null) serverURL = codebase.getHost(); else serverURL = \"localhost\";\n            } catch (Exception exp) {\n                exp.printStackTrace();\n                serverURL = \"localhost\";\n            }\n            newgen.presentation.component.IPAddressPortNoDialog ipdig = new newgen.presentation.component.IPAddressPortNoDialog(myurl, myport);\n            ipdig.show();\n            serverURL = myurl = ipdig.getIPAddress();\n            myport = ipdig.getPortNo();\n            java.util.prefs.Preferences.systemRoot().put(\"serverurl\", serverURL);\n            java.util.prefs.Preferences.systemRoot().put(\"portno\", myport);\n            System.out.println(serverURL);\n        }\n        try {\n            System.out.println(\"http://\" + serverURL + \":\" + myport + \"/newgenlibctxt/\" + servletName);\n            java.net.URL url = new java.net.URL(\"http://\" + serverURL + \":\" + myport + \"/newgenlibctxt/\" + servletName);\n            java.net.URLConnection urlconn = (java.net.URLConnection) url.openConnection();\n            urlconn.setDoOutput(true);\n            urlconn.setRequestProperty(\"Content-type\", \"text/xml; charset=UTF-8\");\n            java.io.OutputStream os = urlconn.getOutputStream();\n            String req1xml = request;\n            java.util.zip.CheckedOutputStream cos = new java.util.zip.CheckedOutputStream(os, new java.util.zip.Adler32());\n            java.util.zip.GZIPOutputStream gop = new java.util.zip.GZIPOutputStream(cos);\n            java.io.OutputStreamWriter dos = new java.io.OutputStreamWriter(gop, \"UTF-8\");\n            System.out.println(req1xml);\n            dos.write(req1xml);\n            dos.flush();\n            dos.close();\n            System.out.println(\"url conn: \" + urlconn.getContentEncoding() + \"  \" + urlconn.getContentType());\n            java.io.InputStream ios = urlconn.getInputStream();\n            java.util.zip.CheckedInputStream cis = new java.util.zip.CheckedInputStream(ios, new java.util.zip.Adler32());\n            java.util.zip.GZIPInputStream gip = new java.util.zip.GZIPInputStream(cis);\n            java.io.InputStreamReader br = new java.io.InputStreamReader(gip, \"UTF-8\");\n            retdoc = (new org.jdom.input.SAXBuilder()).build(br);\n        } catch (java.net.ConnectException conexp) {\n            javax.swing.JOptionPane.showMessageDialog(null, newgen.presentation.NewGenMain.getAppletInstance().getMyResource().getString(\"ConnectExceptionMessage\"), \"Critical error\", javax.swing.JOptionPane.ERROR_MESSAGE);\n        } catch (Exception exp) {\n            exp.printStackTrace(System.out);\n        }\n        System.out.println(reqxml);\n        return \"\";\n    }\n", "code2": "    public static void doVersionCheck(View view) {\n        view.showWaitCursor();\n        try {\n            URL url = new URL(jEdit.getProperty(\"version-check.url\"));\n            InputStream in = url.openStream();\n            BufferedReader bin = new BufferedReader(new InputStreamReader(in));\n            String line;\n            String version = null;\n            String build = null;\n            while ((line = bin.readLine()) != null) {\n                if (line.startsWith(\".version\")) version = line.substring(8).trim(); else if (line.startsWith(\".build\")) build = line.substring(6).trim();\n            }\n            bin.close();\n            if (version != null && build != null) {\n                if (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, url); else {\n                    GUIUtilities.message(view, \"version-check\" + \".up-to-date\", new String[0]);\n                }\n            }\n        } catch (IOException e) {\n            String[] args = { jEdit.getProperty(\"version-check.url\"), e.toString() };\n            GUIUtilities.error(view, \"read-error\", args);\n        }\n        view.hideWaitCursor();\n    }\n", "label": 1, "substitutes": {"sendRequest": [" sendCommand", "SendPost", " sendrequest", "submitPost", "SendCommand", "submitRequest", "submitCommand", "sendrequest", "sendCommand", "submitrequest", "SendRequest", "Sendrequest", "sendPost", " sendPost"], "servletName": ["servletsNames", "serviceantName", "servantname", "servletsPath", "servLETName", "serviceletName", "ServletName", "servletNames", "serviceantFamily", "servletsName", "serviceletFamily", "servletNAME", "servidgetname", "servenderNAME", "ServLETName", " servletNames", " servletsNAME", "serviceantNAME", "serviceletname", "servLETFamily", "servantFamily", "servletFamily", "servletePath", "ServLETSimple", " servletsPath", "Servletname", "servletname", "servidgetSimple", "servantSimple", "servenderFamily", "servidgetName", "servenderName", "servletsNAME", "servendername", "servLETNames", "servLETInfo", "servleteName", "ServletInfo", "ServLETname", " servletsNames", "servLETSimple", "servleteNames", " servletPath", "ServLETInfo", "servletSimple", "serviceantname", "ServletSimple", "servletPath", "serviceletNAME", "servidgetInfo", "servletInfo", " servletsName", "servantNAME", "servleteNAME", "servLETPath", "servantName", "servantInfo", " servletNAME", "servLETNAME", "servLETname"], "request": ["text", "send", "address", "submit", "string", "post", "transform", "print", "question", "output", "attribute", "work", "query", "accept", "express", "message", "argument", "result", "get", "raw", "q", "req", "create", "input", "document", "Request", "frame", "application", "report", "value", "password", "QUEST", "hello", "quest", "response", "execute", "xml", "reply", "body", "command"], "reqxml": ["requjson", "requestjson", "questxml", "requxml", "requml", "requestml", "reqml", "questml", "reqjson", "questjson", "requestxml"], "retdoc": [" retdec", " defdec", " defdoc", "Retdec", "retDoc", " defDoc", "Retdoc", "retdec", " retDoc", "RetDoc"], "myurl": ["mineUrl", "MyURL", "serverurl", "Myurl", "mystr", "mistr", "MYurl", "missl", "someuri", "amiURL", "veryuri", "someurl", "amibase", "amigl", "MYURL", "veryport", "mygl", "serverstr", "serverssl", "mineurl", "amiurl", "someUrl", "MYgl", "serverUrl", "mybase", "miUrl", "Mygl", "minessl", "myUrl", "myURL", "veryurl", "someport", "veryUrl", "miurl", "myssl", "myuri", "serverport", "minestr", "MYbase", "Mybase", "serveruri"], "myport": ["myPORT", "miPort", "miphone", "Mypport", "mipod", " myPort", "miPORT", " mypport", "yourPort", "mipport", "MyPORT", "tmpPORT", "yourPORT", " myPORT", " myphone", "yourport", "myports", "mywidth", "mypport", "MyPort", "Mypod", "miwidth", " myports", "myphone", " mywidth", "myPort", "mypod", "Myports", "tmpports", "miport", "Myphone", "Mywidth", "Myport", "yourpod", "tmpport", "miports", "tmppport"], "codebase": ["codeBase", "codease", "codebal", "cybase", "createBase", "createbas", "Codebased", "createbase", "codebas", "cybal", "pagebased", "createase", " codebased", "pagebas", " codease", "pageBase", "cybind", "codebind", " codebal", "codebased", "pagebase", "cyBase", "citybind", " codebind", "citybal", "cityBase", " codebas", "Codease", "Codebas", "citybase", "CodeBase", "Codebase", " codeBase"], "serverURL": [" serverSSL", "serverurl", "ServerUrl", " serverUrl", "erverSSL", "clientURL", "serER", "serverID", "browserER", "erverALL", "Serverurl", "serURL", "erverOUT", " serverCL", "browserALL", "siteURL", "serverRL", "serverALL", "ServerER", "erverER", "erverUrl", "siteUrl", "serALL", " serverHTTP", "erverCL", "serUrl", "browserUR", "erverRL", " serverID", "browserID", "clientHTTP", " serverER", "ServerUR", "erverURI", "ServerRL", "serverUrl", "serUR", " serverALL", " serverRL", "ServerURI", "serverURI", "erverUR", "erverurl", "browserUrl", "serCL", "erverURL", "clientID", "ServerURL", " serverUR", "serverOUT", "erverID", "serverER", "erverHTTP", " serverOUT", "serverSSL", "serverUR", "clientUrl", "siteurl", "serURI", "browserSSL", "serverCL", "browserURL", "serverHTTP", " serverurl", "siteOUT"], "ipdig": ["ippmd", "IPDig", "ippdel", "phpDig", "ippbad", "capDig", " ipDig", "hipdel", "cpDig", " ipbad", "phpbad", "ippcd", "phpdig", "hipDig", "capdel", "hipdig", "ippdig", "capdig", "lipDig", "ipdel", "ipcd", "hipdiv", "ipmd", "IPdig", "phpcd", " ipmd", "ipdb", "ippDig", "ipDig", " ipdd", "capdiv", "lipdb", "ippdd", " ipdb", "lipdig", "cpdd", "ipbad", "ipdiv", "cpdig", " ipcd", "ippdiv", "cpmd", "ipdd", "IPdb"], "url": ["sl", "gl", "proxy", "file", "Url", "log", "str", "nl", "browser", "loader", "ls", "open", "r", "dl", "dll", "ll", "https", "ssl", "link", "f", "uri", "URL", "web", "rawl", "ur", "conn", "un", "deb", "u", "util", "http", "www", "rl", "uu", "mount", "el", "pkg", "l", "ob", "au", "uf", "il", "org", "ul"], "urlconn": ["Urlcmd", "connconn", "urlj", "webcon", "webconn", " urlj", "urlcon", "lconn", "webConn", "llcol", "llConn", "lConn", "lcol", "httplink", "urlcmd", "urllink", "llcon", "urlfin", "httpfin", "connlink", "weblink", " urlcon", "llconn", "urlcol", "httpConn", " urlcmd", "lcon", "Urlcon", "lj", "connConn", " urlfin", " urlcol", " urlConn", "Urlj", "httpconn", "Urlconn", "lcmd", "httpcon", "conncon", "urlConn", "webfin"], "os": ["js", "cms", "et", "des", "io", "is", "ws", "ot", "OS", "ls", " bos", "rs", "cs", "res", "fs", "o", "as", "ms", "osi", "ds", "sys", "soc", "socket", "Os", "pos", "us", "ss"], "req1xml": ["reqxmlhtml", "req2ml", "request1ml", "req1x", "req1ml", "request1x", "req2xml", "request1xml", "request2html", "req01x", "reqxmlx", "req01ml", "request2x", "req1html", "request2xml", "reqxmlml", "req2html", "req01xml", "req01html", "reqxmlxml", "request2ml", "req2x", "request1html"], "cos": ["cms", "oses", "oos", " Os", "oes", "des", " ox", "uts", " om", "oe", "is", "ox", "ous", "aos", " bos", " outs", "oops", "cs", "osi", "oss", " des", " ups", " bout", " los", " cout", " nos"]}}
{"id1": "14473781", "id2": "3330944", "code1": "        @Override\n        protected String doInBackground(Void... params) {\n            HttpClient httpClient = new DefaultHttpClient();\n            HttpContext localContext = new BasicHttpContext();\n            HttpPost httpPost = new HttpPost(urlFormated);\n            try {\n                MultipartEntity entity = new MultipartEntity(HttpMultipartMode.BROWSER_COMPATIBLE);\n                for (int index = 0; index < POSTparamList.size(); index++) {\n                    if (POSTparamList.get(index).getName().equalsIgnoreCase(\"image\")) {\n                        entity.addPart(POSTparamList.get(index).getName(), new FileBody(new File(POSTparamList.get(index).getValue())));\n                    } else {\n                        entity.addPart(POSTparamList.get(index).getName(), new StringBody(POSTparamList.get(index).getValue()));\n                    }\n                }\n                httpPost.setEntity(entity);\n                HttpResponse response = httpClient.execute(httpPost, localContext);\n                return processAnswer(response);\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n            return null;\n        }\n", "code2": "    public void extractImage(String input, String output, DjatokaDecodeParam params, IWriter w) throws DjatokaException {\n        File in = null;\n        String dest = output;\n        if (input.equals(STDIN)) {\n            try {\n                in = File.createTempFile(\"tmp\", \".jp2\");\n                input = in.getAbsolutePath();\n                in.deleteOnExit();\n                IOUtils.copyFile(new File(STDIN), in);\n            } catch (IOException e) {\n                logger.error(\"Unable to process image from \" + STDIN + \": \" + e.getMessage());\n                throw new DjatokaException(e);\n            }\n        }\n        BufferedImage bi = extractImpl.process(input, params);\n        if (bi != null) {\n            if (params.getScalingFactor() != 1.0 || params.getScalingDimensions() != null) bi = applyScaling(bi, params);\n            if (params.getTransform() != null) bi = params.getTransform().run(bi);\n            try {\n                BufferedOutputStream os = new BufferedOutputStream(new FileOutputStream(new File(dest)));\n                w.write(bi, os);\n                os.close();\n            } catch (FileNotFoundException e) {\n                logger.error(\"Requested file was not found: \" + dest);\n                throw new DjatokaException(e);\n            } catch (IOException e) {\n                logger.error(\"Error attempting to close: \" + dest);\n                throw new DjatokaException(e);\n            }\n        }\n        if (in != null) in.delete();\n    }\n", "label": 0, "substitutes": {"doInBackground": ["doAsBackground", " doAsFuture", " doAsRequest", " doAsAsync", " doOnRequest", "doInRequest", " doInsideRequest", "doAsAsync", "doInAsync", " doInRequest", "doInFuture", "doAsFuture", " doInsideAsync", " doAsBackground", " doOnFuture", " doOnBackground", "doAsRequest", " doOnAsync", " doInsideFuture", " doInFuture", " doInsideBackground", " doInAsync"], "params": ["settings", "terms", "properties", "conf", "Param", "ctx", "images", "Parameters", "options", "config", "ps", "parts", "files", "vals", "tags", "services", "posts", "data", "details", "list", "errors", "cas", "ams", "param", "proc", "sql", "values"], "httpClient": [" httpclient", "htmlSystem", "hoverClient", "httpsclient", "httpControl", "htmlControl", "httpsClient", "httpContext", "ttpClient", "hoverContext", "httpsContext", "httpConnection", "httpsSystem", "httpSystem", "hoverSystem", " httpConnection", " httpSystem", "ttpclient", "ttpConnection", "hoverControl", "httpclient", "htmlContext", "htmlClient", "httpsConnection", "httpsControl", "ttpSystem"], "localContext": ["privatecontext", "sessionState", "localPort", "Localcontext", " localCase", "privateState", "privateContext", "localState", "sessionCondition", "currentCondition", "privatePort", "currentCase", " localState", " localPort", "currentState", "LocalPort", "currentContext", "LocalState", "localcontext", "localCase", " localCondition", "sessionCase", "LocalContext", "sessionContext", "localCondition", " localcontext"], "httpPost": ["httpPre", "httpPut", "workPut", "HttpPOST", "ttpPut", "httpsPut", "ttpPre", "httpsPost", " httpPOST", " httpPut", "hoverpost", "workPost", "hoverPOST", " httpPre", "httpsPre", "httpsPOST", "hoverPost", "httppost", "httpPOST", "ttpPOST", "workPOST", "HttpPost", "HttpPut", "ttppost", "workPre", "HttpPre", "ttpPost", " httppost"], "entity": ["local", "created", "put", "ell", "orm", "member", "ce", "oe", "channel", "complex", "component", "event", "internal", "needed", "total", "output", "rule", "email", "Entity", "eme", "secure", "quote", "person", "auto", "security", "base", "note", "encrypted", "net", "pe", "result", "table", "iam", "activity", "create", "document", "template", "intent", "object", "comment", "line", "data", "one", "image", "details", "and", "el", "metadata", "group", "or", "empty", "xml", "ent", "unit", "translation", "body", "unique", "policy", "ment", "entry", "collection", "command"], "index": ["search", "IND", "ax", "point", "update", "max", "scale", "lex", "slice", "unknown", "each", "all", "exp", "offset", "name", "document", "key", "shape", "ix", "pos", "find", "display", "height", "Index", "open", "access", "ex", "check", "stick", "instance", "iter", "set", "prefix", "loop", "loc", "get", "ask", "create", "seek", "major", "zero", "image", "state", "eight", "address", "match", "EX", "position", "ox", "success", "axis", "scroll", "insert", "connect", "date", "see", "ind", "error", "x", "coll", "layout", "sync", "author", "size", "number", "sequence", "length", "num", "context", "row", "mix", "select", "go", "i", "inc", "condition", "initial", "config", "note", "active", "draw", "column", "capacity", "osit", "add", "mount", "version", "request", "empty"], "response": ["results", "sequence", "respond", "e", "onse", "zone", "context", "service", "still", "Response", "output", "content", "view", "connection", "res", "api", "resp", "result", "message", "page", "tree", "document", "frame", "object", "respons", "data", "answer", "social", "application", "value", "image", "hello", "request", "xml", "json", "pos", "reply", "body", "entry"]}}
{"id1": "8132219", "id2": "536614", "code1": "    public static void copyFile(String inFile, String outFile) {\n        File in = new File(inFile);\n        File out = new File(outFile);\n        try {\n            FileChannel inChannel = new FileInputStream(in).getChannel();\n            FileChannel outChannel = new FileOutputStream(out).getChannel();\n            try {\n                inChannel.transferTo(0, inChannel.size(), outChannel);\n            } finally {\n                if (inChannel != null) inChannel.close();\n                if (outChannel != null) outChannel.close();\n            }\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n", "code2": "    private static void readAndRewrite(File inFile, File outFile) throws IOException {\n        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n        Dataset ds = DcmObjectFactory.getInstance().newDataset();\n        dcmParser.setDcmHandler(ds.getDcmHandler());\n        dcmParser.parseDcmFile(null, Tags.PixelData);\n        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        System.out.println(\"reading \" + inFile + \"...\");\n        pdReader.readPixelData(false);\n        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n        ds.writeDataset(out, dcmEncParam);\n        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n        System.out.println(\"writing \" + outFile + \"...\");\n        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        pdWriter.writePixelData();\n        out.flush();\n        out.close();\n        System.out.println(\"done!\");\n    }\n", "label": 1, "substitutes": {"copyFile": ["copyfile", " copyStream", "copyStream", " copyFiles", "CopyFiles", " Copyfile", "copyFiles", " CopyStream", " copyfile", " CopyFile", "CopyFile", "Copyfile", " CopyFiles", "CopyStream"], "inFile": ["dinPath", "inputName", "dinFile", "ninFilename", "inName", "inputFile", "inTemplate", "inputFilename", "outTemplate", "inRow", " inRow", "innRow", "ninTemplate", "dinEmail", "inPath", "innFile", "dinRow", "inEmail", "ninName", "ninFile", " inEmail", "inputTemplate", "innEmail", "innPath", "outFilename", " inPath", "inFilename", "outName"], "outFile": ["outFILE", "outputfile", "inFILE", "ouFilename", " outfile", "outputFile", "outFormat", " outFILE", "outfile", "ouTable", "destfile", "outputFilename", "outputFormat", "outTable", "destFormat", "ouFILE", "ouFile", " outFormat", "destFile", "outputFILE", "inTable", "outputTable", "outFilename", "inFilename", "destFILE"], "in": ["irm", "ic", "en", "id", "sin", "old", "is", "inf", "up", "cin", "from", "ini", "IN", "inc", "i", "inner", "ze", " din", "on", "o", "s", "din", "init", " input", "input", "isin", "ind", "gin", "In", "source", "ai", "el", "ins", "rin", "ir", "it", "info", "bin", "ain", "inn"], "out": ["v", "at", "file", "en", "p", "by", "io", "b", "t", "e", "ot", "aos", "output", "c", "to", "n", "ex", "res", "gt", "o", "net", "all", "name", "client", "OUT", "one", "Out", "it", "g", "ou", "outs", "ne", "can", "co", "os", "w"], "inChannel": ["inConnection", "outChan", " inButton", " inConnection", "insideChannel", "ginCase", "inBlock", "sinSlot", "innCase", "insideButton", "cinHandler", "innChannel", "innerConnection", "outConnection", " inchannel", "inCategory", "sinChannel", " inHandler", "insideComponent", "newChannel", "inCase", "innSlot", "isinCategory", " inComponent", "inButton", "inColumn", "sinStream", "inStream", "ginCategory", "inComponent", "cinStream", "cinComponent", "ginChannel", "vinPanel", "sinColumn", "outStream", " inChan", "inSlot", "innCategory", "inHandler", "ginPanel", "cinColumn", "innerChannel", "vinCategory", "vinCase", "outBlock", "outColumn", "sinBlock", "inchannel", "outchannel", "cinBlock", "inChan", "newCase", "newCategory", "newPanel", "sinCase", "cinButton", "cinChannel", "isinSlot", "sinCategory", "innerChan", "innerchannel", "inPanel", "isinCase", "insideHandler", "isinChannel", "vinChannel"], "outChannel": ["outChan", "outputChannel", "nChannel", "outConnection", "oChan", "OutChan", " outClient", "nchannel", " outPassword", "outCh", "nChan", "nStream", " outStream", " outBlock", "OutConnection", "outChain", "inStream", " outChan", "OutChannel", "outStream", "inClient", "exChannel", " outChain", " outCh", "outClient", "outchannel", "outBlock", "inChan", "inchannel", "oPassword", "exChain", "OutCh", "inPassword", "outputCh", "outputChan", "oClient", "outputConnection", "outPassword", "exChan", "oChannel", " outchannel", " outConnection", "exBlock"]}}
{"id1": "1798720", "id2": "10451698", "code1": "    public static void save(String packageName, ArrayList<byte[]> fileContents, ArrayList<String> fileNames) throws Exception {\n        String dirBase = Util.JAVA_DIR + File.separator + packageName;\n        File packageDir = new File(dirBase);\n        if (!packageDir.exists()) {\n            boolean created = packageDir.mkdir();\n            if (!created) {\n                File currentPath = new File(\".\");\n                throw new Exception(\"Directory \" + packageName + \" could not be created. Current directory: \" + currentPath.getAbsolutePath());\n            }\n        }\n        for (int i = 0; i < fileContents.size(); i++) {\n            File file = new File(Util.JAVA_DIR + File.separator + fileNames.get(i));\n            FileOutputStream fos = new FileOutputStream(file);\n            fos.write(fileContents.get(i));\n            fos.flush();\n            fos.close();\n        }\n        for (int i = 0; i < fileNames.size(); i++) {\n            File fileSrc = new File(Util.JAVA_DIR + File.separator + fileNames.get(i));\n            File fileDst = new File(dirBase + File.separator + fileNames.get(i));\n            BufferedReader reader = new BufferedReader(new FileReader(fileSrc));\n            BufferedWriter writer = new BufferedWriter(new FileWriter(fileDst));\n            writer.append(\"package \" + packageName + \";\\n\");\n            String line = \"\";\n            while ((line = reader.readLine()) != null) writer.append(line + \"\\n\");\n            writer.flush();\n            writer.close();\n            reader.close();\n        }\n    }\n", "code2": "    private void copy(File source, File destinationDirectory) throws IOException {\n        if (source.isDirectory()) {\n            File newDir = new File(destinationDirectory, source.getName());\n            newDir.mkdir();\n            File[] children = source.listFiles();\n            for (int i = 0; i < children.length; i++) {\n                if (children[i].getName().equals(\".svn\")) {\n                    continue;\n                }\n                copy(children[i], newDir);\n            }\n        } else {\n            File newFile = new File(destinationDirectory, source.getName());\n            if (newFile.exists() && source.lastModified() == newFile.lastModified()) {\n                return;\n            }\n            FileOutputStream output = new FileOutputStream(newFile);\n            FileInputStream input = new FileInputStream(source);\n            byte[] buff = new byte[2048];\n            int read = 0;\n            while ((read = input.read(buff)) > 0) {\n                output.write(buff, 0, read);\n            }\n            output.flush();\n            output.close();\n            input.close();\n        }\n    }\n", "label": 1, "substitutes": {"save": ["Save", "send", " seal", "delete", "saving", "store", "aw", "update", "export", "filename", "pack", "zip", "release", "accept", "dump", "init", "download", "upload", "register", "data", "folder", " Save", "version", "pkg", "archive", "install"], "packageName": ["pkgname", "pkgType", "pkgId", " packageCode", "pkgKey", " packagename", "pkgNames", " packageId", "PackageType", "PackageId", "packageType", "packageKey", " packageKey", "modulename", "pkgCode", "packageId", "packageCode", "moduleName", "pkgName", "PackageNames", "packagename", "moduleCode", "PackageName", "packageNames", "moduleId", " packageNames", "moduleKey", " packageType", "moduleNames"], "fileContents": ["byteContent", "byteValues", "byteNames", "FileBytes", "pageNames", "FileItems", "fileBytes", "byteContents", "pageBytes", "fileItems", " fileItems", "fileContent", " fileValues", "fileIngredients", " fileBytes", "pageItems", " fileContent", "FileContents", "packageContents", " fileIngredients", "fileValues", "pageContents", "packageIngredients", "FileContent", "FileNames", "FileValues", "FileIngredients", "packageNames", "packageContent"], "fileNames": ["resourceTypes", " fileLeaks", "dirKeys", "FileKeys", "issueNames", "resourceNumbers", "issueName", "resourceValues", "dirTypes", "fileVaults", "fieldContents", "dirLeaks", "issueVaults", "fieldNumbers", "dirNames", "messageKeys", "fileLeaks", "FileLeaks", " fileValues", "fileNumbers", "fileKeys", "resourceContents", "moduleContents", "messageNames", " fileKeys", "fileTypes", "fieldTypes", "moduleVaults", "FileTypes", "FileContents", "FileName", "messageName", " fileName", "moduleName", "fileValues", "fileName", "resourceNames", "issueContents", " fileTypes", "FileNames", "fieldNames", "FileValues", " fileVaults", " fileNumbers", "messageValues", "moduleNames"], "dirBase": ["folderBase", " directoryBase", "folderBas", "folderBasic", "dirSet", "DirBuilder", "directoryBasic", "dirBasic", "folderbase", "directoryBas", " directoryBottom", "pkgBas", "pathBas", " directoryBas", "DIRBas", "DirBase", "irBase", "irSet", "DIRBuilder", "pathbase", "dirBas", "DirBottom", "directorybase", "DIRBase", "pkgSet", "dirBuilder", " directoryBuilder", "DirBas", "pathBasic", "irbase", "dirbase", "pkgbase", "DIRBottom", "directorySet", "pkgBase", "irBas", "directoryBase", "dirBottom", "pathBase"], "packageDir": [" packagePath", "podDef", " packageRel", "installDist", "packageDef", " packageFolder", " packageDef", "podDist", "packageDist", "modulePath", "installDir", "pkgPath", "moduleFolder", "packageD", "installDef", "moduleRel", " packageDist", "moduleDir", " packageD", "moduleDef", "podD", "packagePath", "pkgDef", "podDir", "installD", "pkgDir", "pkgFolder", "packageRel", "pkgRel", "packageFolder"], "created": ["started", "added", " started", "filled", "printed", "given", "generated", "Created", "loaded", "reported", "recorded", "developed", "creation", "founded", " generated", "TED", "provided", "present", "confirmed", "released", "registered", "arted", "creat", "allowed", "create", "forced", "associated", "locked", "successful", "mounted", "made", "called", "produced", "raised", "ready", "installed", "joined", "defined", "existent", "checked", "ced", "creator", "activated"], "currentPath": ["recentPath", "currentCh", " currentName", "currentPoint", "currentParent", "CurrentParent", " currentPoint", "CurrentPath", "CurrentPoint", " currentParent", "CurrentFile", "currentlyCh", "currentlyName", "currentlyFile", "recentPoint", " currentCh", "recentParent", "recentName", "currentlyPath", "currentName", " currentFile", "CurrentCh", "currentFile", "CurrentName"], "i": ["I", "iq", "jj", "ini", "cgi", "iy", "ci", "m", "f", "slice", "exp", "qi", "key", "ix", "ui", "this", "iii", "y", "v", "ic", "zi", "p", "gi", "in", "phi", "oi", "ri", "mi", "ex", "iu", "status", "cli", "o", "major", "me", "chain", "ip", "ti", "batch", "them", "li", "id", "my", "ity", "si", "pi", "yi", "multi", "init", "ind", "ei", "ij", "im", "ai", "sim", "it", "bi", "hi", "ami", "ji", "di", "ki", "ii", "j", "go", "index", "mu", "ski", "uri", "q", "xi", "ie", "u", "g", "info", "os"], "file": ["local", "path", "et", "dir", "p", "log", "h", "parent", "io", "resource", "FILE", "disk", "ile", "child", "row", "File", "rule", "port", "link", "f", "sf", "base", "set", "play", "buffer", "table", "page", "format", "db", "name", "template", "comment", "source", "le", "fo", "header", "l", "handle", "info", "pool", "type", "body", "handler"], "fos": ["sfos", "Fos", "sfaos", "oos", "woss", "floses", "ffos", "flo", "faos", " fow", "ffaos", " fOS", " fo", "woes", " foes", "ffo", "fbos", "fow", "fbow", "foss", "fbaos", "woses", "foes", "flos", "Faos", " faos", "Foes", "fbo", "floss", "ffoes", "oow", " foses", "floes", "Fo", "sfOS", "fo", "oaos", "sfoss", "foses", "fOS", "FOS", "flaos", "oo", "wos", " foss", "Foss"], "fileSrc": ["jobSri", "fileSRC", "fileNrc", "fileNrl", "jobNci", "fileInource", " fileInsource", "fileNci", "fileErc", " fileSRC", "fileInsRC", "jobSci", "fileDri", "fileDrc", "jobNri", " fileInsrc", "fileInssrc", " fileSource", "fileInRC", "jobNrl", "fileSource", " fileInsRC", "fileEci", "fileSri", "fileDsrc", "jobNrc", "fileInrc", "fileDource", "jobSrc", " fileInssrc", "fileSsrc", "fileDci", "fileDRC", "fileSrl", "fileSci", "fileErl", "fileInsource", "fileInsrc", "fileEri", "jobSrl", "fileNri", " fileSsrc", "fileDrl"], "fileDst": ["fileNot", "FileSpl", "fileSld", "fileWpl", "FileDst", "fileSlt", "FileSot", "fileDld", "fileDnd", "FileDld", "fileSot", "filedld", "fileDot", "FileDnd", "FileSld", "fileNnd", "fileNpl", "FileSlt", "fileNst", "fileDlt", "FileSnd", "fileSpl", "filedst", "fileSnd", "fileWot", "fileWlt", "fileNlt", "fileSst", "fileNld", "FileDcr", "fileDcr", "FileDlt", "filedcr", "FileSst", "FileScr", "filednd", "fileNcr", "FileDpl", "fileScr", "fileWst", "fileDpl", "FileDot"], "reader": ["dr", "ocker", "Larry", "handler", "resource", "roller", "oder", "rx", "loader", "ader", "ner", "context", "row", "Reader", "review", "ri", "r", "entry", "query", "ro", "inner", "upper", "ler", "rot", "runner", "book", "iterator", "iter", "buffer", "read", "parser", "rr", "readable", "reading", "rer", "rl", "actor", "driver", "rc", "controller", "er", "stream", "rar", "author"], "writer": ["later", "player", "function", "riter", "variable", "print", "wrapper", "test", "store", "browser", "loader", "wright", "adder", "creator", "service", "Reader", "flush", "manager", "storage", "maker", "walker", "editor", "query", "write", "worker", "console", "outer", "runner", "builder", "server", "iterator", "iter", "writers", "buffer", "table", "format", "draw", "user", "read", "parser", "document", "client", "caster", "liner", "ter", "println", "Writer", "report", "driver", "writing", "window", "order", "wire", "operator", "stream", "handler", "entry", "w", "word"], "line": ["text", "ln", "kin", "sample", "cell", "number", "string", "sequence", "nl", "inline", "point", "print", "ole", "row", "stroke", "detail", "record", "style", "rule", "edge", "range", "block", "node", "port", "label", "code", "link", "valid", "pe", "page", "message", "lin", "entity", "date", "column", "user", "frame", "liner", "comment", "ine", "source", "le", "eline", "lined", "chain", "header", "Line", "l", "LINE", "continue", "entry", "word"]}}
{"id1": "5998352", "id2": "15645004", "code1": "    @Test\n    public void testStandardTee() throws Exception {\n        final String reference = \"test\";\n        final Reader source = new StringReader(reference);\n        final StringWriter destination1 = new StringWriter();\n        final StringWriter destination2 = new StringWriter();\n        final TeeWriter tee = new TeeWriter(destination1, destination2);\n        org.apache.commons.io.IOUtils.copy(source, tee);\n        tee.close();\n        assertEquals(\"the two string are equals\", reference, destination1.toString());\n        assertEquals(\"the two string are equals\", reference, destination2.toString());\n        assertEquals(\"byte count\", reference.length(), tee.getSize());\n    }\n", "code2": "    private void unzip(File filename) throws ZipException, IOException {\n        ZipInputStream in = new ZipInputStream(new BufferedInputStream(new FileInputStream(filename)));\n        ZipEntry entry = null;\n        boolean first_entry = true;\n        while ((entry = in.getNextEntry()) != null) {\n            if (first_entry) {\n                if (!entry.isDirectory()) {\n                    File subdir = new File(dir + File.separator + filename.getName().substring(0, filename.getName().length() - SUFFIX_ZIP.length()));\n                    if (!subdir.exists()) {\n                        subdir.mkdir();\n                        dir = subdir;\n                    }\n                }\n                first_entry = false;\n            }\n            if (entry.isDirectory()) {\n                FileUtils.forceMkdir(new File(dir + File.separator + entry.getName()));\n            } else {\n                File outfile = new File(dir + File.separator + entry.getName());\n                File outdir = new File(outfile.getAbsolutePath().substring(0, outfile.getAbsolutePath().length() - outfile.getName().length()));\n                if (!outdir.exists()) FileUtils.forceMkdir(outdir);\n                FileOutputStream fo = new FileOutputStream(outfile);\n                BufferedOutputStream bos = new BufferedOutputStream(fo, BUFFER);\n                int read;\n                byte data[] = new byte[BUFFER];\n                while ((read = in.read(data, 0, BUFFER)) != -1) {\n                    read_position++;\n                    bos.write(data, 0, read);\n                }\n                bos.flush();\n                bos.close();\n            }\n        }\n        in.close();\n    }\n", "label": 1, "substitutes": {"testStandardTee": [" testStandardNees", " testStandardTe", " testStandardMees", " testStandardEee", " teststandardMe", " testStandardMee", " teststandardMees", " testStandardTees", " teststandardTees", " testStandardNe", " testStandardMette", " teststandardTette", " testStandardEette", " teststandardMette", " testStandardEees", " testStandardTette", " testStandardNee", " testStandardEe", " testStandardNette", " testStandardMe", " teststandardTee", " teststandardMee", " teststandardTe"], "reference": ["search", "address", "sample", "description", "function", "definition", "string", "sequence", "operation", "reverse", "back", "print", "test", "remote", "position", "internal", "specified", "service", "resolution", "relative", "attribute", "filename", "external", "section", "re", "library", "relation", "condition", "pattern", "alias", "title", "link", "Reference", "expression", "note", "prefix", "example", "using", "argument", "message", "see", "associated", "document", "template", "name", "register", "pointer", "value", "report", "approximately", "memory", "use", "hello", "key", "request", "directory", "ref", "type", "information", "collection", "word"], "source": ["seed", "sample", "force", "file", "sequence", "resource", "src", "store", "loader", "context", "SOURCE", "service", "select", "from", "username", "copy", "target", "reader", "shell", "style", "ource", "inner", "instance", "console", "base", "iterator", "buffer", "Source", "format", "get", "sql", "core", "input", "template", "spec", "ser", "unit", "operator", "stream"], "destination1": ["destificateOne", "destension1", "destinationName", "destregationName", "Destinator1", "destinator1", "destination01", "destinationFirst", "stinationFirst", "destinationsFirst", "destificationone", "stinationOne", "Destination1", "stension2", "destinator01", "destificationName", "DestinatorOne", "destification1", "stension1", "DestinationName", "destinatorOne", "stination2", "stensionFirst", "destinations2", "DestinationOne", "destinations1", "destation1", "destension2", "Destinationone", "destinationOne", "destregationone", "desturationOne", "Destination01", "desturation2", "destensionOne", "destationOne", "stensionOne", "desturationFirst", "destregation1", "destinatorName", "desturation1", "destinatorone", "destregationOne", "Destinator01", "destinationsOne", "destation01", "destificate01", "destificate1", "stination1", "DestinatorName", "destificationOne", "destensionFirst", "destinationone", "Destinatorone"], "destination2": ["destinateTwo", "destension1", "destinator2", "destinate1", "destinator52", " desturation2", "DestinationTwo", "Destination2", "destensionTwo", "destension4", "estination3", "destendanttwo", "Destination1", "Destension2", "destinationtwo", "destinated3", "destendantB", "DestensionTwo", "desturation4", "desturationB", "estinition3", "destendant4", " desturationtwo", "destinate2", " desturation4", "destination52", "destinated52", "destociation2", " destination4", "destination3", "destinition52", "desturation2", "destinition3", " destinationtwo", "Destension1", "desturationtwo", "destensiontwo", "destinationB", "estination52", "destinated2", "destination4", "destensionB", "estination2", "estinition2", "destendant2", "destinition2", "estinition52", "destociation1", "destociationTwo", "destinator3", "destinationTwo", "destension2", " desturationB", " destinationB"], "tee": ["teee", "seee", "ceE", "cees", "teer", "peE", "cheee", "teoe", "pees", "pee", "peoe", "ceee", " teea", "peee", "chete", "tees", "cee", "ceoe", "teE", " teE", "tete", "seoe", "ceer", "see", " tees", "teea", "ieee", "ieea", "iee", "cheea", " teer", "seE", " teoe", " tete", "chee", "peer", "iete", " teee"]}}
{"id1": "9257487", "id2": "17627195", "code1": "    public static boolean downloadFile(String from, String to, ProgressMonitor pm) {\n        try {\n            FileOutputStream out = new FileOutputStream(to);\n            URL url = new URL(from);\n            URLConnection conn = url.openConnection();\n            InputStream in = conn.getInputStream();\n            byte[] buffer = new byte[1024];\n            int read = 0;\n            while ((read = in.read(buffer)) != -1) {\n                out.write(buffer, 0, read);\n                if (pm != null) pm.addToProgress(read);\n            }\n            out.close();\n            in.close();\n        } catch (Exception e) {\n            Installer.getInstance().getLogger().log(StringUtils.getStackTrace(e));\n            return false;\n        }\n        return true;\n    }\n", "code2": "    public Document getContentAsDocument() {\n        synchronized (this.url) {\n            URLConnection connection = this.url.openConnection();\n            if (doReload(connection)) {\n                InputSource inputSource = new InputSource(connection.getInputStream());\n                DocumentBuilderFactory factory = new DocumentBuilderFactoryImpl();\n                this.document = factory.newDocumentBuilder().parse(inputSource);\n            }\n            return this.document;\n        }\n    }\n", "label": 0, "substitutes": {"downloadFile": ["downloadFiles", "updateFiles", "DownloadFile", "updateResource", " downloadResource", "updateFile", "DownloadResource", " downloadFiles", "Downloadfile", " downloadfile", "DownloadFiles", "downloadResource", "downloadfile", "updatefile"], "from": ["os", "path", "fl", "term", "by", "src", "From", "old", "part", "st", "ol", "original", "view", "range", "vol", "a", "html", "initial", "base", "config", "form", "uri", "simple", "input", "un", "name", "rom", "source", "reset", "add", "or", "of", "with", "request", "fr", "entry", "se"], "to": ["tty", "file", "delete", "p", "oto", "by", "into", "po", "toc", "t", "dest", "te", "output", "target", "eto", "pi", "title", "auto", "o", "base", "ta", "tmp", "name", "pretty", "template", "too", "TO", "done", "fully", "top", "ato", "tom", "tu", "tt", "temp", "To"], "pm": ["mc", "rpm", "pt", "PM", "monitor", "p", "mt", "mx", "po", " ppm", " mm", "progress", "mr", "mon", "mi", "rem", "nom", "pl", "sem", "pi", "m", "vm", "wm", "ps", "meter", "ms", "rm", "hm", "bm", "mm", "cm", "arm", "pr", "asm", "am", "dem", "pa", "dm", "mp", "fm", "pp", "em", "gm", "km", "pc", "aph", "jp"], "out": ["os", "op", "outs", "at", "file", "en", "p", "OU", "log", "io", "oe", "t", "obj", "nt", "ot", "aos", "output", "we", "flush", "n", "ex", "i", "write", "res", "auto", "on", "f", "o", "net", "body", "oss", "writer", "gr", "client", "pretty", "OUT", "Out", "cache", "ou", "ne", "can", "co", "con", "w"], "url": ["sl", "fl", "ret", "Url", "p", "li", "str", "nl", "b", "char", "conv", "ls", "open", "re", "r", "dl", "ll", "res", "host", "https", "ssl", "link", "f", "uri", "rel", "base", "URL", "job", "web", "net", "loc", "ur", "ch", "user", "cert", "client", "bel", "hl", "http", "l", "il", "ver", "ul"], "conn": ["cur", "serv", "nl", "gate", "conv", "Conn", "nt", "open", "comm", "cp", "ctx", "c", "connection", "https", "cc", "close", "col", "ns", "com", "net", "connect", "iw", "cn", "ch", "cert", "yn", "client", "cm", "nc", "addr", "enc", "cb", "l", "cmd", "nec", "con"], "in": ["ic", "en", "sin", "io", "is", "inf", "up", "cin", "ill", "ri", "reader", "IN", "inc", "i", "inner", "inside", "ar", " din", "on", "iter", "din", "oin", "init", "input", "isin", "ind", "gin", "In", "and", "el", "ai", "ins", "rin", "it", "bin", "il", "nin", "ain", "inn"], "buffer": ["sample", "cell", "batch", "number", "binary", "sequence", "variable", "append", "bar", "char", "length", "row", "stack", "phrase", "detail", "se", "attribute", "button", "view", "word", "library", "block", "mem", "initial", "reason", "iter", "base", "table", "message", "buff", "paste", "raw", "column", "tree", "frame", "template", "document", "memory", "value", "chain", "pad", "window", "cache", "buf", "Buffer", "temp", "entry", "command"], "read": ["text", "send", "val", "head", "scan", "log", "print", "used", "old", "length", "t", "count", "start", "bind", "num", "row", "select", "skip", "run", "ke", "open", "output", "reader", "len", "index", "n", "stream", "check", "query", "write", "i", "ok", "mem", "iter", "pe", "connect", "end", "READ", "get", "raw", "draw", "reads", "q", "req", "push", "input", "ind", "download", "seek", "readable", "score", "load", "reading", "add", "Read", "ready", "hello", "handle", "hold", " Read", "next", "sync", "last", "find", "gets", "w", "size"]}}
{"id1": "3631989", "id2": "2525897", "code1": "    public void run() {\n        URL url;\n        try {\n            url = new URL(\"http://localhost:8080/glowaxes/dailytrend.jsp\");\n            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n            while ((str = in.readLine()) != null) {\n            }\n            in.close();\n        } catch (MalformedURLException e) {\n        } catch (IOException e) {\n        }\n    }\n", "code2": "    public static byte[] decode(String cryptPassword, byte[] encoded, byte[] salt) {\n        try {\n            MessageDigest digester = MessageDigest.getInstance(DIGEST);\n            SecureRandom random = SecureRandom.getInstance(RANDOM);\n            digester.reset();\n            for (int i = 0; i < ITERATIONS; i++) {\n                digester.update(salt);\n                digester.update(cryptPassword.getBytes(\"UTF-8\"));\n            }\n            byte[] hash = digester.digest();\n            random.setSeed(hash);\n            int maxKeySize = Cipher.getMaxAllowedKeyLength(CIPHER);\n            KeyGenerator generator = KeyGenerator.getInstance(CIPHER);\n            generator.init(maxKeySize, random);\n            SecretKey key = generator.generateKey();\n            Cipher cipher = Cipher.getInstance(CIPHER);\n            cipher.init(Cipher.DECRYPT_MODE, key);\n            byte[] decoded = cipher.doFinal(encoded);\n            return decoded;\n        } catch (Exception e) {\n            StorePlugin.getDefault().log(e);\n        }\n        return new byte[0];\n    }\n", "label": 0, "substitutes": {"run": ["evaluate", "background", "sample", "submit", "show", "render", "process", "test", "start", " Run", "begin", "call", "thread", "profile", "runner", "loop", "web", "app", "Run", "exec", "execute", "running", "unit", "runs", "launch"], "url": ["sl", "gl", "address", "v", "h", "file", "Url", "p", "ret", "hub", "git", "nl", "id", "mail", "channel", "b", "char", "k", "t", "browser", "re", "r", "dl", "null", "ll", "https", "ssl", "link", "location", "f", "uri", "base", "URL", "web", "ur", "github", "cert", "name", "u", "client", "hl", "bel", "http", "pr", "key", "mount", "el", "l", "window", "xml", "il", "stream"], "in": ["ln", "ic", "en", "print", "is", "inf", "al", "cin", "from", "reader", "r", "IN", "inc", "n", "inner", " din", "on", "ma", "er", "out", "din", "oin", "all", "input", "isin", "ind", "read", "gin", "line", "In", "mn", "and", "el", "ins", "rin", "sum", "l", "it", "bin", "ill", "con", "inn"], "str": ["text", "ln", "err", "serv", "string", "p", "txt", "nl", "char", "st", "obj", "j", "r", "c", "bl", "n", "i", "status", "f", "Str", "iter", "s", "sp", "out", "ch", "list", "l", "fr", "body"]}}
{"id1": "7396682", "id2": "539195", "code1": "    public static boolean copy(FileSystem srcFS, Path src, File dst, boolean deleteSource, Configuration conf) throws IOException {\n        if (srcFS.getFileStatus(src).isDir()) {\n            if (!dst.mkdirs()) {\n                return false;\n            }\n            FileStatus contents[] = srcFS.listStatus(src);\n            for (int i = 0; i < contents.length; i++) {\n                copy(srcFS, contents[i].getPath(), new File(dst, contents[i].getPath().getName()), deleteSource, conf);\n            }\n        } else if (srcFS.isFile(src)) {\n            InputStream in = srcFS.open(src);\n            IOUtils.copyBytes(in, new FileOutputStream(dst), conf);\n        } else {\n            throw new IOException(src.toString() + \": No such file or directory\");\n        }\n        if (deleteSource) {\n            return srcFS.delete(src, true);\n        } else {\n            return true;\n        }\n    }\n", "code2": "    static void copy(String src, String dest) throws IOException {\n        File ifp = new File(src);\n        File ofp = new File(dest);\n        if (ifp.exists() == false) {\n            throw new IOException(\"file '\" + src + \"' does not exist\");\n        }\n        FileInputStream fis = new FileInputStream(ifp);\n        FileOutputStream fos = new FileOutputStream(ofp);\n        byte[] b = new byte[1024];\n        while (fis.read(b) > 0) fos.write(b);\n        fis.close();\n        fos.close();\n    }\n", "label": 1, "substitutes": {"copy": ["proxy", "clone", "delete", "py", "Cop", "cat", "pixel", "replace", "fit", "clip", "map", "cross", "cop", "php", "cp", "write", "zip", "link", "split", "crop", "slice", "core", "create", "Copy", "download", "transfer", "read", "upload", "sync", "load", "repeat", "move", "gc", "share", "archive", "opy"], "srcFS": ["rcVS", "srcfs", "sourceCS", "sysFS", "sourceFS", "sysOS", "rcCS", " srcVS", "srcSF", " srcOS", "srcOS", "sysVS", "srFS", "srcCS", "srcVS", "rcSF", "sourceFs", "rcOS", "srcFs", "srMS", "rcMS", "rcfs", " srcSF", "sourceOS", "srcMS", " srcMS", "sourceSF", "srFs", "sourcefs", " srcCS", "sysFs", "rcFs", "srfs", " srcfs", "rcFS", " srcFs", "sourceVS"], "src": ["sec", "nil", "sr", "sq", "path", "cur", "subject", "sci", "ctr", "dir", "txt", "str", "sin", "resource", "rx", "selected", "st", "start", "obj", "dest", "SOURCE", "from", "target", "filename", "url", "rs", "RC", "boot", "pri", "check", "node", "proc", "img", "secure", "https", "obs", "sit", "supp", "rel", "syn", "desc", "uri", "sc", "Source", "sb", "loc", "th", "comp", "tmp", "init", "usr", "req", "via", "input", "spec", "http", "sys", "source", "cont", "addr", "rc", "ser", "pkg", "sub", "inst", "sync", "sn", "iv", "lb"], "dst": ["Dst", "dnd", "degt", "dsgt", " dlt", "lest", "desst", "DST", "DDest", "Dest", "lst", "dest", "deest", "dsST", "ddest", "dST", "dddest", "Dlt", "dhdest", " dest", "desdest", " ddest", " dDest", "dhlt", "dhst", "desnd", "dsdest", "ldest", "lgt", "dlt", "ddst", "ddlt", "dhDest", "dsst", "dsest", "deslt", "dgt", "ddnd", "Ddest", "dsnd", "dedest", " dST", "dslt", "dDest"], "deleteSource": ["deleteTarget", "removeSOURCE", "updateSource", "updateSourceFile", " deleteResult", " deleteTarget", "delParent", "DeleteSource", "DeleteSourceFile", " deleteSources", "leteParent", "deleteResult", "updateSOURCE", "closeSOURCE", "destroyResult", "deleteSOURCE", "leteSource", "leteTarget", "destroyTarget", "closeSite", "removeParent", "closeSourceFile", "destroySource", "deleteSourceFile", "closeSource", "deleteDest", "removeSource", "delDest", "removeDest", "deleteParent", "leteSources", "leteDest", "delSOURCE", "DeleteSite", "delSource", "leteSOURCE", "deleteSources", "DeleteSOURCE", "deleteSite", "destroySources", "leteResult", "updateSite"], "conf": ["ln", "irm", "cms", "scan", "log", "lib", "Conf", "map", "hash", "conv", "ca", "ban", "comm", "ctx", "check", "m", "cc", "fs", "f", "config", "job", "def", "com", "params", "cf", "conn", "cn", "acc", "ch", "cfg", "req", "plan", "mm", "q", "cm", "comment", "report", "cb", "cache", "param", "ref", "css", "prop", "pool", "info", "co", "con"], "contents": ["CONTterms", " contterms", "CONTresses", "Contants", "CONTENTS", " ContENTS", "Contents", "ContENT", "CONTants", "contterms", " content", "Content", "contENT", "content", "constents", "CONTodes", "constENTS", " Contents", "Contodes", " contresses", " contENTS", "CONTent", " contaves", "constends", "contants", "contends", " Content", "constaves", "CONTents", "CONTaves", "contresses", "contENTS", "Contterms", " contends", " contENT", " Contresses", "contaves", "CONTends", "contodes", " contants", " contodes", "CONTENT"], "i": ["ti", "ji", "I", "ic", "iq", "docker", "li", "id", "gi", "my", "is", "di", "ki", "ii", "\u0438", "j", "span", "phi", "oi", "mi", "si", "index", "ini", "n", "inner", "pi", "ci", "m", "ims", "cli", "ski", "o", "iter", "ms", "multi", "q", "init", "xi", "ie", "ind", "ei", "u", "client", "ij", "x", "me", "im", "qi", "key", "chain", "ai", "ix", "sim", "ip", "us", "it", "hi", "ui", "bi", "ori", "json", "ami", "y"], "in": ["mc", "sample", "en", "by", "char", "is", "inf", "cin", "from", "reader", "re", "r", "ini", "IN", "inc", "check", "inner", "ze", " din", "out", "din", "raw", "doc", "input", "isin", "ind", "read", "In", "source", "add", "and", "ins", "xml", "bin", "body", "sql", "con", "inn"]}}
{"id1": "1141361", "id2": "12490144", "code1": "    @Override\n    public void makeRead(final String user, final long databaseID, final long time) throws SQLException {\n        final String query = \"insert into fs.read_post (post, user, read_date) values (?, ?, ?)\";\n        ensureConnection();\n        final PreparedStatement statement = m_connection.prepareStatement(query);\n        try {\n            statement.setLong(1, databaseID);\n            statement.setString(2, user);\n            statement.setTimestamp(3, new Timestamp(time));\n            final int count = statement.executeUpdate();\n            if (0 == count) {\n                throw new SQLException(\"Nothing updated.\");\n            }\n            m_connection.commit();\n        } catch (final SQLException e) {\n            m_connection.rollback();\n            throw e;\n        } finally {\n            statement.close();\n        }\n    }\n", "code2": "    private void createJCoPluginProject(IProgressMonitor monitor, String sourceFileName, String pluginName) throws CoreException, IOException {\n        monitor.subTask(MessageFormat.format(Messages.ProjectGenerator_CreatePluginTaskDescription, pluginName));\n        final Map<String, byte[]> files = readArchiveFile(sourceFileName);\n        monitor.worked(10);\n        IProject project = workspaceRoot.getProject(pluginName);\n        if (project.exists()) {\n            project.delete(true, true, new SubProgressMonitor(monitor, 5));\n        } else {\n            monitor.worked(5);\n        }\n        project.create(new SubProgressMonitor(monitor, 5));\n        project.open(new SubProgressMonitor(monitor, 5));\n        IProjectDescription description = project.getDescription();\n        description.setNatureIds(new String[] { JavaCore.NATURE_ID, PLUGIN_NATURE_ID });\n        project.setDescription(description, new SubProgressMonitor(monitor, 5));\n        IJavaProject javaProject = JavaCore.create(project);\n        IFolder binDir = project.getFolder(\"bin\");\n        IPath binPath = binDir.getFullPath();\n        javaProject.setOutputLocation(binPath, new SubProgressMonitor(monitor, 5));\n        project.getFolder(\"jni\").create(true, true, new SubProgressMonitor(monitor, 5));\n        project.getFile(\"sapjco3.jar\").create(new ByteArrayInputStream(files.get(\"sapjco3.jar\")), true, new SubProgressMonitor(monitor, 10));\n        IFolder metaInfFolder = project.getFolder(\"META-INF\");\n        metaInfFolder.create(true, true, new SubProgressMonitor(monitor, 5));\n        StringBuilder manifest = new StringBuilder();\n        manifest.append(\"Manifest-Version: 1.0\\n\");\n        manifest.append(\"Bundle-ManifestVersion: 2\\n\");\n        manifest.append(\"Bundle-Name: SAP Java Connector v3\\n\");\n        manifest.append(MessageFormat.format(\"Bundle-SymbolicName: {0}\\n\", pluginName));\n        manifest.append(\"Bundle-Version: 7.11.0\\n\");\n        manifest.append(\"Bundle-ClassPath: bin/,\\n\");\n        manifest.append(\" sapjco3.jar,\\n\");\n        manifest.append(\" jni/\\n\");\n        manifest.append(\"Bundle-Vendor: SAP AG, Walldorf (packaged using RCER)\\n\");\n        manifest.append(\"Bundle-RequiredExecutionEnvironment: J2SE-1.5\\n\");\n        manifest.append(\"Export-Package: com.sap.conn.jco,\\n\");\n        manifest.append(\" com.sap.conn.jco.ext,\\n\");\n        manifest.append(\" com.sap.conn.jco.monitor,\\n\");\n        manifest.append(\" com.sap.conn.jco.rt,\\n\");\n        manifest.append(\" com.sap.conn.jco.server\\n\");\n        manifest.append(\"Bundle-ActivationPolicy: lazy\\n\");\n        writeTextFile(monitor, manifest, metaInfFolder.getFile(\"MANIFEST.MF\"));\n        final IPath jcoPath = new Path(MessageFormat.format(\"/{0}/sapjco3.jar\", pluginName));\n        IClasspathEntry jcoEntry = JavaCore.newLibraryEntry(jcoPath, Path.EMPTY, Path.EMPTY, true);\n        final IPath jniPath = new Path(MessageFormat.format(\"/{0}/jni\", pluginName));\n        IClasspathEntry jniEntry = JavaCore.newLibraryEntry(jniPath, Path.EMPTY, Path.EMPTY, true);\n        javaProject.setRawClasspath(new IClasspathEntry[] { jcoEntry, jniEntry }, new SubProgressMonitor(monitor, 5));\n        StringBuilder buildProperties = new StringBuilder();\n        buildProperties.append(\"bin.includes = META-INF/,\\\\\\n\");\n        buildProperties.append(\"               sapjco3.jar,\\\\\\n\");\n        buildProperties.append(\"               jni/,\\\\\\n\");\n        buildProperties.append(\"               .\\n\");\n        writeTextFile(monitor, buildProperties, project.getFile(\"build.properties\"));\n        exportableBundles.add(modelManager.findModel(project));\n    }\n", "label": 0, "substitutes": {"makeRead": [" doPost", " processCreate", "doCreate", " initialCreate", " doRead", " initialFind", "doFind", " processPost", "doPost", " processFind", "doRead", " initialRead", " processRead", " doFind", " initialPost", " doCreate"], "user": ["human", "string", "file", "field", "post", "by", "uid", "auth", "username", "rule", "url", "owner", "users", "USER", "connection", "host", "person", "server", "plugin", "nick", "table", "message", "date", "project", "database", "student", "client", "name", "User", "password", "use", "account", "usage", "author", "creator", "word"], "databaseID": ["connectionTime", " databaseId", "databaseId", "databaseAND", "directoryTime", "connectionAND", "databaseTime", "databaseIDs", "connectionIDs", "databaseid", " databaseTime", "directoryIDs", "directoryAND", "directoryid", " databaseIDs", " databaseAND", "connectionid", "directoryId", "connectionID", "connectionId", " databaseid", "directoryID"], "time": ["created", "sequence", "TIME", "id", "timer", "mode", "length", "t", "start", "zone", "runtime", "age", "frequency", "clock", "money", "rate", "port", "duration", "delay", "tm", "times", "message", "end", "date", "ime", "second", "Time", "hour", "tim", "etime", "value", "version", "tc", "year", "info", "type", "tt", "now", "timeout"], "query": ["search", "sq", "description", "string", "term", "gate", "Query", "qu", "clean", "transform", "question", "then", "select", "run", "work", "call", "view", "content", "qa", "menu", "condition", "title", "quote", "code", "eries", "note", "message", "q", "comment", "execute", "quest", "request", "task", "script", "cmd", "find", "body", "sql", "ql", "entry", "command"], "statement": ["subject", "function", "batch", "description", "number", "definition", "binary", "sequence", "mt", "that", "communication", "print", "yahoo", "bind", "Statement", "position", "slot", "phrase", "se", "storage", "shell", "call", "rule", "frequency", "ements", "ts", "word", "library", "connection", "session", "condition", "stat", "status", "quote", "console", "confirmed", "volume", "language", "article", "expression", "ct", "buffer", "table", "sp", "page", "message", "result", "database", "journal", "commit", "document", "template", "media", "comment", "le", "report", "memory", "finder", "list", "execute", "fr", "cmd", "state", "sql", "usage", "entry", "command"], "count": ["contact", "batch", "number", "ount", "any", "amount", "nb", "length", "num", "nt", "current", "total", "complete", "call", "index", "c", "check", "status", "code", "set", "table", "counter", "message", "loc", "found", "all", "ind", "Count", "OUNT", "report", "flag", "list", "handle", "sum", "coll", "state", "find", "now", "size"]}}
{"id1": "5744493", "id2": "1169642", "code1": "    protected void onlyFileCopy(File in, File out) throws IOException {\n        FileChannel inChannel = new FileInputStream(in).getChannel();\n        FileChannel outChannel = new FileOutputStream(out).getChannel();\n        try {\n            int maxCount = (1024 * 1024 * 64) - (1024 * 32);\n            long size = inChannel.size();\n            long pos = 0;\n            while (pos < size) {\n                pos += inChannel.transferTo(pos, maxCount, outChannel);\n            }\n        } catch (IOException e) {\n            throw e;\n        } finally {\n            if (inChannel != null) inChannel.close();\n            if (outChannel != null) outChannel.close();\n        }\n    }\n", "code2": "    @Override\n    public void run() {\n        String key = getKey();\n        synchronized (this.lauchedHTTPRequests) {\n            if (this.lauchedHTTPRequests.contains(key)) return;\n            this.lauchedHTTPRequests.add(key);\n        }\n        String st = this.dataSource.getTileURL(this.x, this.y, this.z);\n        URL url;\n        try {\n            url = new URL(st);\n        } catch (MalformedURLException e1) {\n            logger.warning(\"Error in URL: \" + st);\n            return;\n        }\n        String geoJSON = \"\";\n        try {\n            InputStream is;\n            if (\"file\".equals(url.getProtocol())) is = new FileInputStream(url.getFile()); else if (\"http\".equals(url.getProtocol())) is = url.openStream(); else {\n                logger.warning(\"Impossible to load settings from \" + url + \". Unsupported protocol \" + url.getProtocol());\n                return;\n            }\n            BufferedReader in = new BufferedReader(new InputStreamReader(is));\n            String line;\n            while ((line = in.readLine()) != null) geoJSON += line;\n            in.close();\n        } catch (FileNotFoundException e) {\n            return;\n        } catch (IOException e) {\n            e.printStackTrace();\n            return;\n        }\n        VectorTile tile = new VectorTile(geoJSON, x, y, z);\n        Geometry[] geoms = new Geometry[tile.getPieces().size()];\n        int i = 0;\n        for (MfGeo geo : tile.getPieces()) {\n            if (geo.getGeoType() == GeoType.GEOMETRY) {\n                geoms[i++] = ((MfGeometry) geo).getInternalGeometry();\n            } else if (geo.getGeoType() == GeoType.FEATURE) {\n                MfFeature mf = (MfFeature) geo;\n                geoms[i++] = mf.getMfGeometry().getInternalGeometry();\n            }\n        }\n        GeometryCollection gc = new GeometryFactory().createGeometryCollection(geoms);\n        this.dataSource.getDataLoader().add(new OpenCartoFeature(this.dataSource.getLayer(), new Rep(gc), this.z));\n        this.dataSource.getLayer().getDisplayCacheLoader().coin();\n        synchronized (this.lauchedHTTPRequests) {\n            this.lauchedHTTPRequests.remove(key);\n        }\n    }\n", "label": 0, "substitutes": {"onlyFileCopy": [" doFileCopy", " doFileDownload", " synchronizedFullMove", " doFileMove", " synchronizedFullCopy", " synchronizedFileDownload", " synchronizedFileCopy", " doStreamMove", " doPageMove", " doStreamDownload", " doPageCopy", " synchronizedFullDownload", " synchronizedFileMove", " doFullMove", " doPageDownload", " doFullCopy", " doStreamCopy", " doFullDownload"], "in": ["ic", "file", "en", "b", "old", "inf", "up", "cin", "from", "r", "ex", "IN", "inc", "i", "n", "o", "as", "din", "ck", "init", " input", "isin", "input", "ind", "mm", "gin", "source", "In", "or", "el", "ac", "ins", "rin", "l", "it", "ain", "inn"], "out": ["v", "serv", "op", "at", "log", "file", "p", "io", "help", "t", "po", "up", "nt", "ot", "output", "c", "null", "n", "ex", "check", "to", "write", "res", "gt", "o", "as", "net", "s", "ch", "OUT", "Out", "l", "it", "ou", "outs", "ne", "os", "w"], "inChannel": ["inConnection", "outChan", "InChan", " inConnection", " inButton", " inCase", " inCategory", "innCommand", "InCh", "innChannel", "innerStream", "inCommand", "INChan", " inchannel", " inCh", "outCh", "dinChan", "inCategory", "dinButton", "inCase", "dinConnection", "inButton", "inStream", "INchannel", "cinCommand", "inCh", "isinConnection", " inChan", "outStream", "INChannel", "isinChan", "innCategory", "INStream", "innerChannel", "dinCommand", "vinCase", "outchannel", "innButton", "inChan", "inchannel", "isinButton", "cinButton", "dinChannel", "dinCase", "InChannel", " inCommand", "cinChannel", "vinConnection", "innerChan", "Inchannel", "innerchannel", "vinCommand", "isinChannel", "cinCategory", "vinChannel"], "outChannel": ["aosMachine", "outChan", "upSection", "outerChannel", " outRoom", "outputChannel", "onChan", "upChannel", "OutStream", "outConnection", "OutChan", "cosMachine", "aosDisk", "outerChan", "outCh", "outerStream", " outStream", "onchannel", "onChannel", "newChannel", "upDisk", "inRoom", "outDisk", "inStream", " outChan", "onConnection", "OutChannel", "outputStream", "upMachine", "aosSection", "outSection", "cosSection", "outStream", "cosChannel", "newchannel", " outCh", "outchannel", "outMachine", "inChan", "OutCh", "outRoom", "outputCh", "outputChan", "newConnection", " outchannel", "cosDisk", " outConnection", "outerRoom", "newChan", "aosChannel"], "maxCount": ["minFlag", "maxLength", "MAXLength", " maxSize", "MaxCount", " maxFlag", "minSize", "minCount", "minCast", "minLength", "maxFlag", "maxSize", "MAXCount", "MaxCast", "maxCast", "MaxLength", " maxLength", "MAXFlag", "MaxSize", " maxCast"], "size": ["send", "sample", "bytes", "height", "show", "any", "ose", "speed", "Size", "fee", "length", "is", "count", "start", "position", "resolution", "total", "export", "scale", "si", "len", "range", "ize", "south", "write", "scroll", "duration", "area", "m", "close", "ze", "notice", "small", "set", "sd", "message", "ms", "sent", "capacity", "read", "seek", "name", "score", "readable", "shift", "keys", "shape", "sum", "SIZE", "empty", "equal", "body", "space", "gets"], "pos": ["pose", "cos", "pt", "p", "Pos", "pro", "point", "part", "length", "po", "start", "position", "row", "slot", "no", "pg", "limit", "left", "len", "index", "to", "n", "i", "pl", "port", "pi", "o", "rel", "ps", "def", "seq", "loc", "Position", "sp", "coord", "page", "pass", "pid", "doc", "exp", "offset", "POS", "spec", "zero", "pr", "x", "pointer", "l", "it", "resp", "pc", "off", "os"]}}
{"id1": "13720140", "id2": "4852691", "code1": "    private void modifyProperty(String valueID, String value, Long userID) throws JspTagException {\n        Property property = new Property(new Long(valueID), userID);\n        String newValue = value;\n        System.out.println(property.getName());\n        if (property.getName().equals(\"Password\")) {\n            try {\n                MessageDigest crypt = MessageDigest.getInstance(\"MD5\");\n                crypt.update(value.getBytes());\n                byte digest[] = crypt.digest();\n                StringBuffer hexString = new StringBuffer();\n                for (int i = 0; i < digest.length; i++) {\n                    hexString.append(hexDigit(digest[i]));\n                }\n                newValue = hexString.toString();\n                crypt.reset();\n            } catch (NoSuchAlgorithmException e) {\n                System.err.println(\"jspShop: Could not get instance of MD5 algorithm. Please fix this!\" + e.getMessage());\n                e.printStackTrace();\n                throw new JspTagException(\"Error crypting password!: \" + e.getMessage());\n            }\n        }\n        property.setValue(newValue);\n    }\n", "code2": "    public static final synchronized String hash(String data) {\n        if (digest == null) {\n            try {\n                digest = MessageDigest.getInstance(\"MD5\");\n            } catch (NoSuchAlgorithmException nsae) {\n                System.err.println(\"Failed to load the MD5 MessageDigest. \" + \"Jive will be unable to function normally.\");\n                nsae.printStackTrace();\n            }\n        }\n        digest.update(data.getBytes());\n        return toHex(digest.digest());\n    }\n", "label": 1, "substitutes": {"modifyProperty": ["modifyValue", "modifiesProp", "modifiesValue", "modifiesAttribute", "ModifyValue", "modateProp", "ModifyProp", "ModifiesProperty", "modateProperty", "modateAttribute", "modifyAttribute", "modifiesProperty", "ModifiesValue", "ModifyProperty", "ModifiesProp", "modateValue", "ModifiesAttribute", "modifyProp", "modureAttribute", "modureProp", "ModifyAttribute", "modureValue", "modureProperty"], "valueID": ["VALUEID", " valueUID", "valueMD", " valueId", "versionId", "propertyId", " valueid", " valueMD", "valueId", " valueIDs", "VALUEId", "VALUEMD", "versionID", "valueUID", "propertyID", "valueIDs", "propertyIDs", "versionMD", "versionIDs", "versionid", "versionUID", "VALUEUID", "propertyid", "valueid"], "value": ["text", "val", "address", "v", "function", "description", "string", "field", "variable", "VALUE", "update", "current", "output", "attribute", "content", "Value", "instance", "label", "code", "expression", "padding", "buffer", "example", "message", "format", "vector", "get", "input", "name", "comment", "data", "application", "save", "key", "password", "memory", "hello", "version", "default", "state", "type", "entry", "values"], "userID": [" userName", "ownerName", " userURL", "usernameId", " userType", "UserType", "ownerID", "userId", "userURL", "usernameURL", "UserURL", "userName", "usernameID", " userId", "ownerId", "usernameName", "UserName", "UserId", "UserID", "userType", "ownerType"], "property": ["item", "address", "module", "function", "description", "field", "p", "term", "pair", "resource", "print", "properties", "position", "method", "style", "attribute", "Property", "section", "to", "relation", "alias", "label", "profile", "title", "language", "claim", "license", "config", "expression", "prefix", "table", "pe", "message", "feature", "project", "second", "setup", "associated", "name", "operator", "object", "media", "data", "key", "metadata", "prototype", "ty", "option", "type", "state", "prop", "this", "translation", "policy", "display", "command"], "newValue": ["newValues", "NEWResult", "oldVersion", "uniqueVersion", " newMessage", "newString", " newName", "uniqueName", "NEWValue", "newvalue", " newValues", " newvalue", "oldResult", "uniqueValue", "NewValue", " newResult", "oldvalue", "newName", " newString", "uniqueMessage", "newResult", "newVersion", "newMessage", "oldString", "NEWvalue", "oldName", "NewValues", "NewString", "Newvalue", "oldValues", "NEWString", "oldValue", " newVersion", "oldMessage"], "crypt": ["rypt", "mac", "cook", "dec", "cmp", "cos", "cur", "CR", "pt", "ctr", "magic", "prot", "hash", "sm", "nt", "conv", "auth", "go", "comm", "cp", "rem", "cy", "rh", "check", "trust", "mem", "cs", "cr", "code", "cc", "ssl", "gc", "rot", "col", "ct", "init", "ch", "core", "cert", "bec", "roy", "cm", "sync", "cry", "sys", "hex", "cont", "reset", "Crypt", "password", "enc", "cot", "coll", "ocr", "cmd", "coin", "dict", "arch"], "digest": [" Digester", "mdested", "hashge", "hashests", "digested", " digEST", "Diggest", "Digested", "mdest", "mdge", "digge", "DigEST", " DigEST", "dester", "dest", "mdEST", "Digest", "digert", "digests", "mdester", "Digestamp", "digestamp", " digested", " Digest", "digEST", "Digester", "mdgest", "mdestamp", "hexester", "diggest", "Digert", "hexert", "hexest", " Digert", "hexEST", "dested", "hashest", "mdests", "dEST", " digestamp", "Digests", "hashgest", "digester", "Digge"], "hexString": ["hexstring", "shortStr", "shortstring", " hexStr", "hexBuffer", " hexBytes", "exstring", " hexBuffer", "formString", "hashstring", "hashArray", "shortString", "exBytes", " hexstring", "hashStr", "formBytes", "exBuffer", " hexArray", "hexStr", "hexBytes", "exString", "shortBuffer", "exStr", "hashString", "exArray", "formBuffer", "hexArray", "formStr"], "i": ["ti", "v", "ji", "I", "number", "ic", "li", "id", "io", "gi", "point", "is", "di", "e", "ki", "ii", "\u0438", "j", "span", "phi", "mi", "si", "index", "ex", "ini", "a", "pi", "ci", "m", "cli", "uri", "o", "ms", "slice", "multi", "q", "init", "ie", "ind", "gu", "u", "ei", "major", "x", "qi", "im", "chain", "ai", "ix", "sim", "ip", "it", "bi", "us", "ui", "info", "hi", "y"]}}
{"id1": "1180878", "id2": "21488518", "code1": "    public static byte[] fetchURLData(String url, String proxyHost, int proxyPort) throws IOException {\n        HttpURLConnection con = null;\n        InputStream is = null;\n        try {\n            URL u = new URL(url);\n            if (url.startsWith(\"file://\")) {\n                is = new BufferedInputStream(u.openStream());\n            } else {\n                Proxy proxy;\n                if (proxyHost != null) {\n                    proxy = new Proxy(Type.HTTP, new InetSocketAddress(proxyHost, proxyPort));\n                } else {\n                    proxy = Proxy.NO_PROXY;\n                }\n                con = (HttpURLConnection) u.openConnection(proxy);\n                con.addRequestProperty(\"User-Agent\", \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.6 (KHTML, like Gecko) Chrome/20.0.1092.0 Safari/536.6\");\n                con.addRequestProperty(\"Accept-Charset\", \"UTF-8\");\n                con.addRequestProperty(\"Accept-Language\", \"en-US,en\");\n                con.addRequestProperty(\"Accept\", \"text/html,image/*\");\n                con.setDoInput(true);\n                con.setDoOutput(false);\n                con.connect();\n                is = new BufferedInputStream(con.getInputStream());\n            }\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n            IOUtils.copy(is, baos);\n            return baos.toByteArray();\n        } finally {\n            IOUtils.closeQuietly(is);\n            if (con != null) {\n                con.disconnect();\n            }\n        }\n    }\n", "code2": "    @Override\n    public Resource createNew(String name, InputStream in, Long length, String contentType) throws IOException {\n        File dest = new File(this.realFile, name);\n        if (allowedClient) {\n            if (\".request\".equals(name) || \".tokens\".equals(name)) {\n                FileOutputStream out = null;\n                try {\n                    out = new FileOutputStream(dest);\n                    IOUtils.copy(in, out);\n                } finally {\n                    IOUtils.closeQuietly(out);\n                }\n                if (\".request\".equals(name)) {\n                    File request = new File(realFile.getAbsolutePath() + \"/\" + name);\n                    RequestManager.manageRequest(request, null, true);\n                    return new OverEncryptedFriendsFile(factory, folderPath + \"/.response\", allowedClient);\n                }\n                return new OverEncryptedFriendsFile(factory, folderPath + \"/\" + name, allowedClient);\n            } else {\n                return null;\n            }\n        } else {\n            LOGGER.error(\"User isn't owner of this folder\");\n            return null;\n        }\n    }\n", "label": 1, "substitutes": {"fetchURLData": ["fetchStringStream", "fectUrlStream", "fetchURLStream", "fectUrlData", "fectURLdata", "fetchUrlData", "fetchGETdata", "fectURLFrame", "fetchUrlFrame", "fectUrlFrame", "fetchStringdata", "fetchUrldata", "fetchURLdata", "fectURLData", "fetchUrlStream", "fetchURLFrame", "fectUrldata", "fetchStringFrame", "fetchStringData", "fetchGETData", "fectURLStream", "fetchGETFrame", "fetchGETStream"], "url": ["sl", "path", "address", "gl", "string", "file", "Url", "log", "nl", "mail", "print", "resource", "b", "ls", "dl", "null", "ll", "pattern", "pl", "host", "https", "html", "ssl", "location", "link", "uri", "base", "rel", "URL", "cl", "web", "loc", "ur", "name", "lim", "http", "mount", "el", "l", "default", "xml", "domain", "ref", "full", "sql", "ul"], "proxyHost": ["proxyhost", "slaveAddress", "ProxyUrl", "ProxyHost", "ProxyPort", "slavehost", "ProxyLabel", "slaveHost", "roxyAddress", "roxyCheck", "proxyUrl", " proxyOver", "ProxyName", "proxyCheck", "roxyOver", "serverName", "slaveLabel", "slaveUrl", "serverPort", "roxyhost", "proxyAddress", "serverHost", "roxyLabel", " proxyName", "slaveOver", "serverhost", "proxyLabel", " proxyAddress", "slaveCheck", "proxyOver", " proxyCheck", " proxyhost", "proxyName", "Proxyhost", "roxyUrl", "roxyHost"], "proxyPort": ["serverAddress", "ProxyHost", "proxyPORT", "proxyport", "ProxyPort", "aliasHost", " proxyPORT", "serverPort", "proxyAddress", "aliasPort", "serverHost", " proxyport", "ProxyPORT", "aliasport", "Proxyport", " proxyAddress", "serverPORT", "aliasAddress", "serverport"], "con": ["ln", "Con", "mc", "cur", "CON", "cos", "cover", "trans", "canon", "fc", "dial", "en", "lock", "cat", "gate", "mo", "cone", "po", "conv", "Conn", "fac", "rec", "ocon", "ctrl", "open", "cons", "conf", "const", "go", "comm", "cp", "call", "c", "bo", "ex", "cgi", "proc", "act", "connection", "cs", "cc", "fin", "close", "col", "syn", "cf", "non", "com", "connect", "conn", "cn", "un", "client", "xc", "nc", "ain", "ran", "cont", "func", "pan", "don", "pen", "sub", "cmd", "cal", "cond", "can", "pc", "ver", "bc", "co"], "is": ["iss", "isl", "abs", "isa", "eps", "ists", "sis", "was", "in", "xs", "ist", "mis", "ais", "iris", "ri", "si", "bits", "rs", "ts", "i", "ios", "has", "are", "cs", "ims", "bis", "fs", "es", "dis", "ps", "iter", "as", "IS", "ms", "s", "bs", "lis", "ois", "init", "its", "oss", "isp", "isin", "ris", "ains", "sys", "im", "isf", "Is", "ins", "ip", "us", "isi", "isc", "gets", "os", "iso", "ys"], "u": ["ud", "hu", "U", "uni", "cu", "bu", "uid", "fu", "up", "yu", "c", "iu", "mu", "i", "uv", "uri", "o", "su", "ut", "ur", "lu", "user", "ue", "un", "eu", "uj", "uu", " nu", "ru", "us", "au", "uf", "tu", "ui", "g", "ou", "nu", "pu", "ul"], "proxy": ["pin", "Proxy", "ping", "address", "echo", "friend", " proxies", "py", "pro", "map", "timeout", "browser", "po", "cone", "shadow", "phone", "slave", "roxy", "pipe", "go", "cp", "bo", "null", "embed", "library", "host", "alias", "PRO", "profile", "pi", "zip", "gp", "port", "connection", "link", "https", "pre", "ssl", "aco", "base", "prime", "server", "web", "pe", "jp", "project", "xy", "via", "client", "http", "XY", "x", "pointer", "socket", "password", "version", " prox", "token", "cache", "ip", "pse", "domain", "pool", "translation", "policy", "cas"], "baos": [" baows", "BAOs", "vais", " bao", " baoss", "naoss", "BAos", "naows", "vaOS", " baose", "baose", " baOs", "BAo", "baoS", "BAoss", "aoos", "baOS", "nao", "aooS", "naos", "vaoS", "poOs", " baoS", "baows", "poose", "vaos", "BAows", "bao", "poos", "aois", " baOS", "aoOS", "baOs", " bais", "bais", "poo", "baoss", "BAose"]}}
{"id1": "62362", "id2": "3801655", "code1": "    public void convert(File src, File dest) throws IOException {\n        InputStream in = new BufferedInputStream(new FileInputStream(src));\n        DcmParser p = pfact.newDcmParser(in);\n        Dataset ds = fact.newDataset();\n        p.setDcmHandler(ds.getDcmHandler());\n        try {\n            FileFormat format = p.detectFileFormat();\n            if (format != FileFormat.ACRNEMA_STREAM) {\n                System.out.println(\"\\n\" + src + \": not an ACRNEMA stream!\");\n                return;\n            }\n            p.parseDcmFile(format, Tags.PixelData);\n            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n                System.out.println(\"\\n\" + src + \": contains UIDs!\" + \" => probable already DICOM - do not convert\");\n                return;\n            }\n            boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n            int pxlen = p.getReadLength();\n            if (hasPixelData) {\n                if (inflate) {\n                    ds.putUS(Tags.BitsAllocated, 16);\n                    pxlen = pxlen * 4 / 3;\n                }\n                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n                    System.out.println(\"\\n\" + src + \": mismatch pixel data length!\" + \" => do not convert\");\n                    return;\n                }\n            }\n            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n            ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n            ds.putUI(Tags.SOPClassUID, classUID);\n            if (!ds.contains(Tags.NumberOfSamples)) {\n                ds.putUS(Tags.NumberOfSamples, 1);\n            }\n            if (!ds.contains(Tags.PhotometricInterpretation)) {\n                ds.putCS(Tags.PhotometricInterpretation, \"MONOCHROME2\");\n            }\n            if (fmi) {\n                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n            }\n            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n            try {\n            } finally {\n                ds.writeFile(out, encodeParam());\n                if (hasPixelData) {\n                    if (!skipGroupLen) {\n                        out.write(PXDATA_GROUPLEN);\n                        int grlen = pxlen + 8;\n                        out.write((byte) grlen);\n                        out.write((byte) (grlen >> 8));\n                        out.write((byte) (grlen >> 16));\n                        out.write((byte) (grlen >> 24));\n                    }\n                    out.write(PXDATA_TAG);\n                    out.write((byte) pxlen);\n                    out.write((byte) (pxlen >> 8));\n                    out.write((byte) (pxlen >> 16));\n                    out.write((byte) (pxlen >> 24));\n                }\n                if (inflate) {\n                    int b2, b3;\n                    for (; pxlen > 0; pxlen -= 3) {\n                        out.write(in.read());\n                        b2 = in.read();\n                        b3 = in.read();\n                        out.write(b2 & 0x0f);\n                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n                        out.write(b3 >> 4);\n                    }\n                } else {\n                    for (; pxlen > 0; --pxlen) {\n                        out.write(in.read());\n                    }\n                }\n                out.close();\n            }\n            System.out.print('.');\n        } finally {\n            in.close();\n        }\n    }\n", "code2": "    @SuppressWarnings(\"unchecked\")\n    public static void main(String[] args) throws Exception {\n        if (args.length != 2) {\n            System.out.println(\"usage: \" + EvaluatorHelper.class.getName() + \" <output> <data set file>\");\n            System.exit(1);\n        }\n        Helper helper = Helper.getHelper(args[1]);\n        Dataset dataset = helper.read(args[1]);\n        ZipFile zip = new ZipFile(new File(args[0]), ZipFile.OPEN_READ);\n        Enumeration entries = zip.entries();\n        Unit<?>[] performance = new Unit<?>[LIMIT];\n        int index = 0;\n        while (entries.hasMoreElements()) {\n            ZipEntry entry = (ZipEntry) entries.nextElement();\n            if (entry.getName().endsWith(\".out\")) {\n                File temp = File.createTempFile(\"PARSER\", \".zip\");\n                temp.deleteOnExit();\n                PrintStream writer = new PrintStream(new FileOutputStream(temp));\n                BufferedInputStream reader = new BufferedInputStream(zip.getInputStream(entry));\n                byte[] buffer = new byte[4096];\n                int read = -1;\n                while ((read = reader.read(buffer)) != -1) {\n                    writer.write(buffer, 0, read);\n                }\n                writer.close();\n                reader.close();\n                BufferedReader outfile = new BufferedReader(new FileReader(temp));\n                String line = null;\n                RuleParser parser = new RuleParser();\n                ProbabilisticRuleList list = new ProbabilisticRuleList();\n                while ((line = outfile.readLine()) != null) {\n                    if (line.startsWith(\"IF\")) {\n                        ProbabilisticRule rule = new ProbabilisticRule(dataset.getMetadata());\n                        list.add(fill(dataset.getMetadata(), rule, parser.parse(line)));\n                    }\n                }\n                outfile.close();\n                PooledPRCurveMeasure measure = new PooledPRCurveMeasure();\n                performance[index] = measure.evaluate(dataset, list);\n                System.out.println(entry.getName() + \": \" + performance[index]);\n                index++;\n                if (index >= LIMIT) {\n                    break;\n                }\n            }\n        }\n        System.out.println(UnitAveragingMode.get(Double.class).average(performance));\n    }\n", "label": 1, "substitutes": {"convert": ["CONversion", "compvert", "CONverting", "consverting", "Converted", "Converts", "consversion", "confer", "unprocess", "conversion", "unvert", "consvert", "unverted", "compverts", "CONVERT", "unfer", "Conversion", "Convert", "unversion", "CONverted", "unverts", "Converting", "CONfer", "ConVERT", "conprocess", "converting", "converts", "CONvert", "Conprocess", "conVERT", "consVERT", "Confer", "compprocess", "compversion", "converted"], "src": ["sr", "path", "sq", "cur", "scan", "file", "txt", "str", "sin", "orig", "rx", "st", "start", "SOURCE", "from", "filename", "url", "rs", "href", "RC", "ource", "img", "host", "cc", "buster", "sit", "uri", "rel", "config", "sc", "Source", "s", "loc", "ipl", "attr", "ur", "its", "req", "usr", "input", "upload", "scene", "hl", "http", "sys", "dist", "source", "SourceFile", "cont", "addr", "rest", "func", "rc", "ser", "ins", "pkg", "inst", "ebin", "stream", "iv"], "dest": ["foreign", "dir", "dat", " Destination", "txt", " orig", "orig", "disk", "test", "Dest", "target", "tif", "write", " destinations", "port", "img", "table", "result", "est", " Dest", " dst", " destination", "gin", "dist", "rest", "source", "temp", "mat"], "in": ["d", "serv", "file", "en", "io", "b", "is", "inf", "st", "up", "cin", "from", "reader", "r", "IN", "i", "inner", "ad", "res", "m", "ar", "as", "din", "isin", "input", "ind", "source", "In", "el", "ins", "rin", "l", "bin", "sql", "stream", "inn"], "p": ["d", "ping", "op", "pb", "P", "pt", "tp", "lp", "pd", "py", "pro", "h", "post", "vp", "part", "b", "prot", "per", "t", "dp", "j", "pg", "at", "cp", "r", "c", "i", "pl", "pi", "wp", "ph", "m", "pre", "f", "ps", "pm", "pers", "pe", "sp", "er", "parse", "fp", "parser", "ap", "pa", "pp", "rep", "pkg", "l", "it", "g", "php", "pc", "jp"], "ds": ["tp", "des", "lists", "gs", "rs", "dates", "ns", "nas", "ps", "ports", "dd", "db", "yes", "amps", "sets", "ks", "mys", "vs", "ats", "obs", "ils", "s", "bs", "hd", " des", " DS", "Ds", "drivers", "iffs", "dos", "outs", "qs", "tests", "d", "js", "aws", "eds", "pd", "points", "dds", "terms", "eps", "ws", "xs", "tes", "dl", "workers", "sd", "dt", " d", "edes", "posts", "loads", "scripts", "ras", "df", "els", "ss", "gd", "di", "dp", "ls", "hs", "cks", "ts", "uds", "DS", "cs", " dd", "ads", "its", " ads", "tags", "ands", "ags", "sts", "dh", " os", "ods", "docs", "os", "ys"], "format": ["settings", "path", "module", "filter", "fc", "at", "file", "mt", "ats", "tag", "id", "lat", "mode", "t", "sche", "feat", "style", "output", "act", "pattern", "pi", " Format", "status", "title", "f", "cf", "Format", "form", "ct", "feature", "table", "set", "parse", "name", "template", "pretty", "spec", "MAT", "source", "top", "fm", "shape", "version", "l", "it", "layout", "unit", "type", "policy", "mat", "size"], "hasPixelData": ["haspixelDATA", " hasPixeldata", "haspixeldata", "haspixelData", "Haspixeldata", "hasFramedata", "hasFrameDATA", "hasixeldata", "HaspixelData", "hasPixeldata", "hasixelData", "HasPixelDATA", "hasixelDATA", " hasPixelDATA", "hasFrameData", "HasPixelData", "HaspixelDATA", "hasPixelDATA", "HasPixeldata"], "inflate": ["inflATE", " invalidATE", "inFLate", "infolat", "incelATE", "informate", "inflicate", "Informate", "inFlicate", " inflATE", "inFlATE", "inFLocate", "inFlocate", "Informated", "informocate", "incelicate", "invalidocate", "infolate", "inflat", "Inflate", "inFlate", "invalidate", " invalidicate", "Inflat", " invalidate", " inflocate", "incelate", "incelocate", " invalidocate", " inflicate", "infolocate", "inFLat", "Informat", "informated", "Inflated", "informat", "inFLated", "invalidicate", "infolated", "inflated", "invalidATE", "Inflocate", "Informocate", "inflocate"], "pxlen": ["xylin", "mmlength", "pxlength", "cpden", "xplength", "pixellen", "cplen", "pexls", "pexden", "tmplength", "packlength", "mmlen", "mxlen", "cplength", "mmln", "pixelfun", "tmplin", "pexlen", "phpdec", "tmplen", "pixellength", "tmpln", "mxdec", "mmlin", "cpln", "pxls", "xyln", "mxlength", "packlen", "xpln", "pxden", "pxdec", "phpln", "mxln", "pexlength", "pxlin", "xpden", "packls", "xplen", "xylen", "packln", "pixells", "pexfun", "pxln", "packdec", "phplen", "packfun", "xylength", "phplength", "pexln", "pxfun"], "out": ["ln", "err", "log", "dir", "io", "crit", "store", "print", "obj", "up", "aos", "msg", "output", "inv", "ex", "res", "inter", "outer", "prefix", "net", "screen", "conn", "init", "user", "cfg", "writer", "gr", "client", "pretty", "name", "sys", "OUT", "group", "list", "Out", "sum", "gov", "cmd", "ou", "outs", "temp"]}}
{"id1": "6403868", "id2": "8047989", "code1": "    private File extractUninstallFiles(File _destPath, boolean upgrade, String lastVer) {\n        File oldlog = null;\n        try {\n            boolean oldClassCopied = false;\n            File destPath = new File(_destPath, \"vai_\" + VAGlobals.APP_NAME + \"_\" + VAGlobals.APP_VERSION);\n            if (upgrade) {\n                File lastVerPath = new File(_destPath, \"vai_\" + VAGlobals.APP_NAME + \"_\" + lastVer);\n                if (destPath.equals(lastVerPath)) {\n                    File bkdir = new File(destPath.getAbsolutePath() + \".bak\");\n                    if (!destPath.renameTo(bkdir)) {\n                        throw new IOException(VAGlobals.i18n(\"Setup_NotCreateDirectory\") + \" \" + destPath);\n                    }\n                    oldlog = new File(bkdir.getAbsolutePath() + System.getProperty(\"file.separator\") + \"uninstall.vai\");\n                    lastVerPath = bkdir;\n                } else {\n                    oldlog = new File(lastVerPath.getAbsolutePath() + System.getProperty(\"file.separator\") + \"uninstall.vai\");\n                }\n                if ((!destPath.exists()) && (!destPath.mkdirs())) {\n                    throw new IOException(VAGlobals.i18n(\"Setup_NotCreateDirectory\") + \" \" + destPath);\n                }\n                if (uInfo_.module) oldClassCopied = copyOldSetupClass(lastVerPath, destPath);\n            } else {\n                if ((!destPath.exists()) && (!destPath.mkdirs())) {\n                    throw new IOException(VAGlobals.i18n(\"Setup_NotCreateDirectory\") + \" \" + destPath);\n                }\n            }\n            dirty_ = true;\n            File[] ls = destPath.listFiles();\n            for (int i = 0; i < ls.length; i++) {\n                if (!oldClassCopied) ls[i].delete(); else if (!ls[i].getPath().equals(destPath.getAbsolutePath() + File.separator + installClassName_ + \".class\")) ls[i].delete();\n            }\n            byte[] buf = new byte[0];\n            int read = 0;\n            if (!oldClassCopied && (installClassSize_ > 0 || jarOffset_ > 0)) {\n                final File outClassFile = new File(destPath.getAbsolutePath() + File.separator + installClassName_ + \".class\");\n                if (outClassFile.exists() && !outClassFile.delete()) {\n                    ui_.showError(new Exception(VAGlobals.i18n(\"Setup_FileNotCreated\") + \":\\n\" + outClassFile.getName()));\n                }\n                final FileOutputStream out = new FileOutputStream(outClassFile);\n                final FileInputStream in = new FileInputStream(fileWithArchive_);\n                if (installClassOffset_ > 0) {\n                    in.skip(installClassOffset_);\n                }\n                buf = new byte[0];\n                if (installClassSize_ < 0) buf = new byte[(int) jarOffset_]; else buf = new byte[(int) installClassSize_];\n                read = in.read(buf, 0, buf.length);\n                out.write(buf, 0, read);\n                out.close();\n                in.close();\n            }\n            final FileInputStream in = new FileInputStream(fileWithArchive_);\n            if (jarOffset_ > 0) {\n                in.skip(jarOffset_);\n            }\n            JarInputStream jar = new JarInputStream(in);\n            final File outJarFile = new File(destPath.getAbsolutePath() + File.separator + \"install.jar\");\n            if (outJarFile.exists() && !outJarFile.delete()) {\n                ui_.showError(new Exception(VAGlobals.i18n(\"Setup_FileNotCreated\") + \":\\n\" + outJarFile.getName()));\n            }\n            JarOutputStream outJar = new JarOutputStream(new FileOutputStream(outJarFile));\n            ZipEntry entry = jar.getNextEntry();\n            final int bufSize = 32768;\n            buf = new byte[bufSize];\n            while (entry != null) {\n                String entryName = entry.getName();\n                if (entryName.equals(\"com/memoire/vainstall/resources/vainstall.properties\")) {\n                } else if (entryName.equals(installClassName_ + \".class\") && !oldClassCopied) {\n                    FileOutputStream out = null;\n                    try {\n                        out = new FileOutputStream(destPath.getAbsolutePath() + File.separator + installClassName_ + \".class\");\n                        VAGlobals.copyStream(jar, out, buf);\n                    } catch (IOException e) {\n                        throw e;\n                    } finally {\n                        if (out != null) out.close();\n                    }\n                } else if (!entryName.endsWith(\".zip\")) {\n                    if (VAGlobals.DEBUG) VAGlobals.printDebug(\"jar entry name \" + entryName);\n                    ZipEntry outEntry = new ZipEntry(entryName);\n                    CRC32 crc = new CRC32();\n                    outJar.putNextEntry(outEntry);\n                    int size = 0;\n                    while ((read = jar.read(buf, 0, bufSize)) >= 0) {\n                        size += read;\n                        if (read == 0) {\n                            Thread.yield();\n                        } else {\n                            outJar.write(buf, 0, read);\n                            crc.update(buf, 0, read);\n                        }\n                    }\n                    outEntry.setSize(size);\n                    outEntry.setCrc(crc.getValue());\n                    outJar.flush();\n                    outJar.closeEntry();\n                }\n                jar.closeEntry();\n                entry = jar.getNextEntry();\n            }\n            InputStream pin = getClass().getResourceAsStream(\"resources/vainstall.properties\");\n            Properties prop = new Properties();\n            try {\n                prop.load(pin);\n            } catch (IOException exc) {\n            }\n            if (language == null) language = \"default\";\n            prop.setProperty(\"vainstall.destination.language\", language);\n            ZipEntry outEntry = new ZipEntry(\"com/memoire/vainstall/resources/vainstall.properties\");\n            CRC32 crc = new CRC32();\n            outEntry.setCrc(crc.getValue());\n            outEntry.setSize(prop.size());\n            outJar.putNextEntry(outEntry);\n            prop.store(outJar, VAGlobals.NAME + \" \" + VAGlobals.VERSION);\n            outEntry.setCrc(crc.getValue());\n            outJar.closeEntry();\n            jar.close();\n            outJar.close();\n            in.close();\n        } catch (IOException e) {\n            String message = e.getLocalizedMessage();\n            message += \"\\n\" + VAGlobals.i18n(\"Setup_ErrorUninstallScripts\");\n            e.printStackTrace();\n            exitOnError(new IOException(message));\n        }\n        return oldlog;\n    }\n", "code2": "    protected byte[] getHashedID(String ID) {\n        try {\n            MessageDigest md5 = MessageDigest.getInstance(\"MD5\");\n            md5.reset();\n            md5.update(ID.getBytes());\n            byte[] digest = md5.digest();\n            byte[] bytes = new byte[WLDB_ID_SIZE];\n            for (int i = 0; i < bytes.length; i++) {\n                bytes[i] = digest[i];\n            }\n            return bytes;\n        } catch (NoSuchAlgorithmException exception) {\n            System.err.println(\"Java VM is not compatible\");\n            exit();\n            return null;\n        }\n    }\n", "label": 0, "substitutes": {"extractUninstallFiles": ["extractunInstallFiles", "extractUnpackFile", "extractuninstallFiles", "extractUnInstallFile", "extractUnInstallFiles", "extractuninstallItems", "extractunInstallFile", "extractUnInstallItems", "extractUninstallFile", "extractuninstallFile", "extractUnpackFiles", "extractUninstallItems", "extractUnpackItems", "extractunInstallItems"], "_destPath": ["_combFormat", "_restPath", "_DestKey", "_DestDir", "_destPoint", "_destKey", "_destFormat", "_DestTh", "_destDir", "_DestPath", "_srcDir", "_privPath", "_tempTh", "_combDir", "_restKey", "_tempFormat", "_srcPoint", "_tempPoint", "_sourcePath", "_restDir", "_privPoint", "_srcPath", "_destTh", "_tempDir", "_sourceFormat", "_DestPoint", "_srcKey", "_privDir", "_tempPath", "_combPath", "_restPoint", "_sourceDir", "_privTh"], "upgrade": ["upate", "equgrade", " upate", "exchange", "uncp", "upgrad", "upcheck", "ungrad", "downgrade", "downgrades", "upcp", "upchange", "downchange", "ungrade", " upcp", "exgrades", "equate", "unate", " upcheck", " upgrades", "equcp", " upgrad", " upchange", "exgrade", "excheck", "downcheck", "equgrad", "upgrades"], "lastVer": ["oldVers", "oldVersion", "latestRes", "lastServ", "nextVers", "lastRes", "LastVers", "LastVer", "nextVer", "Lastver", " lastServ", "latestVers", "LastVersion", "latestServ", " lastVersion", "lastver", "oldver", "lastVersion", "latestVer", " lastVers", " lastver", " lastRes", "oldVer", "lastVers", "nextServ", "nextRes"], "oldlog": ["olderog", "oldpath", "OLDlog", "OldLog", "OLDog", "OLDerr", "oldLog", "Oldog", "olderr", " oldog", " oldLog", "oldererr", "OLDLog", "Oldlog", " olderr", "olderLog", " oldpath", "OLDpath", "oldog", "olderlog", "olderpath", "Oldpath"], "destPath": ["destStream", "sortFont", "destPos", " destLog", " destKey", "privRoot", "descNet", "descPath", "DestName", "sortDir", " destDir", " destPort", "DestPod", " destFile", "gestDisk", "altPoint", "gestPath", "srcPort", "altPath", "restFile", "identPoint", "destDir", "destRef", "declFull", "DestRoot", "destFont", "descPos", "sortFull", "destPod", "DestPath", "DestPoint", " destPos", " destHost", "DestFont", "destFile", "locDisk", "potPath", "destParent", "locPath", "DestStream", "declPath", "originPort", "estRef", "gestNode", "DestPos", "locTime", "destDirectory", "destName", "altNode", "restPath", " destName", "originTh", "locNet", "estPath", "destNode", " destRef", "destLog", "restDir", "destTime", "descName", "restPoint", "altHost", "altParent", "originPoint", "altDir", "identPath", "sortPath", "DestRef", "originPath", "privPath", "srcFile", "foreignPath", "destPoint", "estName", "privDir", "descDisk", "DestParent", "srcDirectory", "gestName", "declDir", "DestPort", "gestHost", "srcDir", "potStream", "destKey", "destHost", "altName", "DestFull", " destParent", "estDir", "foreignStream", "privPos", " destPoint", "estKey", "DestDirectory", "destFull", "foreignPod", "foreignDir", "destTh", " destDirectory", "potPod", "gestTime", "srcPath", "estPos", "destDisk", "identTh", " destRoot", "destPort", "destNet", "potDir", "DestFile", "declFont", " destNode", "destRoot", "descKey", "srcLog", " destTh", "identPort", "DestLog", "descTime", "DestDir", "gestNet"], "lastVerPath": ["highestVerPath", " lastVersPath", "lastRespath", "lastVersionpath", "lastVERVal", " lastVerName", "lastverFile", "lastVerForm", "lastVerCh", "lastVERDir", "lastVersionFile", " lastverpath", "highestVERVal", " lastVersCh", "lastverLog", "lastVersLog", "lastVersionCh", " lastverPath", "lastVerFile", " lastVerForm", "lastverName", "highestVerVal", "lastverPath", " lastVerFile", "lastResPath", "lastResForm", "lastVerpath", "lastverpath", " lastverForm", " lastVersLog", "lastVersionPath", "lastVerLog", "lastVersCh", "lastVerVal", "lastVerName", "lastVERpath", "highestVerFile", "highestVerpath", "lastVersFile", " lastVersFile", "lastverForm", "lastVersName", "lastVersVal", "lastVERForm", "lastVerDir", "lastVerspath", "lastverCh", "lastVERFile", " lastVerCh", "highestVERPath", " lastVerDir", " lastVerLog", "highestVERpath", " lastverDir", "lastverVal", "lastVERPath", "highestVERFile", "lastResDir", " lastVerpath", "lastVersPath", "lastverDir"], "bkdir": ["bukpath", "bkgrel", "bkkdi", " bkdi", "bkfd", "blkjdir", "bckpath", " bakdi", "bkkDIR", "bqfd", "blkfd", "bckfolder", "Bkpath", "Bckdir", "bakdir", "bukDIR", "bkkDir", "bckDIR", "bckdi", " bkkfolder", "bkkrel", " bkrel", "bukdi", "bqdi", "BckDIR", "bakdi", " bakDir", "bkrel", "bckdir", "blkjfd", "BkDir", "bakfolder", "Bkdir", " bkkrel", "bqgroup", "bkgDir", "bkgroup", "BkDIR", "bakrel", " bkkDir", "blkjgroup", "bkdi", "bkpath", "blkjdi", " bakdir", "bkjfd", "bkgfolder", " bkkdir", "bkkdir", "Bckpath", "bkkfolder", "bckDir", "bukDir", "bukgroup", " bkDir", "bqdir", "bkfolder", "bkDir", "bkDIR", "blkgroup", "bakDir", "bkkpath", "bkjdi", "bkjgroup", " bkfolder", "bukfd", "bkjdir", "blkdir", "bkgdir", " bakfolder", "BckDir", "blkdi", "bukdir"], "oldClassCopied": ["oldClasscopies", "oldClassCopies", "oldClasscopiated", "oldDirCopies", "oldclasscopied", "oldclassCopied", "oldClassColied", "oldClassReplaced", "oldDirReplied", "oldClassReplried", "oldClassChried", "oldClassCopiated", "oldDirReplies", "oldClassChied", "oldClasscopified", "oldclasscopified", "oldClassColified", "oldClassChies", "oldClassCopyies", "oldclassCopaced", "oldClassReplied", "oldClassCopried", "oldClassReplies", "oldDirCopiated", "oldClassCopyie", "oldClassColaced", "oldclassCopified", "oldClassCopyied", "oldDirCopried", "oldDirCopied", "oldClassChiated", "oldClassCopaced", "oldDirReplried", "oldClassColies", "oldclassCopie", "oldClasscopried", "oldclasscopie", "oldclasscopies", "oldClasscopied", "oldClasscopie", "oldClassReplified", "oldDirRepliated", "oldClassRepliated", "oldClassCopie", "oldClassCopified", "oldclassCopies", "oldClassCopyified"], "ls": ["ln", "ks", "vs", "lists", "ars", "abs", "ics", "ats", "lf", "ws", "ists", "lv", "acts", "xs", "tl", "gs", "lc", "irs", "rs", "dl", "ts", "ols", "cs", "lt", "fs", "ns", "ils", "ps", "es", "ms", "bs", "los", "lis", "its", "lbs", "LS", "la", "ds", "lines", "les", "rl", "l", "las", "sels", "els", "less", "qs"], "i": ["ti", "ji", "I", "batch", "ic", "zi", "iq", "li", "id", "io", "gi", "b", "is", "di", "ki", "ii", "j", "phi", "oi", "ri", "mi", "si", "fire", "index", "ini", "a", "pi", "ci", "m", "ims", "cli", "ski", "multi", "init", "xi", "gu", "ei", "u", "ij", "x", "qi", "im", "me", "eu", "key", "chain", "ix", "sim", "l", "ip", "us", "bi", "hi", "ui", "it", "ami", "y"]}}
{"id1": "771802", "id2": "3801655", "code1": "    public BufferedWriter createOutputStream(String inFile, String outFile) throws IOException {\n        int k_blockSize = 1024;\n        int byteCount;\n        char[] buf = new char[k_blockSize];\n        File ofp = new File(outFile);\n        ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(ofp));\n        zos.setMethod(ZipOutputStream.DEFLATED);\n        OutputStreamWriter osw = new OutputStreamWriter(zos, \"ISO-8859-1\");\n        BufferedWriter bw = new BufferedWriter(osw);\n        ZipEntry zot = null;\n        File ifp = new File(inFile);\n        ZipInputStream zis = new ZipInputStream(new FileInputStream(ifp));\n        InputStreamReader isr = new InputStreamReader(zis, \"ISO-8859-1\");\n        BufferedReader br = new BufferedReader(isr);\n        ZipEntry zit = null;\n        while ((zit = zis.getNextEntry()) != null) {\n            if (zit.getName().equals(\"content.xml\")) {\n                continue;\n            }\n            zot = new ZipEntry(zit.getName());\n            zos.putNextEntry(zot);\n            while ((byteCount = br.read(buf, 0, k_blockSize)) >= 0) bw.write(buf, 0, byteCount);\n            bw.flush();\n            zos.closeEntry();\n        }\n        zos.putNextEntry(new ZipEntry(\"content.xml\"));\n        bw.flush();\n        osw = new OutputStreamWriter(zos, \"UTF8\");\n        bw = new BufferedWriter(osw);\n        return bw;\n    }\n", "code2": "    @SuppressWarnings(\"unchecked\")\n    public static void main(String[] args) throws Exception {\n        if (args.length != 2) {\n            System.out.println(\"usage: \" + EvaluatorHelper.class.getName() + \" <output> <data set file>\");\n            System.exit(1);\n        }\n        Helper helper = Helper.getHelper(args[1]);\n        Dataset dataset = helper.read(args[1]);\n        ZipFile zip = new ZipFile(new File(args[0]), ZipFile.OPEN_READ);\n        Enumeration entries = zip.entries();\n        Unit<?>[] performance = new Unit<?>[LIMIT];\n        int index = 0;\n        while (entries.hasMoreElements()) {\n            ZipEntry entry = (ZipEntry) entries.nextElement();\n            if (entry.getName().endsWith(\".out\")) {\n                File temp = File.createTempFile(\"PARSER\", \".zip\");\n                temp.deleteOnExit();\n                PrintStream writer = new PrintStream(new FileOutputStream(temp));\n                BufferedInputStream reader = new BufferedInputStream(zip.getInputStream(entry));\n                byte[] buffer = new byte[4096];\n                int read = -1;\n                while ((read = reader.read(buffer)) != -1) {\n                    writer.write(buffer, 0, read);\n                }\n                writer.close();\n                reader.close();\n                BufferedReader outfile = new BufferedReader(new FileReader(temp));\n                String line = null;\n                RuleParser parser = new RuleParser();\n                ProbabilisticRuleList list = new ProbabilisticRuleList();\n                while ((line = outfile.readLine()) != null) {\n                    if (line.startsWith(\"IF\")) {\n                        ProbabilisticRule rule = new ProbabilisticRule(dataset.getMetadata());\n                        list.add(fill(dataset.getMetadata(), rule, parser.parse(line)));\n                    }\n                }\n                outfile.close();\n                PooledPRCurveMeasure measure = new PooledPRCurveMeasure();\n                performance[index] = measure.evaluate(dataset, list);\n                System.out.println(entry.getName() + \": \" + performance[index]);\n                index++;\n                if (index >= LIMIT) {\n                    break;\n                }\n            }\n        }\n        System.out.println(UnitAveragingMode.get(Double.class).average(performance));\n    }\n", "label": 1, "substitutes": {"createOutputStream": ["createInputSteam", "createOutputFile", "createOutputstream", " createInputstream", " createInputStream", " createOutputFile", " createOutSteam", " createOutputSteam", " createOutFile", " createFileFile", "createInputstream", "createOutputSteam", " createInputFile", " createOutStream", " createOutputstream", " createFilestream", " createFileStream", " createInputSteam", "createInputFile", " createOutstream", "createInputStream", " createFileSteam"], "inFile": ["ninPath", " inPort", "dinPath", "dinFile", "inputPort", "ninFilename", "inputFile", "inPort", "outPath", " inFilename", "outfile", " infile", "infile", "inputDir", "ninfile", "inPath", "dinDir", "inputPath", "ninFile", " inDir", "outFilename", " inPath", "inDir", "inFilename", "dinPort"], "outFile": ["outputfile", "outPlace", "OutFilename", "outputFile", "inPort", "OutPort", "outfile", "exFilename", "toFilename", "toPort", "outputFilename", "infile", "exFile", "newfile", "newFilename", "outputPlace", "exPlace", "exfile", "outPort", "tofile", "newPlace", "newFile", "outFilename", "Outfile", "inFilename", "OutFile", "toFile"], "k_blockSize": ["k_byteTime", "k2blockCount", "k_BlockLength", "k_byteSize", "k4BlockSize", "k_BlockStyle", "k4blockCount", "k_BlockCount", "k2blockLength", "k_blockName", "k_byteCount", "k4BlockStyle", "k_BlockTime", "k2byteSize", "k2blockSize", "k_batchSize", "k_byteName", "k4blockSize", "k4BlockName", "k2byteCount", "k_batchLength", "k_byteLength", "k2byteTime", "k_blockCount", "k_byteStyle", "k2blockTime", "k_BlockName", "k_blockLength", "k_blockStyle", "k4blockName", "k_batchCount", "k2byteLength", "k4blockStyle", "k4BlockCount", "k_BlockSize", "k_batchTime", "k_blockTime"], "byteCount": ["bbSize", "byteLength", "bytePtr", "bytecount", "byteCheck", "wordSize", "byteCode", "byteSize", "blockLength", "bitN", "bitCode", "bbN", "linecount", "byteCounter", " byteLength", "byteN", " byteCounter", "bitCounter", "wordN", "charPtr", "lineCount", " bytecount", "blockCounter", "wordCode", "bbCount", "bitLength", "charLength", "blockCount", "linePtr", "charCount", " byteCheck", "bitCheck", "lineLength", "bitCount", "charcount", " bytePtr", "bitSize", "blockCheck", "wordCount", "bbCode"], "buf": ["cv", "cur", "fg", "bytes", "batch", "pb", "alph", "bag", "ctr", "txt", "str", "queue", "cat", "b", "bg", "conv", "arr", "rb", "msg", "cast", "ctx", "bl", "proc", "block", "mem", "vec", "img", "seq", "buffer", "buff", "raw", "cap", "doc", "db", "exp", "Buff", "bn", "cb", "pkg", "uf", "cmd", "tx", "Buffer", "bc"], "ofp": [" ofl", "ofd", "ofl", "OFP", "owlp", "owlP", " ofpa", "OFd", "Ofl", "OFp", " ofd", "Ofd", "owlpa", "ofpa", "Ofpa", " ofP", "owld", "Ofp", "OfP", "OFl", "ofP"], "zos": ["psy", "settings", "zu", "js", "cos", "zy", "zi", "ez", "rose", "zh", "sbm", "zers", "ws", "std", "sis", "z", "zon", "zzle", "zag", "zona", "hz", "gs", "ossus", "south", "esa", "rss", "za", "zip", "jas", "cz", "ze", "zik", "nz", "ps", "zen", "osi", "zo", "zl", "oss", "los", "bs", "init", "zer", "zin", "eros", "hess", "bes", "python", "rez", "socket", "zb", "tis", "amia", "enos", "css", "LOS", "es", "zes", "sch", "jp", "os", "webkit"], "osw": ["osiw", "oW", "oswd", "aosW", "aospace", "sysw", "ossW", "sysrw", "iswx", "syswd", " osd", " osew", "osssw", "osswx", "aoswd", "oswa", "cosd", "osipace", "issw", "aosw", "osws", "ospace", "oswx", "osd", "isW", " ossw", "osew", "ossw", "osswd", "osiW", "sysW", "aosws", " osws", "ow", "cosw", "cosew", "osW", "opace", "cosws", "aosew", " oswx", "osiwa", "aosd", " osW", "isw", "owa", "aoswa", "osrw", "ossrw", "aosrw"], "bw": ["rbw", "obz", "pbwt", "bwl", "besw", "sbwt", "wbw", "pbwe", "bwk", " bex", "wbwt", "bwy", "bbwt", "pbwy", "obwt", "bz", "bwt", "wbz", " bws", "obw", " bwk", "pbew", "sbz", "obsw", "bbw", "nbwe", "rbz", "bwp", "bbex", "obwb", " bend", "bx", " bwt", " bx", "abw", " bz", "bbem", "rbex", "pbwb", "bem", "bbwp", "bwb", "bsw", "abwy", "obwk", " bsw", "bws", "bewl", "abwe", "pbw", "wbx", "pbz", "sbw", "bbws", "obwl", "nbw", "wbend", " bem", " bwp", "rbws", "bex", "nbew", "bwe", "bbz", "sbwb", "bbend", "bend", "wbwp", "abew", "bew", " bwl", "bbx", "wbem", "nbwy", "bewk"], "zot": ["zipot", " zonet", "zipiat", " zote", "zipiot", " zhot", "zoor", "zoo", "zonet", "zerit", "zerot", "zote", "zoonet", "Zote", "ziphot", "zerott", " zo", "Zott", "zhot", "zor", "zoot", " zott", " zor", "Zit", "zerhot", " ziot", "zeriot", "ziat", "zo", " ziat", "zeror", "zeriat", "zero", "zeronet", "zerote", "Zot", "ziot", "zott"], "ifp": [" iftp", "isjp", " ifr", "iwd", "Ifth", "iwp", "iftp", "ifP", "isP", "ifth", "ihp", "iwtp", "isth", "Ifp", "ihd", " ifjp", "ifr", "ifjp", "Ifjp", "iwr", "ifd", "ihtp", "isp", " ifth", " ifd", "IfP", "ihr", " ifP"], "zis": ["ezi", "zisa", "zi", "zisc", "zoinit", "zinit", "izis", "ziinit", "zeris", "izisc", "zeric", "zic", "ezis", "ziss", "izi", " zi", "ziiss", "eziss", " zic", " zIS", "iziss", " ziss", "zerIS", "zipIS", "zoisa", "zipis", "ezisc", " zisc", "izisa", "izinit", "ziis", "zIS", "zipic", "ziisa", "zois", "zoiss"], "isr": ["itsstr", "isrc", "iospr", "iosstr", "isalr", "issr", "iscr", "issrs", "isscr", " isrs", "isalsr", "iossr", "issrc", "itsr", "sisrs", " isrc", "sisrc", " iscr", "itspr", "itssr", "siscr", "isalstr", "isrs", "ispr", "isstr", "isalpr", "sisr", "iosr"], "br": ["sr", "js", "dr", "ba", "BR", "lr", "ctr", "str", "yr", "bt", "b", "rb", "vr", "Fr", "ptr", "mr", "r", "bl", "bro", "obl", "cr", "bh", "rel", "ber", "hr", "wr", "bm", "gr", " Br", "pr", "bd", "bn", "bf", "bp", "tr", "shr", "fr", "kr", "bi", "bj", "Br"], "zit": ["zeip", "zite", "ziplit", "lexIT", "ezit", "ezIT", "zipist", "izunit", "zeit", "zist", "zIT", "izit", "czot", " zite", "zipIT", "zipite", "zipit", "izip", "ziti", " zIT", "lexIt", "zipIt", "ziit", "zip", "zop", "zunit", "czop", " zlit", "ziIt", "lexit", "ozit", "czunit", "iziti", "ezite", "lexist", "czit", " zop", "ziIT", " zip", "zeop", "ezlit", "zlit", "cziti", "ziist", "zIt", "ozip", "ozunit", "oziti", "zeot", "czip"]}}
{"id1": "17475530", "id2": "5061606", "code1": "    @TestProperties(name = \"Simple test for adding different image files to report as link\")\n    public void testAddLinkToImage() throws Exception {\n        InputStream in = this.getClass().getClassLoader().getResourceAsStream(\"regression/generic/images/splash.jpg\");\n        report.report(report.getCurrentTestFolder() + System.getProperty(\"file.separator\") + \"splash.jpg\");\n        IOUtils.copy(in, new FileOutputStream(new File(report.getCurrentTestFolder() + System.getProperty(\"file.separator\") + \"splash.jpg\")));\n        in = this.getClass().getClassLoader().getResourceAsStream(\"regression/generic/images/blue.png\");\n        IOUtils.copy(in, new FileOutputStream(new File(report.getCurrentTestFolder() + System.getProperty(\"file.separator\") + \"blue.png\")));\n        in = this.getClass().getClassLoader().getResourceAsStream(\"regression/generic/images/classDir.gif\");\n        IOUtils.copy(in, new FileOutputStream(new File(report.getCurrentTestFolder() + System.getProperty(\"file.separator\") + \"classDir.gif\")));\n        report.addLink(\"Link to JPG\", \"splash.jpg\");\n        report.addLink(\"Link to PNG\", \"blue.png\");\n        report.addLink(\"Link to GIF\", \"classDir.gif\");\n    }\n", "code2": "    protected void createSettingsIfNecessary() throws IOException {\n        OutputStream out = null;\n        try {\n            final File fSettings = SettingsUtils.getSettingsFile();\n            if (!fSettings.exists()) {\n                fSettings.createNewFile();\n                final Path src = new Path(\"mvn/settings.xml\");\n                final InputStream in = FileLocator.openStream(getBundle(), src, false);\n                out = new FileOutputStream(SettingsUtils.getSettings(), true);\n                IOUtils.copy(in, out);\n            } else {\n                Logger.getLog().info(\"File settings.xml already exists at \" + fSettings);\n            }\n        } finally {\n            if (out != null) {\n                out.flush();\n                out.close();\n            }\n        }\n    }\n", "label": 1, "substitutes": {"testAddLinkToImage": ["testAddLinktoImage", "testAddLinkForImage", "testAddLinkFromImages", "testAddLinksToImage", "testAddLinkstoImage", "testAddLinkstoImages", "testAddLinktoPicture", "testAddLinktoimage", "testAddLinkForPicture", "testAddLinkFromimage", "testAddLinkstoimage", "testAddLinkToimage", "testAddLinktoImages", "testAddLinkstoPicture", "testAddLinkFromImage", "testAddLinksToImages", "testAddLinkToPicture", "testAddLinkToImages", "testAddLinkFromPicture", "testAddLinksToPicture", "testAddLinkForimage", "testAddLinksToimage", "testAddLinkForImages"], "in": ["mc", "v", "at", "file", "en", "show", "by", "is", "k", "up", "al", "ed", "cin", "from", "re", "r", "ini", "IN", "inc", "i", "check", "inner", "ex", "pi", "inside", "sein", "m", " din", "on", "o", "set", "ma", "out", "din", "get", "init", "doc", "all", "vin", "isin", "input", "ind", "gin", "include", "source", "In", "add", "and", "password", "one", "or", "ins", "rin", "sum", "it", "info", "bin", "nin", "er", "inn"]}}
{"id1": "11477906", "id2": "20267500", "code1": "    private static void loadDefaultSettings(final String configFileName) {\n        InputStream in = null;\n        OutputStream out = null;\n        try {\n            in = Thread.currentThread().getContextClassLoader().getResourceAsStream(META_INF_DEFAULT_CONFIG_PROPERTIES);\n            out = new FileOutputStream(configFileName);\n            IOUtils.copy(in, out);\n        } catch (final Exception e) {\n            log.warn(\"Unable to pull out the default.\", e);\n            throw new RuntimeException(e);\n        } finally {\n            IOUtils.closeQuietly(in);\n            IOUtils.closeQuietly(out);\n        }\n    }\n", "code2": "    public static AudioInputStream getWavFromURL(String urlstr) {\n        URL url;\n        AudioInputStream ais = null;\n        try {\n            url = new URL(urlstr);\n            URLConnection c = url.openConnection();\n            c.connect();\n            InputStream stream = c.getInputStream();\n            ais = new AudioInputStream(stream, playFormat, AudioSystem.NOT_SPECIFIED);\n            LOG.debug(\"[getWavFromURL]Getting audio from URL: {0}\");\n        } catch (MalformedURLException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return ais;\n    }\n", "label": 0, "substitutes": {"loadDefaultSettings": ["readDefaultSettings", "loadFAULTSettings", "loadDefaultSetting", "loaddefaultSettings", "loadFAULTValues", "readDefaultsettings", "loadFAULTSetting", "loaddefaultSetting", "readdefaultsettings", "loadDefaultsettings", "readdefaultSetting", "loaddefaultValues", "loaddefaultsettings", "readDefaultSetting", "readdefaultSettings", "readDefaultValues", "loadDefaultValues", "loadFAULTsettings", "readdefaultValues"], "configFileName": ["configFileLocation", "confFilenamePath", "configFilenameName", "configfileNames", "confFilePath", "configFILEname", "confFilename", "configFILEPath", "confFileNames", "configFilename", "configFilenamePath", "conffilename", "configPageNames", "confFileName", "configStreamLocation", "conffileName", "conffilePath", "configPagename", "confFileLocation", "configfilePath", "configfilename", "configFilenameNames", "configStreamName", "confFilenameLocation", "configFilePath", "configFILELocation", "configFILEName", "configStreamname", "confFilenamename", "configStreamPath", "configPageName", "conffileNames", "configfileName", "configPagePath", "configFileNames", "configFilenamename", "configFilenameLocation", "confFilenameName"], "in": ["mc", "en", "id", "is", "inf", "t", "e", "up", "ls", "al", "cin", "run", "from", "mi", "re", "ini", "IN", "n", "i", "ro", "inner", "ad", "check", "m", "ze", "on", " din", "ar", "o", "ma", "din", "init", "doc", "user", "input", "isin", "ind", "gin", "In", "source", "or", "im", "ai", "ins", "rin", "l", "it", "info", "bin", "ain", "con", "inn"], "out": ["not", "des", "t", "conv", "update", "ot", "po", "aos", "output", "copy", "m", "auto", "all", "ins", "ent", "de", "off", "w", "v", "at", "OU", "io", "ion", "up", "ex", "check", "are", "o", "server", "net", "raw", "cn", "read", "client", "sys", "or", "handle", "ne", "outs", "can", "log", "obj", "null", "n", "to", "port", "res", "ge", "init", "user", "une", "writer", "ind", "over", "OUT", "Out", "cache", "it", "ou", "gc", "os", "file", "en", "store", "nt", "ing", "gt", "oss", "co", "con"]}}
{"id1": "4593011", "id2": "4168534", "code1": "    private void loadDDL() throws IOException {\n        try {\n            conn.createStatement().executeQuery(\"SELECT * FROM overrides\").close();\n        } catch (SQLException e) {\n            Statement stmt = null;\n            if (!e.getMessage().startsWith(ERR_MISSING_TABLE)) {\n                LOG.fatal(SQL_ERROR, e);\n                throw new IOException(\"Error on initial data store read\", e);\n            }\n            String[] qry = { \"CREATE TABLE monitor (id INTEGER PRIMARY KEY NOT NULL, status VARCHAR(32) NOT NULL, next_update TIMESTAMP NOT NULL)\", \"CREATE TABLE overrides (id INT NOT NULL, title VARCHAR(255) NOT NULL, subtitle VARCHAR(255) NOT NULL, enable BOOLEAN NOT NULL DEFAULT TRUE, PRIMARY KEY(id))\", \"CREATE TABLE settings (var VARCHAR(32) NOT NULL, val VARCHAR(255) NOT NULL, PRIMARY KEY(var))\", \"INSERT INTO settings (var, val) VALUES ('schema', '1')\" };\n            try {\n                conn.setAutoCommit(false);\n                stmt = conn.createStatement();\n                for (String q : qry) stmt.executeUpdate(q);\n                conn.commit();\n            } catch (SQLException e2) {\n                try {\n                    conn.rollback();\n                } catch (SQLException e3) {\n                    LOG.fatal(SQL_ERROR, e3);\n                }\n                LOG.fatal(SQL_ERROR, e2);\n                throw new IOException(\"Error initializing data store\", e2);\n            } finally {\n                if (stmt != null) {\n                    try {\n                        stmt.close();\n                    } catch (SQLException e4) {\n                        LOG.fatal(SQL_ERROR, e4);\n                        throw new IOException(\"Unable to cleanup data store resources\", e4);\n                    }\n                }\n                try {\n                    conn.setAutoCommit(true);\n                } catch (SQLException e3) {\n                    LOG.fatal(SQL_ERROR, e3);\n                    throw new IOException(\"Unable to reset data store auto commit\", e3);\n                }\n            }\n        }\n        return;\n    }\n", "code2": "    public String insertSmsInf(Sms sms) throws Exception {\n        String smsId = null;\n        Connection conn = null;\n        PreparedStatement pstmt = null;\n        StringBuffer buffer = new StringBuffer();\n        try {\n            buffer.append(\"INSERT INTO COMTNSMS\\n\");\n            buffer.append(\"  (SMS_ID, TRNSMIS_TELNO, TRNSMIS_CN,\\n\");\n            buffer.append(\"   FRST_REGISTER_ID, FRST_REGIST_PNTTM )\\n\");\n            buffer.append(\"VALUES\\n\");\n            buffer.append(\"(?, ?, ?, ?, SYSDATE())\");\n            conn = SmsBasicDBUtil.getConnection();\n            conn.setAutoCommit(false);\n            smsId = getNextId(conn);\n            pstmt = conn.prepareStatement(buffer.toString());\n            int index = 0;\n            pstmt.setString(++index, smsId);\n            pstmt.setString(++index, sms.getTrnsmitTelno());\n            pstmt.setString(++index, sms.getTrnsmitCn());\n            pstmt.setString(++index, sms.getFrstRegisterId());\n            pstmt.executeUpdate();\n            conn.commit();\n            return smsId;\n        } catch (Exception ex) {\n            if (conn != null) {\n                conn.rollback();\n            }\n            throw ex;\n        } finally {\n            SmsBasicDBUtil.close(null, pstmt, conn);\n        }\n    }\n", "label": 1, "substitutes": {"loadDDL": ["loadPDl", "readDDDL", "readPDLS", "loadDDDL", "loadSDl", "loadDSLS", "loadSDLS", "loadPDDL", "loadDSDL", "readDDLS", "readPDDL", "loadDDl", "loadPDL", "loadSDDL", "loadDDLS", "readPDl", "readDDl", "readDDL", "loadDSL", "loadSDL", "loadDSl", "loadPDLS", "readPDL"], "stmt": ["Stmm", "stdo", "steMT", "ttr", "stmb", " superstmt", "StMT", "strmn", "Sttr", "tMT", " sttx", " stm", "stemt", "sttx", "stMT", "stpt", " Stm", " stdo", " stmb", "STm", " Stmt", "stem", "strmb", "STMT", "Stdo", " superstMT", " superstpt", "Sttx", "Stmt", "Stmn", "stmn", "stedo", " stmn", " StMT", "Stm", "stmm", " stmm", "strMT", "Stmb", " stpt", " Stpt", "STmt", " sttr", "stm", "sttr", "tmm", "STtx", " superstm", " stMT", "tmt", "strmt"], "qry": ["Qrys", "sqtry", "qrys", " qri", "quri", " qrys", "qries", "qtry", "sqrys", "Qri", "quries", "Qry", " qries", "qutry", "qury", "sqries", "sqry", "Qries", " qtry", "sqri", "qri"], "q": ["d", "sq", "v", "qq", "h", "iq", "p", "qu", "dq", "t", "e", "k", " sq", "z", "j", "Q", "c", "qa", "n", "query", "i", "m", "f", "o", "y", "ry", "u", "qi", "qv", "quest", "pkg", "l", "g", "qt", "qs", "ql", "w"]}}
{"id1": "20623709", "id2": "812803", "code1": "    public Long split(File targetDirectory, String prefix, long maxUnitBases, long maxUnitEntries) throws Exception {\n        if (!targetDirectory.exists()) {\n            if (!targetDirectory.mkdirs()) throw new Exception(\"Could not create target directory \" + targetDirectory.getAbsolutePath());\n        }\n        if (!size.isUnknown() && size.getBases() < maxUnitBases && (maxUnitEntries <= 0 || size.getEntries() < maxUnitEntries)) {\n            FileInputStream fis = new FileInputStream(this);\n            FileChannel fci = fis.getChannel();\n            FileOutputStream fos = new FileOutputStream(new File(targetDirectory, prefix + \"_0\" + \".fasta\"));\n            FileChannel fco = fos.getChannel();\n            ByteBuffer buffer = ByteBuffer.allocate(64000);\n            while (fci.read(buffer) > 0) {\n                buffer.flip();\n                fco.write(buffer);\n                buffer.clear();\n            }\n            fci.close();\n            fco.close();\n            return (long) 1;\n        } else {\n            long currentBasesCount = 0;\n            long currentEntriesCount = 0;\n            int targetCount = 0;\n            FileChannel fastaChannel = new FileInputStream(this).getChannel();\n            int totalSeqCount = 0;\n            long totalResiduesCount = 0;\n            try {\n                long prevTime = System.currentTimeMillis();\n                long fastaFileSize = this.length();\n                long fastaFileReadOffset = 0L;\n                long partitionStartOffset = 0L;\n                final int bufferSize = 1024 * 1024;\n                ByteBuffer fastaBuffer = ByteBuffer.allocateDirect(bufferSize);\n                int fastaReadState = FASTAFileTokenizer.UNKNOWN;\n                for (; fastaFileReadOffset < fastaFileSize; ) {\n                    long nBytes = fastaChannel.read(fastaBuffer);\n                    if (nBytes <= 0) {\n                        fastaBuffer.limit(0);\n                        break;\n                    } else {\n                        fastaBuffer.flip();\n                        fastaFileReadOffset += nBytes;\n                    }\n                    for (; ; ) {\n                        if (!fastaBuffer.hasRemaining()) {\n                            fastaBuffer.clear();\n                            break;\n                        }\n                        int b = fastaBuffer.get();\n                        if (b == '\\r') {\n                        } else if (b == '\\n') {\n                            if (fastaReadState == FASTAFileTokenizer.DEFLINE) {\n                                fastaReadState = FASTAFileTokenizer.SEQUENCELINE;\n                            }\n                        } else if (b == '>') {\n                            if (fastaReadState == FASTAFileTokenizer.UNKNOWN) {\n                                fastaReadState = FASTAFileTokenizer.STARTDEFLINE;\n                            } else if (fastaReadState == FASTAFileTokenizer.SEQUENCELINE) {\n                                fastaReadState = FASTAFileTokenizer.STARTDEFLINE;\n                            }\n                            if (fastaReadState == FASTAFileTokenizer.STARTDEFLINE) {\n                                if (currentBasesCount >= maxUnitBases || maxUnitEntries > 0 && currentEntriesCount >= maxUnitEntries) {\n                                    fastaBuffer.position(fastaBuffer.position() - 1);\n                                    long currentTime = System.currentTimeMillis();\n                                    System.out.println(new java.util.Date() + \" Partition \" + targetCount + \" containing \" + currentEntriesCount + \" sequences and \" + currentBasesCount + \" residues ends at \" + (fastaFileReadOffset - fastaBuffer.remaining()) + \" and was created in \" + (currentTime - prevTime) + \" ms\");\n                                    prevTime = currentTime;\n                                    long partitionEndOffset = fastaFileReadOffset - fastaBuffer.remaining();\n                                    FileChannel partitionChannel = new FileOutputStream(new File(targetDirectory, prefix + \"_\" + targetCount + \".fasta\")).getChannel();\n                                    nBytes = fastaChannel.transferTo(partitionStartOffset, partitionEndOffset - partitionStartOffset, partitionChannel);\n                                    partitionChannel.force(true);\n                                    partitionChannel.close();\n                                    targetCount++;\n                                    partitionStartOffset += nBytes;\n                                    currentBasesCount = 0;\n                                    currentEntriesCount = 0;\n                                    fastaReadState = FASTAFileTokenizer.UNKNOWN;\n                                } else {\n                                    fastaReadState = FASTAFileTokenizer.DEFLINE;\n                                    currentEntriesCount++;\n                                }\n                                totalSeqCount++;\n                            }\n                        } else {\n                            if (fastaReadState == FASTAFileTokenizer.SEQUENCELINE) {\n                                totalResiduesCount++;\n                                currentBasesCount++;\n                            }\n                        }\n                    }\n                }\n                if (partitionStartOffset < fastaFileSize) {\n                    long currentTime = System.currentTimeMillis();\n                    System.out.println(new java.util.Date() + \" Partition \" + targetCount + \" containing \" + currentEntriesCount + \" sequences and \" + currentBasesCount + \" residues ends at \" + (fastaFileSize) + \" and was created in \" + (currentTime - prevTime) + \" ms\");\n                    FileChannel partitionChannel = new FileOutputStream(new File(targetDirectory, prefix + \"_\" + targetCount + \".fasta\")).getChannel();\n                    fastaChannel.transferTo(partitionStartOffset, fastaFileSize - partitionStartOffset, partitionChannel);\n                    partitionChannel.force(true);\n                    partitionChannel.close();\n                    targetCount++;\n                }\n                if (size.isUnknown()) {\n                    size.setBases(totalResiduesCount);\n                    size.setEntries(totalSeqCount);\n                }\n            } finally {\n                fastaChannel.close();\n            }\n            return (long) targetCount;\n        }\n    }\n", "code2": "    public void convert(File src, File dest) throws IOException {\n        InputStream in = new BufferedInputStream(new FileInputStream(src));\n        DcmParser p = pfact.newDcmParser(in);\n        Dataset ds = fact.newDataset();\n        p.setDcmHandler(ds.getDcmHandler());\n        try {\n            FileFormat format = p.detectFileFormat();\n            if (format != FileFormat.ACRNEMA_STREAM) {\n                System.out.println(\"\\n\" + src + \": not an ACRNEMA stream!\");\n                return;\n            }\n            p.parseDcmFile(format, Tags.PixelData);\n            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n                System.out.println(\"\\n\" + src + \": contains UIDs!\" + \" => probable already DICOM - do not convert\");\n                return;\n            }\n            boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n            int pxlen = p.getReadLength();\n            if (hasPixelData) {\n                if (inflate) {\n                    ds.putUS(Tags.BitsAllocated, 16);\n                    pxlen = pxlen * 4 / 3;\n                }\n                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n                    System.out.println(\"\\n\" + src + \": mismatch pixel data length!\" + \" => do not convert\");\n                    return;\n                }\n            }\n            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n            ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n            ds.putUI(Tags.SOPClassUID, classUID);\n            if (!ds.contains(Tags.NumberOfSamples)) {\n                ds.putUS(Tags.NumberOfSamples, 1);\n            }\n            if (!ds.contains(Tags.PhotometricInterpretation)) {\n                ds.putCS(Tags.PhotometricInterpretation, \"MONOCHROME2\");\n            }\n            if (fmi) {\n                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n            }\n            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n            try {\n            } finally {\n                ds.writeFile(out, encodeParam());\n                if (hasPixelData) {\n                    if (!skipGroupLen) {\n                        out.write(PXDATA_GROUPLEN);\n                        int grlen = pxlen + 8;\n                        out.write((byte) grlen);\n                        out.write((byte) (grlen >> 8));\n                        out.write((byte) (grlen >> 16));\n                        out.write((byte) (grlen >> 24));\n                    }\n                    out.write(PXDATA_TAG);\n                    out.write((byte) pxlen);\n                    out.write((byte) (pxlen >> 8));\n                    out.write((byte) (pxlen >> 16));\n                    out.write((byte) (pxlen >> 24));\n                }\n                if (inflate) {\n                    int b2, b3;\n                    for (; pxlen > 0; pxlen -= 3) {\n                        out.write(in.read());\n                        b2 = in.read();\n                        b3 = in.read();\n                        out.write(b2 & 0x0f);\n                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n                        out.write(b3 >> 4);\n                    }\n                } else {\n                    for (; pxlen > 0; --pxlen) {\n                        out.write(in.read());\n                    }\n                }\n                out.close();\n            }\n            System.out.print('.');\n        } finally {\n            in.close();\n        }\n    }\n", "label": 1, "substitutes": {"split": ["scan", "batch", "lock", "append", "disk", "Split", "part", "process", "map", "join", "count", "open", "scale", "copy", "write", "slice", "format", "align", "parse", "read", "upload", "seek", "transfer", "use", "unit", "sync", "share"], "targetDirectory": ["testLocation", "targetdirectory", "localDir", "baseFolder", " targetFile", " targetDir", " targetFolder", " targetMemory", "TargetFolder", "TargetDirect", " targetdirectory", "testDirectory", "localDirectory", "Targetdirectory", "TargetDirectory", "TargetMemory", "TargetLocation", "baseDirectory", "TargetDir", "baseMemory", "localdirectory", "targetDir", "targetDirect", " targetDirect", " targetLocation", "targetMemory", "baseDirect", "testDir", "testDirect", "localFile", "targetLocation", "targetFolder", "baseDir", "targetFile", "baseFile", "basedirectory"], "prefix": ["localhost", "path", "p", "fix", "tag", "PRE", "username", "pres", "filename", "index", "alias", "pattern", "FIX", "pi", "title", "status", "fixes", "pre", "uri", "base", "fixed", "size", "padding", "format", "root", "name", "template", "zero", "Pref", "key", "password", "division", "version", "ix", "pkg", "directory", "type", "this", " suffix", "command"], "maxUnitBases": ["maxUnitAliias", "maxUnitLicas", "maxUnityBages", "maxUnitReplases", "maxUnitAliases", "maxUnityBounds", "maxUnitbias", "maxUnityAliades", "maxUnityLages", "maxUnityLounds", "maxUnityBias", "maxUnitChounds", "maxUnitBias", "maxUnitBades", "maxUnitAliades", "maxUnitReplages", "maxUnitLages", "maxUnitBages", "maxUnitChicas", "maxUnityLases", "maxUnityLicas", "maxUnityBicas", "maxUnityBases", "maxUnityAliounds", "maxUnitChages", "maxUnitReplounds", "maxUnityAliias", "maxUnitReplicas", "maxUnitbades", "maxUnitLases", "maxUnitChases", "maxUnitBounds", "maxUnityAliases", "maxUnitChades", "maxUnityBades", "maxUnitBicas", "maxUnitChias", "maxUnitbases", "maxUnitAliounds", "maxUnitLounds", "maxUnitbounds"], "maxUnitEntries": ["maxUnitEntrs", "maxUnityEntrys", "maxUnityentrys", "maxUnitEntires", "maxUnitIntegriers", "maxUnitEntryires", "maxUnitErrys", "maxUnitIntegrys", "maxUnitentrs", "maxUnityentires", "maxUnitentrys", "maxUnityEntries", "maxunitEntires", "maxUnitErrs", "maxUnityEntrs", "maxUnitEntrys", "maxUnitErries", "maxUnitentires", "maxUnitEntriers", "maxUnitEntryries", "maxUnityentries", "maxUnitIntegires", "maxUnitentries", "maxUnityentrs", "maxunitEntrys", "maxUnitEntryrys", "maxunitEntries", "maxUnitIntegries", "maxUnitErires", "maxunitEntrs", "maxUnityEntires", "maxUnitEntryriers"], "fis": ["Fci", "fic", "viss", "Fii", "ifci", " fii", " fiss", " fi", "ifis", "vis", "Fic", "fiss", "fii", "Fis", " fic", "ifii", "Fiss", "vic", "ific", "fi", "vi", "Fi"], "fci": ["mcu", "cfini", "Fci", "tci", "fic", "cfico", "tii", "mci", "Fai", "Fini", " fcu", "mii", " fii", "cfis", "Fco", "fcu", "cfco", "Fic", "cfic", "fii", "Fis", " fic", "mco", "Fico", " fico", "fico", "tcu", "tco", "fini", "fai", " fai", " fini", "cfci", "cfai"], "fos": ["yos", "Fos", "fios", "faos", "yios", " fOS", "wbos", " fios", "flOS", "foss", "flos", "Faos", " faos", "ybos", " fbos", "yaos", "waos", "wios", "wos", "floss", "fOS", "FOS", "flaos", "fbos", " foss", "Foss"], "fco": ["Fci", "cdo", " foco", "pci", " fcos", "Fco", "pco", "Foco", "cco", "fcos", "Fso", "cso", "Fcos", " fdo", "Fdo", "pcos", "fdo", "toco", "fcon", "tco", "Fcon", " fso", "pso", "ccon", " fcon", "tdo", "fso", "tcos", "foco"], "buffer": ["black", "sample", "address", "function", "batch", "match", "filter", "binary", "sequence", "append", "queue", "pause", "length", "print", "char", "channel", "timeout", "event", "bridge", "position", "row", "stack", "phrase", "record", "limit", "holder", "flush", "complete", "button", "index", "library", "block", "note", "iter", "padding", "table", "message", "buff", "result", "database", "read", "document", "template", "comment", "callback", "data", "source", "reset", "memory", "window", "cache", "order", "buf", "Buffer", "temp", "entry", "command"], "currentBasesCount": ["currentbasesLength", "currentBasedCount", "currentbaseCode", "currentBadesCode", "currentbasesCode", "currentBadesLength", "currentBaseCode", "currentBasesLength", "currentbaseLength", "currentbaseCount", "currentBasedCode", "currentBasesCode", "currentbasesCount", "currentBadesCount", "currentBaseCount", "currentBaseLength", "currentBasedLength"], "currentEntriesCount": ["currentEntiesCode", "currentEntriesCode", "currentEntrsCount", "currentEntrysCode", "currentEntrysFlag", "currentEntrsFlag", "currentEntriesFlag", "currentEntiesFlag", "currentEntrysCount", "currentEntrsCode", "currentEntiesCount"], "targetCount": ["TargetCount", "TargetAmount", " targetAmount", "targetNum", "argetAmount", " targetInfo", "argetInfo", "TargetInfo", " targetNum", "targetInfo", "targetAmount", "argetCount", "argetNum", "TargetNum"], "fastaChannel": ["fastoProvider", "fastpaButton", "fastityChan", "fastoChannel", " fastoQueue", "fastpaProvider", " fastoChannel", "fastoQueue", "fastoStream", "fastaiStream", "fastoConnection", "fastityChannel", " fastaStream", "fastaiChan", "fastaiQueue", "fastityQueue", " fastaProvider", "fastpaConnection", "fastaButton", "fastoButton", "fastaQueue", "fastaChan", " fastoChan", "fastaiChannel", " fastaButton", "fastaProvider", "fastaConnection", "fastpaChannel", "fastoChan", " fastoStream", " fastaQueue", "fastaStream", " fastaChan", " fastaConnection", "fastityStream"], "totalSeqCount": ["totalSeQCount", "totalSegCounter", "totalSeQCode", "totalSeqSize", "totalSegCode", "totalSegSize", "totalSegCount", "totalSeqCounter", "totalSeqsCount", "totalSeqsCounter", "totalSeQSize", "totalSeQCounter", "totalSeqsCode", "totalSeqsSize", "totalSeqCode"], "totalResiduesCount": ["totalResiduesFlag", "totalResIduesFlag", "totalResidusFlag", "totalResiduationsCode", "totalResidueCode", "totalResIduesCount", "totalResIdueCount", "totalResidueFlag", "totalResIdueFlag", "totalResidusCode", "totalResidueCount", "totalResiduesCode", "totalResiduationsFlag", "totalResIduesCode", "totalResIdueCode", "totalResiduationsCount", "totalResidusCount"], "prevTime": ["prevThread", " previousThread", " previousTime", "parThread", " prevT", " previousT", "parTime", "prevT", " prevThread", "parT"], "fastaFileSize": ["fastaFileName", "fastATableName", "fastoFileSize", "fastoFileOwner", "fastaTableName", "fastaFileSIZE", "fastAFileLength", "fastafileSize", "fastoFileSIZE", "fastaReaderHeight", "fastATableLength", "fastaChainLength", "fastATableSize", "fastoTableLength", "fastafileLength", "fastaFileLength", "fastaFileOwner", "fastaReaderLength", "fastoFileLength", "fastaChainSize", "fastaTableOwner", "fastoTableSIZE", "fastaTableSize", "fastaReaderSize", "fastafileSIZE", "fastaChainSIZE", "fastAFileHeight", "fastaFilesName", "fastAFileName", "fastAFileSize", "fastaFileHeight", "fastoTableOwner", "fastafileOwner", "fastaChainOwner", "fastaReaderName", "fastaFilesHeight", "fastaFilesLength", "fastATableHeight", "fastaTableHeight", "fastaFilesSize", "fastoTableSize", "fastaTableLength", "fastaTableSIZE"], "fastaFileReadOffset": ["fastaPageLoadPos", "fastaFileInputOrder", "fastaPageLoadAmount", "fastaFileLoadOffset", "fastaFileLoadAmount", "fastaFileLoadLength", "fastaPageReadOffset", "fastaFileReaderoffset", "fastaFileReadPos", "fastaChainReadLocation", "fastaFileWriteAmount", "fastaFileReadOrder", "fastaFileInputLength", "fastaFileWriteLength", "fastaFileReadLength", "fastaFilesLoadAmount", "fastaFilereadAmount", "fastaFileInputAmount", "fastaFileViewPos", "fastaFileReadPosition", "fastaFileReaderLocation", "fastaFileLoadPos", "fastaFilesReadOrder", "fastaPageLoadOrder", "fastaChainCurrentoffset", "fastaChainCurrentLocation", "fastaFileLoadOrder", "fastaFileWriteOrder", "fastaPageLoadOffset", "fastaChainReadoffset", "fastaFileReadLocation", "fastaFilereadOrder", "fastaFilesLoadLength", "fastaFileInputLocation", "fastaFileCurrentoffset", "fastaFilesLoadOrder", "fastaFilesReadOffset", "fastaFileCurrentPosition", "fastaFilereadPos", "fastaFileCurrentOffset", "fastaFileViewOrder", "fastaFilesLoadOffset", "fastaFileReadoffset", "fastaFileInputOffset", "fastaFilereadOffset", "fastaFileInputoffset", "fastaChainReadOffset", "fastaPageReadAmount", "fastaFileViewAmount", "fastaFileCurrentLocation", "fastaChainReadPosition", "fastaFileViewOffset", "fastaPageReadPos", "fastaFileReadAmount", "fastaFileReaderPosition", "fastaPageReadOrder", "fastaChainCurrentPosition", "fastaFileReaderOffset", "fastaChainCurrentOffset", "fastaFilesReadAmount", "fastaFileInputPosition", "fastaFileWriteOffset", "fastaFilesReadLength"], "partitionStartOffset": ["partitonStartingPosition", "partitionDataOff", "partitionEndPoint", "partitionStartPosition", "partitionEndPosition", "partitionStartingOff", "partitionDataPoint", "partitionDataOffset", "partitionStartingPosition", "partitionStartingOffset", "partitionDataPosition", "partitionEndOff", "partitionStartPoint", "partitonStartingPoint", "partitonStartOff", "partitonStartPoint", "partitonStartOffset", "partitionStartingPoint", "partitonStartingOff", "partitionStartOff", "partitonStartPosition", "partitonStartingOffset"], "bufferSize": [" bufferCode", "bufSIZE", "BufferName", " bufferLength", "bufCode", "bufSize", "bufferSIZE", "tableSIZE", "sequenceSIZE", "BufferSize", "sequenceCode", "tableLength", "buffLength", "bufferLength", "sequenceSize", "bufferName", "tableName", "buffSize", "buffSIZE", "buffName", "bufferCode", "BufferLength", "sequenceLength", "bufLength", " bufferSIZE", "tableSize", "BufferSIZE"], "fastaBuffer": ["fastalCounter", "fastmaQueue", "fastmaBuffer", "fastalQueue", "fastaCache", "fasteBuffer", " fastaBuff", "fastaStore", " fastoBuffer", " fastaCache", "fasteBuff", "fastaQueue", "fastaMemory", "fastsaQueue", "fastuBuff", "FastaRequest", "fastuMemory", "fastmaChannel", "FastaBuffer", "fastaRequest", "FastmaBuff", "fastcaBuffer", "fastmaStore", "fastuBuffer", "fastalBuff", " fastaMemory", "FastaStore", "fastoRequest", "FastmaRequest", "FastmaBuffer", " fastaCounter", "fastasCache", "fastsaBuffer", "fastaDB", "fastanCache", "wildanRequest", "FastaBuff", "fastoBuff", "fastalBuffer", "fastoBuffer", "fastmaRequest", " fastoQueue", "fastoQueue", "fastasStore", "fastmaCache", "fastasQueue", "wildaBuffer", "fastcaCache", "fastanBuffer", " fastaBuilder", "fasteMemory", "fastasBuffer", " fastoBuff", "fastaBuilder", " fastaDB", "fastoCounter", "fastanRequest", "wildanBuffer", "FastmaStore", " fastoCounter", "fastsaBuff", "fastcaBuff", "fastuDB", " fastaQueue", "wildanCache", "fastasBuilder", "fastaBuff", "fastsaChannel", "fastasRequest", "fastcaRequest", "fastaCounter", "wildaRequest", "fastasBuff", "fastmaBuff", "fastoStore", "fastmaBuilder", "fasteDB", "wildanBuff", "fastanBuff", "wildaCache", "fastasCounter", "wildaBuff"], "fastaReadState": ["fastoReadType", "fastaReaderType", "fastaLoadSTATE", "fastaLoadType", "fastaReadType", "fastaReaderStatus", "fastoReaderSTATE", "fastaCurrentSTATE", "fastoReadState", "fastaReadSTATE", "fastaReaderSTATE", "fastaReadStatus", "fastaCurrentType", "fastaCurrentState", "fastoReadSTATE", "fastoReaderState", "fastaLoadStatus", "fastaCurrentStatus", "fastoReadStatus", "fastaReaderState", "fastoReaderStatus", "fastoReaderType", "fastaLoadState"], "nBytes": ["Nbytes", "noBlocks", " nKeys", "nrbytes", " nParts", "numBlocks", "nsbytes", "nsBytes", "NKeys", "nsWords", "nbytes", "nrItems", "noBytes", "nBlocks", "NItems", "nobytes", "NParts", "NWords", "nsParts", "numbytes", " nNs", "nKeys", "numNs", " nbytes", " nItems", "nWords", "nrBytes", "nrKeys", "noNs", "numBytes", "nParts", " nWords", "nNs", "nItems", " nBlocks", "NBytes"]}}
{"id1": "19549489", "id2": "411595", "code1": "    public static void copy(File sourceFile, File destinationFile) throws IOException {\n        FileChannel sourceFileChannel = (new FileInputStream(sourceFile)).getChannel();\n        FileChannel destinationFileChannel = (new FileOutputStream(destinationFile)).getChannel();\n        sourceFileChannel.transferTo(0, sourceFile.length(), destinationFileChannel);\n        sourceFileChannel.close();\n        destinationFileChannel.close();\n    }\n", "code2": "    private void displayDiffResults() throws IOException {\n        File outFile = File.createTempFile(\"diff\", \".htm\");\n        outFile.deleteOnExit();\n        FileOutputStream outStream = new FileOutputStream(outFile);\n        BufferedWriter out = new BufferedWriter(new OutputStreamWriter(outStream));\n        out.write(\"<html><head><title>LOC Differences</title>\\n\" + SCRIPT + \"</head>\\n\" + \"<body bgcolor='#ffffff'>\\n\" + \"<div onMouseOver=\\\"window.defaultStatus='Metrics'\\\">\\n\");\n        if (addedTable.length() > 0) {\n            out.write(\"<table border><tr><th>Files Added:</th>\" + \"<th>Add</th><th>Type</th></tr>\");\n            out.write(addedTable.toString());\n            out.write(\"</table><br><br>\");\n        }\n        if (modifiedTable.length() > 0) {\n            out.write(\"<table border><tr><th>Files Modified:</th>\" + \"<th>Base</th><th>Del</th><th>Mod</th><th>Add</th>\" + \"<th>Total</th><th>Type</th></tr>\");\n            out.write(modifiedTable.toString());\n            out.write(\"</table><br><br>\");\n        }\n        if (deletedTable.length() > 0) {\n            out.write(\"<table border><tr><th>Files Deleted:</th>\" + \"<th>Del</th><th>Type</th></tr>\");\n            out.write(deletedTable.toString());\n            out.write(\"</table><br><br>\");\n        }\n        out.write(\"<table name=METRICS BORDER>\\n\");\n        if (modifiedTable.length() > 0 || deletedTable.length() > 0) {\n            out.write(\"<tr><td>Base:&nbsp;</td><td>\");\n            out.write(Long.toString(base));\n            out.write(\"</td></tr>\\n<tr><td>Deleted:&nbsp;</td><td>\");\n            out.write(Long.toString(deleted));\n            out.write(\"</td></tr>\\n<tr><td>Modified:&nbsp;</td><td>\");\n            out.write(Long.toString(modified));\n            out.write(\"</td></tr>\\n<tr><td>Added:&nbsp;</td><td>\");\n            out.write(Long.toString(added));\n            out.write(\"</td></tr>\\n<tr><td>New & Changed:&nbsp;</td><td>\");\n            out.write(Long.toString(added + modified));\n            out.write(\"</td></tr>\\n\");\n        }\n        out.write(\"<tr><td>Total:&nbsp;</td><td>\");\n        out.write(Long.toString(total));\n        out.write(\"</td></tr>\\n</table></div>\");\n        redlinesOut.close();\n        out.flush();\n        InputStream redlines = new FileInputStream(redlinesTempFile);\n        byte[] buffer = new byte[4096];\n        int bytesRead;\n        while ((bytesRead = redlines.read(buffer)) != -1) outStream.write(buffer, 0, bytesRead);\n        outStream.write(\"</BODY></HTML>\".getBytes());\n        outStream.close();\n        Browser.launch(outFile.toURL().toString());\n    }\n", "label": 1, "substitutes": {"copy": ["clone", "delete", "Cop", "cat", " cp", "replace", "map", "export", "cp", "write", "csv", "slice", "paste", "rm", "create", "Copy", "upload", "download", "transfer", "read", " mirror", " duplicate", "load", " Copy", "save", "add", "move", "sync"], "sourceFile": ["inputLine", "inputPage", "ourcefile", "ourcePage", "ourceFile", "sourcefile", "inputFile", "ourceFilename", "ourceLine", "SourceFilename", " sourceLine", " sourceFilename", "inputfile", "sourceFilename", "SourceLine", " sourcefile", "SourcePage", " sourcePage", "SourceFile", "sourcePage", "Sourcefile", "sourceLine"], "destinationFile": ["destinationfile", "destinatedPlace", "destinationsfile", "declinatorFile", "destinationPath", "destinatorFile", "destinatedfile", "estinatedFilename", "estinationFile", "destinatePlace", "destrativePlace", "destinatorPath", "estinationPlace", "destinationsPlace", "declinationPlace", "estinatedFile", "declinationFilename", "declinatorPlace", "destinoFilename", "destrativeFile", "destinatedFilename", "declinationPath", "declinatorFilename", "destinatePath", "estinatedPlace", "destinatorPlace", "destinatedFile", "destinationPlace", "destinationFilename", "estinationfile", "declinationFile", "estinationFilename", "destinoFile", "destinationsFilename", "destinatorFilename", "destrativePath", "estinatedfile", "declinatorPath", "destinofile", "destrativeFilename", "destinoPlace", "destinationsFile", "destinateFile", "destinateFilename"], "sourceFileChannel": ["sourceFileApplication", "sourceBaseHandler", "ourceEntrychannel", "sourceBaseChuck", "ourceEntryChan", "sourceBlockConnection", "srcFilechannel", "sourceStreamChan", "sourceFilechannel", "srcFileChannel", "sourceStreamChuck", "sourceEntrychannel", "srcBlockchannel", "sourceEntryChannel", "sourceStreamchannel", "sourceBlockchannel", "sourceFileChuck", "sourceBaseChannel", "sourceEntryConnection", "sourceEntryChan", "ourceFileChannel", "srcBlockConnection", "sourceFileHandler", " sourceFileHandler", "sourceStreamChannel", "sourceByteEntry", "srcBlockEntry", "srcFileEntry", "sourceStreamApplication", "sourceByteConnection", "sourceLineEntry", "ourceFileChan", " sourceFileApplication", "ourceFilechannel", "sourceLineConnection", "ourceFileConnection", "sourceLineChan", "sourceFileChan", "sourceFileConnection", "sourceBytechannel", "sourceBlockEntry", "sourceByteChannel", "sourceBaseApplication", "sourceFileEntry", "sourceLineChannel", "sourceBlockChannel", "srcBlockChannel", "sourceStreamHandler", "ourceEntryChannel", "sourceLinechannel", " sourceFileChuck", "srcFileConnection", "sourceStreamConnection", "ourceEntryConnection"], "destinationFileChannel": ["destinationDirectoryChan", "destinatorFilesChannel", "destinatorFilesCh", "destmentResourceManager", "destmentPageContext", "destmentResourcechannel", "destmentFileContext", "destinationDirectoryChannel", "destinationResourcechannel", "destinationPageChan", "destinationFileConnection", "destinationfileManager", "destinationPageContext", "destinationChannelContext", "destinationFilesChan", "destinationfilechannel", "destinationfileConnection", "destinatorFileCh", "destinationChannelCh", "destinationChannelChannel", "destinationResourceChan", "destmentResourceChan", "destinationPageChannel", "destinatorFileConnection", "destinationFileContext", "destinationFileCh", "destinationResourceChannel", "destmentResourceChannel", "destinationDirectoryManager", "destinationPageEntry", "destinationChannelEntry", "destinatorFilesConnection", "destmentPageEntry", "destinatorFileChannel", "destinationFileManager", "destinatorFilesChan", "destinationDirectorychannel", "destmentFilechannel", "destinationfileChannel", "destinationFileChan", "destinationFileEntry", "destinationFilesChannel", "destmentFileManager", "destmentFileChan", "destmentFileEntry", "destinationResourceManager", "destinationFilechannel", "destinationChannelConnection", "destinatorFileChan", "destmentFileChannel", "destinationfileChan", "destinationfileCh", "destmentPageChan", "destinationFilesConnection", "destinationfileContext", "destinationChannelChan", "destinationFilesCh", "destinationfileEntry", "destmentPageChannel"]}}
{"id1": "18793482", "id2": "15745420", "code1": "    public void modifyApplicationMessage(String locale, String messageName, String messageValue) {\n        Properties properties = new Properties();\n        try {\n            String i18nPath = ServerUtil.removelastResourceURL(ConfigurationServiceImpl.class.getResource(\"/es/ua/tranube/prototype/main/client/TranubeConstants_en.properties\").getPath()).toString();\n            File englishFile = new File(i18nPath + \"TranubeConstants_en.properties\");\n            if (!englishFile.exists()) throw new Exception(\"English file not found\");\n            String propertiesFilePath = i18nPath + \"TranubeConstants_\" + locale + \".properties\";\n            File file = new File(propertiesFilePath);\n            if (!file.exists()) {\n                FileReader in = new FileReader(englishFile);\n                FileWriter out = new FileWriter(file);\n                int c;\n                while ((c = in.read()) != -1) out.write(c);\n                in.close();\n                out.close();\n            }\n            InputStream is = ConfigurationServiceImpl.class.getResourceAsStream(\"/es/ua/tranube/prototype/main/client/TranubeConstants_\" + locale + \".properties\");\n            BufferedReader breader = new BufferedReader(new InputStreamReader(is));\n            String line = null;\n            StringBuilder strBuilder = new StringBuilder();\n            boolean found = false;\n            while ((line = breader.readLine()) != null) {\n                if (line.startsWith(\"#\")) strBuilder.append(line).append(\"\\n\"); else {\n                    String[] pieces = line.split(\"=\");\n                    if (pieces.length == 2) {\n                        if (pieces[0].trim().equals(messageName)) {\n                            strBuilder.append(pieces[0].trim() + \" = \" + messageValue + \"\\n\");\n                            found = true;\n                        } else strBuilder.append(line).append(\"\\n\");\n                    } else strBuilder.append(line).append(\"\\n\");\n                }\n            }\n            if (!found) strBuilder.append(messageName).append(\" = \").append(messageValue).append(\"\\n\");\n            breader.close();\n            is.close();\n            FileWriter writer = new FileWriter(file);\n            writer.write(strBuilder.toString());\n            writer.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n", "code2": "    private void download(String address, String localFileName) throws UrlNotFoundException, Exception {\n        String ext = G_File.getExtensao(address);\n        if (ext.equals(\"jsp\")) {\n            throw new Exception(\"Erro ao baixar pagina JSP, tipo negado.\" + address);\n        }\n        File temp = new File(localFileName + \".tmp\");\n        if (temp.exists()) temp.delete();\n        OutputStream out = null;\n        URLConnection conn = null;\n        InputStream in = null;\n        try {\n            try {\n                URL url = new URL(address);\n                conn = url.openConnection();\n                in = conn.getInputStream();\n            } catch (FileNotFoundException e2) {\n                throw new UrlNotFoundException();\n            }\n            out = new BufferedOutputStream(new FileOutputStream(temp));\n            byte[] buffer = new byte[1024];\n            int numRead;\n            long numWritten = 0;\n            while ((numRead = in.read(buffer)) != -1) {\n                out.write(buffer, 0, numRead);\n                numWritten += numRead;\n            }\n        } catch (UrlNotFoundException exception) {\n            throw exception;\n        } catch (Exception exception) {\n            throw exception;\n        } finally {\n            try {\n                if (in != null) {\n                    in.close();\n                }\n                if (out != null) {\n                    out.close();\n                }\n            } catch (IOException ioe) {\n            }\n        }\n        File oldArq = new File(localFileName);\n        if (oldArq.exists()) {\n            oldArq.delete();\n        }\n        oldArq = null;\n        File nomeFinal = new File(localFileName);\n        temp.renameTo(nomeFinal);\n    }\n", "label": 0, "substitutes": {"modifyApplicationMessage": ["modifyapplicationMsg", "modifyServermessage", "modifyServerMessage", "modifyAppmessage", "modureApplicationMsg", "modureAppMessage", "modureApplicationData", "modifyAppData", "modifyapplicationMessage", "modureAppMsg", "modureApplicationMessage", "modifyAppMsg", "modifyapplicationmessage", "modifyApplicationMsg", "modifyapplicationData", "modifyAppMessage", "modifyServerData", "modureApplicationmessage", "modureAppData", "modifyServerMsg", "modifyApplicationmessage", "modifyApplicationData", "modureAppmessage"], "locale": ["locational", "localey", " locales", " localey", "localales", " locALE", "Locale", "Locational", "regale", "regales", "locales", "regALE", " locational", "Localey", "regational", "localaley", "Locales", "localale", "localALE", "LocALE", "locALE", "localational"], "messageName": ["mediaKey", "MessageKey", " messageType", "messageKey", "msgKey", "msgValue", "mediaNAME", "mediaName", "messageType", " messageNames", "messageNAME", "messageNames", " messageNAME", "MessageValue", " messageKey", "MessageName", "msgType", "MessageType", "MessageNames", "MessageNAME", "msgName", "mediaNames"], "messageValue": ["languageName", "languageValue", " messageType", "messageVal", "msgValue", "messageVALUE", "msgvalue", "messageType", "messagevalue", "essageVal", "MessageValue", "MessageName", "languagevalue", "Messagevalue", "essageName", "msgVALUE", "MessageVALUE", "MessageType", "essageValue", " messageVal", "msgName", "MessageVal", "essageType", "languageVALUE"], "properties": ["settings", "pdf", "utils", "results", "pro", "property", "policy", "perties", "profile", " props", "options", "config", "ps", "params", "message", "parts", "files", "project", "pid", "data", "report", "details", "metadata", "json", "types", "prop", " Properties"], "i18nPath": ["i18nePoints", "i18anPoints", "i18lPath", "i18nP", "i18natDriver", "i18neStr", "i18lUrl", "i18bPath", "i8nStr", "i18lStr", "i18bDir", "i18anP", "i18nyDir", "i18lDir", "i18anDir", "i18rPath", "i18nyPath", "i18natP", "i8nUrl", "i18bStr", "i18nePath", "i18nyDriver", "i18neDriver", "i18bUrl", "i18nDir", "i18nDriver", "i18anIf", "i18nPoints", "i18nUrl", "i8lPath", "i8nPath", "i18neUrl", "i18nStr", "i18anPath", "i18rDriver", "i18natPoints", "i18nyIf", "i18neDir", "i18natPath", "i18nIf", "i18rDir", "i8lStr", "i18anDriver", "i18neP", "i18rIf", "i8nDir", "i8lUrl", "i8lDir"], "englishFile": ["englishfile", "languageFiles", "wikiPath", "ianaTable", "enFilename", "Englishfile", "EnglishFilename", "ianafile", "wikifile", "EnglishFiles", " englishDirectory", "EnglishFile", " englishTable", " englishPath", "ianaDirectory", "languagefile", "wikiTable", "ianaPath", "englishPath", "englishTable", "electricFile", "languageFile", "enFile", "enfile", "englishDirectory", "electricDir", "englishPort", "englishDir", "wikiFile", "ianaDir", " englishPort", "ianaPort", "englishFiles", "electricPort", " englishfile", "electricDirectory", "languageFilename", "ianaFile", "enFiles", "englishFilename", " englishDir"], "propertiesFilePath": ["settingsFilePath", "pertiesfilepath", "propertiesfilePath", "propertiesFilenamepath", "propertiesFilenameType", "pertiesFilePath", "propertiesFilesLocation", "propertiesFilenameLocation", "propertiesFileName", "pertiesfilePath", "propertiesFilesType", "pertiesfileType", "pertiesFilepath", "settingsFilenameLocation", "pertiesfileName", "pertiesFileName", "propertiesfileType", "pertiesFileType", "propertiesFilespath", "propertiesFilenameName", "propertiesFileLocation", "propertiesFilenamePath", "settingsFilenamepath", "propertiesFileType", "propertiesFilepath", "settingsFileLocation", "settingsFilenamePath", "propertiesfileName", "propertiesFilesPath", "settingsFilenameName", "propertiesfilepath", "propertiesfileLocation", "settingsFileName", "propertiesFilesName", "settingsFilepath"], "file": ["local", "os", "path", "module", "string", "parent", "io", "resource", "FILE", "print", "channel", "ile", "be", "class", "current", "File", "record", "run", "output", "complete", "filename", "model", "rule", "content", "style", "attribute", "null", "library", "connection", "port", "write", "console", "language", "f", "base", "table", "buffer", "page", "format", "message", "files", "result", "fp", "create", "name", "document", "object", "comment", "application", "data", "source", "report", "key", "image", "use", "fi", "handle", "xml", "domain", "pool", "type", "info", "entry"], "in": ["ic", "en", "sin", "io", "asin", "inf", "al", "cin", "from", "ri", "reader", "ini", "IN", "inc", "i", "inner", "inside", "ar", " din", "iter", "din", "get", "init", "oin", "isin", "input", "ind", "read", "gin", "In", "ai", "ins", "rin", "ir", "it", "bin", "ain", "inn"], "out": ["os", "cos", "again", "at", "log", "put", "sw", "io", "print", "conv", "nt", "aos", "output", "we", "conf", "external", "ex", "to", "n", "check", "write", "inner", "outer", "csv", "o", "set", "net", "screen", "end", "OUT", "Out", "cache", "it", "can", "outs", "ou", "co", "con", "w"], "c": ["d", "mc", "v", "cos", "fc", "unc", "ce", "cu", "char", "k", "t", "count", "ca", "arc", "conf", "lc", "r", "cp", "call", "n", "cod", "i", "cs", "code", "cr", "cc", "col", "cf", "ct", "cl", "\u00e7", "cap", "ch", "cd", "etc", "u", "cm", "nc", "x", "con", "cont", "ac", "chain", "C", "rc", "cb", "l", "cache", "character", "ec", "gc", "pc", "bc", "co", "dc"], "is": ["iss", "ic", "isl", "isa", "sis", "ais", "ri", "iris", "i", "ios", "bis", "sit", "es", "as", "IS", "lis", "its", "\u00eds", "isin", "ris", "sys", "isf", "tis", "Is", "ins", "nis", "it", "isi", "isc", "os", "iso"], "breader": ["browe", " breade", " breadar", "brewer", "bleder", " breadr", "bber", " breadber", "bbr", "browger", "bler", "brewger", "brewber", "bbar", "breadger", "breadber", " breadger", "breadder", "brewe", "brower", "bbder", "bleer", "breade", "breadr", "browber", "breadar", " breadder", "blear"], "line": ["text", "ln", "sample", "cell", "log", "sequence", "string", "nl", "queue", "inline", "point", "mail", "part", "char", "row", "stroke", "phrase", "no", "detail", "record", "left", "rule", "shell", "section", "email", "edge", "range", "word", "ice", "block", "node", "query", "label", "port", "code", "side", "link", "stay", "note", "iter", "trace", "normal", "slice", "message", "lin", "entity", "page", "column", "parse", "lo", "frame", "liner", "comment", "lines", "lane", "ine", "online", "le", "eline", "chain", "header", "Line", "l", "LINE", "ip", "handle", "cmd", "next", "body", "continue", "entry", "se"], "strBuilder": [" strBuffer", "frBuilt", "stringBuild", "strBuilt", " strBuild", "Strbuilder", "stringBuffer", "StrBuffer", "StrBuilder", "strBu", "strBuffer", "frBuild", "StrBuilt", "frParser", " strBu", "objBuilder", "arrParser", "arrBuilder", "strParser", "arrBuffer", "stringParser", "stringBuilder", "stringBuilt", " strbuilder", "StrBuild", "arrbuilder", "StrParser", "objBuild", "arrBu", "frBuilder", "StrBu", "arrBuild", "strbuilder", "objbuilder", " strParser", "strBuild", "objBuffer", "stringbuilder"], "pieces": ["places", "bytes", "terms", "groups", "eps", "Parts", "tips", "sections", "rings", "strings", "fits", "plates", "blocks", "knife", "finals", "bits", "steps", "links", "feet", "caps", "piece", "fixes", "units", "ces", "maps", "pointers", "ps", "times", "letters", "pins", "parts", "its", "ops", "xes", "tools", "services", "lines", "sts", "powers", "items", "keys", "cars", "checks", "words", "players", "cuts", "types", "ties", "ctors"], "found": ["created", "err", "started", "search", "changed", " Found", "printed", "first", "bool", "given", "filled", "sold", "finished", "supported", "used", "old", "count", "loaded", "success", " founded", "identified", "needed", "ed", "compl", "index", "good", "opened", "built", "expected", "valid", "confirmed", "failed", "fixed", "released", "tested", " caught", "sent", "focused", "read", "forced", "Found", "successful", "mounted", " detected", "done", "finder", "empty", "installed", "available", "defined", "find"]}}
{"id1": "12766377", "id2": "12766394", "code1": "    public Document index() throws CrawlingException {\n        log.debug(\"BEGINIG indexing page [code=\" + getCode() + \"] ...\");\n        URL url = null;\n        InputStream in = null;\n        String contentType = null;\n        try {\n            url = new URL(getServer().getProtocol() + \"://\" + getServer().getHost() + \":\" + getServer().getPort() + getPath());\n            HttpURLConnection pageContent = (HttpURLConnection) url.openConnection();\n            if (pageContent.getResponseCode() != HttpURLConnection.HTTP_OK) {\n                log.debug(\"page pk[\" + getCode() + \",\" + url.toExternalForm() + \"] is invalid\");\n                return null;\n            }\n            String redireccion = pageContent.getHeaderField(\"location\");\n            if (redireccion != null) {\n                log.debug(\"Page \" + url.toExternalForm() + \" redirected to \" + redireccion);\n                recordLink(redireccion);\n                return null;\n            }\n            contentType = pageContent.getContentType();\n            in = new BufferedInputStream(pageContent.getInputStream(), 32768);\n        } catch (MalformedURLException e) {\n            log.error(\"Invalid page address\", e);\n        } catch (ConnectException e) {\n            if (getServer() != null) {\n                log.error(\"Unable to connect to page: \" + getServer().getProtocol() + \"://\" + getServer().getHost() + \":\" + getServer().getPort() + getPath(), e);\n            }\n        } catch (UnknownHostException uhe) {\n            log.warn(\"Unknow host indexing page \" + getURL(), uhe);\n        } catch (IOException e) {\n            log.warn(\"Unable to index page \" + getURL(), e);\n        }\n        Document doc = generateDocument(contentType, in);\n        log.debug(\"END indexing page [code=\" + getCode() + \"]\");\n        return doc;\n    }\n", "code2": "    public void testReadHelloWorldTxt() throws Exception {\n        final InputStream helloWorldIS = this.getClass().getClassLoader().getResourceAsStream(BASE_DIR + \"/HelloWorld.txt\");\n        FileUtils.forceMkdir(new File(this.testDir.getAbsolutePath() + \"/org/settings4j/contentresolver\"));\n        final String helloWorldPath = this.testDir.getAbsolutePath() + \"/org/settings4j/contentresolver/HelloWorld.txt\";\n        final FileOutputStream fileOutputStream = new FileOutputStream(new File(helloWorldPath));\n        IOUtils.copy(helloWorldIS, fileOutputStream);\n        IOUtils.closeQuietly(helloWorldIS);\n        IOUtils.closeQuietly(fileOutputStream);\n        LOG.info(\"helloWorldPath: \" + helloWorldPath);\n        final FSContentResolver contentResolver = new FSContentResolver();\n        contentResolver.setRootFolderPath(this.testDir.getAbsolutePath());\n        byte[] content = contentResolver.getContent(\"org/settings4j/contentresolver/HelloWorld.txt\");\n        assertNotNull(content);\n        assertEquals(\"Hello World\", new String(content, \"UTF-8\"));\n        content = contentResolver.getContent(\"file:org/settings4j/contentresolver/HelloWorld.txt\");\n        assertNotNull(content);\n        assertEquals(\"Hello World\", new String(content, \"UTF-8\"));\n        content = contentResolver.getContent(\"file:/org/settings4j/contentresolver/HelloWorld.txt\");\n        assertNotNull(content);\n        assertEquals(\"Hello World\", new String(content, \"UTF-8\"));\n        content = contentResolver.getContent(\"file:laksjdhalksdhfa\");\n        assertNull(content);\n        content = contentResolver.getContent(\"/org/settings4j/contentresolver/HelloWorld.txt\");\n        assertNotNull(content);\n        assertEquals(\"Hello World\", new String(content, \"UTF-8\"));\n    }\n", "label": 0, "substitutes": {"index": ["evaluate", "build", "search", "xx", "scan", "suggest", "address", "blog", " indexed", "show", "print", "process", "author", "update", "service", "Index", "open", "review", "se", "view", "access", "query", "node", "write", "html", "link", "insert", "connect", "parse", "create", "read", "download", "tree", "document", "ind", " ingest", "image", "version", "execute", "list", "find", " Index", "display", "archive", " analyse"], "url": ["build", "sl", "path", "address", "lr", "gl", "fl", "log", "Url", "p", "str", "nl", "resource", "mail", "kl", "b", "char", "browser", "t", "loader", "ls", "r", "dl", "pl", "ll", "https", "ssl", "link", "location", "html", "uri", "server", "rel", "URL", "web", "base", "cl", "loc", "get", "ur", "user", "github", "cert", "impl", "ml", "un", "bel", "hl", "http", "www", "util", "rl", "addr", "mount", "el", "l", "xml", "au", "il", "ref", "org", "lb", "ul"], "in": ["mc", "file", "en", "io", "asin", "is", "inf", "po", "t", "up", "cin", "conf", "from", "inv", "r", "ini", "IN", "inc", "i", "inner", "m", "ar", "on", "o", "as", "s", "er", "out", "din", "input", "isin", "ind", "min", "gin", "ain", "In", "ins", "rin", "sum", "xml", "it", "l", "bin", "pc", "con", "inn"], "contentType": ["conditionFormat", "ContentCode", "ontentType", " contentTypes", "ContentTypes", "contentLength", "documentTypes", "conditionTyp", "contenttype", "Contenttype", "conditionType", "ontenttype", "commentType", "contentCode", "conditionStyle", "contentTypes", " contentCode", "contentFormat", "documentLength", "contentTyp", "commentTyp", " contentLength", "ContentLength", " contentFormat", "ontentLength", " contenttype", " contentStyle", "documentType", "ContentType", " contentTyp", "documentCode", "ontentTypes", "contentStyle", "commentStyle", "commentFormat"], "pageContent": ["PageContent", "articleContents", "pagecontent", "profileContext", "pixelCa", "articleSync", "serverContext", "articlecontent", "serverContents", "pagesContent", "articleContent", " pageSync", " pageContext", "contentContent", " pageConn", " pagecontent", "pixelContent", "pixelOne", "pageAuth", "profileContents", "articleAuth", "articleComment", " pageContents", " pageCa", " pageOne", "pageConn", "pageCa", "wikicontent", " pageAuth", "resultConn", "serverComment", "pageCode", "pageContext", "pageOne", " pageCode", "profileComment", "resultCode", "contentContents", "Pagecontent", "profileContent", "pageContents", "resultContent", "contentComment", "pixelcontent", "wikiCa", "wikiOne", "resultContents", "wikiContent", "serverContent", " pageComment", "PageAuth", "pageComment", "contentSync", "pagesConn", "pageSync", "PageContents", "pagesContents", "pagesCode"], "redireccion": ["redirepcison", "redoreccison", "redirecedension", "redorecions", "redIREcciton", "redileccion", "redirecedion", "redirecciton", "redorecison", "redIREccION", "redoreccION", "redoreccions", "redirebciton", "redilencion", "redirequestiton", "redireccao", "redirecions", "redorecion", "redilencension", "redirecsions", "redirebcison", "redilecciton", "redIREnciton", "redirebcao", "redireccension", "redirencao", "redirecsION", "redirecsao", "redoreccion", "redireccions", "redirecsison", "redileccension", "redirecison", "redirencion", "redirecsion", "redirencension", "redirecedison", "redirepcion", "redirecION", "redirencison", "redireccION", "redirepcION", "redIREncion", "redIREncison", "redilencison", "redilenciton", "redilencao", "redirencION", "redorecION", "redileccison", "redirepcions", "redirecsension", "redIREccion", "redirequestion", "redirecion", "redIREncION", "redireccison", "redirequestION", "redIREccison", "redirebcion", "redirenciton", "redirecediton", "redirecsiton", "redirequestison", "redileccao"], "doc": ["d", "dec", "dr", "pdf", "log", "file", "DOC", "po", "st", "t", "nt", "msg", "content", "good", "html", "m", "md", "article", "Doc", "def", "page", "out", "db", "exp", "mk", "dc", "document", "tree", "cam", "pic", "coll", "xml", "df", "it", "ent", "tx", "de", "oc", "Document", "mat", "word"]}}
{"id1": "23161545", "id2": "5399593", "code1": "    private void getRandomGUID(boolean secure) {\n        MessageDigest md5 = null;\n        StringBuffer sbValueBeforeMD5 = new StringBuffer();\n        try {\n            md5 = MessageDigest.getInstance(\"MD5\");\n        } catch (NoSuchAlgorithmException e) {\n            System.out.println(\"Error: \" + e);\n        }\n        try {\n            long time = System.currentTimeMillis();\n            long rand = 0;\n            if (secure) {\n                rand = mySecureRand.nextLong();\n            } else {\n                rand = myRand.nextLong();\n            }\n            sbValueBeforeMD5.append(s_id);\n            sbValueBeforeMD5.append(\":\");\n            sbValueBeforeMD5.append(Long.toString(time));\n            sbValueBeforeMD5.append(\":\");\n            sbValueBeforeMD5.append(Long.toString(rand));\n            valueBeforeMD5 = sbValueBeforeMD5.toString();\n            md5.update(valueBeforeMD5.getBytes());\n            byte[] array = md5.digest();\n            StringBuffer sb = new StringBuffer();\n            for (int j = 0; j < array.length; ++j) {\n                int b = array[j] & 0xFF;\n                if (b < 0x10) sb.append('0');\n                sb.append(Integer.toHexString(b));\n            }\n            valueAfterMD5 = sb.toString();\n        } catch (Exception e) {\n            System.out.println(\"Error:\" + e);\n        }\n    }\n", "code2": "    public synchronized String encrypt(String plaintext) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n        MessageDigest md = null;\n        md = MessageDigest.getInstance(\"SHA\");\n        md.update(plaintext.getBytes(\"UTF-8\"));\n        byte raw[] = md.digest();\n        String hash = (new BASE64Encoder()).encode(raw);\n        return hash;\n    }\n", "label": 1, "substitutes": {"getRandomGUID": ["getRandUuid", "getRandGuid", "getRandomUID", "getRandomUUID", "getRandomSUID", "getRandomUuid", "getRandUID", "getRandomGuid", "getRandGid", "getRandGID", "getRandomSid", "getRandUid", "getRandomCuid", "getRandUUID", "getRandomCid", "getRandomCUID", "getRandomGid", "getRandomUid", "getRandomSID", "getRandomGID", "getRandomCID", "getRandGUID", "getRandomSuid"], "secure": ["sec", " securely", "sr", "secret", "force", "nice", "dirty", "stable", " Secure", "service", "weak", "Secure", "strong", "safe", "trust", "status", "https", "ssl", "clear", "confirmed", "security", "google", "prime", "server", "encrypted", "quiet", "active", "ie", "protect", "pretty", "client", "sync", "sys", "http", "sensitive", " insecure"], "md5": ["MD2", "MD512", " md512", "md4", " mdle", "md45", "md6", "MDle", "sha3", " md3", "digle", "dig5", "MD5", "metadata3", " md2", "sha2", "sha512", "MD45", " md6", "MD3", "sha6", "md2", "dig4", "MD4", "mdle", " md45", "md512", "metadata5", "metadata2", "dig3", "sha5", " md4", "md3", "MD6", "metadata45"], "sbValueBeforeMD5": ["sbValueBeforeIM5", "sbValueAfterND2", "sbValueBeforeMD65", "sbValueBeforeMP5", "sbValueBeforeIM1", "sbValueAfterMD2", "sbValueBeforeMD1", "sbValueAfterMDson", "sbValueBeforemdFound", "sbValueBeforeDD512", "sbValueBeforeDS512", "sbValueBeforeLM2", "sbValueBeforeOLD512", "sbValueWithoutDD512", "sbValueBeforeMD512", "sbValueBeforemd5", "sbValueBeforeMT2", "sbValueBeforeDD2", "sbValueBeforeMACFive", "sbValueBeforeMOD3", "sbValueAfterMD4", "sbValueBeforeOLD2", "sbValueBeforeMP2", "sbValueBeforeAMDFound", "sbValueWithoutMD2", "sbValueWithoutMD5", "sbValueBeforemd2", "sbValueBeforeLM512", "sbValueBeforeIM2", "sbValueBeforeMD3", "sbValueAfterND5", "sbValueAfterND4", "sbValueBeforeMS5", "sbValueAfterMDLeft", "sbValueBeforeMPLeft", "sbValueBeforeND4", "sbValueBeforemdson", "sbValueAfterMD65", "sbValueBeforeMDFive", "sbValueBeforeMOD5", "sbValueWithoutDD5", "sbValueBeforeMDLeft", "sbValueBeforeMT5", "sbValueWithoutMD512", "sbValueBeforeMDFound", "sbValueBeforeMAC65", "sbValueAfterMD5", "sbValueBeforeMTson", "sbValueBeforeMT4", "sbValueBeforeAMDson", "sbValueBeforeMS3", "sbValueAfterMDFive", "sbValueBeforeMDson", "sbValueBeforeMD4", "sbValueAfterNDson", "sbValueAfterMD3", "sbValueBeforeMS1", "sbValueBeforeMS2", "sbValueBeforeND2", "sbValueBeforeMP1", "sbValueBeforeMAC5", "sbValueAfterMD1", "sbValueBeforeSM2", "sbValueBeforeMOD2", "sbValueBeforeAMD2", "sbValueBeforeSMson", "sbValueBeforeDD5", "sbValueAfterMDFound", "sbValueBeforeMAC2", "sbValueBeforeMD2", "sbValueBeforeLM5", "sbValueBeforeDDFive", "sbValueBeforeSM4", "sbValueBeforeOLD5", "sbValueWithoutDD2", "sbValueBeforeIMLeft", "sbValueBeforeDD65", "sbValueBeforeNDson", "sbValueBeforeAMD5", "sbValueBeforeSM5", "sbValueBeforeMOD1", "sbValueBeforeND5", "sbValueBeforeDS2", "sbValueBeforeDS5"], "time": ["system", "race", "when", "TIME", "id", "timer", "length", "timeout", "t", "start", "history", "current", "total", "runtime", "work", "age", "ts", "clock", "rate", "estamp", "duration", "times", "set", "counter", "date", "est", "user", "ime", "frame", "Time", "name", "tim", "today", "client", "hour", "etime", "value", "top", "ty", "year", "now", "size"], "rand": ["seed", "sample", "dr", "rid", "quant", "id", "mid", "uid", "std", "hash", "z", "nt", "did", "roll", "nd", "frac", "sid", "inv", "gz", "gen", "r", "rev", "range", "ng", "sam", "red", "rate", "res", "rank", "rh", "rss", "cr", "gt", "rot", "round", "serial", "rd", "init", "rt", "pid", "reg", "random", "rad", "dist", "and", "rc", "pick", "grad", "Rand"], "valueBeforeMD5": ["valueBeforeMD2", "valueAfterMD2", "valueAfterMD7", "valueAfterND2", "valueBeforeMC7", "valueAfterND7", "valueBeforeMOD5", "valueBeforeMT5", "valueBeforeMOD2", "valueBeforeMT2", "valueBeforeMD25", "valueBeforeMD7", "valueBeforeMC25", "valueBeforeND3", "valueBeforeND7", "valueAfterMD3", "valueBeforeMT25", "valueBeforeMOD7", "valueBeforeMC5", "valueBeforeND5", "valueAfterND5", "valueBeforeND2", "valueAfterND3", "valueBeforeMD3", "valueBeforeMOD3", "valueBeforeMT3", "valueBeforeMC2", "valueBeforeMC3"], "array": ["sample", "address", "batch", "number", "binary", "var", "pair", "ash", "angle", "length", "map", "hash", "angular", "arr", "row", "audio", "arrow", "record", "attribute", "storage", "external", "range", "a", "instance", " Array", "area", "ray", "expression", "feature", "buffer", "vector", "ary", "Array", "app", "raw", "RAY", "av", "atomic", "object", "random", "data", "our", "image", "list", "response", "rays", "share", "sh", "archive", "collection"], "sb": ["sr", "sq", "pb", "lp", "sw", "nb", "bt", "bg", "rb", "kb", "ctrl", "sg", "rob", "bb", "hs", "si", "obs", "sa", "bh", "ssl", "xb", "bis", "ib", "bps", "sf", "sth", "erb", "bs", "abb", "eb", "db", "wb", "bsp", "ub", "soc", "sv", "bf", "zb", "cb", "bp", "ob", "gc", "gb", "sh", "SB", "lb"], "j": ["js", "ji", "v", "ju", "jj", "aj", "dj", "str", "J", "k", "obj", "t", "z", "msg", "__", "ja", "_", "index", "i", "kj", "jo", "m", "je", "oj", "yy", "br", "ct", "job", "jp", "jump", "jack", "q", "jit", "ind", "jc", "ij", "att", "uj", "key", "jl", "ix", "us", "json", "g", "it", "bj", "off", "bot"], "b": ["d", "ba", "v", "bound", "bar", "nb", "bt", "bg", "be", "k", "bu", "rb", "ab", "bb", "a", "xb", "ib", "bis", "B", "fb", "br", "bs", "db", "eb", "u", "bd", "bf", "bp", "cb", "bi", "mb", "beta", "gb", "y", "bc"], "valueAfterMD5": ["valueBeforeMD2", "valueAfterMD2", "valueAfterMD7", "valueAfterID2", "valueAfterID5", "valueAfterID3", "valueBeforeMD7", "valueAftermd5", "valueAfterMD3", "valueAftermd2", "valueAfterID7", "valueBeforeMD3", "valueAftermd7", "valueAftermd3"]}}
{"id1": "20991673", "id2": "12242903", "code1": "    public NodeId generateTopicId(String topicName) {\n        MessageDigest md = null;\n        try {\n            md = MessageDigest.getInstance(\"SHA\");\n        } catch (NoSuchAlgorithmException e) {\n            System.err.println(\"No SHA support!\");\n        }\n        if (m_ready) System.out.println(\"Scribe is ready at\" + getNodeId() + \" , topic is \" + topicName);\n        md.update(topicName.getBytes());\n        byte[] digest = md.digest();\n        NodeId newId = new NodeId(digest);\n        return newId;\n    }\n", "code2": "    private String hashKey(String key) {\n        String hashed = \"\";\n        try {\n            MessageDigest md5 = MessageDigest.getInstance(\"MD5\");\n            md5.update(key.getBytes());\n            BigInteger hash = new BigInteger(1, md5.digest());\n            hashed = hash.toString(16);\n        } catch (Exception ex) {\n            ex.printStackTrace();\n            hashed = String.valueOf(key.hashCode());\n        }\n        return hashed;\n    }\n", "label": 1, "substitutes": {"generateTopicId": ["generatesTopicDir", "generateNodeID", "generateNodeDir", "generateThreadName", "generateTransactionId", "generateTransactionID", "generateTopicID", "generatesNodeId", "generateThreadDir", "generateThreadID", "generateTransactionDir", "generateNodeId", "generatesTopicId", "generatesNodeName", "generatesTopicName", "generateTopicName", "generateNodeName", "generateThreadId", "generatesNodeID", "generateTopicDir", "generatesTopicID", "generatesNodeDir", "generateTransactionName"], "topicName": ["TopicData", "Topicname", "opicInfo", " topicFamily", "topicData", "topicKey", "topicname", "threadKey", "messageInfo", "opicFamily", "threadname", "opicData", "threadData", "threadName", "messageNames", "opicName", " topicKey", "messageName", "topicNames", " topicname", " topicData", " topicInfo", "topicInfo", "TopicNames", "TopicName", "TopicInfo", "TopicKey", " topicNames", "messagename", "topicFamily", "TopicFamily"], "md": ["mac", "mc", "d", "dr", "pdf", "pd", "mt", "ld", "mod", "di", "hash", "med", "sm", "msg", "de", " mc", "ng", "red", "det", "m", "ms", "ma", "dd", "sd", "mand", "rm", "alg", "hd", "dig", "M", "mm", "ind", "cd", "mk", "od", "me", "bd", "mg", "mn", "sha", "dm", "metadata", "mp", "bf", "der", "dh", "df", "mb", "cmd", "grad", "MD", " Md", "ME"], "digest": ["Digressed", "designEST", "candested", "digested", " digEST", "Diggest", "Digested", "hashEST", "DigEST", "digressed", "Digest", "digests", "designest", "candressed", " digested", "digEST", "signidate", "diggest", "decidate", "decest", "digidate", "decests", "designested", "hashest", "signested", " digressed", "Digests", "signests", "candest", "candEST", "hashgest", "signest", "decested", "hashested", "designgest", "Digidate"], "newId": ["nodeId", " newid", "newid", "nextId", "newsById", "Newid", "nodeMid", "nextById", "newsId", " newMid", "NewMid", "nodeById", "nextid", "newsid", "newsMid", "nextMid", "newMid", "NewId", "nodeid", " newById", "NewById", "newById"]}}
{"id1": "22993368", "id2": "8953394", "code1": "    public static boolean decodeFileToFile(String infile, String outfile) {\n        boolean success = false;\n        java.io.InputStream in = null;\n        java.io.OutputStream out = null;\n        try {\n            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);\n            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n            byte[] buffer = new byte[65536];\n            int read = -1;\n            while ((read = in.read(buffer)) >= 0) {\n                out.write(buffer, 0, read);\n            }\n            success = true;\n        } catch (java.io.IOException exc) {\n            exc.printStackTrace();\n        } finally {\n            try {\n                in.close();\n            } catch (Exception exc) {\n            }\n            try {\n                out.close();\n            } catch (Exception exc) {\n            }\n        }\n        return success;\n    }\n", "code2": "    private void update(String statement, SyrupConnection con, boolean do_log) throws Exception {\n        Statement s = null;\n        try {\n            s = con.createStatement();\n            s.executeUpdate(statement);\n            con.commit();\n        } catch (Throwable e) {\n            if (do_log) {\n                logger.log(Level.INFO, \"Update failed. Transaction is rolled back\", e);\n            }\n            con.rollback();\n        }\n    }\n", "label": 0, "substitutes": {"decodeFileToFile": ["decodeString2Files", "decodeFileToFiles", "decodeFileFilefile", "decodeFileFileString", "decodeString2String", "decodeString2file", "decodeFile2Files", "decodeStringToFile", "decodeFileTofile", "decodeFileFileFile", "decodeFileAsString", "decodeFile2File", "decodeStringTofile", "decodeFile2String", "decodeFileAsFiles", "decodeFileToString", "decodeFileFileFiles", "decodeString2File", "decodeFile2file", "decodeFileAsFile", "decodeFileAsfile", "decodeStringToString", "decodeStringToFiles"], "infile": ["Inbase", "fromfilename", "outfolder", "Infile", "inputFile", "outbase", "InFile", "isinname", "fromFile", "inputname", "inputfile", "inFile", "inname", "outfilename", "infolder", "isinfile", "infilename", "isinfolder", "frombase", "Infilename", "inputfolder", "isinFile", "fromfile", "outFile", "outname", "inbase"], "outfile": ["outFILE", "inFILE", "outdir", "todir", " outFILE", "otname", "tofilename", " outname", "Outdir", "otFILE", "otfile", "inFile", "inname", "outfilename", "otFile", "tofile", "indir", "Outfilename", "outFile", "outname", "Outfile", "OutFile", " outFile", "toFile", "infilename"], "in": ["pin", "en", "by", "id", "is", "inf", "t", "per", "up", "al", "cin", "from", "re", "ini", "IN", "inc", "i", "inner", "inside", "ar", "on", " din", "amin", "iter", "form", "din", "conn", "get", "oin", "init", "input", "isin", "ind", "gin", "source", "In", "or", "im", "ins", "rin", "it", "info", "bin", "nin", "ain", "con", "inn"], "out": ["os", "outs", "at", "file", "en", "OU", "io", "print", "b", "t", "ot", "nt", "ion", "aos", "output", "flush", "ex", "n", "to", "null", "write", "inner", "res", "auto", "gt", "on", "outer", "o", "opt", "net", "end", "oss", "cn", "writer", "fn", "sys", "OUT", "Out", "it", "g", "ou", "ne", "can", "co", "con"], "buffer": ["black", "sample", "batch", "number", "binary", "sequence", "variable", "append", "bar", "print", "history", "row", "stack", "phrase", "total", "attribute", "button", "view", "library", "block", "mem", "bone", "base", "note", "initial", "padding", "table", "message", "buff", "paste", "column", "frame", "template", "document", "comment", "memory", "password", "header", "pad", "shape", "window", "cache", "character", "info", "available", "buf", "Buffer", "temp", "display", "command"], "read": ["text", "allow", "send", "first", "print", "before", "length", "count", "start", "select", "skip", "run", "open", "reader", "len", "index", "range", "n", "check", "query", "write", "i", "ok", "close", "wait", "through", "iter", "set", "connect", "end", "each", "get", "READ", "reads", "raw", "req", "push", "input", "ind", "seek", "shift", "readable", "load", "reading", "give", "add", "Read", "ready", "need", "hold", " Read", "stream", "find", "size"], "success": ["submit", "first", "please", " failure", "ratulations", "crit", " succeeds", "unity", "exist", "growth", "complete", "town", "Success", "primary", "good", "successfully", "snap", "safe", "scope", "condition", "cess", "ok", "status", "release", "summary", "valid", "city", "accept", "sufficient", "positive", " successful", "result", "fail", "ccess", "danger", "commit", "second", "support", "setup", "successful", " successes", " okay", "error", "ceed", "photo", " succ", "same", "democracy", "done", "value", "response", " succeed", "continue", "surv"]}}
{"id1": "15896098", "id2": "1097147", "code1": "    public String getSHA256Checksum(String source) {\n        String checksum = \"\";\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n            md.update(source.getBytes());\n            byte[] byteData = md.digest();\n            StringBuffer sb = new StringBuffer();\n            for (int i = 0; i < byteData.length; i++) {\n                sb.append(Integer.toString((byteData[i] & 0xff) + 0x100, 16).substring(1));\n            }\n            System.out.println(\"Hex format : \" + sb.toString());\n            StringBuffer hexString = new StringBuffer();\n            for (int i = 0; i < byteData.length; i++) {\n                String hex = Integer.toHexString(0xff & byteData[i]);\n                if (hex.length() == 1) {\n                    hexString.append('0');\n                }\n                hexString.append(hex);\n            }\n            checksum = hexString.toString();\n        } catch (NoSuchAlgorithmException ex) {\n            Logger.getLogger(CMessageDigestFile.class.getName()).log(Level.SEVERE, null, ex);\n        }\n        return checksum;\n    }\n", "code2": "    public static String getMessageDigest(String[] inputs) {\n        if (inputs.length == 0) return null;\n        try {\n            MessageDigest sha = MessageDigest.getInstance(\"SHA-1\");\n            for (String input : inputs) sha.update(input.getBytes());\n            byte[] hash = sha.digest();\n            String CPass = \"\";\n            int h = 0;\n            String s = \"\";\n            for (int i = 0; i < 20; i++) {\n                h = hash[i];\n                if (h < 0) h += 256;\n                s = Integer.toHexString(h);\n                if (s.length() < 2) CPass = CPass.concat(\"0\");\n                CPass = CPass.concat(s);\n            }\n            CPass = CPass.toUpperCase();\n            return CPass;\n        } catch (NoSuchAlgorithmException e) {\n            throw new IllegalStateException(e.getMessage());\n        }\n    }\n", "label": 1, "substitutes": {"getSHA256Checksum": ["getSHA256Chechecksum", "getSHA256Checkchecksume", "getSHA256Checkcksums", "getSHA256Checsam", "getSHA256Chechecksam", "getSHA256Chechecksume", "getSHA256Checkum", "getSHA256Checkcksam", "getSHA256Checsum", "getSHA256Checksam", "getSHA256Checkchecksums", "getSHA256Chechecksums", "getSHA256Checsums", "getSHA256Checkchecksum", "getSHA256Checkcksume", "getSHA256Checkume", "getSHA256Checksume", "getSHA256Checkam", "getSHA256Checksums", "getSHA256Checkcksum", "getSHA256Checsume", "getSHA256Checkchecksam", "getSHA256Checkums"], "source": ["text", "seed", "sample", "secret", "subject", "path", "string", "file", "sequence", "src", "in", "context", "SOURCE", "from", "target", "style", "filename", "url", "output", "content", "ource", "status", "base", "reason", "buffer", "Source", "message", "s", "out", "raw", "format", "input", "name", "template", "data", "value", "image", "this", "body"], "checksum": ["checksumb", "cksum", "cssum", "ckssum", "checkume", " checksums", " checkssum", "csum", "checkum", "checksume", " checksumb", " checksim", "checkssum", "cksumb", "checkim", "checksums", "cksums", "cksim", " checksume", "csim", "checkumb", "cksume", "csume", "checkums", "checksim"], "md": ["mc", "d", "dr", "pdf", "pd", "ld", "mt", "mod", "mo", "di", " MD", "sm", "nt", "red", "det", "ad", "m", "down", "pm", "def", "sd", "ms", "dd", "mand", "hd", "mm", "ind", "mk", "cd", "od", "bd", "mg", "mn", "dm", "Cmd", "mp", "der", "dh", "df", "mb", "cmd", "grad", "MD", " Md", "wd"], "byteData": ["bytesDATA", " byteList", " byteBytes", "ByteData", "reverseCount", "sliceDat", " byteDat", "ioDATA", " byteArray", "routeDat", "routeCount", " byteParts", "bytesData", "byteArray", "byteParts", "bleData", "ByteBytes", "byteDat", "ioData", "wordDATA", "bledata", " byteRel", "ioDat", "sliceData", "phraseParts", "wordBytes", "reverseDATA", "phraseData", "byteList", "bytesArray", "ioList", "byteCount", " byteDATA", "channelRel", "ByteParts", "byteRel", "bytesBytes", "channelParts", "routeData", "ByteDATA", "bytedata", "bleParts", "phraseDATA", " byteCount", "sliceDATA", "byteDATA", "reverseDat", " bytedata", "phraseBytes", "wordData", "byteBytes", "wordArray", "bleRel", "channeldata", "routeDATA", "reverseData", "sliceList", "channelData"], "sb": ["sq", "pb", "SF", "lp", "sw", "sbm", "nb", "b", "bt", "bg", "sm", "rb", "kb", "sg", "bb", "si", "shell", "obb", "sam", "bash", "bh", "xb", "sa", "ib", "ssl", "bis", "sf", "bps", "erb", "bs", "sp", "eb", "db", "bsp", "ub", "sv", "bf", "zb", "cb", "ob", "mb", "bj", "wb", "gb", "sh", "SB", "lb"], "i": ["I", "iq", "point", "print", "ini", "iy", "ci", "m", "gu", "qi", "list", "ix", "json", "ui", "this", "er", "y", "err", "ic", "gi", "io", "ion", "\u0438", "phi", "oi", "ri", "mi", "iu", "cli", "ims", "o", "loop", "set", "ms", "series", "client", "major", "me", "chain", "ip", "ti", "li", "id", "my", "history", "ity", "si", "to", "pi", "multi", "init", "ime", "ind", "ei", "ij", "im", "ai", "sim", "l", "it", "hi", "bi", "ji", "any", "di", "ki", "remote", "ii", "j", "ski", "life", "uri", "q", "xi", "ie", "u", "g", "info"], "hexString": ["hexstring", "shortResource", "htmlString", "shortstring", "htmlBuffer", "shortArray", "fullBuffer", "hexBuffer", "exstring", "exStore", " hexBuffer", " HexString", "fullString", "hashBuffer", "hashstring", " hexStore", "hashArray", "fullstring", "shortString", " hexstring", " hexResource", " Hexstring", " HexBuffer", "htmlArray", "exBuffer", "hexResource", " hexArray", "htmlstring", "exString", "shortBuffer", " HexResource", "hashString", "fullStore", "exArray", "hexArray", "hexStore"], "hex": ["sex", "solid", "h", "alph", "des", "tex", "term", "zh", "pex", "cat", "rex", "rendered", " Hex", "mix", "prop", "oct", "he", "ex", "ext", "rh", "alias", "html", "ph", "dump", "def", "form", "com", "comp", "raw", "none", "exp", " ex", "hl", "x", "cont", " sex", "hello", "lit", "json", "tx", "full", "php", "temp", "sh", "flash"]}}
{"id1": "11484416", "id2": "884867", "code1": "    private void moveFile(File orig, File target) throws IOException {\n        byte buffer[] = new byte[1000];\n        int bread = 0;\n        FileInputStream fis = new FileInputStream(orig);\n        FileOutputStream fos = new FileOutputStream(target);\n        while (bread != -1) {\n            bread = fis.read(buffer);\n            if (bread != -1) fos.write(buffer, 0, bread);\n        }\n        fis.close();\n        fos.close();\n        orig.delete();\n    }\n", "code2": "    public static void main(String[] args) {\n        if (args.length != 1) {\n            System.out.println(\"Usage: GZip source\");\n            return;\n        }\n        String zipname = args[0] + \".gz\";\n        GZIPOutputStream zipout;\n        try {\n            FileOutputStream out = new FileOutputStream(zipname);\n            zipout = new GZIPOutputStream(out);\n        } catch (IOException e) {\n            System.out.println(\"Couldn't create \" + zipname + \".\");\n            return;\n        }\n        byte[] buffer = new byte[sChunk];\n        try {\n            FileInputStream in = new FileInputStream(args[0]);\n            int length;\n            while ((length = in.read(buffer, 0, sChunk)) != -1) zipout.write(buffer, 0, length);\n            in.close();\n        } catch (IOException e) {\n            System.out.println(\"Couldn't compress \" + args[0] + \".\");\n        }\n        try {\n            zipout.close();\n        } catch (IOException e) {\n        }\n    }\n", "label": 1, "substitutes": {"moveFile": ["copyfile", "movefile", " moveImage", "copyFile", "MoveFile", "MoveDirectory", "copyImage", "MoveImage", "moveDirectory", " movefile", "copyDirectory", " moveDirectory", "moveImage", "Movefile"], "orig": [" ORIG", "created", "cur", "proxy", "ret", "src", "clip", "old", "was", "internal", "dest", "imp", "prop", "temp", "original", "copy", "inv", "existing", "act", "good", "ex", "Original", "img", "Orig", "ord", "base", "iter", "def", "raw", "tmp", "init", "create", "ie", "exp", "lim", "dom", "im", "Origin", "or", "rc", "ra", "ip", "ori", "origin", "coord", "org", " original"], "target": ["local", "mac", "build", "path", "match", "file", "ret", "Target", "parent", "replace", "src", "test", "t", "dest", "output", "copy", "null", "goal", "gt", "rel", "base", "tile", "table", "format", "out", "tmp", "touch", "png", "template", "sys", "arget", "source", "top", "it", "next", "origin"], "buffer": ["sample", "bytes", "batch", "filter", "binary", "sequence", "variable", "bar", "queue", "print", "length", "char", "face", "history", "bridge", "stack", "phrase", "limit", "bb", "output", "attribute", "button", "block", "mem", "scroll", "base", "engine", "iter", "table", "screen", "buff", "message", "page", "paste", "read", "document", "line", "comment", "bank", "data", "memory", "password", "chain", "header", "window", "cache", "available", "buf", "Buffer", "stream", "display", "command"], "bread": ["iber", "print", "fee", "bridge", "fred", "bb", "knife", "middle", "rown", "good", "blow", "gear", "web", "READ", "rik", "brew", "bel", " ribs", "uckle", "give", "don", "inn", "rew", "broken", "brow", "bush", "cake", "stay", "shield", "wei", "eb", "read", "neum", "bishop", "bn", "robe", "rain", "log", "fine", "billion", "lf", "level", "boat", "fan", "jing", "scroll", "piece", " barely", "ig", "ful", "beat", "bill", "nob", "spoken", "bi", "bc", " Bread", "bad", "eric", "bird", "leen", "bold", "beck", " breadth", "score", "oug", "four", "wake", "bled", "ble", "corruption", "crafted", "less"], "fis": ["Fos", "bos", "li", "ufis", "di", "biss", "fris", "fia", "liss", " fiss", " fi", "fiss", "Fis", " fris", "bis", "dis", "frei", "ufos", "los", "lis", "freia", "Fiss", "ufris", " fia", "Fris", "fi", "freis", "ufiss", "dia", "bi"], "fos": ["toos", "ooes", "Fos", "oos", "eis", "poes", "vus", "eos", " foes", "oot", "ooses", "eoos", "Foses", "fot", "foes", "tos", "Foos", "eoes", "vos", "Fis", "Foes", "voes", "Fot", " fot", " foses", "foos", " fus", " foos", "poos", "fus", "tis", "toes", "foses", "pos", "voos", "pus"]}}
{"id1": "13565787", "id2": "10540676", "code1": "    public static String encryptPassword(String plainPassword) {\n        StringBuffer sb = new StringBuffer();\n        try {\n            MessageDigest messageDigest = MessageDigest.getInstance(\"MD5\");\n            messageDigest.update(plainPassword.getBytes());\n            byte[] digestBytes = messageDigest.digest();\n            String hex = null;\n            for (int i = 0; i < digestBytes.length; i++) {\n                hex = Integer.toHexString(0xFF & digestBytes[i]);\n                if (hex.length() < 2) sb.append(\"0\");\n                sb.append(hex);\n            }\n        } catch (Exception ex) {\n            System.out.println(ex.getMessage());\n        }\n        return new String(sb);\n    }\n", "code2": "    public static void checkForUpgrade(Event event) throws Exception {\n        ((Component) UiUtil.findComponent(\"downloadUpgrade\")).setVisible(false);\n        ((Component) UiUtil.findComponent(\"applyUpgrade\")).setVisible(false);\n        ((Component) UiUtil.findComponent(\"restartRequiredHbox\")).setVisible(false);\n        ((Component) UiUtil.findComponent(\"restartRequiredAlert\")).setVisible(false);\n        new Command(\"DELETE FROM TBLINSTALLATION WHERE STATUS<>'APPLIED'\").executeNonQuery();\n        String clientAppliedVersion = new Command(\"SELECT MAX(VERSION) FROM TBLINSTALLATION WHERE STATUS='APPLIED'\").executeScalarAsString();\n        if (NullStatus.isNull(clientAppliedVersion)) {\n            clientAppliedVersion = \"20050101\";\n        }\n        String macquery = \"\";\n        String clientMAC = \"\";\n        String clientUNITID = UiUtil.getUNITUID();\n        ArrayList<String> macList = getMacList();\n        for (int i = 0; i < macList.size(); i++) {\n            clientMAC += macList.get(i) + \",\";\n            macquery += \"'\" + macList.get(i) + \"'\";\n            if (i < macList.size() - 1) {\n                macquery += \",\";\n            }\n        }\n        URL urlLICENSEQUERY = new URL(\"http://www.tegsoft.com/Tobe/forms/TobeOS/upgrade/upgrade_current.jsp?tegsoftCLIENTVERSION=\" + clientAppliedVersion + \"&tegsoftCLIENTUNITID=\" + clientUNITID + \"&tegsoftCLIENTMAC=\" + clientMAC + \"&tegsoftCOMMAND=LICENSEQUERY\");\n        URLConnection urlConnection = urlLICENSEQUERY.openConnection();\n        BufferedReader in = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));\n        String commingList = \"\";\n        String line;\n        while ((line = in.readLine()) != null) {\n            commingList += line;\n        }\n        in.close();\n        String licenseArray[] = commingList.split(\"</ROW>\");\n        if (licenseArray.length > 0) {\n            String fields[] = licenseArray[0].split(\"</FLD>\");\n            String STATUS = fields[0];\n            String ERRORMSG = fields[1];\n            if (\"FAIL\".equals(STATUS)) {\n                if (\"NOUNITID\".equals(ERRORMSG)) {\n                    UiUtil.showMessage(MessageType.ERROR, MessageUtil.getMessage(Upgrade.class, Messages.upgrade_1));\n                    return;\n                }\n                if (\"NOCUSTOMER\".equals(ERRORMSG)) {\n                    UiUtil.showMessage(MessageType.ERROR, MessageUtil.getMessage(Upgrade.class, Messages.upgrade_1));\n                    return;\n                }\n                if (\"NOVALIDLICENSE\".equals(ERRORMSG)) {\n                    UiUtil.showMessage(MessageType.ERROR, MessageUtil.getMessage(Upgrade.class, Messages.upgrade_2));\n                    return;\n                }\n                UiUtil.showMessage(MessageType.ERROR, MessageUtil.getMessage(Upgrade.class, Messages.upgrade_3));\n                return;\n            }\n        }\n        Dataset TBLLICENSE = new Dataset(\"TBLLICENSE\", \"TBLLICENSE\");\n        Command command = new Command(\"DELETE FROM TBLLICENSE WHERE UNITUID={UNITUID} AND (NOTES IN (\");\n        command.append(macquery);\n        command.append(\") OR NOTES IS NULL) \");\n        command.executeNonQuery();\n        for (int i = 1; i < licenseArray.length; i++) {\n            String fields[] = licenseArray[i].split(\"</FLD>\");\n            String LICTYPE = fields[0];\n            String UNIQUEKEY = fields[1];\n            String LICKEY = fields[2];\n            DataRow dataRow = TBLLICENSE.addNewDataRow();\n            dataRow.set(\"LICENSENAME\", LICTYPE);\n            dataRow.set(\"LICENSE\", LICKEY);\n            dataRow.set(\"NOTES\", UNIQUEKEY);\n            TBLLICENSE.save();\n        }\n        URL url = new URL(\"http://www.tegsoft.com/Tobe/forms/TobeOS/upgrade/upgrade_current.jsp?tegsoftCLIENTVERSION=\" + clientAppliedVersion + \"&tegsoftCLIENTUNITID=\" + clientUNITID + \"&tegsoftCLIENTMAC=\" + clientMAC);\n        urlConnection = url.openConnection();\n        in = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));\n        String upgradeList = \"\";\n        while ((line = in.readLine()) != null) {\n            upgradeList += line;\n        }\n        in.close();\n        Dataset TBLINSTALLATION = new Dataset(\"TBLINSTALLATION\", \"TBLINSTALLATION\");\n        String upgrades[] = upgradeList.split(\"</ROW>\");\n        if (upgrades.length > 0) {\n            String fields[] = upgrades[0].split(\"</FLD>\");\n            String STATUS = fields[0];\n            String ERRORMSG = fields[1];\n            if (\"FAIL\".equals(STATUS)) {\n                if (\"NOUNITID\".equals(ERRORMSG)) {\n                    UiUtil.showMessage(MessageType.ERROR, MessageUtil.getMessage(Upgrade.class, Messages.upgrade_1));\n                    return;\n                }\n                if (\"NOCUSTOMER\".equals(ERRORMSG)) {\n                    UiUtil.showMessage(MessageType.ERROR, MessageUtil.getMessage(Upgrade.class, Messages.upgrade_1));\n                    return;\n                }\n                if (\"NOVALIDLICENSE\".equals(ERRORMSG)) {\n                    UiUtil.showMessage(MessageType.ERROR, MessageUtil.getMessage(Upgrade.class, Messages.upgrade_2));\n                    return;\n                }\n                UiUtil.showMessage(MessageType.ERROR, MessageUtil.getMessage(Upgrade.class, Messages.upgrade_3));\n                return;\n            }\n        }\n        boolean restartRequired = false;\n        boolean updateAvailable = false;\n        for (int i = 1; i < upgrades.length; i++) {\n            String fields[] = upgrades[i].split(\"</FLD>\");\n            String VERSION = fields[0];\n            String ORDERID = fields[1];\n            String UPGRADETYPE = fields[2];\n            String DESCRIPTION = fields[3];\n            String STATUS = \"UNAPPLIED\";\n            String PRDNAME = \"TegsoftCC\";\n            if (\"TEGSOFTJARS\".equals(UPGRADETYPE) || \"TOBEJARS\".equals(UPGRADETYPE) || \"ALLJARS\".equals(UPGRADETYPE) || \"CONFIGASTERISK\".equals(UPGRADETYPE)) {\n                restartRequired = true;\n            }\n            DataRow dataRow = TBLINSTALLATION.addNewDataRow();\n            dataRow.set(\"ORDERID\", ORDERID);\n            dataRow.set(\"PRDNAME\", PRDNAME);\n            dataRow.set(\"UPGRADETYPE\", UPGRADETYPE);\n            dataRow.set(\"VERSION\", VERSION);\n            dataRow.set(\"STATUS\", STATUS);\n            dataRow.set(\"DESCRIPTION\", DESCRIPTION);\n            TBLINSTALLATION.save();\n            updateAvailable = true;\n        }\n        UiUtil.getDataset(\"TBLINSTALLATION\").reFill();\n        if (restartRequired) {\n            ((Component) UiUtil.findComponent(\"restartRequiredHbox\")).setVisible(true);\n            ((Component) UiUtil.findComponent(\"restartRequiredAlert\")).setVisible(true);\n        }\n        if (updateAvailable) {\n            ((Component) UiUtil.findComponent(\"downloadUpgrade\")).setVisible(true);\n            UiUtil.showMessage(MessageType.INFO, MessageUtil.getMessage(Upgrade.class, Messages.upgrade_4));\n        } else {\n            UiUtil.showMessage(MessageType.INFO, MessageUtil.getMessage(Upgrade.class, Messages.upgrade_5));\n        }\n    }\n", "label": 0, "substitutes": {"encryptPassword": ["encreteString", "decryptPassword", "encryptedString", "encryptionPassword", "decryptString", "encryptString", "encryptpassword", "decryptionpassword", "encryptedpassword", "encretePassword", "decryptionString", "encryptionpassword", "encryptedPassword", "encryptionString", "decryptionPassword", "decryptpassword", "encretepassword"], "plainPassword": ["altPassword", "plainData", "realData", " plainDatabase", "plainText", "coinPassword", "binaryText", "binaryPassword", " plainText", "realPassword", "binaryDatabase", "coinData", " plainData", "coinName", "binaryPost", "plainPost", " plainName", "altPost", "realName", "plainDatabase", "altDatabase", "plainName", "altText", " plainPost"], "sb": ["sq", "pb", "lp", "sbm", "src", "ha", "nb", "b", "bt", "bg", "rb", "ls", "kb", "sg", "ab", "bb", "obb", "sam", "obs", "bh", "sa", "xb", "ib", "sth", "ssl", "sf", "bps", "sk", "fb", "bs", "erb", "sp", "abb", "bm", "eb", "bsp", "sync", "ub", "bd", "sv", "bn", "bf", "zb", "cb", "mb", "bj", "buf", "wb", "gb", "sh", "SB", "lb"], "messageDigest": [" messageDEST", "messagedigests", "messageMDse", "messageDefse", "messageDigested", "messagedigested", "messageDse", "messageHasse", " MessageDefest", "messageDester", "messagedigEST", "messageMDest", " MessageDefests", "messageHasest", "messageDigse", "messageHasests", "messageDesignse", "messageDesignester", "messageDigests", "messageHasester", " MessageDigse", " messageDse", "messageDefest", "messageDigester", " messageDested", "messageDigEST", "messageMDEST", "messageDesignest", "messagedigest", " MessageDefse", " MessageDefester", " MessageDigests", " messageDigester", " MessageDigester", "messageDested", "messageDefests", "messageDefester", " MessageDigest", "messageDEST", "messageMDester", "messageDest", "messageDesignested", " messageDigested", " messageDigEST", " messageDigse", "messagedigse", " messageDester", "messagedigester", " messageDest"], "digestBytes": ["diggestBytes", "dignessBlocks", "diggestByte", "DigESTResults", "digESTDays", "DigestedDays", "digESTBlocks", "digesterbytes", "DigESTbytes", "diggestResults", "digexResults", "digexByte", "diggestDays", "DigestBytes", "digESTResults", "digexDays", "digestedResults", "diggestBlocks", "digESTValues", "DigestResults", "DigESTBytes", "digESTBytes", "digestResults", "digestValues", "digestByte", "digesterValues", "digestedbytes", "DigESTDays", "digestedValues", "dignessbytes", "digestedDays", "digestedBytes", "DigestByte", "digestBlocks", "DigestBlocks", "digESTbytes", "DigestValues", "DigESTBlocks", "digestbytes", "digestedByte", "digesterResults", "Digestbytes", "DigestedByte", "DigestedResults", "DigestedBytes", "DigestDays", "dignessBytes", "digesterBytes", "dignessDays", "digexBytes", "DigESTValues", "digestDays", "diggestbytes"], "hex": ["text", "mac", "cmp", "sex", "solid", "h", "alph", "des", "tex", "term", "str", "pex", "rex", "print", "char", "length", "alpha", "hash", " Hex", "prop", "hs", "copy", "oct", "ex", "null", "rh", "check", "zip", "html", "ph", "bh", "dump", "cf", "def", "form", "com", "iter", "format", "comp", "xf", "utf", "ch", "cert", "kw", "cd", "color", "hid", "hl", "exp", "x", "escape", "chain", "uint", "lit", "json", "it", "hi", "cmd", "tx", "full", "none", "temp", "sh"], "i": ["ti", "v", "ji", "I", "ic", "iq", "li", "id", "gi", "my", "point", "b", "is", "di", "conv", "ii", "z", "in", "\u0438", "j", "phi", "mi", "si", "index", "c", "n", "iu", "a", "pi", "ci", "m", "ims", "cli", "uri", "o", "ma", "multi", "q", "init", "xi", "ie", "ind", "gu", "u", "major", "x", "qi", "im", "me", "key", "ai", "ix", "sim", "ip", "it", "bi", "hi", "ui", "y"]}}
{"id1": "12883117", "id2": "18974466", "code1": "    public PhoneSetImpl(URL url) throws IOException {\n        BufferedReader reader;\n        String line;\n        phonesetMap = new HashMap();\n        reader = new BufferedReader(new InputStreamReader(url.openStream()));\n        line = reader.readLine();\n        lineCount++;\n        while (line != null) {\n            if (!line.startsWith(\"***\")) {\n                parseAndAdd(line);\n            }\n            line = reader.readLine();\n        }\n        reader.close();\n    }\n", "code2": "    protected boolean copyFile(File sourceFile, File destinationFile) {\n        try {\n            FileChannel srcChannel = new FileInputStream(sourceFile).getChannel();\n            FileChannel dstChannel = new FileOutputStream(destinationFile).getChannel();\n            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n            srcChannel.close();\n            dstChannel.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n            return false;\n        }\n        return true;\n    }\n", "label": 0, "substitutes": {"url": ["build", "sl", "address", "log", "file", "Url", "ret", "str", "nl", "b", "char", "browser", "loader", "ls", "dl", "ll", "ssl", "link", "location", "html", "uri", "base", "URL", "web", "loc", "result", "ur", "impl", "name", "util", "bel", "http", "data", "rl", "addr", "mount", "rect", "l", "xml", "domain", "ref", "lb"], "reader": ["master", "force", "lock", "field", "redo", "resource", "length", "test", "latest", "loader", "ner", "method", "context", "row", "Reader", "linger", "mr", "review", "control", "r", "view", "owner", "block", "ro", "inner", "rar", "upper", "console", "volume", "builder", "runner", "uri", "rot", "iterator", "iter", "engine", "book", "buffer", "dd", "READ", "older", "reads", "writer", "read", "parser", "input", "ator", "zero", "loading", "load", "reading", "rl", "finder", "driver", "peer", "proc", "er", "stream", "handler", "entry"], "line": ["text", "ln", "where", "sample", "cell", "string", "lock", "sequence", "log", "ste", "file", "point", "print", "inline", "char", "part", "row", " LINE", "no", "stroke", "record", "phrase", "se", "rule", "range", "block", "node", "check", "status", "piece", "link", "license", "note", "iter", "trace", "normal", "form", "pe", "message", "lin", "page", "command", "none", "ide", "lo", "frame", "liner", "comment", "lines", "lane", "ine", "source", "le", "eline", "one", "chain", "header", "list", "Line", "l", "LINE", "train", "ne", "translation", "stream", "entry", "word"], "phonesetMap": ["phonesonMap", "phonesSetList", " phonessetTree", "phonesSetSet", "phonessetList", " phonessetMap", " phonesetSet", "phonesetList", "phonessetMap", "phonessetSet", "phonesSetMap", " phonessetList", " phonessetSet", "phonesSetTree", "phonesonTree", "phonesonSet", "phonessetTree", "phonesonList", "phonesetTree", " phonesetList", "phonesetSet", " phonesetTree"], "lineCount": ["lineCounter", "LineFlag", "linecount", "Linecount", "rowFlag", "rowcount", " lineFlag", "rowCount", "LineCount", "lineFlag", " lineCounter", "rowCounter", " linecount", "LineCounter"]}}
{"id1": "10728243", "id2": "9081749", "code1": "    private byte[] scramble411(String password, String seed) {\n        MessageDigest md;\n        try {\n            md = MessageDigest.getInstance(\"SHA-1\");\n            byte[] passwordHashStage1 = md.digest(password.getBytes());\n            md.reset();\n            byte[] passwordHashStage2 = md.digest(passwordHashStage1);\n            md.reset();\n            md.update(seed.getBytes());\n            md.update(passwordHashStage2);\n            byte[] toBeXord = md.digest();\n            int numToXor = toBeXord.length;\n            for (int i = 0; i < numToXor; i++) {\n                toBeXord[i] = (byte) (toBeXord[i] ^ passwordHashStage1[i]);\n            }\n            return toBeXord;\n        } catch (NoSuchAlgorithmException e) {\n            if (logger.isLoggable(Level.SEVERE)) {\n                logger.log(Level.SEVERE, e.getMessage(), e);\n            }\n        }\n        return null;\n    }\n", "code2": "    private static String encrypt(String password, String encryptType) {\n        try {\n            MessageDigest md = MessageDigest.getInstance(encryptType);\n            md.update(password.getBytes());\n            byte[] hash = md.digest();\n            StringBuffer hexString = new StringBuffer();\n            for (int i = 0; i < hash.length; i++) {\n                if ((0xff & hash[i]) < 0x10) {\n                    hexString.append(\"0\" + Integer.toHexString((0xFF & hash[i])));\n                } else {\n                    hexString.append(Integer.toHexString(0xFF & hash[i]));\n                }\n            }\n            password = hexString.toString();\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        }\n        return password.toUpperCase();\n    }\n", "label": 1, "substitutes": {"scramble411": ["scramblesPassword", "scambles ", "scramblepassword", "scrambled ", "scamblepassword", "scramble ", "scamblesBasic", "scamblespassword", "scramblesBasic", "scrambledBasic", "scramblePassword", "scramlepassword", "scambleBasic", "scamblesPassword", "scramlePassword", "scramblespassword", "scrambledpassword", "scamble ", "scamblePassword", "scrambleBasic", "scrambles ", "scrambledPassword", "scramle ", "scramleBasic"], "password": ["text", "secret", "address", "description", "string", "remember", "hash", "phrase", "shadow", "Password", "auth", "username", "attribute", "email", "primary", "pattern", "profile", "crypt", "prefix", "padding", "message", "database", "pass", "user", "sword", "data", "reset", "key", "hello", "token", "words", "wd", "word"], "seed": ["sample", " seeds", "sex", "secret", "eder", "sequence", "eed", "Salt", "test", "hash", "start", "needs", "phrase", "shadow", "mix", "index", " seeded", "feed", "prime", "initial", "padding", "vector", "example", "sudo", "create", "setup", "offset", "template", "random", "rand", "source", "reset", "key", "ser", "df", "derived", "sql", "entry", "se"], "md": ["mc", "d", "dr", "rpm", "pdf", "pt", "pd", "mt", "ld", "amd", "mod", "di", "sm", "med", "nt", "managed", "esm", "msg", "de", "nd", "red", "ann", "det", "ad", "img", "m", "desc", "def", "ct", "sd", "ms", "dd", "rd", "mand", "multi", "rm", "td", "hd", "dig", "mm", "ind", "mk", "cd", "mind", "cm", "od", "bd", "mg", "mn", "sha", "dm", "metadata", "mp", "addr", "der", "dh", "pkg", "exec", "df", "pm", "mb", "cmd", "grad", "MD", "gm", "ma"], "passwordHashStage1": ["passwordHashStage5", "passwordhashstage2", "passwordHashSHA01", "passwordHashstage1", "passwordHashPage5", "passwordhashstage1", "passwordHashPhase1", "passwordHashPhase0", "passwordhashstageOne", "passwordhashStage0", "passwordHashPhase2", "passwordHashPage2", "passwordhashstage0", "passwordHashstageOne", "passwordHashPage1", "passwordhashStageOne", "passwordhashStage1", "passwordHashPage0", "passwordHashSHA1", "passwordHashStage0", "passwordHashStageOne", "passwordHashSHA2", "passwordHashPhaseOne", "passwordhashStage2", "passwordHashstage01", "passwordHashstage0", "passwordHashSHA0", "passwordHashStage01", "passwordHashstage5", "passwordHashstage2"], "passwordHashStage2": ["passwordHashStyleTwo", "passwordHashstageTwo", "passwordHashPhase4", "passwordHashstage1", "passwordHashScene2", "passwordHashPhase1", "passwordHashPhaseTwo", "passwordHashStageTwo", "passwordHashPhase2", "passwordHashStyle3", "passwordHashVersion4", "passwordHashStage3", "passwordHashstage4", "passwordSaltStageTwo", "passwordHashStage4", "passwordHashStyle62", "passwordHashVersion2", "passwordSaltStage62", "passwordHashVersion1", "passwordHashVersionTwo", "passwordSaltStage3", "passwordHashScene62", "passwordHashSceneTwo", "passwordHashScene3", "passwordSaltStage2", "passwordHashStyle2", "passwordHashStage62", "passwordHashstage2"], "toBeXord": ["toBEXord", "toBeTxond", "tobeXord", "toBEXod", "toBeZXor", "toBeZord", "toBeZords", "tobeXold", "toBeXLor", "toBeXLords", "toBeYorg", "toBeXond", "tobeYords", "toBeTxorg", "toBeYold", "toBeXod", "toBexond", "toBEXond", "toBeZorg", "toBexor", "tobeYorg", "tobeXords", "toBeYords", "toBeXor", "tobeYold", "tobeYord", "toBeZXords", "toBEXor", "toBeTxord", "toBeXLord", "toBeZXord", "toBexords", "toBeXLod", "toBeXold", "toBexord", "tobeYor", "toBEXords", "toBeYord", "toBeXords", "toBeXorg", "toBexorg", "toBeYor", "toBeTxords", "tobeXorg", "tobeXor", "toBeYod", "toBEXorg", "toBeZor", "toBeZXold"], "numToXor": ["numToXore", "numToxor", "numToYor", "num2Restors", "numToZore", "numtoYord", "numToXOR", "numToYors", "numToxors", "num2RestOR", "numToxore", "numToYOR", "num2Xor", "numtoXOR", "numToXord", "numToZors", "numtoXor", "numToZor", "numtoYors", "numToRestor", "numToZOR", "numToYord", "num2XOR", "num2Xors", "num2Restor", "num2Xore", "numToRestOR", "numToXors", "numtoYor", "numToxOR", "numtoXord", "num2Restore", "numtoYOR", "numToxord", "numToZord", "numToRestors", "numToRestore", "numtoXors"], "i": ["ti", "ji", "I", "batch", "ic", "zi", "sequence", "li", "gi", "io", "is", "di", "e", "t", "ii", "k", "in", "z", "\u0438", "j", "span", "phi", "ri", "mi", "si", "ni", "ex", "n", "ini", "pi", "ci", "m", "cli", "uri", "o", "set", "ms", "s", "multi", "init", "xi", "ie", "ind", "ei", "u", "x", "qi", "im", "ai", "ix", "fi", "sim", "ip", "us", "it", "g", "ui", "bi", "info", "y"]}}
{"id1": "17856064", "id2": "18544890", "code1": "    public static PersistencyParameters parse(String unitName) {\n        URL[] persistenceUnits;\n        try {\n            persistenceUnits = Classpath.search(\"META-INF/\", \"persistence.xml\");\n        } catch (IOException e) {\n            throw new Error(e);\n        }\n        Set classes = new HashSet();\n        for (int i = 0; i < persistenceUnits.length; i++) {\n            URL url = persistenceUnits[i];\n            try {\n                nu.xom.Builder b = new nu.xom.Builder(false);\n                Document d = b.build(url.openStream());\n                Nodes unitNodes = d.getRootElement().query(\"//p:persistence-unit\", new XPathContext(\"p\", \"http://java.sun.com/xml/ns/persistence\"));\n                for (int j = 0; j < unitNodes.size(); j++) {\n                    Node unitNode = unitNodes.get(j);\n                    Element unitElt = ((Element) unitNode);\n                    String uName = unitElt.getAttributeValue(\"name\");\n                    if (!uName.equals(unitName)) continue;\n                    {\n                        PersistencyParameters parameters = new PersistencyParameters();\n                        Nodes classNodes = unitElt.query(\"//p:property\", new XPathContext(\"p\", \"http://java.sun.com/xml/ns/persistence\"));\n                        for (int k = 0; k < classNodes.size(); k++) {\n                            Node classNode = classNodes.get(k);\n                            if (!(classNode instanceof Element)) continue;\n                            Element classElt = (Element) classNode;\n                            String elementName = classElt.getAttribute(\"name\").getValue();\n                            if (elementName.equals(\"eclipselink.jdbc.url\")) {\n                                String elementValue = classElt.getAttribute(\"value\").getValue();\n                                parameters.setJdbcUrl(elementValue);\n                            } else if (elementName.equals(\"eclipselink.jdbc.user\")) {\n                                String elementValue = classElt.getAttribute(\"value\").getValue();\n                                parameters.setDBUserName(elementValue);\n                            } else if (elementName.equals(\"eclipselink.jdbc.password\")) {\n                                String elementValue = classElt.getAttribute(\"value\").getValue();\n                                parameters.setDBPassword(elementValue);\n                            } else if (elementName.equals(\"eclipselink.jdbc.driver\")) {\n                                String elementValue = classElt.getAttribute(\"value\").getValue();\n                                parameters.setDBDriverClassName(elementValue);\n                            }\n                        }\n                        return parameters;\n                    }\n                }\n            } catch (Exception x) {\n                x.printStackTrace();\n                throw new Error(x);\n            }\n        }\n        return null;\n    }\n", "code2": "    public static GameRecord[] get(String url, float lat, float lon, int count) {\n        try {\n            HttpURLConnection req = (HttpURLConnection) new URL(url).openConnection();\n            req.setRequestMethod(\"GET\");\n            req.setRequestProperty(GameRecord.GAME_LATITUDE_HEADER, df.format(lat));\n            req.setRequestProperty(GameRecord.GAME_LONGITUDE_HEADER, df.format(lon));\n            req.setRequestProperty(\"X-GameQueryCount\", String.valueOf(count));\n            req.connect();\n            if (req.getResponseCode() == HttpURLConnection.HTTP_OK) {\n                List<GameRecord> gl = new ArrayList<GameRecord>();\n                BufferedReader br = new BufferedReader(new InputStreamReader(req.getInputStream()));\n                String line;\n                while ((line = br.readLine()) != null) {\n                    if (!line.startsWith(\"#\")) {\n                        gl.add(GameRecord.decode(line));\n                    }\n                }\n                return gl.toArray(new GameRecord[gl.size()]);\n            } else {\n                System.out.println(req.getResponseMessage());\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n", "label": 0, "substitutes": {"parse": [" connect", " params", " info", " constructor", " execute", " compile", " install", " decode", " start", " scan", "se", " class", " schema", " from", " imports", " split", " parsing", " par", " define", " parser", " instance", "parser", " resolve", " ingest", "Parser", " begin", " analyse"], "unitName": ["UnitNAME", " unitNames", "elementString", "uString", "Unitname", " unitType", "documentName", "uType", "documentNAME", "documentname", " unitNAME", "unitType", "elementType", " unitString", "unitname", "elementNAME", "unitNames", " unitname", "documentNames", "unitNAME", "unitString", "uNAME", "UnitName", "UnitNames"], "persistenceUnits": ["persistenceUnITS", "persistentUnites", "persistentUnunits", "persistenceUNets", "persistentUnITS", "persistenceunites", "persistenceUNITS", "persistanceUnes", "persistenceunITS", "persistenceUnins", "persistenceUnes", "persistentunites", "persistenceUins", "persistanceUNes", "persistenceUnets", "persistentunITS", "persistentunins", "persistanceUNites", "persistenceUits", "persistenceUnites", "persistenceUnunits", "persistentUnins", "persistentUnets", "persistenceNits", "persistenceUNes", "persistenceUnitites", "persistanceUNits", "persistentUNets", "persistentUNunits", "persistenceUnitITS", "persistentUNites", "persistentUnits", "persistenceUnitins", "persistenceUets", "persistenceunits", "persistentUNins", "persistanceUnits", "persistanceUNins", "persistenceUes", "persistenceNins", "persistenceUites", "persistenceNites", "persistenceUNits", "persistenceUnitits", "persistenceUNins", "persistenceUNunits", "persistenceUNites", "persistanceUnins", "persistanceUnites", "persistenceUunits", "persistenceNes", "persistentUNits", "persistenceunins", "persistenceNets", "persistentunits"], "classes": ["tests", "resources", " instances", "Class", "results", "packages", "classified", "objects", "modules", "class", "ids", " class", "names", " packages", "parents", " interfaces", "units", " components", " modules", "plugins", "files", "codes", "keys", " collections", "errors", "types", "checked", "values"], "i": ["ti", "I", "ic", "iq", "zi", "p", "li", "id", "io", "gi", "my", "is", "di", "e", "ki", "ii", "in", "phi", "oi", "ri", "mi", "si", "index", "ini", "ex", "iu", "n", "pi", "jo", "ci", "ims", "m", "o", "iter", "out", "multi", "init", "xi", "ie", "gu", "ind", "u", "ij", "x", "me", "im", "qi", "key", "ai", "ix", "sim", "it", "bi", "g", "ui", "info", "hi", "y"], "url": ["sl", "address", "v", "ret", "Url", "p", "li", "abs", "str", "nl", "resource", "char", "browser", "obj", "ls", "r", "dl", "n", "ssl", "link", "location", "html", "f", "uri", "base", "URL", "web", "loc", "sb", "result", "get", "ur", "u", "bel", "http", "rl", "mount", "l", "xml", "ref", "ul"], "b": ["build", "pb", "h", "p", "nb", "bt", "t", "e", "be", "rb", "ab", "bb", "r", "c", "bl", "n", "a", "bh", "m", "builder", "B", "f", "fb", "sb", "bs", "db", "bd", "bf", "Builder", "cb", "l", "bi", "bas", "bc"], "d": ["h", "dat", "da", "p", "dir", "gd", "fd", "di", "e", "t", "dict", "dn", "D", "r", "dl", "c", "n", "ad", "m", "dates", "f", "o", "sd", "dd", "doc", "db", "ds", "mind", "od", "dom", "dm", "dh", "l", "de"], "unitNodes": ["unitNodepaces", "unitNows", "unitNodeodes", "unitKeysanguages", "unitNsows", "unitNsoms", "unitGeoms", " unitnoms", "moduleSnanguages", " unitnodes", " unitNpaces", " unitNoms", "unitNamesows", "moduleSnobs", "moduleSnodes", "unitSoms", "unitKeysoms", "unitNoms", "unitNodeoms", " unitNamesods", "unitnodes", "unitNanguages", "unitNites", "unitSnoms", "unitKeysodes", " unitNamesoms", "unitGeites", "unitSods", " unitNamesodes", "unitNobs", " unitNows", "moduleNobs", "unitSnobs", "unitSnanguages", "moduleSnoms", " unitNamesows", "unitNpaces", "unitGeodes", " unitNites", "unitSnodes", "moduleNodes", "unitNamesods", "unitNamesoms", "unitSows", "moduleNoms", "unitnites", "unitKeysobs", " unitnites", "unitGepaces", "unitnoms", "unitSodes", " unitNods", "unitNamesodes", "unitNods", "unitnpaces", "unitNsodes", "unitNodeites", "unitNsods", "moduleNanguages", " unitnpaces"], "j": ["err", "jar", "js", "ji", "p", "dj", "aj", "jj", "by", "Ja", "old", "J", "obj", "nr", "z", "ja", "n", "kj", "jo", "o", "oj", "job", "br", "jack", "jump", "out", "q", "og", "ind", "jc", "jac", "att", "ij", "im", "uj", "key", "jl", "el", "json", "g", "fr", "bj", "gov", "off", "y", "jp"], "unitNode": [" unitEdge", "unitToken", "nitEntry", "unitCore", " unitToken", "unitEdge", " unitnode", "nitEdge", "utilnode", "uNode", "uiEdge", "uEntry", "uiNode", " unitEntry", "nitNode", "uCore", "unitnode", "utilNode", "uEdge", "uiToken", "nitCore", "uinode", "utilToken", "unitEntry", "utilEdge", " unitCore"], "unitElt": ["unitNmt", "unitNlt", " unitEEld", "unitEElt", "unitOld", " unitEmt", "unitOlem", " unitEld", "unitEEelt", "unitOls", "unitEEld", " unitEElt", "unitNlem", "unitsOlem", "unitEEls", "unitEEmt", " unitEelt", "unitEls", " unitEls", "unitEld", "unitOmt", "unitsOlt", " unitEEmt", "unitAEelt", "unitNelt", "unitEelt", "unitsElt", "unitsElem", "unitAEld", "unitOlt", "unitsOelt", "unitAEls", "unitsOld", "unitAElt", "unitsEelt", " unitEEelt", "unitNld", "unitsEld", "unitOelt", "unitEmt", "unitAElem", "unitElem", " unitEEls"], "uName": ["uuKey", "uuValue", "unL", "uL", " uData", "cuTime", "unName", "uTime", "unData", "cuKey", "cuValue", "nuValue", "cuName", "uuName", " uL", "nuName", "cuData", "unTime", "uData", "uKey", "uValue", " uTime", "uuFamily", "uFamily", "nuKey", "cuFamily", "nuFamily", "cuL"], "parameters": ["configaters", "paramations", "stateter", "metperties", "paramaters", "stateters", "metaters", "temperties", "configeter", "meteter", "tematers", "peter", "parameter", "configeters", "pParameters", "pareter", "statParameters", "meteters", "statations", "configperties", "temeters", "parParameters", "paramParameters", "pations", "peters", "parations", "pareters", "temeter", "paramperties"], "classNodes": ["classNamesoles", "classCNNotes", "CLASSNamps", "classNoms", "classNotes", "classRenobs", " classnomes", "classNamps", "conditionNNoles", "classEoms", "classCNNamps", "CLASSRenodes", "classNNodes", "CLASSRenamps", "classNNode", "classNsobs", "classNsodes", "classNobs", "classNsotes", "classRenamps", "CLASSRenotes", "classNNNode", "classCNNobs", "classEomes", "conditionNNodes", "classNsamps", "classRenotes", "classnoles", "classNamesodes", "conditionNNode", "classRenodes", "classEodes", "classNoles", " classNomes", "classnoms", "conditionNNNode", "CLASSNodes", "classnodes", "classNamesNode", "conditionNodes", "CLASSNobs", "CLASSRenobs", "conditionNoles", " classnodes", "classNNoles", " classnoms", "CLASSNotes", "classNomes", "classnNode", "classnomes", "classCNNodes", " classNoms"], "k": ["ack", "ks", "uk", "kn", "kl", "ko", "ak", "unk", "an", "dk", "work", "kh", "kar", "kan", "kid", "kj", "ik", "ok", "ake", "UK", "kind", "sk", "ck", "q", "ek", "acc", "isk", "kw", "mk", "tk", "ka", "key", "ac", "ku", "kk", "wk", "alk", "kt", "kr", "g", "ikk", "ijk", "km", "ark"], "classNode": ["processN", "elementToken", " classElement", "processElement", "classifiedN", "classifiedDay", "moduleN", "classDay", "clLine", "titleToken", "classLine", "titleComponent", " classOr", "classComponent", " classDay", "titleNode", "clNode", "elementNode", "classElement", "classifiedElement", "elementEdge", "moduleEdge", "processNode", "moduleNode", "moduleOr", "clToken", "processDay", " classEdge", "elementComponent", "classifiedNode", " classN", "classOr", "clComponent", "elementN", "classN", "titleLine", "elementOr", "classToken", "elementLine", "classEdge"], "classElt": ["ClassOxt", " classEelt", " classEmt", "classUxt", "classemt", "classElementlt", "classOmt", "classElementgt", "classNelt", "classYlt", "classElementlem", "classOxt", "classSelem", "classEleelt", "classOelt", "ClassExt", "classElementelt", "classElem", " classOlt", "ClassOelt", "classEld", "classEgt", "classEmt", "classElelem", "classeld", "classUlt", " classOgt", "classYls", "classYlem", " classOmt", "classSelt", " classYlt", "classNlt", "classElelt", "ClassElt", " classElem", "classIEgt", "classEelt", "classSeelt", "ClassOld", "ClassEelt", "ClassOlt", " classEgt", "classExt", "classOlt", "classElegt", "classelt", "classOgt", "classNls", "classOld", "classIEld", "ClassElem", " classYlem", "ClassEgt", "classegt", "classSels", "classYelt", " classYls", "classUld", "classIElt", "classUelt", " classYelt", "classNlem", " classOld", " classEls", "ClassEld", " classEld", "classEls", "classIEmt"], "elementName": ["lementname", "smartTitle", "atomicLabel", " elementname", "entryLabel", "elementname", "lementName", " elementWord", "elementTime", "attributeWord", "smartName", "ElementName", "atomicName", "entryNAME", " elementTime", "elementTitle", "memberWord", "smartLabel", "ElementTree", "elementLabel", " elementTree", "elementTree", "elementWord", "memberFamily", "entryTitle", "atomicNAME", "attributeTime", "smartNAME", "elementFamily", "elementNAME", "lementTree", "Elementname", "attributeFamily", "attributeName", "memberTime", "lementFamily", " elementFamily", "ElementFamily", "memberName", "atomicTitle", "entryName"], "elementValue": ["sequenceTime", "elementvalue", "entryVALUE", "entryValue", "keyValue", "sequenceValue", "elementVal", "propertyvalue", "elementTime", "attributeVALUE", " elementVALUE", "keyVALUE", "ElementName", " elementValues", "attributeVal", "entryTime", "ElementValues", "elementExample", "entryExample", "lementExample", "propertyVALUE", "keyvalue", "propertyValue", "propertyValues", "lementVALUE", "ElementValue", "propertyVal", "ElementVALUE", "lementTime", "attributeValue", "sequenceVALUE", "elementValues", "lementValue", "keyVal", "sequenceExample", "elementVALUE", "attributevalue", "propertyName"]}}
{"id1": "647224", "id2": "23666867", "code1": "    public void uploadFile(File inputFile, String targetFile) throws IOException {\n        System.out.println(\"Uploading \" + inputFile.getName() + \" to \" + targetFile);\n        File outputFile = new File(targetFile);\n        if (targetFile.endsWith(\"/\")) {\n            outputFile = new File(outputFile, inputFile.getName());\n        } else if (outputFile.getParentFile().exists() == false) {\n            outputFile.getParentFile().mkdirs();\n        }\n        if (inputFile.renameTo(outputFile) == false) {\n            InputStream in = new FileInputStream(inputFile);\n            OutputStream out = new FileOutputStream(outputFile);\n            byte[] line = new byte[16384];\n            int bytes = -1;\n            while ((bytes = in.read(line)) != -1) out.write(line, 0, bytes);\n            in.close();\n            out.close();\n        }\n    }\n", "code2": "    public static void copyFile(File in, File out) {\n        try {\n            FileChannel inChannel = null, outChannel = null;\n            try {\n                out.getParentFile().mkdirs();\n                inChannel = new FileInputStream(in).getChannel();\n                outChannel = new FileOutputStream(out).getChannel();\n                outChannel.transferFrom(inChannel, 0, inChannel.size());\n            } finally {\n                if (inChannel != null) {\n                    inChannel.close();\n                }\n                if (outChannel != null) {\n                    outChannel.close();\n                }\n            }\n        } catch (Exception e) {\n            ObjectUtils.throwAsError(e);\n        }\n    }\n", "label": 1, "substitutes": {"uploadFile": [" uploadFiles", "putFiles", "saveImage", "saveFiles", "putfile", "uploadFiles", "savefile", " uploadImage", "putImage", "putFile", " uploadfile", "uploadImage", "saveFile", "uploadfile"], "inputFile": ["imgOne", "thisPath", "inputResource", "inputLine", "inputOne", "outputfile", "fromFILE", "outputFiles", "inFILE", "inputFiles", "updateLe", "inputFILE", "inputLe", " inputOne", " inputLine", "InputFiles", "inputFilename", " inputfile", " inputFiles", "InputFile", "updateFile", " inputLe", "imgLe", "infoFilename", "infoFile", "thisFile", "outputPath", "targetResource", "fromFile", "fromResource", "imgFile", "outputLine", " inputFILE", "inputfile", " inputPath", "Inputfile", "evalResource", "targetFILE", "inFile", "evalField", "infoFILE", " inputFilename", "imgLine", "inputPath", "thisLine", "updateOne", "infoLine", "InputLine", "evalFile", "evalFILE", "inLine", "targetField", "updateLine", "thisfile", "inFilename", "inputField", "fromField"], "targetFile": ["outputfile", "outputFiles", "TargetFiles", "sourceFile", "sourcePath", "detailDir", " targetDir", "detailString", " targetFilename", "sourcefile", "targetFilename", "sourceDir", "sourceDate", " targetString", " targetFILE", "TargetPath", "TargetFile", "toDir", "outputPath", "targetDate", "targetfile", "TargetString", "outputFilename", "outputFolder", "sourceFiles", "sourceFilename", "targetFILE", "targetString", "targetFiles", "TargetDir", "toFile", "outputDir", "targetDir", " targetDate", "outputDate", "TargetFILE", "tofile", "detailFILE", "targetPath", "targetFolder", "toFolder", "sourceFolder", "detailFile", " targetPath"], "outputFile": ["outFiles", "removeStore", "outputfile", " outputFilename", "outputFiles", "inputFiles", "putfile", " outputFiles", "outputGe", "noGe", "outputStore", "nullModel", " outputFILE", "inputModel", "displayFILE", "sourceFile", "outputModel", "removeFile", "sourcefile", " outputDir", " outputGe", "putPlace", "sourceDir", "displayFile", " outputStore", "targetFilename", "inputFilename", "outputDirectory", "nullfile", "outDir", " outputPlace", "targetModel", "outfile", " outputModel", "outModel", "putGe", "targetfile", "displayPlace", "outStyle", "outputFilename", "outDo", "inputDir", " outputDirectory", "removeFILE", " outputfile", "outputDo", "displayStore", "nofile", "inputfile", "sourceFiles", "nullFile", "outputLog", "targetFiles", "outputPlace", " outputLog", "outputDir", "noFile", "targetDir", "removePlace", "inputLog", "targetDirectory", "inputDirectory", "targetLog", "outputFILE", "noPlace", "inputDo", "outFile", "outputStyle", " outputStyle", "putFile", "nullStyle", " outputDo"], "in": ["mc", "ic", "en", "by", "io", "is", "inf", "per", "al", "cin", "ri", "act", "ini", "IN", "inc", "i", "ro", "inner", "inside", "like", "ze", "on", "ar", "iter", "din", "init", "input", "isin", "ind", "mm", "read", "source", "In", "im", "el", "ai", "ins", "l", "rin", "it", "info", "bin", "ain", "con", "inn"], "out": ["ln", "err", "v", "cos", "outs", "log", "at", "put", "by", "io", "print", "b", "t", "obj", "nt", "up", "ot", "aos", "output", "conf", "we", "null", "n", "IN", "to", "ex", "write", "inner", "vol", "res", "console", "auto", "on", "outer", "o", "dis", "screen", "net", "s", "end", "cn", "all", "writer", "name", "println", "client", "sys", "con", "OUT", "report", "and", "Out", "list", "sum", "cache", "it", "g", "ou", "can", "co", "os"], "line": ["ln", "sample", "cell", "log", "field", "sequence", "lock", "nl", "inline", "point", "row", "stroke", "detail", "phrase", "record", "rule", "edge", "range", "block", "node", "query", "label", "code", "link", "page", "entity", "lin", "message", "command", "column", "ide", "lo", "frame", "comment", "lane", "ine", "eline", "chain", "Line", "l", "LINE", "entry", "word"], "bytes": ["cells", "ales", "otes", "ges", "terms", "books", "ites", "ows", "ls", "comments", "blocks", "ices", "gs", "bits", "tes", "Bytes", "amples", "sofar", "nets", "steps", "odes", "pages", "uses", "units", "es", "bps", "lements", "times", "frames", "parts", "bs", "files", "reads", "xes", "ones", "vals", "bles", "bes", "ips", "lines", "comes", "les", "ends", "seconds", "gments", "ies", "rows", "errors", "oms", "outs", "classes", "gets", "values"]}}
{"id1": "21348951", "id2": "8778962", "code1": "        protected void processAddByURLSubmit(URL url, String invalidUrlMsg) {\n            if (!this.hasError()) {\n                try {\n                    StringWriter xmlSourceWriter = new StringWriter();\n                    IOUtils.copy(url.openStream(), xmlSourceWriter);\n                    processSubmittedDoap(xmlSourceWriter.toString());\n                } catch (FileNotFoundException e) {\n                    Session.get().error(invalidUrlMsg);\n                    logger.warn(\"Error processing URL: \" + invalidUrlMsg);\n                } catch (IOException e) {\n                    setResponsePage(new ErrorReportPage(new UserReportableException(\"Unable to add doap using RDF supplied\", DoapFormPage.class, e)));\n                    logger.warn(\"Error processing URL: \" + url + \"; \" + e.getMessage(), e);\n                }\n            }\n        }\n", "code2": "    public static boolean decodeFileToFile(String infile, String outfile) {\n        boolean success = false;\n        java.io.InputStream in = null;\n        java.io.OutputStream out = null;\n        try {\n            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);\n            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n            byte[] buffer = new byte[65536];\n            int read = -1;\n            while ((read = in.read(buffer)) >= 0) {\n                out.write(buffer, 0, read);\n            }\n            success = true;\n        } catch (java.io.IOException exc) {\n            exc.printStackTrace();\n        } finally {\n            try {\n                in.close();\n            } catch (Exception exc) {\n            }\n            try {\n                out.close();\n            } catch (Exception exc) {\n            }\n        }\n        return success;\n    }\n", "label": 1, "substitutes": {"processAddByURLSubmit": ["processAddByURlsubmission", "processAddByURLSubmitted", "processAddByURLSubmission", "processAddByURLSumit", "processAddByURlsumit", "processAddByURLSubsit", "processAddByURLSUBit", "processAddByURLSUBmitted", "processAddByURlsubmit", "processAddByURLSubit", "processAddByURLSummitted", "processAddByURlsummitted", "processAddByURLSUBmit", "processAddByURlsubmitted", "processAddByURLSubsmitted", "processAddByURlsummission", "processAddByURLSubsmission", "processAddByURlsummit", "processAddByURLSubsmit", "processAddByURLSummit", "processAddByURlsubit", "processAddByURLSummission", "processAddByURLSUBmission"], "url": ["sl", "path", "address", "item", "force", "string", "file", "Url", "str", "nl", "id", "resource", "mail", "char", "browser", "ls", "run", "external", "email", "dl", "ll", "ssl", "link", "location", "html", "uri", "base", "URL", "web", "loc", "page", "ur", "q", "impl", "input", "un", "document", "name", "u", "bel", "util", "http", "rl", "addr", "key", "mount", "el", "use", "rect", "l", "ref", "ul"], "invalidUrlMsg": ["invalidurlMsg", "invalidUrLog", "inInvalidUrlmsg", "invalidUrMessage", "inInvalidStrLog", "invalidurlmsg", "invalidFileStr", "invalidStrMessage", "invalidUrlStr", "inInvalidUrlStr", "inInvalidUrlMessage", "invalidFileLog", "inInvalidURLStr", "invalidURLMsg", "invalidUrlLog", "invalidurlStr", "inInvalidUrlMsg", "inInvalidUrlLog", "invalidStrMsg", "invalidUrStr", "invalidStrLog", "invalidUrlmsg", "inInvalidURLmsg", "invalidUrmsg", "inInvalidStrStr", "invalidUrlMessage", "invalidURLStr", "inInvalidURLMsg", "inInvalidStrMsg", "invalidStrStr", "invalidUrMsg", "invalidURLmsg", "invalidFileMsg", "invalidFileMessage", "inInvalidStrMessage"], "xmlSourceWriter": [" xmlSourceBuilder", "jsonSourceWriter", "xmlsourceRW", "xmlSourceRW", "xmlSourceWrite", "jsonStringCode", "xmlSourcesCode", " xmlSourceRW", "xmlSourceReader", "xmlsourceWriting", "xmlSourceFileWriting", "xmlSourcesWriter", "xmlSourcesReader", "xmlStringWriting", "xmlSourceFileBuilder", "xmlSourceFileRW", "xmlSourceCode", "jsonSourceCode", "xmlSourceWriting", "xmlStringWriter", " xmlSourceReader", "jsonStringWriter", " xmlSourceWriting", "jsonSourceWriting", " xmlSourceWrite", "xmlsourceWriter", "jsonStringWriting", "xmlsourceBuilder", "xmlSourceBuilder", "jsonStringReader", "xmlSourceFileWriter", "xmlsourceReader", "xmlStringCode", "xmlStringReader", "xmlSourcesWriting", "jsonSourceReader", "xmlsourceWrite"]}}
{"id1": "14390569", "id2": "15645004", "code1": "    private DialogHelper(String title, final URL imageURL) {\n        jd = new JDialog();\n        jd.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);\n        jd.setAlwaysOnTop(true);\n        jd.setLayout(new BoxLayout(jd.getContentPane(), BoxLayout.Y_AXIS));\n        jd.setTitle(title);\n        JLabel jl = new JLabel();\n        ImageIcon icon = new ImageIcon(imageURL);\n        jl.setIcon(icon);\n        jd.add(new JScrollPane(jl));\n        final JFileChooser chooser = getSaveImageChooser();\n        JPanel jp = new JPanel();\n        JButton jb = new JButton(getMessage(\"btn_save_as\"));\n        jb.addActionListener(new ActionListener() {\n\n            public void actionPerformed(ActionEvent e) {\n                int returnVal = chooser.showSaveDialog(jd);\n                if (returnVal == JFileChooser.APPROVE_OPTION) {\n                    File file = chooser.getSelectedFile();\n                    String fileName = file.getPath();\n                    String ext = StringUtil.getLowerExtension(fileName);\n                    if (!\"png\".equals(ext)) {\n                        fileName += \".png\";\n                        file = new File(fileName);\n                    }\n                    boolean doIt = true;\n                    if (file.exists()) {\n                        int i = JOptionPane.showConfirmDialog(jd, getMessage(\"warn_file_exist\"));\n                        if (i != JOptionPane.YES_OPTION) doIt = false;\n                    } else if (!file.getParentFile().exists()) {\n                        doIt = file.getParentFile().mkdirs();\n                    }\n                    if (doIt) {\n                        FileChannel src = null;\n                        FileChannel dest = null;\n                        try {\n                            src = new FileInputStream(imageURL.getPath()).getChannel();\n                            dest = new FileOutputStream(fileName).getChannel();\n                            src.transferTo(0, src.size(), dest);\n                        } catch (FileNotFoundException e1) {\n                            warn(jd, getMessage(\"err_no_source_file\"));\n                        } catch (IOException e2) {\n                            warn(jd, getMessage(\"err_output_target\"));\n                        } finally {\n                            try {\n                                if (src != null) src.close();\n                            } catch (IOException e1) {\n                            }\n                            try {\n                                if (dest != null) dest.close();\n                            } catch (IOException e1) {\n                            }\n                            src = null;\n                            dest = null;\n                        }\n                    }\n                }\n            }\n        });\n        jp.add(jb);\n        jb = new JButton(getMessage(\"btn_close\"));\n        jb.addActionListener(new ActionListener() {\n\n            public void actionPerformed(ActionEvent e) {\n                jd.dispose();\n            }\n        });\n        jp.add(jb);\n        jd.add(jp);\n        jd.pack();\n        setCentral(jd);\n    }\n", "code2": "    private void unzip(File filename) throws ZipException, IOException {\n        ZipInputStream in = new ZipInputStream(new BufferedInputStream(new FileInputStream(filename)));\n        ZipEntry entry = null;\n        boolean first_entry = true;\n        while ((entry = in.getNextEntry()) != null) {\n            if (first_entry) {\n                if (!entry.isDirectory()) {\n                    File subdir = new File(dir + File.separator + filename.getName().substring(0, filename.getName().length() - SUFFIX_ZIP.length()));\n                    if (!subdir.exists()) {\n                        subdir.mkdir();\n                        dir = subdir;\n                    }\n                }\n                first_entry = false;\n            }\n            if (entry.isDirectory()) {\n                FileUtils.forceMkdir(new File(dir + File.separator + entry.getName()));\n            } else {\n                File outfile = new File(dir + File.separator + entry.getName());\n                File outdir = new File(outfile.getAbsolutePath().substring(0, outfile.getAbsolutePath().length() - outfile.getName().length()));\n                if (!outdir.exists()) FileUtils.forceMkdir(outdir);\n                FileOutputStream fo = new FileOutputStream(outfile);\n                BufferedOutputStream bos = new BufferedOutputStream(fo, BUFFER);\n                int read;\n                byte data[] = new byte[BUFFER];\n                while ((read = in.read(data, 0, BUFFER)) != -1) {\n                    read_position++;\n                    bos.write(data, 0, read);\n                }\n                bos.flush();\n                bos.close();\n            }\n        }\n        in.close();\n    }\n", "label": 1, "substitutes": {"title": ["text", "subject", "TIT", "description", " Title", "string", "holiday", "term", "help", "t", "hash", "question", "start", "Title", "msg", "filename", "content", "theme", "label", "summary", "html", "notice", "prefix", "padding", "message", "parts", "lead", "hd", "heading", "setup", "name", "template", "password", "details", "header", "metadata", "tip", "layout", "type", "itle", "size"], "imageURL": ["imageString", "fileURL", "ImageURI", "ImageUrl", "fileUrl", "photoURL", " imageUrl", " imageUR", "imageUR", "fileString", "mediaURL", " imageString", "photoID", "imageUrl", "photoUR", "photoUrl", "photoString", " imageURI", "imageID", "imageURI", "photoURI", "ImageUR", "fileURI", "mediaUrl", "mediaURI", "ImageID", "mediaID", "ImageURL"], "jd": ["javads", " jds", "ujmd", "djd", "zad", "ajds", "ujdt", "ujd", "djsd", "jD", "ujD", "Jp", "jsd", "jspd", "ijds", "jdo", "kdt", "ajdm", "kds", "qdo", "jsdm", "gbd", "simD", "gds", " jc", "ajpd", "ijD", "JD", "ajd", "simmd", "djds", "jmd", "jjD", "kdo", "djc", "qbd", "jjbd", "jjp", " jdt", "jds", "Jc", "javadm", "djdo", "Jad", "jdt", "jsD", "kd", "Jds", "ijd", "qp", "javad", "jdm", "qD", " jsd", "jpd", "Jbd", "simd", "kbd", "jsds", "jc", "zd", "gdo", "jjd", "Jd", "Jmd", "qds", " jD", "jbd", "jobdo", " jdo", "simdt", "gd", "javapd", " jad", "Jdo", "qd", "jad", "djad", "zsd", "Jdt", "ujad", "jobd", "jobdt"], "jl": ["ln", "js", "ji", "Label", "kn", "elt", "lp", "ell", " ol", "jj", "dj", "txt", "nl", "li", "isl", "kl", "mil", "J", "lv", "jet", "bol", "j", "ja", " li", "abl", "dl", "dll", "kj", "elle", "jah", "syn", "ibl", "lu", "kel", "dyl", "elly", "jc", "jac", "ij", "uj", "gn", "rl", "igl", "bj", "ijk", "yl", "il", "jin"], "icon": ["Icon", "eric", " tip", "ico", "ic", "lock", " widget", "icons", " ion", " lang", "nic", "addon", " canvas", " fruit", "conv", "ion", "ocon", "font", "cil", "ICO", "iban", "ex", " intent", "chron", "label", "gc", " ancestor", " captcha", "syn", " Icon", "iao", "conn", "cn", "png", "icol", "jc", "fn", "image", " screen", "pen", "pic", "\u4e2d", "fa", " conn", "con"], "chooser": ["Choicer", "choose", "composer", "choerer", "comperer", " chooder", "booser", "choosen", "poicer", "boosen", "CHOoser", "compicer", " choosen", "chooder", "Chooder", " choose", "Choosen", "composen", " choicer", "poose", "choicer", "compose", "CHOose", "pooser", "Chooser", "CHOosen", "CHOicer", " choerer", "boose", "pooder", "boerer", "Choose"], "jp": [" sp", "js", " dj", " gp", "p", "np", " cp", " ja", "btn", "j", "ja", "JP", " pic", " ap", "kj", " pl", " je", "sp", " np", " joint", " ip", " mp", "jc", "ij", " sip", "bp", "pic", "bj", "jin"], "jb": ["qcb", "qbd", " jbd", "kjbd", " jcb", "kjb", "qb", "jcb", "Jbd", "Jcb", "kjcb", "jbd", "Jb"], "e": ["d", "ev", "v", "en", "p", "E", "t", "event", "te", "ed", "ee", "re", "c", "n", "a", "m", "f", "o", "s", "Event", "ie", "u", "or", "it", "g", "es", "er", "w"], "returnVal": ["retVal", " returnval", "getVal", "returnVol", "getVAL", "responseVal", " returnValid", "returnVAL", "returnValue", " returnValue", " returnVAL", "ReturnVal", "returnValid", "getValid", "returnval", "responseVol", "retval", "Returnval", "ReturnVAL", "retVAL", "ReturnValue", "responseVAL", "getVol", " returnVol", "responseValid", "retValue"], "file": ["local", "path", "place", "h", "dir", "io", "angle", "resource", "FILE", "channel", "ile", "be", "class", "File", "open", "run", "target", "filename", "rule", "model", "work", "real", "fe", "null", "to", "library", "relation", "port", "stat", "status", "link", "valid", "f", "fs", "base", "table", "buffer", "page", "format", "get", "user", "core", "db", "fp", "create", "tree", "document", "name", "foo", "http", "source", "le", "drop", "image", "or", "report", "handle", "info", "il", "full", "body", "type", "word"], "fileName": ["FILEPath", "handleName", " fileNAME", " filePath", "FILEExt", "fileNAME", " fileNames", " filename", "imagename", "fileClass", "handlename", " fileClass", "fileFace", "fileSystem", "FILEName", "imageFace", "FILESet", "handleClass", "filename", "fileExt", "fileNames", "imageNAME", "entityPath", "FileExt", "FILESystem", "imagePath", "ileNAME", "Filename", "fileSet", "FilePath", "ileClass", "entityName", "ilename", "taskname", "taskPath", "FILENAME", "FileName", "FileNAME", "imageName", "taskName", " fileSystem", " fileExt", "FileSystem", "FileFace", "FileNames", "FILENames", "filePath", "taskFace", "entityNAME", "ileName", "handleNAME", "entitySet", "FileSet"], "ext": ["aux", "exc", "ag", "typ", "dir", "lib", "txt", "part", "prot", "test", "t", "eur", "Ext", "external", "len", "cod", "ex", "EXT", "sem", "vert", "pat", "ord", "lex", "def", "ct", "desc", "end", "xt", "req", "exe", "exp", "ind", "hex", "cont", "enc", "ix", "fr", "ec", "cmd", "xp", "off", "word"], "i": ["ti", "I", "li", "id", "gi", "print", "is", "di", "ii", "j", "phi", "mi", "si", "index", "ini", "iu", "pi", "status", "cli", "ci", "m", "init", "xi", "ei", "qi", "ai", "fi", "it", "bi", "hi", "ui", "info", "ori", "y"], "doIt": ["doneIt", "odoIt", "doWhich", "doneIT", "doIs", "doIT", "donIt", "donIs", "didit", "waIs", " doYou", "didYou", "odoHe", "doit", "donYou", "doHe", "odoIT", "donit", "didIs", " doHe", "diit", "waIt", " doWhich", "didIt", "donIT", "odoWhich", "waIT", "doneit", " doit", " doIT", "diWhich", "diIt", " doIs", "diHe", "odoit", "doYou"], "src": ["sec", "sr", "sq", "sl", "trans", "ctr", "rx", "st", "conv", "ources", "start", "rb", "ptr", "rob", "from", "copy", "url", "gs", "rs", "r", "ource", "inner", "https", "ssl", "rel", "syn", "crop", "sc", "loc", "sb", "comp", "tmp", "init", "rt", "usr", "impl", "input", "http", "sys", "source", "rest", "rl", "cont", "rc", "ser", "ins", "sub", "inst", "proc", "sh", "lb"], "dest": ["master", "local", "foreign", "trans", "decl", "dir", "dat", "des", "cat", "orig", "st", "Dest", "gest", "slave", "output", "target", "pipe", "pas", "cp", "nom", "way", "mem", "port", "https", "pot", "origin", "rel", "desc", "iter", "loc", "sp", "out", "est", "tmp", "usr", "nw", "sys", "dist", "source", "cont", "rest", "comb", "can", "proc", "temp", "coord"]}}
{"id1": "15409512", "id2": "19096138", "code1": "    public static void main(String args[]) throws IOException {\n        String inFileName = args[0];\n        String outFileName = args[1];\n        long position = 0L;\n        try {\n            position = Long.parseLong(args[2]);\n        } catch (NumberFormatException nfex1) {\n            try {\n                position = Long.parseLong(args[2], 16);\n            } catch (NumberFormatException nfex2) {\n                System.err.println(\"Wrong offset\");\n                System.exit(0);\n            }\n        }\n        if (position < 1L) {\n            System.err.println(\"Wrong offset. Must be more than 0\");\n            System.exit(0);\n        }\n        System.out.println(\"Copying  input: \" + inFileName);\n        System.out.println(\"        output: \" + outFileName);\n        System.out.println(\"          from: \" + position);\n        BufferedInputStream bis = new BufferedInputStream(new FileInputStream(inFileName));\n        BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(outFileName));\n        bis.skip(position);\n        for (byte[] b = new byte[1]; bis.read(b) > 0; bos.write(b)) ;\n        bis.close();\n        bos.close();\n    }\n", "code2": "    public static void main(String[] args) {\n        String logFileName = args[0];\n        int extractLineEvery = new Integer(args[1]).intValue();\n        String filterToken = \"P0\";\n        if (args.length > 2) {\n            filterToken = args[2];\n        }\n        try {\n            BufferedReader br = new BufferedReader(new FileReader(logFileName));\n            BufferedWriter bw = new BufferedWriter(new FileWriter(new File(logFileName + \".trim\")));\n            String readLine;\n            int x = 0;\n            while ((readLine = br.readLine()) != null) {\n                if ((x++ % extractLineEvery == 0) && readLine.startsWith(filterToken)) {\n                    bw.write(readLine + \"\\n\");\n                }\n            }\n            bw.flush();\n            bw.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n", "label": 1, "substitutes": {"inFileName": ["intModelNames", "infileSource", "inFileSource", " infileSource", " inFileSource", "infileNames", "infileSize", " inFilePath", "inModelName", "inModelNames", "inStreamSize", "inFilenameSize", "inFILEName", "inFilenameNames", "inStreamNames", "intFileNames", "inFilenameSource", "infileName", "inPageName", " infileSize", "inFileFace", " infileNames", " inFileFace", " infileFace", "inFILEFace", "intModelname", "inFILEPath", "inPageSource", "inFilePath", "inPageNames", " inFileNames", "intFileSource", "inFilenameFace", " inFileSize", "inFilenameName", "inModelSource", "inStreamName", "inFileSize", "infilePath", " infileName", "inStreamPath", "intModelSource", "intFilename", "inPagename", "inModelname", "intModelName", " infilePath", "intFileName", "inFileNames", "inFilename", "infileFace", "inFilenamePath", "inFILESource", "infilename"], "outFileName": ["outFilenameFile", "inFilenameDir", " outFilenameName", "outFilenameDef", " outFileParent", "infileNames", "inFileFile", "outfilePath", "outfileNames", "infileDef", "outFileNames", " outFilenamePath", "inFilenameNames", " outFilePath", "outfileParent", "outfileDef", "outfileName", "outFileParent", "infileName", "outFILEParent", " outFileNames", "outPathPath", "outTileDef", "inFilePath", "outFilenameName", "outFilenameParent", "outfileFile", "outPathName", "inFileDef", "outFilePath", "outFilenameNames", "infileFile", "inFilenameName", "outFileFile", " outFilenameNames", "outPathNames", "inFileDir", "outfileDir", " outFilenameParent", "outFileDir", "outPathDir", "outFilenamePath", "outTileNames", "outTileName", "inFileNames", "outFILEPath", "outTileFile", "outFileDef", "outFILENames", "inFilenamePath", "outFILEName", "outFilenameDir"], "position": ["address", "description", "number", "operation", "sequence", "p", "amount", "point", "length", "start", "ion", "slot", "resolution", "no", "portion", "from", "limit", "osition", "total", "index", "to", "block", "relation", "connection", "condition", "port", "present", "volume", "location", "initial", "expression", "size", "padding", "buffer", "Position", "now", "journal", "capacity", "minimum", "reference", "see", "document", "offset", "POS", "seek", "direction", "zero", "application", "source", "pointer", "memory", "value", "move", "request", "pos", "character", "layout", "option", "order", "type", "usage", "ment", "command"], "bis": ["js", "bid", "ubs", "rots", "idis", "is", "conv", "onis", "ls", "rison", "iris", "oi", "ais", "bits", "abin", "irs", "bb", "opus", "uds", "cgi", "obb", "ios", "obs", "bh", "bps", "ads", "fps", "pins", "bs", "los", "lis", "oss", "bil", "its", "lbs", "isin", "avi", "ris", "oris", "bes", "BS", "bat", "phis", "ints", "dos", "obos", "nis", "bi", "ubis"], "bos": ["asket", "cos", "oos", "ubs", "rots", "ats", "bys", "ows", "aos", "ths", "fits", "ots", "bits", "tes", "bo", "ts", "uds", "ols", "oops", "bones", "ios", "obs", "jas", "bh", "fs", "ns", "pins", "bs", "los", "oss", "oids", "aus", "ippers", "eros", "bes", "BS", "nos", "tis", "dos", "oks", "bi", "ubis", "boards", "ods", "os", "webkit"], "b": ["d", "v", "batch", "pb", "h", "p", "bar", "back", "nb", "bg", "t", "be", "rb", "j", "ab", "bb", "c", "bit", "i", "a", "m", "ib", "bh", "f", "B", "base", "fb", "br", "sb", "bs", "q", "ch", "db", "eb", "bp", "cb", "l", "ob", "g", "mb", "bin", "buf", "body", "gb", "bc"]}}
{"id1": "160705", "id2": "1598693", "code1": "    public static boolean downloadFile(String url, String destination) throws Exception {\n        BufferedInputStream bi = null;\n        BufferedOutputStream bo = null;\n        File destfile;\n        byte BUFFER[] = new byte[100];\n        java.net.URL fileurl;\n        URLConnection conn;\n        fileurl = new java.net.URL(url);\n        conn = fileurl.openConnection();\n        long fullsize = conn.getContentLength();\n        long onepercent = fullsize / 100;\n        MessageFrame.setTotalDownloadSize(fullsize);\n        bi = new BufferedInputStream(conn.getInputStream());\n        destfile = new File(destination);\n        if (!destfile.createNewFile()) {\n            destfile.delete();\n            destfile.createNewFile();\n        }\n        bo = new BufferedOutputStream(new FileOutputStream(destfile));\n        int read = 0;\n        int sum = 0;\n        long i = 0;\n        while ((read = bi.read(BUFFER)) != -1) {\n            bo.write(BUFFER, 0, read);\n            sum += read;\n            i += read;\n            if (i > onepercent) {\n                i = 0;\n                MessageFrame.setDownloadProgress(sum);\n            }\n        }\n        bi.close();\n        bo.close();\n        MessageFrame.setDownloadProgress(fullsize);\n        return true;\n    }\n", "code2": "    public static String retrieveData(URL url) throws IOException {\n        URLConnection connection = url.openConnection();\n        connection.setRequestProperty(\"User-agent\", \"MZmine 2\");\n        InputStream is = connection.getInputStream();\n        if (is == null) {\n            throw new IOException(\"Could not establish a connection to \" + url);\n        }\n        StringBuffer buffer = new StringBuffer();\n        try {\n            InputStreamReader reader = new InputStreamReader(is, \"UTF-8\");\n            char[] cb = new char[1024];\n            int amtRead = reader.read(cb);\n            while (amtRead > 0) {\n                buffer.append(cb, 0, amtRead);\n                amtRead = reader.read(cb);\n            }\n        } catch (UnsupportedEncodingException e) {\n            e.printStackTrace();\n        }\n        is.close();\n        return buffer.toString();\n    }\n", "label": 0, "substitutes": {"downloadFile": ["copyfile", "downloadPage", "createResource", "createFile", " downloadResource", "copyFile", "copyPage", "createPage", " downloadfile", "copyResource", "createfile", "downloadResource", " downloadPage", "downloadfile"], "url": ["sl", "path", "address", "lr", "ud", "gl", "string", "file", "Url", "ret", "str", "nl", "mail", "browser", "ls", "external", "dl", "ll", "host", "ssl", "html", "location", "link", "uri", "base", "URL", "web", "fail", "loc", "ur", "u", "http", "source", "rl", "addr", "mount", "el", "l", "ref", "sql", "ul"], "destination": [" destinate", "destinator", "Destification", "declino", "destino", "originate", "delinator", "declination", "delinations", " destinations", "destification", "Destination", " destino", " destinator", "Destinate", "origination", "Destinator", "origification", "destinate", "declinator", "declinations", "delino", "delination", "destinations", "originator", " destification"], "bi": ["ti", "ba", "zi", "li", "gi", "b", "di", "ki", "ii", "bb", "rob", "phi", "ri", "mi", "si", "ni", "bie", "oi", "ini", "bra", "mu", "ibi", "pi", "ci", "bh", "ib", "yi", "bis", "bs", "bm", "iri", "ibe", "abi", "qi", "obi", "ai", "ble", "fi", "vi", "bin", "isi", "Bi", "bc"], "bo": ["yo", "ba", "oos", "bos", "pb", "so", "flo", "BO", "mo", "cu", "Bo", "ko", "po", " Bo", "bu", "bol", "no", "mon", "go", "bl", "mu", "ro", "bro", "ilo", "bh", "aco", "o", "cro", "zo", "ta", "vo", "lu", "lo", "ho", "soc", "bd", "fo", "ao", "cho", "wo", "fi", "ato", "bin", "gro", "oo", "bc", "co"], "destfile": ["sourcef", "estrule", " destport", "foreignFile", " destparent", "newile", "sourceFile", "sourcefile", "Destfield", "Destile", "newprint", "declfile", "declile", "Destfile", "destprint", "nullfile", "destpo", " destf", "DestFile", "Destport", "sourceprint", "foreignfile", " destFile", "declfolder", "Destdir", "estFile", " destfield", "destfolder", "sourcefield", " destfolder", " destrule", "nullrule", "newfile", "destparent", " destprint", "sourceile", "estfile", " destpo", " destile", "nullparent", "destdir", "destrule", "destport", "estparent", "declport", " destdir", "estpo", "destFile", "Destfolder", "destf", "foreignf", "destfield", "nullpo", "estf", "foreignfield", "newFile", "estfield", "Destf", "sourcedir", "destile"], "BUFFER": ["BACKBuffer", "Bbuffer", "FILBuffer", "FILDER", " BUBuffer", "BACKFFER", "CHFFER", "BUDER", "BYDER", "CHBuffer", "BFFER", "BYbuffer", " BUDER", "BUBuffer", "FILFFER", "CHMENT", "BBuffer", "FILbuffer", "BUMENT", "BACKDER", "BYMENT", "BUbuffer", "BYBuffer", "BMENT", " BUbuffer", "BACKbuffer", "CHbuffer", "BYFFER"], "fileurl": ["fileURL", "FileUrl", "resourcel", "filel", "resourceurl", " filenet", "fileUrl", "resourceUrl", "tilenet", " fileURL", "fileutil", "FILEURL", "tileconn", "Fileutil", "resourcenet", "resourceconn", "tileurl", "resourceURL", "FILEurl", " fileconn", "Filel", " fileutil", "FILEUrl", " fileUrl", "fileconn", "Fileurl", "filenet", "tileUrl", "FileURL", "FILEutil", " filel"], "conn": [" cs", "err", "cur", "serv", "lang", "obj", "Conn", "nt", "conv", "j", "pg", "open", "conf", "Connection", "cp", "ctx", "comm", "c", "cod", "n", "gen", "act", "connection", "cs", "cc", "close", "ns", "syn", "ann", "net", "connect", "cn", "sql", "ch", "cert", "yn", "client", "att", "nc", "cont", "gn", "addr", "pc", "cb", "enc", "cmd", "resp", "jp", "co", "con"], "fullsize": ["fullSIZE", "fulsize", "longSize", "fulllength", "fulsum", " fullsum", "FullSIZE", "fullstart", "totalSize", "largeSize", " fulllength", "fullylength", " fullspace", "fulspace", "fullname", "fullySize", "fullyspace", "longSIZE", "fullength", "FullSize", "largesize", "Fullsize", " fullSize", "Fullname", "fulstart", "largesum", "longname", "fulSize", "fulSIZE", "longsize", "fullspace", "fullSize", "totalSIZE", "fullsum", "totalsize", "fullysize", " fullstart", " fullname", "largestart", " fullSIZE"], "onepercent": ["twopercent", "oneopen", "oneprop", "ONEprop", " oneprop", "onePercent", "Onecent", "Onepercent", " onePercent", "ONEopen", " oneopen", "OnePercent", "Oneprop", "twocent", "ONEpercent", " onecent", "onecent", "twoPercent", "Oneopen"], "read": ["text", "send", "val", "log", "height", "str", "print", "length", "char", "count", "start", "bind", "in", "row", "select", "fill", "run", "open", "skip", "output", "reader", "len", "r", "index", "range", "n", "check", "write", "query", "word", "through", "iter", "play", "size", "buffer", "connect", "set", "end", "READ", "get", "each", "raw", "reads", "q", "core", "parse", "push", "input", "ind", "shift", "last", "readable", "seek", "load", "x", "reading", "give", "add", "key", "Read", "ready", "hello", "handle", "hold", " Read", "stream", "find", "gets", "se"], "sum": ["v", "so", "cum", "mean", "prof", "cat", "count", "hash", "med", "num", "j", "max", "total", "hum", "scale", "si", "index", "n", "sam", "mem", "vol", "summary", "sa", "set", "su", "ful", "out", "Sum", "acc", " SUM", "u", "ass", "add", "sim", "na", "us", "unit", "um", "cal", "temp", "full", "size"], "i": ["d", "ti", "v", "I", "ic", "p", "li", "gi", "io", "is", "di", "t", "e", "ii", "med", "in", "j", "phi", "mi", "si", "index", "c", "ini", "iu", "pi", "ci", "m", "f", "o", "iter", "multi", "xi", "chi", "ind", "ei", "u", "qi", "x", "im", "ai", "ix", "sim", "l", "ip", "it", "hi", "ui", " I", "ori", "info", "y"]}}
{"id1": "12428013", "id2": "11968328", "code1": "    public static void polishOff(IProgressMonitor monitor, String from, String to, String renameTo) {\n        if (monitor != null && monitor.isCanceled()) {\n            return;\n        }\n        try {\n            ftpClient = new FTPClient();\n            ftpClient.setRemoteAddr(InetAddress.getByName(PrefPageOne.getValue(CONSTANTS.PREF_HOST)));\n            ftpClient.setControlPort(PrefPageOne.getIntValue(CONSTANTS.PREF_FTPPORT));\n            ftpClient.connect();\n            try {\n                Thread.sleep(1000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            ftpClient.login((PrefPageOne.getValue(CONSTANTS.PREF_USERNAME)), FTPUtils.decrypt(PrefPageOne.getValue(CONSTANTS.PREF_PASSWORD)));\n            try {\n                Thread.sleep(1000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            if (from != null) {\n                FTPHolder ftpHolder = new FTPHolder(from, to, renameTo, false);\n                synchedSet.add(ftpHolder);\n            }\n            JobHandler.aquireFTPLock();\n            for (Iterator iter = synchedSet.iterator(); iter.hasNext(); ) {\n                if (monitor != null && monitor.isCanceled()) {\n                    JobHandler.releaseFTPLock();\n                    ftpClient.quit();\n                    return;\n                }\n                Thread.yield();\n                FTPHolder element = (FTPHolder) iter.next();\n                ftpClient.setType(FTPTransferType.ASCII);\n                ftpClient.put(element.from, element.to);\n                if (element.renameTo != null) {\n                    try {\n                        ftpClient.delete(element.renameTo);\n                    } catch (Exception e) {\n                    }\n                    ftpClient.rename(element.to, element.renameTo);\n                    log.info(\"RENAME: \" + element.to + \"To: \" + element.renameTo);\n                }\n            }\n            JobHandler.releaseFTPLock();\n            ftpClient.quit();\n        } catch (UnknownHostException e) {\n            e.printStackTrace();\n        } catch (FTPException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        synchedSet.clear();\n    }\n", "code2": "    public static String getMD5(String _pwd) {\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            md.update(_pwd.getBytes());\n            return toHexadecimal(new String(md.digest()).getBytes());\n        } catch (NoSuchAlgorithmException x) {\n            x.printStackTrace();\n            return \"\";\n        }\n    }\n", "label": 0, "substitutes": {"polishOff": [" swishersoff", "finISHoff", " swishingOff", " swISHoff", " swishExec", "finISHExec", "finishoff", " swishersOff", "finISHOff", " swISHExec", " swishingExec", " swishOff", " swishersExec", "finishOff", " swISHOff", " swishoff", " swishingoff", "finishExec"], "monitor": ["master", "Monitor", "description", " monitoring", "batch", "log", "number", "when", "problem", "member", "that", "timer", "mx", "test", "processor", "umi", "detail", "mon", "progress", "manager", "mr", "username", "network", "thread", "menu", "check", "watch", "profile", "stat", "status", "summary", "m", "hover", "mate", "runner", "meter", "note", "trace", "monkey", "message", "bm", "writer", "minimum", "video", "cm", "tim", " Monitor", "report", "dm", "driver", "ai", "man", "execute", "sim", "healthy", "directory", "info", "pool", "state", "spin", "pai", "handler", "timeout"], "from": ["local", "text", "path", "address", "bound", "string", "file", "term", "str", "by", "back", "id", "before", "From", "old", "part", "remote", "st", "no", "original", "url", "query", "range", "a", "host", "code", "html", "link", "about", "what", "normal", "set", "base", "form", "low", "as", "user", "create", "input", "un", "name", "rom", "data", "source", "reset", "add", "or", "with", "pos", "fr", "origin", "off", "org", "os"], "to": ["address", "path", "number", "file", "delete", "oto", "pro", "by", "id", "into", "term", "test", "po", "toc", "t", "no", "total", "tt", "target", "output", "range", "eto", "port", "html", "auto", "on", "about", "o", "table", "two", "format", "ta", "tmp", "user", " TO", "name", "template", "client", "too", "zero", "TO", "tab", "data", "source", "done", "value", "top", "tr", "token", "tu", "type", "body", " too", "To", "org", "os", "size"], "renameTo": ["reenameTO", "penameFor", "renokeOr", "renadeto", "reennameFrom", "renateTo", "denameT", "reameTO", "renokeTO", "renenameBody", "renamT", "renamesTO", "renowTarget", "reameTo", "denamTO", "rennamFor", "renenameFrom", "penAMEto", "renamiT", "reenameFrom", "rennameFrom", "renamTo", "renowOr", "renadeFrom", "renameFor", "renewTo", "renamiTo", "renamesFrom", "renamiTO", "renenameT", "renewFrom", "renameTarget", "renadeFor", "penameto", "renAMETo", "renameto", "renAMEFor", "renAMEFrom", "penAMEFor", "rennameTO", "renateTarget", "renokeTarget", "renowTo", "rennamto", "renenameOr", "reenameTo", "penAMEFrom", "renamTarget", "renenameTo", "denamTo", "denameTarget", "rennamTo", "rennamFrom", "renameTO", "reennameTo", "denamTarget", "renAMETO", "reameFrom", "renamesBody", "renewBody", "renewTO", "renowTO", "renateto", "renenameTO", "reenameOr", "renameBody", "renamTO", "renateTO", "reameto", "rennameTo", "renokeTo", "denameTo", "renAMETarget", "penameTo", "renenameTarget", "penameFrom", "rennameTarget", "renadeTo", "denamT", "reameTarget", "reennameTO", "reenameBody", "renameT", "rennameto", "renamiTarget", "reennameTarget", "renAMEto", "denameTO", "renameFrom", "reenameTarget", "renameOr", "reameBody", "reameOr", "penAMETo", "renateFrom", "renamesTo"], "ftpClient": ["aftpAPI", "fttpclient", "fttRemote", "fttpRemote", "ftpEntry", "ftcclient", "ftcClient", "ftwpclient", "afttpControl", "ftcpEntry", "aftpControl", "aftpclient", "aftpRemote", "ftpclient", "ftpStore", "aftPControl", "ftcpRemote", "ftwpClient", "ftPClient", "ftphpEntry", "ftpcPlayer", "fttpClient", "afttpConnect", "ftpAPI", "ftpcConnection", "ftpiControl", "ftpConnect", "fttpStore", "ftPclient", "ftpConn", "aftcpClient", "ftapClient", "fttpPlayer", "ftlpclient", "ftcpClient", "ftpRemote", "aftcpclient", "ftwpAPI", "aftcpStore", "ftphpclient", "afttpRemote", "ftwpControl", "fttpAPI", "aftcpConn", "ftapControl", "fttpControl", "ftpcclient", "ftcpConn", "aftpEntry", "aftcpControl", "aftpClient", "aftPClient", "ftcpConnect", "fttclient", "ftcControl", "aftcpEntry", "ftcpConnection", "aftpStore", "aftpConnection", "ftapclient", "afttpPlayer", "ftapAPI", "afttpclient", "ftcpPlayer", "fttClient", "ftpControl", "ftpiClient", "fttpConnect", "aftpPlayer", "ftcpControl", "ftlpConnect", "ftcpStore", "ftphpClient", "ftpPlayer", "fttpConn", "ftPConnection", "fttConn", "afttpAPI", "ftpConnection", "ftpcClient", "aftPclient", "fttpConnection", "ftapStore", "ftcpclient", "ftPControl", "afttpConnection", "ftpiclient", "aftpConnect", "afttpClient", "aftpConn", "ftlpClient", "fttpEntry"], "ftpHolder": ["ftpNholder", "ftPHholder", "ftcpHoster", "ftPHolder", "ftphholder", "ftpNolder", "ftphaver", "ftpNaver", "ftpHoster", "ftPHander", "ftpHeolder", "ftpHeoster", "ftpHaver", "ftpHeander", "ftphoster", "ftpholder", "ftphander", "ftpHholder", "ftpHander", "ftcpHaver", "ftpHeholder", "ftpNoster", "ftcpHolder", "ftcpHholder", "ftPHoster"], "iter": ["cer", "store", "test", "per", "ner", "itter", "former", "ptr", "inv", "walker", "reader", "other", "thread", "Iterator", "orient", "mem", "inner", "iner", "upper", "inter", "Iter", "valid", "altern", "outer", "ipper", "iterator", "loop", "counter", "enter", "writer", "oper", "ite", "impl", "exp", "ter", "ait", "ator", "actor", "list", "ser", "tr", "coll", "ir", "it", "order", "ver", "ne", "er"], "element": ["search", "item", "module", "address", "cell", "Element", "match", "number", "elt", "field", "sequence", "member", "variable", "append", "pair", "component", "test", "e", "event", "former", "detail", "record", "style", "manager", "attribute", "model", "button", "section", "lem", "editor", "relation", "worker", "instance", "xxx", "article", "ele", "iterator", "letter", "lements", "message", "result", "container", "environment", "activity", "action", "air", "document", "lement", "object", "data", "folder", "le", "actor", "finder", "empty", "peer", "info", "option", "atom", "er", "ment", "entry"]}}
{"id1": "823074", "id2": "11952735", "code1": "    public void convert(File src, File dest) throws IOException {\n        InputStream in = new BufferedInputStream(new FileInputStream(src));\n        DcmParser p = pfact.newDcmParser(in);\n        Dataset ds = fact.newDataset();\n        p.setDcmHandler(ds.getDcmHandler());\n        try {\n            FileFormat format = p.detectFileFormat();\n            if (format != FileFormat.ACRNEMA_STREAM) {\n                System.out.println(\"\\n\" + src + \": not an ACRNEMA stream!\");\n                return;\n            }\n            p.parseDcmFile(format, Tags.PixelData);\n            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n                System.out.println(\"\\n\" + src + \": contains UIDs!\" + \" => probable already DICOM - do not convert\");\n                return;\n            }\n            boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n            int pxlen = p.getReadLength();\n            if (hasPixelData) {\n                if (inflate) {\n                    ds.putUS(Tags.BitsAllocated, 16);\n                    pxlen = pxlen * 4 / 3;\n                }\n                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n                    System.out.println(\"\\n\" + src + \": mismatch pixel data length!\" + \" => do not convert\");\n                    return;\n                }\n            }\n            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n            ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n            ds.putUI(Tags.SOPClassUID, classUID);\n            if (!ds.contains(Tags.NumberOfSamples)) {\n                ds.putUS(Tags.NumberOfSamples, 1);\n            }\n            if (!ds.contains(Tags.PhotometricInterpretation)) {\n                ds.putCS(Tags.PhotometricInterpretation, \"MONOCHROME2\");\n            }\n            if (fmi) {\n                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n            }\n            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n            try {\n            } finally {\n                ds.writeFile(out, encodeParam());\n                if (hasPixelData) {\n                    if (!skipGroupLen) {\n                        out.write(PXDATA_GROUPLEN);\n                        int grlen = pxlen + 8;\n                        out.write((byte) grlen);\n                        out.write((byte) (grlen >> 8));\n                        out.write((byte) (grlen >> 16));\n                        out.write((byte) (grlen >> 24));\n                    }\n                    out.write(PXDATA_TAG);\n                    out.write((byte) pxlen);\n                    out.write((byte) (pxlen >> 8));\n                    out.write((byte) (pxlen >> 16));\n                    out.write((byte) (pxlen >> 24));\n                }\n                if (inflate) {\n                    int b2, b3;\n                    for (; pxlen > 0; pxlen -= 3) {\n                        out.write(in.read());\n                        b2 = in.read();\n                        b3 = in.read();\n                        out.write(b2 & 0x0f);\n                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n                        out.write(b3 >> 4);\n                    }\n                } else {\n                    for (; pxlen > 0; --pxlen) {\n                        out.write(in.read());\n                    }\n                }\n                out.close();\n            }\n            System.out.print('.');\n        } finally {\n            in.close();\n        }\n    }\n", "code2": "    public static boolean copyFile(String sourceName, String destName) {\n        FileChannel sourceChannel = null;\n        FileChannel destChannel = null;\n        boolean wasOk = false;\n        try {\n            sourceChannel = new FileInputStream(sourceName).getChannel();\n            destChannel = new FileOutputStream(destName).getChannel();\n            destChannel.transferFrom(sourceChannel, 0, sourceChannel.size());\n            wasOk = true;\n        } catch (Throwable exception) {\n            logger.log(Level.SEVERE, \"Exception in copyFile\", exception);\n        } finally {\n            try {\n                if (sourceChannel != null) sourceChannel.close();\n            } catch (Throwable tt) {\n            }\n            try {\n                if (destChannel != null) destChannel.close();\n            } catch (Throwable tt) {\n            }\n        }\n        return wasOk;\n    }\n", "label": 1, "substitutes": {"convert": ["CONversion", "compvert", "CONverting", "consverting", "Converted", "Converts", "consversion", "confer", "unprocess", "conversion", "unvert", "consvert", "unverted", "compverts", "CONVERT", "unfer", "Conversion", "Convert", "unversion", "CONverted", "unverts", "Converting", "CONfer", "ConVERT", "conprocess", "converting", "converts", "CONvert", "Conprocess", "conVERT", "consVERT", "Confer", "compprocess", "compversion", "converted"], "src": ["sr", "path", "sq", "cur", "scan", "file", "txt", "str", "sin", "orig", "rx", "st", "start", "SOURCE", "from", "filename", "url", "rs", "href", "RC", "ource", "img", "host", "cc", "buster", "sit", "uri", "rel", "config", "sc", "Source", "s", "loc", "ipl", "attr", "ur", "its", "req", "usr", "input", "upload", "scene", "hl", "http", "sys", "dist", "source", "SourceFile", "cont", "addr", "rest", "func", "rc", "ser", "ins", "pkg", "inst", "ebin", "stream", "iv"], "dest": ["foreign", "dir", "dat", " Destination", "txt", " orig", "orig", "disk", "test", "Dest", "target", "tif", "write", " destinations", "port", "img", "table", "result", "est", " Dest", " dst", " destination", "gin", "dist", "rest", "source", "temp", "mat"], "in": ["d", "serv", "file", "en", "io", "b", "is", "inf", "st", "up", "cin", "from", "reader", "r", "IN", "i", "inner", "ad", "res", "m", "ar", "as", "din", "isin", "input", "ind", "source", "In", "el", "ins", "rin", "l", "bin", "sql", "stream", "inn"], "p": ["d", "ping", "op", "pb", "P", "pt", "tp", "lp", "pd", "py", "pro", "h", "post", "vp", "part", "b", "prot", "per", "t", "dp", "j", "pg", "at", "cp", "r", "c", "i", "pl", "pi", "wp", "ph", "m", "pre", "f", "ps", "pm", "pers", "pe", "sp", "er", "parse", "fp", "parser", "ap", "pa", "pp", "rep", "pkg", "l", "it", "g", "php", "pc", "jp"], "ds": ["tp", "des", "lists", "gs", "rs", "dates", "ns", "nas", "ps", "ports", "dd", "db", "yes", "amps", "sets", "ks", "mys", "vs", "ats", "obs", "ils", "s", "bs", "hd", " des", " DS", "Ds", "drivers", "iffs", "dos", "outs", "qs", "tests", "d", "js", "aws", "eds", "pd", "points", "dds", "terms", "eps", "ws", "xs", "tes", "dl", "workers", "sd", "dt", " d", "edes", "posts", "loads", "scripts", "ras", "df", "els", "ss", "gd", "di", "dp", "ls", "hs", "cks", "ts", "uds", "DS", "cs", " dd", "ads", "its", " ads", "tags", "ands", "ags", "sts", "dh", " os", "ods", "docs", "os", "ys"], "format": ["settings", "path", "module", "filter", "fc", "at", "file", "mt", "ats", "tag", "id", "lat", "mode", "t", "sche", "feat", "style", "output", "act", "pattern", "pi", " Format", "status", "title", "f", "cf", "Format", "form", "ct", "feature", "table", "set", "parse", "name", "template", "pretty", "spec", "MAT", "source", "top", "fm", "shape", "version", "l", "it", "layout", "unit", "type", "policy", "mat", "size"], "hasPixelData": ["haspixelDATA", " hasPixeldata", "haspixeldata", "haspixelData", "Haspixeldata", "hasFramedata", "hasFrameDATA", "hasixeldata", "HaspixelData", "hasPixeldata", "hasixelData", "HasPixelDATA", "hasixelDATA", " hasPixelDATA", "hasFrameData", "HasPixelData", "HaspixelDATA", "hasPixelDATA", "HasPixeldata"], "inflate": ["inflATE", " invalidATE", "inFLate", "infolat", "incelATE", "informate", "inflicate", "Informate", "inFlicate", " inflATE", "inFlATE", "inFLocate", "inFlocate", "Informated", "informocate", "incelicate", "invalidocate", "infolate", "inflat", "Inflate", "inFlate", "invalidate", " invalidicate", "Inflat", " invalidate", " inflocate", "incelate", "incelocate", " invalidocate", " inflicate", "infolocate", "inFLat", "Informat", "informated", "Inflated", "informat", "inFLated", "invalidicate", "infolated", "inflated", "invalidATE", "Inflocate", "Informocate", "inflocate"], "pxlen": ["xylin", "mmlength", "pxlength", "cpden", "xplength", "pixellen", "cplen", "pexls", "pexden", "tmplength", "packlength", "mmlen", "mxlen", "cplength", "mmln", "pixelfun", "tmplin", "pexlen", "phpdec", "tmplen", "pixellength", "tmpln", "mxdec", "mmlin", "cpln", "pxls", "xyln", "mxlength", "packlen", "xpln", "pxden", "pxdec", "phpln", "mxln", "pexlength", "pxlin", "xpden", "packls", "xplen", "xylen", "packln", "pixells", "pexfun", "pxln", "packdec", "phplen", "packfun", "xylength", "phplength", "pexln", "pxfun"], "out": ["ln", "err", "log", "dir", "io", "crit", "store", "print", "obj", "up", "aos", "msg", "output", "inv", "ex", "res", "inter", "outer", "prefix", "net", "screen", "conn", "init", "user", "cfg", "writer", "gr", "client", "pretty", "name", "sys", "OUT", "group", "list", "Out", "sum", "gov", "cmd", "ou", "outs", "temp"]}}
{"id1": "20717531", "id2": "14464131", "code1": "    public static String encrypt(String plainText) {\n        if (TextUtils.isEmpty(plainText)) {\n            plainText = \"\";\n        }\n        StringBuilder text = new StringBuilder();\n        for (int i = plainText.length() - 1; i >= 0; i--) {\n            text.append(plainText.charAt(i));\n        }\n        plainText = text.toString();\n        MessageDigest mDigest;\n        try {\n            mDigest = MessageDigest.getInstance(\"SHA-256\");\n        } catch (NoSuchAlgorithmException e) {\n            return plainText;\n        }\n        mDigest.update(plainText.getBytes());\n        byte d[] = mDigest.digest();\n        StringBuffer hash = new StringBuffer();\n        for (int i = 0; i < d.length; i++) {\n            hash.append(Integer.toHexString(0xFF & d[i]));\n        }\n        return hash.toString();\n    }\n", "code2": "    public static void main(String[] args) {\n        try {\n            URL url = new URL(\"http://hostname:80\");\n            URLConnection conn = url.openConnection();\n            for (int i = 0; ; i++) {\n                String headerName = conn.getHeaderFieldKey(i);\n                String headerValue = conn.getHeaderField(i);\n                if (headerName == null && headerValue == null) {\n                    break;\n                }\n                if (headerName == null) {\n                }\n            }\n        } catch (Exception e) {\n        }\n    }\n", "label": 0, "substitutes": {"encrypt": ["decipher", "uncrypted", "decryption", "Encrypt", "encrypted", "uncrypt", "Encryption", "decrypted", "uncipher", "encryption", "Encrypted", "Encipher", "encipher", "decrypt", "uncryption"], "plainText": ["publicOutput", "broadDelete", " plainSource", "publictext", "plainData", "cleantext", "plainSource", "broadTEXT", "longSource", "plainUrl", "ainPassword", "plainDelete", "leadText", "floatPassword", "ainWord", "formText", "aintext", "plainPath", "plainPassword", "floatTEXT", "hardTEXT", "realTEXT", "hardtext", "ainText", "hardText", " plainUrl", "broadText", "ainTextColor", "ainName", "realText", "broadPassword", "ainOutput", "cleanName", "realSource", " plainConfig", " plainString", "plainConfig", "tableTEXT", "leadTEXT", "longText", "plainTEXT", "ainData", "plainWord", "longtext", "tableConfig", "leadtext", "ainString", "ainPath", "ainUrl", "longString", "hardWord", "leadPath", " plainData", "longTextColor", "ainTEXT", "plainString", " plainOutput", "ainConfig", " plainTextColor", "realtext", "formTEXT", "publicText", "formtext", "ainDelete", "longTEXT", " plainTEXT", "plainTextColor", "formWord", "floatDelete", "tableText", " plaintext", "plainOutput", " plainName", "publicData", "cleanText", "plaintext", "floatText", "cleanTEXT", " plainPath", "tableUrl", "plainName"], "text": ["path", "log", "binary", "txt", "Text", "cat", "print", "process", "t", "struct", "event", "nt", "start", "math", "select", "left", "output", "aut", "content", "view", "act", "ext", "write", "title", "quote", "ct", "prefix", "net", "buffer", "format", "message", "end", "ut", "all", "writer", "read", "input", "ind", "template", "comment", "cont", "source", "image", "TEXT", "sum", "tx", "translation", "tt", "quick", "word"], "i": ["I", "point", "print", "uni", "t", "ini", "cgi", "iy", "ci", "m", "f", "gu", "qi", "ix", "ui", "y", "v", "ic", "zi", "p", "gi", "io", "z", "in", "\u0438", "phi", "oi", "ri", "mi", "iu", "cli", "ims", "o", "iter", "ms", "chain", "ip", "ori", "ti", "li", "id", "my", "is", "ity", "si", "ni", "n", "pi", "yi", "multi", "init", "ei", "x", "im", "ai", "sim", "asi", "hi", "bi", "it", "ami", "ji", "di", "ki", "ii", "j", "index", "ski", "uri", "q", "xi", "u", "eu", "us", "g"], "mDigest": ["mDoested", "mDose", "mHashest", " mHashested", " mDest", " mDested", " mHashum", "mDiggest", "mFindgest", "Mdigest", "MDigse", " mDigester", " mDigum", "Mdiger", "mdigum", "mHashum", " mHashest", "Mdigse", "mDested", " mDester", " mHashger", "mExecested", "mMDest", "mFinder", "Mdiggest", " mDher", "mMDse", " mDigger", "mExecest", "mMacse", "mHashested", "mdigger", "mDiger", "mdiggest", "mDse", "mdigest", "mDigher", "mMDgest", "mDoest", "mHashger", " mDse", "mDigse", "mDigested", "mDigger", "mdigested", "mdigester", " mDigested", "mExecger", "MDiggest", "mFindse", "mDester", "mDher", "mMacest", "mdigher", " mDigher", "mExecum", " mDigse", "mMDer", "mDigum", "mdigse", "MDiger", "mDigester", "mMacested", "MDigest", "mMacester", "mFindest", "mDest", "mDoher", "mdiger"], "d": ["dec", "v", "da", "dat", "h", "p", "ld", "pd", "fd", "dot", "di", "t", "b", "e", "ed", "de", "j", "nd", "D", "r", "dx", "c", "n", "a", "m", " D", "md", "f", "sd", "dd", "s", "diff", "db", "ds", "cd", "u", "x", "bd", "done", "dh", "l", "with", "df", "g", "dict", "y", "dc", "w"], "hash": ["search", "filter", "h", "square", "radius", "always", "tag", "ash", "ah", "print", "id", "test", "shadow", "hz", "total", "ssh", "style", "href", "rh", "check", "block", "code", "summary", "html", "table", "buffer", "message", "oh", "all", "shift", "random", "hex", "our", "save", "report", "key", "password", "sha", "header", "array", "Hash", "tr", "dh", "handle", "sum", "cache", "dict", "checked", "sh", "div", "her", "flash"]}}
{"id1": "841724", "id2": "16308040", "code1": "    private static void readAndRewrite(File inFile, File outFile) throws IOException {\n        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n        Dataset ds = DcmObjectFactory.getInstance().newDataset();\n        dcmParser.setDcmHandler(ds.getDcmHandler());\n        dcmParser.parseDcmFile(null, Tags.PixelData);\n        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        System.out.println(\"reading \" + inFile + \"...\");\n        pdReader.readPixelData(false);\n        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n        ds.writeDataset(out, dcmEncParam);\n        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n        System.out.println(\"writing \" + outFile + \"...\");\n        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        pdWriter.writePixelData();\n        out.flush();\n        out.close();\n        System.out.println(\"done!\");\n    }\n", "code2": "    public boolean update(String dbName, Query[] queries) throws ServiceException {\n        Connection con = null;\n        PreparedStatement pstmt = null;\n        int rows = 0;\n        try {\n            con = getDbConnection().getConnection(dbName);\n            con.setAutoCommit(false);\n            for (int i = 0; i < queries.length; i++) {\n                Query query = queries[i];\n                System.out.println(query.getSql());\n                pstmt = con.prepareStatement(query.getSql());\n                addParametersToQuery(query, pstmt);\n                rows += pstmt.executeUpdate();\n            }\n            con.commit();\n            return rows > 0;\n        } catch (DbException e) {\n            log.error(\"[DAOService::update]  \" + e.getMessage(), e);\n            log.error(\"[DAOService::update] Execute rollback \" + e.getMessage(), e);\n            try {\n                con.rollback();\n            } catch (SQLException e1) {\n                log.error(\"[DAOService::update] Errore durante il rollback \" + e.getMessage(), e);\n                throw new ServiceException(e.getMessage());\n            }\n            throw new ServiceException(e.getMessage());\n        } catch (SQLException e) {\n            log.error(\"[DAOService::update]  \" + e.getMessage(), e);\n            try {\n                con.rollback();\n            } catch (SQLException e1) {\n                log.error(\"[DAOService::update] Errore durante il rollback \" + e.getMessage(), e);\n                throw new ServiceException(e.getMessage());\n            }\n            throw new ServiceException(e.getMessage());\n        } finally {\n            closeConnection(con, pstmt, null);\n        }\n    }\n", "label": 0, "substitutes": {"readAndRewrite": ["readAndrewWrite", "readAndResrite", "readAndResend", "readAndReprites", "readAndRewWrite", "readAndrewrites", "readAndRewend", "readAndResrites", "readAndrewend", "readAndReprite", "readAndResWrite", "readAndRepWrite", "readAndRewrites", "readAndRepend", "readAndrewrite"], "inFile": ["docFile", "InFilename", "inFILE", "docFILE", "initFilename", "docFilename", "Infile", "inputFile", "iTime", "inputFilename", "iFilename", "INPlace", " inFilename", "outfile", " infile", "inputFace", "InFile", "infile", "INFILE", "INFilename", "INFace", "inPlace", "inFace", "initFile", "initFace", "iFile", "initPlace", "INFile", "iFILE", "inputPlace", "inTime", "outFilename", "INTime", "inFilename", "docTime"], "outFile": ["outFILE", "checkFile", "inFILE", "checkFilename", " outFilename", "checkfile", " outfile", "nameFILE", " outFILE", "reportFILE", "outfile", "reportFile", "toFilename", "infile", "nameFile", "reportFilename", "tofile", "checkFILE", "namefile", "outFilename", "nameFilename", "inFilename", "toFILE", "reportfile", "toFile"], "iis": ["liisc", "eIS", " iIS", "eis", "iiss", "iisc", "ii", "liIs", "iIS", "Iiss", " iisc", "liris", "iiis", "Iis", "diIs", "aiis", "iris", "iiris", "diiss", "IIs", "iIs", " iiss", "diis", "aiIS", "iiisc", "dii", " ii", " iIs", "liis", "Ii", "iiIs", " iris", "aiIs", "eIs"], "dcmParser": ["dcfStatement", "dmodulePrivate", " dpmPar", " dpmLoader", "dmmAdapter", "dmoduleParser", " dpmReader", "dpmLoader", "dfmLoader", "dromAssistant", "dmmmAdapter", "dcmAssistant", "DpmAdapter", "dpmparser", "dcfReader", "dmmparser", "dcfParser", "DpmReader", "DcmAdapter", "dcomParser", "dmmmParser", "dmoduleReader", " dcmarser", " dcmLoader", "dcommReader", "dcrParser", "deromarser", "dcrBuilder", "dcmBuilder", "dmparser", "dpcParser", "dpmParser", "dpmarser", "dmmarser", "dfmParser", "dromListener", "dcomLoader", "dcomBuilder", "dcomReader", " dcmListener", "decmReader", "drumBuilder", "dpmAssistant", "dpcPrivate", "drumReader", "dmmmReader", "dpmReader", "dpmBuilder", "dromparser", "decmParser", "dpmPar", "DcmBuilder", "dmmmparser", "dcmLoader", " dpmParser", "decmarser", " dcmparser", "dcrReader", " dpmPrivate", "dpmListener", "deromReader", "drumParser", " dpmBuilder", "dromarser", "decmparser", "dcommParser", "dmParser", " dcmPar", "Dpmparser", "dmmParser", "dfmBuilder", "deromparser", "dpcAssistant", "dmmReader", "DpmParser", "dromParser", "dgrPar", "dgrStatement", " dcmAssistant", "dcfPar", "dcmarser", " dcmBuilder", "DcmReader", " dcmReader", " dpmStatement", "dmoduleAssistant", "dpcReader", "dcommAssistant", "dromReader", " dpmarser", "dcmparser", "dcrparser", "DcmPar", "dmarser", "dpmAdapter", " dpmAssistant", "dcmReader", "dfmReader", "dgrReader", "dcmPrivate", "DpmPar", "dmReader", " dpmparser", "DpmBuilder", "dcmStatement", "dcmListener", "dpmPrivate", " dcmPrivate", " dpmListener", "dcmPar", "dpmStatement", "drumPar", "dgrParser", "dcmAdapter", "Dcmparser", "deromParser", "dcommListener", " dcmStatement", "DcmParser"], "ds": ["d", "js", "ks", "eds", "outs", "pd", "des", "vs", "dat", "da", "dds", "gd", "qs", "dq", "eps", "ws", "xs", "in", "aos", "ls", "hs", "gs", "rs", "tes", "dl", "dx", "uds", "DS", "cs", "obs", "ims", "fs", "ns", "as", "ps", "ads", "sets", "ils", "sd", "dt", "dd", "s", "bs", "pers", "hd", " des", "its", "db", " DS", "services", "Ds", "sys", "data", "bd", "drivers", "sv", "details", "dos", "dh", "der", "ins", "df", "es", "ss", "ods", "os", "ys"], "pdReader": ["dpReader", "tdParser", "dpCar", "pdHelper", "hdReader", "pedReader", "tdWriter", "hdParser", "ddCar", "ddRunner", "hdWriter", "vdReader", "vdHelper", "pdCar", "dpLoader", "pdParser", "pdRead", "xdWriter", "xdReader", "ddRead", "pdLoader", "ddParser", "ddHelper", "vdWriter", "ddLoader", "xdLoader", "pedRunner", "tdReader", "hdRead", "ddReader", "vdLoader", "pdRunner", "tdRead", "pedLoader", "pedCar", "ddWriter", "xdHelper", "dpRunner"], "out": ["serv", "sw", "t", "conv", "msg", "aos", "output", "gen", "auto", "on", "opt", "screen", "ch", "all", "cfg", "name", "con", "list", "ins", "pos", "ent", "pool", "full", "w", "err", "v", "at", "p", "txt", "io", "up", "in", "flush", "c", "ex", " err", "inter", "status", "o", "net", "s", "raw", "tmp", "conn", "cn", "gr", "client", "sys", "data", "one", "sum", "cmd", "outs", "js", "log", "str", "id", "obj", "we", "to", "n", "null", "inner", "res", "outer", "desc", "writer", "over", "OUT", "Out", "cache", "it", "ou", "en", "nr", "nt", "inv", "go", "gt", "end", "oss", "cb", "co", "os"], "dcmEncParam": ["dmmencCmd", "dcmDecNum", "dmmEnPar", "dcmencPar", "dcmEscParam", "dmmencMsg", "dmmEncMsg", "dmmencParam", "dcmEncVal", "dcmEscVal", "dmmEnParam", "dmmEncVal", "dmmEncPar", "dcmEnNum", "dcmEnPar", "dcmDecCmd", "dcmencMsg", "dcmencCmd", "dmmEncNum", "dcmEnVal", "dcmEncMsg", "dcmEncCmd", "dcmDecParam", "dmmEncParam", "dcmencNum", "dcmEscNum", "dcmDecMsg", "dmmEncCmd", "dmmEnNum", "dcmEncNum", "dmmencNum", "dcmencParam", "dcmEscPar", "dcmEnParam", "dcmEncPar"], "pdWriter": ["dpReader", "PDWrite", "dpWrite", "dpEditor", "tdWriter", "pcwriter", "pidWrite", "dpWriter", "PDWriter", "tdWrite", "tdEditor", "PDEditor", "pdEditor", "pdwriter", "pidWriter", "pidWriting", "tdwriter", "pidwriter", "tdReader", "pdWrite", "pcWriter", "PDReader", "pcWrite", "pcWriting", "pdWriting", "tdWriting"]}}
{"id1": "17716716", "id2": "3683344", "code1": "    public static String plainToMD(LoggerCollection loggerCol, String input) {\n        byte[] byteHash = null;\n        MessageDigest md = null;\n        StringBuilder md5result = new StringBuilder();\n        try {\n            md = MessageDigest.getInstance(\"MD5\");\n            md.reset();\n            md.update(input.getBytes());\n            byteHash = md.digest();\n            for (int i = 0; i < byteHash.length; i++) {\n                md5result.append(Integer.toHexString(0xFF & byteHash[i]));\n            }\n        } catch (NoSuchAlgorithmException ex) {\n            loggerCol.logException(CLASSDEBUG, \"de.searchworkorange.lib.misc.hash.MD5Hash\", Level.FATAL, ex);\n        }\n        return (md5result.toString());\n    }\n", "code2": "    private static String genRandomGUID(boolean secure) {\n        String valueBeforeMD5 = \"\";\n        String valueAfterMD5 = \"\";\n        MessageDigest md5 = null;\n        StringBuffer sbValueBeforeMD5 = new StringBuffer();\n        try {\n            md5 = MessageDigest.getInstance(\"MD5\");\n        } catch (NoSuchAlgorithmException e) {\n            System.out.println(\"Error: \" + e);\n            return valueBeforeMD5;\n        }\n        long time = System.currentTimeMillis();\n        long rand = 0;\n        if (secure) {\n            rand = mySecureRand.nextLong();\n        } else {\n            rand = myRand.nextLong();\n        }\n        sbValueBeforeMD5.append(s_id);\n        sbValueBeforeMD5.append(\":\");\n        sbValueBeforeMD5.append(Long.toString(time));\n        sbValueBeforeMD5.append(\":\");\n        sbValueBeforeMD5.append(Long.toString(rand));\n        valueBeforeMD5 = sbValueBeforeMD5.toString();\n        md5.update(valueBeforeMD5.getBytes());\n        byte[] array = md5.digest();\n        String strTemp = \"\";\n        for (int i = 0; i < array.length; i++) {\n            strTemp = (Integer.toHexString(array[i] & 0XFF));\n            if (strTemp.length() == 1) {\n                valueAfterMD5 = valueAfterMD5 + \"0\" + strTemp;\n            } else {\n                valueAfterMD5 = valueAfterMD5 + strTemp;\n            }\n        }\n        return valueAfterMD5.toUpperCase();\n    }\n", "label": 1, "substitutes": {"plainToMD": [" stringAsmd", " stringFrommd", " stringTomd", " stringAsDM", " convertAsMD", " stringFromDM", " stringToMD", " stringAsMC", " convertToMC", " convertToDM", " stringToMC", " convertToMD", " convertAsMC", " stringFromMD", " convertAsmd", " convertTomd", " stringFromMC", " convertAsDM", " stringAsMD", " stringToDM"], "loggerCol": ["logGERColumn", "logggerCl", "logggerCol", "logggerCOL", "badinatorColl", "badgerCl", "loginatorCOL", "loginatorCl", " logggerCol", "badgerColl", " logggerColumn", "loggeCOL", " logggerCOL", "logGERCOL", "loggeColl", "logiderCol", "logGERCol", "loggeCol", "loggerCOL", "logiderColumn", "logggerColl", "loggeCl", "badinatorCl", " loggerCOL", "logggerColumn", "badinatorCOL", "badinatorCol", "loggerColl", "loginatorColl", "loginatorCol", "loggerColumn", "loggerCl", "badgerCol", " loggerColumn", "logiderCOL", "badgerCOL"], "input": ["text", "background", "subject", "string", "file", "str", " Input", "char", "hash", "Input", "up", "in", "context", "from", "output", "url", "pattern", "initial", "base", "config", "form", "prefix", "buffer", "example", "result", "out", "raw", "q", "active", "document", "data", "source", "value", "image", "hello", "request", "it", "this", " inputs", "command"], "byteHash": ["byteHas", "byteLength", "binaryHas", "ByteHas", "bytehash", "ByteMap", "byteMap", "byteshash", "ByteHash", "binaryhash", " byteMap", "binaryHash", " byteLength", " bytehash", "Bytehash", "ueLength", " byteHas", "bytesHash", "byteTr", "ByteTr", " byteTr", "ueHash", "uehash", "bytesMap", "bytesHas", "ueTr", "ByteLength"], "md": ["mac", "mc", "d", "dr", "pd", "material", "ld", "mt", "mod", "mo", "di", " MD", "hash", "sm", "med", "msg", "de", "nd", "met", " mc", "sam", "ng", "red", "ded", "det", "m", "def", "ct", "pm", "sd", "ms", "dd", "comp", "rm", "hd", "doc", "dig", "gr", "mm", "ds", "mk", "cd", "ind", "od", "bd", "mg", "mn", "add", "dm", "mp", "der", "df", "mb", "cmd", "gm", "MD", "grad", " Md", "cond"], "md5result": ["md64response", "md7string", "MD2string", "md65message", "md7result", "md64comment", "md3result", "md7results", " md5message", "md45result", "md2Result", "md5proc", " md5proc", "md5response", "MD2result", "md45response", "md3Result", "MD5comment", "md5message", "md5results", "md3string", "md5comment", "md64results", "MD2comment", " md5Result", "MD5result", "md8result", "md2result", "md2string", "md45comment", "MD2response", "MD5response", "MD2results", " md8proc", "md2comment", "md2response", "md8proc", "MD2Result", "md3message", "md65proc", "md8message", "md64result", "md7Result", "md5Result", "md8Result", " md8message", "md3results", "md5string", "md2results", "md65result", "md65Result", "md45results", "md3proc", "MD5Result", " md8Result", "MD5results", " md8result", "MD5string"], "i": ["ti", "v", "ji", "I", "ic", "li", "id", "io", "gi", "my", "b", "is", "di", "ii", "z", "in", "\u0438", "j", "span", "phi", "mi", "si", "index", "c", "n", "a", "pi", "ci", "m", "cli", "ims", "uri", "o", "iter", "multi", "q", "init", "xi", "ie", "ind", "gu", "u", "ei", "x", "qi", "im", "me", "key", "ai", "ix", "fi", "sim", "l", "ip", "us", "it", "bi", "ui", "y"]}}
{"id1": "7087108", "id2": "12380475", "code1": "    @Override\n    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws IOException {\n        String path = request.getPathTranslated().substring(0, request.getPathTranslated().length() - request.getPathInfo().length()) + request.getServletPath() + request.getPathInfo();\n        File file = new File(path);\n        if (file.exists()) {\n            FileInputStream in = new FileInputStream(file);\n            IOUtils.copyLarge(in, response.getOutputStream());\n            in.close();\n        }\n    }\n", "code2": "    public void transport(File file) throws TransportException {\n        if (file.exists()) {\n            if (file.isDirectory()) {\n                File[] files = file.listFiles();\n                for (int i = 0; i < files.length; i++) {\n                    transport(file);\n                }\n            } else if (file.isFile()) {\n                try {\n                    FileChannel inChannel = new FileInputStream(file).getChannel();\n                    FileChannel outChannel = new FileOutputStream(destinationDir).getChannel();\n                    inChannel.transferTo(0, inChannel.size(), outChannel);\n                } catch (IOException e) {\n                    log.error(\"File transfer failed\", e);\n                }\n            }\n        }\n    }\n", "label": 1, "substitutes": {"doGet": [" handleSet", " handleGet", " handleGET", "doGET", " doget", "invokeget", "doget", " doSet", " handleget", "invokeSet", " doGET", "doSet", "invokeGET", "invokeGet"], "request": ["local", "search", "address", "subject", "first", "post", "transform", "store", "construct", "the", "question", "position", "context", "select", "relative", "open", "attribute", "complete", "model", "begin", "call", "re", "index", "url", "query", "worker", "instance", "initial", "requ", "server", "message", "enter", "each", "get", "raw", "project", "req", "create", "core", "input", "setup", "reference", "frame", "Request", "document", " Request", "change", "http", "client", "application", "remove", "reset", "report", "QUEST", "hello", "quest", "version", "handle", "xml", "controller", "forward", "order", "info", "command"], "response": ["description", "respond", "ce", "print", "render", "onse", "success", "context", "output", "Response", "re", "view", "write", "connection", "res", "status", "server", "resp", "message", "result", "out", "page", "frame", "respons", "http", "application", "one", "report", "image", "default", "xml", "next", "reply", "body", "os"], "path": ["text", "where", "system", "dir", "string", "log", "p", "transform", "print", "test", "dest", "relative", "select", "prop", "route", "output", "filename", "url", "ath", "check", "query", "PATH", "pattern", "title", "location", "uri", "base", "config", "prefix", "th", "project", "name", "template", "patch", "hex", "Path", "value", "key", "chain", "mount", "pkg", "full", "temp"], "file": ["local", "lock", "binary", "bool", "bar", "resource", "channel", "FILE", "mail", "ile", "e", "be", "disk", "ca", "File", "run", "output", "rule", "filename", "model", "view", "real", "bo", "null", "to", "library", "fe", "relation", "check", "port", "console", "valid", "link", "f", "base", "job", "form", "table", "result", "page", "user", "db", "upload", "tree", "document", "name", "spec", "object", "load", "source", "le", "report", "image", "key", "chain", "handle", "full", "word"], "in": ["kin", "mc", "sample", "again", "ic", "en", "sin", "asin", "is", "up", "al", "cin", "copy", "reader", "ini", "IN", "inc", "i", "inner", "on", " din", "as", "s", "out", "din", "ck", "isin", "input", "ind", "mm", "read", "gin", "cm", "In", "source", "mn", "and", "or", "one", "pic", "ins", "l", "sum", "rin", "it", "bin", "thin", "con", "inn"]}}
{"id1": "12236729", "id2": "8917658", "code1": "        private void copy(File inputFile, File outputFile) throws Exception {\n            FileReader in = new FileReader(inputFile);\n            FileWriter out = new FileWriter(outputFile);\n            int c;\n            while ((c = in.read()) != -1) out.write(c);\n            in.close();\n            out.close();\n        }\n", "code2": "    public static void copyAll(URL url, Writer out) {\n        Reader in = null;\n        try {\n            in = new InputStreamReader(new BufferedInputStream(url.openStream()));\n            copyAll(in, out);\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        } finally {\n            close(in);\n        }\n    }\n", "label": 0, "substitutes": {"copy": [" combine", " recover", " operate", " dup", " cp", " upload", " restore", " paste", " copying", " seek", "cp", " delete", " parallel", " move", " join", " transfer", "paste", "Copy", "read", "transfer", " download", " duplicate", " Copy", " merge", " replicate", " clone", " append", " cat"], "inputFile": [" inputPost", " inputDir", " inputfile", "argumentPost", "configPost", "inputPost", "argumentfile", "outputPath", "outputile", "configFile", "argumentFile", " inputile", "inputDir", "configPath", "inPath", "inputfile", " inputPath", "inFile", "outputDir", "inputPath", "inile", "configfile", "inputile", "argumentPath", "inDir"], "outputFile": ["writeFilename", " outputFilename", "outputfile", "outPlace", "writeFile", " outputDir", "outPath", "outDir", " outputPlace", "outfile", "outputPath", "writeDir", "targetfile", "outputFilename", "inputDir", "inputfile", "outputPlace", "writePlace", "outputDir", "targetDir", "inputPath", "targetPath", "outFile", "outFilename", "targetFile"], "in": ["ic", "en", "sin", "old", "is", "inf", "per", "up", "al", "cin", "from", "ri", "reader", "ini", "IN", "inc", "i", "inner", "inside", "ze", " din", "on", "iter", "din", "init", "all", "input", "isin", "ind", "min", "read", "gin", "In", "ai", "ins", "rin", "ir", "it", "info", "bin", "con", "inn"], "out": ["v", "cos", "at", "log", "en", "by", "io", "print", "obj", "nt", "ot", "aos", "output", "flush", "to", "null", "ex", "check", "n", "write", "res", "auto", "outer", "on", "o", "dis", "net", "end", "cn", "user", "writer", "client", "sys", "con", "one", "OUT", "Out", "cache", "it", "g", "ou", "outs", "can", "ne", "co", "os"], "c": ["d", "mc", "v", "cos", "unc", "ce", "cu", "char", "k", "t", "count", "z", "arc", "current", "conf", "lc", "r", "cod", "cp", "n", "i", "cs", "code", "cr", "cc", "f", "cf", "ct", "cl", "ch", "cap", "cd", "u", "cm", "uc", "x", "nc", "cont", "ac", "chain", "cb", "C", "rc", "l", "cache", "character", "ec", "gc", "pc", "bc", "con"]}}
{"id1": "6379126", "id2": "411595", "code1": "    public boolean gerarTutorialPage() {\n        try {\n            File indexDir = criarDiretorioSite();\n            File cssDir = criarDiretorioCss();\n            File capDir = criarDiretorioCapitulos();\n            File licDir = criarDiretorioLicoes();\n            File midDir = criarDiretorioMidias();\n            File filesDir = criarDiretorioArquivos();\n            File videosDir = new File(filesDir + \"/videos\");\n            videosDir.mkdir();\n            File imagensDir = new File(filesDir + \"/imagens\");\n            imagensDir.mkdir();\n            String local = System.getProperty(\"user.dir\");\n            FileChannel srcCss1 = new FileInputStream(local + \"/bin/style/layout.css\").getChannel();\n            FileChannel destCss1 = new FileOutputStream(cssDir + \"/layout.css\").getChannel();\n            destCss1.transferFrom(srcCss1, 0, srcCss1.size());\n            srcCss1.close();\n            destCss1.close();\n            FileChannel srcCss2 = new FileInputStream(local + \"/bin/style/elementos.css\").getChannel();\n            FileChannel destCss2 = new FileOutputStream(cssDir + \"/elementos.css\").getChannel();\n            destCss2.transferFrom(srcCss2, 0, srcCss2.size());\n            srcCss2.close();\n            destCss2.close();\n            FileChannel srcCss3 = new FileInputStream(local + \"/bin/style/estilo-cap-lic-mid.css\").getChannel();\n            FileChannel destCss3 = new FileOutputStream(cssDir + \"/estilo-cap-lic-mid.css\").getChannel();\n            destCss3.transferFrom(srcCss3, 0, srcCss3.size());\n            srcCss3.close();\n            destCss3.close();\n            FileChannel srcCss4 = new FileInputStream(local + \"/bin/style/layout_ie.css\").getChannel();\n            FileChannel destCss4 = new FileOutputStream(cssDir + \"/layout_ie.css\").getChannel();\n            destCss4.transferFrom(srcCss4, 0, srcCss4.size());\n            srcCss4.close();\n            destCss4.close();\n            FileChannel srcCss5 = new FileInputStream(local + \"/bin/style/elementos_ie.css\").getChannel();\n            FileChannel destCss5 = new FileOutputStream(cssDir + \"/elementos_ie.css\").getChannel();\n            destCss5.transferFrom(srcCss5, 0, srcCss5.size());\n            srcCss5.close();\n            destCss5.close();\n            FileChannel srcCss6 = new FileInputStream(local + \"/bin/style/estilo-cap-lic-mid_ie.css\").getChannel();\n            FileChannel destCss6 = new FileOutputStream(cssDir + \"/estilo-cap-lic-mid_ie.css\").getChannel();\n            destCss6.transferFrom(srcCss6, 0, srcCss6.size());\n            srcCss6.close();\n            destCss6.close();\n            copiarMidias(videosDir, imagensDir);\n            escreverMidiasPage(midDir);\n            escreverLicoesPage(licDir);\n            escreverCapitulosPages(capDir);\n            FileWriter indexHtml = new FileWriter(indexDir + \"/index.html\");\n            indexHtml.write(escreverIndexHead() + escreverBodyHeader() + escreverIndexBodyContent() + escreverFooter());\n            indexHtml.close();\n            System.out.println(\"Site gerado com sucesso\");\n            JOptionPane.showMessageDialog(null, \"Web Site gerado com sucesso\", \"\\\\o/\", JOptionPane.INFORMATION_MESSAGE);\n            return true;\n        } catch (Exception e) {\n            e.printStackTrace();\n            System.err.println(\"Site n\u00e3o gerado\");\n            JOptionPane.showMessageDialog(null, \"Web Site n\u00e3o gerado corretamente\", \"Ops...\", JOptionPane.ERROR_MESSAGE);\n            return false;\n        }\n    }\n", "code2": "    private void displayDiffResults() throws IOException {\n        File outFile = File.createTempFile(\"diff\", \".htm\");\n        outFile.deleteOnExit();\n        FileOutputStream outStream = new FileOutputStream(outFile);\n        BufferedWriter out = new BufferedWriter(new OutputStreamWriter(outStream));\n        out.write(\"<html><head><title>LOC Differences</title>\\n\" + SCRIPT + \"</head>\\n\" + \"<body bgcolor='#ffffff'>\\n\" + \"<div onMouseOver=\\\"window.defaultStatus='Metrics'\\\">\\n\");\n        if (addedTable.length() > 0) {\n            out.write(\"<table border><tr><th>Files Added:</th>\" + \"<th>Add</th><th>Type</th></tr>\");\n            out.write(addedTable.toString());\n            out.write(\"</table><br><br>\");\n        }\n        if (modifiedTable.length() > 0) {\n            out.write(\"<table border><tr><th>Files Modified:</th>\" + \"<th>Base</th><th>Del</th><th>Mod</th><th>Add</th>\" + \"<th>Total</th><th>Type</th></tr>\");\n            out.write(modifiedTable.toString());\n            out.write(\"</table><br><br>\");\n        }\n        if (deletedTable.length() > 0) {\n            out.write(\"<table border><tr><th>Files Deleted:</th>\" + \"<th>Del</th><th>Type</th></tr>\");\n            out.write(deletedTable.toString());\n            out.write(\"</table><br><br>\");\n        }\n        out.write(\"<table name=METRICS BORDER>\\n\");\n        if (modifiedTable.length() > 0 || deletedTable.length() > 0) {\n            out.write(\"<tr><td>Base:&nbsp;</td><td>\");\n            out.write(Long.toString(base));\n            out.write(\"</td></tr>\\n<tr><td>Deleted:&nbsp;</td><td>\");\n            out.write(Long.toString(deleted));\n            out.write(\"</td></tr>\\n<tr><td>Modified:&nbsp;</td><td>\");\n            out.write(Long.toString(modified));\n            out.write(\"</td></tr>\\n<tr><td>Added:&nbsp;</td><td>\");\n            out.write(Long.toString(added));\n            out.write(\"</td></tr>\\n<tr><td>New & Changed:&nbsp;</td><td>\");\n            out.write(Long.toString(added + modified));\n            out.write(\"</td></tr>\\n\");\n        }\n        out.write(\"<tr><td>Total:&nbsp;</td><td>\");\n        out.write(Long.toString(total));\n        out.write(\"</td></tr>\\n</table></div>\");\n        redlinesOut.close();\n        out.flush();\n        InputStream redlines = new FileInputStream(redlinesTempFile);\n        byte[] buffer = new byte[4096];\n        int bytesRead;\n        while ((bytesRead = redlines.read(buffer)) != -1) outStream.write(buffer, 0, bytesRead);\n        outStream.write(\"</BODY></HTML>\".getBytes());\n        outStream.close();\n        Browser.launch(outFile.toURL().toString());\n    }\n", "label": 1, "substitutes": {"gerarTutorialPage": [" crearTutorialScreen", " crearTeoyServer", " crearTeutorialServer", " crearTiaryServer", " crearTiaryScreen", " crearTutorialPage", " crearTeutorialPages", " crearToyServer", " crearTiaryPages", " crearTeoyPages", " crearTeutorialPage", " crearTiblPages", " crearTeoyPage", " crearTeutorialScreen", " crearToyScreen", " crearToyPages", " crearTiblScreen", " crearTiblServer", " crearToyPage", " crearTiblPage", " crearTeoyScreen", " crearTutorialServer", " crearTutorialPages", " crearTiaryPage"], "indexDir": ["scriptDIR", "htmlFolder", "htmlDIR", "indexPath", "scriptDir", "appFolder", "htmlDir", "scriptPath", "scriptFolder", "indexDIR", "appDIR", "appPath", "indexFolder", "appDir", "htmlPath"], "cssDir": ["statsDir", "cmsdir", "csDirectory", "cmsDir", "stylesDb", "stylesDIR", "cmsDIR", "cssRect", "csdir", "icsDir", "cssDirectory", "statsDb", "ssDIR", "ssDirectory", "cssUrl", "icsDirectory", "stylesUrl", "csRect", "stylesDir", "cssdir", "ssDir", "statsUrl", "cmsDirectory", "stylesDirectory", "ssRect", "cssDIR", "ssDb", "csUrl", "ssdir", "cssDb", "icsdir", "stylesdir", "csDir", "icsRect", "ssUrl"], "capDir": ["cmpFile", "configTier", "cmpDb", "CapTier", "capTier", "CapFile", "CapDb", "capFile", "cmpTier", "configDb", "configDir", "cmpDir", "configFile", "CapDir", "capDb"], "licDir": ["liaDb", "licDs", "liaDs", "libDs", "vidDir", "vidRot", "licDb", "libDb", "libRot", "vidDs", "liaRot", "liaDir", "vidDb", "libDir", "licRot"], "midDir": ["pidCat", "manCat", "midDirectory", "midRot", "mnCat", "pidDir", "manRot", "mnDir", "mnRot", "manDir", "pidRot", "pidDirectory", "mnDirectory", "manDirectory", "midCat"], "filesDir": ["framesFolder", "framesIter", "sectionsRect", "framesRel", "videosdir", "framesDir", "sectionsDir", "pagesDir", "filesFolder", "videosRel", "tagsIter", "framesFix", "pagesFolder", "framesRect", "tagsJar", "filesFix", "filesDIR", "filesdir", "videosFolder", "pagesRel", "framesDIR", "sectionsIter", "filesRel", "framesdir", "pagesdir", "tagsRect", "imagesDir", "sectionsJar", "videosFix", "filesIter", "filesJar", "framesJar", "imagesFix", "filesRect", "videosDIR", "imagesDIR", "imagesFolder", "tagsDir"], "videosDir": ["versionsFile", "versionsFolder", "videosdir", "imagesdir", "imagesFile", "videosFile", "videosFolder", "videodir", " videosFolder", "imagesDir", "videoFolder", "imagesFolder", " videosFile", "videoDir", "versionsDir", " videosdir"], "imagensDir": ["imagensesDir", "imagensFolder", " imagensIn", "imagetsDir", "imagotsDir", "imagmesDirectory", "imagearsDir", "imagotsDirectory", " imagensFolder", "imgetsDir", "imgensDir", " imagensDb", "imagensesDb", " imagetsDb", "imgetsFolder", "imgetsDirectory", "imagetsDb", "imagmesDir", "imagetsDirectory", "imagotsFolder", "imagotsDIR", "imagetsIn", " imagetsIn", "imagearsFolder", "imgensDIR", "imagensIn", "imagetsDIR", "imagensDirectory", "imagmesDIR", "imagmesFolder", "imagensesFolder", "imagetsFolder", "imagensDIR", "imagensesIn", "imagearsDb", "imagearsIn", " imagetsFolder", " imagetsDir", "imagensDb", "imgensDirectory", "imgensFolder", "imgetsDIR"], "local": ["where", "system", "localhost", "val", "western", "dir", "lib", "lock", "parent", "back", "mail", "part", "test", "remote", "alpha", "internal", "managed", "al", "current", "south", "upper", "present", "location", "valid", "initial", "Local", "base", "pal", "single", "server", "serial", "land", "loc", "global", "root", "tmp", "simple", "central", "pid", "shared", "client", "hid", "util", "http", "home", "self", "list", "personal", "l", "installed", "standard", "full", "state", "temp", "install"], "srcCss1": ["srcSss3", "srcCssasso", "srcSCss2", "srcCssOnce", "srcScss2", "srcCson2", "srcCSS0", "srcCass1", "srcScss3", "srcSCss0", "srcCass10", "srcCxx10", "srcSCss1", "srcCson1", "srcCfgOnce", "srcLass10", "srcChess10", "srcLassOnce", "srcCss10", "srcCcss0", "srcCcss3", "srcLssOnce", "srcCson10", "srcChess0", "srcSCass3", "srcChess1", "srcCassasso", "srcCass0", "srcSssOnce", "srcCSS2", "srcSss2", "srcCcss1", "srcCfg2", "srcChessasso", "srcCss0", "srcSCass1", "srcCfg1", "srcCass2", "srcSss1", "srcLss2", "srcCassOnce", "srcCxxasso", "srcCass3", "srcCSS1", "srcLss10", "srcCxx1", "srcSCass0", "srcSCass2", "srcScssOnce", "srcCfg3", "srcLass1", "srcLss1", "srcCcssOnce", "srcCSS3", "srcCcss10", "srcScss1", "srcCsonOnce", "srcSCss3", "srcCcss2", "srcLass2", "srcCxx0"], "destCss1": ["destCass5", "destSass0", "destChess0", "destCrss0", "destCxxPre", "destScss0", "destCcss100", "destCxx2", "destScss1", "destSss2", "destCss0", "destChess100", "destSassPre", "destCass2", "destCxx0", "destCcssPre", "destScss2", "destChess1", "destSss5", "destScss5", "destCass1", "destCxx1", "destCcss2", "destSss100", "destSss1", "destCss100", "destCcss1", "destCrss1", "destCassPre", "destSss0", "destCrss2", "destCcss0", "destSass100", "destSssPre", "destCcss5", "destSass1", "destCssPre", "destCrss5", "destCass100", "destSass2", "destCass0", "destChess2"], "srcCss2": ["srcCcss4", "srcCsv52", "srcCtx1", "srcSCss2", "srcCss8", "srcCsv2", "srcCffee1", "srcCson2", "srcCsv3", "srcCcssTwo", "srcSCss1", "srcCson1", "srcCfg4", "srcCcss52", "srcCson8", "srcCcss3", "srcCtxTwo", "srcCson4", "srcCcss48", "srcCsv48", "srcCcss1", "srcCtx2", "srcCfg8", "srcCfg2", "srcCsv1", "srcCass4", "srcSCass1", "srcCfg1", "srcCass2", "srcCss52", "srcCss48", "srcCffee52", "srcSCss4", "srcCssTwo", "srcCassTwo", "srcCcss8", "srcSCass2", "srcSCssTwo", "srcSCassTwo", "srcCffee3", "srcSCass4", "srcCffee2", "srcCass1", "srcCcss2", "srcCtx4"], "destCss2": ["destCcss02", "destCcs42", "destCrosse1", "destSss2", "destCcss56", "destCcs2", "destCass3", "destCcss42", "destCss42", "destCss56", "destCass2", "destCSS3", "destCrosse2", "destCcss4", "destCcs3", "destCss02", "destCcss3", "destCass1", "destCass56", "destChess56", "destCcss2", "destSss1", "destCcss1", "destCass4", "destCSS42", "destSss3", "destSss56", "destCSS2", "destSass3", "destCSS02", "destSass1", "destCcs02", "destSass56", "destSass2", "destChess2", "destChess1", "destChess3", "destCrosse4"], "srcCss3": ["srcSss43", "srcScss3", "srcCossthree", "srcCrss1", "srcCcssThird", "srcCass4", "srcCass03", "srcCass3", "srcCSS1", "srcCass43", "srcCsv3", "srcCxx3", "srcCcss3", "srcCSS2", "srcCss03", "srcCsv1", "srcScss03", "srcCrss2", "srcCcss43", "srcCess6", "srcCoss3", "srcCcss4", "srcCcssThree", "srcCassThree", "srcCessthree", "srcCessThree", "srcCrss3", "srcCcssthree", "srcScss43", "srcCoss6", "srcSss3", "srcCess4", "srcCsv2", "srcCcss03", "srcCessThird", "srcCssthree", "srcCcss6", "srcCassThird", "srcCssThree", "srcCess3", "srcCxx43", "srcSss03", "srcCss43", "srcCssThird", "srcCxx03", "srcCSS3"], "destCss3": ["destCcss23", "destCss53", "destCass3", "destCass23", "destCSS30", "destCass2", "destCSS3", "destCass30", "destCcss53", "destCcss83", "destCcss3", "destCass03", "destCss23", "destCass1", "destCls83", "destCss83", "destCcss2", "destCls3", "destCfg3", "destCcss1", "destCess83", "destCess53", "destCls53", "destCcss30", "destCfg23", "destCcss03", "destCess3", "destCSS1", "destCSS2", "destCss03", "destCss30", "destCfg03"], "srcCss4": ["srcCSS4", "srcCcss4", "srcCsv2", "srcScss2", "srcCSSFour", "srcCcssFour", "srcSssFour", "srcCcss5", "srcCsv5", "srcSss2", "srcCSS2", "srcSss5", "srcCSS5", "srcScss4", "srcCssFour", "srcCsv4", "srcCsvFour", "srcScssFour", "srcScss5", "srcCcss2", "srcSss4"]}}
{"id1": "4686922", "id2": "4164833", "code1": "    public void extractResourceToFile(String resourcePath, File dest) {\n        InputStream in = getClass().getResourceAsStream(resourcePath);\n        try {\n            FileOutputStream out = FileUtils.openOutputStream(dest);\n            try {\n                IOUtils.copy(in, out);\n            } finally {\n                if (out != null) {\n                    out.close();\n                }\n            }\n        } finally {\n            if (in != null) {\n                in.close();\n            }\n        }\n    }\n", "code2": "    public static void buildDeb(File debFile, File controlFile, File dataFile) throws IOException {\n        long now = new Date().getTime() / 1000;\n        OutputStream deb = new FileOutputStream(debFile);\n        deb.write(\"!<arch>\\n\".getBytes());\n        startFileEntry(deb, DEBIAN_BINARY_NAME, now, DEBIAN_BINARY_CONTENT.length());\n        deb.write(DEBIAN_BINARY_CONTENT.getBytes());\n        endFileEntry(deb, DEBIAN_BINARY_CONTENT.length());\n        startFileEntry(deb, CONTROL_NAME, now, controlFile.length());\n        FileInputStream control = new FileInputStream(controlFile);\n        byte[] buffer = new byte[1024];\n        while (true) {\n            int read = control.read(buffer);\n            if (read == -1) break;\n            deb.write(buffer, 0, read);\n        }\n        control.close();\n        endFileEntry(deb, controlFile.length());\n        startFileEntry(deb, DATA_NAME, now, dataFile.length());\n        FileInputStream data = new FileInputStream(dataFile);\n        while (true) {\n            int read = data.read(buffer);\n            if (read == -1) break;\n            deb.write(buffer, 0, read);\n        }\n        data.close();\n        endFileEntry(deb, dataFile.length());\n        deb.close();\n    }\n", "label": 1, "substitutes": {"extractResourceToFile": ["extractResourceAsFiles", "extractResourceAsStream", "extractResourceFromfile", "extractResource2Files", "extractResources2Files", "extractResource2File", "extractResources2file", "extractResourceToStream", "extractResourceToFiles", "extractResource2file", "extractResourceFromFiles", "extractResource2Stream", "extractResourcesToStream", "extractResourceAsfile", "extractResourcesTofile", "extractResourcesToFiles", "extractResourceTofile", "extractResources2File", "extractResourceFromFile", "extractResourceAsFile", "extractResourcesToFile", "extractResourceFromStream", "extractResources2Stream"], "resourcePath": ["resourceLocation", "resourceIn", "templatepath", "uriPath", "resourceUrl", "uriName", " resourcepath", "uriLocation", "ResourceName", "attributePath", "resourceName", "templateIn", "ResourcePath", "ResourceIn", "Resourcepath", "ResourceLocation", " resourceName", "templateName", "attributeLocation", "attributeName", "resourcepath", "ResourceUrl", "templatePath", "attributeUrl", " resourceIn", "uriUrl"], "dest": ["trans", "decl", "dir", "dat", "des", "parent", "cat", "orig", "src", "Dest", "prop", "target", "output", "nom", "to", "null", "good", "mem", "img", "origin", "opt", "desc", "result", "sp", "end", "tmp", "loc", "etc", "dist", "source", "cont", "rest", "home", "self", "comb", "gov", "this", "temp", "coord", "lit", "w"], "in": ["local", "ln", "mc", "file", "id", "sin", "resource", "is", "inf", "up", "al", "no", "cin", "conf", "from", "mi", "re", "r", "ini", "IN", "i", "inc", "inner", "inside", "m", " din", "f", "on", "iter", "din", "raw", "init", "all", "isin", "input", "ind", "gin", "In", "source", "or", "ins", "rin", "l", "it", "bin", "ne", "none", "con", "inn"], "out": ["v", "cos", "again", "at", "en", " Out", "io", "print", "b", "t", "conv", "stable", "nt", "ot", "obj", "aos", "no", "output", "to", "n", "null", "i", "write", "inner", "res", "outer", "f", "col", "o", "note", "on", "net", "oss", "tmp", "cn", "ch", "writer", "exit", "client", "sys", "con", "OUT", "Out", "na", "cache", "it", "pool", "ou", "outs", "can", "ne", "co", "os", "w"]}}
{"id1": "7044685", "id2": "3945236", "code1": "    static String encrypt(String plaintext) {\n        MessageDigest d = null;\n        try {\n            d = MessageDigest.getInstance(\"SHA-1\");\n            d.update(plaintext.getBytes(\"UTF-8\"));\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return new String(Base64.encodeBase64(d.digest()));\n    }\n", "code2": "    public static void hash(String... plainTexts) {\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            for (String plainText : plainTexts) md.update(plainText.getBytes());\n            byte b[] = md.digest();\n            int i;\n            StringBuffer buf = new StringBuffer(\"\");\n            for (int offset = 0; offset < b.length; offset++) {\n                i = b[offset];\n                if (i < 0) i += 256;\n                if (i < 16) buf.append(\"0\");\n                buf.append(Integer.toHexString(i));\n            }\n            String str = buf.toString();\n            System.out.println(\"result: \" + buf.toString());\n            System.out.println(\"result: \" + buf.toString().substring(8, 24));\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        }\n    }\n", "label": 1, "substitutes": {"encrypt": ["crypted", "Encrypt", "encrypted", " encryption", "Encryption", "encryption", "Encrypted", " encrypted", "cryption", "crypt"], "plaintext": ["plainstring", " plainstring", "messagedata", "messageText", "messageprint", "plainText", "messagetext", "plaindata", " plainText", " plainprint", "maintext", "aintext", "aindata", "mainstring", "ainstring", "mainText", "ainText", "plainprint", "ainprint", " plaindata"], "d": ["dec", "dr", "da", "pd", "dat", "h", "ld", "p", "mod", "gd", "debug", "fd", "di", "t", "e", "z", "did", "nd", "D", "c", "dx", "dl", "red", "ded", "ad", "m", "md", "ord", "f", "sd", "dd", "dal", "end", "hd", "dig", "db", "ds", "cd", "ind", "od", "bd", "done", "dm", "dh", "l", "df", "g", " md", "de", "y", "w"]}}
{"id1": "6009527", "id2": "7908169", "code1": "    private void doFinishLoadAttachment(long attachmentId) {\n        if (attachmentId != mLoadAttachmentId) {\n            return;\n        }\n        Attachment attachment = Attachment.restoreAttachmentWithId(MessageView.this, attachmentId);\n        Uri attachmentUri = AttachmentProvider.getAttachmentUri(mAccountId, attachment.mId);\n        Uri contentUri = AttachmentProvider.resolveAttachmentIdToContentUri(getContentResolver(), attachmentUri);\n        if (mLoadAttachmentSave) {\n            try {\n                File file = createUniqueFile(Environment.getExternalStorageDirectory(), attachment.mFileName);\n                InputStream in = getContentResolver().openInputStream(contentUri);\n                OutputStream out = new FileOutputStream(file);\n                IOUtils.copy(in, out);\n                out.flush();\n                out.close();\n                in.close();\n                Toast.makeText(MessageView.this, String.format(getString(R.string.message_view_status_attachment_saved), file.getName()), Toast.LENGTH_LONG).show();\n                new MediaScannerNotifier(this, file, mHandler);\n            } catch (IOException ioe) {\n                Toast.makeText(MessageView.this, getString(R.string.message_view_status_attachment_not_saved), Toast.LENGTH_LONG).show();\n            }\n        } else {\n            try {\n                Intent intent = new Intent(Intent.ACTION_VIEW);\n                intent.setData(contentUri);\n                intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);\n                startActivity(intent);\n            } catch (ActivityNotFoundException e) {\n                mHandler.attachmentViewError();\n            }\n        }\n    }\n", "code2": "    public String execute() {\n        String dir = \"E:\\\\ganymede_workspace\\\\training01\\\\web\\\\user_imgs\\\\\";\n        HomeMap map = new HomeMap();\n        map.setDescription(description);\n        Integer id = homeMapDao.saveHomeMap(map);\n        FileOutputStream fos;\n        try {\n            fos = new FileOutputStream(dir + id);\n            IOUtils.copy(new FileInputStream(imageFile), fos);\n            IOUtils.closeQuietly(fos);\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return list();\n    }\n", "label": 1, "substitutes": {"doFinishLoadAttachment": ["doFinishLoadAssachment", "doFinishLoadAttachachment", "doFinishShowDetached", "doFinishLoadAttention", "doFinishShowAttached", "doFinishShowAttention", "doFinishShowAttachment", "doFinishLoadDetached", "doFinishLoadDetention", "doFinishLoadAttached", "doFinishShowDetention", "doFinishLoadAttachached", "doFinishLoadAssention", "doFinishLoadAssached", "doFinishShowDetachment", "doFinishLoadDetachment", "doFinishLoadAttachention"], "attachmentId": ["detachedid", "attentionID", "atutationId", "attachmentById", "ATTociationKey", "attentionId", "attociationKey", "detachmentid", "atutationID", "attociationid", "attagramId", "attagramById", "attociationID", "attagramid", "attachmentName", "attachmentID", "attutationName", "attentionById", "detachedId", "atachmentName", "attachedById", "attgmentid", "atachmentID", "attociationById", "ATTachmentid", "ATTociationId", "atutationById", "attentionName", "detachedKey", "attgmentKey", "attachmentid", "detachmentKey", "attutationID", "atutationName", "ATTociationid", "ATTociationById", "attutationById", "ATTachmentId", "attachedId", "attociationId", "ATTachmentKey", "attachmentKey", "detachmentId", "attagramKey", "atachmentById", "ATTachmentById", "attutationId", "attociationName", "attgmentId", "attachedKey", "atachmentId", "attachedid"], "attachment": ["attached", "ATTached", "detacher", "attacher", "attachention", "addached", "attention", "detment", "contached", "ATTachment", "assention", "attachociation", "ATTention", "assacher", "attociation", "ATTacher", "detached", " attacher", " attached", "contachment", "attachaching", " attment", "attment", "detachment", "addaching", "attaching", "contment", "contacher", "association", "attachacher", "assachment", "attachachment", "addachment", "attachached", "addociation", "assaching", "assached"], "attachmentUri": ["attachmentOuri", "attachmentOURI", "attachmentURI", "attachmentupi", "attachmentUnri", "attachmentUnpi", "attachmentUtpi", "attentionUtpi", "attachmentTri", "attachmentOpi", "attachableOURI", "attentionUrid", "attachableOpi", "attachmentuRI", "attachmentUtrid", "attachmenturi", "attachmentTURI", "attentionUtRI", "attentionUtrid", "attachmentTuri", "attachmentUpi", "attachableUri", "attachmentTpi", "attentionUpi", "attachmentUURI", "attachableOuri", "attachableUURI", "attachableUuri", "attachmentUtRI", "attachmentOri", "attentionURI", "attachmentUnuri", "attentionUtri", "attachmentUtri", "attachableUpi", "attachmentUrid", "attentionUri", "attachmenturid", "attachableOri", "attachmentUuri", "attachmentUnURI"], "contentUri": ["contentUturi", "contentURres", "contentSric", "messageUric", "contentURuri", "contentures", "resourceURRI", "messageUtric", "contentUtris", "contentUruri", "messageUuri", "contenturi", "messageUtri", "contentUres", "contentUrri", "contentSri", "contentUtRI", "ContentUsris", "contentUris", "resourceURuri", "contentUtres", "contentUsuri", "contentUriri", "resourceURres", "messageUtiri", "contentUiri", "contentuuri", "resourceURI", "contentUtric", "contentuRI", "contentUsri", "contentUrid", "contentUrric", "ContentUri", "contentUsris", "contentUnris", "contentURri", "contentUtiri", "messageUturi", "contentUtrid", "ContentUrid", "resourceURri", "contentURI", "resourceUuri", "resourceUres", "resourceUri", "contentSuri", "messageUiri", "messageUri", "contentUtri", "contentUsrid", "ContentUuri", "contentUnri", "ContentUris", "ContentUsuri", "contentSiri", "contentURRI", "ContentUsrid", "ContentUsri", "contentUnuri", "contentUnrid", "contentUuri", "contentUric"], "file": ["local", "path", "picture", "dir", "h", "angle", "resource", "FILE", "disk", "channel", "ile", "ca", "File", "from", "output", "work", "filename", "rule", "content", "to", "port", "zip", "link", "f", "sf", "base", "play", "buffer", "table", "page", "format", "files", "entity", "init", "message", "user", "result", "db", "fp", "create", "upload", "tree", "name", "document", "template", "media", "line", "source", "le", "folder", "image", "save", "header", "il", "type", "pool"], "in": ["ic", "en", "io", "is", "inf", "up", "al", "cin", "from", "mi", " IN", "ini", "IN", "inc", "i", "inner", "inside", "ar", " din", "on", "play", "din", "isin", "input", "ind", "read", "gin", "ain", "In", "source", "and", "ins", "rin", "l", "it", "bin", "body", "sql", "con", "inn"], "out": ["os", "v", "serv", "put", "OU", "io", "print", "b", "conv", "stable", "nt", "obj", "aos", "output", "flush", "null", "to", "n", "i", "check", "write", "ex", "res", "auto", "outer", "o", "net", "screen", "oss", "all", "writer", "client", "sys", "OUT", "ao", "Out", "it", "g", "ou", "outs", "can", "co", "con", "w"], "intent": ["text", "ic", "prom", "activation", "asso", "term", "ence", "communication", "Activity", "event", "method", "context", "device", "service", "ink", "agent", "phrase", "concept", "complete", "inv", "ant", "automatic", "widget", "act", "intention", "venture", "query", "skill", "condition", "verbal", " Intent", "statement", "wordpress", "initial", "activate", "express", "entity", "voice", "q", "init", "ident", "activity", "action", "spirit", "alert", "man", "window", "xml", "json", "ent", "animate", "inst", "displayText", "continue", "ment", "entry"]}}
{"id1": "10383721", "id2": "2198730", "code1": "    @SuppressWarnings(\"unchecked\")\n    private ReaderFeed processEntrys(String urlStr, String currentFlag) throws UnsupportedEncodingException, IOException, JDOMException {\n        String key = \"processEntrys@\" + urlStr + \"_\" + currentFlag;\n        if (cache.containsKey(key)) {\n            return (ReaderFeed) cache.get(key);\n        }\n        List<Post> postList = new ArrayList<Post>();\n        URL url = new URL(urlStr);\n        HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n        connection.setRequestMethod(\"GET\");\n        connection.setRequestProperty(\"Cookie\", \"SID=\" + sid);\n        BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream(), \"UTF-8\"));\n        SAXBuilder builder = new SAXBuilder(false);\n        Document doc = builder.build(reader);\n        Element root = doc.getRootElement();\n        Namespace grNamespace = root.getNamespace(\"gr\");\n        Namespace namespace = root.getNamespace();\n        String newflag = root.getChildText(\"continuation\", grNamespace);\n        String title = root.getChildText(\"title\", namespace);\n        String subTitle = root.getChildText(\"subtitle\", namespace);\n        List<Element> entryList = root.getChildren(\"entry\", namespace);\n        DateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss'Z'\");\n        for (Element e : entryList) {\n            Post post = new Post();\n            post.setTitle(e.getChildText(\"title\", namespace));\n            try {\n                post.setDate(sdf.parse(e.getChildText(\"published\", namespace)));\n            } catch (ParseException e1) {\n            }\n            post.setUrl(e.getChild(\"link\", namespace).getAttributeValue(\"href\"));\n            post.setSauthor(e.getChild(\"author\", namespace).getChildText(\"name\", namespace));\n            String content = e.getChildText(\"content\", namespace);\n            if (StringUtils.isEmpty(content)) {\n                content = e.getChildText(\"description\", namespace);\n            }\n            if (StringUtils.isEmpty(content)) {\n                content = e.getChildText(\"summary\", namespace);\n            }\n            post.setContent(content);\n            postList.add(post);\n        }\n        ReaderFeed readerFeed = new ReaderFeed();\n        readerFeed.setTitle(title);\n        readerFeed.setSubTitle(subTitle);\n        readerFeed.setFlag(newflag);\n        readerFeed.setPostList(postList);\n        cache.put(key, readerFeed);\n        return readerFeed;\n    }\n", "code2": "    public void importCSV(InputStream csvfile) throws Exception {\n        try {\n            String[] qmarks = new String[columns.length];\n            for (int i = 0; i < qmarks.length; i++) {\n                qmarks[i] = \"?\";\n            }\n            if (cleartable) {\n                String delsql = \"delete from \" + table;\n                Statement delstm = conn.createStatement();\n                delstm.executeUpdate(delsql);\n            }\n            String sql = \"insert into \" + table + \" (\" + StringUtils.join(columns, \", \") + \") values (\" + StringUtils.join(qmarks, \", \") + \")\";\n            log.debug(\"SQL: \" + sql);\n            PreparedStatement stm = conn.prepareStatement(sql);\n            int datatypes[] = new int[columns.length];\n            for (int i = 0; i < columns.length; i++) {\n                Table tbl = project.getTableByName(table);\n                if (tbl == null) throw new OntopiaRuntimeException(\"Unknown table: \" + table);\n                Column col = tbl.getColumnByName(columns[i]);\n                if (col == null) throw new OntopiaRuntimeException(\"Unknown table column: \" + columns[i]);\n                if (col.getType() == null) throw new OntopiaRuntimeException(\"Column type is null: \" + col.getType());\n                DataType datatype = project.getDataTypeByName(col.getType(), \"generic\");\n                if (datatype == null) throw new OntopiaRuntimeException(\"Unknown column type: \" + col.getType());\n                String dtype = datatype.getType();\n                if (\"varchar\".equals(dtype)) datatypes[i] = Types.VARCHAR; else if (\"integer\".equals(dtype)) datatypes[i] = Types.INTEGER; else throw new OntopiaRuntimeException(\"Unknown datatype: \" + dtype);\n            }\n            LineNumberReader reader = new LineNumberReader(new InputStreamReader(csvfile));\n            for (int i = 0; i < ignorelines; i++) {\n                String line = reader.readLine();\n                if (line == null) break;\n            }\n            log.debug(\"[\" + StringUtils.join(columns, \", \") + \"]\");\n            int lineno = 0;\n            while (true) {\n                lineno++;\n                String line = reader.readLine();\n                if (line == null) break;\n                try {\n                    String[] cols = StringUtils.split(line, separator);\n                    if (cols.length > columns.length && !ignorecolumns) log.debug(\"Ignoring columns: \" + (columns.length + 1) + \"-\" + cols.length + \" '\" + line + \"'\");\n                    log.debug(\"CVALUES: \" + (columns.length + 1) + \"-\" + cols.length + \" '\" + line + \"'\");\n                    String dmesg = \"(\";\n                    for (int i = 0; i < columns.length; i++) {\n                        String col = cols[i];\n                        if (stripquotes) {\n                            int len = col.length();\n                            if (len > 1 && ((col.charAt(0) == '\"' && col.charAt(len - 1) == '\"') || (col.charAt(0) == '\\'' && col.charAt(len - 1) == '\\''))) col = col.substring(1, len - 1);\n                        }\n                        if (col != null && col.equals(\"\")) col = null;\n                        dmesg = dmesg + col;\n                        if (i < columns.length - 1) dmesg = dmesg + \", \";\n                        stm.setObject(i + 1, col, datatypes[i]);\n                    }\n                    dmesg = dmesg + \")\";\n                    log.debug(dmesg);\n                    stm.execute();\n                } catch (Exception e) {\n                    conn.rollback();\n                    throw new OntopiaRuntimeException(\"Cannot read line \" + lineno + \": '\" + line + \"'\", e);\n                }\n            }\n            conn.commit();\n        } finally {\n            if (conn != null) conn.close();\n        }\n    }\n", "label": 0, "substitutes": {"processEntrys": [" processEntries", "processENTries", "processENTrys", "processENTry", "processentrys", " processEntry", "processEntry", " processEntrs", "processentries", "processentry", "processentrs", "processEntrs", "processENTrs", "processEntries"], "urlStr": ["UrlString", "UrlSTR", "UrlSt", "urlRes", "urlSt", " urlRest", "uriRest", "UrlDec", "pathRes", "urlString", "UrlStr", "urlBr", "uriRes", "URLRes", "uriSt", " urlBr", "uriStr", "pathString", "urlDec", " urlRes", "urlSTR", "URLBr", "URLDec", "URLRest", "URLSt", "urlRest", "uriDec", "URLSTR", "URLStr", " urlString", " urlSTR", "pathSTR", "pathStr", "UrlRes", "uriBr", "uriSTR"], "currentFlag": ["reportedFlags", "currentFLAG", " currentStatus", " currentflag", "reportedflag", "uniqueFlags", "curStatus", "reportedFLAG", "curFlag", "newFlag", "newFlags", "currentStatus", "reportedStatus", "curflag", "newFLAG", " currentFlags", "currentflag", "curFlags", "currentFlags", "uniqueFLAG", "uniqueFlag", "reportedFlag"], "key": ["search", "seed", "item", "path", "Key", "description", "file", "step", "member", "by", "tag", "my", "char", "k", "hash", "service", "ke", "filename", "index", "pattern", "KEY", "label", "base", "reason", "sk", "set", "prefix", "message", "q", "column", "ek", "name", "template", "rand", "value", "keys", "chain", "tip", "pkg", "sum", "ey", "task", "token", "it", "info", "default", "y", "entry"], "postList": ["postGroup", " postlist", "feedGroup", "feedList", "feedMap", " postMap", "entryGroup", "entrylist", "entryMap", "postMap", "postlist", "feedlist", " postGroup"], "url": ["sl", "address", "log", "Url", "abs", "str", "nl", "b", "t", "browser", "loader", "ls", "open", "r", "dl", "atl", "ll", "https", "ssl", "link", "location", "f", "uri", "URL", "web", "loc", "sb", "get", "ur", "conn", "impl", "document", "u", "name", "http", "uc", "rl", "l", "au", "il", "org"], "connection": ["created", "description", "number", "operation", "communication", "io", "resource", "channel", "wrapper", "ion", "position", "context", "opening", "open", " Connection", "Connection", "creation", "c", "to", "network", "entry", "relation", "session", "condition", "statement", "close", "location", "language", "uri", "server", "web", "connect", "conn", "database", "writer", "reference", "document", "client", "http", "application", "socket", "pointer", "reset", "response", "directory", "character", "established", "information", "con", "creator", "command"], "reader": ["file", "io", "resource", "loader", "ner", "in", "context", "row", "Reader", "r", "ro", "inner", "rar", "feed", "runner", "iterator", "iter", "buffer", "message", "writer", "read", "parser", "input", "document", "client", "data", "reading", "driver", "response", "body", "er", "stream", "handler", "entry"], "builder": ["settings", "build", "layer", "uild", "builders", "hub", "bar", " builders", "b", "loader", "ner", "adder", "bridge", "row", "control", "manager", "bo", "good", "block", "built", "bus", "outer", "sf", "base", "building", "buffer", "web", "aker", "writer", "parser", "BU", "Builder", "full", "operator", "handler", "creator"], "doc": ["d", "dec", "dr", "study", "h", "file", "dir", "git", "DOC", "t", "Document", "res", "html", "m", "md", "city", "Doc", "def", "result", "ree", "db", "og", "writer", "tree", "document", "ml", "dom", "data", "pub", "man", "xml", "div", "g", "json", "tx", "unit", "body", "graph", "dc"], "root": ["roid", "local", "cover", "results", "owner", "has", "area", "m", "base", "feature", "container", "all", "document", "Root", "right", "this", "er", "entry", "rocket", " Root", "r", "instance", "host", "server", "loc", "zero", "data", "or", "body", "rar", "roots", "head", "first", "parent", "obj", "start", "oot", "record", "primary", "null", "ro", "scope", "res", "result", "element", "init", "tree", "mounted", "rap", "default", "xml", "wrap", "remote", "row", "mr", "original", "box", "node", "rank", "role", "table", "central", "rt", "ree", "self", "empty", "unit", "div", "os", "collection"], "grNamespace": ["GRnamesSpace", "GrNamesSpace", "GrNamespace", "grNamepace", "GrNameset", "GRNameset", "grNamesSpace", "grNamepaces", "GRNamesSpace", "GRnamespace", "GRNamespace", "GRnameset", "grNsSpace", "grnamesSpace", "grNset", "grnamespace", "grnamespaces", "grNspace", "GrNameet", "grNameet", "GrNamepace", "grNameSpace", "GrNameSpace", "grnameset", "GRnamespaces", "grNameset", "grNamespaces", "GRNamespaces"], "namespace": [" namesspace", "E", "Namespace", "namepace", "nameset", "Namespaces", " nameship", "termsspace", "termsistence", "namesSpace", "amesspace", "mascore", "namescore", "memberspace", "Nameset", "nameet", "namesistence", "space", "St", "amesSpace", "Feed", "membership", "mscore", "Entry", "spaced", "masacing", "sacing", "namesACE", " namesace", "s", "nsSpace", "nspaced", "termsSpace", "namespaces", "wordsSpace", "membersSpace", "Namesspace", "termspace", "Document", "New", "nsspace", "membersspace", " namesSpace", "namepaces", "Ent", "namesspace", "Secure", " namespaced", " namesistence", "nameship", "mspace", "wordsistence", "namesace", "termspaced", "maspaced", "ameship", " namespaces", "nspace", "Namesistence", "maspace", "wordspace", "context", "mspaced", "_", "msacing", " nameset", "namesacing", "nameistence", "membersace", "NamesSpace", "wordsACE", "namespaced", "Raw", "score", "amesistence", "nameace", " namesACE", "amesACE", "nameSpace", "amespace"], "newflag": ["Newstatus", "continuestatus", "nextstatus", "newflags", "continueFlag", "Newflags", "newFlag", "nextflag", "NewFlag", "continueflags", "nextflags", "continueflag", "newstatus", "Newflag", "nextFlag"], "title": ["text", "topic", "subject", "description", "file", "term", "t", "Title", "phrase", "filename", "label", "summary", "status", "published", "desc", "prefix", "format", "message", "lead", "name", "template", "value", "header", "tip", "type", "displayText", "itle"], "subTitle": ["Subtitle", "shortName", "subText", " subText", "subtitle", "shortText", "SubName", "shorttitle", "subName", "shortTitle", " subtitle", " subName", "SubTitle", "SubText"], "entryList": ["entlist", "ryList", "entArray", "entList", "EntrySet", "entryArray", "entrylist", "entL", "ryL", "postSet", "Entrylist", "EntryList", " entryArray", " entrylist", "rylist", "entryL", "entrySet", "rySet", "ryArray", "postlist", " entryL"], "sdf": ["sfx", " sfx", "sdef", "ssfd", "sDF", "sfd", "psdef", " sdef", "Sdef", " sdd", "sdd", "dsfx", "ssdf", "psde", "dsfd", " sde", "ssdd", "Sdf", " sDF", "Sde", "ssfx", "sde", " sfd", "dsdd", "dsdf", "psDF", "SDF", "psdf"], "e": ["v", "Element", "et", "en", "p", "ce", "E", "oe", "t", "event", "eg", "eur", "te", "be", "eeee", "ed", "de", "ee", "r", "fe", "c", "i", "a", "ea", "f", "ele", "o", "ge", "pe", "entity", "end", "element", "ep", "eb", "ue", "ie", "exp", "ei", "u", "x", "le", "el", "l", "ef", "it", "ent", "ec", "ve", "es", "er", "y", "entry", "se"], "post": ["local", "pod", "op", "follow", "pt", "log", "put", "p", "ost", "mod", "print", "process", "store", "test", "po", "t", "after", "row", "pg", "record", "skip", "admin", "check", "write", "status", "feed", "wp", "person", "link", "pre", "rel", "ps", "def", "form", "set", "prefix", "page", "end", "get", "draw", "pass", "Post", "create", "commit", "read", "exp", "object", "comment", "od", "posts", "save", "add", "pub", "POST", "pp", "man", "info", "next", "entry", "word"], "content": ["text", "path", "description", "ontent", "Content", "child", "section", "label", "code", "status", "link", "message", "entity", "format", "name", "template", "media", "document", "comment", "object", "data", "source", "value", "header", "layout", "body"]}}
{"id1": "7872659", "id2": "9033639", "code1": "    private static boolean genCustRatingFileAndMovieIndexFile(String completePath, String masterFile, String CustRatingFileName, String MovieIndexFileName) {\n        try {\n            File inFile = new File(completePath + fSep + \"SmartGRAPE\" + fSep + masterFile);\n            FileChannel inC = new FileInputStream(inFile).getChannel();\n            File outFile1 = new File(completePath + fSep + \"SmartGRAPE\" + fSep + MovieIndexFileName);\n            FileChannel outC1 = new FileOutputStream(outFile1, true).getChannel();\n            File outFile2 = new File(completePath + fSep + \"SmartGRAPE\" + fSep + CustRatingFileName);\n            FileChannel outC2 = new FileOutputStream(outFile2, true).getChannel();\n            int fileSize = (int) inC.size();\n            int totalNoDataRows = fileSize / 7;\n            ByteBuffer mappedBuffer = inC.map(FileChannel.MapMode.READ_ONLY, 0, fileSize);\n            int startIndex = 1, count = 0;\n            short currentMovie = 1;\n            while (mappedBuffer.hasRemaining()) {\n                count++;\n                short movieName = mappedBuffer.getShort();\n                int customer = mappedBuffer.getInt();\n                byte rating = mappedBuffer.get();\n                if (movieName != currentMovie) {\n                    ByteBuffer outBuf1 = ByteBuffer.allocate(10);\n                    outBuf1.putShort(currentMovie);\n                    outBuf1.putInt(startIndex);\n                    outBuf1.putInt(count - 1);\n                    outBuf1.flip();\n                    outC1.write(outBuf1);\n                    currentMovie = movieName;\n                    startIndex = count;\n                }\n                ByteBuffer outBuf2 = ByteBuffer.allocate(5);\n                outBuf2.putInt(customer);\n                outBuf2.put(rating);\n                outBuf2.flip();\n                outC2.write(outBuf2);\n            }\n            ByteBuffer endOfIndexFile = ByteBuffer.allocate(10);\n            endOfIndexFile.putShort(currentMovie);\n            endOfIndexFile.putInt(startIndex);\n            endOfIndexFile.putInt(100480506);\n            endOfIndexFile.flip();\n            outC1.write(endOfIndexFile);\n            outC1.close();\n            outC2.close();\n            return true;\n        } catch (IOException e) {\n            System.err.println(e);\n            return false;\n        }\n    }\n", "code2": "    public void testHttpsConnection() throws Throwable {\n        setUpStoreProperties();\n        try {\n            SSLContext ctx = getContext();\n            ServerSocket ss = ctx.getServerSocketFactory().createServerSocket(0);\n            TestHostnameVerifier hnv = new TestHostnameVerifier();\n            HttpsURLConnection.setDefaultHostnameVerifier(hnv);\n            URL url = new URL(\"https://localhost:\" + ss.getLocalPort());\n            HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();\n            SSLSocket peerSocket = (SSLSocket) doInteraction(connection, ss);\n            checkConnectionStateParameters(connection, peerSocket);\n            connection.connect();\n        } finally {\n            tearDownStoreProperties();\n        }\n    }\n", "label": 0, "substitutes": {"genCustRatingFileAndMovieIndexFile": [" genCustRatingFileAndMovieVersionfile", " genCustRatingFileAndVideoindexFiles", " genCustRatingFileAndVideoIndexFile", " genCustRatingFileAndMovieVersionFile", " genCustRatingFileAndMovieIndexfile", " genCustRatingFileAndVideoIndexfile", " genCustRatingFileAndVideoindexFile", " genCustRatingFileAndMovieVersionFiles", " genCustRatingFileAndMovieindexTable", " genCustRatingFileAndVideoindexfile", " genCustRatingFileAndMovieIndexFiles", " genCustRatingFileAndVideoIndexTable", " genCustRatingFileAndMovieIndexTable", " genCustRatingFileAndMovieindexFile", " genCustRatingFileAndVideoindexTable", " genCustRatingFileAndVideoIndexFiles", " genCustRatingFileAndMovieindexfile", " genCustRatingFileAndMovieVersionTable", " genCustRatingFileAndMovieindexFiles"], "completePath": ["CompleteLocation", " completeLocation", "CompleteNow", "pleteLocation", "CompleteDirectory", "completeRoot", "pleteScript", " completeDir", "CompletePath", "COMPLEPath", "totalRoot", "CompleteDir", "totalPod", "completeNow", "completeProject", " completesPath", "COMPLEDir", " completesLocation", "completeLog", "pletionProject", "totalLocation", "CompleteProject", "pletePath", "pleteProject", "pleteDir", "pletionDir", " completeDirectory", "completeLocation", "completePod", "COMPLELog", "fullLocation", " completesDirectory", " completesDir", "completeScript", "completeDir", "fullPod", "fullPath", "pletePod", "pletionPath", "CompleteLog", "pleteRoot", "pleteLog", "CompleteScript", "pletionNow", "pleteNow", "completeDirectory", "COMPLEScript", "totalPath", "fullRoot"], "masterFile": ["MasterFilename", " masterFilename", "currentPath", "masterfile", "MasterName", "managerFilename", "Masterfile", "completeName", "masterName", "MasterFile", "managerfile", "managerPath", " masterPath", "managerFile", "MasterPath", " masterfile", "currentName", "masterPath", "currentFile", "completefile", "masterFilename", "currentfile", "completeFile"], "CustRatingFileName": ["CustRankFileType", "CustRatingFieldInfo", "CustRatingFilesname", "CustRatingTableSet", "CustRatingFilenameNames", "CustRatingFieldType", "CustRatingTableType", "CustRatingTableInfo", "CustRatingfileType", "CustRatingFileInfo", "CustRatingFilesType", "CustRatingfileNames", "CustRankFilesType", "CustRatingFilesName", "CustRatingFilesInfo", "CustRatedfileSet", "CustRatingfileName", "CustRankFileInfo", "CustRatingFilenameType", "CustRatedFileNames", "CustRatingFilename", "CustRatedFileType", "CustRatingTablename", "CustRatingFilenameName", "CustRatedfileName", "CustRankFileName", "CustRankFilesName", "CustRatingFilenameSet", "CustRatingFileNames", "CustRankFilesname", "CustRatingFieldName", "CustRatingFieldname", "CustRatingTableNames", "CustRatingfileSet", "CustRatedFileName", "CustRankFilename", "CustRatedfileType", "CustRatedfileNames", "CustRatedFileSet", "CustRankFilesInfo", "CustRatingTableName", "CustRatingFileSet", "CustRatingFileType"], "MovieIndexFileName": ["MovieIndexFieldName", "MovieIndexFieldNames", "MovieIndexFILENumber", "MovieindexfileKey", "MovieIndexfileName", "MovieIndexTableKey", "MovieindexfileType", "MovieIndexfileNames", "MovieindexFileNames", "MovieIndexFileNames", "MovieIndexFILEName", "MovieindexFileKey", "MovieIndexFileNumber", "MovieindexFileName", "MovieindexfileNumber", "MovieIndexTableType", "MovieindexfileNames", "MovieIndexfileNumber", "MovieIndexFILENames", "MovieIndexFileKey", "MovieIndexFieldKey", "MovieIndexFILEType", "MovieIndexTableName", "MovieindexFileType", "MovieIndexfileType", "MovieIndexFieldType", "MovieIndexFileType", "MovieIndexTableNames", "MovieindexfileName", "MovieindexFileNumber", "MovieIndexfileKey"], "inFile": ["inFILE", "outC", "localFILE", "outF", "localfile", " infile", "outfile", " inFILE", "inF", "infile", "INFILE", "INC", "INF", "INFile", "INfile", "localFile", " inF", "outFile", "localC"], "inC": ["inCS", "intR", " inL", "inG", "outC", "inCL", " outC", "inCI", "inputFile", "iCS", " inR", "iCI", "outF", " inCS", "inputG", "intCS", " inG", "iR", "iC", "outG", "outL", "inF", " outL", " inCL", "inputC", "intC", " inCI", "intCI", "inR", "inL", " inF", "outFile", " outCL", "outCL", " outF", "inputF"], "outFile1": ["outFILE2", "outputPage9", "outputFile9", "outputFileOne", "outFile0", "outPage0", "outputPage1", "outfile1", "outPageOnce", "outPage1", "outFile6", "outfile2", "outFileOnce", "outChannelOne", "outFILE6", " outfile2", " outfile1", "outputPageOnce", " outfile6", " outfile0", "outputFileOnce", " outFile6", "outFileOne", "outChannel9", "outFILE0", "outputFile1", "outPage2", " outFile0", "outPageOne", "outChannel1", "outFILE1", "outFile9", "outPage6", "outputPageOne", "outChannelOnce", "outfile0", "outfile6", "outPage9"], "outC1": ["outROne", "outC0", "inFile2", "inC2", "outP2", "outR3", "inC3", "outP3", "outR1", "outC3", "inCOne", "outFileOne", "outCB2", "outR2", "inC1", "outCOne", "outPOne", "outc2", "outCB1", "outCB0", "outP1", "outc3", "outFile3", "outc0", "outCB3", "inFile1", "outc1", "inFile3", "inFileOne", "inC0"], "outFile2": ["outFile0", "outfile3", "outfile1", "exFile3", " outFile02", "outfile2", "outTableTwo", "outF3", "exChannel2", "outF1", "exChannel3", "outF2", "outfile02", "outTable3", "outChannel2", " outFile3", "outF0", "outChannel1", "outTable02", "outTable2", "outFile3", "outChannel3", "exChannel0", "exFile2", "outFileTwo", "exFile0", "outChannel0", "outFile02", "exChannel1", "outfile0", "exFile1", " outFileTwo", "outfileTwo"], "outC2": ["outB2", "outCTwo", "OutC4", "outC22", "outM22", "outS22", "outE1", "outBTwo", "allCTwo", "outR3", "outMTwo", "outB3", "outR4", "allB3", "OutC1", "allC2", "outSTwo", "outR1", "outC3", "OutR3", "outS3", "outM2", "OutR1", "OutR4", "allB22", "outM3", "allBTwo", "outC4", "outR2", "OutC2", "allC22", "outE4", "allC3", "allB2", "outE2", "OutR2", "outS2", "outE3", "outB22", "OutC3"], "fileSize": ["byteLength", "issueSIZE", " fileLength", "byteSize", "issueName", "baseCount", " fileCount", "baseSIZE", "FileCount", "fileLength", "fileSIZE", "baseName", "FileLength", "byteName", "byteSIZE", " fileSIZE", "FileName", " fileName", "fileName", "FileSIZE", "baseSize", "fileCount", "FileSize", "issueSize", "issueLength"], "totalNoDataRows": ["totalNoDataBoles", "totalNoDataSloles", "totalNodataRecoles", "totalNoDataRecoles", "totalNodataRows", "totalNodataRocks", "totalNoDataBues", "totalNodataRecocks", "totalNoDataBocks", "totalNodataRues", "totalNodataRecows", "totalNodataRoles", "totalNoDataSlues", "totalNodataRecues", "totalNoDataRecows", "totalNoDataRocks", "totalNoDataSlows", "totalNoDataBows", "totalNoDataRues", "totalNoDataRecues", "totalNoDataRoles", "totalNoDataSlocks", "totalNoDataRecocks"], "mappedBuffer": [" mappedQueue", "mapedBuffer", "mappedFB", "mmappedQueue", "mressedCallback", "MappedData", "mattedBB", " mapedFB", "mapedData", "mappedData", "mmappingbuffer", "mmappingBuff", " mapperCounter", " mapperBuffer", "mapperBB", "matchedBuff", "maphBuff", "MapperBuff", "MapedBB", "mappedCallback", " mapperQueue", "maphBuffer", " mapedCallback", "mressedFB", "MapedBuffer", "MappedBuff", "mappedCounter", "mappedQueue", "mappingBuff", "mapperBuff", "mappingBuffer", "mapperQueue", "mapBuffer", "MappedBB", " mappedCounter", "mressedBuff", "mappedbuffer", "mattedBuffer", "maphFB", "mapBB", "mapedbuffer", "mapedBuff", "mmappingQueue", "mappingQueue", "mattedBuff", "mappingData", "mapedBB", " mapedBuff", " mapedBuffer", "mappedBuff", " mapperBuff", "mapedQueue", "mmappedBuffer", "MapedBuff", "mapperBuffer", "mattedData", "mappingbuffer", "matchedQueue", "mapedFB", "MappedBuffer", " mappedCallback", " mappedFB", "mmappedBuff", "mapperbuffer", "matchedCounter", " mappedBuff", "mmappingBuffer", "MapperBB", "mappingCounter", "matchedBuffer", "maphCallback", "mapBuff", "mappingBB", "MapperBuffer", "mappedBB", "mressedBuffer", "mapedCallback", "MapedData", "mapperCounter", "mmappedbuffer"], "startIndex": [" startPoint", "Startindex", "startPoint", "endIndex", "currentPoint", "endIter", " startPage", " startPosition", " startindex", "endPage", "StartIndex", "startInd", "StartPos", "firstInd", "firstPosition", "currentIndex", "StartPosition", "firstindex", "initIndex", "StartIter", "StartPoint", "startPosition", "StartInd", "startPos", "firstIndex", "initPosition", "startPage", "currentPos", " startInd", " startPos", "initindex", "currentPosition", "startindex", " startIter", "startIter", "endPosition", "StartPage"], "count": ["created", "force", "batch", "number", "ctr", "first", "ount", "amount", "id", "process", "length", "start", "num", "cast", "current", "total", "limit", "more", "conf", "max", "call", "index", "c", "act", "n", "i", "check", "category", "code", "status", "counter", "result", "page", "found", "user", "core", "ind", "name", "Count", "last", "add", "mount", "list", "coll", "sum", "depth", "cloud", "order", "state", "next", "continue", "info", "find", "type", "now", "con", "size"], "currentMovie": ["primaryVideo", "reportedMovie", " currentImage", "currentlyMonster", " currentMouse", "currentImage", "currentDate", "currentMedia", "presentImage", "firstHero", "presentMovie", "activeVideo", " currentMonster", "primaryDate", " currentPlayer", "currentMouse", " currentMusic", "reportedMedia", "currentVideo", " currentSpider", "firstMonster", "reportedHero", "firstVideo", "presentMusic", "currentHero", "firstDate", "currentlyDate", "currentlySpider", "activePlayer", "reportedImage", "reportedMouse", "firstMedia", "firstMouse", "firstMovie", "currentlyMovie", "currentSpider", "activeMovie", "presentHero", "primaryMovie", "activeSpider", "reportedMusic", "currentMusic", "currentPlayer", " currentVideo", "currentMonster", "currentlyPlayer", " currentMedia", "primaryHero", "currentlyHero", "currentlyVideo", " currentHero"], "movieName": ["movieType", "filmname", "httpName", " movieType", "movieNAME", "ovieName", "httpname", "mpegname", "oviename", "ovieNAME", "mpegName", "MovieName", "monsterNAME", "movieTitle", "filmGroup", "monsterName", "filmName", "moviename", " moviename", "filmType", "ovieGroup", "httpNAME", "filmNAME", "Moviename", "movieGroup", "MovieType", "mpegGroup", " movieNAME", "monstername", "mpegNAME", "MovieTitle", " movieTitle", "filmTitle"], "customer": ["customizer", "customator", "Customity", "CustomER", "developER", "customity", "stickizer", " customator", "ustomorder", "customER", "Customer", "developizer", "sticker", "developity", "stickity", "developator", " customER", "ustomER", "customorder", "developorder", "ustomator", "stickER", "Customizer", "ustomer", "developer", " customorder"], "rating": ["ping", "card", "weight", " Rating", "term", "rage", "saving", "tag", "credit", "Rating", "scoring", "review", "ranking", "ating", "attribute", "scale", "rank", "rate", "rat", "boarding", "reporting", "format", "rated", "user", "core", "having", "heading", "score", "error", "reading", "strength", "testing", "playing", "setting", "option", "translation", "type", "average"], "outBuf1": ["outBbuf0", "outBuffyl", "outBbuf1", "outBdf3", "outBBuff0", "outBufl", "outBulp64", "outDbuf3", "outBBuff1", "outDuf0", "outBool1", "outBuff1", "outBbufOne", "outBbuf3", "outBlf1", "outDbuf0", "outBbufone", "outBurg18", "outDuf11", "outBBuff3", "outRuf18", "outBuf3", "outBulp3", "outRuf5", "outBulp1", "outRuf3", "outRbuf0", "outBucOne", "outBdfOnce", "outDbuf1", "outRbuf1", "outBlf0", "outDuf3", "outRbuf5", "outBbufl", "outBulpOnce", "outBuffy3", "outBuc5", "outBooll", "outDbuf11", "outBdf64", "outBurg1", "outRuf1", "outBuf18", "outBurg3", "outBuffyone", "outBbuf11", "outBuf64", "outBuff0", "outBuf11", "outBuffy1", "outBlf3", "outBuc0", "outBBuff11", "outBbuf5", "outBbuf18", "outBoolone", "outBuffy0", "outRufOne", "outRbufOne", "outBurg0", "outRbuf18", "outDuf1", "outBbuf64", "outBuf5", "outBufOnce", "outBfx11", "outBdf1", "outBuf0", "outBfx1", "outBuff2", "outBlf2", "outBfx0", "outRuf0", "outBuc1", "outBuff3", "outRbuf3", "outBfx3", "outBuffy18", "outBufone", "outBufOne", "outBbufOnce", "outBool3"], "outBuf2": ["outBuf4", "outFbufTwo", "outBuf42", "outBuffy3", "outBuffy2", "outBfg4", "outBfgTwo", "outMuf15", "outMbuf2", "outBbuf42", "outBbufj", "outMbuf15", "outBbuf1", "outBbuff4", "outMuf1", "outBfx1", "outBuf3", "outBbuff42", "outBuff2", "outBuffTwo", "outBuffy4", "outBuf02", "outFuf2", "outFbuf02", "outMbuf3", "outFbuf2", "outBfx2", "outBbuff3", "outBuffyTwo", "outFbuf4", "outBfx15", "outBufj", "outBbuff2", "outBfg2", "outBuf15", "outBuff42", "outBbuffj", "outMbuf1", "outBfg02", "outBuff4", "outBbuf4", "outBuff3", "outMuf3", "outBuff1", "outBbuff1", "outBfx3", "outBbuf3", "outBbuf02", "outBufTwo", "outBbuf15", "outBuffy02", "outFufTwo", "outBuffj", "outBbufTwo", "outFuf4", "outBbuf2", "outBbuff15", "outFuf02", "outMuf2"], "endOfIndexFile": ["endOfErrorfile", "endOfindexFile", "endOfIndexF", "endOfindexTable", "endofIndexFiles", "endOfindexfile", "endOfIndfile", "endofIndexfile", "endOFindexFile", "endOfIndexTable", "endOfIndFile", " endFile", "endOfErrorF", "endOfIndLine", "EndFile", "endofindexFile", "endOfPositionFile", "endOfindexLine", "endofindexFiles", "endedFile", "endofindexfile", "endOFIndexfile", "endOFindexLine", "endofIndexFile", "endOfIndexfile", "endofindexF", "endOfErrorFile", "endOfindexF", "endOfindexFiles", "endOfPositionFiles", "endOFindexfile", "endOfPositionTable", "endFile", "endOfIndexFiles", "endOfIndexLine", "endofIndexTable", "endOfErrorFiles", "endOFIndexLine", "endOfPositionfile", "endofindexTable", "endofIndexF", "endOFIndexFile"]}}
{"id1": "16798376", "id2": "18202328", "code1": "    @Override\n    public void run() {\n        try {\n            FTPClient ftp = new FTPClient();\n            try {\n                ftp.connect(\"localhost\", 21);\n                ftp.login(\"ftpuser\", \"ftpuser123\");\n                System.out.println(\"Current: \" + ftp.printWorkingDirectory());\n                System.out.println(\"Dir status: \" + ftp.makeDirectory(DIR));\n                ftp.changeWorkingDirectory(DIR);\n                System.out.println(\"File status: \" + ftp.storeFile(FILE_PREFIX + this.getName(), getByteInputStream()));\n            } finally {\n                ftp.disconnect();\n            }\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }\n", "code2": "    public void register(MinecraftSession session, String username, String verificationKey) {\n        if (Configuration.getConfiguration().isVerifyingNames()) {\n            long salt = HeartbeatManager.getHeartbeatManager().getSalt();\n            String hash = new StringBuilder().append(String.valueOf(salt)).append(username).toString();\n            MessageDigest digest;\n            try {\n                digest = MessageDigest.getInstance(\"MD5\");\n            } catch (NoSuchAlgorithmException e) {\n                throw new RuntimeException(\"No MD5 algorithm!\");\n            }\n            digest.update(hash.getBytes());\n            if (!verificationKey.equals(new BigInteger(1, digest.digest()).toString(16))) {\n                session.getActionSender().sendLoginFailure(\"Illegal name.\");\n                return;\n            }\n        }\n        char[] nameChars = username.toCharArray();\n        for (char nameChar : nameChars) {\n            if (nameChar < ' ' || nameChar > '\\177') {\n                session.getActionSender().sendLoginFailure(\"Invalid name!\");\n                return;\n            }\n        }\n        for (Player p : playerList.getPlayers()) {\n            if (p.getName().equalsIgnoreCase(username)) {\n                p.getSession().getActionSender().sendLoginFailure(\"Logged in from another computer.\");\n                break;\n            }\n        }\n        final Player player = new Player(session, username);\n        if (!playerList.add(player)) {\n            player.getSession().getActionSender().sendLoginFailure(\"Too many players online!\");\n            return;\n        }\n        session.setPlayer(player);\n        final Configuration c = Configuration.getConfiguration();\n        session.getActionSender().sendLoginResponse(Constants.PROTOCOL_VERSION, c.getName(), c.getMessage(), false);\n        LevelGzipper.getLevelGzipper().gzipLevel(session);\n    }\n", "label": 0, "substitutes": {"run": ["submit", "apply", "invoke", "show", "process", "test", "start", "service", " Run", "work", "go", "call", "block", "profile", "runner", "Run", "exec", "hello", "execute", "handle", "task", "cmd", "stop", "runs", "launch", "command"], "ftp": [" ftcp", " ftjp", "aftcp", "iftz", "fft", "iftr", " ftc", "afttp", "ftc", "aftjp", "fth", "wth", "ftping", "iftp", " fttp", "aftz", "aftt", "ftr", "afc", "cttp", "iftop", "gitf", "fftp", "ftz", "iftjp", "aft", "afl", "wtp", "ctl", "aftop", "ftop", " ftphp", "gitping", "aftl", "aftr", "aftp", " fth", "afth", "aftc", " ftxp", "ftcp", "ftl", "aff", "wtping", " ftop", "ffp", "aftxp", "iftxp", "ctp", "aftping", "gitt", " ftz", "gitp", "afping", "ftxp", " ftf", "iftf", "aftphp", " ftt", " ftping", "ftf", "ctcp", "ffcp", " ftr", "iftphp", "ftt", "afp", "aftf", "wtcp", "iftt", "fttp", " ftl", "ftphp", "ftjp"]}}
{"id1": "15822137", "id2": "13783898", "code1": "    public TableDirectory(RandomAccessFile raf) throws IOException {\n        version = raf.readInt();\n        numTables = raf.readShort();\n        searchRange = raf.readShort();\n        entrySelector = raf.readShort();\n        rangeShift = raf.readShort();\n        entries = new DirectoryEntry[numTables];\n        for (int i = 0; i < numTables; i++) {\n            entries[i] = new DirectoryEntry(raf);\n        }\n        boolean modified = true;\n        while (modified) {\n            modified = false;\n            for (int i = 0; i < numTables - 1; i++) {\n                if (entries[i].getOffset() > entries[i + 1].getOffset()) {\n                    DirectoryEntry temp = entries[i];\n                    entries[i] = entries[i + 1];\n                    entries[i + 1] = temp;\n                    modified = true;\n                }\n            }\n        }\n    }\n", "code2": "    public static boolean encodeFileToFile(String infile, String outfile) {\n        boolean success = false;\n        java.io.InputStream in = null;\n        java.io.OutputStream out = null;\n        try {\n            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);\n            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n            byte[] buffer = new byte[65536];\n            int read = -1;\n            while ((read = in.read(buffer)) >= 0) {\n                out.write(buffer, 0, read);\n            }\n            success = true;\n        } catch (java.io.IOException exc) {\n            exc.printStackTrace();\n        } finally {\n            try {\n                in.close();\n            } catch (Exception exc) {\n            }\n            try {\n                out.close();\n            } catch (Exception exc) {\n            }\n        }\n        return success;\n    }\n", "label": 0, "substitutes": {"raf": ["aux", "rain", "tar", "fc", "log", "file", "ora", "cat", "io", "crit", "fd", "rx", "rb", "mr", "r", "rw", "act", "orf", "proc", "dl", "ro", "red", "af", "res", "cr", "zip", "fin", "ar", "csv", "fal", "fs", "arp", "bang", "fb", "def", "form", "ma", "dal", "rd", "fam", "buff", "rm", "rt", "flow", "dra", "fp", "db", "read", "req", "rf", "rr", "rou", "ran", "rand", "rl", "report", "fm", "cb", "rc", "ra", "ras", "rin", "rep", "df", "fr", "uf", "ob", "cmd", "ref", "ram", "fa", "ain", "rar", "roo", "ea"], "version": ["v", "description", "number", "sequence", "mode", "hash", "vision", "position", "index", "VERSION", "status", "volume", "Version", "vers", "server", "sector", "feature", "table", "format", "vid", "action", "versions", "direction", "directory", "depth", "ver", "type"], "numTables": ["numTows", "numTSables", "numtabases", "numNries", "numLools", " numLables", "numTSools", "numLabs", " numLrees", "numLows", "numNests", "numTests", " numNabs", "NumTests", "numNrees", " numNools", " numTries", "numBrees", "numRests", "NumTables", "numLries", "numtrees", " numNrees", "numBabs", " numTools", " numTTable", "NumTries", "NumTrees", "numTrees", " numNTable", "numBables", "NumNests", " numTabs", "numRrees", "numTabs", "numTSries", "numLTable", "numTools", " numTows", "numNables", "numRables", "numNools", "NumNries", "numBabases", "NumNables", " numNries", "numLrees", "numNabs", "numTTable", " numTabases", " numLabases", "numRries", "numtows", "numTSTable", "numTabases", "numLests", " numNables", "numBries", "numBows", "NumNrees", " numTrees", "numLables", " numLows", "numLabases", "numtables", "numTries", "numNTable"], "searchRange": ["searchLength", "resultLength", "sourceRegion", "resultQuery", "searchQuery", " searchRegion", " searchQuery", "resultRegion", "sourceLength", "resultRange", " searchLength", "sourceRange", "searchRegion", "sourceQuery"], "entrySelector": ["entryChion", "entryselectension", "entrySequator", "entryChension", "searchSelection", "searchselectator", "searchselection", "searchSelectension", "searchselectension", "entryselection", "entrySelection", "entryselector", "searchSelector", "entrySequension", "searchselector", "entryChator", "entryChor", "entrySequor", "entrySelectension", "entrySelectator", "entryselectator", "searchSelectator", "entrySequion"], "rangeShift": ["RangeMask", " rangeMask", "Rangeshift", "rangeshift", "RangeShift", " rangeOffset", "rangeMask", "rangeOffset", " rangeshift", "RangeOffset", "rowshift", "rowShift", "rowMask", "rowOffset"], "entries": ["gentried", "ntrys", "entsies", "ntables", "enries", "Entrils", "ENTries", "ENTresses", "ENTriers", "centried", "enires", "gentrys", "centrils", "Entires", "ntities", "ENTried", "entried", "Entried", "entsrys", "entities", "entriers", "Entities", "ENTrys", "centrys", "Entriers", "ENTities", "entrys", "enties", "entsables", "centries", "entsities", "ntriers", "entrils", "gentrils", "ntries", "Entables", "Entrys", "entires", "Entries", "entsries", "enrys", "entresses", "gentries", "enresses", "Entresses", "entables", "entsried", "entsriers", "ENTires", "Enties", "nties", "ntried"], "i": ["I", "iq", "point", "print", "used", "t", "ini", "iy", "ci", "m", "f", "base", "iri", "qi", "ix", "ui", "php", "y", "jp", "err", "ic", "gi", "io", "in", "phi", "oi", "mi", "c", "iu", "status", "cli", "ims", "iter", "set", "out", "client", "me", "chain", "ip", "ori", "ti", "batch", "li", "id", "my", "is", "internal", "ity", "si", "inner", "pi", "multi", "init", "ind", "ei", "ij", "x", "im", "ai", "sim", "it", "bi", "hi", "asi", "ami", "ji", "di", "ki", "ii", "j", "index", "ik", "ski", "inx", "uri", "q", "xi", "ie", "u", "g", "info"], "modified": ["created", "module", "related", "changed", "filled", "initialized", "magic", "owned", "generated", "mod", "dirty", "restricted", "used", "med", "loaded", "update", "managed", "specified", "edited", "success", "ported", "marked", "ended", "identified", "shaped", "rendered", "required", "updated", "mediated", "provided", "colored", "documented", "valid", "confirmed", "fixed", "encrypted", "interesting", "active", "associated", "locked", "successful", "mounted", "readable", "comment", "approved", "adjusted", "made", "called", "rolled", "connected", "ified", "defined", "killed", "checked"], "temp": ["fake", "mint", "cur", "v", "pdf", "perm", "tty", "dat", "cum", "txt", "orig", "mod", "old", "test", "vt", "tem", "j", "current", "ptr", "output", "copy", "deg", "null", "Temp", "m", "tm", "iter", "buffer", "tmp", "pid", "template", "pretty", "tim", "mp", "tr", "tc", "porary", "emp", "partial", " tmp"]}}
{"id1": "701029", "id2": "20519261", "code1": "    public void loadSourceCode() {\n        int length = MAX_SOURCE_LENGTH;\n        try {\n            File file = new File(filename);\n            length = (int) file.length();\n        } catch (SecurityException ex) {\n        }\n        char[] buff = new char[length];\n        InputStream is;\n        InputStreamReader isr;\n        CodeViewer cv = new CodeViewer();\n        URL url;\n        try {\n            url = getClass().getResource(filename);\n            is = url.openStream();\n            isr = new InputStreamReader(is);\n            BufferedReader reader = new BufferedReader(isr);\n            sourceCode = new String(\"<html><pre>\");\n            String line = reader.readLine();\n            while (line != null) {\n                sourceCode += cv.syntaxHighlight(line) + \" \\n \";\n                line = reader.readLine();\n            }\n            sourceCode += \"</pre></html>\";\n        } catch (Exception ex) {\n            sourceCode = getString(\"SourceCode.error\");\n        }\n    }\n", "code2": "    public String readReferenceText(final String ident) throws NoContentException {\n        try {\n            String name = getFilename(ident);\n            URL url = new URL(FreqAnalysisPlugin.getDefault().getBundle().getEntry(\"/\"), name);\n            InputStream in = url.openStream();\n            InputStreamReader isr = new InputStreamReader(in, \"UTF-8\");\n            BufferedReader br = new BufferedReader(isr);\n            StringBuffer buffer = new StringBuffer();\n            String line = br.readLine();\n            while (null != line) {\n                buffer.append(line + \"\\n\");\n                line = br.readLine();\n            }\n            return buffer.toString();\n        } catch (MalformedURLException muEx) {\n            logError(muEx);\n        } catch (UnsupportedEncodingException ueEx) {\n            logError(ueEx);\n        } catch (IOException ioEx) {\n            logError(ioEx);\n        }\n        throw new NoContentException(\"Unable to find or read reference text.\");\n    }\n", "label": 1, "substitutes": {"loadSourceCode": ["loadSourceSource", " loadSourceFile", "loadSourceFileFile", " loadSourceSource", " loadsourceSource", "loadSourceFileCode", "loadsourceCode", "loadBaseCode", "loadSourceFileSource", "loadBaseFile", "loadSourceFile", " loadsourceFile", "loadsourceData", "loadsourceFile", " loadSourceData", "loadBaseData", "loadSourceFileData", " loadsourceData", " loadsourceCode", "loadSourceData", "loadBaseSource", "loadsourceSource"], "length": ["text", "path", " lengths", "description", "number", "Length", "string", "sequence", "height", "h", "amount", "count", "t", "join", "ength", "position", "family", "max", "total", "limit", "no", "ENGTH", "filename", "len", "library", "write", "duration", "code", "title", "volume", "f", "dump", "loop", "buffer", "message", "format", "end", " Length", "maximum", "capacity", "read", "download", "name", "readable", "width", "load", "shape", "l", "default", "SIZE", "available", "type", "collection", "size"], "file": ["local", "path", "fil", "parent", "io", "resource", "FILE", "face", "ile", "po", "e", "remote", "channel", "al", "File", "output", "filename", "connection", "port", "f", "sf", "base", "set", "buffer", "table", "page", "format", "fp", "db", "name", "frame", "source", "le", "image", "el", "list", "handle", "il", "pool", "ref", "full", "size"], "buff": [" buffers", "alph", "txt", "append", "b", " buffer", "font", "j", "bb", " buf", "mem", "ph", "f", "buffer", "end", "tmp", "ch", "read", "Buff", "uf", "fr", "ob", "mb", "cmd", "ref", "buf", "Buffer"], "is": ["iss", "isl", "isa", "ists", "ist", "ls", "ais", "ri", "mi", "si", "iris", "bits", "rs", "vis", "i", "ios", "are", "has", "ims", "bis", "es", "fs", "iter", "IS", "s", "lis", "ois", "oss", "its", "\u00eds", "ris", "sys", "ser", "Is", "ins", "sim", "ir", "ip", "us", "it", "il", "isi", "isc", "os", "iso"], "isr": ["Isrs", "esr", "isl", "esrs", "Ispr", "risrs", "issr", "oisrs", "issrs", "risar", "essr", " isrs", " ispr", " isvr", "rispr", "rissr", "issl", "isar", "oissr", "Isr", "isrs", "esar", "risl", "risr", "oisar", "ispr", "oisr", "Isvr", "isspr", "issvr", " isl", "isvr"], "cv": ["CV", "cur", "v", "rpm", "nv", "pb", "fc", "vs", "txt", "vp", "bt", "conv", "lv", "vr", "rev", "cp", "ctx", "c", "uv", "cc", "vm", "cf", "sc", "cn", "bm", "av", "cd", "xc", "cm", "nc", "sv", "tk", "cam", "cb", "rc", "uf", "tc", "tv", "qt", "vc", "buf", "hw"], "url": ["sl", "gl", "address", "string", "Url", "ret", "abs", "str", "nl", "io", "resource", "mail", "browser", "re", "r", "atl", "dl", "dll", "ll", "res", "https", "ssl", "link", "location", "html", "uri", "rel", "URL", "web", "loc", "get", "ur", "github", "impl", "name", "bel", "http", "rl", "addr", "or", "mount", "el", "key", "l", "il", "ref", "ul"], "reader": ["dr", "resource", "wrapper", "roller", "rx", "loader", "ner", "history", "row", "Reader", "ri", "r", "rs", "range", "editor", "ro", "inner", "rar", "upper", "builder", "runner", "ipper", "iterator", "iter", "buffer", "older", "writer", "dra", "read", "parser", "liner", "data", "reading", "rer", "rl", "driver", "rc", "ser", "fr", "info", "body", "er", "stream", "handler", "her"], "sourceCode": ["sourceCount", "sourceComment", "codeMessage", "codeCode", "sourceTree", "relationName", "sourceName", " sourceCount", " sourceName", " sourceTree", "sourceData", "SourceComment", " sourceLine", "relationData", "componentComment", "SourceForce", "SourceTree", "componentScript", " sourceForce", "componentLine", "codeData", " sourceComment", "SourceName", " sourceMessage", "relationCode", "sourceScript", "SourceCount", "SourceData", " sourceScript", "SourceCode", "SourceLine", "SourceMessage", "relationLine", "relationForce", "codeTree", "relationCount", "SourceScript", "componentCode", " sourceData", "sourceForce", "sourceMessage", "sourceLine"], "line": ["text", "ln", "sample", "cell", "number", "string", "lock", "log", "str", "nl", "inline", "point", "print", "e", "row", "stroke", "phrase", "word", "range", "block", "port", "label", "code", "link", "iter", "trace", "pe", "message", "page", "lin", "lo", "frame", "liner", "comment", "lines", "data", "source", "ine", "online", "eline", "le", "lined", "chain", "key", "Line", "l", "LINE", "ne", "body", "entry", "se"]}}
{"id1": "1097146", "id2": "21999120", "code1": "    public static String getMessageDigest(String input) {\n        if (input == null) {\n            log.warn(\"Returning SHA-1 null value for null input\");\n            return null;\n        }\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n            md.update(input.getBytes(\"UTF-8\"));\n            byte[] bytes = md.digest();\n            return new BASE64Encoder().encode(bytes);\n        } catch (NoSuchAlgorithmException e) {\n            throw new IllegalStateException(e.getMessage());\n        } catch (UnsupportedEncodingException e) {\n            throw new IllegalStateException(e.getMessage());\n        }\n    }\n", "code2": "    public String encrypt(String password) throws Exception {\n        MessageDigest md5 = MessageDigest.getInstance(\"MD5\");\n        md5.update(password.getBytes());\n        BigInteger hash = new BigInteger(1, md5.digest());\n        String hashword = hash.toString(16);\n        return hashword;\n    }\n", "label": 1, "substitutes": {"getMessageDigest": ["getContentdigests", "getMessageDecest", "getContentdigested", "getContentDigests", "getContentDigested", "getContentdigest", "getMessageDecests", "getMessagedigests", "getMessageDecested", "getMessagedigest", "getMessagedigested", "getContentDigester", "getMessageDigester", "getMessageDigested", "getContentdigester", "getMessageDigests", "getContentDigest", "getMessageDecester", "getMessagedigester"], "input": ["text", "address", "sample", "cur", "human", "string", "file", "p", "any", "missing", "char", "Input", "up", "in", "msg", "from", "output", "url", "required", "qa", "act", "null", "check", "pattern", "valid", "initial", "config", "form", "buffer", "format", "unknown", "out", "raw", "q", "active", "get", "name", "data", "qi", "source", "value", "image", "password", "uu", "focus", "hello", "request", "empty", "xml", "it", "cmd", "this", "state", "quick"], "md": ["d", "mc", "dr", "pdf", "pd", "ld", "mt", "mod", "di", "sm", "nt", "med", "managed", "mu", "sam", "det", "ad", "m", "pm", "def", "sd", "ms", "dd", "comp", "mand", "hd", "mm", "ds", "mk", "cd", "cm", "od", "bd", "mg", "mn", "dm", "mp", "der", "dh", "df", "mb", "cmd", "grad", "MD", " Md"], "bytes": ["windows", "pieces", "forms", "outs", "binary", "objects", "terms", "clips", "ings", "b", "groups", "latest", "ls", "strings", "rings", "blocks", "bits", "nets", "tes", "Bytes", "steps", "users", "reports", "pages", "units", "bags", "bps", "ms", "s", "bs", "parts", "files", "videos", "versions", "bles", "lines", "keys", "seconds", "words", "es", "classes", "qs", "values"]}}
{"id1": "14047629", "id2": "11673907", "code1": "    protected ExternalDecoder(InputStream source, Process process) {\n        super(source);\n        this.process = process;\n        this.processStdOut = process.getInputStream();\n        this.processStdIn = process.getOutputStream();\n        new Thread() {\n\n            @Override\n            public void run() {\n                try {\n                    IOUtils.copy(getSource(), processStdIn);\n                    System.err.println(\"Copy done.\");\n                    close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                    IOUtils.closeQuietly(ExternalDecoder.this);\n                }\n            }\n        }.start();\n    }\n", "code2": "    private void _checkLanguagesFiles(ActionRequest req, ActionResponse res, PortletConfig config, ActionForm form) throws Exception {\n        List list = (List) req.getAttribute(WebKeys.LANGUAGE_MANAGER_LIST);\n        for (int i = 0; i < list.size(); i++) {\n            long langId = ((Language) list.get(i)).getId();\n            try {\n                String filePath = getGlobalVariablesPath() + \"cms_language_\" + langId + \".properties\";\n                boolean copy = false;\n                File from = new java.io.File(filePath);\n                if (!from.exists()) {\n                    from.createNewFile();\n                    copy = true;\n                }\n                String tmpFilePath = getTemporyDirPath() + \"cms_language_\" + langId + \"_properties.tmp\";\n                File to = new java.io.File(tmpFilePath);\n                if (!to.exists()) {\n                    to.createNewFile();\n                    copy = true;\n                }\n                if (copy) {\n                    FileChannel srcChannel = new FileInputStream(from).getChannel();\n                    FileChannel dstChannel = new FileOutputStream(to).getChannel();\n                    dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n                    srcChannel.close();\n                    dstChannel.close();\n                }\n            } catch (IOException e) {\n                Logger.error(this, \"_checkLanguagesFiles:Property File Copy Failed \" + e, e);\n            }\n        }\n    }\n", "label": 1, "substitutes": {"source": ["system", "seed", "sample", "address", "file", "sequence", "src", "resource", "channel", "event", "position", "in", "service", "SOURCE", "from", "output", "copy", "reader", "shell", "content", "query", "ource", "console", "iterator", "expression", "buffer", "Source", "format", "message", "result", "q", "input", "data", "image", "request", "proc", "sql", "stream", "se"], "process": ["build", "function", "place", "file", "p", "post", "term", "make", "store", "component", "program", "processor", "complex", "method", "context", "class", "service", "run", "se", "work", "pipe", "network", "call", "cp", "thread", "check", "node", "condition", "session", "mem", "code", "status", "console", "link", "job", "pm", "connect", "project", "init", "pid", "flow", "Process", "parse", "create", "frame", "object", "processing", "sys", "memory", "and", "exec", "pp", "chain", "execute", "use", "handle", "task", "script", "cmd", "state", "proc", "command"], "processStdOut": ["processStrEr", "processStrdIn", "processStstdEx", "processStdEx", "processStstEr", "processStstdEr", "processStrrEx", "processStrIn", "processStrrIn", "processStrdEr", "processStrdEx", "processStstdOut", "processStstOut", "processStstIn", "processStrEx", "processStrrEr", "processStstEx", "processStdEr", "processStstdIn", "processStrdOut", "processStrrOut", "processStrOut"], "processStdIn": ["processStdsOut", "processSTtOut", "processStdsIN", "processSttIn", "processSTdIns", "processStdin", "processStackdOut", "processStackdIN", "processSttIN", "processStdsin", "processStdIN", "processStrIn", "processSTtIns", "processSTtIN", "processSttOut", "processStrIns", "processStdsIns", "processStdIns", "processStrin", "processStackdsIn", "processStackdsIN", "processStrIN", "processSTtIn", "processStackdIn", "processStsIn", "processSTdIN", "processStackdsin", "processStrOut", "processStdsIn", "processSTdOut", "processSttIns", "processStackdsOut", "processStsOut", "processStsin", "processStackdin", "processStsIN", "processSTdIn"]}}
{"id1": "8770016", "id2": "22977189", "code1": "    public InputStream loadResource(String location) throws GenericConfigException {\n        URL url = getURL(location);\n        try {\n            return url.openStream();\n        } catch (java.io.IOException e) {\n            throw new GenericConfigException(\"Error opening URL resource at location [\" + url.toExternalForm() + \"]\", e);\n        }\n    }\n", "code2": "    public static void main(String args[]) throws IOException {\n        BufferedReader in = new BufferedReader(new FileReader(args[0]));\n        Writer out = new FileWriter(args[1]);\n        out = new WrapFilter(new BufferedWriter(out), 40);\n        out = new TitleCaseFilter(out);\n        String line;\n        while ((line = in.readLine()) != null) out.write(line + \"\\n\");\n        out.close();\n        in.close();\n    }\n", "label": 0, "substitutes": {"loadResource": ["getRes", "loadFile", "openFile", "getFile", "openRes", "loadRes", "selectFile", "openResources", "selectResources", "getResource", "openResource", "selectRes", "selectResource", "getResources", "loadResources"], "location": ["local", "where", "LOC", "localhost", "path", "address", "sample", " Location", "description", "string", "file", "id", "resource", "remote", "join", "program", "level", "position", "ion", "context", "slot", "target", "filename", "href", "library", "node", "Location", "ocation", "uri", "options", "server", "base", "loc", "message", "reference", "name", "document", "template", "comment", "behavior", "value", "request", "directory", "layout", "translation", "type", "entry", "collection", "command"], "url": ["system", "sl", "build", "address", "path", "file", "Url", "ld", "abs", "str", "nl", "resource", "mail", "channel", "char", "browser", "ls", "control", "open", "len", "dl", "ll", "host", "ssl", "link", "auto", "f", "uri", "rel", "base", "job", "URL", "web", "loc", "cl", "get", "ur", "raw", "user", "db", "un", "name", "u", "client", "http", "mount", "l", "ob", "ref", "ul"]}}
{"id1": "659316", "id2": "8069594", "code1": "    public static void main(String[] argv) {\n        if (1 < argv.length) {\n            File[] sources = Source(argv[0]);\n            if (null != sources) {\n                for (File src : sources) {\n                    File[] targets = Target(src, argv);\n                    if (null != targets) {\n                        final long srclen = src.length();\n                        try {\n                            FileChannel source = new FileInputStream(src).getChannel();\n                            try {\n                                for (File tgt : targets) {\n                                    FileChannel target = new FileOutputStream(tgt).getChannel();\n                                    try {\n                                        source.transferTo(0L, srclen, target);\n                                    } finally {\n                                        target.close();\n                                    }\n                                    System.out.printf(\"Updated %s\\n\", tgt.getPath());\n                                    File[] deletes = Delete(src, tgt);\n                                    if (null != deletes) {\n                                        for (File del : deletes) {\n                                            if (SVN) {\n                                                if (SvnDelete(del)) System.out.printf(\"Deleted %s\\n\", del.getPath()); else System.out.printf(\"Failed to delete %s\\n\", del.getPath());\n                                            } else if (del.delete()) System.out.printf(\"Deleted %s\\n\", del.getPath()); else System.out.printf(\"Failed to delete %s\\n\", del.getPath());\n                                        }\n                                    }\n                                    if (SVN) SvnAdd(tgt);\n                                }\n                            } finally {\n                                source.close();\n                            }\n                        } catch (Exception exc) {\n                            exc.printStackTrace();\n                            System.exit(1);\n                        }\n                    }\n                }\n                System.exit(0);\n            } else {\n                System.err.printf(\"Source file(s) not found in '%s'\\n\", argv[0]);\n                System.exit(1);\n            }\n        } else {\n            usage();\n            System.exit(1);\n        }\n    }\n", "code2": "    public static void copyFile(File in, File out) throws IOException {\n        if (in.getCanonicalPath().equals(out.getCanonicalPath())) {\n            return;\n        }\n        FileChannel inChannel = new FileInputStream(in).getChannel();\n        FileChannel outChannel = new FileOutputStream(out).getChannel();\n        try {\n            inChannel.transferTo(0, inChannel.size(), outChannel);\n        } catch (IOException e) {\n            throw e;\n        } finally {\n            if (inChannel != null) {\n                inChannel.close();\n            }\n            if (outChannel != null) {\n                outChannel.close();\n            }\n        }\n    }\n", "label": 1, "substitutes": {"argv": [" argV", "argp", "argV", "argsV", "argsc", "argm", " argc", "Args", "suppp", "ArgV", " argp", "Argm", "argvs", " argvs", "argss", "Argc", "argsv", "suppvs", "callp", "callV", "suppV", "Argv", "argc", " argm", "argsm", "callvs", "suppv", "callv"], "sources": ["sodes", " sures", "sults", "sloots", "servources", "stources", "tocks", "tiders", "soots", " soots", "tources", " sodes", "sures", "sliders", "toots", "stets", "inults", "sors", "servets", "seodes", "slources", "stors", "stures", "inets", " sults", " socks", "servures", "socks", " siders", " sets", "seources", " sors", "servors", "slocks", "siders", "inources", "inodes", "seults", "seets", "sets"], "targets": ["tassches", "tanges", "Targches", "tangends", "targetens", "toolsarggers", " targens", " tangends", " tangets", " targends", "toolsankgers", " tangens", "toolsargens", "tassets", "topends", "topches", "tokends", "targetsets", "toolsankens", "tankgers", "tasses", "targends", "tassends", "Targets", "toolsargets", "Targends", "Targes", "tangets", "tangches", "tokgers", "targetgers", "topes", "targches", "toolsanksets", "tankens", "toolsargsets", "targens", "tokets", "tangens", "tokes", "topens", " tanges", "Topches", "targsets", "tankets", "toolsankets", "toksets", " targes", "targetets", "Topends", "topets", "Topes", "tokens", "tanksets", "targes", "targgers", "Topets"], "srclen": ["rsccen", "srklogn", "srseln", " srpln", "srccog", "srclog", "srselength", "srklue", "srCLn", " srclength", "srpln", "srselade", "srccen", "srCLength", " srclade", "srccogn", "srselen", "srclength", "srCLade", "rsclue", "srclogn", "rsccog", "srklog", " srplade", "srselue", "rsccogn", "srcln", "srclade", " srplen", "rsccue", "srselog", "srplen", "srCLen", "rsclog", " srplength", "srplade", " srcln", "srclue", "srplength", "srselogn", "srklen", "rsclen", "srccue", "rsclogn"], "source": ["local", "system", "scan", "search", "match", "force", "file", "sequence", "site", "parent", "src", "resource", "store", "wrapper", "start", "internal", "context", "service", "SOURCE", "select", "style", "copy", "scale", "reader", "from", "null", "query", "ource", "scope", "inner", "secure", "status", "console", "link", "iter", "trace", "set", "buffer", "Source", "sp", "s", "root", "get", "create", "input", "template", "score", "sys", "me", "escape", "ser", "cache", "standard", "info", "this"], "tgt": ["targ", "wgt", "Tgt", "sttarget", "ttarget", "teht", "ngn", "Targ", "npt", "Target", "Tht", "itgt", "itarget", "ittarget", "stgt", "ngt", " ttarget", "tpt", "wtarget", "tearg", "tegt", "tetarget", "tgn", " tht", " targ", "tearget", " tpt", "warg", "starg", "warget", "tept", "tht", " tgn", "itht", "itarg", "nht", "starget", "tegn"], "target": ["local", "localhost", "path", "match", "proxy", "member", "Target", "parent", "resource", "channel", "wrapper", "stable", "internal", "child", "dest", "output", "trap", "manager", "owner", "copy", "to", "goal", "null", "inter", "gt", "link", "rel", "base", "trace", "table", "buffer", "out", "tmp", "touch", "writer", "template", "sys", "arget", "secondary", "pointer", "top", "socket", "mask", "peer", "ARGET", "next", "handler", "bolt"], "deletes": ["dellets", "deels", "dules", "Deletes", "Deles", "Deels", "duels", "seles", "desets", "lelets", "duleted", "duges", "Deleted", "deges", "desves", "delletes", "deleted", "delets", "seletes", "seleted", "seels", "leves", "desges", "deets", "leletes", "deves", "dleted", "desletes", "leets", "duletes", "desleted", "delves", "dulets", "deles", "dletes", "dges", "dlets", "deslets"], "del": ["err", "dec", "dr", "elt", "des", "delete", " dele", "pel", "nl", "kl", "nt", "ls", "compl", "tl", "inv", "rem", "re", "len", "dl", "bl", "ll", "pl", "md", "col", "dis", "ele", "syn", "def", "rel", "cl", "Del", "sel", "let", "vet", "rol", "le", "rl", "dem", "el", "tr", "l", "els", "ne", "de", "cel", "se"]}}
{"id1": "16556717", "id2": "4938100", "code1": "    public static String getSHADigest(String password) {\n        String digest = null;\n        MessageDigest sha = null;\n        try {\n            sha = MessageDigest.getInstance(\"SHA-1\");\n            sha.reset();\n            sha.update(password.getBytes());\n            byte[] pwhash = sha.digest();\n            digest = \"{SHA}\" + new String(Base64.encode(pwhash));\n        } catch (NoSuchAlgorithmException nsae) {\n            CofaxToolsUtil.log(\"Algorithme SHA-1 non supporte a la creation du hashage\" + nsae + id);\n        }\n        return digest;\n    }\n", "code2": "    public static String sha1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n        MessageDigest md;\n        md = MessageDigest.getInstance(\"SHA-1\");\n        byte[] sha1hash = new byte[40];\n        md.update(text.getBytes(\"iso-8859-1\"), 0, text.length());\n        sha1hash = md.digest();\n        return convertToHex(sha1hash);\n    }\n", "label": 1, "substitutes": {"getSHADigest": ["getSHADegest", "getSHAdigse", "getSHAdigester", "getSHAdegse", "getSHADDigse", "getSHAdegests", "getSHAdegester", "getSHAdigest", "getSHADDigests", "getSHADdigse", "getSHADDigester", "getSHADegse", "getSHADigests", "getSHAdegest", "getSHADegests", "getSHADdigests", "getSHADdigest", "getSHADegester", "getSHADDigest", "getSHAdigests", "getSHADigse", "getSHADigester", "getSHADdigester"], "password": ["text", "secret", "address", "description", "string", "id", "hash", "phrase", "Password", "auth", "username", "email", "session", "pattern", "padding", "prefix", "message", "command", "database", "pass", "user", "input", "name", "sword", " Password", "data", "reset", "value", "key", "response", "token", "login", "words", "wd", "w", "word"], "digest": ["decester", "igEST", "digested", " digEST", "dighash", "Dighash", "Diggest", "Digested", "Digse", "hashEST", "mentgest", "DigEST", "dest", "Digest", " dighash", "decEST", " digested", "digEST", "Digester", "Digist", "diggest", "decgest", "mentester", "igest", "decest", "hashment", "dested", "hashest", "dEST", " digist", "digment", "dist", "igse", " digse", "digist", "digse", "mentEST", "mentest", " digment", "digester", "ighash", "hashested", "Digment"], "sha": ["mac", "lambda", "tar", "sq", "ppa", "git", "da", "ah", "ha", "SHA", "po", "sche", "alpha", "hash", "asha", "ca", "no", "ssh", "phi", "go", "shell", "si", "access", "qa", "sam", "a", "has", "pi", "ssl", "sa", "auto", "md", "api", "HA", "ma", "ta", "ya", "wal", "shared", "acl", "shi", "ho", "func", "ka", "addr", "pa", "ao", "na", "sum", "hi", "sh", "wa", "iso"], "pwhash": ["pthhash", "pshashed", "pWHhash", "pshay", "pwhhash", "pthat", "pshash", "pshhash", " pwhhash", "pWHashed", " psway", "pWHay", " pwhashed", " pwhat", " pswashed", "pthash", "pswashed", "pswat", " pswhash", "pswhash", " pwhay", "pwhay", "pWHash", " pswat", "pthashed", "pswash", "pWHat", "pwhashed", "pwhat", "psway", " pswash"]}}
{"id1": "4686922", "id2": "21348951", "code1": "    public void extractResourceToFile(String resourcePath, File dest) {\n        InputStream in = getClass().getResourceAsStream(resourcePath);\n        try {\n            FileOutputStream out = FileUtils.openOutputStream(dest);\n            try {\n                IOUtils.copy(in, out);\n            } finally {\n                if (out != null) {\n                    out.close();\n                }\n            }\n        } finally {\n            if (in != null) {\n                in.close();\n            }\n        }\n    }\n", "code2": "        protected void processAddByURLSubmit(URL url, String invalidUrlMsg) {\n            if (!this.hasError()) {\n                try {\n                    StringWriter xmlSourceWriter = new StringWriter();\n                    IOUtils.copy(url.openStream(), xmlSourceWriter);\n                    processSubmittedDoap(xmlSourceWriter.toString());\n                } catch (FileNotFoundException e) {\n                    Session.get().error(invalidUrlMsg);\n                    logger.warn(\"Error processing URL: \" + invalidUrlMsg);\n                } catch (IOException e) {\n                    setResponsePage(new ErrorReportPage(new UserReportableException(\"Unable to add doap using RDF supplied\", DoapFormPage.class, e)));\n                    logger.warn(\"Error processing URL: \" + url + \"; \" + e.getMessage(), e);\n                }\n            }\n        }\n", "label": 1, "substitutes": {"extractResourceToFile": ["extractResourceAsFiles", "extractResourceAsStream", "extractResourceFromfile", "extractResource2Files", "extractResources2Files", "extractResource2File", "extractResources2file", "extractResourceToStream", "extractResourceToFiles", "extractResource2file", "extractResourceFromFiles", "extractResource2Stream", "extractResourcesToStream", "extractResourceAsfile", "extractResourcesTofile", "extractResourcesToFiles", "extractResourceTofile", "extractResources2File", "extractResourceFromFile", "extractResourceAsFile", "extractResourcesToFile", "extractResourceFromStream", "extractResources2Stream"], "resourcePath": ["resourceLocation", "resourceIn", "templatepath", "uriPath", "resourceUrl", "uriName", " resourcepath", "uriLocation", "ResourceName", "attributePath", "resourceName", "templateIn", "ResourcePath", "ResourceIn", "Resourcepath", "ResourceLocation", " resourceName", "templateName", "attributeLocation", "attributeName", "resourcepath", "ResourceUrl", "templatePath", "attributeUrl", " resourceIn", "uriUrl"], "dest": ["trans", "decl", "dir", "dat", "des", "parent", "cat", "orig", "src", "Dest", "prop", "target", "output", "nom", "to", "null", "good", "mem", "img", "origin", "opt", "desc", "result", "sp", "end", "tmp", "loc", "etc", "dist", "source", "cont", "rest", "home", "self", "comb", "gov", "this", "temp", "coord", "lit", "w"], "in": ["local", "ln", "mc", "file", "id", "sin", "resource", "is", "inf", "up", "al", "no", "cin", "conf", "from", "mi", "re", "r", "ini", "IN", "i", "inc", "inner", "inside", "m", " din", "f", "on", "iter", "din", "raw", "init", "all", "isin", "input", "ind", "gin", "In", "source", "or", "ins", "rin", "l", "it", "bin", "ne", "none", "con", "inn"], "out": ["v", "cos", "again", "at", "en", " Out", "io", "print", "b", "t", "conv", "stable", "nt", "ot", "obj", "aos", "no", "output", "to", "n", "null", "i", "write", "inner", "res", "outer", "f", "col", "o", "note", "on", "net", "oss", "tmp", "cn", "ch", "writer", "exit", "client", "sys", "con", "OUT", "Out", "na", "cache", "it", "pool", "ou", "outs", "can", "ne", "co", "os", "w"]}}
{"id1": "4618237", "id2": "536614", "code1": "    public static void writeFileToFile(File fin, File fout, boolean append) throws IOException {\n        FileChannel inChannel = new FileInputStream(fin).getChannel();\n        FileChannel outChannel = new FileOutputStream(fout, append).getChannel();\n        try {\n            inChannel.transferTo(0, inChannel.size(), outChannel);\n        } finally {\n            if (inChannel != null) try {\n                inChannel.close();\n            } catch (IOException ex) {\n            }\n            if (outChannel != null) try {\n                outChannel.close();\n            } catch (IOException ex) {\n            }\n        }\n    }\n", "code2": "    private static void readAndRewrite(File inFile, File outFile) throws IOException {\n        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n        Dataset ds = DcmObjectFactory.getInstance().newDataset();\n        dcmParser.setDcmHandler(ds.getDcmHandler());\n        dcmParser.parseDcmFile(null, Tags.PixelData);\n        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        System.out.println(\"reading \" + inFile + \"...\");\n        pdReader.readPixelData(false);\n        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n        ds.writeDataset(out, dcmEncParam);\n        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n        System.out.println(\"writing \" + outFile + \"...\");\n        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        pdWriter.writePixelData();\n        out.flush();\n        out.close();\n        System.out.println(\"done!\");\n    }\n", "label": 1, "substitutes": {"writeFileToFile": ["writeFilesToStream", "writeFiles2Disk", "writeFilesToDisk", "writeFileToFiles", "writeFiles2Files", "writeFile2Disk", "writeFiles2File", "writeFileAsDisk", "writeFilesToFiles", "writeFileToStream", "writeFile2File", "writeFile2Files", "writeFileToDisk", "writeFileAndDisk", "writeFiles2Stream", "writeFileAndFiles", "writeFileAndStream", "writeFileAsFile", "writeFile2Stream", "writeFileAndFile", "writeFileAsStream", "writeFilesToFile", "writeFileAsFiles"], "fin": ["ln", "irm", "kin", "fl", "fw", "fc", "ic", "fil", "en", "fre", "mil", "fd", "mid", "lf", "Fin", "in", "inv", "raf", "ini", "n", "f", "syn", "normal", "FIN", "han", "lin", "fur", "din", "init", "fp", "lo", "rf", "fn", "ran", "mn", "details", "focus", "fi", "rin", "fr", "jen", "fa"], "fout": ["kpo", "tin", "Fou", "foutput", "tout", "ffin", "ffou", "Fin", "koutput", "Fout", "tOut", "fboutput", "fou", "ffout", " foutput", "fbOut", "fOut", "fbpo", "ffOut", "fbout", "kout", " fpo", "kOut", " fOut", "tou", "fpo", "FOut"], "append": ["allow", "send", "seed", "force", "batch", "apply", "string", "pend", "replace", "join", "update", "printf", "grow", "ended", "ext", "vert", "csv", "absolute", "insert", "bold", "note", "express", "fail", "end", "app", "flat", "buff", "push", "ind", "include", "folder", "ends", "add", "equal", "animate", "command"], "inChannel": ["inConnection", "outChan", " inConnection", "rinListener", "insideChannel", "iStream", "iChannel", " inCategory", "rinChannel", "pinMachine", "insideClient", "innChannel", "inCommand", "outCommand", "outConnection", " inchannel", "sinMachine", " inStream", "inListener", "rinChan", "inCategory", "sinChannel", "sinButton", "inputChan", "insideChan", "pinButton", "InConnection", "intClient", "iChan", "inButton", "inStream", "InStream", "inputChannel", " inChan", "inputListener", " inSession", "outStream", "iCommand", "inSession", " inListener", "innCategory", "inClient", "inputCategory", "intChannel", "outchannel", "innButton", "inChan", "inchannel", "inMachine", "InChannel", " inCommand", "sinCategory", "intSession", "pinChannel", "Inchannel", "intChan", "insideSession", "innMachine", "pinCategory", "rinCategory", " inClient"], "outChannel": ["OUTChannel", "outChan", "invMember", "outputChannel", " outController", "nameChan", "outConnection", "OUTchannel", "userChannel", "userCh", "outCh", "userMember", "OUTChan", "outputScope", "netChan", "netChannel", "outMember", " outChan", "OUTController", "invCh", "inCh", "netCh", "outputchannel", "nameConnection", " outCh", "netMember", "netchannel", "outchannel", "inChan", "inchannel", "nameScope", "outputCh", "nameChannel", " outScope", "invChannel", "outputChan", "outScope", "outputConnection", " outchannel", "netController", " outConnection", "outController"]}}
{"id1": "15799935", "id2": "10795866", "code1": "    public static void saveAttachmentBody(Context context, Part part, Attachment localAttachment, long accountId) throws MessagingException, IOException {\n        if (part.getBody() != null) {\n            long attachmentId = localAttachment.mId;\n            InputStream in = part.getBody().getInputStream();\n            File saveIn = AttachmentProvider.getAttachmentDirectory(context, accountId);\n            if (!saveIn.exists()) {\n                saveIn.mkdirs();\n            }\n            File saveAs = AttachmentProvider.getAttachmentFilename(context, accountId, attachmentId);\n            saveAs.createNewFile();\n            FileOutputStream out = new FileOutputStream(saveAs);\n            long copySize = IOUtils.copy(in, out);\n            in.close();\n            out.close();\n            String contentUriString = AttachmentProvider.getAttachmentUri(accountId, attachmentId).toString();\n            localAttachment.mSize = copySize;\n            localAttachment.mContentUri = contentUriString;\n            ContentValues cv = new ContentValues();\n            cv.put(AttachmentColumns.SIZE, copySize);\n            cv.put(AttachmentColumns.CONTENT_URI, contentUriString);\n            Uri uri = ContentUris.withAppendedId(Attachment.CONTENT_URI, attachmentId);\n            context.getContentResolver().update(uri, cv, null, null);\n        }\n    }\n", "code2": "    public String upload() {\n        System.out.println(imgFile);\n        String destDir = \"E:\\\\ganymede_workspace\\\\training01\\\\web\\\\user_imgs\\\\map_bg.jpg\";\n        FileOutputStream fos;\n        try {\n            fos = new FileOutputStream(new File(destDir));\n            IOUtils.copy(new FileInputStream(imgFile), fos);\n            IOUtils.closeQuietly(fos);\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return \"show\";\n    }\n", "label": 1, "substitutes": {"saveAttachmentBody": ["saveAttachableFile", "saveAttachmentFile", "saveAttachmentPart", "saveAttachedBody", "saveAttentionBody", "saveAttachedFile", "saveExtachedPart", "saveAttachablePart", "saveAttentionFile", "saveAttachedbody", "saveExtachmentFile", "saveExtachedFile", "saveExtachedBody", "saveAttachedPart", "saveExtachedbody", "saveAttachmentbody", "saveAttachableBody", "saveExtachmentPart", "saveAttentionbody", "saveAttachablebody", "saveExtachmentBody", "saveExtachmentbody", "saveAttentionPart"], "context": ["course", "system", "search", "background", "contact", "subject", "java", "parent", "ce", "component", "history", "service", "stack", "current", "comments", "network", "content", "ctx", "view", "null", "center", "connection", "instance", "host", "present", "cc", "config", "cf", "message", "environment", "container", "support", "foundation", "frame", "template", "client", "Context", "document", "media", "application", "chain", "version", "response", "request", "cache", "tx", "state", "translation", "command"], "part": ["pod", "sample", "trans", "bound", "file", "p", "post", "pair", "parent", "component", "join", "PART", "start", "zone", "temp", "se", "work", "thread", "block", "session", "connection", "instance", "piece", "host", "base", "job", "parts", "message", "sp", "tmp", "art", "name", "Part", "patch", "data", "add", "report", "top", "and", "version", "task", "tx", "reply", "body", "type", "partial", "word"], "localAttachment": ["localAssachment", " localAttached", "localAttachached", " localAttignment", "localDetignment", " localAssached", "localAcachment", " localDetached", " localDetail", "localDetached", "localAppachment", " localDetachment", "localAttachail", "localAttachignment", "localAssention", " localAttachention", "localattention", "localAssment", "localAttignment", " localAttachignment", "localAttachention", "localAttachachment", "localAttail", "localAttention", "localATTignment", "localAcail", " localAttachachment", " localAttail", "localattached", "localAppention", "localAssignment", "localAttached", " localDetignment", "localAcignment", "localDetention", "localAssail", "localATTachment", "localAppail", "localAttment", "localDetail", "localATTention", "localATTment", "localattachment", "localAssached", " localAttachached", " localAssail", " localAssachment", " localAttment", "localAcached", "localAppached", " localAttention", " localAssention", "localDetachment"], "accountId": ["objectName", "objectID", " accountDb", "containerId", "bankId", "accountID", "AccountById", "bankS", "accountNum", "accountDb", " accountById", " accountS", "accS", "bankAnd", "amountDb", "accId", "AccountID", "AccountId", "accountName", "amountInt", "accNum", "accID", "accountS", " accountName", " accountID", "amountId", "accountAnd", "accInt", "bankID", "accDb", "containerNum", "accountById", "containerInt", "accAnd", " accountAnd", "AccountName", "accountInt", "containerID", "amountID", "objectId", "objectById", " accountInt", " accountNum"], "attachmentId": ["contachmentId", "contachmentid", "attionId", "contachmentById", "AttociationById", "attachmentById", "assachmentById", "Attociationid", "AttachmentId", "assignmentId", "assignmentid", "assachmentID", "attignmentID", "contachedById", "attociationid", "assachmentId", "assachmentid", "attociationID", "AttociationID", "attmentId", "attionid", "attachmentID", "attociationSerial", "AttociationId", "attacheID", "attacheById", "contachmentSerial", "attachedById", "attmentID", "attacheid", "attachmentSerial", "attociationById", "attionById", "attachmentid", "attachedID", "contachedSerial", "assignmentID", "attachedId", "attociationId", "AttachmentID", "attignmentid", "contachedId", "attignmentById", "assignmentById", "Attachmentid", "contachedid", "attionSerial", "attmentid", "attmentById", "attignmentId", "attachedSerial", "attachedid", "attacheId", "AttachmentById"], "in": ["mc", "file", "en", "p", "id", "is", "inf", "per", "up", "al", "cin", "from", "conf", "r", "act", "ex", "IN", "inc", "i", "inner", "inside", "m", "on", "as", "iter", "din", "raw", "init", "ch", "all", "vin", "isin", "input", "ind", "mm", "read", "gin", "In", "source", "ai", "ins", "rin", "sum", "l", "it", "info", "bin", "body", "con", "inn"], "saveIn": ["storeOut", "savIn", "secureAs", " saveOut", "saveIN", "sendOut", "sendPath", "storePath", "getIN", " saveIN", "sendIN", " saveIns", "aveIn", "savAs", "secureIn", "sendIn", "saveOut", "getOut", "secureIns", "storeIn", "savePath", "secureIN", "aveIN", "getIns", " savePath", "savIN", "aveOut", "saveIns", "getIn", "aveIns", "savIns", "storeIN"], "saveAs": ["aveAn", " saveAn", "dumpTo", "Saveas", "saveAS", "saveAn", "SaveIn", "SaveAS", "aveAS", "submitIn", "aveAs", " saveAS", " saveTo", " saveBy", "aveIn", "saveTo", "dumpAn", "dumpAs", "submitBy", "submitas", "submitAs", "SaveBy", "saveBy", "SaveAs", "aveas", "saveas", "submitAS", "aveTo"], "out": ["os", "v", "serv", "cos", "log", "OU", "io", "t", "conv", "obj", "up", "aos", "output", "copy", "inv", "to", "null", "ex", "i", "n", "inner", "res", "gc", "auto", "outer", "o", "net", "oss", "cn", "all", "name", "sys", "OUT", "one", "ao", "Out", "sum", "it", "ent", "ou", "outs", "can", "co", "con"], "copySize": ["likeCount", "copyCount", "pushLength", "msgSIZE", "opySIZE", "copyFontSize", "likeSize", "CopyPercent", "pushFontSize", " copyCount", "copySIZE", "CopyCount", "pushCount", "opySize", " copyLength", "msgSize", "CopyFontSize", "msgLength", "opyLength", "likeFontSize", "copyLength", " copyFontSize", "msgPercent", "CopySize", "CopySIZE", "copyPercent", "CopyLength", "pushSize", "likeLength", "opyPercent"], "contentUriString": ["contentIriStr", "contentUrisString", "contentUistring", "contentIiStatic", "contentIiStr", "contentUriStr", "contentUniStr", "contentUnristring", "contentUnuriNumber", "contentUuriStatic", "contentUnuriStr", "contentUnistring", "contentIriString", "contentUuriNumber", "contentUiStatic", "contentUuristring", "contentUnuristring", "contentUristring", "contentUriStatic", "contentUicString", "contentUniString", "contentUnuriString", "contentUriNumber", "contentUiStr", "contentUuriStr", "contentUniNumber", "contentUrisNumber", "contentUiString", "contentUrisStr", "contentUnriNumber", "contentUnriString", "contentUnriStr", "contentUrisstring", "contentIristring", "contentIriStatic", "contentUicstring", "contentIiString", "contentUuriString", "contentIistring", "contentUicStr", "contentUicStatic"], "mSize": ["mLength", "moBytes", "lPos", "lSize", "lBytes", "moLength", "mBytes", "nLength", "nBytes", "lLength", "nPos", "mPos", "moSize", "nSize", "moPos"], "mContentUri": ["mContentUuid", "mResourceUris", "mContentUris", "mResourceUuid", "mResourceIuid", "mContentPuid", "mContentURI", "mContent_RI", "mContentIris", "mContentIuid", "mContentPRI", "mResourceURI", "mContent_ris", "mContentIRI", "mContent_uid", "mContentPri", "mResourceUri", "mContentPris", "mResourceIris", "mResourceIRI", "mResourceIri", "mContent_ri", "mContentIri"], "cv": ["CV", "ev", "cmp", "v", "nv", "pb", "fc", "mult", "vp", "qu", "cu", "vt", "conv", "lv", "vr", "ctrl", "const", "lc", "cp", "cod", "c", "act", "box", "vol", "uv", "cc", "vm", "gc", "csv", "cf", "desc", "ct", "cn", "cap", "vv", "av", "xc", "cm", "nc", "sv", "GV", "cont", "qv", "ov", "cb", "rc", "tc", "vc", "buf", "um", "dc", "cas"], "uri": ["du", "subject", "address", "picture", "bid", "dir", "term", "id", "resource", "uni", "component", "uid", "doi", "phi", "ri", "url", "range", "i", "query", "URI", " ni", "link", " URI", "prefix", "result", " Uri", "ur", "q", "ue", "u", "iri", "qi", "folder", "report", "uu", "handle", "ip", "directory", "ui", "unit", "origin"]}}
{"id1": "15799935", "id2": "21308543", "code1": "    public static void saveAttachmentBody(Context context, Part part, Attachment localAttachment, long accountId) throws MessagingException, IOException {\n        if (part.getBody() != null) {\n            long attachmentId = localAttachment.mId;\n            InputStream in = part.getBody().getInputStream();\n            File saveIn = AttachmentProvider.getAttachmentDirectory(context, accountId);\n            if (!saveIn.exists()) {\n                saveIn.mkdirs();\n            }\n            File saveAs = AttachmentProvider.getAttachmentFilename(context, accountId, attachmentId);\n            saveAs.createNewFile();\n            FileOutputStream out = new FileOutputStream(saveAs);\n            long copySize = IOUtils.copy(in, out);\n            in.close();\n            out.close();\n            String contentUriString = AttachmentProvider.getAttachmentUri(accountId, attachmentId).toString();\n            localAttachment.mSize = copySize;\n            localAttachment.mContentUri = contentUriString;\n            ContentValues cv = new ContentValues();\n            cv.put(AttachmentColumns.SIZE, copySize);\n            cv.put(AttachmentColumns.CONTENT_URI, contentUriString);\n            Uri uri = ContentUris.withAppendedId(Attachment.CONTENT_URI, attachmentId);\n            context.getContentResolver().update(uri, cv, null, null);\n        }\n    }\n", "code2": "    private static void copyFile(String src, String target) throws IOException {\n        FileChannel ic = new FileInputStream(src).getChannel();\n        FileChannel oc = new FileOutputStream(target).getChannel();\n        ic.transferTo(0, ic.size(), oc);\n        ic.close();\n        oc.close();\n    }\n", "label": 1, "substitutes": {"saveAttachmentBody": ["saveAttachableFile", "saveAttachmentFile", "saveAttachmentPart", "saveAttachedBody", "saveAttentionBody", "saveAttachedFile", "saveExtachedPart", "saveAttachablePart", "saveAttentionFile", "saveAttachedbody", "saveExtachmentFile", "saveExtachedFile", "saveExtachedBody", "saveAttachedPart", "saveExtachedbody", "saveAttachmentbody", "saveAttachableBody", "saveExtachmentPart", "saveAttentionbody", "saveAttachablebody", "saveExtachmentBody", "saveExtachmentbody", "saveAttentionPart"], "context": ["course", "system", "search", "background", "contact", "subject", "java", "parent", "ce", "component", "history", "service", "stack", "current", "comments", "network", "content", "ctx", "view", "null", "center", "connection", "instance", "host", "present", "cc", "config", "cf", "message", "environment", "container", "support", "foundation", "frame", "template", "client", "Context", "document", "media", "application", "chain", "version", "response", "request", "cache", "tx", "state", "translation", "command"], "part": ["pod", "sample", "trans", "bound", "file", "p", "post", "pair", "parent", "component", "join", "PART", "start", "zone", "temp", "se", "work", "thread", "block", "session", "connection", "instance", "piece", "host", "base", "job", "parts", "message", "sp", "tmp", "art", "name", "Part", "patch", "data", "add", "report", "top", "and", "version", "task", "tx", "reply", "body", "type", "partial", "word"], "localAttachment": ["localAssachment", " localAttached", "localAttachached", " localAttignment", "localDetignment", " localAssached", "localAcachment", " localDetached", " localDetail", "localDetached", "localAppachment", " localDetachment", "localAttachail", "localAttachignment", "localAssention", " localAttachention", "localattention", "localAssment", "localAttignment", " localAttachignment", "localAttachention", "localAttachachment", "localAttail", "localAttention", "localATTignment", "localAcail", " localAttachachment", " localAttail", "localattached", "localAppention", "localAssignment", "localAttached", " localDetignment", "localAcignment", "localDetention", "localAssail", "localATTachment", "localAppail", "localAttment", "localDetail", "localATTention", "localATTment", "localattachment", "localAssached", " localAttachached", " localAssail", " localAssachment", " localAttment", "localAcached", "localAppached", " localAttention", " localAssention", "localDetachment"], "accountId": ["objectName", "objectID", " accountDb", "containerId", "bankId", "accountID", "AccountById", "bankS", "accountNum", "accountDb", " accountById", " accountS", "accS", "bankAnd", "amountDb", "accId", "AccountID", "AccountId", "accountName", "amountInt", "accNum", "accID", "accountS", " accountName", " accountID", "amountId", "accountAnd", "accInt", "bankID", "accDb", "containerNum", "accountById", "containerInt", "accAnd", " accountAnd", "AccountName", "accountInt", "containerID", "amountID", "objectId", "objectById", " accountInt", " accountNum"], "attachmentId": ["contachmentId", "contachmentid", "attionId", "contachmentById", "AttociationById", "attachmentById", "assachmentById", "Attociationid", "AttachmentId", "assignmentId", "assignmentid", "assachmentID", "attignmentID", "contachedById", "attociationid", "assachmentId", "assachmentid", "attociationID", "AttociationID", "attmentId", "attionid", "attachmentID", "attociationSerial", "AttociationId", "attacheID", "attacheById", "contachmentSerial", "attachedById", "attmentID", "attacheid", "attachmentSerial", "attociationById", "attionById", "attachmentid", "attachedID", "contachedSerial", "assignmentID", "attachedId", "attociationId", "AttachmentID", "attignmentid", "contachedId", "attignmentById", "assignmentById", "Attachmentid", "contachedid", "attionSerial", "attmentid", "attmentById", "attignmentId", "attachedSerial", "attachedid", "attacheId", "AttachmentById"], "in": ["mc", "file", "en", "p", "id", "is", "inf", "per", "up", "al", "cin", "from", "conf", "r", "act", "ex", "IN", "inc", "i", "inner", "inside", "m", "on", "as", "iter", "din", "raw", "init", "ch", "all", "vin", "isin", "input", "ind", "mm", "read", "gin", "In", "source", "ai", "ins", "rin", "sum", "l", "it", "info", "bin", "body", "con", "inn"], "saveIn": ["storeOut", "savIn", "secureAs", " saveOut", "saveIN", "sendOut", "sendPath", "storePath", "getIN", " saveIN", "sendIN", " saveIns", "aveIn", "savAs", "secureIn", "sendIn", "saveOut", "getOut", "secureIns", "storeIn", "savePath", "secureIN", "aveIN", "getIns", " savePath", "savIN", "aveOut", "saveIns", "getIn", "aveIns", "savIns", "storeIN"], "saveAs": ["aveAn", " saveAn", "dumpTo", "Saveas", "saveAS", "saveAn", "SaveIn", "SaveAS", "aveAS", "submitIn", "aveAs", " saveAS", " saveTo", " saveBy", "aveIn", "saveTo", "dumpAn", "dumpAs", "submitBy", "submitas", "submitAs", "SaveBy", "saveBy", "SaveAs", "aveas", "saveas", "submitAS", "aveTo"], "out": ["os", "v", "serv", "cos", "log", "OU", "io", "t", "conv", "obj", "up", "aos", "output", "copy", "inv", "to", "null", "ex", "i", "n", "inner", "res", "gc", "auto", "outer", "o", "net", "oss", "cn", "all", "name", "sys", "OUT", "one", "ao", "Out", "sum", "it", "ent", "ou", "outs", "can", "co", "con"], "copySize": ["likeCount", "copyCount", "pushLength", "msgSIZE", "opySIZE", "copyFontSize", "likeSize", "CopyPercent", "pushFontSize", " copyCount", "copySIZE", "CopyCount", "pushCount", "opySize", " copyLength", "msgSize", "CopyFontSize", "msgLength", "opyLength", "likeFontSize", "copyLength", " copyFontSize", "msgPercent", "CopySize", "CopySIZE", "copyPercent", "CopyLength", "pushSize", "likeLength", "opyPercent"], "contentUriString": ["contentIriStr", "contentUrisString", "contentUistring", "contentIiStatic", "contentIiStr", "contentUriStr", "contentUniStr", "contentUnristring", "contentUnuriNumber", "contentUuriStatic", "contentUnuriStr", "contentUnistring", "contentIriString", "contentUuriNumber", "contentUiStatic", "contentUuristring", "contentUnuristring", "contentUristring", "contentUriStatic", "contentUicString", "contentUniString", "contentUnuriString", "contentUriNumber", "contentUiStr", "contentUuriStr", "contentUniNumber", "contentUrisNumber", "contentUiString", "contentUrisStr", "contentUnriNumber", "contentUnriString", "contentUnriStr", "contentUrisstring", "contentIristring", "contentIriStatic", "contentUicstring", "contentIiString", "contentUuriString", "contentIistring", "contentUicStr", "contentUicStatic"], "mSize": ["mLength", "moBytes", "lPos", "lSize", "lBytes", "moLength", "mBytes", "nLength", "nBytes", "lLength", "nPos", "mPos", "moSize", "nSize", "moPos"], "mContentUri": ["mContentUuid", "mResourceUris", "mContentUris", "mResourceUuid", "mResourceIuid", "mContentPuid", "mContentURI", "mContent_RI", "mContentIris", "mContentIuid", "mContentPRI", "mResourceURI", "mContent_ris", "mContentIRI", "mContent_uid", "mContentPri", "mResourceUri", "mContentPris", "mResourceIris", "mResourceIRI", "mResourceIri", "mContent_ri", "mContentIri"], "cv": ["CV", "ev", "cmp", "v", "nv", "pb", "fc", "mult", "vp", "qu", "cu", "vt", "conv", "lv", "vr", "ctrl", "const", "lc", "cp", "cod", "c", "act", "box", "vol", "uv", "cc", "vm", "gc", "csv", "cf", "desc", "ct", "cn", "cap", "vv", "av", "xc", "cm", "nc", "sv", "GV", "cont", "qv", "ov", "cb", "rc", "tc", "vc", "buf", "um", "dc", "cas"], "uri": ["du", "subject", "address", "picture", "bid", "dir", "term", "id", "resource", "uni", "component", "uid", "doi", "phi", "ri", "url", "range", "i", "query", "URI", " ni", "link", " URI", "prefix", "result", " Uri", "ur", "q", "ue", "u", "iri", "qi", "folder", "report", "uu", "handle", "ip", "directory", "ui", "unit", "origin"]}}
{"id1": "22046596", "id2": "12782570", "code1": "        public void copy(File s, File t) throws IOException {\n            FileChannel in = (new FileInputStream(s)).getChannel();\n            FileChannel out = (new FileOutputStream(t)).getChannel();\n            in.transferTo(0, s.length(), out);\n            in.close();\n            out.close();\n        }\n", "code2": "    public void logging() throws Fault {\n        final InterceptorWrapper wrap = new InterceptorWrapper(message);\n        final LoggingMessage buffer = new LoggingMessage(\"Inbound Message\\n----------------------------\");\n        String encoding = (String) wrap.getEncoding();\n        if (encoding != null) {\n            buffer.getEncoding().append(encoding);\n        }\n        Object headers = wrap.getProtocolHeaders();\n        if (headers != null) {\n            buffer.getHeader().append(headers);\n        }\n        InputStream is = (InputStream) wrap.getContent(InputStream.class);\n        if (is != null) {\n            CachedOutputStream bos = new CachedOutputStream();\n            try {\n                IOUtils.copy(is, bos);\n                bos.flush();\n                is.close();\n                this.message.setContent(InputStream.class, bos.getInputStream());\n                if (bos.getTempFile() != null) {\n                    logger.error(\"\\nMessage (saved to tmp file):\\n\");\n                    logger.error(\"Filename: \" + bos.getTempFile().getAbsolutePath() + \"\\n\");\n                }\n                if (bos.size() > limit) {\n                    logger.error(\"(message truncated to \" + limit + \" bytes)\\n\");\n                }\n                bos.writeCacheTo(buffer.getPayload(), limit);\n                bos.close();\n            } catch (IOException e) {\n                throw new Fault(e);\n            }\n        }\n        logger.debug(\"Message received :\\n\" + buffer.getPayload().toString());\n    }\n", "label": 1, "substitutes": {"copy": [" rename", " dup", " cp", " cop", " populate", " restore", " Transfer", " paste", " copying", " replace", " seek", "cp", " parallel", "write", " extend", " move", "paste", " share", "Copy", "upload", "transfer", " mirror", " duplicate", " insert", " overwrite", " replicate", " swap"], "s": ["sl", "js", "sq", "v", "string", "p", "str", "ats", "src", "b", "is", "ws", "st", "z", "xs", "ls", "S", "gs", "rs", "ts", "n", "south", "cs", "ns", "f", "fs", "ps", "sf", "ses", "ms", "sb", "its", "input", "ds", "sts", "source", "sv", "ins", "ies", "l", "g", "less", "es", "ss", "qs", "gets", "os", "ys"], "t": ["v", "pt", "at", "ret", "h", "p", "unt", "txt", "mt", "test", "k", "st", "ot", "nt", "te", "j", "ts", "n", "i", "title", "gt", "f", "o", "ct", "rt", "template", "T", "wt", "ht", "tr", "kt", "l", "it", "g", "ent", "tc", "tt", "w"], "in": ["ic", "en", "sin", "io", "is", "inf", "up", "cin", "from", "mi", "IN", "inc", "i", "inner", "inside", "ar", " din", "iter", "din", "oin", "init", "user", "input", "isin", "ind", "ie", "gin", "im", "In", "source", "and", "ai", "ins", "rin", "ir", "it", "info", "bin", "con", "inn"], "out": ["v", "outs", "en", "by", "io", "channel", "b", "k", "up", "nt", "ot", "aos", "msg", "j", "output", "c", "ex", "n", "to", "check", "i", "res", "gt", "outer", "o", "net", "result", "conn", "cn", "ch", "client", "sys", "OUT", "or", "ac", "Out", "l", "it", "g", "ou", "can", "this", "co", "con", "w"]}}
{"id1": "13666876", "id2": "9319440", "code1": "    @Override\n    public String transformSingleFile(X3DEditorSupport.X3dEditor xed) {\n        Node[] node = xed.getActivatedNodes();\n        X3DDataObject dob = (X3DDataObject) xed.getX3dEditorSupport().getDataObject();\n        FileObject mySrc = dob.getPrimaryFile();\n        File mySrcF = FileUtil.toFile(mySrc);\n        File myOutF = new File(mySrcF.getParentFile(), mySrc.getName() + \".x3dv.gz\");\n        TransformListener co = TransformListener.getInstance();\n        co.message(NbBundle.getMessage(getClass(), \"Gzip_compression_starting\"));\n        co.message(NbBundle.getMessage(getClass(), \"Saving_as_\") + myOutF.getAbsolutePath());\n        co.moveToFront();\n        co.setNode(node[0]);\n        try {\n            String x3dvFile = ExportClassicVRMLAction.instance.transformSingleFile(xed);\n            FileInputStream fis = new FileInputStream(new File(x3dvFile));\n            GZIPOutputStream gzos = new GZIPOutputStream(new FileOutputStream(myOutF));\n            byte[] buf = new byte[4096];\n            int ret;\n            while ((ret = fis.read(buf)) > 0) gzos.write(buf, 0, ret);\n            gzos.close();\n        } catch (Exception ex) {\n            co.message(NbBundle.getMessage(getClass(), \"Exception:__\") + ex.getLocalizedMessage());\n            return null;\n        }\n        co.message(NbBundle.getMessage(getClass(), \"Gzip_compression_complete\"));\n        return myOutF.getAbsolutePath();\n    }\n", "code2": "    public static String load(String id) {\n        String xml = \"\";\n        if (id.length() < 5) return \"\";\n        try {\n            working = true;\n            URL url = new URL(\"http://pastebin.com/download.php?i=\" + id);\n            URLConnection conn = url.openConnection();\n            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));\n            xml = \"\";\n            String str;\n            while ((str = reader.readLine()) != null) {\n                xml += str;\n            }\n            reader.close();\n            working = false;\n            return xml.toString();\n        } catch (IOException ex) {\n            JOptionPane.showMessageDialog(null, \" Load error\");\n        }\n        working = false;\n        return xml;\n    }\n", "label": 0, "substitutes": {"transformSingleFile": ["transformMultiModel", "transformSimpleFile", "transformSimplePage", "transformsingleSourceFile", "transformsingleModel", "processSingleFile", "transformOneFiles", "transformSimpleModel", "TransformSimpleFile", "transformMultiFile", "processsingleSourceFile", "TransformSimplePage", "transformsinglefile", "processSingleSourceFile", "transformsingleRecord", "transformSingleFiles", "processsinglefile", "TransformSingleRecord", "transformMultifile", "transformSimpleRecord", "transformMultiPage", "TransformSingleFile", "transformMultiSourceFile", "transformSinglefile", "TransformSinglePage", "transformsingleFiles", "TransformSingleModel", "processsingleFiles", "transformSinglePage", "TransformSimpleModel", "processSinglefile", "transformOnefile", "transformSingleRecord", "processsingleFile", "TransformSimpleRecord", "transformMultiFiles", "transformsinglePage", "transformsingleFile", "transformSingleModel", "processSingleFiles", "transformSingleSourceFile", "transformMultiRecord", "transformOneFile", "transformOneSourceFile"], "xed": [" xred", "Xeded", "xred", "uxED", "exed", "uxed", "txED", "xeds", "pxeded", "wxied", "pxed", "txer", "wxented", "xED", "Xer", " xED", "wxEd", "Xeds", "rxED", "wxred", "Xed", "txeds", "passed", "xEd", "wxed", "passED", "exeded", "rxer", " xied", "wxED", " xented", "rxeds", "pxeds", "txed", "XED", "passred", "exED", "xented", "xied", "exeds", " xEd", "rxed", "pxED", "xer", "uxied", "passEd", "uxented", "xeded"], "node": ["seed", "Node", "post", "parent", "resource", "channel", "process", "map", "remote", "component", "event", "row", "no", "view", "index", "edge", "range", "n", "day", "hand", "link", "ode", "note", "job", "set", "feature", "entity", "station", "create", "tree", "scene", "name", "object", "line", "stage", "load", "our", "one", "image", "and", "array", "right", "directory", "de", "entry", "word"], "dob": ["diob", "dod", "doy", "Doy", " doy", " dobar", "adoy", "adab", "dobb", "adob", "dobar", "diod", "adobar", "diobb", "drobb", "drob", " dod", "Dob", "diab", "dab", "Dab", " dobb", "drod", "Dobar", "drab", " dab"], "mySrc": ["mySRC", "mySfc", "myInssrc", "myInsrc", "MySrc", "MySRC", "mySsrc", "mySourceource", "mySelRC", " mySfc", "myAssrc", "mySelources", "myAsource", "MySources", "myAsrc", "myDesources", " mySRC", "myAsRC", " mySsrc", "myInsRC", "mySourceRC", "mySourcerc", "MySsrc", "mySingfc", "mySourcesrc", "mySource", "myDesRC", "mySingrc", "mySelrc", "myDesrc", "myInsfc", "mySingsrc", "myDessrc", "MySource", "mySingRC", "mySources", "mySelsrc"], "mySrcF": ["mySRCC", "myMrcF", "myMourceV", "mySrcP", "mySsrcF", "mySufFP", "mySrtC", "mySourceV", "mySufO", "mySrtP", "mySRCP", "mySsrcV", "mySrcFP", "mySsrcC", "myMrcV", "myMrcO", "mySrcO", "mySRCI", "myMourceF", "mySrcV", "mySufF", "mySsrcP", "mySufV", "mySsrcI", "mySrtI", "mySRCF", "myMourceFP", "myMourceO", "mySrtF", "mySourceFP", "myMrcFP", "mySrcI", "mySsrcFP", "mySrcC", "mySourceF", "mySsrcO", "mySourceO"], "myOutF": ["MyOutV", "myoutL", "mysNetFL", "myInV", "mysOutL", "myInC", "myNetDF", "myNetF", "myOutputC", "myCoL", " myNetDF", "myoutV", "myOffFile", "MyInF", "myArtF", "myArtFL", "mysNetF", "myOutputFs", "MyInFs", "myInFile", "myNetFL", "myOutE", "myCoFL", " myOutC", "myCoW", "myInL", "MyOutFs", "myNetL", "mysOutW", "myNetW", " myOutV", "myOutFs", "myObjF", "myArtW", " myNetFile", " myOutDF", " myoutL", "myOffDF", "MyOutFile", "myArtL", " myOutE", "myOutFile", " myoutF", "mysNetL", "myOutL", "myOutputL", " myoutV", "myNetFile", "myoutC", "myCoF", "myOutFL", "myoutF", " myNetE", "myOutputDF", "MyInFile", " myOutFile", "myInF", "MyOutF", "myOutputF", "myObjFs", "myObjFile", "mysOutF", "myOutC", "myOutV", "myOutDF", "myObjV", "mysNetW", "myOffE", "myOutputE", "myInFs", "mysOutFL", " myNetF", "myNetE", " myOutL", "myOutputFile", "myOutputV", "MyInV", " myoutC", "myOutW", "myOffF"], "co": ["cv", "cover", "ico", "cos", "so", "fc", "flo", "io", "ce", "mo", "cu", "ko", "po", "obj", "cop", "ca", "no", "ctrl", "copy", "go", "lc", "cod", "c", "ace", " Co", "ro", "cs", "ci", "cc", "aco", "col", "o", "com", "cl", "loc", "ck", "lo", "roc", "Co", "ho", "xc", "cm", "nc", "soc", "fo", "CO", "cho", "wo", "yes", "coll", "cache", "ror", "cal", "can", "gc", "coord", "oc", "con"], "x3dvFile": ["x3dbFile", "x3pdvfile", "x3cdVFilename", "x3davFile", "x3dtFilename", "x3dvsPath", "x3dtfile", "x3dvfile", "x3pdbString", "x3cdvPath", "x3pdvFilename", "x3davPath", "x3pdbfile", "x3dvsFilename", "x3pdvFile", "x3pdbFilename", "x3dtFile", "x3dVPath", "x3dbString", "x3dVFilename", "x3davFilename", "x3dVString", "x3dvPath", "x3dtString", "x3dbFilename", "x3dVfile", "x3pdvString", "x3pdbFile", "x3dVFile", "x3cdvFilename", "x3dvString", "x3dbfile", "x3cdVPath", "x3cdVFile", "x3dvsFile", "x3dvFilename", "x3cdvFile"], "fis": ["frie", "fie", "fiz", "fileiz", "fires", " fiz", "flis", " fie", "biss", "fris", " fiss", "bie", "frisi", "flires", "fiss", "bis", " fires", "fliss", "bisi", "fileires", "fileis", " fisi", "fisi", "fileiss", "friss", "fliz"], "gzos": ["sslos", "gsops", "ggos", "gzaos", "ggoes", "ggops", "sslaos", "gaos", "gznos", "goss", "go", "zipnos", "gzops", "zos", "zipos", "gzies", "gsos", "zops", "zies", "zipops", "gzoes", "zo", "gtoes", "zoes", "sslo", "gtnos", "ziposs", "zoss", "gzo", "zaos", "gsoss", "gtops", "gties", "gos", "gtoss", "gsnos", "ggies", "ssloss", "gtos", "gzoss"], "buf": ["cv", "aka", "cur", "bytes", "batch", "bag", "var", "bar", "cat", "orig", "b", "conv", "arr", "rb", "font", "cast", "max", "good", "box", "block", "mu", "mem", "vec", "img", "bus", "cf", "fb", "br", "seq", "buffer", "buff", "raw", "emb", "cap", "wb", "tab", "Buff", "cam", "cb", "pkg", "uf", "cmd", "ref", "Buffer"], "ret": ["err", "val", "aux", "v", "elt", "ctr", "et", "mt", "RET", "back", "print", "test", "obj", "nt", "ptr", "repl", "deg", "re", "len", "r", "rets", "ext", "red", "res", "inter", "arg", "gt", "def", "iter", "end", "out", "ft", "rt", "pret", "cert", "ry", "ter", "att", "alt", "cont", "tr", " Ret", "cmd", "ref", "continue", "Ret"]}}
{"id1": "22603577", "id2": "17773263", "code1": "    public static String getFileContentFromPlugin(String path) {\n        URL url = getURLFromPlugin(path);\n        StringBuffer sb = new StringBuffer();\n        try {\n            Scanner scanner = new Scanner(url.openStream());\n            while (scanner.hasNextLine()) {\n                String line = scanner.nextLine();\n                sb.append(line + \"\\n\");\n            }\n            scanner.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n            return \"\";\n        }\n        return sb.toString();\n    }\n", "code2": "    public boolean visar() throws SQLException, ClassNotFoundException, Exception {\n        Connection conn = null;\n        PreparedStatement ps = null;\n        Date fechaSystem = new Date();\n        DateFormat aaaammdd = new SimpleDateFormat(\"yyyyMMdd\");\n        DateFormat hhmmss = new SimpleDateFormat(\"HHmmss\");\n        DateFormat sss = new SimpleDateFormat(\"S\");\n        String ss = sss.format(fechaSystem);\n        if (ss.length() > 2) {\n            ss = ss.substring(0, 2);\n        }\n        boolean visado = false;\n        try {\n            conn = ToolsBD.getConn();\n            conn.setAutoCommit(false);\n            String sentenciaSql = \"UPDATE BZMODIF SET FZJCUSVI=?, FZJFVISA=?, FZJHVISA=?\" + ((hayVisadoExtracto) ? \", FZJIEXTR=?\" : \"\") + ((hayVisadoRemitente) ? \", FZJIREMI=?\" : \"\") + \" WHERE FZJCENSA='S' AND FZJCAGCO=? AND FZJNUMEN=? AND FZJANOEN=? AND FZJFMODI=? AND FZJHMODI=?\";\n            ps = conn.prepareStatement(sentenciaSql);\n            ps.setString(1, usuarioVisado);\n            ps.setInt(2, Integer.parseInt(aaaammdd.format(fechaSystem)));\n            ps.setInt(3, Integer.parseInt(hhmmss.format(fechaSystem) + ss));\n            int contador = 4;\n            if (hayVisadoExtracto) {\n                ps.setString(contador++, \"X\");\n            }\n            if (hayVisadoRemitente) {\n                ps.setString(contador++, \"X\");\n            }\n            ps.setInt(contador++, oficina);\n            ps.setInt(contador++, numeroRegistro);\n            ps.setInt(contador++, anoSalida);\n            ps.setString(contador++, fechaModificacion);\n            ps.setString(contador++, horaModificacion);\n            int registrosAfectados = ps.executeUpdate();\n            if (registrosAfectados > 0 && !hayVisadoExtracto && !hayVisadoRemitente) {\n                visado = true;\n            }\n            if (registrosAfectados > 0 && (hayVisadoExtracto || hayVisadoRemitente)) {\n                boolean generado = generarBZVISAD(conn, Integer.parseInt(aaaammdd.format(fechaSystem)), Integer.parseInt(hhmmss.format(fechaSystem) + ss));\n                if (generado) {\n                    visado = actualizarBZSALIDA(conn);\n                }\n                String rem = \"\";\n                String com = \"\";\n                if (hayVisadoRemitente) {\n                    if (!remitente.trim().equals(\"\")) {\n                        rem = remitente;\n                    } else {\n                        javax.naming.InitialContext contexto = new javax.naming.InitialContext();\n                        Object ref = contexto.lookup(\"es.caib.regweb.ValoresHome\");\n                        ValoresHome home = (ValoresHome) javax.rmi.PortableRemoteObject.narrow(ref, ValoresHome.class);\n                        Valores valor = home.create();\n                        rem = valor.recuperaRemitenteCastellano(entidad1, entidad2 + \"\");\n                        valor.remove();\n                    }\n                } else {\n                    if (!altres.trim().equals(\"\")) {\n                        rem = remitente;\n                    } else {\n                        javax.naming.InitialContext contexto = new javax.naming.InitialContext();\n                        Object ref = contexto.lookup(\"es.caib.regweb.ValoresHome\");\n                        ValoresHome home = (ValoresHome) javax.rmi.PortableRemoteObject.narrow(ref, ValoresHome.class);\n                        Valores valor = home.create();\n                        rem = valor.recuperaRemitenteCastellano(entidad1Old, entidad2Old + \"\");\n                        valor.remove();\n                    }\n                }\n                if (hayVisadoExtracto) {\n                    com = extracto;\n                } else {\n                    com = comentario;\n                }\n                try {\n                    Class t = Class.forName(\"es.caib.regweb.module.PluginHook\");\n                    Class[] partypes = { String.class, Integer.class, Integer.class, Integer.class, Integer.class, String.class, String.class, String.class, Integer.class, Integer.class, String.class, Integer.class, String.class };\n                    Object[] params = { \"V\", new Integer(anoSalida), new Integer(numeroRegistro), new Integer(oficina), new Integer(fechaDocumento), rem, com, tipoDocumento, new Integer(fechaRegistro), new Integer(fzacagge), fora, new Integer(destinatario), idioma };\n                    java.lang.reflect.Method metodo = t.getMethod(\"salida\", partypes);\n                    metodo.invoke(null, params);\n                } catch (IllegalAccessException iae) {\n                } catch (IllegalArgumentException iae) {\n                } catch (InvocationTargetException ite) {\n                } catch (NullPointerException npe) {\n                } catch (ExceptionInInitializerError eiie) {\n                } catch (NoSuchMethodException nsme) {\n                } catch (SecurityException se) {\n                } catch (LinkageError le) {\n                } catch (ClassNotFoundException le) {\n                }\n            }\n            conn.commit();\n            int fzahsis = Integer.parseInt(hhmmss.format(fechaSystem) + ss);\n            String Stringsss = sss.format(fechaSystem);\n            switch(Stringsss.length()) {\n                case (1):\n                    Stringsss = \"00\" + Stringsss;\n                    break;\n                case (2):\n                    Stringsss = \"0\" + Stringsss;\n                    break;\n            }\n            int horamili = Integer.parseInt(hhmmss.format(fechaSystem) + Stringsss);\n            int fzafsis = Integer.parseInt(aaaammdd.format(fechaSystem));\n            logLopdBZMODIF(\"UPDATE\", sessioEjb.getCallerPrincipal().getName().toUpperCase(), fzafsis, horamili, 'S', numeroRegistro, anoSalida, oficina, Integer.parseInt(fechaModificacion), Integer.parseInt(horaModificacion));\n        } catch (Exception e) {\n            System.out.println(\"Error: \" + e.getMessage());\n            e.printStackTrace();\n            visado = false;\n            try {\n                if (conn != null) conn.rollback(); else System.out.println(\"ERROR: No es pot fer rollback sense connexi\u00f3!\");\n            } catch (Exception ex) {\n                System.out.println(\"Error: \" + e.getMessage());\n                ex.printStackTrace();\n            }\n        } finally {\n            ToolsBD.closeConn(conn, ps, null);\n        }\n        return visado;\n    }\n", "label": 0, "substitutes": {"getFileContentFromPlugin": ["getFileContentsFromUrl", "getFileContentFromPlug", "getFileContentsFromPlugin", "getFileContentsFromPlug", "getFileContentsForPlugin", "getFileContentfromPlug", "getFileContentFromProvider", "getFileContentForPlugin", "getFileContentfromProvider", "getFileContentsForUrl", "getFileContentfromUrl", "getFileContentFormUrl", "getFileContentsFromProvider", "getFileContentFormPlug", "getFileContentFormPlugin", "getFileContentForUrl", "getFileContentsForPlug", "getFileContentfromPlugin", "getFileContentFormProvider", "getFileContentForProvider", "getFileContentFromUrl", "getFileContentsForProvider", "getFileContentForPlug"], "path": ["text", "local", "pod", "module", "string", "file", "dir", "p", "log", "transform", "join", "filename", "ath", "alias", "PATH", "pattern", "location", "kind", "uri", "plugin", "prefix", "th", "root", "project", "input", "name", "spec", "template", "Path", "image", "key", "mount", "with", "directory", "full"], "url": ["build", "sl", "address", "gl", "lr", "file", "Url", "hub", "nl", "mail", "resource", "char", "browser", "r", "dl", "ll", "host", "ssl", "link", "html", "uri", "base", "URL", "job", "web", "loc", "ur", "user", "db", "impl", "client", "name", "bel", "hl", "http", "mount", "el", "l", "domain", "ref", "org"], "sb": ["sq", "pb", "lp", "nb", "bt", "b", "bg", "sm", "rb", "kb", "sg", "rob", "bb", "obs", "sa", "xb", "bh", "ssl", "ib", "sf", "fb", "BB", "bs", "erb", "buff", "sp", "eb", "db", "bsp", "ub", "bd", "sv", "bn", "bf", "zb", "cb", "bp", "ob", "mb", "buf", "wb", "gb", "SB", " SB", "lb"], "scanner": ["canter", "scanter", " Scaner", "caner", "searcher", "canener", "Scanener", "Scanter", " scanning", " scanifier", "searchter", "caninner", "Scanifier", " scaner", "Scaner", " Scanner", " Scanifier", " scanter", "scaninner", "scanener", "Scanner", "Scaninner", "canner", "searchning", "scanifier", "searchner", "canning", "scanning", " scaninner", " Scanter", "scaner", " scanener"], "line": ["text", "ln", "cell", "string", "file", "sequence", "nl", "inline", "point", "zone", "row", "stroke", "detail", "block", "day", "piece", "statement", "link", "page", "lin", "message", "command", "column", "user", "frame", "liner", "comment", "ine", "source", "le", "eline", "lined", "chain", "group", "Line", "l", "LINE", "next", "entry", "word"]}}
{"id1": "21754659", "id2": "2461169", "code1": "    private JButton getButtonSonido() {\n        if (buttonSonido == null) {\n            buttonSonido = new JButton();\n            buttonSonido.setText(Messages.getString(\"gui.AdministracionResorces.15\"));\n            buttonSonido.setIcon(new ImageIcon(getClass().getResource(\"/es/unizar/cps/tecnoDiscap/data/icons/view_sidetree.png\")));\n            buttonSonido.addActionListener(new java.awt.event.ActionListener() {\n\n                public void actionPerformed(java.awt.event.ActionEvent e) {\n                    JFileChooser fc = new JFileChooser();\n                    fc.addChoosableFileFilter(new SoundFilter());\n                    int returnVal = fc.showDialog(AdministracionResorces.this, Messages.getString(\"gui.AdministracionResorces.17\"));\n                    if (returnVal == JFileChooser.APPROVE_OPTION) {\n                        File file = fc.getSelectedFile();\n                        String rutaGlobal = System.getProperty(\"user.dir\") + \"/\" + rutaDatos + \"sonidos/\" + file.getName();\n                        String rutaRelativa = rutaDatos + \"sonidos/\" + file.getName();\n                        try {\n                            FileInputStream fis = new FileInputStream(file);\n                            FileOutputStream fos = new FileOutputStream(rutaGlobal, true);\n                            FileChannel canalFuente = fis.getChannel();\n                            FileChannel canalDestino = fos.getChannel();\n                            canalFuente.transferTo(0, canalFuente.size(), canalDestino);\n                            fis.close();\n                            fos.close();\n                            imagen.setSonidoURL(rutaRelativa);\n                            System.out.println(rutaGlobal + \" \" + rutaRelativa);\n                            buttonSonido.setIcon(new ImageIcon(getClass().getResource(\"/es/unizar/cps/tecnoDiscap/data/icons/view_sidetreeOK.png\")));\n                            gui.getAudio().reproduceAudio(imagen);\n                        } catch (IOException ex) {\n                            ex.printStackTrace();\n                        }\n                    } else {\n                    }\n                }\n            });\n        }\n        return buttonSonido;\n    }\n", "code2": "    public static boolean decodeFileToFile(String infile, String outfile) {\n        boolean success = false;\n        java.io.InputStream in = null;\n        java.io.OutputStream out = null;\n        try {\n            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);\n            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n            byte[] buffer = new byte[65536];\n            int read = -1;\n            while ((read = in.read(buffer)) >= 0) {\n                out.write(buffer, 0, read);\n            }\n            success = true;\n        } catch (java.io.IOException exc) {\n            exc.printStackTrace();\n        } finally {\n            try {\n                in.close();\n            } catch (Exception exc) {\n            }\n            try {\n                out.close();\n            } catch (Exception exc) {\n            }\n        }\n        return success;\n    }\n", "label": 1, "substitutes": {"getButtonSonido": ["getButtonSonida", "getButtonSonico", "getButtonLeonida", "getButtonDonilo", "getButtonLeonilo", "getButtonLeonico", "getbuttonSonico", "getButtonSonilo", "getButtonDonico", "getButtonLeonido", "getbuttonSonilo", "getButtonDonida", "getbuttonSonido", "getbuttonSonida", "getButtonDonido"], "buttonSonido": ["buttonSynphp", "ButtonSunao", "buttonNorthingo", "buttonSonilo", "positionJonito", "keysonido", "secondSynidable", "buttonNorthida", "secondSonito", "buttonSONila", "labelSonphp", "buttonSonphp", "buttonSONida", "buttonSONphp", "labelSonido", "fieldsonido", "buttonSunata", "buttonsonilo", "buttonBonico", "buttonSynila", "labelSONido", "buttonSoningo", "fieldSonido", "fieldSoningo", "positionSonito", "positionSonilo", "buttonJonida", "buttonDenido", "buttonJonata", "buttonBonardo", "buttonSONico", "buttonSynido", "buttonSynito", "buttonJonico", "buttonson\u00ed", "keySonardo", "buttonSonardo", "buttonSunao", "fieldsonida", "positionSonido", "buttonBonido", "buttonBonida", "positionJonilo", "buttonSunito", "buttonSonano", "buttonJonilo", "buttonBoningo", "buttonsonida", "ButtonSonao", "buttonJonicho", "labelSONila", "buttonBonano", "positionSonico", "buttonDenicho", "buttonNorthano", "buttonSonito", "buttonsonido", "keysonilo", "labelSonila", "secondSonidable", "ButtonSonico", "labelSONida", "fieldsonano", "buttonSunilo", "secondSynito", "keySonido", "ButtonSunata", "ButtonSonata", "buttonSunido", "secondSynicho", "keySonilo", "keyson\u00ed", "keySon\u00ed", "buttonJonidable", "buttonsoningo", "buttonHonilo", "ButtonSunido", "fieldsoningo", "buttonSONilo", "secondSonido", "buttonJonito", "buttonSonata", "buttonBonilo", "buttonSynidable", "positionJonido", "buttonSynida", "labelSONphp", "ButtonSonido", "buttonNorthido", "buttonBon\u00ed", "buttonBonao", "buttonSonico", "buttonHonido", "secondSonicho", "labelSonida", "buttonsonardo", "buttonSONito", "buttonSunico", "positionJonico", "buttonJonphp", "ButtonSunico", "buttonSonidable", "buttonJonila", "buttonSONido", "buttonBonata", "buttonsonano", "buttonSynicho", "buttonDenito", "buttonSon\u00ed", "buttonDenidable", "buttonHonardo", "buttonJonao", "secondSynido", "buttonSonila", "keysonardo", "buttonSonicho", "buttonJonido", "buttonHon\u00ed", "fieldSonida", "fieldSonano", "buttonSonao", "buttonSonida"], "e": ["ev", " fe", "ae", " ie", " who", "E", "t", "event", " ge", "te", "ed", "ing", "ese", "ee", "act", "a", " ve", " pe", "pe", " ke", "AE", "ED", "ie", " ate", " sent", "me", "es", "er"], "fc": ["cv", "mac", "mc", "abc", "fl", "ic", "icc", "anc", "fd", "fab", "lf", "conv", "RFC", "ctrl", "lc", "c", "inc", "tf", "isc", "cc", "ifa", "fs", "f", "cf", "fb", "fp", "FC", "dc", "etc", "fn", "nc", "uc", "soc", "fa", "rl", "bf", "fm", "rc", "fi", "WC", "coll", "tc", "ec", "vc", "gc", "pc", "bc", "con", "irc"], "returnVal": ["retVal", " returnval", "returnVAL", "returnValue", " returnValue", " returnVAL", "ReturnVal", "resultVal", "returnval", "resultval", "retval", "Returnval", "ReturnVAL", "retVAL", "ReturnValue", "resultValue", "resultVAL", "retValue"], "file": ["local", "path", "dir", "show", "parent", "io", "resource", "FILE", "channel", "disk", "ile", "File", "output", "url", "time", "fe", "to", "null", "block", "stat", "link", "valid", "f", "uri", "base", "form", "single", "table", "buffer", "format", "page", "message", "files", "get", "user", "create", "fp", "input", "tree", "name", "document", "spec", "template", "http", "data", "source", "image", "handle", "info", "type", "this", "full", "word"], "rutaGlobal": ["redutanGlobal", "rutiGlobal", "rutiRemote", "rutaStatic", "rutoStatic", "rutaglobal", "rutanLocal", "rutiglobal", "rontoGlobal", "rontoDefault", "rutaRemote", "RutoGlobal", "rontoGeneral", "redutaDefault", "rutenStatic", "rutenGlobal", "redutanGeneral", "rutaLocal", "rutoFile", "rutanGeneral", "redutanLocal", "rutoglobal", "rutoGlobal", "rutaFile", "RutoStatic", "rutiFile", "rutiGeneral", "RutoFile", "rutaDefault", "RutaLocal", "rutiDefault", "rutoLocal", "RutaFile", "RutaStatic", "Rutoglobal", "rutanDefault", "RutaRemote", "rutenglobal", "rutiLocal", "rutoRemote", "rutenRemote", "rutenFile", "redutaGlobal", "rutanGlobal", "RutoRemote", "rontoLocal", "rutaGeneral", "redutaGeneral", "redutaLocal", "RutaGlobal", "redutanDefault", "RutoLocal", "rutenLocal", "Rutaglobal", "rutiStatic"], "rutaRelativa": ["rutaRELativo", "rutaRelativo", "rutaRelantiv", "rutaRelATiva", "rutaRelATiv", "rutaRELATiv", "rutaRelantivas", "rutaRELativas", "rutaRELitiv", "rutaRELativa", "rutaRelatiivo", "rutaRELitivo", "rutaRelitivo", "rutaRELATiva", "rutaRelantiva", "rutaRelitiv", "rutaRelATivo", "rutaRelATivas", "rutaRelitivas", "rutaRelatiivas", "rutaRELativ", "rutaRelatiiv", "rutaRELitiva", "rutaRelitiva", "rutaRelatiiva", "rutaRELATivo", "rutaRELATivas", "rutaRelativas", "rutaRELitivas", "rutaRelantivo", "rutaRelativ"], "fis": ["vais", "vois", "dfisa", "flis", " f\u00eds", "dfais", "lf\u00eds", "flys", "fais", "dfois", "fisc", "viss", " fisc", " fiss", "rys", "vis", "flos", "fois", "fiss", "dfiss", "f\u00eds", " fisa", "ros", " fais", "lfiss", "risc", "fisa", "ris", "lfis", "dfis", "lfisa", "flisc", " fys", "fys", "df\u00eds", " fois"], "fos": [" fops", "mows", "fdos", "fios", "fdoss", "woss", "ioss", "vops", "faos", "vows", "woes", "hoses", " foes", " fows", "foss", "woses", "mos", "foes", "ios", "vos", " faos", "fops", "hoss", "iios", "waos", "voes", "wios", "hios", "wos", "fows", "fdaos", "hos", "foses", "fdoes", "mops", "moes", "ioses", " foss"], "canalFuente": ["canallFuestro", "canelFaente", "canallfuestro", "canallfucer", "canalFaante", "canallfuencia", "canalFUente", "canalFuper", "canallFuencia", "canalFuante", "canalFuent", "canalFaent", "canalfuper", "canalFraencia", "canalfuelia", "canalFacer", "canelFuente", "canalfuent", "canalFuelia", "canalFuestro", "canalfuente", "canalfucer", "canallFucer", "canalFuencia", "canalfuestro", "canelFaent", "canalPotencia", "canalfuante", "canalFraente", "canalfuencia", "canallFumelon", "canalPotper", "canalFiente", "canalFaente", "canalFraper", "canelFuelia", "canallFuente", "canalFiestro", "canallFuper", "canalFaestro", "canalFramelon", "canelFuante", "canallfuente", "canalFucer", "canalfumelon", "canalPotente", "canalFicer", "canelFaelia", "canalFUelia", "canelFaante", "canalFUante", "canallFuent", "canalFumelon", "canallfuper", "canalFient", "canelFuent", "canallfumelon", "canalPotmelon", "canalFUent", "canalFaelia", "canallfuent"], "canalDestino": ["canalsdestina", "canalNegina", "canalDescino", "canalNeginian", "canalOrigine", "canalOrigination", "canalDescina", "canalDescination", "canaldDestine", "canaldestination", "canaldestinian", "canalsDestinian", "canalOrigina", "canaldDestination", "canalDestina", "canalNegino", "canaldOrigino", "canalsdestination", "canaldDestino", "canalNegination", "canalOrigino", "canaldOrigine", "canaldestina", "canaldOrigination", "canaldDestina", "canalsDestino", "canalDestinian", "canalsDestination", "canalsdestinian", "canalDestination", "canalDescine", "canalDestine", "canaldestino", "canalsdestino", "canaldOrigina", "canalsDestina"]}}
{"id1": "18793482", "id2": "10674824", "code1": "    public void modifyApplicationMessage(String locale, String messageName, String messageValue) {\n        Properties properties = new Properties();\n        try {\n            String i18nPath = ServerUtil.removelastResourceURL(ConfigurationServiceImpl.class.getResource(\"/es/ua/tranube/prototype/main/client/TranubeConstants_en.properties\").getPath()).toString();\n            File englishFile = new File(i18nPath + \"TranubeConstants_en.properties\");\n            if (!englishFile.exists()) throw new Exception(\"English file not found\");\n            String propertiesFilePath = i18nPath + \"TranubeConstants_\" + locale + \".properties\";\n            File file = new File(propertiesFilePath);\n            if (!file.exists()) {\n                FileReader in = new FileReader(englishFile);\n                FileWriter out = new FileWriter(file);\n                int c;\n                while ((c = in.read()) != -1) out.write(c);\n                in.close();\n                out.close();\n            }\n            InputStream is = ConfigurationServiceImpl.class.getResourceAsStream(\"/es/ua/tranube/prototype/main/client/TranubeConstants_\" + locale + \".properties\");\n            BufferedReader breader = new BufferedReader(new InputStreamReader(is));\n            String line = null;\n            StringBuilder strBuilder = new StringBuilder();\n            boolean found = false;\n            while ((line = breader.readLine()) != null) {\n                if (line.startsWith(\"#\")) strBuilder.append(line).append(\"\\n\"); else {\n                    String[] pieces = line.split(\"=\");\n                    if (pieces.length == 2) {\n                        if (pieces[0].trim().equals(messageName)) {\n                            strBuilder.append(pieces[0].trim() + \" = \" + messageValue + \"\\n\");\n                            found = true;\n                        } else strBuilder.append(line).append(\"\\n\");\n                    } else strBuilder.append(line).append(\"\\n\");\n                }\n            }\n            if (!found) strBuilder.append(messageName).append(\" = \").append(messageValue).append(\"\\n\");\n            breader.close();\n            is.close();\n            FileWriter writer = new FileWriter(file);\n            writer.write(strBuilder.toString());\n            writer.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n", "code2": "    @Before\n    public void setUp() throws Exception {\n        final URL url = getClass().getClassLoader().getResource(\"insecureSSL.keystore\");\n        final KeyStore keystore = KeyStore.getInstance(\"jks\");\n        final char[] pwd = \"nopassword\".toCharArray();\n        keystore.load(url.openStream(), pwd);\n        final TrustManagerFactory trustManagerFactory = createTrustManagerFactory();\n        trustManagerFactory.init(keystore);\n        final TrustManager[] trustManagers = trustManagerFactory.getTrustManagers();\n        final KeyManagerFactory keyManagerFactory = createKeyManagerFactory();\n        keyManagerFactory.init(keystore, pwd);\n        final KeyManager[] keyManagers = keyManagerFactory.getKeyManagers();\n        final SSLContext serverSSLContext = SSLContext.getInstance(\"TLS\");\n        serverSSLContext.init(keyManagers, trustManagers, null);\n        localServer_ = new LocalTestServer(serverSSLContext);\n        localServer_.registerDefaultHandlers();\n        localServer_.start();\n    }\n", "label": 0, "substitutes": {"modifyApplicationMessage": ["modifyapplicationMsg", "modifyServermessage", "modifyServerMessage", "modifyAppmessage", "modureApplicationMsg", "modureAppMessage", "modureApplicationData", "modifyAppData", "modifyapplicationMessage", "modureAppMsg", "modureApplicationMessage", "modifyAppMsg", "modifyapplicationmessage", "modifyApplicationMsg", "modifyapplicationData", "modifyAppMessage", "modifyServerData", "modureApplicationmessage", "modureAppData", "modifyServerMsg", "modifyApplicationmessage", "modifyApplicationData", "modureAppmessage"], "locale": ["locational", "localey", " locales", " localey", "localales", " locALE", "Locale", "Locational", "regale", "regales", "locales", "regALE", " locational", "Localey", "regational", "localaley", "Locales", "localale", "localALE", "LocALE", "locALE", "localational"], "messageName": ["mediaKey", "MessageKey", " messageType", "messageKey", "msgKey", "msgValue", "mediaNAME", "mediaName", "messageType", " messageNames", "messageNAME", "messageNames", " messageNAME", "MessageValue", " messageKey", "MessageName", "msgType", "MessageType", "MessageNames", "MessageNAME", "msgName", "mediaNames"], "messageValue": ["languageName", "languageValue", " messageType", "messageVal", "msgValue", "messageVALUE", "msgvalue", "messageType", "messagevalue", "essageVal", "MessageValue", "MessageName", "languagevalue", "Messagevalue", "essageName", "msgVALUE", "MessageVALUE", "MessageType", "essageValue", " messageVal", "msgName", "MessageVal", "essageType", "languageVALUE"], "properties": ["settings", "pdf", "utils", "results", "pro", "property", "policy", "perties", "profile", " props", "options", "config", "ps", "params", "message", "parts", "files", "project", "pid", "data", "report", "details", "metadata", "json", "types", "prop", " Properties"], "i18nPath": ["i18nePoints", "i18anPoints", "i18lPath", "i18nP", "i18natDriver", "i18neStr", "i18lUrl", "i18bPath", "i8nStr", "i18lStr", "i18bDir", "i18anP", "i18nyDir", "i18lDir", "i18anDir", "i18rPath", "i18nyPath", "i18natP", "i8nUrl", "i18bStr", "i18nePath", "i18nyDriver", "i18neDriver", "i18bUrl", "i18nDir", "i18nDriver", "i18anIf", "i18nPoints", "i18nUrl", "i8lPath", "i8nPath", "i18neUrl", "i18nStr", "i18anPath", "i18rDriver", "i18natPoints", "i18nyIf", "i18neDir", "i18natPath", "i18nIf", "i18rDir", "i8lStr", "i18anDriver", "i18neP", "i18rIf", "i8nDir", "i8lUrl", "i8lDir"], "englishFile": ["englishfile", "languageFiles", "wikiPath", "ianaTable", "enFilename", "Englishfile", "EnglishFilename", "ianafile", "wikifile", "EnglishFiles", " englishDirectory", "EnglishFile", " englishTable", " englishPath", "ianaDirectory", "languagefile", "wikiTable", "ianaPath", "englishPath", "englishTable", "electricFile", "languageFile", "enFile", "enfile", "englishDirectory", "electricDir", "englishPort", "englishDir", "wikiFile", "ianaDir", " englishPort", "ianaPort", "englishFiles", "electricPort", " englishfile", "electricDirectory", "languageFilename", "ianaFile", "enFiles", "englishFilename", " englishDir"], "propertiesFilePath": ["settingsFilePath", "pertiesfilepath", "propertiesfilePath", "propertiesFilenamepath", "propertiesFilenameType", "pertiesFilePath", "propertiesFilesLocation", "propertiesFilenameLocation", "propertiesFileName", "pertiesfilePath", "propertiesFilesType", "pertiesfileType", "pertiesFilepath", "settingsFilenameLocation", "pertiesfileName", "pertiesFileName", "propertiesfileType", "pertiesFileType", "propertiesFilespath", "propertiesFilenameName", "propertiesFileLocation", "propertiesFilenamePath", "settingsFilenamepath", "propertiesFileType", "propertiesFilepath", "settingsFileLocation", "settingsFilenamePath", "propertiesfileName", "propertiesFilesPath", "settingsFilenameName", "propertiesfilepath", "propertiesfileLocation", "settingsFileName", "propertiesFilesName", "settingsFilepath"], "file": ["local", "os", "path", "module", "string", "parent", "io", "resource", "FILE", "print", "channel", "ile", "be", "class", "current", "File", "record", "run", "output", "complete", "filename", "model", "rule", "content", "style", "attribute", "null", "library", "connection", "port", "write", "console", "language", "f", "base", "table", "buffer", "page", "format", "message", "files", "result", "fp", "create", "name", "document", "object", "comment", "application", "data", "source", "report", "key", "image", "use", "fi", "handle", "xml", "domain", "pool", "type", "info", "entry"], "in": ["ic", "en", "sin", "io", "asin", "inf", "al", "cin", "from", "ri", "reader", "ini", "IN", "inc", "i", "inner", "inside", "ar", " din", "iter", "din", "get", "init", "oin", "isin", "input", "ind", "read", "gin", "In", "ai", "ins", "rin", "ir", "it", "bin", "ain", "inn"], "out": ["os", "cos", "again", "at", "log", "put", "sw", "io", "print", "conv", "nt", "aos", "output", "we", "conf", "external", "ex", "to", "n", "check", "write", "inner", "outer", "csv", "o", "set", "net", "screen", "end", "OUT", "Out", "cache", "it", "can", "outs", "ou", "co", "con", "w"], "c": ["d", "mc", "v", "cos", "fc", "unc", "ce", "cu", "char", "k", "t", "count", "ca", "arc", "conf", "lc", "r", "cp", "call", "n", "cod", "i", "cs", "code", "cr", "cc", "col", "cf", "ct", "cl", "\u00e7", "cap", "ch", "cd", "etc", "u", "cm", "nc", "x", "con", "cont", "ac", "chain", "C", "rc", "cb", "l", "cache", "character", "ec", "gc", "pc", "bc", "co", "dc"], "is": ["iss", "ic", "isl", "isa", "sis", "ais", "ri", "iris", "i", "ios", "bis", "sit", "es", "as", "IS", "lis", "its", "\u00eds", "isin", "ris", "sys", "isf", "tis", "Is", "ins", "nis", "it", "isi", "isc", "os", "iso"], "breader": ["browe", " breade", " breadar", "brewer", "bleder", " breadr", "bber", " breadber", "bbr", "browger", "bler", "brewger", "brewber", "bbar", "breadger", "breadber", " breadger", "breadder", "brewe", "brower", "bbder", "bleer", "breade", "breadr", "browber", "breadar", " breadder", "blear"], "line": ["text", "ln", "sample", "cell", "log", "sequence", "string", "nl", "queue", "inline", "point", "mail", "part", "char", "row", "stroke", "phrase", "no", "detail", "record", "left", "rule", "shell", "section", "email", "edge", "range", "word", "ice", "block", "node", "query", "label", "port", "code", "side", "link", "stay", "note", "iter", "trace", "normal", "slice", "message", "lin", "entity", "page", "column", "parse", "lo", "frame", "liner", "comment", "lines", "lane", "ine", "online", "le", "eline", "chain", "header", "Line", "l", "LINE", "ip", "handle", "cmd", "next", "body", "continue", "entry", "se"], "strBuilder": [" strBuffer", "frBuilt", "stringBuild", "strBuilt", " strBuild", "Strbuilder", "stringBuffer", "StrBuffer", "StrBuilder", "strBu", "strBuffer", "frBuild", "StrBuilt", "frParser", " strBu", "objBuilder", "arrParser", "arrBuilder", "strParser", "arrBuffer", "stringParser", "stringBuilder", "stringBuilt", " strbuilder", "StrBuild", "arrbuilder", "StrParser", "objBuild", "arrBu", "frBuilder", "StrBu", "arrBuild", "strbuilder", "objbuilder", " strParser", "strBuild", "objBuffer", "stringbuilder"], "pieces": ["places", "bytes", "terms", "groups", "eps", "Parts", "tips", "sections", "rings", "strings", "fits", "plates", "blocks", "knife", "finals", "bits", "steps", "links", "feet", "caps", "piece", "fixes", "units", "ces", "maps", "pointers", "ps", "times", "letters", "pins", "parts", "its", "ops", "xes", "tools", "services", "lines", "sts", "powers", "items", "keys", "cars", "checks", "words", "players", "cuts", "types", "ties", "ctors"], "found": ["created", "err", "started", "search", "changed", " Found", "printed", "first", "bool", "given", "filled", "sold", "finished", "supported", "used", "old", "count", "loaded", "success", " founded", "identified", "needed", "ed", "compl", "index", "good", "opened", "built", "expected", "valid", "confirmed", "failed", "fixed", "released", "tested", " caught", "sent", "focused", "read", "forced", "Found", "successful", "mounted", " detected", "done", "finder", "empty", "installed", "available", "defined", "find"]}}
{"id1": "15051083", "id2": "18202328", "code1": "    @Override\n    public String getMessageDigest() throws SarasvatiLoadException {\n        if (messageDigest == null) {\n            Collections.sort(nodes);\n            Collections.sort(externals);\n            try {\n                MessageDigest digest = MessageDigest.getInstance(\"SHA1\");\n                digest.update(name.getBytes());\n                for (XmlNode node : nodes) {\n                    node.addToDigest(digest);\n                }\n                for (XmlExternal external : externals) {\n                    external.addToDigest(digest);\n                }\n                messageDigest = SvUtil.getHexString(digest.digest());\n            } catch (NoSuchAlgorithmException nsae) {\n                throw new SarasvatiException(\"Unable to load SHA1 algorithm\", nsae);\n            }\n        }\n        return messageDigest;\n    }\n", "code2": "    public void register(MinecraftSession session, String username, String verificationKey) {\n        if (Configuration.getConfiguration().isVerifyingNames()) {\n            long salt = HeartbeatManager.getHeartbeatManager().getSalt();\n            String hash = new StringBuilder().append(String.valueOf(salt)).append(username).toString();\n            MessageDigest digest;\n            try {\n                digest = MessageDigest.getInstance(\"MD5\");\n            } catch (NoSuchAlgorithmException e) {\n                throw new RuntimeException(\"No MD5 algorithm!\");\n            }\n            digest.update(hash.getBytes());\n            if (!verificationKey.equals(new BigInteger(1, digest.digest()).toString(16))) {\n                session.getActionSender().sendLoginFailure(\"Illegal name.\");\n                return;\n            }\n        }\n        char[] nameChars = username.toCharArray();\n        for (char nameChar : nameChars) {\n            if (nameChar < ' ' || nameChar > '\\177') {\n                session.getActionSender().sendLoginFailure(\"Invalid name!\");\n                return;\n            }\n        }\n        for (Player p : playerList.getPlayers()) {\n            if (p.getName().equalsIgnoreCase(username)) {\n                p.getSession().getActionSender().sendLoginFailure(\"Logged in from another computer.\");\n                break;\n            }\n        }\n        final Player player = new Player(session, username);\n        if (!playerList.add(player)) {\n            player.getSession().getActionSender().sendLoginFailure(\"Too many players online!\");\n            return;\n        }\n        session.setPlayer(player);\n        final Configuration c = Configuration.getConfiguration();\n        session.getActionSender().sendLoginResponse(Constants.PROTOCOL_VERSION, c.getName(), c.getMessage(), false);\n        LevelGzipper.getLevelGzipper().gzipLevel(session);\n    }\n", "label": 1, "substitutes": {"getMessageDigest": ["getContentdigests", "getContentDigse", "getMessageTimested", "getMessageDigse", "getContentdigested", "getContentDigests", "getMessageTimests", "getContentDigested", "getContentdigest", "getContentdigse", "getMessagedigests", "getMessagedigest", "getMessagedigested", "getMessageTimest", "getMessagedigse", "getMessageDigested", "getMessageTimse", "getMessageDigests", "getContentDigest"], "digest": [" Digester", "Digend", "mdested", "Digast", "digested", "signester", "signgest", "drivergest", "Diggest", "Digested", "Digse", "mdest", "driverested", "dependester", "dester", "dest", "driverester", "digast", "Digest", "hashester", "modester", "mdester", "modested", "dependested", " Digested", " digested", " Digest", "Digester", "modest", " digestester", " digester", "diggest", "driverest", " diggest", " Digend", "dependast", "dested", " digestest", "hashest", "signested", " digestested", " digse", "dependest", "digse", "hashgest", "signest", "mdse", "digester", "hashested", " digast", "digend", "dend"], "node": ["system", "cell", "Node", "binary", "post", "missing", "resource", "process", "remote", "angular", "nn", "child", "run", "open", "attribute", "network", "dependent", "n", "query", "inner", "host", "link", "role", "note", "job", "normal", "root", "element", "create", "yn", "document", "name", "common", "object", "tree", "source", "one", "peer", "ne", "entry"], "external": ["local", "outside", "foreign", "binary", "any", "multiple", "remote", "optional", "obj", " External", "internal", "child", "extra", "export", "complete", "ex", "n", "ext", "custom", "https", "External", "ns", "note", "qualified", "express", "tern", "global", "get", "reference", "exit", "name", "common", "object", "secondary", "self", "escape", "this", "unique", "intern", "ternal"], "messageDigest": ["messageMixesting", "messageDighest", "essageDatese", "messageDigested", "messagedigested", "MessageDighest", "messageDateest", "messagedighest", "messageGuhest", "Messagedigested", "MessagedigEST", "Messagedigest", "messagedigEST", "messageMixse", "messageDatese", "messageDigse", "messageGuested", "MessageDigest", "messageDesignse", "essageDigest", "MessageDigested", "Messagedighest", "essageDateesting", "messageDigEST", "messageDesignest", "messagedigest", "essageDigse", "messageDigesting", "messageMixest", "essageDateest", "messageGuest", "messageGuEST", "essageDigesting", "messageDesignEST", "messageDesignested", " messageDigested", " messageDigEST", " messageDigse", "MessageDigEST", "messagedigse", "messageDateesting", "messagedigesting"]}}
{"id1": "14794404", "id2": "19549577", "code1": "    private String encryptPassword(String password) throws NoSuchAlgorithmException {\n        StringBuffer encryptedPassword = new StringBuffer();\n        MessageDigest md5 = MessageDigest.getInstance(\"MD5\");\n        md5.reset();\n        md5.update(password.getBytes());\n        byte digest[] = md5.digest();\n        for (int i = 0; i < digest.length; i++) {\n            String hex = Integer.toHexString(0xFF & digest[i]);\n            if (hex.length() == 1) {\n                encryptedPassword.append('0');\n            }\n            encryptedPassword.append(hex);\n        }\n        return encryptedPassword.toString();\n    }\n", "code2": "    protected InputStream callApiPost(String apiUrl, Map<String, List<String>> parameters, int expected) {\n        try {\n            URL url = new URL(apiUrl);\n            HttpURLConnection request = (HttpURLConnection) url.openConnection();\n            if (ApplicationConstants.CONNECT_TIMEOUT > -1) {\n                request.setConnectTimeout(ApplicationConstants.CONNECT_TIMEOUT);\n            }\n            if (ApplicationConstants.READ_TIMEOUT > -1) {\n                request.setReadTimeout(ApplicationConstants.READ_TIMEOUT);\n            }\n            for (String headerName : requestHeaders.keySet()) {\n                request.setRequestProperty(headerName, requestHeaders.get(headerName));\n            }\n            request.setRequestMethod(\"POST\");\n            request.setDoOutput(true);\n            PrintStream out = new PrintStream(new BufferedOutputStream(request.getOutputStream()));\n            out.print(getParametersString(parameters));\n            out.flush();\n            out.close();\n            request.connect();\n            if (request.getResponseCode() != expected) {\n                throw new BingMapsException(convertStreamToString(request.getErrorStream()));\n            } else {\n                return getWrappedInputStream(request.getInputStream(), GZIP_ENCODING.equalsIgnoreCase(request.getContentEncoding()));\n            }\n        } catch (IOException e) {\n            throw new BingMapsException(e);\n        }\n    }\n", "label": 0, "substitutes": {"encryptPassword": ["encryptionSecret", "encryptPass", "decryptPass", "encryptSecret", "decryptPassword", "encryptionPassword", "decryptedpassword", "encipherSecret", "decryptedPassword", "encipherPass", "decryptedSecret", "decryptedPass", "encryptedSecret", "encryptpassword", "encryptionPass", "decryptSecret", "encipherpassword", "encryptedpassword", "encryptionpassword", "encipherPassword", "decryptpassword", "encryptedPass"], "password": ["text", "path", "secret", "address", "description", "number", "string", "hash", "phrase", "shadow", "username", "attribute", "filename", "content", "email", "pattern", "wordpress", "prefix", "padding", "message", "command", "database", "pass", "user", "input", "name", "sword", "data", "reset", "value", "key", "token", "login", "directory", "past", "Password", "entry", "w", "word"], "encryptedPassword": ["updatedpassword", " encryptedpassword", "ryptedPassword", "updatedAttribute", "initializedStatement", "encryptedGuest", "finishedpassword", "installedDirectory", "ryptedDirectory", "encryptedAttribute", "confirmedpassword", " encryptedAttribute", " encryptedDatabase", "updatedDatabase", "installedPassword", "coloredConnection", "confirmedPassword", "initializedConnection", "finishedPassword", "encryptedDirectory", " encryptedGuest", "initializedPassword", "updatedGuest", "encryptedpassword", "coloredDatabase", "updatedPassword", "coloredPassword", "updatedDirectory", " encryptedDirectory", " encryptedConnection", "finishedDatabase", "encryptedDatabase", "ryptedDatabase", "installedAttribute", " encryptedStatement", "encryptedConnection", "initializedDatabase", "confirmedDirectory", "finishedGuest", "installedDatabase", "coloredStatement", "ryptedpassword", "confirmedDatabase", "encryptedStatement"], "md5": ["MD2", " md8", " MDle", " md512", "MD512", " Md3", " mdle", " Md5", " MD5", " md3", " Md8", "dig5", "MD5", "md7", " MD3", " Mdle", " MD8", " md2", "sha512", "sha2", "MD7", "md8", "sha7", "MD3", "dig25", "md2", "mdle", "md25", "md512", " MD2", " md25", "dig3", "dig2", "sha5", " md7", "MD25", "md3"], "digest": ["mdested", " digests", "digested", " digEST", "hexness", "Digse", "hashEST", "Digested", "mdest", "DigEST", "mdEST", "Digest", "hashester", "mdum", "digests", "digum", "mdester", "hexested", "digEST", "Digester", "mdness", "hexest", "hexEST", "hashest", "mdests", "Digests", "Digum", " digse", "Digness", "digse", "digness", "mdse", "digester", "hashested", "hashum"], "i": ["err", "ti", "ji", "I", "ic", "iq", "zi", "li", "id", "io", "gi", "my", "point", "b", "is", "di", "t", "conv", "ii", "z", "in", "\u0438", "j", "span", "phi", "ri", "mi", "si", "index", "c", "n", "a", "pi", "ci", "m", "ski", "yi", "uri", "o", "iter", "multi", "q", "init", "xi", "ie", "gu", "ei", "u", "ind", "major", "ij", "x", "qi", "im", "me", "key", "ai", "ix", "sim", "ip", "it", "bi", "hi", "ui", "y"], "hex": ["sex", "solid", "h", "des", "tex", "txt", "str", "term", "pex", "rex", "print", "alpha", "hash", "rendered", " Hex", "mix", "percent", "oct", "ex", "rh", "check", "unsigned", "zip", "html", "ph", "dump", "cf", "def", "br", "com", "serial", "iter", "comp", "form", "raw", "xf", "ch", "cert", "kw", "exp", "color", "hl", "x", "sv", "uint", "lit", "json", "cmd", "tx", "full", "none", "temp", "ne", "sh", "flash"]}}
{"id1": "7122523", "id2": "7458833", "code1": "    public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        InstanciaDelegate delegate = RegistroManager.recuperarInstancia(request);\n        if (delegate == null) {\n            ActionErrors errors = new ActionErrors();\n            errors.add(null, new ActionError(\"errors.session\"));\n            saveErrors(request, errors);\n            return mapping.findForward(\"fail\");\n        }\n        AyudaPantalla ayudaPantalla = delegate.obtenerAyudaPantalla();\n        TraAyudaPantalla traAyudaPantalla = (TraAyudaPantalla) ayudaPantalla.getTraduccion();\n        String urlSonido = traAyudaPantalla.getUrlSonido();\n        if (urlSonido == null) {\n            return null;\n        }\n        URL url = new URL(urlSonido);\n        URLConnection urlConnection = url.openConnection();\n        urlConnection.connect();\n        String tipoMime = urlConnection.getContentType();\n        log.debug(\"Tipo Mime: \" + tipoMime);\n        Map audioOptions = new HashMap();\n        if (tipoMime.indexOf(\"audio\") != -1 || tipoMime.indexOf(\"asf\") != -1 || tipoMime.equals(\"unknown/unknown\")) {\n            audioOptions.put(\"id\", \"MediaPlayer\");\n            audioOptions.put(\"codeBase\", \"http://activex.microsoft.com/activex/controls/mplayer/en/nsmp2inf.cab#Version=6,4,7,1112\");\n            audioOptions.put(\"classId\", \"CLSID:22D6F312-B0F6-11D0-94AB-0080C74C7E95\");\n            audioOptions.put(\"mimeType\", \"application/x-mplayer2\");\n            audioOptions.put(\"urlSonido\", urlSonido);\n            audioOptions.put(\"pluginSpage\", \"http://www.microsoft.com/Windows/Downloads/Contents/Products/MediaPlayer/\");\n        } else if (tipoMime.indexOf(\"real\") != -1) {\n            audioOptions.put(\"id\", \"RVOCX\");\n            audioOptions.put(\"codeBase\", \"\");\n            audioOptions.put(\"classId\", \"clsid:CFCDAA03-8BE4-11cf-B84B-0020AFBBCCFA\");\n            audioOptions.put(\"mimeType\", \"audio/x-pn-realaudio-plugin\");\n            audioOptions.put(\"urlSonido\", urlSonido);\n            audioOptions.put(\"pluginSpage\", \"\");\n        }\n        request.setAttribute(\"audioOptions\", audioOptions);\n        log.debug(\"entra success\");\n        return mapping.findForward(\"success\");\n    }\n", "code2": "    private void copyParseFileToCodeFile() throws IOException {\n        InputStream in = new FileInputStream(new File(filenameParse));\n        OutputStream out = new FileOutputStream(new File(filenameMisc));\n        byte[] buffer = new byte[1024];\n        int length;\n        while ((length = in.read(buffer)) > 0) out.write(buffer, 0, length);\n        in.close();\n        out.close();\n    }\n", "label": 0, "substitutes": {"execute": ["submit", "invoke", "WARD", "transform", "process", "ward", " evaluate", "success", "route", "run", "management", "call", "view", "index", "to", "check", "wards", "get", "action", "flow", " replay", "handle", "reflect", "\u7684", "forward", "next", "edit"], "mapping": ["migration", "dapper", "Migration", "imigration", "smapping", "Mappings", "dapped", "dapping", "smapped", "imapping", "mappings", "dappings", " mapped", "mapper", " mapper", "imapped", "imapper", "mapped", "Mapped", "smapper", "smigration", " mappings", "Mapper", "Mapping"], "form": [" forms", "forms", "apply", "fc", "field", "orm", "parent", "channel", "FORM", "auth", "attribute", "owner", "formed", "sam", "m", "config", "format", " Form", "flow", "input", "template", " FORM", "fm", "list", "Form", "type", "flash", "command"], "request": ["contact", "first", "resource", "store", "remote", "context", "current", "open", "attribute", "model", "view", "access", "index", "query", "session", "instance", "connection", "initial", "server", "web", "message", "page", "container", "user", "req", "input", "reference", "frame", "document", "Request", "client", "http", "application", "reset", "report", "QUEST", "hello", "quest", "window", "xml", "controller", "forward", "order", "framework", "true", "command"], "response": ["file", "respond", "render", "print", "onse", "success", "context", "Response", "output", "content", "view", "session", "write", "status", "message", "result", "exit", "document", "frame", "http", "application", "report", "image", "xml", "reply", "resp"], "delegate": ["reploy", "deoder", "deslegate", "Delegate", "desleg", "delet", "delegates", "Deoder", "dellet", "dellegates", "deploy", "Deploy", "demlegates", "demlet", "Deleg", "Delegates", "demlegate", "relegates", "deleg", "dellegate", "demleg", "releg", "demoder", "Delet", "desoder", "relegate", "deslegates", "desploy"], "errors": ["settings", "assets", "err", "ates", "forms", "utils", "results", "objects", "terms", "umbles", "rors", "laws", "rings", "fields", "orders", "reports", "rs", "rown", "rates", "images", "session", "states", "lations", "maps", "ations", "ros", "ses", "s", "events", "tags", "relations", "error", " Errors", "lines", "rules", "details", "uments", "uploads", "rows", "checks", "types", "es", "runs", "values"], "ayudaPantalla": ["ayudaPantagna", "ayudapantagna", "ayudaPANTallo", "ayudaPantsheon", "ayudaPantalli", "ayudapantsagna", "ayudaPandallo", "ayudaPandalli", "ayudapantheon", "ayudapantallo", "ayudaPandalla", "ayudaPANTalla", "ayudaPANTheon", "ayudaPantsallo", "ayudapantsalla", "ayudaPantsalla", "ayudaPantallo", "ayudapantsallo", "ayudaPANTalli", "ayudaPantsagna", "ayudaPantheon", "ayudaPantsalli", "ayudaPandheon", "ayudapantalla", "ayudapantsheon", "ayudapantsalli", "ayudaPandagna", "ayudapantalli", "ayudaPANTagna"], "traAyudaPantalla": ["traAyudaPartono", "traAyudaNartunta", "traAyudaPANTono", "traAyudaPandalla", "traAyudaCantallion", "traAyudaPstantalla", "traAyudaNartheon", "traAyudaPantallion", "traAyudaCantallo", "traAyudaPantallo", "traAyudaPartheon", "traAyudaPandalli", "traAyudaPantheon", "traAyudaNartalla", "traAyudaCantryallion", "traAyudaPantryalli", "traAyudaPantryalla", "traAyudaPartunta", "traAyudaCantalli", "traAyudaPstantallion", "traAyudaPANTunta", "traAyudaPantsunta", "traAyudaPartalla", "traAyudaNantalla", "traAyudaPantono", "traAyudaNantunta", "traAyudaNantheon", "traAyudaPandallion", "traAyudaCantryalla", "traAyudaPantsheon", "traAyudaPANTheon", "traAyudaPantalli", "traAyudaNartono", "traAyudaPantsalla", "traAyudaCantalla", "traAyudaNantono", "traAyudaPantsono", "traAyudaPANTalla", "traAyudaPantryallion", "traAyudaCantryalli", "traAyudaCantryallo", "traAyudaPstantallo", "traAyudaPantunta", "traAyudaPantryallo", "traAyudaPandallo", "traAyudaPstantalli"], "urlSonido": ["urlWanido", "strSonido", "urlWanigo", "urlDonido", "urlsonido", "urlSun\u00ed", "urlSenuri", "URLSonid", "urlsonid", "urlsonide", "urlDonida", "URLSonidable", " urlSonindu", "urlWanindu", "URLSunidable", "urlJonido", "strSonilo", " urlSonida", "urlSunigo", "urlsonuri", "urlJonide", "urlsonidable", "urlSenido", "urlJonilo", "urlSonida", " urlDonido", "urlSunilo", "urlsonira", " urlWanindu", "URLSunido", "urlSunida", "urlSunido", "urlSenida", "strsonido", "urlSonid", "URLSunid", "strSonida", " urlWanigo", " urlSonira", "urlJonida", " urlDonuri", "urlSonuri", "urlSONindu", "urlSunid", "urlDonuri", "urlSonigo", "urlSonira", "urlSonide", "urlDonira", "URLSonida", "urlsonida", "urlsonilo", "urlSon\u00ed", "URLSunida", " urlSon\u00ed", "strsonilo", "strSonide", "strsonida", " urlWanido", "URLSonido", "urlSunidable", "urlSonidable", "urlSenira", "urlSonilo", " urlSonuri", "urlSenidable", "strsonide", "urlSunide", " urlWan\u00ed", "urlSunindu", "urlSONido", "urlSONigo", "urlSenid", "urlWan\u00ed", "urlSON\u00ed", " urlDonida", " urlDonira", " urlSonigo", "urlSonindu"], "url": ["build", "sl", "address", "log", "string", "Url", "str", "nl", "mail", "b", "char", "browser", "ls", "email", "r", "dl", "ll", "host", "https", "ssl", "link", "location", "html", "uri", "URL", "web", "loc", "get", "ur", "raw", "github", "parse", "name", "bel", "http", "key", "mount", "l", "window", "xml", "ul"], "urlConnection": ["UrlConnector", "UrlResponse", "urlConnect", " urlconnection", "urlClient", "strClient", "UrlConnect", "urlResponse", "httpconnection", " urlClient", "strconnection", "Urlconnection", "httpConnection", "httpConnector", " urlConnect", "UrlConnection", "UrlClient", "urlConnector", "URLconnection", " urlConnector", "urlconnection", "URLResponse", "URLConnect", "strConnect", "strConnection", "httpResponse", "httpConnect", "httpClient", "URLConnection"], "tipoMime": ["tipoNimer", "tipoMMime", "tiposMpe", "tipoHMisc", "tipoEMime", "tipoNime", "tipoMisc", "tipoNiso", "tipoAMift", "tipoMiso", "tiposMich", "tipotaManime", "tipomip", "tipoEMiso", "tipoPime", "tiposMiso", "tipoMMift", "tipologyNIME", "tipoNIME", "tipotaManile", "tipoMMich", "tipomime", "tipoManisc", "tipoMCIME", "tipoHMimer", "tipoPich", "tipoHMime", "tipoCMile", "tipologyNime", "tipologyMIME", "tipotaManift", "tipoAMIME", "tipologyMime", "tipoMCime", "tipoMift", "tipoNip", "tipomIME", "tiposMime", "tipoHMIME", "tipoMCimer", "tipoHMile", "tipoMimer", "tipoMip", "tipoDMime", "tipoManift", "tiposMIME", "tiposPich", "tipoEMip", "tipoDMimer", "tipoMpe", "tiposMetpe", "tipoAMich", "tipoMetIME", "tiposMetimer", "tipoMocker", "tipoMetpe", "tiposMimer", "tipoMIME", "tipoMich", "tipoMCocker", "tipoCMift", "tipoMetimer", "tipologyNocker", "tiposPift", "tipomiso", "tiposPime", "tipoPIME", "tipoNocker", "tipotaMift", "tipologyMocker", "tiposNiso", "tipoCMime", "tipoAMime", "tipologyMimer", "tiposNime", "tipoCMisc", "tiposMift", "tipoDMocker", "tiposMip", "tipoEMIME", "tipoMMIME", "tipotaMisc", "tipoHMift", "tipologyNimer", "tipotaManisc", "tipoMetime", "tipotaMile", "tiposMetIME", "tiposPIME", "tipoManile", "tipoHMpe", "tiposNIME", "tipoMile", "tipotaMime", "tiposNip", "tipoManime", "tipoDMIME", "tipoPift", "tiposMetime"], "audioOptions": ["musicoptions", "audioOption", "volumeoptions", "AudioSettings", "voiceFrames", " audioParts", "mediaParts", " microphoneOptions", " microphoneFrames", "voiceSettings", "soundSettings", "soundOptions", "applicationSettings", "applicationOptions", "audioParameters", "volumeParts", " audioOption", "applicationoptions", "audiooptions", "audioParts", "voiceParts", " audiooptions", "audioFrames", " microphoneDetails", "voiceParameters", "mediaOption", " microphoneSettings", " microphoneoptions", " microphoneOption", "AudioOptions", "audioDetails", " audioParameters", "AudioAttributes", "musicAttributes", " microphoneParts", "audioAttributes", "musicParameters", "voiceAttributes", "soundoptions", "volumeAttributes", "musicOptions", "soundAttributes", " audioDetails", "applicationParts", "voiceOptions", "musicParts", " audioSettings", "mediaoptions", "AudioParts", "volumeOptions", "voiceDetails", "musicSettings", " audioFrames", "mediaOptions", "audioSettings", "mediaSettings", " audioAttributes"]}}
{"id1": "19784131", "id2": "20619879", "code1": "    public static String getMD5Hash(String original) {\n        StringBuffer sb = new StringBuffer();\n        try {\n            StringReader sr = null;\n            int crypt_byte = 0;\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            md.reset();\n            md.update(original.getBytes());\n            byte[] digest = md.digest();\n            sr = new StringReader(new String(digest, \"ISO8859_1\"));\n            while ((crypt_byte = sr.read()) != -1) {\n                String hexString = Integer.toHexString(crypt_byte);\n                if (crypt_byte < 16) {\n                    hexString = \"0\" + hexString;\n                }\n                sb.append(hexString);\n            }\n        } catch (NoSuchAlgorithmException nsae) {\n        } catch (IOException ioe) {\n        }\n        return sb.toString();\n    }\n", "code2": "    public void copyLogic() {\n        if (getState() == States.Idle) {\n            setState(States.Synchronizing);\n            try {\n                FileChannel sourceChannel = new FileInputStream(new File(_properties.getProperty(\"binPath\") + name + \".class\")).getChannel();\n                FileChannel destinationChannel = new FileOutputStream(new File(_properties.getProperty(\"agentFileLocation\") + name + \".class\")).getChannel();\n                sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);\n                sourceChannel.close();\n                destinationChannel.close();\n            } catch (FileNotFoundException e) {\n                e.printStackTrace();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n            setState(States.Idle);\n        }\n    }\n", "label": 0, "substitutes": {"getMD5Hash": ["getMD4Key", "getMD2Sum", "getMD3Hash", "getMD5Sum", "getMD4Hash", "getMD2Key", "getMD5Key", "getMD4Sum", "getMD3Sum", "getMD3hash", "getMD2Hash", "getMD5hash", "getMD3Key", "getMD2hash", "getMD4hash"], "original": ["created", "sample", "string", " orig", "orig", "before", "old", "was", "hash", "filename", "content", "custom", "Original", "instance", "actual", "code", "initial", "modified", "o", "base", "vector", "message", "raw", "input", "name", "template", "data", " originals", "source", "reset", "image", "metadata", "regular", "origin", " Original"], "sb": ["sq", "pb", "lp", "abs", "src", "nb", "bt", "b", "bg", "sm", "rb", "kb", "sg", "rob", "bb", "ab", "obs", "sa", "ssl", "xb", "bh", "ib", "gc", "sf", "sk", "fb", "sp", "bs", "erb", "eb", "bsp", "ub", "bd", "sv", "bn", "bf", "zb", "cb", "bp", "ob", "mb", "bj", "wb", "gb", "SB", "lb"], "sr": ["SR", "sl", "dr", "lr", "spr", "yr", "rx", "sur", "nr", "rb", "vr", "mr", "ri", "r", "rs", "rys", "rg", "sol", "cr", "ssl", "adr", "ear", "hr", "rd", "rm", "rt", "usr", "gr", "rr", "pr", "sv", "rl", "rc", "ser", "tr", "kr", "fr", "asper", "rar", "her", "rn"], "crypt_byte": ["cryptitybyte", "hex_pair", "crypt2source", "cryptolychar", "cryptYframe", "four_byte", "hex_char", "hex_byte", "Crypt_char", "cryptolyframe", "cryptitybuffer", " cryptitybyte", "crypt_coin", "crypt2byte", "cryptYbyte", " cryptitychar", "crypt_char", "four_char", "Crypt_source", "crypt2char", " cryptitybuffer", "cryptYpair", "four_coin", "crypt68char", " crypt_buffer", "cryptitychar", "crypt68byte", "cryptolybyte", "crypt68bytes", "crypt_pair", "crypt_source", "crypt_buffer", " cryptitybytes", "four_bytes", "cryptitybytes", "hex_frame", " crypt_char", "crypt68source", "Crypt_bytes", "crypt_bytes", "Crypt_byte", "cryptolypair", "cryptYchar", "crypt2bytes", " crypt_bytes", "crypt_frame"], "md": ["d", "mc", "dr", "pdf", "pd", "ld", "mt", "amd", "mod", " MD", "sm", "method", "msg", "de", "met", "red", "det", "m", "pm", "ct", "sd", "ms", "dd", "comp", "hd", "dig", "mm", "ind", "mk", "cd", "od", "bd", "mg", " cmd", "mn", "dm", "der", "dh", "df", "mb", "cmd", "grad", "MD", " Md"], "digest": ["mdested", "mdate", "digested", " digEST", "Digested", "hashEST", "mdest", "defests", "DigEST", "dest", "digate", "mdEST", "Digest", "digests", "mdester", "ddest", "diger", "Digate", "mdet", "Diger", "defer", "Digester", "digEST", " digester", "dested", "hashest", "Digests", "ddested", "defested", "hashet", "dests", "ddet", "ddEST", "der", "diget", "digester", "defest", "hashested", " digate"], "hexString": ["hexstring", "hexChain", "hexNumber", " hexStr", "exstring", " HexNumber", " sexString", " sexStr", " HexString", "hashstring", " hexSummary", " HexStr", "hashChain", "exSummary", " hexstring", "exNumber", "hashStr", " Hexstring", " sexSummary", " HexChain", " hexNumber", "hexStr", "exChain", "exString", "exStr", "hashString", " hexChain", "hexSummary"]}}
{"id1": "6613944", "id2": "12869602", "code1": "    public static String installOvalDefinitions(final String xml_location) {\n        InputStream in_stream = null;\n        try {\n            URL url = _toURL(xml_location);\n            if (url == null) {\n                in_stream = new FileInputStream(xml_location);\n            } else {\n                in_stream = url.openStream();\n            }\n        } catch (IOException ex) {\n            throw new OvalException(ex);\n        }\n        Class<OvalDefinitions> type = OvalDefinitions.class;\n        OvalDefinitions object = _unmarshalObject(type, in_stream);\n        String pid = _getDatastore().save(type, object);\n        return pid;\n    }\n", "code2": "    @Test\n    public void test_validate_tag_getTopAlbums() {\n        try {\n            SchemaFactory factory = SchemaFactory.newInstance(\"http://www.w3.org/2001/XMLSchema\");\n            File schemaLocation = new File(\"tes.xsd\");\n            Schema schema = factory.newSchema(schemaLocation);\n            Validator validator = schema.newValidator();\n            URL url = new URL(\"http://ws.audioscrobbler.com/2.0/?method=tag.gettopalbums&tag=disco&api_key=b25b959554ed76058ac220b7b2e0a026\");\n            InputStream inputStream = url.openStream();\n            Source source = new StreamSource(inputStream);\n            validator.validate(source);\n        } catch (IOException ex) {\n            Logger.getLogger(GetTopAlbums_Test.class.getName()).log(Level.SEVERE, null, ex);\n            assertFalse(\"File not found\", true);\n        } catch (SAXException ex) {\n            Logger.getLogger(GetTopAlbums_Test.class.getName()).log(Level.SEVERE, null, ex);\n            assertFalse(\"Schema did not validate\", true);\n        }\n        assertTrue(true);\n    }\n", "label": 0, "substitutes": {"installOvalDefinitions": [" saveOevalDefications", " saveOevalDefitions", " saveOevalEntitions", " saveOvaldefications", " saveOvalDefaults", " saveOvalDefications", " saveOvalEntinitions", " saveOvalEntitions", " saveOvalDefinitions", " saveOvaldefaults", " saveOevalDefaults", " saveOevalEntaults", " saveOevalEntications", " saveOvalDeclaults", " saveOevalDefinitions", " saveOvalEntaults", " saveOvalDeclitions", " saveOvalEntications", " saveOvaldefinitions", " saveOvaldefitions", " saveOvalDefitions", " saveOevalEntinitions", " saveOvalDeclications", " saveOvalDeclinitions"], "xml_location": ["xml_Location", "xmlContentloc", "xml_position", "xmlContentLocation", " xml_Location", " xml_uri", " xml_loc", "xmlContenturi", "xml_loc", "xmlContentlocation", "xml_uri", " xml_position"], "in_stream": ["inMemstream", " in_Stream", "xmlptstore", "in2stream", "in_sign", " in_view", "xml_Stream", "in___iter", "in67iterator", "xml_store", "in_resource", "xmlptStream", "input_buffer", "in_view", "xml_stream", "in_iterator", "xml_resource", " in_iterator", "inMemresource", "in2store", "xmlptresource", "in_Stream", "input_path", "input_stream", "in2Stream", "xmlptstream", "inptstore", "in64stream", "inMemStream", "in_ream", " in_sign", "in_store", "in67stream", "in_buffer", "inptStream", "in64Stream", "in67sign", "input_iter", "in67view", "in_path", "in2resource", "inptresource", "in___stream", "inptstream", "inMemstore", "in___buffer", " in_ream", "in64ream", "in_iter", "in___path"], "url": ["sl", "path", "address", "lr", "gl", "file", "Url", "abs", "str", "nl", "resource", "mail", "char", "browser", "service", "ls", "r", "dl", "null", "ll", "host", "ssl", "link", "location", "f", "uri", "rel", "URL", "web", "loc", "ur", "cert", "impl", "download", "name", "bel", "http", "rl", "mount", "el", "l", "xml", "ref", "org", "ul"], "type": ["where", "module", "ping", "function", "typ", "TYPE", "file", "tp", "mail", "ped", "test", "tool", "t", "sche", "event", "class", "cast", "style", "model", "ype", "check", "Type", "title", "otype", "kind", "role", "what", "base", "ct", "cl", "pe", "core", "create", "ime", "tree", "oid", "shape", "ty", "info", "ver", "types", "y"], "object": ["system", "string", "not", "id", "objects", "resource", "obj", "event", "class", "context", "detail", "output", "model", "node", "instance", "o", "job", "entity", "result", "message", "out", "element", "document", "name", "oid", "data", "value", "array", "version", "json", "info", "dict", "entry"], "pid": [" PID", "rpm", "bid", "pd", "p", "pet", "id", "print", "process", " persistent", "uid", "po", " pc", "doi", "park", "ids", "pg", "prop", "PK", "sid", "ido", "pn", "port", "title", "ps", "pm", "vid", "pty", "cert", "png", "oid", "pr", "pan", "pa", "pp", "pic", "pkg", "proc", "pc"]}}
{"id1": "5759961", "id2": "14038176", "code1": "    @Override\n    public User saveUser(User user) {\n        try {\n            MessageDigest digest = java.security.MessageDigest.getInstance(\"MD5\");\n            digest.update(user.getPassword().getBytes(\"UTF-8\"));\n            byte[] hash = digest.digest();\n            BigInteger bigInt = new BigInteger(1, hash);\n            String hashtext = bigInt.toString(16);\n            while (hashtext.length() < 32) {\n                hashtext = \"0\" + hashtext;\n            }\n            user.setPassword(hashtext);\n            user.setDataRegjistrimit(new Date());\n            return em.merge(user);\n        } catch (Exception e) {\n            throw new NestedException(e.getMessage(), e);\n        }\n    }\n", "code2": "    public static String fetchUrl(String urlString) {\n        try {\n            URL url = new URL(urlString);\n            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));\n            String line = null;\n            StringBuilder builder = new StringBuilder();\n            while ((line = reader.readLine()) != null) {\n                builder.append(line);\n            }\n            reader.close();\n            return builder.toString();\n        } catch (MalformedURLException e) {\n        } catch (IOException e) {\n        }\n        return \"\";\n    }\n", "label": 0, "substitutes": {"saveUser": [" enrichUser", "saveAccount", " enrichAccount", " manipulateAccount", " manipulateUser", " saveGroup", " saveAccount", " manipulateGroup", " enrichGroup", " manipulateuser", " enrichuser", "saveGroup", "saveuser", " saveuser"], "user": ["item", "v", "force", "human", "file", "post", "by", "replace", "store", "used", "char", "test", "per", "e", "print", "update", "author", "uid", "row", "record", "auth", "username", "responsible", "rule", "url", "owner", "email", "content", "USER", "ro", "write", "profile", "person", "server", "base", "job", "table", "message", "result", "get", "project", "usr", "create", "cert", "client", "u", "name", "object", "User", "load", "data", "me", "report", "or", "password", "use", "add", "actor", "response", "version", "login", "us", "info", "account", "this", "ver", "usage", "entry", "word"], "digest": ["compests", "mdested", "compested", "readested", " digests", "digested", "hashests", " digEST", "compest", "Digse", "Digested", "hashEST", "mdest", "hashress", "DigEST", "Digest", "readest", "hashester", " digress", "mdester", "digests", " digested", "Digester", "digEST", " digester", "hashest", "compress", " digse", "digse", "readse", "mdse", "digester", "readester", "hashested", "digress"], "hash": ["mac", "search", "number", "h", "height", "id", "ash", "tag", "char", "test", "count", "num", "max", "uh", "index", "rh", "check", "block", "has", "html", "result", "init", "dig", "ashes", "hex", "add", "key", "sha", "password", "version", "Hash", "handle", "sum", "mask", "cache", "hed", "full", "type", "sh", "her", "size"], "bigInt": ["BigLong", "littleINT", "BigInteger", "bigINT", "bigLong", "pgInt", " bigint", " bigInteger", "Bigint", "longint", "hugeInteger", "littleInt", " bigLong", "bigInteger", "BigInt", "longINT", "hugeInt", "pgint", "hugeint", "bigint", "longInt", "hugeLong", "littleint", "pgINT"], "hashtext": [" hashstr", "hashvalue", "sumstr", " hashfunction", "Hashinfo", "Hashfunction", "hexvalue", "hashText", "ashinfo", " hashtxt", "hextxt", "hashinfo", "ashtext", "shatext", "hexText", " hashread", "ashstr", "sumtext", "hashstr", "hashfunction", "hexpath", "Hashpath", "hexread", "hashtxt", "hashpath", "sumText", " hashinfo", "hashread", "Hashstr", "shaText", "ashText", "hextext", "shatxt", "sumpath", "sumfunction", "Hashtext", " hashvalue", "HashText", "ashread", " hashText", "ashtxt", "shavalue"]}}
{"id1": "4398382", "id2": "21152728", "code1": "    public static String digest(String algorithm, String text) {\n        MessageDigest mDigest = null;\n        try {\n            mDigest = MessageDigest.getInstance(algorithm);\n            mDigest.update(text.getBytes(ENCODING));\n        } catch (NoSuchAlgorithmException nsae) {\n            _log.error(nsae, nsae);\n        } catch (UnsupportedEncodingException uee) {\n            _log.error(uee, uee);\n        }\n        byte[] raw = mDigest.digest();\n        BASE64Encoder encoder = new BASE64Encoder();\n        return encoder.encode(raw);\n    }\n", "code2": "    private boolean authenticate(Module module) throws Exception {\n        SecureRandom rand = SecureRandom.getInstance(\"SHA1PRNG\");\n        rand.setSeed(System.currentTimeMillis());\n        byte[] challenge = new byte[16];\n        rand.nextBytes(challenge);\n        String b64 = Util.base64(challenge);\n        Util.writeASCII(out, RSYNCD_AUTHREQD + b64 + \"\\n\");\n        String reply = Util.readLine(in);\n        if (reply.indexOf(\" \") < 0) {\n            Util.writeASCII(out, AT_ERROR + \": bad response\\n\");\n            if (remoteVersion < 25) Util.writeASCII(out, RSYNCD_EXIT + \"\\n\");\n            socket.close();\n            throw new IOException(\"bad response\");\n        }\n        String user = reply.substring(0, reply.indexOf(\" \"));\n        String response = reply.substring(reply.indexOf(\" \") + 1);\n        if (!module.users.contains(user)) {\n            Util.writeASCII(out, AT_ERROR + \": user \" + user + \" not allowed\\n\");\n            if (remoteVersion < 25) Util.writeASCII(out, RSYNCD_EXIT + \"\\n\");\n            socket.close();\n            throw new IOException(\"user \" + user + \" not allowed\");\n        }\n        LineNumberReader secrets = new LineNumberReader(new FileReader(module.secretsFile));\n        MessageDigest md4 = MessageDigest.getInstance(\"BrokenMD4\");\n        String line;\n        while ((line = secrets.readLine()) != null) {\n            if (line.startsWith(user + \":\")) {\n                String passwd = line.substring(line.lastIndexOf(\":\") + 1);\n                md4.update(new byte[4]);\n                md4.update(passwd.getBytes(\"US-ASCII\"));\n                md4.update(b64.getBytes(\"US-ASCII\"));\n                String hash = Util.base64(md4.digest());\n                if (hash.equals(response)) {\n                    secrets.close();\n                    return true;\n                } else {\n                    Util.writeASCII(out, AT_ERROR + \": auth failed on module \" + module.name + \"\\n\");\n                    if (remoteVersion < 25) Util.writeASCII(out, RSYNCD_EXIT + \"\\n\");\n                    socket.close();\n                    secrets.close();\n                    logger.error(\"auth failed on module \" + module.name);\n                    return false;\n                }\n            }\n        }\n        Util.writeASCII(out, AT_ERROR + \": auth failed on module \" + module.name + \"\\n\");\n        if (remoteVersion < 25) Util.writeASCII(out, RSYNCD_EXIT + \"\\n\");\n        socket.close();\n        secrets.close();\n        logger.error(\"auth failed on module \" + module.name);\n        return false;\n    }\n", "label": 1, "substitutes": {"digest": ["Digity", " digests", "digize", "digate", "Digest", "digests", "encit", "Digate", "validity", "validests", "equate", "encest", "validest", "digity", "equest", "Digize", "encize", "Digests", "equit", "validate", "Digit", "encate", "digit", " digity", "equize", " digate"], "algorithm": ["alterngebra", "Algebra", "isalphabet", "Algo", "Algorithm", "Alphabet", "ALgo", "isalgorithm", "isalgo", "halchant", "algo", "ALgorithm", "halphabet", "Alchant", "alternitude", "isalchant", "halgo", "alterngo", "alterngorithm", "alitude", "ALitude", "halgorithm", "alchant", "algebra", "alphabet", "Alitude", "ALgebra"], "text": ["path", "subject", "description", "string", "binary", "txt", "Text", "str", "term", "print", "char", "test", "msg", "current", "output", "username", "filename", "aut", "content", "required", "ext", "pattern", "title", "code", "prefix", "buffer", "physical", "message", "input", "read", "document", "template", "name", "data", "source", "value", "image", "password", "TEXT", "translation", "word"], "mDigest": ["mDriester", "mDiget", "mDose", "mDriest", " mDiget", "mDoester", "Mdigest", "MDigse", "Mdiger", " mDigester", "mDr", " mDiger", "cmDester", "mIGester", "mIGest", "Mdigse", "mdigr", "mDigitalet", "mDigitalester", "mDriet", "mDesignester", "mIGse", "mDiger", "mDoer", "cmDr", "mDse", "cmDigse", "mdigest", "mDoest", "cmDest", "cmDigr", "mDigitalested", "mDigse", "mDigested", "mdigester", "MDigester", "mIGer", "cmDigester", "mdigested", " mDriester", " mDigested", "mdiget", "mDester", "cmDse", "Mdigester", "mDriested", " mDigse", "mDigr", "mDesignest", "mDesignse", "mDesignr", " mDriet", "mdigse", "MDiger", "mDigester", "mDer", "MDigest", " mDriested", "cmDigest", "mDest", " mDriest", "mDigitalest", "mdiger"], "raw": ["bytes", "batch", "bound", "log", "des", "orig", "clean", "remote", "aw", "stable", "rendered", "row", "re", "r", "pack", "rs", "custom", "unsigned", "secure", "valid", "modified", "encrypted", "form", "serial", "buffer", "Raw", "unknown", "core", "input", "known", "hook", "hex", "data", "RAW", "signed", "json", "cloud", "cmd", "full", "sync", "cooked", "sh"], "encoder": ["decoder", "enater", "enaler", "Encaler", "enode", "encODE", "ENCoding", "Encoding", "EncODE", "enoding", "encoding", "ENCater", "decode", "enoder", "encode", "decODE", "encaler", "ENCaler", "encater", "enODE", "ENCoder", "decoding", "Encoder", "Encode", "Encater"]}}
{"id1": "18238468", "id2": "7633336", "code1": "    @Test\n    public void testLoadSource() throws IOException {\n        ArticleMetadata metadata = new ArticleMetadata();\n        metadata.setId(\"http://arxiv.org/abs/math/0205003v1\");\n        InputStream inputStream = arxivDAOFacade.loadSource(metadata);\n        Assert.assertNotNull(inputStream);\n        StringWriter writer = new StringWriter();\n        IOUtils.copy(inputStream, writer, \"utf8\");\n        String contents = writer.toString();\n        Assert.assertTrue(contents.contains(\"A strengthening of the Nyman\"));\n        inputStream.close();\n    }\n", "code2": "    private JSONObject executeHttpGet(String uri) throws Exception {\n        HttpGet req = new HttpGet(uri);\n        HttpClient client = new DefaultHttpClient();\n        HttpResponse resLogin = client.execute(req);\n        BufferedReader r = new BufferedReader(new InputStreamReader(resLogin.getEntity().getContent()));\n        StringBuilder sb = new StringBuilder();\n        String s = null;\n        while ((s = r.readLine()) != null) {\n            sb.append(s);\n        }\n        return new JSONObject(sb.toString());\n    }\n", "label": 0, "substitutes": {"testLoadSource": ["testLoadFile", " testAddSources", " testLoadSources", " testAddSource", " testloadSources", "testloadSourceFile", "testLoadSourceFile", "testLoadSources", " testAddSourceFile", " testloadSource", "testloadFile", " testloadFile", "testloadSources", " testloadSourceFile", " testAddFile", " testLoadFile", "testloadSource", " testLoadSourceFile"], "metadata": ["sample", "pdf", "definition", "material", "mt", "sheet", "my", "dirty", "wrapper", "map", "properties", "managed", "basic", "still", "detail", "manager", "met", "content", "primary", "ad", "meta", "summary", "m", "valid", "md", "license", "article", "about", "iterator", "desc", "config", "params", "dd", "message", "unknown", "payment", "tmp", "activity", "parser", "mk", "document", "template", "common", "data", "report", "password", "details", "header", "adata", "default", "json", "xml", "layout", "df", "cmd", "directory", "info", "policy"], "inputStream": ["InputForm", "inputView", "InputPresent", "dataPort", "thisPresent", "inputstream", " inputstream", "inputStreamer", "currentPort", "Inputstream", "inputPort", "currentStreamer", "loadSteam", "loadStream", "dataSteam", "inputStore", "thisSteam", "currentStream", "dataStream", "InputView", "formForm", "inputPresent", "inputSteam", "formStream", "loadstream", " inputView", "loadStore", " inputSteam", "dataStreamer", " inputForm", "inputForm", "currentSteam", " inputPresent", " inputStreamer", "thisStream", "thisView", " inputPort", "InputStream", "InputStore", " inputStore", "InputSteam", "formSteam"], "writer": ["master", "written", "string", "wrote", "riter", "handler", "wrapper", "channel", "loader", "wright", "event", "adder", "creator", "temp", "output", "manager", "storage", "reader", "walker", "network", "maker", "writ", "WR", "null", "to", "editor", "worker", "write", "unsigned", "inner", "console", "builder", "outer", "iterator", "writers", "buffer", "counter", "out", "caster", "Writer", "writing", "window", "order", "wire", "operator", "stream", "woman", "her", "w", "rew"], "contents": [" CONTodes", "Contens", "ContENT", "Contents", "utfents", "contENT", "Content", "contented", "utfented", " CONTens", "content", "Contented", "CONTented", "Contodes", "CONTent", " CONTENT", "CONTents", "utfent", " CONTents", " contens", " contENT", "contens", "contodes", " contodes"]}}
{"id1": "12246545", "id2": "19096138", "code1": "    public void load(String url) throws IOException {\n        this.url = url;\n        int col = url.indexOf(':');\n        if (col > 1 && col < 5) {\n            load(new URL(url).openStream());\n        } else {\n            if (new File(url).exists()) {\n                System.out.println(\"Loading JAD from file : \" + url);\n                FileInputStream fin = new FileInputStream(url);\n                try {\n                    load(fin);\n                } finally {\n                    fin.close();\n                }\n            } else {\n                InputStream in = getClass().getResourceAsStream(url);\n                if (in != null) {\n                    System.out.println(\"Loading JAD from classpath : \" + url);\n                    load(in);\n                } else {\n                    throw new IOException(\"\\\"\" + url + \"\\\" was found in file system or classpath\");\n                }\n            }\n        }\n    }\n", "code2": "    public static void main(String[] args) {\n        String logFileName = args[0];\n        int extractLineEvery = new Integer(args[1]).intValue();\n        String filterToken = \"P0\";\n        if (args.length > 2) {\n            filterToken = args[2];\n        }\n        try {\n            BufferedReader br = new BufferedReader(new FileReader(logFileName));\n            BufferedWriter bw = new BufferedWriter(new FileWriter(new File(logFileName + \".trim\")));\n            String readLine;\n            int x = 0;\n            while ((readLine = br.readLine()) != null) {\n                if ((x++ % extractLineEvery == 0) && readLine.startsWith(filterToken)) {\n                    bw.write(readLine + \"\\n\");\n                }\n            }\n            bw.flush();\n            bw.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n", "label": 0, "substitutes": {"load": ["build", "lock", "print", "process", "debug", "test", "construct", "loader", "update", "fill", "open", "complete", "Load", "call", "pack", "ignore", "library", "check", "boot", "define", "close", "link", "require", "dump", "config", "iter", "set", "get", "init", "parse", "create", "read", "download", "include", "loading", "save", "loads", "LOAD", "use", "l", "cache", "sync", "launch", "find"], "url": ["build", "path", "nl", "print", "external", "pattern", "ssl", "location", "f", "base", "URL", "web", "gif", "req", "db", "name", "source", "key", "au", "json", "full", "err", "ret", "filename", "ext", "host", "status", "html", "rel", "loc", "fail", "ur", "http", "el", "sql", "org", "sl", "item", "address", "log", "term", "str", "id", "mail", "browser", "dl", "null", "ll", "res", "https", "page", "impl", "cert", "l", "xml", "ref", "gc", "ul", "gl", "string", "file", "Url", "resource", "b", "char", "row", "ls", "link", "uri", "q", "util", "mount", "domain"], "col": ["val", "serv", "fl", "cell", "fc", "pt", "dial", "ell", "aj", "var", "char", "count", "num", "mot", "row", "no", "ol", "mon", "Col", "const", "COL", "ctx", "c", " Col", "rot", "def", "ct", "seq", "sel", "loc", "column", "icol", "cor", "soc", "cont", "rect", "coll", "pos", "cmd", "cond", "cal", "il", "pc", "coord", "bc", "co", "con"], "fin": ["ln", "irm", "kin", "eric", "fl", "fw", "fc", "fil", "fre", "fd", "conv", "Fin", "ien", "lan", "inv", "raf", "len", "Finish", "ini", " fi", "mu", "f", "syn", "FIN", "lin", "oin", "din", "init", "fat", "fp", "fn", "ran", "fa", "mn", "san", "pen", "fi", "wid", "fr", "thin", "inn", "sn", "jin", "rn"], "in": ["local", "mc", "irm", "val", "scan", "search", "serv", "system", "ic", "at", "en", "any", "str", "by", "is", "inf", "k", "the", "al", "no", "cin", "from", "inv", "re", "act", "to", "IN", "inc", "i", "n", "inner", "a", "ilo", "m", "within", " din", "on", "o", "form", "ma", "out", "oin", "din", "init", "found", "all", "isin", "input", "ind", "mm", "gin", "In", "add", "el", "pic", "ins", "rin", "it", "ent", "nin", "bin", "thin", "ain", "find", "con", "inn"]}}
{"id1": "3024992", "id2": "8815137", "code1": "    @Test\n    public void testCopy_readerToWriter_nullIn() throws Exception {\n        ByteArrayOutputStream baout = new ByteArrayOutputStream();\n        OutputStream out = new YellOnFlushAndCloseOutputStreamTest(baout, true, true);\n        Writer writer = new OutputStreamWriter(baout, \"US-ASCII\");\n        try {\n            IOUtils.copy((Reader) null, writer);\n            fail();\n        } catch (NullPointerException ex) {\n        }\n    }\n", "code2": "    public void copyToDir(File dir) {\n        if (!dir.exists()) {\n            dir.mkdirs();\n        } else if (this.file.getParentFile() != null && this.file.getParentFile().equals(dir)) {\n            return;\n        }\n        File file = getEstimatedFileName(dir);\n        try {\n            file.createNewFile();\n            FileOutputStream fileOutputStream = new FileOutputStream(file);\n            FileInputStream fileInputStream = new FileInputStream(this.file);\n            int read = 0;\n            byte[] buffer = new byte[1024];\n            while (read != -1) {\n                fileOutputStream.write(buffer, 0, read);\n                read = fileInputStream.read(buffer);\n            }\n            fileInputStream.close();\n            fileOutputStream.close();\n            this.file = file;\n        } catch (IOException e) {\n            Logger.log(e);\n        }\n    }\n", "label": 1, "substitutes": {"testCopy_readerToWriter_nullIn": ["testCopy_readerToWriter_null_", "testCopy_readerToWriter_NullIn", "testCopy_readerToWriter2Null_", "testCopy_readerToWriter2Nullin", "testCopy_readerToWriter_nullOut", "testCopy_readerToWriter_NULLin", "testCopy_readerToWriter2NullIn", "testCopy_readerToWriter2NullOut", "testCopy_readerToWriter2nullIn", "testCopy_readerToWriter_NULLOut", "testCopy_readerToWriter2null_", "testCopy_readerToWriter_Null_", "testCopy_readerToWriter_nullin", "testCopy_readerToWriter_NullOut", "testCopy_readerToWriter_Nullin", "testCopy_readerToWriter2nullin", "testCopy_readerToWriter_NULLIn", "testCopy_readerToWriter2nullOut", "testCopy_readerToWriter_NULL_"], "baout": ["BAout", "bain", "gaouth", "dboul", "abain", "cain", "dbin", "BAOut", "BAit", "cait", "bait", "buout", "gaoul", " baOut", "BAouts", "gaout", "gain", "caout", "dbouth", "caOut", " baouts", "BAoul", "abaOut", "abait", "buin", "BAin", "dbout", " bain", "baOut", "buOut", "BAouth", "baouts", "abaout", "baoul", "buouts", "baouth"], "out": ["err", "serv", "io", "in", "output", "gen", "ex", "n", "null", "write", "res", "o", "net", "result", "tmp", "gr", "sys", "OUT", " OUT", "Out", "ser", "it", "pool", "outs", "er"], "writer": ["player", "wrote", "file", "riter", "handler", "print", "channel", "processor", "wright", "service", "output", "target", "maker", "reader", "writ", "widget", "rw", "null", "write", "worker", "inner", "usher", "builder", "outer", "killer", "buffer", "nw", "client", "println", "document", "data", "Writer", "driver", "window", "this", "er", "NULL", "woman", "w"]}}
{"id1": "12097948", "id2": "21488868", "code1": "    public AsciiParser(String systemID) throws GridBagException {\n        String id = systemID;\n        if (id.endsWith(\".xml\")) {\n            id = StringUtils.replace(id, \".xml\", \".gbc\");\n        }\n        ClassLoader loader = this.getClass().getClassLoader();\n        URL url = loader.getResource(id);\n        if (url == null) {\n            throw new GridBagException(\"Cannot located resource : \\\"\" + systemID + \"\\\".\");\n        }\n        try {\n            InputStream inStream = url.openStream();\n            constraints = getLines(inStream);\n            inStream.close();\n        } catch (IOException ie1) {\n            throw new GridBagException(\"Cannot read from resource \" + id);\n        }\n    }\n", "code2": "    public static boolean encodeFileToFile(String infile, String outfile) {\n        boolean success = false;\n        java.io.InputStream in = null;\n        java.io.OutputStream out = null;\n        try {\n            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);\n            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n            byte[] buffer = new byte[65536];\n            int read = -1;\n            while ((read = in.read(buffer)) >= 0) {\n                out.write(buffer, 0, read);\n            }\n            success = true;\n        } catch (java.io.IOException exc) {\n            exc.printStackTrace();\n        } finally {\n            try {\n                in.close();\n            } catch (Exception exc) {\n            }\n            try {\n                out.close();\n            } catch (Exception exc) {\n            }\n        }\n        return success;\n    }\n", "label": 0, "substitutes": {"systemID": ["privateVD", "systemVD", "SystemIDs", "sysVD", " systemName", "sysName", "privateID", "sysIDs", "privateId", "systemIDs", "SystemName", " systemId", " systemIDs", "systemId", "systemName", "sysId", "sysID", "SystemId", "privateName", " systemVD", "SystemID"], "id": ["d", "path", "rid", "description", "bid", "delete", "p", "show", "str", "post", "gd", "part", "uid", "mid", "test", "hash", "bind", "in", "internal", "ids", "no", "aid", "sid", "kid", "null", "i", "query", "res", "ID", "link", "md", "f", "hide", "uri", "base", "def", "form", "message", "end", "q", "init", "ident", "pid", "hd", "create", "Id", "ide", "db", "name", "oid", "data", "source", "one", "key", "shape", "mask", "ip", "json", "it", "layout", "ref", "wire", "iden", "edit"], "loader": ["where", "system", "module", "layer", "lr", "lp", "nl", "handler", "loaded", "class", "context", "kernel", "manager", "lc", "reader", "owner", "library", "label", "language", "location", "builder", "qualified", "cl", "container", "older", "user", "parser", "acl", "cdn", "hl", "load", "loading", "rl", "loads", "finder", "Loader", "pkg", "l", "pool", "er", "framework"], "url": ["sl", "path", "address", "lr", "file", "Url", "ret", "abs", "str", "nl", "resource", "mail", "tool", "browser", "ls", "norm", "r", "dl", "ll", "ssl", "link", "location", "builder", "f", "uri", "rel", "html", "URL", "job", "web", "loc", "ur", "user", "impl", "ml", "name", "bel", "util", "http", "load", "rl", "or", "mount", "el", "l", "xml", "mb", "il", "ref", "org", "lb", "ul"], "inStream": ["inputStream", "inBlock", "inputstream", "inputFile", " inView", " inSteam", " inFile", "onView", "instream", "INView", "INstream", "InFile", "intBlock", " inBlock", "InStream", "InSteam", "inputSteam", "intSocket", "INSteam", "INStream", " inSocket", "inFile", "innStream", "inSteam", "inView", "innSocket", "inSocket", "Instream", "innSteam", "onStream", "onSteam", "onstream", " instream", "intSteam", "intStream", "innBlock"], "constraints": ["constsains", "costrains", "costaint", "constats", "constsaint", "constsaints", "constains", "constaint", "constsats", "constrains", "costains", "conStrains", "costrats", "conStraint", "costats", "costraint", "constraint", "constrats", "constaints", "conStrats", "costaints", "costraints", "conStraints"]}}
{"id1": "646016", "id2": "11305840", "code1": "    public void elimina(Cliente cli) throws errorSQL, errorConexionBD {\n        System.out.println(\"GestorCliente.elimina()\");\n        int id = cli.getId();\n        String sql;\n        Statement stmt = null;\n        try {\n            gd.begin();\n            sql = \"DELETE FROM cliente WHERE cod_cliente =\" + id;\n            System.out.println(\"Ejecutando: \" + sql);\n            stmt = gd.getConexion().createStatement();\n            stmt.executeUpdate(sql);\n            System.out.println(\"executeUpdate\");\n            sql = \"DELETE FROM persona WHERE id =\" + id;\n            System.out.println(\"Ejecutando: \" + sql);\n            stmt.executeUpdate(sql);\n            gd.commit();\n            System.out.println(\"commit\");\n            stmt.close();\n        } catch (SQLException e) {\n            gd.rollback();\n            throw new errorSQL(e.toString());\n        } catch (errorConexionBD e) {\n            System.err.println(\"Error en GestorCliente.elimina(): \" + e);\n        } catch (errorSQL e) {\n            System.err.println(\"Error en GestorCliente.elimina(): \" + e);\n        }\n    }\n", "code2": "    public boolean setUpdateCliente(int IDcliente, String nombre, String paterno, String materno, String ocupacion, String rfc) {\n        boolean update = false;\n        try {\n            stm = conexion.prepareStatement(\"update clientes set nombre='\" + nombre.toUpperCase().trim() + \"' , paterno='\" + paterno.toUpperCase().trim() + \"' ,\" + \"materno='\" + materno.toUpperCase().trim() + \"',ocupacion='\" + ocupacion.toUpperCase().trim() + \"',rfc='\" + rfc.trim() + \"' where IDcliente ='\" + IDcliente + \"' \");\n            stm.executeUpdate();\n            conexion.commit();\n            update = true;\n        } catch (SQLException e) {\n            System.out.println(\"error al actualizar registro en la tabla clientes  \" + e.getMessage());\n            try {\n                conexion.rollback();\n            } catch (SQLException ee) {\n                System.out.println(ee.getMessage());\n            }\n            return update = false;\n        }\n        return update;\n    }\n", "label": 1, "substitutes": {"elimina": ["alimine", "eligino", "elitisa", "elimisa", "elitina", "elimino", "eligine", "allimina", "ellimisa", "allimisa", "ellimino", "eligisa", "allimino", "eligina", "elitino", "elitine", "alimina", "alimino", "ellimine", "allimine", "elimine", "ellimina", "alimisa"], "cli": ["Client", "ln", "eric", "aci", " CLI", "clus", "li", "udi", "Cl", "cu", "prot", "e", "GUI", "uci", "grid", "cci", "ctrl", "ctl", "lc", "dl", "c", "cgi", "idi", "i", " cl", "coni", "pi", "ci", "console", "coe", "cl", "multi", "conn", "lu", "cfg", "exe", "client", "util", "cho", "l", "gui", "cmd", "ui", "gil", "dial"], "id": ["d", "rid", "bid", "h", " fid", "mail", "uid", "mid", "e", "start", "num", "in", "hash", "ids", "did", "ida", "aid", "no", "sid", "url", "index", "kid", "null", "i", "ad", "res", "code", "status", "ID", "md", "f", "sd", "end", "out", "vid", "ident", "pid", "db", "Id", "ide", "name", "oid", "rand", "value", "key", "and", "wid", "with", "ip", "it", "is", "del", "info", "ref", "type", "iden"], "sql": ["ln", "ps", "sl", "sal", "sq", "js", " SQL", "scl", "spr", "owl", "ping", "string", "lock", "pel", "nl", "mail", "eps", "xs", "msg", "ls", "inv", "shell", "url", "dl", "query", "sol", "ll", "QL", "ssl", "html", "https", "SQL", "csv", "ns", "what", "sk", "lex", "expression", "security", "sd", "ms", "sb", "format", "s", "software", "sp", "db", "wal", "ds", "ips", "fn", "spec", "util", "ship", "services", "sys", "sv", "socket", "details", "pp", "pkg", "lua", "xml", "json", "ql"], "stmt": ["Sttm", "scm", "sctm", "Stmm", "STmm", "stmb", "scmm", "StMT", "scmt", " stm", "stMT", "sttm", "STm", "strm", "strmb", "tm", "STMT", "STmn", "ttm", " sttm", "Stmt", "Stmn", "stmn", " stmn", "Stm", "stmm", " stmm", "strMT", "Stmb", "STmt", "stm", "tmm", " stmb", " stMT", "tmt", "strmt"]}}
{"id1": "20247400", "id2": "15262411", "code1": "    public static void main(String[] args) throws Exception {\n        if (args.length != 2) {\n            System.out.println(\"arguments: sourcefile destfile\");\n            System.exit(1);\n        }\n        FileChannel in = new FileInputStream(args[0]).getChannel(), out = new FileOutputStream(args[1]).getChannel();\n        ByteBuffer buffer = ByteBuffer.allocate(BSIZE);\n        while (in.read(buffer) != -1) {\n            buffer.flip();\n            out.write(buffer);\n            buffer.clear();\n        }\n    }\n", "code2": "    String fetch_pls(String pls) {\n        InputStream pstream = null;\n        if (pls.startsWith(\"http://\")) {\n            try {\n                URL url = null;\n                if (running_as_applet) {\n                    url = new URL(getCodeBase(), pls);\n                } else {\n                    url = new URL(pls);\n                }\n                URLConnection urlc = url.openConnection();\n                pstream = urlc.getInputStream();\n            } catch (Exception ee) {\n                System.err.println(ee);\n                return null;\n            }\n        }\n        if (pstream == null && !running_as_applet) {\n            try {\n                pstream = new FileInputStream(System.getProperty(\"user.dir\") + System.getProperty(\"file.separator\") + pls);\n            } catch (Exception ee) {\n                System.err.println(ee);\n                return null;\n            }\n        }\n        String line = null;\n        while (true) {\n            try {\n                line = readline(pstream);\n            } catch (Exception e) {\n            }\n            if (line == null) {\n                break;\n            }\n            if (line.startsWith(\"File1=\")) {\n                byte[] foo = line.getBytes();\n                int i = 6;\n                for (; i < foo.length; i++) {\n                    if (foo[i] == 0x0d) {\n                        break;\n                    }\n                }\n                return line.substring(6, i);\n            }\n        }\n        return null;\n    }\n", "label": 0, "substitutes": {"in": ["file", "io", "is", "inf", "up", "cin", "from", "IN", "inc", "i", "check", "inner", "ze", " din", "on", "net", "din", "init", "input", "isin", "ind", "gin", "In", "source", "and", "ai", "ins", "rin", "it", "info", "bin", "con", "inn"], "out": ["ln", "err", "at", "log", "dir", "OU", "str", "io", "print", "b", "t", "obj", "ot", "msg", "output", "we", "other", "r", "null", "n", "ex", "to", "check", "write", "auto", "gt", "outer", "o", "screen", "net", "oss", "writer", "exit", "name", "println", "client", "line", "sys", "con", "OUT", "report", "or", "Out", "list", "ins", "it", "cmd", "ou", "outs", "ne", "os", "w"], "buffer": ["address", "sample", "match", "function", "batch", "filter", "binary", "sequence", "variable", "append", "queue", "bar", "pause", "channel", "b", "length", "component", "processor", "event", "bridge", "history", "position", "stack", "phrase", "total", "limit", "output", "attribute", "flush", "view", "index", "library", "block", "clear", "iter", "trace", "size", "table", "result", "buff", "message", "command", "database", "db", "document", "template", "comment", "data", "source", "memory", "key", "header", "shape", "window", "cache", "available", "buf", "Buffer", "temp", "display", "se"]}}
{"id1": "17190057", "id2": "15351863", "code1": "    private static String encode(final String input) throws UnsupportedEncodingException, NoSuchAlgorithmException {\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.reset();\n        md.update(input.getBytes(\"UTF-8\"));\n        return toHexString(md.digest());\n    }\n", "code2": "    public static String generate(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n        MessageDigest md;\n        md = MessageDigest.getInstance(\"SHA-1\");\n        byte[] sha1hash = new byte[40];\n        md.update(text.getBytes(\"iso-8859-1\"), 0, text.length());\n        sha1hash = md.digest();\n        return convertToHex(sha1hash);\n    }\n", "label": 1, "substitutes": {"encode": ["Enclose", " enCode", " enclose", "EnCode", "Enode", " enode", "decode", "enode", "deode", "enCode", "declose", "deCode", "Encode", "enclose"], "input": ["text", "sample", "address", "op", "string", "file", "sequence", "str", " Input", "print", "Input", "in", "context", "audio", "output", "url", "qa", "act", "check", "pattern", "initial", "config", "form", "buffer", "format", "out", "raw", "q", "active", "name", "client", "data", "qi", "source", "value", "image", "password", "hello", "request", "xml", "it", "cmd", " inputs", "command"], "NoSuchAlgorithmException": ["NoSuchAlgorithmError", "NoSuchAlryptionClass", "NoSuchAlgorithmClass", "NoSuchAlgorithEx", "NoSuchALgorithClass", "NoSuchAlgorithmEx", "NoSuchALgorithmClass", "NoSuchALgorithmError", "NoSuchALgorithmException", "NoSuchALgorithEx", "NoSuchAlgorithException", "NoSuchALgorithException", "NoSuchAlryptionEx", "NoSuchAlgorithClass", "NoSuchALgorithError", "NoSuchAlgorithError", "NoSuchALgorithmEx", "NoSuchAlryptionException", "NoSuchAlryptionError"], "md": ["d", "mc", "js", "dr", "pdf", "pd", "ld", "mt", "mod", "di", "sm", "nt", "msg", "de", "nd", "strong", "sam", "ng", "red", "det", "ad", "m", "pm", "desc", "def", "sd", "ms", "dd", "mand", "rm", "hd", "dig", "mm", "ind", "cd", "mk", "cm", "od", "bd", "add", "mn", "mg", "dm", "metadata", "sha", "mp", "der", "df", "mb", "cmd", "MD"]}}
{"id1": "13421722", "id2": "5620792", "code1": "    public static long getFileSize(String address) {\n        URL url = null;\n        try {\n            url = new URL(address);\n            System.err.println(\"Indirizzo valido - \" + url.toString().substring(0, 10) + \"...\");\n        } catch (MalformedURLException ex) {\n            System.err.println(\"Indirizzo non valido!\");\n        }\n        try {\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n            connection.setRequestProperty(\"Range\", \"bytes=0-\");\n            connection.connect();\n            return connection.getContentLength();\n        } catch (IOException ioe) {\n            System.err.println(\"I/O error!\");\n            return 0;\n        }\n    }\n", "code2": "    public static String SHA1(String text, int HASH_VALUE_SIZE) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n        MessageDigest md;\n        md = MessageDigest.getInstance(\"SHA-1\");\n        byte[] sha1hash = new byte[HASH_VALUE_SIZE];\n        md.update(text.getBytes(\"iso-8859-1\"), 0, text.length());\n        sha1hash = md.digest();\n        return convertToHex(sha1hash);\n    }\n", "label": 0, "substitutes": {"getFileSize": ["getFilesSize", " getFilesSize", "getFileLength", "getFilesLength", " getFileBytes", " getFileLength", "getByteBytes", "getFileBytes", "getFilesBytes", "getContentBytes", "getFilesLen", "getFileLen", " getFilesLength", " getFilesLen", "getContentLen", "getByteLength", " getFileLen", "getContentSize", "getByteLen", "getContentLength", "getByteSize", " getFilesBytes"], "address": ["localhost", "search", "description", "number", "string", "campus", "resource", "point", "remote", "route", "attribute", "network", "email", "index", "word", "port", "host", "location", "uri", "base", "street", "server", "prefix", "table", "message", "argument", "command", "reference", "name", "country", "report", "addr", "password", "add", "ip", "directory", "domain", "order", "Address"], "url": ["build", "sl", "path", "gl", "string", "file", "Url", "git", "str", "nl", "mail", "char", "browser", "ls", "run", "re", "r", "email", "dl", "null", "atl", "ll", "https", "ssl", "link", "location", "console", "f", "uri", "base", "URL", "web", "loc", "sb", "conn", "ur", "q", "parse", "cert", "un", "client", "u", "name", "util", "http", "www", "rl", "mount", "el", "l", "window", "xml", "il", "ref", "ul"], "connection": ["settings", "system", "subject", "function", "number", "operation", "communication", "collection", "resource", "channel", "cone", "event", "ion", "position", "context", "open", "output", "Connection", "network", "creation", "c", "to", "section", "access", "relation", "condition", "session", "statement", "close", "link", "language", "city", "connect", "message", "conn", "termination", "reference", "client", "object", "application", "pointer", "socket", "password", "version", "response", "connected", "directory", "character", "controller", "translation", "machine", "display", "entry", "creator", "command"]}}
{"id1": "1443205", "id2": "1473212", "code1": "    private void redirect(TargetApp app, HttpServletRequest request, HttpServletResponse response) throws IOException {\n        URL url = new URL(app.getUrl() + request.getRequestURI());\n        s_log.debug(\"Redirecting to \" + url);\n        URLConnection urlConnection = url.openConnection();\n        Map<String, List<String>> fields = urlConnection.getHeaderFields();\n        for (String key : fields.keySet()) {\n            StringBuffer values = new StringBuffer();\n            boolean comma = false;\n            for (String value : fields.get(key)) {\n                if (comma) {\n                    values.append(\", \");\n                }\n                values.append(value);\n                comma = true;\n            }\n            if (key != null) {\n                response.setHeader(key, values.toString());\n            } else {\n                response.setStatus(Integer.parseInt(values.toString().split(\" \")[1]));\n            }\n        }\n        InputStream in = urlConnection.getInputStream();\n        try {\n            ServletOutputStream out = response.getOutputStream();\n            byte[] buff = new byte[1024];\n            int len;\n            while ((len = in.read(buff)) != -1) {\n                out.write(buff, 0, len);\n            }\n        } finally {\n            in.close();\n        }\n    }\n", "code2": "    @Test\n    public void test_validate_geo_getEvents() {\n        try {\n            SchemaFactory factory = SchemaFactory.newInstance(\"http://www.w3.org/2001/XMLSchema\");\n            File schemaLocation = new File(\"tes.xsd\");\n            Schema schema = factory.newSchema(schemaLocation);\n            Validator validator = schema.newValidator();\n            URL url = new URL(\"http://ws.audioscrobbler.com/2.0/?method=geo.getevents&location=madrid&api_key=b25b959554ed76058ac220b7b2e0a026\");\n            InputStream inputStream = url.openStream();\n            Source source = new StreamSource(inputStream);\n            validator.validate(source);\n        } catch (IOException ex) {\n            Logger.getLogger(GetEvents_Test.class.getName()).log(Level.SEVERE, null, ex);\n            assertFalse(\"File not found\", true);\n        } catch (SAXException ex) {\n            Logger.getLogger(GetEvents_Test.class.getName()).log(Level.SEVERE, null, ex);\n            assertFalse(\"Schema did not validate\", true);\n        }\n        assertTrue(true);\n    }\n", "label": 0, "substitutes": {"redirect": ["Redirect", "adirect", "adirection", " redirection", "Redurl", "adir", "Redirection", " redir", "Redir", " redurl", "redir", "redurl", "adurl", "redirection"], "app": ["cms", "apply", "abs", "process", "b", "map", "browser", "be", "App", "APP", "up", "service", "ca", "bb", "comm", "access", "port", "m", "server", "base", "web", "com", "comp", "conn", "project", "Application", "db", "exp", "org", "http", "application", "ap", "ac", "pp", "pkg", "ip", "g", "atom", "apps", "framework", "display", "os"], "request": ["address", "trip", "first", "process", "question", "event", "position", "context", "current", "attribute", "complete", "re", "view", "query", "accept", "initial", "form", "message", "each", "get", "raw", "project", "req", "create", "change", "input", "reference", "setup", "Request", "frame", "application", "reset", "report", "hello", "quest", "task", "now", "command"], "response": ["send", "description", "sequence", "respond", "print", "onse", "position", "success", "context", "service", "output", "Response", "ren", "network", "we", "content", "view", "fire", "model", "index", "block", "relation", "write", "connection", "res", "status", "release", "continue", "server", "message", "result", "sp", "page", "format", "tree", "document", "exit", "frame", "respons", "http", "application", "soc", "socket", "reset", "report", "image", "version", "window", "json", "next", "reply", "resp", "display"], "url": ["build", "sl", "path", "address", "gl", "ret", "Url", "abs", "str", "nl", "mail", "service", "ls", "re", "r", "email", "dl", "ll", "pl", "https", "ssl", "link", "f", "uri", "base", "URL", "rel", "web", "get", "ur", "cert", "name", "acl", "bel", "hl", "www", "http", "util", "mount", "el", "l", "ob", "xml", "ref", "org", "ul"], "urlConnection": ["urlOpen", "UrlPosition", "urlConnect", " urlconnection", "urlClient", "UrlConnect", "httpPosition", "httpconnection", " urlOpen", "sslConnection", "Urlconnection", "httpConnection", "httpOpen", " urlConnect", "UrlConnection", "UrlClient", "sslClient", "sslconnection", "sslConnect", "urlconnection", "UrlOpen", "urlPosition", "httpConnect", "httpClient", " urlPosition"], "fields": ["flags", "forms", "keepers", "members", "lists", "balls", "terms", "groups", "boxes", "lights", "sections", "ls", "orders", "names", "users", "headers", "packs", "pages", "dates", "vers", "fs", "workers", "ports", "ms", "files", "changes", "holders", "tags", "relations", "services", "lines", "drivers", "faces", "hips", "atts", "loads", "keys", "details", "rules", "views", "uploads", "heads", "rows", "checks", "levels", "words", "types", "phones", "gets", "sets", "masters"], "key": ["val", "item", "Key", "description", "et", "field", "string", "step", "var", "variable", "id", "by", "tag", "parent", "part", "char", "property", "k", "hash", "row", "phrase", "attribute", "ke", "rule", "owner", "index", "kid", "primary", "null", "label", "pattern", "KEY", "title", "code", "kind", "what", "base", "set", "prefix", "date", "column", "name", "major", "sign", "source", "keys", "chain", "tip", "pkg", "default", "token", "json", "info", "option", "type", "important", "er", "y", "entry", "word"], "values": ["settings", "cells", "places", "flags", "bytes", "members", "forms", "results", "vs", "lists", "ups", "uts", "objects", "terms", "strings", "blocks", "users", "states", "obs", "units", "als", "csv", "maps", "options", "ports", "times", "pins", "files", "beans", "changes", "videos", "lets", "versions", "tags", "Values", "vals", "actions", "services", "lines", "items", "drivers", "ends", "keys", "rows", "marks", "errors", "checks", "boxes", "phones", "gets", "sets"], "value": ["val", "sample", "v", "cell", "description", "string", "field", "sequence", "variable", "pair", "point", "property", "VALUE", "test", "zone", "style", "attribute", "other", "widget", "Value", "null", "block", "node", "label", "language", "feature", "vector", "example", "message", "element", "database", "ue", "create", "name", "python", "object", "data", "password", "version", "hello", "default", "json", "unit", "state", "entry"], "comma": ["compenta", "commonota", "commonenta", "COMma", "compmission", "qualma", "COMpa", "comota", "scheMA", "compbo", "qualmission", "scheenta", "schema", "comMA", "compda", "cumbo", "comda", "centa", "commission", "qualenta", "commonma", "qualota", "calenta", "schepa", "compa", "cpa", "calbo", "compma", "cma", "COMenta", "cumma", "combo", "commonmission", "calda", "calma", "cumenta", "compota", "comenta", "COMMA", "cumda", "cMA"], "in": ["ic", "file", "en", "io", "old", "is", "inf", "t", "up", "al", "cin", "from", "reader", "r", "ini", "IN", "inc", "i", "n", "inner", "pi", "inside", "on", "f", "o", "iter", "form", "din", "get", "init", "conn", "input", "isin", "ind", "read", "In", "ai", "ins", "it", "info", "body", "ain", "stream", "con", "inn"], "out": ["v", "at", "en", "OU", "io", "print", "b", "t", "e", "nt", "aos", "output", "we", "inv", "external", "flush", "r", "to", "n", "i", "write", "inner", "res", "on", "outer", "o", "net", "end", "oss", "cn", "writer", "sys", "con", "OUT", "Out", "ou", "outs", "ne", "co", "os", "w"], "buff": ["xx", "bed", "qq", "batch", "pb", "bound", "dat", "txt", "b", "bg", "lf", "fac", "printf", "grow", "butt", "stack", "nd", "bb", " buf", "oct", "cod", "bo", "bl", "ff", "uff", "box", "ext", "mem", "obs", "fb", "seq", "buffer", "comp", "bs", "tmp", "ck", "hd", "ind", "tab", "hex", "Buff", "bf", "cb", "uf", "ob", "fr", "cmd", "buf"], "len": ["ln", "err", "val", "js", "gl", "cmp", "elt", "lib", "en", "ell", "ld", "str", "length", "fun", "lf", "t", "count", "nt", "z", "num", "ls", "lan", "cod", "dl", "bl", "n", "ll", "vol", "vec", "pl", "mem", "fin", "seq", "cl", "end", "cap", "all", "Len", "ind", "exp", "lim", "lif", "el", "l", "coll", "pos", "del", "lon", "buf", "full"]}}
{"id1": "22479286", "id2": "16623181", "code1": "    public String md5(String plainText) throws NoSuchAlgorithmException {\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(plainText.getBytes());\n        byte[] digest = md.digest();\n        StringBuffer hexString = new StringBuffer();\n        for (int i = 0; i < digest.length; i++) {\n            plainText = Integer.toHexString(0xFF & digest[i]);\n            if (plainText.length() < 2) {\n                plainText = \"0\" + plainText;\n            }\n            hexString.append(plainText);\n        }\n        return hexString.toString();\n    }\n", "code2": "    public static void main(String[] args) {\n        File srcDir = new File(args[0]);\n        File dstDir = new File(args[1]);\n        File[] srcFiles = srcDir.listFiles();\n        for (File f : srcFiles) {\n            if (f.isDirectory()) continue;\n            try {\n                FileChannel srcChannel = new FileInputStream(f).getChannel();\n                FileChannel dstChannel = new FileOutputStream(dstDir.getAbsolutePath() + System.getProperty(\"file.separator\") + f.getName()).getChannel();\n                ByteBuffer buffer = ByteBuffer.allocate(1024);\n                int nr = 0;\n                srcChannel.position(nr);\n                nr += srcChannel.read(buffer);\n                while (nr < f.length()) {\n                    buffer.flip();\n                    dstChannel.write(buffer);\n                    buffer.clear();\n                    nr += srcChannel.read(buffer);\n                }\n                srcChannel.close();\n                dstChannel.close();\n            } catch (IOException e) {\n            }\n        }\n    }\n", "label": 0, "substitutes": {"md5": [" MD5", "MD2", "MD3", " md3", "md4", "MD5", "MD4", "md2", " md4", " MD4", " MD3", "md3", " md2", " MD2"], "plainText": ["flatText", "plainMessage", "externalDelete", "fulltext", "batString", "externalText", "flatForm", "ainTrans", "ainMessage", "initialString", "plainTerm", "batText", "ainDelete", "plainPrint", "longString", "ainTerm", "fullString", " plainSync", "altTEXT", " plainTEXT", "alttext", "longTEXT", " plainMessage", " plainForm", "batTerm", "initialText", "flatTEXT", "ainForm", "plainSync", "flatMessage", "altString", "plainDelete", "externalTEXT", " plainString", "maintext", "mainTEXT", "fullText", "ainPrint", "aintext", "plainForm", " plaintext", " plainTerm", "initialTrans", "plainTrans", "positionString", "longText", "ainTEXT", "initialtext", "plainTEXT", "altText", "richText", "plainString", "richString", "fullPrint", " plainTrans", "plaintext", " plainDelete", "mainString", "positionText", "externalString", "longPrint", "altPrint", "batSync", "ainText", "mainText", "ainSync", "richPrint", "positionTEXT", "ainString", "richTEXT", "positiontext"], "md": ["mac", "d", "mc", "dr", "pdf", "h", "pd", "dir", "ld", "mt", "mod", "di", " MD", "sm", "nt", "de", "ng", "red", "det", "ad", "m", "down", "pm", "desc", "sd", "ms", "dd", "mand", "hd", "mm", "ind", "mk", "cd", "od", "bd", "mg", "mn", "add", "dm", "mp", "man", "der", "dh", "df", "mb", "cmd", "grad", "MD", " Md"], "digest": ["digute", "mdested", "Digity", "digested", " digests", "compute", " digEST", "candidate", "compest", "Digested", "candum", "mdest", "DigEST", "candute", "presentute", "mdEST", "presentests", "Digest", "digum", "presentEST", "digests", " digested", "digEST", "Digute", "compum", "digity", "presentity", "digidate", "defEST", "Digests", "presentested", "Digum", " digse", "defested", "candest", "digse", "presentest", "defse", "mdse", "compidate", "defest", " digute", " digity", "Digidate"], "hexString": ["hexstring", "charArray", "expstring", "hexBuffer", "hexSingle", " hexBuffer", " HexString", "hexText", "exSingle", "charText", "charString", "rexBuffer", "expBuffer", "expString", " hexstring", " hexText", " hexSingle", " Hexstring", " HexBuffer", "rexSingle", "exBuffer", " hexArray", "rexArray", "charBuffer", "exString", "expText", "exArray", "exText", " HexText", "rexString", "hexArray"], "i": ["err", "ti", "v", "ji", "I", "batch", "ic", "iq", "li", "id", "io", "gi", "my", "b", "is", "di", "conv", "ii", "z", "in", "\u0438", "j", "phi", "mi", "si", "index", "c", "ex", "n", "iu", "a", "to", "pi", "ci", "m", "ski", "yi", "uri", "set", "multi", "q", "init", "xi", "ie", "ind", "gu", "u", "x", "qi", "im", "me", "key", "chain", "ai", "ix", "sim", "ip", "it", "g", "hi", "ui", "info", "bi", "y"]}}
{"id1": "21754659", "id2": "18782385", "code1": "    private JButton getButtonSonido() {\n        if (buttonSonido == null) {\n            buttonSonido = new JButton();\n            buttonSonido.setText(Messages.getString(\"gui.AdministracionResorces.15\"));\n            buttonSonido.setIcon(new ImageIcon(getClass().getResource(\"/es/unizar/cps/tecnoDiscap/data/icons/view_sidetree.png\")));\n            buttonSonido.addActionListener(new java.awt.event.ActionListener() {\n\n                public void actionPerformed(java.awt.event.ActionEvent e) {\n                    JFileChooser fc = new JFileChooser();\n                    fc.addChoosableFileFilter(new SoundFilter());\n                    int returnVal = fc.showDialog(AdministracionResorces.this, Messages.getString(\"gui.AdministracionResorces.17\"));\n                    if (returnVal == JFileChooser.APPROVE_OPTION) {\n                        File file = fc.getSelectedFile();\n                        String rutaGlobal = System.getProperty(\"user.dir\") + \"/\" + rutaDatos + \"sonidos/\" + file.getName();\n                        String rutaRelativa = rutaDatos + \"sonidos/\" + file.getName();\n                        try {\n                            FileInputStream fis = new FileInputStream(file);\n                            FileOutputStream fos = new FileOutputStream(rutaGlobal, true);\n                            FileChannel canalFuente = fis.getChannel();\n                            FileChannel canalDestino = fos.getChannel();\n                            canalFuente.transferTo(0, canalFuente.size(), canalDestino);\n                            fis.close();\n                            fos.close();\n                            imagen.setSonidoURL(rutaRelativa);\n                            System.out.println(rutaGlobal + \" \" + rutaRelativa);\n                            buttonSonido.setIcon(new ImageIcon(getClass().getResource(\"/es/unizar/cps/tecnoDiscap/data/icons/view_sidetreeOK.png\")));\n                            gui.getAudio().reproduceAudio(imagen);\n                        } catch (IOException ex) {\n                            ex.printStackTrace();\n                        }\n                    } else {\n                    }\n                }\n            });\n        }\n        return buttonSonido;\n    }\n", "code2": "    public void saveFile(MainWindow window) {\n        FileOutputStream stream = null;\n        try {\n            Document outputDoc = new Document();\n            DocType dtd = new DocType(UI, DIRECTORY + File.separator + FILE_NAME_DTD);\n            Element uiElement = new Element(UI);\n            outputDoc.setDocType(dtd);\n            outputDoc.addContent(uiElement);\n            outputDoc.setRootElement(uiElement);\n            uiElement.setAttribute(USE_DEFAULT, \"false\");\n            uiElement.setAttribute(SHOW_TOOL_BAR, Boolean.toString(window.getToolToolBar().isVisible()));\n            uiElement.setAttribute(SHOW_UNIT_BAR, Boolean.toString(window.getUnitToolBar().isVisible()));\n            String currentLFClassName = UIManager.getLookAndFeel().getClass().getName();\n            String systemLFClassName = UIManager.getSystemLookAndFeelClassName();\n            if (currentLFClassName.equals(systemLFClassName)) uiElement.setAttribute(LOOK_AND_FEEL, \"native\"); else uiElement.setAttribute(LOOK_AND_FEEL, \"default\");\n            Element mainWindowElement = new Element(MAIN_WINDOW);\n            uiElement.addContent(mainWindowElement);\n            mainWindowElement.setAttribute(LOCATION_X, Integer.toString(window.getFrame().getX()));\n            mainWindowElement.setAttribute(LOCATION_Y, Integer.toString(window.getFrame().getY()));\n            mainWindowElement.setAttribute(WIDTH, Integer.toString(window.getFrame().getWidth()));\n            mainWindowElement.setAttribute(HEIGHT, Integer.toString(window.getFrame().getHeight()));\n            Element volumeElement = new Element(VOLUME);\n            uiElement.addContent(volumeElement);\n            AudioPlayer player = window.getDesktop().getSoundPlayer();\n            volumeElement.setAttribute(SOUND, Float.toString(player.getVolume()));\n            volumeElement.setAttribute(MUTE, Boolean.toString(player.isMute()));\n            Element internalWindowsElement = new Element(INTERNAL_WINDOWS);\n            uiElement.addContent(internalWindowsElement);\n            MainDesktopPane desktop = window.getDesktop();\n            JInternalFrame[] windows = desktop.getAllFrames();\n            for (JInternalFrame window1 : windows) {\n                Element windowElement = new Element(WINDOW);\n                internalWindowsElement.addContent(windowElement);\n                windowElement.setAttribute(Z_ORDER, Integer.toString(desktop.getComponentZOrder(window1)));\n                windowElement.setAttribute(LOCATION_X, Integer.toString(window1.getX()));\n                windowElement.setAttribute(LOCATION_Y, Integer.toString(window1.getY()));\n                windowElement.setAttribute(WIDTH, Integer.toString(window1.getWidth()));\n                windowElement.setAttribute(HEIGHT, Integer.toString(window1.getHeight()));\n                windowElement.setAttribute(DISPLAY, Boolean.toString(!window1.isClosed()));\n                if (window1 instanceof ToolWindow) {\n                    windowElement.setAttribute(TYPE, TOOL);\n                    windowElement.setAttribute(NAME, ((ToolWindow) window1).getToolName());\n                } else if (window1 instanceof UnitWindow) {\n                    windowElement.setAttribute(TYPE, UNIT);\n                    windowElement.setAttribute(NAME, ((UnitWindow) window1).getUnit().getName());\n                } else {\n                    windowElement.setAttribute(TYPE, \"other\");\n                    windowElement.setAttribute(NAME, \"other\");\n                }\n            }\n            Unit[] toolBarUnits = window.getUnitToolBar().getUnitsInToolBar();\n            for (Unit toolBarUnit : toolBarUnits) {\n                UnitWindow unitWindow = desktop.findUnitWindow(toolBarUnit);\n                if ((unitWindow == null) || unitWindow.isIcon()) {\n                    Element windowElement = new Element(WINDOW);\n                    internalWindowsElement.addContent(windowElement);\n                    windowElement.setAttribute(TYPE, UNIT);\n                    windowElement.setAttribute(NAME, toolBarUnit.getName());\n                    windowElement.setAttribute(DISPLAY, \"false\");\n                }\n            }\n            File configFile = new File(DIRECTORY, FILE_NAME);\n            if (!configFile.getParentFile().exists()) {\n                configFile.getParentFile().mkdirs();\n            }\n            InputStream in = getClass().getResourceAsStream(\"/dtd/ui_settings.dtd\");\n            IOUtils.copy(in, new FileOutputStream(new File(DIRECTORY, \"ui_settings.dtd\")));\n            XMLOutputter fmt = new XMLOutputter();\n            fmt.setFormat(Format.getPrettyFormat());\n            stream = new FileOutputStream(configFile);\n            OutputStreamWriter writer = new OutputStreamWriter(stream, \"UTF-8\");\n            fmt.output(outputDoc, writer);\n        } catch (Exception e) {\n            logger.log(Level.SEVERE, e.getMessage());\n        } finally {\n            IOUtils.closeQuietly(stream);\n        }\n    }\n", "label": 1, "substitutes": {"getButtonSonido": ["getButtonSonida", "getButtonSonico", "getButtonLeonida", "getButtonDonilo", "getButtonLeonilo", "getButtonLeonico", "getbuttonSonico", "getButtonSonilo", "getButtonDonico", "getButtonLeonido", "getbuttonSonilo", "getButtonDonida", "getbuttonSonido", "getbuttonSonida", "getButtonDonido"], "buttonSonido": ["buttonSynphp", "ButtonSunao", "buttonNorthingo", "buttonSonilo", "positionJonito", "keysonido", "secondSynidable", "buttonNorthida", "secondSonito", "buttonSONila", "labelSonphp", "buttonSonphp", "buttonSONida", "buttonSONphp", "labelSonido", "fieldsonido", "buttonSunata", "buttonsonilo", "buttonBonico", "buttonSynila", "labelSONido", "buttonSoningo", "fieldSonido", "fieldSoningo", "positionSonito", "positionSonilo", "buttonJonida", "buttonDenido", "buttonJonata", "buttonBonardo", "buttonSONico", "buttonSynido", "buttonSynito", "buttonJonico", "buttonson\u00ed", "keySonardo", "buttonSonardo", "buttonSunao", "fieldsonida", "positionSonido", "buttonBonido", "buttonBonida", "positionJonilo", "buttonSunito", "buttonSonano", "buttonJonilo", "buttonBoningo", "buttonsonida", "ButtonSonao", "buttonJonicho", "labelSONila", "buttonBonano", "positionSonico", "buttonDenicho", "buttonNorthano", "buttonSonito", "buttonsonido", "keysonilo", "labelSonila", "secondSonidable", "ButtonSonico", "labelSONida", "fieldsonano", "buttonSunilo", "secondSynito", "keySonido", "ButtonSunata", "ButtonSonata", "buttonSunido", "secondSynicho", "keySonilo", "keyson\u00ed", "keySon\u00ed", "buttonJonidable", "buttonsoningo", "buttonHonilo", "ButtonSunido", "fieldsoningo", "buttonSONilo", "secondSonido", "buttonJonito", "buttonSonata", "buttonBonilo", "buttonSynidable", "positionJonido", "buttonSynida", "labelSONphp", "ButtonSonido", "buttonNorthido", "buttonBon\u00ed", "buttonBonao", "buttonSonico", "buttonHonido", "secondSonicho", "labelSonida", "buttonsonardo", "buttonSONito", "buttonSunico", "positionJonico", "buttonJonphp", "ButtonSunico", "buttonSonidable", "buttonJonila", "buttonSONido", "buttonBonata", "buttonsonano", "buttonSynicho", "buttonDenito", "buttonSon\u00ed", "buttonDenidable", "buttonHonardo", "buttonJonao", "secondSynido", "buttonSonila", "keysonardo", "buttonSonicho", "buttonJonido", "buttonHon\u00ed", "fieldSonida", "fieldSonano", "buttonSonao", "buttonSonida"], "e": ["ev", " fe", "ae", " ie", " who", "E", "t", "event", " ge", "te", "ed", "ing", "ese", "ee", "act", "a", " ve", " pe", "pe", " ke", "AE", "ED", "ie", " ate", " sent", "me", "es", "er"], "fc": ["cv", "mac", "mc", "abc", "fl", "ic", "icc", "anc", "fd", "fab", "lf", "conv", "RFC", "ctrl", "lc", "c", "inc", "tf", "isc", "cc", "ifa", "fs", "f", "cf", "fb", "fp", "FC", "dc", "etc", "fn", "nc", "uc", "soc", "fa", "rl", "bf", "fm", "rc", "fi", "WC", "coll", "tc", "ec", "vc", "gc", "pc", "bc", "con", "irc"], "returnVal": ["retVal", " returnval", "returnVAL", "returnValue", " returnValue", " returnVAL", "ReturnVal", "resultVal", "returnval", "resultval", "retval", "Returnval", "ReturnVAL", "retVAL", "ReturnValue", "resultValue", "resultVAL", "retValue"], "file": ["local", "path", "dir", "show", "parent", "io", "resource", "FILE", "channel", "disk", "ile", "File", "output", "url", "time", "fe", "to", "null", "block", "stat", "link", "valid", "f", "uri", "base", "form", "single", "table", "buffer", "format", "page", "message", "files", "get", "user", "create", "fp", "input", "tree", "name", "document", "spec", "template", "http", "data", "source", "image", "handle", "info", "type", "this", "full", "word"], "rutaGlobal": ["redutanGlobal", "rutiGlobal", "rutiRemote", "rutaStatic", "rutoStatic", "rutaglobal", "rutanLocal", "rutiglobal", "rontoGlobal", "rontoDefault", "rutaRemote", "RutoGlobal", "rontoGeneral", "redutaDefault", "rutenStatic", "rutenGlobal", "redutanGeneral", "rutaLocal", "rutoFile", "rutanGeneral", "redutanLocal", "rutoglobal", "rutoGlobal", "rutaFile", "RutoStatic", "rutiFile", "rutiGeneral", "RutoFile", "rutaDefault", "RutaLocal", "rutiDefault", "rutoLocal", "RutaFile", "RutaStatic", "Rutoglobal", "rutanDefault", "RutaRemote", "rutenglobal", "rutiLocal", "rutoRemote", "rutenRemote", "rutenFile", "redutaGlobal", "rutanGlobal", "RutoRemote", "rontoLocal", "rutaGeneral", "redutaGeneral", "redutaLocal", "RutaGlobal", "redutanDefault", "RutoLocal", "rutenLocal", "Rutaglobal", "rutiStatic"], "rutaRelativa": ["rutaRELativo", "rutaRelativo", "rutaRelantiv", "rutaRelATiva", "rutaRelATiv", "rutaRELATiv", "rutaRelantivas", "rutaRELativas", "rutaRELitiv", "rutaRELativa", "rutaRelatiivo", "rutaRELitivo", "rutaRelitivo", "rutaRELATiva", "rutaRelantiva", "rutaRelitiv", "rutaRelATivo", "rutaRelATivas", "rutaRelitivas", "rutaRelatiivas", "rutaRELativ", "rutaRelatiiv", "rutaRELitiva", "rutaRelitiva", "rutaRelatiiva", "rutaRELATivo", "rutaRELATivas", "rutaRelativas", "rutaRELitivas", "rutaRelantivo", "rutaRelativ"], "fis": ["vais", "vois", "dfisa", "flis", " f\u00eds", "dfais", "lf\u00eds", "flys", "fais", "dfois", "fisc", "viss", " fisc", " fiss", "rys", "vis", "flos", "fois", "fiss", "dfiss", "f\u00eds", " fisa", "ros", " fais", "lfiss", "risc", "fisa", "ris", "lfis", "dfis", "lfisa", "flisc", " fys", "fys", "df\u00eds", " fois"], "fos": [" fops", "mows", "fdos", "fios", "fdoss", "woss", "ioss", "vops", "faos", "vows", "woes", "hoses", " foes", " fows", "foss", "woses", "mos", "foes", "ios", "vos", " faos", "fops", "hoss", "iios", "waos", "voes", "wios", "hios", "wos", "fows", "fdaos", "hos", "foses", "fdoes", "mops", "moes", "ioses", " foss"], "canalFuente": ["canallFuestro", "canelFaente", "canallfuestro", "canallfucer", "canalFaante", "canallfuencia", "canalFUente", "canalFuper", "canallFuencia", "canalFuante", "canalFuent", "canalFaent", "canalfuper", "canalFraencia", "canalfuelia", "canalFacer", "canelFuente", "canalfuent", "canalFuelia", "canalFuestro", "canalfuente", "canalfucer", "canallFucer", "canalFuencia", "canalfuestro", "canelFaent", "canalPotencia", "canalfuante", "canalFraente", "canalfuencia", "canallFumelon", "canalPotper", "canalFiente", "canalFaente", "canalFraper", "canelFuelia", "canallFuente", "canalFiestro", "canallFuper", "canalFaestro", "canalFramelon", "canelFuante", "canallfuente", "canalFucer", "canalfumelon", "canalPotente", "canalFicer", "canelFaelia", "canalFUelia", "canelFaante", "canalFUante", "canallFuent", "canalFumelon", "canallfuper", "canalFient", "canelFuent", "canallfumelon", "canalPotmelon", "canalFUent", "canalFaelia", "canallfuent"], "canalDestino": ["canalsdestina", "canalNegina", "canalDescino", "canalNeginian", "canalOrigine", "canalOrigination", "canalDescina", "canalDescination", "canaldDestine", "canaldestination", "canaldestinian", "canalsDestinian", "canalOrigina", "canaldDestination", "canalDestina", "canalNegino", "canaldOrigino", "canalsdestination", "canaldDestino", "canalNegination", "canalOrigino", "canaldOrigine", "canaldestina", "canaldOrigination", "canaldDestina", "canalsDestino", "canalDestinian", "canalsDestination", "canalsdestinian", "canalDestination", "canalDescine", "canalDestine", "canaldestino", "canalsdestino", "canaldOrigina", "canalsDestina"]}}
{"id1": "659316", "id2": "335223", "code1": "    public static void main(String[] argv) {\n        if (1 < argv.length) {\n            File[] sources = Source(argv[0]);\n            if (null != sources) {\n                for (File src : sources) {\n                    File[] targets = Target(src, argv);\n                    if (null != targets) {\n                        final long srclen = src.length();\n                        try {\n                            FileChannel source = new FileInputStream(src).getChannel();\n                            try {\n                                for (File tgt : targets) {\n                                    FileChannel target = new FileOutputStream(tgt).getChannel();\n                                    try {\n                                        source.transferTo(0L, srclen, target);\n                                    } finally {\n                                        target.close();\n                                    }\n                                    System.out.printf(\"Updated %s\\n\", tgt.getPath());\n                                    File[] deletes = Delete(src, tgt);\n                                    if (null != deletes) {\n                                        for (File del : deletes) {\n                                            if (SVN) {\n                                                if (SvnDelete(del)) System.out.printf(\"Deleted %s\\n\", del.getPath()); else System.out.printf(\"Failed to delete %s\\n\", del.getPath());\n                                            } else if (del.delete()) System.out.printf(\"Deleted %s\\n\", del.getPath()); else System.out.printf(\"Failed to delete %s\\n\", del.getPath());\n                                        }\n                                    }\n                                    if (SVN) SvnAdd(tgt);\n                                }\n                            } finally {\n                                source.close();\n                            }\n                        } catch (Exception exc) {\n                            exc.printStackTrace();\n                            System.exit(1);\n                        }\n                    }\n                }\n                System.exit(0);\n            } else {\n                System.err.printf(\"Source file(s) not found in '%s'\\n\", argv[0]);\n                System.exit(1);\n            }\n        } else {\n            usage();\n            System.exit(1);\n        }\n    }\n", "code2": "    private static void readAndRewrite(File inFile, File outFile) throws IOException {\n        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n        Dataset ds = DcmObjectFactory.getInstance().newDataset();\n        dcmParser.setDcmHandler(ds.getDcmHandler());\n        dcmParser.parseDcmFile(null, Tags.PixelData);\n        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        System.out.println(\"reading \" + inFile + \"...\");\n        pdReader.readPixelData(false);\n        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n        ds.writeDataset(out, dcmEncParam);\n        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n        System.out.println(\"writing \" + outFile + \"...\");\n        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        pdWriter.writePixelData();\n        out.flush();\n        out.close();\n        System.out.println(\"done!\");\n    }\n", "label": 1, "substitutes": {"argv": [" argV", "argp", "argV", "argsV", "argsc", "argm", " argc", "Args", "suppp", "ArgV", " argp", "Argm", "argvs", " argvs", "argss", "Argc", "argsv", "suppvs", "callp", "callV", "suppV", "Argv", "argc", " argm", "argsm", "callvs", "suppv", "callv"], "sources": ["sodes", " sures", "sults", "sloots", "servources", "stources", "tocks", "tiders", "soots", " soots", "tources", " sodes", "sures", "sliders", "toots", "stets", "inults", "sors", "servets", "seodes", "slources", "stors", "stures", "inets", " sults", " socks", "servures", "socks", " siders", " sets", "seources", " sors", "servors", "slocks", "siders", "inources", "inodes", "seults", "seets", "sets"], "targets": ["tassches", "tanges", "Targches", "tangends", "targetens", "toolsarggers", " targens", " tangends", " tangets", " targends", "toolsankgers", " tangens", "toolsargens", "tassets", "topends", "topches", "tokends", "targetsets", "toolsankens", "tankgers", "tasses", "targends", "tassends", "Targets", "toolsargets", "Targends", "Targes", "tangets", "tangches", "tokgers", "targetgers", "topes", "targches", "toolsanksets", "tankens", "toolsargsets", "targens", "tokets", "tangens", "tokes", "topens", " tanges", "Topches", "targsets", "tankets", "toolsankets", "toksets", " targes", "targetets", "Topends", "topets", "Topes", "tokens", "tanksets", "targes", "targgers", "Topets"], "srclen": ["rsccen", "srklogn", "srseln", " srpln", "srccog", "srclog", "srselength", "srklue", "srCLn", " srclength", "srpln", "srselade", "srccen", "srCLength", " srclade", "srccogn", "srselen", "srclength", "srCLade", "rsclue", "srclogn", "rsccog", "srklog", " srplade", "srselue", "rsccogn", "srcln", "srclade", " srplen", "rsccue", "srselog", "srplen", "srCLen", "rsclog", " srplength", "srplade", " srcln", "srclue", "srplength", "srselogn", "srklen", "rsclen", "srccue", "rsclogn"], "source": ["local", "system", "scan", "search", "match", "force", "file", "sequence", "site", "parent", "src", "resource", "store", "wrapper", "start", "internal", "context", "service", "SOURCE", "select", "style", "copy", "scale", "reader", "from", "null", "query", "ource", "scope", "inner", "secure", "status", "console", "link", "iter", "trace", "set", "buffer", "Source", "sp", "s", "root", "get", "create", "input", "template", "score", "sys", "me", "escape", "ser", "cache", "standard", "info", "this"], "tgt": ["targ", "wgt", "Tgt", "sttarget", "ttarget", "teht", "ngn", "Targ", "npt", "Target", "Tht", "itgt", "itarget", "ittarget", "stgt", "ngt", " ttarget", "tpt", "wtarget", "tearg", "tegt", "tetarget", "tgn", " tht", " targ", "tearget", " tpt", "warg", "starg", "warget", "tept", "tht", " tgn", "itht", "itarg", "nht", "starget", "tegn"], "target": ["local", "localhost", "path", "match", "proxy", "member", "Target", "parent", "resource", "channel", "wrapper", "stable", "internal", "child", "dest", "output", "trap", "manager", "owner", "copy", "to", "goal", "null", "inter", "gt", "link", "rel", "base", "trace", "table", "buffer", "out", "tmp", "touch", "writer", "template", "sys", "arget", "secondary", "pointer", "top", "socket", "mask", "peer", "ARGET", "next", "handler", "bolt"], "deletes": ["dellets", "deels", "dules", "Deletes", "Deles", "Deels", "duels", "seles", "desets", "lelets", "duleted", "duges", "Deleted", "deges", "desves", "delletes", "deleted", "delets", "seletes", "seleted", "seels", "leves", "desges", "deets", "leletes", "deves", "dleted", "desletes", "leets", "duletes", "desleted", "delves", "dulets", "deles", "dletes", "dges", "dlets", "deslets"], "del": ["err", "dec", "dr", "elt", "des", "delete", " dele", "pel", "nl", "kl", "nt", "ls", "compl", "tl", "inv", "rem", "re", "len", "dl", "bl", "ll", "pl", "md", "col", "dis", "ele", "syn", "def", "rel", "cl", "Del", "sel", "let", "vet", "rol", "le", "rl", "dem", "el", "tr", "l", "els", "ne", "de", "cel", "se"]}}
{"id1": "13852596", "id2": "4118412", "code1": "    public void execute() {\n        try {\n            if (methods == null) {\n                return;\n            }\n            List<Resource> resources = new ArrayList<Resource>();\n            for (Iterator<Resource> i = classFiles.iterator(); i.hasNext(); ) {\n                final Resource classFile = i.next();\n                if (!classFile.getName().equals(CALLSTACK_FILE)) {\n                    try {\n                        InputStream inputStream = classFile.getInputStream();\n                        ClassReader reader = new ClassReader(inputStream);\n                        reader.accept(new MethodAnalyzer(), 0);\n                        resources.add(classFile);\n                        oldSize += classFile.getSize();\n                    } catch (IllegalStateException e) {\n                    }\n                }\n            }\n            for (Iterator<Resource> i = resources.iterator(); i.hasNext(); ) {\n                final Resource classFile = i.next();\n                try {\n                    InputStream inputStream = classFile.getInputStream();\n                    ClassReader reader = new ClassReader(inputStream);\n                    ClassWriter writer = new ClassWriter(reader, ClassWriter.COMPUTE_MAXS);\n                    if (!classFile.getName().startsWith(CALLSTACK_FILE.substring(0, CALLSTACK_FILE.indexOf('.')))) {\n                        reader.accept(new MethodInjector(writer), 0);\n                        byte[] b = writer.toByteArray();\n                        inputStream.close();\n                        OutputStream outputStream = classFile.getOutputStream();\n                        outputStream.write(b);\n                        outputStream.close();\n                        injectedClasses++;\n                    }\n                } catch (IllegalStateException e) {\n                }\n                newSize += classFile.getSize();\n            }\n            File classFile = new File(classFiles.getDir(), CALLSTACK_FILE);\n            if (!classFile.exists()) {\n                throw new BuildException(\"Missing net.yura.mobile.logging.CallStack class\");\n            }\n            InputStream inputStream = new FileInputStream(classFile);\n            ClassReader reader = new ClassReader(inputStream);\n            ClassWriter writer = new ClassWriter(reader, ClassWriter.COMPUTE_MAXS);\n            try {\n                reader.accept(new PushMethodGenerator(writer), 0);\n            } finally {\n                inputStream.close();\n            }\n            byte[] b = writer.toByteArray();\n            inputStream.close();\n            OutputStream outputStream = new FileOutputStream(classFile);\n            outputStream.write(b);\n            outputStream.close();\n            log(injectedClasses + \" classes injected\");\n            log((injectedMethods * 100) / Math.max(1, totalMethods) + \"% of methods injected\");\n            log((100 - ((oldSize * 100) / newSize)) + \"% code size increase\");\n        } catch (IOException e) {\n            log(e, 0);\n        }\n    }\n", "code2": "    private void compress(String outputFile, ArrayList<String> inputFiles, PrintWriter log, boolean compress) throws Exception {\n        String absPath = getAppConfig().getPathConfig().getAbsoluteServerPath();\n        log.println(\"Concat files into: \" + outputFile);\n        OutputStream out = new FileOutputStream(absPath + outputFile);\n        byte[] buffer = new byte[4096];\n        int readBytes;\n        for (String file : inputFiles) {\n            log.println(\" Read: \" + file);\n            InputStream in = new FileInputStream(absPath + file);\n            while ((readBytes = in.read(buffer)) != -1) {\n                out.write(buffer, 0, readBytes);\n            }\n            in.close();\n        }\n        out.close();\n        if (compress) {\n            long normalSize = new File(absPath + outputFile).length();\n            ProcessBuilder builder = new ProcessBuilder(\"java\", \"-jar\", \"WEB-INF/yuicompressor.jar\", outputFile, \"-o\", outputFile, \"--line-break\", \"4000\");\n            builder.directory(new File(absPath));\n            Process process = builder.start();\n            process.waitFor();\n            long minSize = new File(absPath + outputFile).length();\n            long diff = normalSize - minSize;\n            double percentage = Math.floor((double) diff / normalSize * 1000.0) / 10.0;\n            double diffSize = (Math.floor(diff / 1024.0 * 10.0) / 10.0);\n            log.println(\"Result: \" + percentage + \" % (\" + diffSize + \" KB)\");\n        }\n    }\n", "label": 1, "substitutes": {"execute": ["evaluate", " release", " perform", "process", "construct", " chain", " sweep", " deploy", " evaluate", "run", " scan", " assemble", " proceed", " executed", " test", " execution", " launch", " executable", " benchmark", "init", " inherit", " resolve", " replay", " exec", "exec", " eval", "launch"], "resources": ["stores", "bytes", "results", "packages", "builders", "objects", "resource", "modules", "groups", "ids", "artifacts", "blocks", "reports", "users", "rs", "names", "these", " Resources", "images", "res", "projects", "banks", "accessible", "workers", "Resources", "ports", "pointers", "writers", "models", "locks", "files", "ifiers", "lets", "actions", "relations", "ris", "services", "items", "faces", "flows", "scripts", "uploads", "rows", "issues", "rooms", "they", "types", "apps", "classes", "ions", "archives", "roots"], "i": ["ti", "v", "ji", "I", "h", "li", "gi", "io", "di", "t", "ki", "ii", "e", "in", "\u0438", "j", "phi", "oi", "ri", "mi", "si", "ini", "ex", "mu", "iu", "ios", "pi", "ci", "ims", "cli", "bis", "multi", "q", "xi", "ali", "iri", "ij", "abi", "im", "ai", "list", "l", "ir", "ip", "hi", "g", "info", "ui", "ori", "bi", "ami", "ia"], "classFile": ["attributeEntry", "classDirectory", " classFILE", "ClassFilename", "clTree", "classResource", "parentFILE", "classSourceFile", "clFiles", "userFILE", "classfile", "classifiedfile", "recordFilename", "targetFILE", " classDirectory", "typeFile", "ClassLine", "classFilename", "instanceFiles", "connectionSourceFile", "Classfile", "ClassDirectory", "classChain", "connectionFILE", " classResource", "attributeChain", "classFILE", " classFilename", "attributeFile", "ClassFILE", " classChain", "connectionfile", "ClassFile", "clFile", " classLine", "typeFILE", "connectionFile", "attributeResource", "attributeFILE", "classEntry", "sourceFILE", " classEntry", "targetSourceFile", " classFiles", "fastFILE", "targetFile", "cellClass", "objectFile", "instanceFile", "sourceFile", " classFolder", " classSourceFile", "parentFile", "parentSourceFile", "typeLine", "classClass", "recordFiles", "targetFiles", "userFiles", "ClassResource", "attributeFiles", "cellFile", "classTree", "fastFiles", "classifiedFile", "classifiedFILE", " classClass", "ClassEntry", "classifiedSourceFile", "userfile", "ClassFiles", "classFolder", "userFile", "classLine", "instanceDirectory", "fastFile", "objectFolder", "parentfile", "ClassTree", "sourceClass", "instanceFilename", "sourceFiles", "cellFolder", "recordfile", "ClassChain", "classifiedFiles", "recordFile", "ClassClass", "ClassSourceFile", "classFiles", "fastfile", "objectClass", " classfile", "clfile", "typeFiles", " classTree"], "inputStream": ["errorstream", "InputSteam", "inputSource", "outSt", "inputstream", "jsonSteam", "inputStreamer", "innerStream", "familyStyle", " inputstream", "outputSteam", "inStreamer", "outStreamer", "Inputstream", "inputMode", "inputFile", "outputFile", "inPort", "jsonSet", "inputPort", "audioSt", "InputMode", "innerSteam", "errorSteam", "inputSet", "thisSteam", "jsonStreamer", "instream", "thisFile", "outSteam", "ipSteam", " inputSt", "inStream", "errorMode", "familyFile", "inputSteam", " inputMode", "jsonStream", "inSet", "outputTime", "outStream", " inputSteam", "ipStream", "errorStream", "inSteam", "familyStream", "outputstream", "outputPort", "inputTime", "ipFile", " inputStreamer", "audioStream", "thisStream", "familySteam", "innerSet", "InputTime", " inputPort", "innerStreamer", "ipStyle", "inputStyle", "outputStyle", " inputSource", "inputSt", "InputStream", " inputTime", " inputFile", "audioStreamer", "thisSource", "audioSteam", "familySource"], "reader": ["master", "dr", "layer", "definition", "field", "variable", "ger", "wrapper", "test", "oder", "per", "loader", "ner", "row", "service", "Reader", "review", "manager", "mr", "rule", "owner", "r", "entry", "query", "editor", "inner", "write", "rar", "worker", "instance", "red", "ler", "builder", "runner", "iterator", "penter", "dd", "older", "user", "parser", "read", "document", "client", "readable", "operator", "reading", "Writer", "rer", "key", "rl", "driver", "actor", "finder", "image", "prototype", "peer", "draft", "er", "stream", "handler", "author"], "oldSize": ["olderLength", " oldLength", "oldLength", " oldsize", "OLDLength", "oldersize", "oldFontSize", "OLDsize", " oldFontSize", "oldsize", "olderFontSize", "OLDFontSize", "olderSize", "OLDSize"], "writer": ["player", "weight", "written", "definition", "wrote", "riter", "variable", "wrapper", "test", "author", "loader", "ner", "method", "adder", "row", "service", "Reader", "review", "manager", "storage", "walker", "r", "owner", "rw", "editor", "node", "worker", "write", "inner", "ler", "builder", "runner", "writers", "buffer", "penter", "format", "vector", "message", "draw", "parser", "read", "ter", "document", "Writer", "actor", "key", "driver", "writing", "finder", "draft", "buf", "wb", "er", "handler", "entry", "w", "word"], "b": ["d", "v", "batch", "h", "bound", "binary", "p", "nb", "t", "rb", "ab", "bb", "bits", "r", "c", "n", "bit", "a", "m", "ib", "bis", "f", "B", "base", "fb", "br", "sb", "bs", "erb", "emb", "db", "u", "bf", "bp", "l", "ob", "g", "mb", "bin", "wb", "gb", "w"], "outputStream": ["inputPoint", "inputView", "inputstream", "outputForm", "outputSteam", "writeSteam", "resultSteam", "resultStream", " outputView", "OutputForm", "outputString", "resultstream", "writeView", "resultString", "Outputstream", " outputSteam", "outputView", "inputSteam", "outputPoint", " outputString", " outputPoint", "OutputSteam", "writePoint", "resultForm", "inputForm", "outputstream", " outputForm", "writeStream", "OutputStream", "OutputString"], "injectedClasses": ["injectUsets", "injectedCountES", "injectedClassBytes", "injectUsES", "injectedCountBytes", "injectedClassES", "injectedSuccesses", "injectUsBytes", "injectedUsES", "injectClasses", "injectedUsets", "injectClassets", "injectedSuccessets", "injectedCountes", "injectedSuccessES", "injectClassES", "injectUses", "injectedUses", "injectedSuccessBytes", "injectedCountets", "injectedClassets", "injectClassBytes", "injectedUsBytes"], "newSize": ["oldName", "NewFontSize", " newFontSize", "newMax", "oldFontSize", "newFontSize", "NewSize", " newName", "NewName", "NewMax", " newMax", "oldMax", "newName"]}}
{"id1": "6470716", "id2": "12380475", "code1": "    public static void main(String[] args) throws Exception {\n        String st = \"http://www.kmzlinks.com/redirect.asp?id=113&file=HeartShapedIsland.kmz\";\n        URL url = new URL(st);\n        InputStream fis = null;\n        if (\"file\".equals(url.getProtocol())) fis = new FileInputStream(url.getFile()); else if (\"http\".equals(url.getProtocol())) fis = url.openStream();\n        ZipInputStream zis = new ZipInputStream(fis);\n        ZipEntry entry;\n        while ((entry = zis.getNextEntry()) != null) {\n            System.out.println(\"Extracting: \" + entry);\n            int count;\n            byte data[] = new byte[BUFFER];\n            FileOutputStream fos = new FileOutputStream(entry.getName());\n            BufferedOutputStream dest = new BufferedOutputStream(fos, BUFFER);\n            while ((count = zis.read(data, 0, BUFFER)) != -1) dest.write(data, 0, count);\n            dest.flush();\n            dest.close();\n        }\n        zis.close();\n    }\n", "code2": "    public void transport(File file) throws TransportException {\n        if (file.exists()) {\n            if (file.isDirectory()) {\n                File[] files = file.listFiles();\n                for (int i = 0; i < files.length; i++) {\n                    transport(file);\n                }\n            } else if (file.isFile()) {\n                try {\n                    FileChannel inChannel = new FileInputStream(file).getChannel();\n                    FileChannel outChannel = new FileOutputStream(destinationDir).getChannel();\n                    inChannel.transferTo(0, inChannel.size(), outChannel);\n                } catch (IOException e) {\n                    log.error(\"File transfer failed\", e);\n                }\n            }\n        }\n    }\n", "label": 1, "substitutes": {"st": ["ast", "d", "ust", "St", "ste", "step", "ld", "str", "sw", "ost", "store", "std", "start", "stable", "sm", "t", "service", "stra", "ist", "nd", "ST", "sth", "sta", "set", "sp", "sty", "est", "th", "ft", "rt", "www", "sts", "rest", "inst", "tt", "stri", "stream", "sh", "sn", "se"], "url": ["build", "sl", "gl", "address", "fl", "string", "ret", "Url", "file", "li", "abs", "str", "nl", "mail", "char", "browser", "ls", "shell", "r", "dl", "null", "pl", "ll", "host", "ssl", "html", "location", "link", "f", "uri", "rel", "base", "URL", "cl", "web", "loc", "ur", "ch", "github", "cert", "impl", "client", "bel", "hl", "http", "www", "rest", "addr", "mount", "el", "rect", "l", "domain", "ref", "il", "ul"], "fis": ["feois", "Fos", "Fais", "tais", " fisl", "efis", "flis", " f\u00eds", "xfois", "ufis", "xfis", "fais", "ufisl", "fli", "xfi", "feier", " fiss", "feis", "Fois", " fi", "tos", "tiss", "fois", "fiss", "Fis", "fisl", "fei", "f\u00eds", "efi", "fliss", "ufi", " fais", "ef\u00eds", "Fiss", "efiss", "flisl", "fier", "tis", "fi", "uf\u00eds", "xfier", "ufiss", "Fier", "Fi"], "zis": ["zhIs", "czisa", "zisa", "zhes", "zhis", "zeniss", "zipisin", " zits", "zisin", "ozisa", "zhisin", "fris", "fits", "ozes", "zenris", "ziss", "zos", "zipos", "zisi", " zris", " zos", "zIs", " zisa", "zits", "ozits", "fiss", "ozis", "czis", "zipIs", "zipes", "zris", " zisi", " ziss", "ozIs", "czIs", "ozisin", "fisi", "zipis", "zenis", "czits", "zipits", "zes", " zIs", "zenisi"], "entry": ["system", "jar", "item", "card", "cell", "match", "log", "field", "member", "ce", "Entry", "char", "e", "obj", "event", "nt", "be", "row", "record", "attribute", "index", "way", "null", "word", "office", "pattern", "jo", "zip", "inter", "link", "valid", "def", "form", "result", "zo", "out", "enter", "tmp", "entity", "element", "sp", "ie", "ry", "name", "comment", "line", "source", "key", "or", "chain", "list", "fr", "ent", "info", "existent", "de", "se"], "count": ["err", "force", "cell", "batch", "number", "match", "ctr", "ount", "amount", "nb", "length", "char", "t", "start", "nt", "num", "child", "max", "current", "total", "len", "call", "index", "c", "n", "check", "code", "cc", "base", "iter", "ct", "buffer", "page", "counter", "end", "found", "acc", "ch", "core", "read", "ind", "name", "Count", "comment", "cont", "add", "sum", "depth", "last", "size"], "data": ["text", "d", "sample", "bytes", "batch", "number", "ata", "dat", "string", "step", "part", "length", "output", "good", "n", "mu", "block", "mem", "area", "reason", "def", " DATA", "buffer", "table", "message", "result", "format", "raw", "out", "all", "name", "zero", "source", "value", "image", "chain", "done", "DATA", "cache", "json", "next", "buf", "bin", "size"], "fos": ["Fos", "fooss", "fios", "woss", " fOS", "fol", "Fops", "foss", "wOS", "fiol", "fioss", "his", "fops", "hoss", "Fol", "foops", "foos", "wis", "hos", "fOS", "fiops", "hOS", "fool", "wos", " foss", "Foss"], "dest": ["master", "send", "foreign", "trans", "them", "decl", "dat", "des", "member", "parent", "gate", "crit", "src", "cat", "test", "std", "Dest", "nt", "gest", "ptr", "temp", "nd", "output", "target", "pipe", "pas", "nom", "way", "mem", "det", "desc", "comp", "loc", "out", "est", "result", "usr", "writer", "exp", "transfer", "dist", "source", "cont", "rest", "done", "comb", "sum", "bin", "origin", "coord", "dc"]}}
{"id1": "17999474", "id2": "19912848", "code1": "    private static File getZipAsFile(DigitalObject digOb) {\n        String folderName = randomizeFileName(getFolderNameFromDigObject(digOb));\n        File tmpFolder = new File(utils_tmp, folderName);\n        File zip = null;\n        try {\n            FileUtils.forceMkdir(tmpFolder);\n            zip = new File(tmpFolder, getFileNameFromDigObject(digOb, null));\n            FileOutputStream out = new FileOutputStream(zip);\n            IOUtils.copyLarge(digOb.getContent().getInputStream(), out);\n            out.close();\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return zip;\n    }\n", "code2": "    public static boolean decodeFileToFile(String infile, String outfile) {\n        boolean success = false;\n        java.io.InputStream in = null;\n        java.io.OutputStream out = null;\n        try {\n            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);\n            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n            byte[] buffer = new byte[65536];\n            int read = -1;\n            while ((read = in.read(buffer)) >= 0) {\n                out.write(buffer, 0, read);\n            }\n            success = true;\n        } catch (java.io.IOException exc) {\n            exc.printStackTrace();\n        } finally {\n            try {\n                in.close();\n            } catch (Exception exc) {\n            }\n            try {\n                out.close();\n            } catch (Exception exc) {\n            }\n        }\n        return success;\n    }\n", "label": 1, "substitutes": {"getZipAsFile": ["getBoxAsfile", "getZipInfile", "getZipAsPath", "getZipFromLocal", "getZipAsLocal", "getBoxFromFile", "getBoxAsPath", "getBoxFromPath", "getZipToPath", "getZipFromFile", "getZipInLocal", "getZipAsfile", "getZipFromPath", "getZipTofile", "getBoxFromfile", "getZipInPath", "getZipInFile", "getZipFromfile", "getBoxAsFile", "getZipToLocal", "getZipToFile", "getBoxAsLocal", "getBoxFromLocal"], "digOb": [" digOB", "divObject", " digOcc", " digObj", "DigOB", "digOcc", "DigOcc", "DigOb", "digObject", "divObj", "DigObj", "chemOB", "DigEx", "chemOb", "gradOB", "chemObj", "gradObject", "digOB", "digEx", "DigObject", "divOb", "digObj", " digObject", " digEx", "gradObj", "chemEx", "gradOb", "divOcc"], "folderName": [" folderNames", "folderPath", "foldNames", "foldName", "foldPath", "Foldername", "folderSize", "FolderNames", "fileNames", "foldname", "FolderName", "FolderPath", " foldername", " folderPath", "folderKey", "fileSize", "foldKey", "fileKey", "fileName", "foldername", " folderKey", "foldSize", " folderSize", "folderNames"], "tmpFolder": ["cmpFolder", "tempDir", "mpDir", "tmpParent", "tmpDirectory", "cmpDir", "mpfolder", " tmpDir", "tmpfolder", " tmpfolder", "mpDirectory", "mpParent", "tempfolder", "tempParent", "tempFolder", "tempDirectory", "mpFolder", "cmpParent", "cmpfolder", " tmpDirectory", "tmpDir"], "zip": ["jar", "tar", "sample", "wrap", "pdf", "lock", "Zip", "bag", "file", "proxy", "sheet", "post", "io", "mail", "test", "z", "zone", "row", "gz", "content", "pack", "entry", "library", "box", "feed", "quote", "link", "csv", "f", "col", "cf", "form", "sp", "tmp", "project", "upload", "exp", "ow", "template", "folder", "report", "drop", "pkg", "install", "xml", "json", "ip", "cloud", "pool", "body", "temp", "sea", "archive", "se"], "out": ["ln", "v", "serv", "cos", "en", "OU", "io", "print", "t", "conv", "up", "in", "aos", "output", "copy", "inv", "flush", "null", "to", "n", "i", "check", "inner", "ex", "write", "res", "auto", "o", "set", "net", "sp", "s", "oss", "tmp", "all", "writer", "OUT", "one", "Out", "list", "ins", "us", "it", "ent", "ou", "outs", "co", "os"]}}
{"id1": "12766394", "id2": "22801734", "code1": "    public void testReadHelloWorldTxt() throws Exception {\n        final InputStream helloWorldIS = this.getClass().getClassLoader().getResourceAsStream(BASE_DIR + \"/HelloWorld.txt\");\n        FileUtils.forceMkdir(new File(this.testDir.getAbsolutePath() + \"/org/settings4j/contentresolver\"));\n        final String helloWorldPath = this.testDir.getAbsolutePath() + \"/org/settings4j/contentresolver/HelloWorld.txt\";\n        final FileOutputStream fileOutputStream = new FileOutputStream(new File(helloWorldPath));\n        IOUtils.copy(helloWorldIS, fileOutputStream);\n        IOUtils.closeQuietly(helloWorldIS);\n        IOUtils.closeQuietly(fileOutputStream);\n        LOG.info(\"helloWorldPath: \" + helloWorldPath);\n        final FSContentResolver contentResolver = new FSContentResolver();\n        contentResolver.setRootFolderPath(this.testDir.getAbsolutePath());\n        byte[] content = contentResolver.getContent(\"org/settings4j/contentresolver/HelloWorld.txt\");\n        assertNotNull(content);\n        assertEquals(\"Hello World\", new String(content, \"UTF-8\"));\n        content = contentResolver.getContent(\"file:org/settings4j/contentresolver/HelloWorld.txt\");\n        assertNotNull(content);\n        assertEquals(\"Hello World\", new String(content, \"UTF-8\"));\n        content = contentResolver.getContent(\"file:/org/settings4j/contentresolver/HelloWorld.txt\");\n        assertNotNull(content);\n        assertEquals(\"Hello World\", new String(content, \"UTF-8\"));\n        content = contentResolver.getContent(\"file:laksjdhalksdhfa\");\n        assertNull(content);\n        content = contentResolver.getContent(\"/org/settings4j/contentresolver/HelloWorld.txt\");\n        assertNotNull(content);\n        assertEquals(\"Hello World\", new String(content, \"UTF-8\"));\n    }\n", "code2": "    private static void setup() throws Exception {\n        String path = Webcam.class.getProtectionDomain().getCodeSource().getLocation().getFile();\n        File jarFile = new File(URLDecoder.decode(path, \"UTF-8\") + \"/Hanasu.jar\");\n        if (!jarFile.exists()) jarFile = new File(\"/home/marc/Virtual Machine/Hanasu.jar\");\n        File f = File.createTempFile(\"tempabca\", \"bdfafad\");\n        f.delete();\n        f.mkdir();\n        String parent = f.getAbsolutePath() + \"/\";\n        byte[] buf = new byte[1024];\n        ZipInputStream zipinputstream = null;\n        ZipEntry zipentry;\n        zipinputstream = new ZipInputStream(new FileInputStream(jarFile));\n        zipentry = zipinputstream.getNextEntry();\n        while (zipentry != null) {\n            String entryName = zipentry.getName();\n            if (entryName.startsWith(\"native\")) {\n                int n;\n                FileOutputStream fileoutputstream;\n                File newFile = new File(parent + entryName);\n                if (zipentry.isDirectory()) {\n                    newFile.mkdirs();\n                    zipentry = zipinputstream.getNextEntry();\n                    continue;\n                }\n                fileoutputstream = new FileOutputStream(newFile);\n                while ((n = zipinputstream.read(buf, 0, 1024)) > -1) fileoutputstream.write(buf, 0, n);\n                fileoutputstream.close();\n                zipinputstream.closeEntry();\n            }\n            zipentry = zipinputstream.getNextEntry();\n        }\n        zipinputstream.close();\n        String arch = \"\";\n        boolean x64 = false;\n        for (String key : keys) {\n            String property = System.getProperty(key);\n            if (property != null) {\n                x64 = (property.indexOf(\"64\") >= 0);\n            }\n        }\n        if (JPTrayIcon.isUnix()) {\n            if (x64) arch = \"linux-amd64\"; else arch = \"linux-x86\";\n        }\n        if (JPTrayIcon.isWindows()) {\n            System.out.println(\"Arch: \" + System.getProperty(\"sun.arch.data.model\"));\n            if (x64 && !System.getProperty(\"sun.arch.data.model\").equals(\"32\")) arch = \"win64-amd64\"; else arch = \"win32-x86\";\n        }\n        if (JPTrayIcon.isMac()) arch = \"macosx-universal\";\n        System.out.println(\"Using native/\" + arch + \"/\");\n        addLibraryPath(parent + \"native/\" + arch + \"/\");\n    }\n", "label": 1, "substitutes": {"testReadHelloWorldTxt": [" testReadHelloWorldItText", " testReadHelloWorldItXT", " testReadHelloWorldTXT", " testReadHelloWorldIttxt", " testReadHelloWorldItxt", " testReadHelloWorldTtxt", " testReadHelloWorldTText"], "helloWorldIS": ["helloWestIS", "helloWorldI", "helloLifeIs", "helloWorldISS", " helloWorldI", " helloWorldISS", "helloWestIs", " helloWorldIs", "helloWorldIs", "helloWorldIC", "helloWestIC", " helloWorldIC", "helloLifeIS", "helloLifeI", "helloLifeISS"], "helloWorldPath": ["helloWorldName", "helloWebPath", "helloWonderName", "helloWorldPos", " HelloWorldPath", " HelloWestName", "helloWorldTemp", " helloWonderPos", " helloWonderPath", " HelloWorldP", " HelloWorldName", " HelloWestPos", "helloWorldP", "helloWestP", "helloWebName", " helloWonderName", " helloWorldTemp", "helloWestPath", "helloWestCh", " HelloWestP", "helloWonderPath", " helloWorldCh", "helloWireTemp", " HelloWestPath", " helloWorldName", "helloWebTemp", "helloWirePath", " helloWonderCh", "helloWonderCh", "helloWestPos", " helloWorldPos", " HelloWorldPos", "helloWorldCh", "helloWonderPos", "helloWestName", "helloWireName"], "fileOutputStream": ["fileoutputPoint", "fileoutputStyle", "fileInputPoint", "fileOutStyle", " fileInputPoint", "fileOUstream", "fileoutputStream", "fileOutputstream", "fileOUStream", " fileInputSt", "fileOutStream", "fileWriteSteam", " fileoutputStream", " fileInputStream", "fileOutputSteam", " fileoutputPoint", "fileOutputStyle", "fileOutSteam", " fileInputSteam", "fileInputStyle", " fileOutputPoint", " fileOutputStyle", "fileWritePoint", " fileOutputstream", "fileInputSt", " fileOutputSteam", "fileWriteStream", "fileoutputSteam", " fileoutputStyle", " fileoutputSteam", "fileInputSteam", "fileOutputPoint", "fileOutputSt", " fileInputStyle", "fileInputStream", "fileOUSt", " fileInputstream", "fileoutputstream", "fileOutPoint", "fileOUSteam", "fileInputstream", " fileOutputSt", "fileoutputSt", "fileWriteStyle"], "contentResolver": ["contentRightolver", " contentRespter", "contentPaloser", "contentSander", "contentRESistor", "contentPosolved", "contentPosolution", "contentJsoser", "contentSerolution", "ContentResol", "contentRightolution", "ContentResolver", "contentJspter", "contentPalolver", "contentresolve", "contentSolution", "contentresolver", "contentPalolution", "commentReserver", "contentresolved", "Contentresol", "contentResolved", "contentPosiper", "contentresinter", "contentResolution", "commentPoserver", "Contentresolving", " contentresoser", "entityRESinter", "contentRESiper", "contentRESurer", "commentResiper", "contentPalpter", " contentResolved", "contentresolution", "ContentResolving", " contentresolver", "ContentResolve", "contentresreader", "entityRESolver", "contentParolver", " contentResoser", "imageResolver", "contentResolve", "entityResinter", "contentSeriper", " contentresolved", "entityResolution", "contentResolving", "contentSolver", "Contentresolver", "contentParreader", "imageResurer", "entityResolver", " contentresolution", "contentResol", "contentSererver", " contentrespter", "commentPosolver", "contentresoser", "contentresolving", "contentResurer", "contentRESreader", "imageRESurer", "imageRESistor", "contentRESolution", " contentResolution", "contentPosolver", "commentPosolution", "contentResoser", "contentRespter", "contentResreader", " contentResinter", "contentRESander", "contentParolution", "contentRightinter", "contentPalurer", "contentResourceistor", " contentResistor", "imageResolution", "contentREServer", "contentResistor", "commentPosiper", "contentResander", "entityRESolution", "commentResolution", "contentSerolver", "entityRESreader", "contentJsolver", "commentResolver", "contentParinter", "Contentresolve", "contentJsolution", "contentrespter", "contentPosinter", "imageRESolution", "imageResistor", "imageRESolver", " contentresinter", " contentResander", "contentPalistor", "contentresol", "contentResourceurer", "contentResourceolution", "contentResourceolver", "entityResreader", "contentResinter", "contentPoserver", "contentRESinter", "contentRESolver", "contentReserver", "contentSistor", "contentResiper", "contentRightolved"], "content": ["search", "description", "wrapper", "Content", "output", "here", "good", "twitter", "core", "never", "document", "media", "comment", "load", "mask", "right", "full", "edit", "command", "filter", "ez", "txt", "ce", "ontent", "temp", "c", "ext", "query", "status", "html", "valid", "example", "raw", "lead", "activity", "read", "template", "zero", "data", "image", "metadata", "quest", "handle", "draft", "cmd", "tx", "body", "address", "contact", "cell", "magic", "parent", "history", "current", "section", "null", "inner", "code", "message", "entity", "page", "result", "cont", "value", "report", "cache", "xml", "layout", "sequence", "any", "resource", "context", "time", "act", "condition", "article", "reason", "config", "expression", "padding", "format", "version", "empty", "controller", "info", "continue"]}}
{"id1": "22708533", "id2": "20310134", "code1": "    public static void insertDocumentToURL(String file, String target) throws IOException {\n        InputStream is = null;\n        OutputStream os = null;\n        try {\n            is = new FileInputStream(file);\n            final URL url = new URL(target);\n            final URLConnection connection = url.openConnection();\n            os = connection.getOutputStream();\n            TestTools.copyStream(is, os);\n        } finally {\n            if (is != null) {\n                is.close();\n            }\n            if (os != null) {\n                os.close();\n            }\n        }\n    }\n", "code2": "    public static void copyFile(File in, File out) throws IOException {\n        FileChannel inChannel = new FileInputStream(in).getChannel();\n        FileChannel outChannel = new FileOutputStream(out).getChannel();\n        try {\n            inChannel.transferTo(0, inChannel.size(), outChannel);\n        } catch (IOException e) {\n            throw e;\n        } finally {\n            if (inChannel != null) inChannel.close();\n            if (outChannel != null) outChannel.close();\n        }\n    }\n", "label": 0, "substitutes": {"insertDocumentToURL": [" copyDocumenttoFile", " copyDocumentFromUrl", " copydocumentToURI", " copydocumentToFile", " copyDocumenttoUrl", " copyDocumentToFile", " copydocumentToUrl", " copyDocumenttoURI", " copyDocumentToUrl", " copydocumenttoURL", " copyDocumentFromURL", " copyDocumentAsFile", " copydocumentToURL", " copyDocumenttoURL", " copyDocumentFromURI", " copydocumenttoFile", " copyDocumentAsUrl", " copydocumenttoURI", " copyDocumentToURL", " copydocumenttoUrl", " copyDocumentFromFile", " copyDocumentToURI", " copyDocumentAsURL", " copyDocumentAsURI"], "file": ["local", "where", "path", "sample", "place", "string", "fil", "log", "resource", "FILE", "ile", "File", "from", "work", "filename", "rule", "attribute", "check", "title", "valid", "f", "base", "table", "message", "doc", "input", "name", "document", "data", "source", "le", "image", "default", "full", "origin", "command"], "target": ["local", "Target", "back", "replace", "print", "component", "remote", "join", "update", "dest", "select", "view", "to", "scope", "alias", "pattern", "host", "arg", "link", "location", "valid", "base", "rel", "table", "result", "root", "project", "template", "arget", "source", "home", "top", "window", "layout", "ARGET", "this", "origin"], "is": ["iss", "vs", "isl", "abs", "ics", "ism", "isa", "ists", "sis", "xs", "mis", "ais", "iris", "ri", "si", "bits", "mos", "mi", "rs", "vis", "i", "ios", "has", "cs", "obs", "ims", "ci", "bis", "fs", "es", "dis", "ns", "IS", "ms", "bs", "est", "lis", "oss", "ois", "its", "\u00eds", "isin", "ris", "ains", "im", "isf", "tis", "Is", "ins", "nis", "ir", "ip", "us", "it", "isal", "isi", "isc", "iso", "ys"], "os": ["ks", "cos", "oses", "bos", "oos", "et", "oes", "des", "uts", "ost", "io", "ose", "eps", "ot", "mot", "ox", "OS", "aos", "ows", "mos", "tes", "ts", "ols", "ios", "obs", "bis", "ns", "o", "ps", "ros", "ms", "osi", "acs", "los", "oss", "oS", "bs", "oin", "out", "ops", "ones", "none", "asis", "mes", "sys", "Os", "nos", "dos", "ins", "pos", "us", "osa", "css", "ori", "es", "ss", "oa"], "url": ["address", "Url", "str", "nl", "channel", "char", "t", "service", "ls", "open", "re", "r", "cp", "n", "ll", "host", "https", "ssl", "link", "location", "f", "uri", "rel", "URL", "job", "web", "net", "ur", "conn", "user", "cert", "name", "client", "http", "mount", "l", "domain", "con", "ul"], "connection": ["description", "number", "communication", "resource", "channel", "cone", "t", "closure", "position", "ion", "opening", "service", "still", "open", " Connection", "Connection", "network", "creation", "c", "n", "entry", "relation", "condition", "session", "close", "link", "city", "uri", "net", "connect", "result", "using", "conn", "database", "reference", "client", "document", "generation", "application", "pointer", "response", "l", "established", "character", "con", "command"]}}
{"id1": "13757855", "id2": "11716816", "code1": "    public void process(@NotNull Template tpl, @NotNull Document model, @NotNull String packageName, @NotNull String outFileName, Map<String, String> xsltParam, String artifact) throws ModelGenerationException {\n        System.out.print(\"Processing with \" + tpl);\n        String destinationPath;\n        switch(tpl.destination) {\n            case target:\n                if (tpl.path == null) {\n                    destinationPath = where.buildDir + separatorChar + \"generated-sources\" + separatorChar + GENERATION_TARGET;\n                } else {\n                    destinationPath = where.buildDir;\n                }\n                break;\n            case source:\n                if (tpl.path == null) {\n                    destinationPath = where.sourceDir;\n                } else {\n                    destinationPath = \"src\";\n                }\n                break;\n            case redora:\n                destinationPath = where.redoraDir;\n                break;\n            default:\n                throw new IllegalArgumentException(\"Unused destination \" + tpl.destination);\n        }\n        if (tpl.path == null) {\n            if (tpl.destination == Destination.redora) destinationPath += separator + artifact; else destinationPath += separator + packageName.replace('.', separatorChar);\n        } else {\n            destinationPath += separator + tpl.path.replace('/', separatorChar).replace('\\\\', separatorChar);\n        }\n        System.out.println(\" to \" + destinationPath + \"...\" + outFileName);\n        if (tpl.destination == Destination.source) {\n            if (new File(destinationPath, outFileName).exists()) {\n                System.out.println(\"Stub \" + outFileName + \" already exists.\");\n                return;\n            }\n        }\n        new File(destinationPath).mkdirs();\n        InputStream in = null;\n        Writer out;\n        try {\n            out = new FileWriter(new File(destinationPath, outFileName));\n        } catch (IOException e) {\n            throw new ModelGenerationException(\"Can't find: \" + destinationPath + separatorChar + outFileName, e);\n        }\n        switch(tpl.type) {\n            case freemarker:\n                Map<String, NodeModel> root = new HashMap<String, NodeModel>();\n                root.put(\"doc\", NodeModel.wrap(model));\n                try {\n                    freemarker.template.Template template = freemarkerConf.getTemplate(tpl.getTemplateFileName());\n                    template.process(root, out);\n                } catch (ParseException e) {\n                    throw new ModelGenerationException(\"There is an error in template: \" + tpl + \". I found it when generating \" + outFileName, e);\n                } catch (IOException e) {\n                    throw new ModelGenerationException(\"Can't find '\" + tpl + \"' when generating \" + outFileName, e);\n                } catch (TemplateException e) {\n                    throw new ModelGenerationException(\"There is an error in template: \" + tpl + \". I found it when generating \" + outFileName, e);\n                } catch (RuntimeException e) {\n                    throw new ModelGenerationException(\"There is another error while trying this template: \" + tpl + \". I found it when generating \" + outFileName, e);\n                }\n                break;\n            case xslt:\n                try {\n                    in = new FileInputStream(tpl.getAbsolutePath());\n                    xsltTransform(model.getFirstChild(), in, out, xsltParam);\n                } catch (FileNotFoundException e) {\n                    throw new ModelGenerationException(\"Can't find \" + tpl, e);\n                } catch (TransformerException e) {\n                    throw new ModelGenerationException(\"Sorry, i failed to use this template: \" + tpl + \". It broke when generating \" + outFileName, e);\n                } finally {\n                    IOUtils.closeQuietly(in);\n                }\n                break;\n            case copy:\n                try {\n                    in = new FileInputStream(tpl.getAbsolutePath());\n                    IOUtils.copy(in, out);\n                } catch (IOException e) {\n                    throw new ModelGenerationException(\"File copy failed \" + tpl.getTemplateFileName(), e);\n                } finally {\n                    IOUtils.closeQuietly(in);\n                }\n        }\n        IOUtils.closeQuietly(out);\n    }\n", "code2": "    private void updateFile(File file) throws FileNotFoundException, IOException {\n        File destFile = new File(file.getPath().replace(URL_UNZIPPED_PREFIX + latestVersion, \"\"));\n        FileChannel in = null;\n        FileChannel out = null;\n        try {\n            if (!destFile.exists()) {\n                destFile.getParentFile().mkdirs();\n                destFile.createNewFile();\n            }\n            in = new FileInputStream(file).getChannel();\n            out = new FileOutputStream(destFile).getChannel();\n            in.transferTo(0, in.size(), out);\n        } finally {\n            if (out != null) out.close();\n            if (in != null) in.close();\n        }\n    }\n", "label": 1, "substitutes": {"process": ["build", "filter", "apply", "step", "replace", "transform", "render", "processor", "run", "call", "write", "loop", "format", "project", "Process", "parse", "create", "processing", "load", "save", "add", "execute", "handle", "task", "proc", "display"], "tpl": ["templ", "timpl", "tmbl", "stplug", " tPL", "tpr", "tmpp", " tph", "tspl", "temPL", "stplate", "tmPL", "typl", "stpl", "otld", "tPL", "ttph", "Tph", "ttpl", "Tpl", "tuple", " tld", "Tplate", "ttopl", "turtle", " tpp", "TPL", "timplug", "stspl", "itplate", "ttbl", "otplate", "ttPL", " tplate", "atpl", "atplate", "tplug", " tplates", " tuple", "Tspl", "terpl", "otpl", "tph", "Tbl", "stopl", "terplate", "tsbl", "timplate", "ttplug", "ptbl", "tmpl", "topl", "tld", "tspr", "itpl", "stpg", " turtle", "tsPL", "Tplates", "otbl", "timbl", "tempr", "ptpl", "tpg", "tmplate", "ttpg", "itPL", " tbl", "tyurtle", "Tpp", "Tpr", "tyPL", "tembl", "tplates", "itbl", "stbl", "ptld", "timspl", "timpg", "terld", "tbl", "Tld", "tsurtle", "ptplates", "timopl", "tmplates", "teruple", "tpp", "tplate", "atuple", "atld"], "model": ["module", "log", "file", "parent", "Model", "record", " Model", "content", "product", " models", "node", "m", "html", "md", "base", "models", "project", "M", "ml", "tree", "document", "object", "data", "el", "Document"], "packageName": ["viewname", "PackageClass", "packageClass", "groupName", " packagename", "pkgNames", "PackageRoot", "pkgVersion", " packageClass", " packageFamily", "viewRoot", "groupVersion", "packageVersion", " packageRoot", "groupFamily", "packageRoot", "groupNames", "pkgName", "packagename", "viewClass", "PackageName", "Packagename", "packageFamily", " packageVersion", " packageNames", "pkgFamily", "viewName", "packageNames"], "outFileName": ["outFilenameChain", "outStreamNames", "infileNames", "outFileChain", "outfileNames", "outFileNames", "outDirPath", " outFilenamePath", "outStreamName", "outFileType", " outTableName", "outfileType", "outFPath", " outFileTime", "inFileType", "outStreamPath", " outFilenameSize", "outTableName", "outfileChain", "infilePath", " outfileNames", "outFilenameType", "outTableTime", " outfilename", "outTableChain", "outTableType", "outFNames", "outTablename", "outFilenamename", " outFilenamename", "outImagePath", "outFileTime", "outImageName", " outFileNames", " outFileType", " outTablePath", "outFilename", "outTablePath", "inFileNames", "outFilenameSize", "outfileTime", " outTableTime", " outFilePath", "outFname", "outFilenameTime", "outFName", " outFileChain", "outImageSize", " outFilenameType", "outFilePath", " outFileSize", " outTableSize", "outFilenamePath", " outfileName", "inFileTime", "outStreamType", "outDirName", " outFilenameChain", "outStreamTime", "outfilePath", "infileTime", " outFilename", "outfileName", "infileName", "outDirTime", "inFileName", "outTableSize", "outImagename", "inFilePath", "outFilenameName", "outFilenameNames", "outfilename", "outFileSize", "outDirSize", "infileType", " outfilePath", " outFilenameName"], "xsltParam": ["xsqlConf", "xsmlParam", "xsslParam", "xsmlConf", "xltParameter", "xmlConf", "xsltParameter", "xltConf", "xmlParameter", "xsslParameter", "xmlParam", "xsslConf", "xsmlParameter", "xsqlParameter", "xltParam", "xsltConf", "xsqlParam"], "artifact": [" artificial", "Artifacts", "partifact", " artificate", "partifacts", "artifacts", "anifact", "arifact", "artificate", "anificial", "anifacts", "ardificial", "ardifact", "artificial", "ardificate", "ardifacts", "anificate", " artifacts", "Artifact", "arifacts"], "destinationPath": ["destificationPath", "destociationDisk", "destventionPath", "destinationInfo", "destinatorpath", "destesticAt", "destinatorHost", "destitutionPoint", "destATIONParent", "destinatedChain", "destitutionpath", "termininerpath", "destinationLocation", "destregationPath", "destinatorPath", "destitutionPath", "destregationpath", "destinationHost", "destigationPath", "destationLocation", "destinationDisk", "destATIONPath", "destinateAt", "destinateTime", "descositoryHost", "delinatePoints", "destinatedPath", "DestinationHost", "identinationChain", "termininationpath", "estinationPart", "DestensionPath", "estionpath", "destinatePath", "estinationKey", "DestificationPath", "identinateChain", "destesticJar", "delinationPoints", "destinatorKey", "descinationPort", "estationDir", "destificationDir", "destinateUrl", "destinationPort", "estinoTime", "delinationPath", "generinatePath", "estinoKey", "DestinationPod", "chaininatedDisk", "identinatePath", "destesticSystem", "desticationTemp", "desticationPath", "descinationHost", "estationPath", "destinationPATH", "delinationLog", "chaininatedDriver", "destATIONHost", "termininationTarget", "DestensionPoint", "desturationpath", "destranceForm", "destinerJar", "generinationSystem", "destinoDir", "delinateLog", "destinationName", "destinationTime", "destinateChain", "generinateSystem", "destinatorInfo", "destinatedNow", "identinateKey", "destinatorPATH", "desturationPath", "DestinationLocation", "destensionPoint", "destinateName", "DestinationTemp", "DestinationUrl", " destociationPath", " destociationTarget", "origininationNow", "destinationDriver", "destinoKey", "destinerTarget", "destationHost", "desturationTarget", "desturationJar", "destinateJar", "destinatedTarget", "estionPATH", "destinatePart", "destacementTime", "descositoryParent", "destinationAt", "destranceLog", "termininationJar", "destionPath", "origininationPath", "estinationTime", "destensionTemp", "destrancePoints", "destationUrl", "DestificationDir", "destinerSystem", "destinerDir", "origininatedForm", "destinerpath", "destinationKey", "destregationTarget", "destinoTime", "destociationDir", "destrancePath", "destinoPoint", "destinoPath", "destationPart", "DestensionTemp", "destinatedInfo", "generinateJar", "destensionHost", "generinationPath", "destinoHost", "destinationSystem", "destociationTarget", "destigationNow", "destinationDir", "desticationPod", "destATIONPort", " destinationTarget", "desticationDir", "destitutionPATH", "destociationForm", "estinationHost", "destensionPod", "delinatePath", "destociationDriver", "destacementName", "destigationChain", "destinateInfo", "destinationLog", "destinationJar", "destificationLocation", "descinationParent", "DestinationPoint", "destinantDir", "destinateSystem", "destinateForm", "estionPath", "descositoryPath", "descinationPath", "destinatedDriver", "estinationPath", "DestensionHost", "destionPATH", "destinationTemp", "DestensionPod", "termininerPath", "estinationDir", "destinationForm", "termininerJar", "destociationPath", "destinationNow", "destinationpath", "delinationForm", "destinateDir", "estinationpath", "delinateForm", "DestificationLocation", " destinationpath", "destinateNow", "destinatedDisk", "destinatorPoint", "destinateKey", "identinationPath", "destinationPart", "destociationPoint", "chaininationHome", "destionPoint", "destociationHome", "estationHost", "identinationInfo", "origininationChain", "generinateAt", "destinationHome", "termininationPath", "destinatedHome", "destinateLocation", "destregationDisk", "destinerHost", "destacementKey", "destinationPod", "destificationUrl", "estationPart", "destinatorPort", "destesticPath", "estinoPath", "DestensionDir", "destventionDisk", "DestinationPath", "origininatedChain", "destinatedKey", " destociationpath", "destinateLog", "destositoryParent", "identinateInfo", "estinationName", "destinoName", "destinationParent", "destinatedForm", "descositoryPort", "origininatedPath", "destinatePoints", "destociationPoints", "destationPath", "destinerPath", "chaininationPath", "destositoryPath", "destinerAt", "estinationPoint", "estinoName", "identinationKey", "destventionDriver", "origininationForm", "destinantTemp", "estionPoint", "destociationLog", "destventionHome", "destensionPath", "DestinationDir", "origininatedNow", "destinerPart", "destigationForm", "destacementPath", "destinateHost", "destinantPod", "destociationpath", "destociationHost", "destinatorChain", "destinationTarget", "chaininatedHome", "destinateTarget", "destositoryPort", "destinatedpath", "destinantPath", "destinationUrl", "generinationAt", "termininerTarget", "destinatorParent", "DestificationUrl", "destionpath", " destinationDisk", "destensionDir", "chaininatedPath", "destinatepath", "destinationPoints", "destositoryHost", "estinationPATH", "destinationPoint", "chaininationDisk", "generinationJar", "destinationChain", " destociationDisk", "chaininationDriver", "destationDir"], "in": ["d", "file", "id", "io", "t", "reader", " IN", "r", "c", "IN", "n", "i", "inner", "m", "f", "o", "din", "doc", "input", "In", "ins", "l", "info", "bin", "w"], "out": ["ln", "err", "os", "v", "log", "file", "p", "io", "ger", "print", "oe", "b", "e", "obj", "nr", "nt", "up", "t", "msg", "aos", "output", "conf", "inv", "gen", "go", "c", "null", "n", "ex", "to", "inner", "write", "res", "outer", "f", "dis", "o", "screen", "net", "s", "raw", "conn", "cn", "ch", "cfg", "all", "gr", "writer", "println", "client", "u", "sys", "OUT", "report", "or", "Out", "list", "ins", "l", "cache", "it", "cmd", "ou", "outs", "can", "co", "con", "w"], "root": ["dir", " roots", "p", "parent", "id", "start", "child", "context", "_", "r", "parents", "Template", "node", "scope", "ok", "m", "initial", "dump", "config", "def", "table", "create", "impl", "tree", "name", "println", "Root", "data", "chain", "group", "json", "de", "graph", "New", "roots", "se"]}}
{"id1": "18433984", "id2": "14464131", "code1": "    protected void doUpload(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        HttpSession reqSession = request.getSession();\n        ArrayList<File> uploadFiles = new ArrayList<File>();\n        LOG.info(\"UploadServlet Upload request received\");\n        if (ServletFileUpload.isMultipartContent(request)) {\n            LOG.debug(\"UploadServlet Received a multipart request.\");\n        } else {\n            LOG.debug(\"UploadServlet Received a non-multipart request.\");\n        }\n        String tempDirName = UUID.randomUUID().toString();\n        File tempUploadDir = new File(adapter.getRootPath() + File.separator + \"temp\" + File.separator + tempDirName);\n        tempUploadDir.getParentFile().mkdir();\n        while (tempUploadDir.exists()) {\n            tempDirName = UUID.randomUUID().toString();\n            tempUploadDir = new File(adapter.getRootPath() + File.separator + \"temp\" + File.separator + tempDirName);\n        }\n        tempUploadDir.mkdir();\n        File attachmentDir = (File) (reqSession.getAttribute(\"up2p:attachdir\"));\n        if (attachmentDir != null) {\n            LOG.info(\"UploadServlet: Copying provided attachment to upload dir from: \" + attachmentDir.getAbsolutePath());\n            tempUploadDir.delete();\n            attachmentDir.renameTo(tempUploadDir);\n            reqSession.removeAttribute(\"up2p:attachdir\");\n        }\n        LOG.info(\"UploadServlet: Using temporary directory: \" + tempUploadDir.getPath());\n        PairList paramMap = null;\n        if (ServletFileUpload.isMultipartContent(request)) {\n            paramMap = getMultipartParameters(request, uploadHandler, LOG, tempUploadDir.getPath());\n            if (paramMap.size() == 0) {\n                LOG.debug(\"UploadServlet Parsed multipart request and \" + \"found no parameters. Parsing as regular\" + \" request instead.\");\n                paramMap = copyParameters(request);\n                LOG.debug(\"UploadServlet Parsed as regular request and found \" + paramMap.size() + \" parameters.\");\n            }\n        } else {\n            paramMap = copyParameters(request);\n        }\n        String communityId = getCurrentCommunityId(request.getSession());\n        String newcommunity = paramMap.getValue(HttpParams.UP2P_COMMUNITY);\n        LOG.debug(\"UploadServlet: Got active community: \" + newcommunity);\n        if (newcommunity != null) {\n            communityId = newcommunity;\n            LOG.debug(\"switching to community\" + communityId);\n        }\n        if (communityId == null || communityId.length() == 0) {\n            LOG.warn(\"UploadServlet Current community ID is missing from\" + \"the user session.\");\n            writeError(request, response, \"The current community is unknown.\" + \" Please select a community before performing \" + \"any actions.\", paramMap);\n            for (File f : tempUploadDir.listFiles()) {\n                f.delete();\n            }\n            tempUploadDir.delete();\n            return;\n        }\n        LOG.info(\"UploadServlet Uploading to community \" + communityId + \".\");\n        uploadFiles.clear();\n        Iterator<String> uploadedFileIter = paramMap.getValues(HttpParams.UP2P_FILENAME);\n        String filename = \"\";\n        try {\n            if (uploadedFileIter.hasNext()) {\n                filename = uploadedFileIter.next();\n            } else {\n                throw new IOException(\"UploadServlet: No up2p:filename parameters were found.\");\n            }\n            if (filename.startsWith(\"file:\")) filename = filename.substring(5);\n            if (filename.length() == 0) {\n                throw new IOException(\"UploadServlet: An empty up2p:filename parameter was submitted.\");\n            }\n            File resourceFile = null;\n            resourceFile = new File(adapter.getStorageDirectory(communityId), filename);\n            File tempResFile = new File(tempUploadDir, filename);\n            if (!tempResFile.exists() && !resourceFile.exists()) {\n                throw new IOException(\"UploadServlet: The uploaded resource could not be found.\");\n            }\n            if ((tempResFile.exists() && resourceFile.exists()) || (tempResFile.exists() && !resourceFile.exists())) {\n                resourceFile = FileUtil.createUniqueFile(resourceFile);\n                LOG.info(\"UploadServlet: Direct upload, copying resource file.\\n\\tOriginal: \" + tempResFile.getPath() + \"\\n\\tNew: \" + resourceFile.getPath());\n                resourceFile.getParentFile().mkdir();\n                FileOutputStream resourceCopyStream = new FileOutputStream(resourceFile);\n                FileUtil.writeFileToStream(resourceCopyStream, tempResFile, true);\n                filename = resourceFile.getName();\n            }\n            LOG.info(\"UploadServlet: resource file name: \" + filename);\n            uploadFiles.add(resourceFile);\n        } catch (IOException e) {\n            LOG.error(\"UploadServlet: \" + e.getMessage());\n            writeError(request, response, e.getMessage(), paramMap);\n            return;\n        }\n        String editResourceId = paramMap.getValue(HttpParams.UP2P_EDIT_RESOURCE);\n        if (editResourceId != null && editResourceId.length() > 0) {\n            LOG.debug(\"UploadServlet: Got edit resource: \" + editResourceId);\n            File editAttach = new File(adapter.getAttachmentStorageDirectory(communityId, editResourceId));\n            if (editAttach.exists() && editAttach.isDirectory()) {\n                LOG.debug(\"UploadServlet: Copying additional attachments from: \" + editAttach.getAbsolutePath());\n                for (File oldFile : editAttach.listFiles()) {\n                    File newFile = new File(tempUploadDir, oldFile.getName());\n                    if (!newFile.exists()) {\n                        LOG.debug(\"UploadServlet: Copying attachment: \" + oldFile.getAbsolutePath() + \" to \" + newFile.getAbsolutePath());\n                        FileOutputStream attachCopyStream = new FileOutputStream(newFile);\n                        FileUtil.writeFileToStream(attachCopyStream, oldFile, true);\n                    } else {\n                        LOG.debug(\"UploadServlet: Attachment \" + newFile.getName() + \" explicitly replaced in new upload.\");\n                    }\n                }\n            }\n        }\n        String batchUploadString = paramMap.getValue(HttpParams.UP2P_BATCH);\n        boolean batchUpload = batchUploadString != null && batchUploadString.length() > 0;\n        if (batchUpload) {\n            LOG.info(\"UploadSerlvet Recieved batch upload request.\");\n            File batchFile = new File(adapter.getStorageDirectory(communityId), uploadFiles.get(0).getName());\n            uploadFiles.clear();\n            LOG.debug(\"UploadServlet resource file stored at: \" + batchFile.getPath());\n            XMLReader reader = TransformerHelper.getXMLReader();\n            reader.setContentHandler(new BatchCopyHandler(communityId, uploadFiles));\n            try {\n                FileInputStream batchInput = new FileInputStream(batchFile);\n                reader.parse(new InputSource(batchInput));\n                batchInput.close();\n            } catch (Exception e) {\n                LOG.error(\"UploadServlet: Error parsing batch upload file.\");\n                LOG.error(\"UploadServlet: \" + e.getMessage());\n                writeError(request, response, \"Uploaded content was not a valid batch resource file.\", paramMap);\n                return;\n            }\n            batchFile.delete();\n            adapter.addNotification(\"Batch file succesfully processed into \" + uploadFiles.size() + \" resources.\");\n        }\n        boolean pushUpload = paramMap.getValue(HttpParams.UP2P_PUSH) != null && paramMap.getValue(HttpParams.UP2P_PUSH).length() > 0;\n        String id = \"\";\n        boolean duplicateResource = false;\n        int uploadCount = 0;\n        for (int i = 0; i < uploadFiles.size(); i++) {\n            LOG.info(\"UploadServlet Publishing resource to WebAdapter: \" + uploadFiles.get(i).getName());\n            try {\n                id = adapter.publish(communityId, new File(uploadFiles.get(i).getName()), tempUploadDir);\n                uploadFiles.remove(i);\n                i--;\n                uploadCount++;\n                LOG.info(\"UploadServlet Resource published with id: \" + id);\n            } catch (IOException e) {\n                LOG.warn(\"UploadServlet IO Error occured in reading the uploaded file: \" + e.getMessage(), e);\n                uploadFilesCleanup(uploadFiles, tempUploadDir);\n                writeError(request, response, \"An error occured in reading the uploaded file: \" + e.getMessage(), paramMap);\n                return;\n            } catch (SAXParseException e) {\n                LOG.warn(\"UploadServlet SAX Parse Error occured in uploaded resource: \" + e.getMessage());\n                String errMsg = \"Invalid XML in the uploaded resource.<br/>\" + e.getMessage() + \"<br/><br/>File location: \" + uploadFiles.get(i).getAbsolutePath() + \"<br/>Line: \" + e.getLineNumber() + \" Column: \" + e.getColumnNumber();\n                uploadFilesCleanup(uploadFiles, tempUploadDir);\n                writeError(request, response, errMsg, paramMap);\n                return;\n            } catch (SAXException e) {\n                LOG.warn(\"UploadServlet Invalid XML in uploaded resource: \" + e.getMessage());\n                String errMsg = \"Invalid XML in uploaded resource<br/><i>\" + e.getMessage() + \"</i><br/>\" + \"File location: \" + uploadFiles.get(i).getAbsolutePath();\n                uploadFilesCleanup(uploadFiles, tempUploadDir);\n                writeError(request, response, errMsg, paramMap);\n                return;\n            } catch (DuplicateResourceException e) {\n                LOG.info(\"UploadServlet Duplicate Resource: \" + e.getResourceId() + \" Community: \" + e.getCommunityId());\n                if (batchUpload) {\n                    if (!duplicateResource) {\n                        adapter.addNotification(\"Warning: Batch upload contained previously published \" + \" resources which have been discarded.\");\n                        duplicateResource = true;\n                    }\n                } else {\n                    uploadFilesCleanup(uploadFiles, tempUploadDir);\n                    String respondWithXml = paramMap.getValue(HttpParams.UP2P_FETCH_XML);\n                    if (respondWithXml != null && respondWithXml.length() > 0) {\n                        writeError(request, response, \"This resource is already shared with resource \" + \" id: \" + e.getResourceId(), paramMap);\n                        return;\n                    }\n                    String redirect = response.encodeURL(\"/overwrite.jsp?up2p:community=\" + e.getCommunityId() + \"&up2p:resource=\" + e.getResourceId());\n                    LOG.info(\"UploadServlet Redirecting to \" + redirect);\n                    RequestDispatcher rd = request.getRequestDispatcher(redirect);\n                    rd.forward(request, response);\n                    return;\n                }\n            } catch (NetworkAdapterException e) {\n                LOG.info(\"UploadServlet Error in the Network Adapter for\" + \" community ID \" + communityId, e);\n                uploadFilesCleanup(uploadFiles, tempUploadDir);\n                writeError(request, response, \"Error in the Network Adapter for this community. <br/>\" + e.getMessage(), paramMap);\n                return;\n            } catch (ResourceNotFoundException e) {\n                LOG.info(\"UploadServlet Error Resource not found \" + e);\n                uploadFilesCleanup(uploadFiles, tempUploadDir);\n                writeError(request, response, \"Error : <br/>\" + e.getMessage(), paramMap);\n                return;\n            }\n        }\n        uploadFilesCleanup(uploadFiles, tempUploadDir);\n        String ajaxRequest = paramMap.getValue(HttpParams.UP2P_XMLHTTP);\n        String respondWithXml = paramMap.getValue(HttpParams.UP2P_FETCH_XML);\n        if (respondWithXml != null && respondWithXml.length() > 0) {\n            response.setContentType(\"text/xml\");\n            PrintWriter out = response.getWriter();\n            out.println(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\");\n            out.println(\"<upload success=\\\"true\\\" >\");\n            out.println(\"<resid>\" + id + \"</resid>\");\n            out.println(\"</upload>\");\n        } else if (ajaxRequest != null && ajaxRequest.length() > 0) {\n            LOG.debug(\"UploadServlet Recieved xmlHttp request, responding with XML\");\n            response.setContentType(\"text/xml\");\n            PrintWriter out = response.getWriter();\n            out.println(\"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\");\n            out.print(\"<resource id=\\\"\" + request.getParameter(HttpParams.UP2P_RESOURCE) + \"\\\" \");\n            if (request.getParameter(HttpParams.UP2P_PEERID) != null) {\n                out.print(\"peerid=\\\"\" + request.getParameter(HttpParams.UP2P_PEERID) + \"\\\" \");\n            }\n            out.println(\"/>\");\n        } else if (batchUpload) {\n            adapter.addNotification(uploadCount + \" resources were succesfully published.\");\n            request.setAttribute(\"up2p.display.mode\", \"view\");\n            String redirect = response.encodeURL(\"/view.jsp?up2p:community=\" + communityId);\n            LOG.info(\"UploadServlet Redirecting to \" + redirect);\n            RequestDispatcher rd = request.getRequestDispatcher(redirect);\n            rd.forward(request, response);\n        } else if (!pushUpload) {\n            request.setAttribute(\"up2p.display.mode\", \"view\");\n            String redirect = response.encodeURL(\"/view.jsp?up2p:resource=\" + id);\n            LOG.info(\"UploadServlet Redirecting to \" + redirect);\n            RequestDispatcher rd = request.getRequestDispatcher(redirect);\n            rd.forward(request, response);\n        }\n        return;\n    }\n", "code2": "    public static void main(String[] args) {\n        try {\n            URL url = new URL(\"http://hostname:80\");\n            URLConnection conn = url.openConnection();\n            for (int i = 0; ; i++) {\n                String headerName = conn.getHeaderFieldKey(i);\n                String headerValue = conn.getHeaderField(i);\n                if (headerName == null && headerValue == null) {\n                    break;\n                }\n                if (headerName == null) {\n                }\n            }\n        } catch (Exception e) {\n        }\n    }\n", "label": 0, "substitutes": {"doUpload": ["defaultTransfer", " doImport", "postImport", "defaultUpload", "defaultupload", " doTransfer", "postTransfer", "postupload", "doTransfer", "doupload", " doupload", "doImport", "defaultImport", "postUpload"], "request": ["point", "necessary", "attribute", "model", "re", "content", "session", "requ", "each", "req", "input", "document", "name", "object", "reset", "key", "forward", "order", "information", "now", "command", "submit", "up", "method", "open", "complete", "access", "query", "instance", "server", "argument", "get", "raw", "create", "art", "reference", "frame", "client", "http", "QUEST", "quest", "du", "address", "subject", "first", "component", "question", "position", "current", "record", "url", "view", "accept", "buffer", "params", "message", "result", "enter", "user", "upload", "un", "application", "report", "xml", "ure", "string", "file", "resource", "such", "context", "begin", "call", "connection", "condition", "initial", "reason", "q", "pass", "Request", "tim", "version"], "response": ["send", "file", "respond", "ce", "onse", "event", "success", "Response", "output", "re", "view", "connection", "session", "res", "write", "status", "message", "sp", "document", "respons", "application", " Response", "report", "image", " responses", "reply", "resp", "state"], "reqSession": ["curSession", "curState", "curS", "reqSocket", "requESSION", "requSocket", " reqS", "questState", "reqS", "requState", "questESSION", "requS", "reqState", "requsession", " reqsession", " reqSite", "requSite", "questSession", "questSocket", "reqSite", "requSession", " reqState", "curSite", "qESSION", " reqSocket", " reqESSION", "qsession", "qSession", "reqsession", "reqESSION"], "uploadFiles": ["transferfiles", "transferResources", "uploadfiles", "inputFiles", "uploadTypes", " uploadResources", "inputResources", "inputTypes", " uploadTypes", "transferTypes", " uploadfiles", "uploadResources", "transferFiles", "inputfiles"], "tempDirName": [" tempFolderPath", "tempFolderPath", "tmpFileNAME", "tempFileToken", "tempRelNAME", "tmpFileName", "tempVerName", " tempDirPath", "tempVerFamily", "tempDIRname", " tempDirDefault", "tempFileDefault", "tempDirPath", " tempFolderDefault", "tempFolderFamily", "tempDirDefault", "tmpDirname", "tempDirNAME", "TempDirname", "tempFileName", "tmpFilename", "tmpDirToken", "TempFolderNAME", "tempRelName", "tempVerNAME", "tempLocName", "tempDIRName", "TempFoldername", "tmpDirNAME", "tempRelname", "tempPathName", "tempDirname", "tempFileFamily", "tempVername", "tempFolderNAME", "tempDirFamily", "tmpDirDefault", "tempLocPath", "tempRelToken", "tmpFileToken", "tmpFileDefault", "tempPathNAME", "TempDirName", "TempDirNAME", "tempFolderDefault", "tempDIRNAME", "tmpDirName", "tempDirToken", "tempFilename", "tempFoldername", "tempFolderName", " tempFolderName", "tempPathDefault", "tempLocDefault", "tempDbDefault", "tempPathname", "tempDIRToken", "TempDirFamily", "tempDbPath", "tempFileNAME", "tempDbName", "TempFolderName", "TempFolderFamily"], "tempUploadDir": ["temActionDir", "tempActDis", "tempDeployFolder", "tempActionDb", "tempuploadDis", "tempUpdateDir", "tempUploadFolder", "tempUploadSys", "tempNewSys", "empuploadD", "tempActDir", "tempUpDir", "tempAttachLock", "tmpUploadDirectory", "tmpUploadSys", "tmpUploadFiles", "tempAttachDirectory", "tempAttachLoc", "empUploadDir", "tempuploadLen", "empAttachLen", "tempDeploydir", "tempNewLock", "tempActionDir", "temUploadDb", "tmpUploadDir", "empUploadLen", "tempActionLoc", "empUploadRel", "tempUpdatedir", "tmpUploadLock", "TempDownloaddir", "tempUpgradeLen", "TempUploadDir", "tmpUpLoc", "tempUpgradeD", "tempUploaddir", "empUploaddir", "tempSaveDir", "tempSaveFiles", "tempAttachRel", "tempuploadLoc", "tempAttachDest", "tmpDownloadDirectory", "tempDeployDb", "tempAttachLen", "tempUploadDb", "tempAttachdir", "tempLoaddir", "tempActionRel", "tempAttachD", "tempDownloadDirectory", "tempDeployDirectory", "tempActionLen", "tempDeployD", "tmpDownloadFolder", "tmpUploadJar", "tempDownloadFolder", "empUploadDest", "tempAttachFiles", "tempUploadD", "tempLoadSys", "tmpDownloadFiles", "tempDownloaddir", "TempUploadDirectory", "tempActdir", "empAttachDir", "empAttachLoc", "tmpUploaddir", "empUploadD", "empuploadDir", "tmpUploadRel", "temUploaddir", "empAttachD", "empAttachDest", "tempuploadD", "tempUploadLen", "tempSaveDirectory", "tempUploadDest", "temActionDb", "tempDownloadDb", "tempUploadDirectory", "TempUploaddir", "tempDeployDest", "TempDownloadDirectory", "temActiondir", "tempUploadRel", "tmpDownloadJar", "tmpAttachdir", "empUploadDis", "tempDeployDir", "temUploadDir", "tempuploaddir", "tempUpdateDis", "tempNewDir", "TempDownloadDir", "tempUpLoc", "tempUploadLock", "tempUpgradeDest", "tempuploadRel", "tempuploadJar", "tmpDownloadDir", "tempuploadFolder", "empAttachRel", "tempAttachSys", "tmpUploadLoc", "tempActD", "tempLoadLock", "empuploaddir", "tempDeployLen", "tempLoadDir", "tempActiondir", "empuploadDis", "tmpUpDir", "tempDownloadFiles", "tempDownloadJar", "tmpAttachSys", "tempUpgradeDir", "tmpAttachLock", "tmpAttachDir", "tempUploadFiles", "tempNewdir", "tempUpdateD", "tempUploadLoc", "tmpUploadFolder", "tempUpRel", "tmpUpRel", "tempAttachDir", "tempUploadJar", "empUploadLoc", "tempDeployJar", "tempuploadDir", "tempUploadDis", "tempDownloadDir", "tempuploadDirectory"], "attachmentDir": ["attignmentdir", "attributeachedDirectory", "attacherDIR", "attestationRect", "attributionFolder", "attmentFolder", "extacherDIR", "attignmentRect", "extacherD", "attacherDir", "extachmentDIR", "attacherD", "attignmentDet", "attachignmentdir", "attmentdir", "attachignmentFolder", "adachmentDet", "attestationDir", "attacherDirectory", "extachmentDir", "attachachmentFolder", "attachableDir", "attachedDir", "attachmentD", "attributeachmentDirectory", "attestationTier", "attmentDir", "attachachmentDIR", "adachmentTier", "attachmentDirectory", "attitutionDir", "attributionDIR", "attachmentDIR", "attachedStr", "attachableDIR", "attributeachmentDir", "attributionDir", "extacherDir", "aditutionTier", "attachmentRect", "attitutionRect", "attignmentDir", "aditutionRect", "attacherStr", "attachableD", "attachingD", "attachignmentDir", "aditutionDet", "attentionDir", "attignmentTier", "attachmentTier", "attitutionTier", "attentionDirectory", "attignmentFolder", "attestationDet", "attributeachedStr", "attmentDIR", "attachingDir", "attachmentDet", "attachmentdir", "attignmentDIR", "extachmentD", "attributeachedDir", "attributeachmentStr", "attachmentFolder", "attachedDirectory", "attachignmentDIR", "attributiondir", "attachmentStr", "attentionStr", "adachmentRect", "attachachmentDir", "attitutionDet", "aditutionDir", "attachingDIR", "attachachmentdir", "adachmentDir"], "paramMap": ["paramMaps", "pixelLock", "aramTable", "paramsap", "permLock", "paramCache", "paramsMap", "fieldMap", " paramTable", "paramLock", "paramap", "aramap", "permApply", "fieldTable", "aramMaps", "paramSet", " paramap", "pixelCache", "paramsMaps", "ParamSet", "permCache", "paramApply", "paramTable", "propertyCache", " paramSet", " paramList", "fieldList", "parammap", "aramMap", "ParamMap", "arammap", " paramSkip", "aramSkip", "propertyMap", "paramList", "propertyLock", "aramSet", "ParamSkip", "pixelMap", "paramsSet", " parammap", "fieldmap", "ParamMaps", " paramMaps", "permMap", "propertyApply", "paramSkip", "aramList", "pixelApply"]}}
{"id1": "5414088", "id2": "20619879", "code1": "    public static void saveFileData(File file, File destination, java.io.File newDataFile) throws Exception {\n        String fileName = file.getFileName();\n        String assetsPath = FileFactory.getRealAssetsRootPath();\n        new java.io.File(assetsPath).mkdir();\n        java.io.File workingFile = getAssetIOFile(file);\n        DotResourceCache vc = CacheLocator.getVeloctyResourceCache();\n        vc.remove(ResourceManager.RESOURCE_TEMPLATE + workingFile.getPath());\n        if (destination != null && destination.getInode() > 0) {\n            FileInputStream is = new FileInputStream(workingFile);\n            FileChannel channelFrom = is.getChannel();\n            java.io.File newVersionFile = getAssetIOFile(destination);\n            FileChannel channelTo = new FileOutputStream(newVersionFile).getChannel();\n            channelFrom.transferTo(0, channelFrom.size(), channelTo);\n            channelTo.force(false);\n            channelTo.close();\n            channelFrom.close();\n        }\n        if (newDataFile != null) {\n            FileChannel writeCurrentChannel = new FileOutputStream(workingFile).getChannel();\n            writeCurrentChannel.truncate(0);\n            FileChannel fromChannel = new FileInputStream(newDataFile).getChannel();\n            fromChannel.transferTo(0, fromChannel.size(), writeCurrentChannel);\n            writeCurrentChannel.force(false);\n            writeCurrentChannel.close();\n            fromChannel.close();\n            if (UtilMethods.isImage(fileName)) {\n                BufferedImage img = javax.imageio.ImageIO.read(workingFile);\n                int height = img.getHeight();\n                file.setHeight(height);\n                int width = img.getWidth();\n                file.setWidth(width);\n            }\n            String folderPath = workingFile.getParentFile().getAbsolutePath();\n            Identifier identifier = IdentifierCache.getIdentifierFromIdentifierCache(file);\n            java.io.File directory = new java.io.File(folderPath);\n            java.io.File[] files = directory.listFiles((new FileFactory()).new ThumbnailsFileNamesFilter(identifier));\n            for (java.io.File iofile : files) {\n                try {\n                    iofile.delete();\n                } catch (SecurityException e) {\n                    Logger.error(FileFactory.class, \"EditFileAction._saveWorkingFileData(): \" + iofile.getName() + \" cannot be erased. Please check the file permissions.\");\n                } catch (Exception e) {\n                    Logger.error(FileFactory.class, \"EditFileAction._saveWorkingFileData(): \" + e.getMessage());\n                }\n            }\n        }\n    }\n", "code2": "    public void copyLogic() {\n        if (getState() == States.Idle) {\n            setState(States.Synchronizing);\n            try {\n                FileChannel sourceChannel = new FileInputStream(new File(_properties.getProperty(\"binPath\") + name + \".class\")).getChannel();\n                FileChannel destinationChannel = new FileOutputStream(new File(_properties.getProperty(\"agentFileLocation\") + name + \".class\")).getChannel();\n                sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);\n                sourceChannel.close();\n                destinationChannel.close();\n            } catch (FileNotFoundException e) {\n                e.printStackTrace();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n            setState(States.Idle);\n        }\n    }\n", "label": 1, "substitutes": {"saveFileData": ["saveAssetData", "saveStreamContent", "saveAssetResource", "savefileResource", "saveAssetContent", "savefileContent", "storeFileData", "saveStreamResource", "saveStreamdata", "savefiledata", "storeAssetResource", "storeAssetdata", "storeAssetContent", "storeFileResource", "storeFiledata", "savefileData", "saveFileResource", "saveAssetdata", "saveFiledata", "saveFileContent", "storeFileContent", "saveStreamData", "storeAssetData"], "file": ["local", "path", "module", "address", "picture", "place", "field", "parent", "io", "id", "resource", "FILE", "mail", "print", "ile", "e", "disk", "class", "File", "run", "attribute", "work", "filename", "url", "issue", "rule", "style", "null", "model", "block", "node", "port", "link", "language", "f", "base", "job", "play", "feature", "form", "table", "format", "message", "page", "get", "entity", "db", "create", "input", "change", "name", "document", "foo", "object", "comment", "http", "error", "data", "source", "report", "image", "key", "handle", "cache", "task", "info", "type", "policy", "entry"], "destination": ["targetining", "dominate", "destinated", "Destining", "Destinated", "coordification", "combinator", "declacement", "destinator", "targetinate", "Destino", "Destification", "domining", "domination", "destino", "coordinations", "transinator", "Destinations", "destining", "combino", "declination", " destinations", "domacement", "destification", "Destination", "coordinator", "destacement", "combinated", "coordination", "dominator", "targetinator", "transino", " destinator", "Destinate", "transination", "declinate", "Destinator", "destinate", "transinated", "declinator", "targetination", "combination", "Destacement", "destinations", " destification"], "newDataFile": ["newDATAFILE", "uniqueContentFile", "uniqueDataFILE", " newVersionTable", "newDATAFile", "newDateTable", "newsDataTable", "newVersionTable", "newImageStream", "newVersionFiles", "uniqueDatafile", "newDataNode", "uniqueContentfile", "newDATAChannel", "newDataFiles", "newsImageStream", "newContentFile", "newdataFiles", "newDatafile", " newDataNode", " newDataFiles", "newDATAfile", " newDataTable", "newDatefile", "newImageTable", "newdataFile", "newContentfile", "newdataNode", "newsImageFile", "uniqueDataFile", "newdataTable", "newContentChannel", "newDataChannel", "newImageFile", "newsImagefile", "newDataTable", "newVersionfile", " newVersionFiles", "newDataStream", "newContentFILE", "newsDataFile", "newsDataStream", "uniqueDataChannel", "newVersionNode", "newImageFiles", "newVersionChannel", "uniqueContentChannel", "newVersionFILE", "newImagefile", "newDateStream", "newsDatafile", "newVersionStream", "newDateFile", "newImageNode", "newDataFILE", "uniqueContentFILE", " newVersionNode", "newsImageTable"], "fileName": ["applicationAgent", "fileNAME", "FILEName", "applicationOrder", "fileSource", "filename", "applicationSource", "imageSource", "wordOrder", "Filename", "fileAgent", "fileOrder", "FILEType", "imageOrder", "linkName", "wordSource", "linkNAME", "wordName", "FILEname", "linkType", "linkname", "FILENAME", "wordAgent", "FileName", "FileType", "imageName", "fileType", "FileNAME", "applicationName", "imageAgent"], "assetsPath": ["assetsRoot", "filesDir", " assetsDir", "scriptsDir", "scriptsRoot", "assetsDir", "assetsTh", "filesRoot", " assetsRoot", "scriptspath", "packagesDir", "packagesPath", "filesPath", " assetsTh", "scriptsPath", "filesTh", "packagesRoot", "packagesTh", "assetspath", "filespath", " assetspath"], "workingFile": ["workSourceFile", "workingLine", "playingFile", " workingFiles", "playingModel", " workingSet", "startingSet", "movingfile", " workingSourceFile", "workingFiles", " workingLine", "WorkingFiles", "startingFile", "playingUnit", "WorkingFILE", "workFile", "runningfile", " workingStore", "workingSet", "workFolder", "WorkingSourceFile", " workingPath", "writingFILE", " workingPage", "workFiles", "workfile", "Workingfile", "workStore", "startingPage", "writingfile", "runningLine", "movingPage", " workingUnit", "workingfile", "writingLine", "WorkingPath", "WorkingLine", "writingFile", "workingFolder", "movingFolder", "WorkingStore", "workingStore", "WorkingFile", "workingPage", "startingfile", "workLine", "workingPath", "workPage", "runningFILE", "runningFile", " workingfile", " workingModel", "workingUnit", "workPath", "WorkingUnit", "workingModel", "movingFile", "WorkingFolder", "playingfile", "WorkingModel", "WorkingPage", "workingFILE", "workingSourceFile", "WorkingSet"], "vc": ["cv", "CV", "mc", "v", "nv", "fc", "ic", "lp", "vp", "cu", "bt", "vt", "conv", "lv", "vr", "cin", "lc", "c", "cs", "cc", "vm", "cf", "rt", "vv", "etc", "xc", "cm", "nc", "VC", "sv", "ht", "rc", "vd", "WC", "cache", "tc", "ec", "hw", "bc", "dc"], "is": ["does", "iss", "ic", "isl", "abs", "isa", "ii", "sis", "in", "still", "ls", "iris", "ri", "i", "ios", "are", "has", "ib", "bis", "IS", "ms", "lis", "its", "\u00eds", "isin", "ris", "sys", "im", "isf", "isd", "Is", "ins", "nis", "ir", "isi", "isc", "gets", "os", "iso", "ys"], "channelFrom": ["pixelTo", "buttonBefore", " channelFor", "categoryFrom", "entityBefore", "memberBefore", " channelBy", "pixelFrom", "Channelfrom", "ChannelTo", "channelfrom", " channelfrom", "memberfrom", "categoryIn", " channelBefore", "channelFor", "buttonTo", "ChannelFrom", "ChannelBy", "buttonFrom", "memberFor", "categoryTo", "channelOf", "entityTo", "entityFrom", " channelOf", " channelIn", "ChannelIn", "channelBefore", "categoryBy", "channelBy", "memberTo", "entityOf", "channelIn", "buttonfrom", "pixelfrom", "memberFrom", "ChannelFor", "pixelBefore", "memberOf"], "newVersionFile": ["nextversionFile", "newversionTable", "newVersionTable", "newVersionFiles", "oldVersionfile", "oldVersionFile", "nextversionTable", "newVFile", "newServerTable", "newServerFiles", "newVersionClass", "newServerFile", "newversionImage", "nextVersionFile", "nextversionFiles", "newVERSIONFile", "oldVersionClass", "newVersionsClass", "nextversionImage", "newServerImage", "nextVersionFiles", "newversionFiles", "newVersionfile", "newVERSIONFiles", "newVfile", "nextVersionTable", "newVERSIONTable", "nextVersionImage", "newVERSIONImage", "newVersionsfile", "newVClass", "newVersionsFile", "newVersionImage", "newversionFile"], "channelTo": ["consoleTO", "consoleTarget", "connectionFrom", "clientFrom", "channelTO", "commandFrom", "clientTO", "memberTO", "ChannelTo", "commandTo", "commandTO", "consoleto", "ChannelFrom", "consoleTo", "ChannelTO", "memberto", "channelTarget", "Channelto", " channelTO", "connectionTO", "connectionTo", "memberTo", "clientto", "commandto", "ChannelTarget", "connectionto", "channelto", "memberFrom", "clientTo", " channelTarget", " channelto"], "writeCurrentChannel": ["writeCurrentPassword", "readCurrentButton", "writeByChan", "writeRecentSlot", "readcurrentRoom", " writeCurrentlychannel", " writeCurrentConnection", " writeCurrentChan", " writecurrentButton", " writecurrentSlot", "writeRecentchannel", "writeCurrentlyHandler", " writecurrentConnection", "writeNowchannel", "writeBychannel", "writecurrentRoom", " writecurrentChannel", "writecurrentPassword", " writeCurrentchannel", " writeCurrentCategory", "writeURRENTchannel", "writeCurrentRoom", "writeRecentPassword", "writeRecentRoom", "readcurrentChannel", "writeCurrentSlot", "writeCurrentButton", "writecurrentchannel", " writecurrentPassword", "writeCurrentConnection", "writeCurrentchannel", "writeByConnection", " writeCurrentlyConnection", "readCurrentRoom", "writeCurrentlyConnection", " writeCurrentHandler", "readCurrentChannel", "writeCurrentCategory", "writecurrentSlot", "writeCurrentlyChannel", " writeCurrentSlot", "writeURRENTCategory", " writeCurrentlyChan", "writecurrentButton", "writeRecentCategory", "writeURRENTHandler", "writeRecentChannel", "writecurrentChannel", "writecurrentConnection", "readcurrentchannel", "writeByChannel", "writeURRENTButton", "writeNowConnection", "writeURRENTConnection", " writecurrentchannel", "writeCurrentChan", " writecurrentCategory", "writeURRENTChannel", "writeRecentConnection", "writeNowSlot", "readcurrentButton", "writeCurrentlyRoom", " writeCurrentPassword", "writecurrentHandler", "writeNowChannel", "writeCurrentlyButton", "writeCurrentlychannel", "writecurrentCategory", "writeCurrentHandler", " writeCurrentButton", "writeCurrentlyChan", " writecurrentHandler", " writeCurrentlyChannel", "writeURRENTPassword", "writecurrentChan", "readCurrentchannel", "writeRecentButton"], "fromChannel": [" fromChan", " fromCan", "withchannel", "fromchannel", " fromchannel", "innerCan", "innerConnection", "withChan", "withChannel", "boundCh", "FromChannel", "FromCh", "formchannel", "withByte", " fromConnection", "fromConnection", "FromChan", "fromCh", "toConnection", "boundChan", "fromChan", "formByte", "formChannel", "fromCan", " fromByte", "innerChannel", "FromConnection", "Fromchannel", "toCh", " fromButton", "FromButton", "tochannel", "fromButton", "formChan", "boundchannel", "FromCan", "innerButton", "fromByte", "toChan", "toChannel", "boundChannel"], "img": ["picture", "Image", "medium", "lib", "io", "pixel", "src", "gd", "aug", "bg", "obj", "imgur", "pg", "fig", "ext", "images", "m", "html", "md", "anim", "gif", "tmp", "iam", "png", "big", "jpg", "data", "im", "image", "mp", "pic", "shr", "imag", "uf", "it", "mb", "info", "gm", "buf", "um", "ami"], "height": ["gravity", "build", "ure", "h", "medium", "gh", "density", "angle", "length", "alpha", "hash", "history", "ows", "grow", "stroke", "resolution", "max", "style", "w", "view", "acity", "huge", "hang", "rank", "html", "volume", "icity", "def", "capacity", "png", "kw", "heads", "window", "rows", "bottom", "depth", "itude", "ty", "Height", "gy", "size"], "width": ["description", "weight", "rail", "idth", "radius", "term", "amount", "only", "render", "lat", "length", "position", "resolution", "span", "max", "Width", "left", "margin", "widget", "west", "write", "port", "duration", "title", "area", "console", "crop", "padding", "message", "format", "page", "blue", "min", "frame", "x", "top", "version", "wid", "window", "depth", "layout", "body", "w", "size"], "folderPath": ["folderpath", "foldName", "foldPath", " folderUrl", "foldpath", " folderDir", "browserName", "folderName", "Folderpath", "FolderName", "folderUrl", "FolderPath", "FolderDir", "FolderUrl", "browserUrl", "folderDir", "browserPath", " folderpath", "browserpath", "foldDir", " folderName"], "directory": ["direct", "path", "module", "dir", " Directory", "parent", " library", "context", " future", " repository", " directories", " manager", " residing", "manager", " rectangle", "filename", " directly", "library", "connection", "ory", "volume", "ORY", " director", "buffer", " dictionary", "root", " located", " database", "database", "container", "Directory", "reference", "tree", "document", "application", " document", "folder", "Director", "secondary", "division", " temporary", "Folder", " previous", "archive", "collection"], "files": ["resources", "assets", "members", "results", "objects", "modules", "children", "fields", "names", "users", "links", " Files", "images", "workers", "fs", "versions", "data", "items", "keys", "thumbnails", "uploads", "photos", "iles", "types", "classes", "Files", "values"]}}
{"id1": "8093133", "id2": "11562165", "code1": "    public static Object loadXmlFromUrl(URL url, int timeout, XML_TYPE xmlType) throws IOException {\n        URLConnection connection = url.openConnection();\n        connection.setConnectTimeout(timeout);\n        connection.setReadTimeout(timeout);\n        BufferedInputStream buffInputStream = new BufferedInputStream(connection.getInputStream());\n        return loadXml(buffInputStream, xmlType);\n    }\n", "code2": "    private void streamContains(String in, InputStream stream) throws IOException {\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        IOUtils.copy(stream, baos);\n        byte[] bytes = baos.toByteArray();\n        String cmp = new String(bytes, \"UTF-8\");\n        assertTrue(cmp.contains(in));\n        baos.close();\n    }\n", "label": 0, "substitutes": {"loadXmlFromUrl": ["loadXMLFromUrl", "loadXmlWithURL", "loadXmlFormWeb", "loadXMLFormURL", "loadXmlFormFile", "loadXmlWithUrl", "loadXmlFromWeb", "loadXmlAsURL", "loadXmlFromURL", "loadXmlAsFile", "loadXmlWithFile", "loadXmlFormURL", "loadXMLFromWeb", "loadXMLFromFile", "loadXMLFormWeb", "loadXmlFormUrl", "loadXmlAsUrl", "loadXMLFromURL", "loadXmlAsWeb", "loadXMLFormUrl", "loadXMLFormFile", "loadXmlWithWeb", "loadXmlFromFile"], "url": ["build", "sl", "path", "address", "log", "file", "Url", "abs", "str", "nl", "id", "b", "char", "in", "open", "n", "ll", "res", "host", "ssl", "html", "location", "link", "uri", "base", "URL", "job", "web", "page", "loc", "get", "ur", "user", "input", "document", "name", "u", "bel", "http", "l", "request", "xml", "domain"], "timeout": ["course", "until", "period", "number", "monitor", "height", "term", "amount", "io", "length", "mode", "t", "latest", "sleep", "resolution", "blocking", "max", "total", "limit", "network", "frequency", "time", "to", "duration", "wait", "delay", "server", "padding", "buffer", "out", "exclusive", "capacity", "client", "OUT", "password", "seconds", "version", "window", "directory", "it", "Timeout", "unit", "type", "policy", "size"], "xmlType": ["imageType", "imageStyle", " xmlTypes", "xmltype", "xmlStyle", "xmlUnit", "xmlTyp", "fileStyle", "complexUnit", "mlType", " xmlUnit", " xmltype", "mlTyp", "complexTyp", "imageTypes", "fileTypes", "imageBlock", "mlUnit", " xmlStyle", "fileBlock", "complexType", "fileType", "xmlTypes", "xmlBlock", " xmlTyp", "complextype", "mltype", " xmlBlock"], "connection": ["system", "subject", "description", "number", "communication", "io", "resource", "channel", "cone", "ion", "opening", "position", "still", "current", "open", "manager", "Connection", "network", "creation", "c", "to", "entry", "relation", "session", "condition", "computer", "statement", "close", "link", "city", "internet", "builder", "uri", "config", "connect", "conn", "database", "user", "reference", "client", "generation", "nc", "application", "socket", "pointer", "response", "connected", "directory", "established", "character", "usage", "con", "creator", "command"], "buffInputStream": ["BuffInputChannel", "BuffInputForm", "buffOutputStream", "buffOutputSteam", "buffInputChannel", "buffIOForm", "buffEarSteam", "BuffOutputField", "BuffOutputForm", "buffIOField", "buffEntityForm", "buffInputForm", "BuffOutputChannel", "buffEntityChannel", "BuffOutputStream", "buffInputSteam", "BuffInputField", "BuffOutputSteam", "buffEarForm", "buffOutputChannel", "buffOutputForm", "buffEntityStream", "buffInputField", "buffEarField", "buffIOSteam", "BuffInputStream", "buffIOStream", "buffEarStream", "BuffInputSteam", "buffOutputField"]}}
{"id1": "15580610", "id2": "481364", "code1": "    @Override\n    public void trainClassifier(File dir, String... args) throws Exception {\n        String[] command = new String[args.length + 3];\n        command[0] = this.getCommand();\n        System.arraycopy(args, 0, command, 1, args.length);\n        command[command.length - 2] = new File(dir, \"training-data.libsvm\").getPath();\n        command[command.length - 1] = new File(dir, this.getModelName()).getPath();\n        Process process = Runtime.getRuntime().exec(command);\n        IOUtils.copy(process.getInputStream(), System.out);\n        IOUtils.copy(process.getErrorStream(), System.err);\n        process.waitFor();\n    }\n", "code2": "    private void downloadFiles() {\n        SwingWorker<Double, RaphPhotoGalleryPhoto> downloadFilesWorker = new SwingWorker<Double, RaphPhotoGalleryPhoto>() {\n\n            Date startDownloadDate;\n\n            @Override\n            public Double doInBackground() {\n                startDownloadDate = new Date();\n                refreshSpeed = 0;\n                lastDate = null;\n                try {\n                    int totalSizeRead = 0;\n                    int totalNumberRead = 0;\n                    for (RaphPhotoGalleryPhoto photo : photoList) {\n                        URL url = new URL(getCodeBase().toString() + photo.getUrl());\n                        HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n                        DataInputStream dis = new DataInputStream(connection.getInputStream());\n                        FileOutputStream fos = new FileOutputStream(destinationDirectory.toString() + \"/\" + photo.getFileName());\n                        byte[] b = new byte[65536];\n                        int sizeRead;\n                        photo.setProcessedSize(0);\n                        totalNumberRead++;\n                        while ((sizeRead = dis.read(b)) > -1) {\n                            fos.write(b, 0, sizeRead);\n                            totalSizeRead += sizeRead;\n                            photo.addToProcessedSize(sizeRead);\n                            photo.setTotalProcessedSize(totalSizeRead);\n                            photo.setTotalProcessedNumber(totalNumberRead);\n                            publish(photo);\n                            try {\n                            } catch (Exception ignore) {\n                            }\n                        }\n                        fos.close();\n                    }\n                } catch (MalformedURLException e1) {\n                    System.err.println(\"MalformedURLException: \" + e1);\n                } catch (IOException e2) {\n                    System.err.println(\"IOException: \" + e2);\n                }\n                long totalDiffTime = (new Date()).getTime() - startDownloadDate.getTime();\n                double totalSpeed = photoListTotalSize / (totalDiffTime / 1000);\n                return new Double(totalSpeed);\n            }\n\n            @Override\n            protected void process(List<RaphPhotoGalleryPhoto> list) {\n                RaphPhotoGalleryPhoto photo = list.get(list.size() - 1);\n                progressBarTotal.setMaximum(photoListTotalSize);\n                progressBarTotal.setValue(photo.getTotalProcessedSize());\n                setProgressBarTotalLabels(photo.getTotalProcessedNumber(), photoList.size(), photoListTotalSize - photo.getTotalProcessedSize());\n                progressBarCurrent.setMaximum(photo.getFileSize());\n                progressBarCurrent.setValue(photo.getProcessedSize());\n                progressBarCurrentLabel.setText(photo.getFileName());\n                long diffTime = 0;\n                if (lastDate == null) lastDate = new Date();\n                diffTime = (new Date()).getTime() - lastDate.getTime();\n                if (diffTime > 1000) {\n                    double currentSpeed = (photo.getTotalProcessedSize() - lastTotalSize) / (diffTime / 1000.0);\n                    if (currentSpeed > 0) lastSpeed.add(new Double(currentSpeed));\n                    if (lastSpeed.size() == 10) lastSpeed.removeFirst();\n                    double speed = 0;\n                    for (Double d : lastSpeed) {\n                        speed += d.doubleValue();\n                    }\n                    speed = Math.round(speed / lastSpeed.size());\n                    if (refreshSpeed == 0) {\n                        long totalDiffTime = (new Date()).getTime() - startDownloadDate.getTime();\n                        double totalSpeed = (photo.getTotalProcessedSize()) / (totalDiffTime / 1000.0);\n                        remainingTime = (photoListTotalSize - photo.getTotalProcessedSize()) / totalSpeed;\n                        if (remainingTime < 8) refreshSpeed = 0; else refreshSpeed = 3;\n                    } else {\n                        refreshSpeed--;\n                        remainingTime -= diffTime / 1000.0;\n                    }\n                    speedLabel.setText(String.format(\"%.0f\", speed / 1024) + \" \" + getParameter(\"i18n_speedUnit\") + \" :  \" + String.format(\"%.0f\", remainingTime) + \" s\");\n                    lastDate = new Date();\n                    lastTotalSize = photo.getTotalProcessedSize();\n                }\n            }\n\n            @Override\n            protected void done() {\n                try {\n                    speedLabel.setText(String.format(\"%.0f\", get().doubleValue() / 1024) + \" \" + getParameter(\"i18n_speedUnit\"));\n                    downloadButton.setText(getParameter(\"i18n_finished\"));\n                    downloadState = 2;\n                } catch (Exception ignore) {\n                }\n            }\n        };\n        downloadFilesWorker.execute();\n    }\n", "label": 0, "substitutes": {"trainClassifier": [" trainObjectizer", " trainObjectifer", " runclassifer", " trainClassizer", " runClassifier", " trainModifer", " trainObjectification", " trainClassifer", " trainclassification", " runClassifer", " trainclassizer", " runclassifier", " trainObjectifier", " trainClassification", " runclassizer", " trainclassifer", " trainModifier", " trainModizer", " trainModification", " runClassification", " trainclassifier", " runClassizer", " runclassification"], "dir": ["direct", "local", "d", "path", "module", "dr", "lib", "log", "io", "src", "disk", "output", "url", "dl", "null", "md", "base", "config", "prefix", "dd", "loc", "root", "files", "tmp", "doc", "Dir", "db", " directory", "rad", "dist", "data", "folder", "report", "done", "addr", "dm", "pkg", "ir", "directory", "pos", "grad", "DIR", "this", "wd", "div"], "command": ["text", "mac", "search", "send", "force", "function", "description", "operation", "binary", "sequence", "string", "delete", "multiple", "component", "program", "three", "event", "position", "method", "history", "relative", "control", "attribute", "button", "shell", "content", "call", "menu", "query", "connection", "pattern", "condition", "statement", "clear", "link", "volume", "initial", "base", "expression", "config", "form", "buffer", "paste", "message", "argument", "set", "sudo", "column", "Command", "power", "document", "template", "pretty", "shift", "comment", "application", "requisite", "key", "password", "chain", "and", "group", "execute", "response", "mpeg", "request", "directory", "script", "cmd", "option", "display", "archive"], "length": ["space", "build", "pieces", "factor", "number", "Length", "height", "given", "sequence", "append", "transform", "level", "count", "ength", "position", "creator", "needs", "max", "total", "limit", "ENGTH", "deep", "len", "upper", "duration", "bus", "volume", "dump", "form", "loc", "end", "diff", "power", "capacity", "last", "shift", "fleet", "load", "value", "distance", "shape", "pad", "prototype", "SIZE", "depth", "character", "available", "full", "strip", "now", "ctors", "collection", "size"], "process": ["system", "search", "function", "p", "post", "term", "channel", "complex", "component", "program", "processor", "event", "start", "method", "class", "position", "service", "in", "record", "run", "output", "network", "call", "cp", "view", "thread", "check", "node", "session", "worker", "status", "console", "link", "connect", "result", "message", "pid", "flow", "Process", "parse", "object", "processing", "load", "exec", "use", "mpeg", "pp", "handle", "request", "task", "script", "cmd", "proc", "display"]}}
{"id1": "9727056", "id2": "18974466", "code1": "    @Override\n    public OBJModel loadModel(URL url, String skin) throws IOException, IncorrectFormatException, ParsingErrorException {\n        boolean baseURLWasNull = setBaseURLFromModelURL(url);\n        OBJModel model = loadModel(url.openStream(), skin);\n        if (baseURLWasNull) {\n            popBaseURL();\n        }\n        return (model);\n    }\n", "code2": "    protected boolean copyFile(File sourceFile, File destinationFile) {\n        try {\n            FileChannel srcChannel = new FileInputStream(sourceFile).getChannel();\n            FileChannel dstChannel = new FileOutputStream(destinationFile).getChannel();\n            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n            srcChannel.close();\n            dstChannel.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n            return false;\n        }\n        return true;\n    }\n", "label": 0, "substitutes": {"loadModel": ["loadEL", "getModel", " loadFile", "parseModule", "readJSON", "LoadModule", "openModule", "openModel", "getJSON", "loadData", "loadFile", "LoadFile", " loadEL", "getModule", "loadModule", " loadModule", "openEL", "LoadEL", "loadJSON", "openFile", "parseJSON", "parseModel", "LoadModel", "readModel", "getData", "parseData", "readModule", "readData"], "url": ["build", "sl", "path", "address", "gl", "log", "file", "Url", "string", "abs", "str", "nl", "id", "resource", "mail", "b", "browser", "ls", "mol", "dl", "ll", "pl", "host", "html", "ssl", "location", "link", "uri", "base", "config", "URL", "job", "web", "rel", "cl", "loc", "page", "ur", "q", "impl", "document", "name", "util", "http", "mount", "el", "rect", "l", "ref"], "skin": ["silver", "kin", "tin", "suit", "string", "lang", "site", "sheet", "fit", "sis", "span", "style", "sid", "theme", "scope", "side", "license", "kind", "config", "plugin", "format", "gender", "starter", "kit", "png", "name", "template", "spec", "Skin", "socket", "source", "version", "knit", "species", "bin", "spin", "thin", "type"], "ParsingErrorException": ["ParsesFormatError", "ParsesFormatEx", "ParsesFormatExit", "ParsingFormatEx", "ParsesErrorError", "ParsingFormatError", "ParsingInputError", "ParsesErrorEx", "ParsesFormatException", "ParsingConfigEx", "ParsingFormatException", "ParsingConfigException", "ParsingInputExit", "ParsingInputEx", "ParsingConfigExit", "ParsingConfigError", "ParsingInputException", "ParsingErrorError", "ParsesErrorException", "ParsesErrorExit", "ParsingFormatExit", "ParsingErrorExit", "ParsingErrorEx"], "baseURLWasNull": ["baseURLHadNULL", "baseURLEverNull", "baseURLwasMissing", "baseUrlWasMissing", "baseURLWereMissing", "baseURLWasFound", "baseURLWereFound", "baseUrlwasNull", "baseUrlWasFound", "baseURLWereNull", "baseURLWasNULL", "baseURLWasMissing", "baseUrlwasnull", "baseUrlWasNull", "baseURLEvernull", "baseUrlWasnull", "baseUrlWasNULL", "baseUrlwasMissing", "baseURLHadFound", "baseURLwasNULL", "baseURLWasnull", "baseUrlwasFound", "baseURLEverNULL", "baseUrlwasNULL", "baseURLwasFound", "baseURLHadMissing", "baseURLwasnull", "baseURLWereNULL", "baseURLWerenull", "baseURLHadNull", "baseURLwasNull"], "model": ["sample", "module", "cell", "human", "batch", "my", "fit", "mod", "transform", "resource", "map", "obj", "row", "Model", "morph", "mi", "view", "ll", "instance", "jo", "m", "link", "mor", "base", "job", "buffer", "models", "result", "message", "serial", "entity", "tree", "successful", "document", "object", "data", "me", "report", "el", "sim", "xml", "json", "body"]}}
{"id1": "8486429", "id2": "15757836", "code1": "    private void loadProperties() {\n        if (properties == null) {\n            properties = new Properties();\n            try {\n                URL url = getClass().getResource(propsFile);\n                properties.load(url.openStream());\n            } catch (IOException ioe) {\n                ioe.printStackTrace();\n            }\n        }\n    }\n", "code2": "    private int[] sort(int n) {\n        int[] mas = new int[n];\n        Random rand = new Random();\n        for (int i = 0; i < n; i++) {\n            mas[i] = rand.nextInt(10) + 1;\n        }\n        boolean t = true;\n        int tmp = 0;\n        while (t) {\n            t = false;\n            for (int i = 0; i < mas.length - 1; i++) {\n                if (mas[i] > mas[i + 1]) {\n                    tmp = mas[i];\n                    mas[i] = mas[i + 1];\n                    mas[i + 1] = tmp;\n                    t = true;\n                }\n            }\n        }\n        return mas;\n    }\n", "label": 0, "substitutes": {"loadProperties": ["initPrdates", "loadProdates", "loadPropdates", "initProperties", "initProproperties", "loadPrps", "loadprodates", "initPrproperties", "initPrps", "loadPropperties", "loadPrperties", "loadPrproperties", "loadproproperties", "initPrperties", "loadprops", "loadPropproperties", "loadproperties", "loadPrdates", "loadProproperties", "loadProps", "initProps", "loadPropps", "initProdates"], "properties": ["settings", "tests", "where", "features", "members", "results", "packages", "builders", "organisms", "notes", "pro", "bugs", "sheets", "prints", "terms", "property", "objects", "modules", "abilities", "policy", "comments", "reports", "names", "perties", "jobs", "papers", "to", "states", "projects", "units", "options", "facts", "ps", "ports", "people", "params", "parts", "beans", "database", "changes", "holders", "relations", "posts", "rules", "details", "keys", "metadata", "rows", "marks", "poses", "this", "types", "prop", "values"], "url": ["build", "sl", "address", "file", "Url", "p", "ret", "abs", "str", "nl", "id", "kl", "resource", "b", "char", "browser", "loader", "obj", "context", "service", "ls", "open", "dl", "ll", "location", "f", "uri", "config", "URL", "result", "sb", "ur", "user", "u", "bel", "http", "rl", "mount", "rect", "l", "ref"]}}
{"id1": "8087001", "id2": "10936821", "code1": "    public static String generateStackHashKey() {\n        Exception e = null;\n        try {\n            throw new Exception();\n        } catch (Exception ex) {\n            e = ex;\n        }\n        MessageDigest digest;\n        try {\n            digest = java.security.MessageDigest.getInstance(\"MD5\");\n            digest.update(getStackTrace(e).getBytes());\n            byte[] hash = digest.digest();\n            String rtn = Base64.encode(new String(hash));\n            if (keys.contains(rtn)) {\n                return generatedIterStackHashKey(rtn);\n            }\n            keys.add(rtn);\n            return rtn;\n        } catch (NoSuchAlgorithmException ex) {\n            throw new RuntimeException(ex);\n        }\n    }\n", "code2": "    @Override\n    public void doIt() {\n        try {\n            Shared.createBackup(\"articulo precio codigo_de_barras costo movimiento_inventario detalles_movimientos\");\n            if (mode.equals(\"FTP\")) {\n                FTPClient client = new FTPClient();\n                client.connect(Constants.ftpHost);\n                client.login(Constants.ftpUser, Constants.ftpPass);\n                client.changeDirectory(Constants.ftpDir);\n                File ff = new File(Constants.tmpDir + Constants.tmpFtpFileName);\n                client.download(\"GT99_A09.rar\", ff);\n                client.disconnect(false);\n                Shared.prepareMovements(ff);\n            } else if (mode.equals(\"File\")) {\n                JFileChooser jfc = new JFileChooser();\n                FileFilter f = new ExtensionFileFilter(\"Traslados de Total Pos\", \"rar\");\n                jfc.setFileFilter(f);\n                int selection = jfc.showOpenDialog(Shared.getMyMainWindows());\n                if (selection == JFileChooser.APPROVE_OPTION) {\n                    Shared.prepareMovements(jfc.getSelectedFile());\n                } else {\n                    return;\n                }\n            }\n            Shared.updateMovements();\n            if (Shared.isHadMovements()) {\n                MessageBox msg = new MessageBox(MessageBox.SGN_SUCCESS, \"Fue cargado el nuevo inventario satisfactoriamente!\");\n                msg.show(Shared.getMyMainWindows());\n            } else {\n                MessageBox msg = new MessageBox(MessageBox.SGN_WARNING, \"La tienda no tuvo ningun movimiento asociado.\");\n                msg.show(Shared.getMyMainWindows());\n            }\n        } catch (Exception ex) {\n            MessageBox msg = new MessageBox(MessageBox.SGN_DANGER, \"Ha ocurrido un error.\", ex);\n            msg.show(Shared.getMyMainWindows());\n        }\n    }\n", "label": 0, "substitutes": {"generateStackHashKey": ["generateTrackhashKeys", "generateStackhashKeys", "generateTrackhashIndex", "generateStackNodePage", "generateStackStatePage", "generateStackStateKey", "generateStackHashIndex", "generateStackhashPage", "generateStackhashIndex", "generateTrackHashKeys", "generateStackStateIndex", "generateTrackHashIndex", "generateStackNodeIndex", "generateStackHashPage", "generateStackNodeKey", "generateTrackHashPage", "generateStackNodeKeys", "generateStackStateKeys", "generateTrackhashPage", "generateTrackhashKey", "generateStackHashKeys", "generateTrackHashKey", "generateStackhashKey"], "e": ["d", "err", "ae", "exc", "h", "en", "p", "xe", "E", "oe", " exc", "t", "eg", "event", "te", "eeee", "ed", "ee", "r", "email", "ex", "n", " err", "i", "a", " me", "m", "f", "ge", "o", "es", " pe", " error", "pe", " ce", "element", "ep", " te", "eb", "ue", "ie", "exp", "u", "error", "eu", "x", "me", "el", "ef", "ec", "ne", "eer", "er", "se"], "digest": ["compests", "mdested", "decester", "decse", "compested", " digests", "digested", " digEST", "Diggest", "compest", "Digse", "Digested", "mdest", "DigEST", "descest", "mdEST", "descer", "Digest", "mdester", "compEST", "digests", "diger", "Diger", " digested", "Digester", " diger", "digEST", " digester", "diggest", " diggest", "decest", "Digests", " digse", "descse", "digse", "descgest", "mdse", "digester", "decested"], "hash": ["mac", "build", "search", "sample", "filter", "h", "log", "ash", "tag", "map", "test", "shadow", "total", "style", "rh", "check", "block", "has", "html", "bh", "valid", "message", "dig", "all", "score", "hex", "report", "key", "sha", "chain", "Hash", "sum", "cache", "sh", "ashed", "her"], "rtn": ["RTnu", "otnm", "ytn", "rxmn", "RTnm", "rtr", "rtcn", "ttr", "rtyn", "latn", "aptr", "ertn", "ytyn", "rton", "vrnm", "ytns", "rtnm", "aptn", "ertr", "tton", "artnor", "rxne", "RTcn", "otn", "latne", "latnm", "ntb", "mtcn", "RTn", "rtnor", "rtb", "ttnu", "erton", "rotnor", "rotnm", "rtN", "apton", "rotcn", "otne", "rotyn", "rotns", "aptnu", "vrn", "rxn", "RTN", "ntn", "ytnor", "RTb", "ntN", "artns", "ntnm", "otmn", "ttn", "vrN", "latmn", "rtnu", "rxnm", "vrb", "artn", "artyn", "rtmn", "rtne", "mtn", "ertnu", "mtnu", "rotnu", "mtnm", "rtns", "rotn"]}}
{"id1": "14819747", "id2": "17557289", "code1": "    public static void main(final String args[]) {\n        if (args.length < 2 || (args.length == 3 && !\"-d\".equals(args[0]))) {\n            System.out.println(\"Usage: AdapterGenerator [Options] <PrologFile> <ClassPath>\");\n            System.out.println(\"       where the framework is the first element in the class path\");\n            System.out.println(\"Options: -d Enables the generation of debug output\");\n            return;\n        }\n        boolean debug = args.length == 3;\n        File prologFile = new File(debug ? args[1] : args[0]);\n        if (!prologFile.isFile()) {\n            System.out.println(\"The given file does not exist.\");\n            return;\n        }\n        File targetFile = new File(prologFile.getParentFile(), prologFile.getName().substring(0, prologFile.getName().lastIndexOf(\".\")) + \".jar\");\n        String source;\n        try {\n            source = FileUtils.readFileToString(prologFile);\n        } catch (IOException ex) {\n            System.out.println(\"Error reading file: \" + ex.getMessage());\n            return;\n        }\n        Parser myParser = new PrologParserImpl();\n        PrologProgram myProgram;\n        try {\n            myProgram = (PrologProgram) myParser.parse(source);\n        } catch (Exception ex) {\n            System.out.println(\"Could not parse file: \" + ex.getMessage());\n            return;\n        }\n        try {\n            FactVisitor myVisitor = new FactVisitor();\n            myVisitor.visit(myProgram);\n            Map<String, TypeGenerationInfo> adapterLayer = myVisitor.getAdapterLayer();\n            if (adapterLayer.size() == 0) {\n                System.out.println(\"No adapters to generate, \" + \"did you forget to run the comeback rules?\");\n                return;\n            }\n            URLClassLoader classLoader = createClassLoaderFromClassPath(debug ? args[2] : args[1]);\n            ClassWriter adapterWriter = new ClassWriter(new JarEntryWriter(targetFile));\n            AdapterAnnotationGenerator annotationGenerator = new AdapterAnnotationGenerator();\n            Type annotationType = Type.getObjectType(\"net/sourceforge/comeback/Adapter\");\n            adapterWriter.writeClass(annotationType.getClassName(), annotationGenerator.createAnnotation(annotationType));\n            AdapterLookupGenerator lookupWriter = new AdapterLookupGenerator(Type.getObjectType(\"net/sourceforge/comeback/Adapters\"), annotationType);\n            GenerationContext context = new GenerationContext(adapterLayer, classLoader, annotationType, lookupWriter, adapterWriter);\n            context.setGenerateDebugOutput(debug);\n            Iterator<TypeGenerationInfo> iterator = adapterLayer.values().iterator();\n            while (iterator.hasNext()) {\n                TypeGenerationInfo info = iterator.next();\n                context.generateAdapter(info);\n            }\n            ByteArrayOutputStream serialized = new ByteArrayOutputStream();\n            ObjectOutputStream out = new ObjectOutputStream(serialized);\n            out.writeObject(adapterLayer);\n            out.close();\n            adapterWriter.writeResource(\"net/sourceforge/comeback/adapterlayer.ser\", serialized.toByteArray());\n            String[] sharedClassesPrefixes = new String[2];\n            Assembler assembler = new Assembler(adapterWriter);\n            PatternClassFilter filter = new PatternClassFilter();\n            URL url = Main.class.getResource(\"/\" + Main.class.getName().replace('.', '/') + \".class\");\n            JarURLConnection connection = (JarURLConnection) url.openConnection();\n            sharedClassesPrefixes[0] = assembler.assemble(connection.getJarFile(), filter);\n            filter = new PatternClassFilter();\n            url = Type.class.getResource(\"/\" + Type.class.getName().replace('.', '/') + \".class\");\n            connection = (JarURLConnection) url.openConnection();\n            sharedClassesPrefixes[1] = assembler.assemble(connection.getJarFile(), filter);\n            String tmp = debug ? args[2] : args[1];\n            adapterWriter.writeClass(lookupWriter.getType().getClassName(), lookupWriter.createAdapterLookup(adapterLayer.values(), tmp.substring(tmp.lastIndexOf(File.pathSeparator) + 1), sharedClassesPrefixes));\n            adapterWriter.close();\n        } catch (Throwable e) {\n            e.printStackTrace();\n            return;\n        }\n    }\n", "code2": "    private static void copyFile(File source, File dest) throws IOException {\n        FileChannel srcChannel = new FileInputStream(source).getChannel();\n        FileChannel dstChannel = new FileOutputStream(dest).getChannel();\n        dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n        srcChannel.close();\n        dstChannel.close();\n    }\n", "label": 0, "substitutes": {"debug": ["d", "module", "related", " debugger", "log", "binary", "file", "dir", "step", "show", "tag", "ose", "mod", "print", "mode", "test", "browser", "bug", "progress", "javascript", "shell", "production", "stats", "write", "secure", "Debug", "console", "hidden", "valid", "close", "google", "dump", "config", "hide", "trace", "web", "play", "dd", "date", "enabled", "db", "change", "color", "develop", "comment", "error", "DEBUG", "data", " debugging", "development", " DEBUG", "enable", "default", "cache", "depth", "dev", "hack", "display"], "prologFile": ["profileLine", "prologDo", "proLogPlace", "problogFile", "PrologFiles", "proplogFile", "ProLogFile", "proconfigFile", "problogfile", "PrologMessage", "proplotFile", "prologPath", "probadfile", "proplexFilename", "prozipfile", "Prologfile", "ProLogFiles", "proplogBody", "propelFilename", "prologFilename", "ProLogLine", "ProLogFilename", "prologFILE", "proplogFilename", "procellLine", "proplogFILE", "procellPath", "prosystemfile", "ProLogPath", "probadParser", "prologParser", "problogPlace", "problogFiles", "prologPlace", "prosystemFile", "proplexFILE", "proplotFilename", "proLogFILE", "probadFile", "prologFiles", "probadFILE", "procellFile", "prolexFILE", "proplotFILE", "rologfile", "PrologFILE", "prolexBody", "problogDo", "PrologPlace", "prozipFile", "proLogFilename", "proconfigFilename", "proLogFiles", "rologFile", "PrologLine", "ProLogMessage", "prolexFile", "PrologParser", "proplexFile", "PrologPath", "profilePath", "procellfile", "prologLine", "proplexBody", "proLogMessage", "proLogDo", "proLogFile", "ProLogfile", "prozipFILE", "proplotBody", "proLogLine", "prolexFilename", "propelFILE", "PrologFilename", "proconfigFiles", "rologFiles", "proLogfile", "ProLogFILE", "propelBody", "proconfigPlace", "profilefile", "proLogParser", "prosystemMessage", "prologfile", "ProLogPlace", "propelFile", "ProLogParser", "prozipParser", "prologMessage", "proLogPath", "PrologFile", "prosystemFiles", "profileFile", "rologDo", "prologBody", "problogFilename"], "targetFile": ["secondaryFile", "destPath", "sourceFile", "topPath", "topDisk", "sourcePath", "sourceDir", "targetFilename", "baseFilename", "topDirectory", "TargetPath", "TargetFile", "targetDisk", "TargetDirectory", "secondaryDirectory", "secondaryPath", "destDir", "sourceFilename", "targetDir", "targetDirectory", "TargetDisk", "destFile", "targetPath", "destFilename", "secondaryDisk", "topFile", "baseDir", "basePath", "baseFile"], "source": ["text", "sample", "secret", "description", "string", "file", "sequence", "site", "show", "str", "src", "resource", "store", "join", "start", "position", "SOURCE", "from", "target", "style", "shell", "content", "ource", "scope", "title", "code", "html", "status", "language", "base", "note", "expression", "buffer", "Source", "message", "format", "sp", "raw", "result", "input", "template", "comment", "password", "response", "ser", "layout", "unit", "state", "body", "sql", "display", "se"], "myParser": ["multiPlugin", "MyBuilder", "someParser", " myPlugin", "myparser", "someReader", " myparser", "MyParser", "multiParser", " myBuilder", " myPlayer", "myPlugin", "myReader", "someBuilder", "somePlayer", "miPlugin", "multiReader", "miParser", "myPlayer", "MyPlayer", "myBuilder", "miReader", "miparser", " myReader", "multiparser", "MyReader"], "myProgram": ["anotherParser", "thisPlatform", "thisProgram", "userWar", "miProgram", "Myprogram", "anotherprogram", "MyProcess", "myProcess", " myLog", "yourParser", "anotherProgram", " myPlatform", "thisWar", "yourProcess", "myprogram", "yourprogram", " myProcess", "miprogram", "yourProgram", "myLog", "userPlatform", "miProcess", " myWar", "MyProgram", "miLog", "MyLog", "myWar", "thisProcess", "userProcess", " myprogram", "myPlatform", "anotherProcess", "userProgram"], "myVisitor": ["myVisualistor", "yourJanator", "yourVisistor", " myVisitation", "myCreatitor", "myAuditer", "myJanactor", "myVisistor", "myVisator", " myVisiter", "myVisactor", "myCreatifier", "miVisier", "myJanitation", "miAuditer", "myViter", " myvisistor", "myJanifier", "myJanitor", "yourJanifier", "miVisitor", " myVisistor", "myVisualifier", "yourVisifier", "myJaniter", "yourJanitor", "miVisiter", "myVisitation", "myvisitor", "myAudier", "miAudier", "myCreatistor", "myJanier", "yourJanistor", "myActivitor", "myVitation", "myvisistor", "myVisiter", " myvisiter", "myVisualator", "myJanator", "myVisier", "yourVisator", "myAuditor", "myVisifier", "myVistor", "myVisualitor", "myAudactor", "myvisiter", " myvisitation", "myActiviter", "miVisactor", "myCreatator", " myvisitor", "myVitor", "myvisitation", "myJanistor", "myActivier", "miAuditor", "miAudactor", "myActivactor", "yourVisitor"], "adapterLayer": ["adviceMap", "adviceHeader", "adaptersLayout", "adviceStack", "anapterLayer", "adurationStack", "adaptersHeader", "adclerLayout", "agapterLayout", "adapterLayout", "anapterMap", "agclerListener", "adapterStack", "anviceLayer", "adaptersLayer", "anviceStack", "adapterMap", "adviceListener", "anapterStack", "adclerHeader", "anviceMap", "adclerLayer", "adaptersMap", "adapterHeader", "agapterLayer", "adaptersStack", "adaptersListener", "agclerLayout", "agclerLayer", "adapterListener", "adurationLayer", "adclerListener", "agclerHeader", "agapterListener", "agapterHeader", "adviceLayer", "adurationMap", "adviceLayout"], "classLoader": ["resourceloader", "resourcePath", "ClassReader", "classReader", "ClassPath", "classloader", "resourceLoader", "resourceReader", " classPath", "Classloader", "classPath", " classloader", "ClassLoader", " classReader"], "adapterWriter": ["adAdapterReader", "audapterWrite", "adAdapterMaker", "adabilityWriter", "adaptersMaker", "adAdapterWriter", "adaptersWrite", "audaptersWrite", "adapterWrite", "adaptersWriter", "adapterReader", "audapterWriter", "audapterMaker", "adapterMaker", "adaptersReader", "audaptersWriter", "audaptersMaker", "adabilityWrite", "adabilityMaker", "audapterReader", "adabilityReader", "adAdapterWrite", "audaptersReader"], "annotationGenerator": ["annotationGenerators", "annotationValidater", "annotationGenator", "annotationgenerater", "annationgeneration", "annationGeneration", "annotationGenerater", "annationgenerator", "annotationValidators", "annationGenerator", "annotationgenerators", "annationgenerater", "annotationgenerator", "annationgenerators", "annotationGenation", "annationGenerators", "annotationGenater", "annotationGeneration", "annotationGenators", "annationGenerater", "annotationValidator", "annotationgeneration", "annotationValidation"], "out": ["err", "log", "term", "str", "txt", "io", "crit", "print", "store", "inf", "obj", "conv", "nt", "in", "up", "nr", "msg", "aos", "output", "manager", "inv", "content", "ex", "n", "null", "inner", "session", "res", "inter", "outer", "base", "desc", "set", "screen", "net", "dt", "conn", "init", "cfg", "writer", "gr", "tree", "client", "pretty", "sys", "OUT", "group", "list", "Out", "ins", "sum", "json", "cmd", "pool", "ou", "outs", "last", "con", "w"]}}
{"id1": "2834524", "id2": "17792212", "code1": "    public void write() throws IOException {\n        JarOutputStream jarOut = new JarOutputStream(outputStream, manifest);\n        if (includeJars != null) {\n            HashSet allEntries = new HashSet(includeJars);\n            if (!ignoreDependencies) expandSet(allEntries);\n            for (Iterator iterator = allEntries.iterator(); iterator.hasNext(); ) {\n                JarFile jar = getJarFile(iterator.next());\n                Enumeration jarEntries = jar.entries();\n                while (jarEntries.hasMoreElements()) {\n                    ZipEntry o1 = (ZipEntry) jarEntries.nextElement();\n                    if (o1.getName().equalsIgnoreCase(\"META-INF/MANIFEST.MF\") || o1.getSize() <= 0) continue;\n                    jarOut.putNextEntry(o1);\n                    InputStream entryStream = jar.getInputStream(o1);\n                    IOUtils.copy(entryStream, jarOut);\n                    jarOut.closeEntry();\n                }\n            }\n        }\n        jarOut.finish();\n        jarOut.close();\n    }\n", "code2": "    private void createButtonCopyToClipboard() {\n        buttonCopyToClipboard = new Button(shell, SWT.PUSH);\n        buttonCopyToClipboard.setText(\"Co&py to Clipboard\");\n        buttonCopyToClipboard.setLayoutData(SharedStyle.relativeToBottomRight(buttonClose));\n        buttonCopyToClipboard.addSelectionListener(new SelectionAdapter() {\n\n            @Override\n            public void widgetSelected(final SelectionEvent event) {\n                IOUtils.copyToClipboard(Version.getEnvironmentReport());\n            }\n        });\n    }\n", "label": 1, "substitutes": {"write": ["filter", "apply", "lock", "file", "append", "print", "update", "service", "export", "flush", "check", "zip", "link", "dump", "end", "rite", "Write", "create", "read", "commit", "download", "println", " overwrite", "save", "add", "handle", " rewrite", "next"], "jarOut": ["jarout", "jamNet", "JarStore", "browserout", "jamOver", "jarIn", "jarOver", "Jarout", "pkgOver", "browserOutput", " jarGen", "jarGen", "javaout", " jarOutput", "pkgNet", "jamIn", "JarOutput", "JarNet", "jarStore", " jarStore", "javaStore", "pkgOut", "javaOutput", "browserIn", "JarOver", "jarOutput", " jarout", "javaGen", "jamOut", "javaIn", "jarNet", "JarIn", "javaOut", "JarGen", "JarOut", "browserOut", " jarIn", "pkgIn"], "allEntries": [" allEntlections", "allEnies", " allEntrys", "allEnrys", "allEnarts", "allEntryies", " allents", "allents", "allENTrys", "allEntlections", "allENTries", "allENTlections", "allENTies", " allEnties", "allEntrys", " allenties", "allentarts", "allEnties", " allentrys", "allEnts", "allEntarts", "allEnries", " allentries", "allEntryries", "allenties", " allEnts", "allentlections", "allentrys", "allEntryrys", "allentries", " allEntarts"], "iterator": ["river", "sample", "members", "number", "immigration", "sequence", "timer", "inator", "pee", "iver", "loader", "former", "creator", "current", "copy", "walker", "reader", "Iterator", "range", "menu", "i", "internet", "inner", "iner", "instance", "ski", "ippy", "continue", "runner", "builder", "outer", "iter", "loop", "pie", "trace", "set", "vector", "series", "table", "counter", "tmp", "database", "writer", "starter", "versions", "ter", "ator", "liner", "pointer", "finder", "list", "rows", "issues", "next", "values", "operator", "stream", "integer", "collection", "size"], "jar": ["tar", "pod", "bare", "module", "java", "batch", "dir", "file", "binary", "bag", "jj", "magic", "lib", "resource", "char", "browser", "be", "class", "zone", "j", "archive", "cp", "pack", "library", "vol", "jo", "zip", "cf", "job", "sp", "parse", "cert", "tab", "gem", "war", "car", "folder", "Jar", "pkg", "json", "rar", "jp", "entry"], "jarEntries": ["jarAddries", "jarEntarts", "JarEntries", "JarEntrs", "jarContents", "jarMatries", "jarIntires", "jarMatires", "jarContrys", "Jarentires", " jarentries", "JarEntires", "jarIntrs", "jarenties", "jarIntries", "JarEnties", "jarContries", "jarentries", " jarEntrys", "jarEntities", "jarContities", "jarentents", " jarEntents", "Jarentrs", "Jarenties", " jarEntities", "jarEnries", "jarEries", "jarAddarts", "jarAddies", "jarEntents", "jarEents", "jarEnents", "jarMatrs", "jarentires", " jarContents", " jarenties", "jarEntires", "jarAddents", " jarentarts", " jarContities", "jarEnrys", "jarMaties", "jarentarts", "jarEnties", "jarEntrs", "jarentrs", "jarEntrys", " jarContries", "Jarentries", " jarEntarts", "jarEarts", "jarInties", " jarContrys", "jarEies", " jarentents", "jarEnities", " jarEnties"], "o1": ["oone", "os2", " o10", "oa6", " o5", "e5", "o5", "oOne", "oa1", " o6", "o0", "o2", "co1", "co2", "o11", "e2", " oOne", "e512", "oo10", "ico2", "oo8", "oa11", "o10", "e0", "co6", "ico1", " o2", "o8", "os1", "oa8", "co11", " oone", "os512", "os5", " o0", " o512", "oa10", "o6", " o11", "a1", "oo1", "a0", "aOne", "eOne", "a2", "eone", "ico512", " o8", "o512", "oa2", "e1", "icoone"], "entryStream": ["EntryStream", "inputStream", "enterStream", "inputStreamer", "enterSteam", "enterStreamer", "entryPoint", "entryStreamer", " entrySteam", "resultSteam", "entrySteam", "EntrySteam", "resultStream", "EntryForm", "resultPoint", " entryPage", "resultPage", "inputSteam", "rowSteam", "inputForm", "rowPage", "EntryStreamer", "rowPoint", "entryPage", "rowStream", " entryPoint", "enterForm", "entryForm"]}}
{"id1": "10361370", "id2": "14733078", "code1": "    public static byte[] hash(final byte[] saltBefore, final String content, final byte[] saltAfter, final int repeatedHashingCount) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n        if (content == null) return null;\n        final MessageDigest digest = MessageDigest.getInstance(DIGEST);\n        if (digestLength == -1) digestLength = digest.getDigestLength();\n        for (int i = 0; i < repeatedHashingCount; i++) {\n            if (i > 0) digest.update(digest.digest());\n            digest.update(saltBefore);\n            digest.update(content.getBytes(WebCastellumFilter.DEFAULT_CHARACTER_ENCODING));\n            digest.update(saltAfter);\n        }\n        return digest.digest();\n    }\n", "code2": "    private static String encrypt(String algorithm, String password, Long digestSeed) {\n        try {\n            MessageDigest digest = MessageDigest.getInstance(algorithm);\n            digest.reset();\n            digest.update(password.getBytes(\"UTF-8\"));\n            digest.update(digestSeed.toString().getBytes(\"UTF-8\"));\n            byte[] messageDigest = digest.digest();\n            StringBuffer hexString = new StringBuffer();\n            for (int i = 0; i < messageDigest.length; i++) {\n                hexString.append(Integer.toHexString((0xf0 & messageDigest[i]) >> 4));\n                hexString.append(Integer.toHexString(0x0f & messageDigest[i]));\n            }\n            return hexString.toString();\n        } catch (NoSuchAlgorithmException e) {\n            throw new RuntimeException(e);\n        } catch (UnsupportedEncodingException e) {\n            throw new RuntimeException(e);\n        } catch (NullPointerException e) {\n            return new StringBuffer().toString();\n        }\n    }\n", "label": 1, "substitutes": {"hash": ["match", "filter", "h", "ash", "tag", "print", "render", "test", "update", "attribute", "index", "check", "profile", "code", "html", "crypt", "message", "ashes", "sign", "key", "password", "header", "version", "Hash", "array", "handle", "sum"], "saltBefore": ["sALTAfter", "saltStart", " saltStart", "sadePrevious", "sashStart", "SaltBefore", " sALTAfter", "saltPrevious", "sALTPrevious", "SALTBefore", "sadeBefore", "saveBefore", "SALTPrevious", " sALTStart", "SaltAfter", "sALTBefore", "saveAfter", "SALTAfter", "SaltPrevious", " sALTBefore", "sashAfter", "sadeAfter", "savePrevious", "sashBefore", "sALTStart", "sadeStart"], "content": ["text", "path", "subject", "description", "string", "file", "sequence", "txt", "any", "str", "Content", "current", "record", "output", "url", "time", "c", "null", "title", "code", "present", "html", "license", "initial", "reason", "config", "expression", "example", "message", "entity", "format", "raw", "input", "document", "media", "object", "comment", "data", "cont", "source", "value", "image", "password", "xml", "json", "translation", "body", "word"], "saltAfter": ["sALTAfter", "vintAfter", "saltResult", "saveBody", "sintBody", "sadeResult", "soltResult", "SaltBefore", "sintBefore", "vintBody", "valtBody", "soltAfter", "vintafter", "sadePost", "sALTafter", "SALTBefore", "soltPost", "SALTResult", "saltPost", "SALTPost", "saltafter", "sALTBody", "SaltPost", "saltBody", "sadeBefore", "saveBefore", "SaltResult", "sALTResult", "SaltAfter", "sALTBefore", "saveAfter", "saveafter", "SALTAfter", "vintBefore", "sALTPost", "valtafter", "sintAfter", "sadeAfter", "valtAfter", "soltBefore", "sintafter", "valtBefore"], "repeatedHashingCount": ["repeatedRashescount", "repeatedHashcount", "repeatedRashingcount", "repeatedHASHCounter", "repeatedRashingCounter", "repeatedHashCount", "repeatedHashesCounter", "repeatedHachingLength", "repeatedRashingLength", "repeatedHashCC", "repeatedHashingCounter", "repeatedHashesLength", "repeatedRashesCounter", "repeatedHASHCount", "repeatedRashCC", "repeatedHashCode", "repeatedHashingCC", "repeatedHashesCount", "repeatedHASHcount", "repeatedHashesCC", "repeatedHachingCount", "repeatedRashesCount", "repeatedRashingCount", "repeatedHashingCode", "repeatedHachingCC", "repeatedHachingCode", "repeatedHASHLength", "repeatedHashingLength", "repeatedHashingcount", "repeatedHashesCode", "repeatedRashCode", "repeatedRashesLength", "repeatedHashescount", "repeatedHashLength", "repeatedRashingCC", "repeatedRashingCode", "repeatedRashCount", "repeatedHashCounter", "repeatedRashLength"], "digest": ["algest", " digEST", "printEST", "descested", "mdest", "dester", "dest", "commested", "Digest", "digum", "argester", "compEST", "digests", "comphash", " Digest", "digEST", "printesting", "digity", "dested", "designested", " digist", " digum", "digist", "hashhash", "mdse", "commity", " digency", "mdested", " digests", "digency", "argEST", "descest", "diagnum", "dighest", "fifEST", " Digested", "Digester", "diagnests", "argest", "fifitude", "hashest", "Digests", "Digum", " digse", "algested", " dighest", "diagnist", " digity", " Digester", "fifest", "dighash", "Digse", "Digested", "debugest", " digesting", "commse", "DigEST", "digert", "mdester", "designest", " digested", "Digute", "algester", "algEST", "dfester", " Digert", " digert", "extse", "descse", "fingerhest", "printest", "digester", "debugitude", "fifency", "dfested", "digute", "digested", "dfest", "compute", "Dighash", "compest", "dfesting", "hashEST", "digitude", "debugency", "descity", "printhest", "extester", "debugEST", " digester", "Digist", "hashute", "fingerEST", "dse", "diagnest", "commest", "dert", "extested", "designesting", " digitude", "extest", "argested", "digse", "fingerest", "fingeresting", "designester", "digesting"], "digestLength": ["digistData", "digesterlength", "digestedOffset", "descestLength", " digestType", "digistLength", "digestedLen", "digestData", "descesterlength", "digestedData", " digestData", "digseOffset", "digesterLen", "digseLen", "descestOffset", " digestLen", "descesterOffset", "digestType", "digselength", "digestOffset", "descestlength", "digesterLength", "digestLen", " digesterType", "descesterLen", " digesterLen", "digesterOffset", " digesterData", "digseLength", "digesterType", "digesterData", "digistLen", "descestLen", "descesterLength", "digestedlength", "digestlength", "digistType", " digesterLength", "digestedType", "digestedLength"], "i": ["err", "ti", "v", "I", "batch", "ic", "iq", "li", "gi", "my", "print", "is", "di", "ii", "z", "in", "j", "phi", "mi", "si", "index", "ini", "n", "ex", "iu", "pi", "ci", "m", "ski", "cli", "uri", "iter", "ms", "multi", "q", "init", "xi", "ind", "gu", "u", "client", "ei", "qi", "me", "im", "x", "uu", "ai", "ix", "sim", "ip", "it", "bi", "mill", "ui", "sql", "y"]}}
{"id1": "5237257", "id2": "18693224", "code1": "    private void download(String fileName) {\n        String filePath = Activator.showSaveDialog(fileName, new String[] { \".xls\" });\n        if (filePath != null) {\n            InputStream in = null;\n            OutputStream out = null;\n            try {\n                in = this.getClass().getResourceAsStream(\"/\" + fileName);\n                out = new FileOutputStream(filePath);\n                IOUtils.copy(in, out);\n            } catch (IOException ioe) {\n                Activator.showExceptionDialog(ioe);\n            } finally {\n                if (in != null) {\n                    try {\n                        in.close();\n                    } catch (IOException e1) {\n                        Activator.showExceptionDialog(e1);\n                    }\n                }\n                if (out != null) {\n                    try {\n                        out.close();\n                    } catch (IOException e1) {\n                        Activator.showExceptionDialog(e1);\n                    }\n                }\n            }\n        }\n    }\n", "code2": "    public void runDynusT(final boolean cleanUp) {\n        final String[] exeFiles = new String[] { \"DynusT.exe\", \"DLL_ramp.dll\", \"Ramp_Meter_Fixed_CDLL.dll\", \"Ramp_Meter_Feedback_CDLL.dll\", \"Ramp_Meter_Feedback_FDLL.dll\", \"libifcoremd.dll\", \"libmmd.dll\", \"Ramp_Meter_Fixed_FDLL.dll\", \"libiomp5md.dll\" };\n        final String[] modelFiles = new String[] { \"network.dat\", \"scenario.dat\", \"control.dat\", \"ramp.dat\", \"incident.dat\", \"movement.dat\", \"vms.dat\", \"origin.dat\", \"destination.dat\", \"StopCap4Way.dat\", \"StopCap2Way.dat\", \"YieldCap.dat\", \"WorkZone.dat\", \"GradeLengthPCE.dat\", \"leftcap.dat\", \"system.dat\", \"output_option.dat\", \"bg_demand_adjust.dat\", \"xy.dat\", \"TrafficFlowModel.dat\", \"parameter.dat\" };\n        log.info(\"Creating iteration-directory...\");\n        File iterDir = new File(this.tmpDir);\n        if (!iterDir.exists()) {\n            iterDir.mkdir();\n        }\n        log.info(\"Copying application files to iteration-directory...\");\n        for (String filename : exeFiles) {\n            log.info(\"  Copying \" + filename);\n            IOUtils.copyFile(new File(this.dynusTDir + \"/\" + filename), new File(this.tmpDir + \"/\" + filename));\n        }\n        log.info(\"Copying model files to iteration-directory...\");\n        for (String filename : modelFiles) {\n            log.info(\"  Copying \" + filename);\n            IOUtils.copyFile(new File(this.modelDir + \"/\" + filename), new File(this.tmpDir + \"/\" + filename));\n        }\n        for (File f : new File(this.modelDir).listFiles()) {\n            if (f.getName().toLowerCase(Locale.ROOT).endsWith(\".dws\")) {\n                log.info(\"  Copying \" + f.getName());\n                IOUtils.copyFile(f, new File(this.tmpDir + \"/\" + f.getName()));\n            }\n        }\n        String logfileName = this.tmpDir + \"/dynus-t.log\";\n        String cmd = this.tmpDir + \"/DynusT.exe\";\n        log.info(\"running command: \" + cmd + \" in directory \" + this.tmpDir);\n        int timeout = 7200;\n        int exitcode = ExeRunner.run(cmd, logfileName, timeout, this.tmpDir);\n        if (exitcode != 0) {\n            throw new RuntimeException(\"There was a problem running Dynus-T. exit code: \" + exitcode);\n        }\n        if (cleanUp) {\n            for (String filename : exeFiles) {\n                log.info(\"  Deleting \" + filename);\n                new File(this.tmpDir + \"/\" + filename).delete();\n            }\n        }\n    }\n", "label": 1, "substitutes": {"download": [" downloads", " recover", "file", "delete", " drop", " upload", " restore", "export", " seek", "copy", "open", " browse", "Download", "write", "dump", " downloaded", "paste", " Download", "get", "init", " checkpoint", "upload", " retrieve", "load", "save", " dump", " zip", " downloading"], "fileName": ["FILEPath", "fileTime", " fileFilename", " filename", "projectFilename", "FILEName", " fileType", "FILEFilename", "filename", "imagePath", "resourceName", "projectPath", "projectName", "resourcePath", "FilePath", "FILEname", "FileName", "fileFilename", "resourceType", "FileType", "imageName", "fileType", " fileTime", "resourceTime", "FileTime", "projectname"], "filePath": ["FILEPath", "languageName", "fileId", "fileUrl", "ileP", "fileP", "ilePath", "FILEpath", "FILEName", "FILEP", "resourceUrl", "fileStart", " fileId", "FileStart", "filepath", "resourceName", "languagePath", "resourcePath", "FilePath", "languageId", "FileId", "FILEStart", "FileName", " filepath", "FileP", "FILEUrl", "resourcepath", " fileUrl", "ileStart", "ileName"], "in": ["local", "win", "ln", "en", "id", "io", "sin", "is", "inf", "st", "up", "al", "cin", "from", "mi", "re", "r", "ini", "IN", "n", "i", "inc", "inner", "pi", "inside", "m", "ar", "on", "f", "o", "iter", "net", "din", "init", "input", "isin", "ind", "ie", "read", "gin", "im", "In", "one", "or", "ai", "el", "ins", "rin", "l", "login", "it", "bin", "nin", "ain", "co", "con", "inn"], "out": ["v", "cos", "op", "at", "outs", "file", "not", "p", "OU", "io", "t", "conv", "po", "nt", "ion", "obj", "aos", "up", "no", "output", "we", "null", "n", "to", "ex", "i", "write", "boot", "inner", "gt", "outer", "ns", "on", "o", "note", "net", "end", "oss", "conn", "cn", "user", "ch", "client", "name", "sys", "con", "OUT", "or", "Out", "na", "it", "ent", "nin", "ou", "ne", "can", "co", "os", "w"]}}
{"id1": "7945594", "id2": "14038176", "code1": "    public static void fileDownload(String fAddress, String destinationDir) {\n        int slashIndex = fAddress.lastIndexOf('/');\n        int periodIndex = fAddress.lastIndexOf('.');\n        String fileName = fAddress.substring(slashIndex + 1);\n        URL url;\n        try {\n            url = new URL(fAddress);\n            URLConnection uc = url.openConnection();\n            BufferedReader in = new BufferedReader(new InputStreamReader(uc.getInputStream()));\n            File file = new File(destinationDir + \"/download.pdf\");\n            FileOutputStream fos = new FileOutputStream(file);\n            BufferedWriter out = new BufferedWriter(new OutputStreamWriter(fos));\n            int inputLine;\n            while ((inputLine = in.read()) != -1) out.write(inputLine);\n            in.close();\n        } catch (Exception ex) {\n            Logger.getLogger(UrlDownload.class.getName()).log(Level.SEVERE, null, ex);\n        }\n    }\n", "code2": "    public static String fetchUrl(String urlString) {\n        try {\n            URL url = new URL(urlString);\n            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));\n            String line = null;\n            StringBuilder builder = new StringBuilder();\n            while ((line = reader.readLine()) != null) {\n                builder.append(line);\n            }\n            reader.close();\n            return builder.toString();\n        } catch (MalformedURLException e) {\n        } catch (IOException e) {\n        }\n        return \"\";\n    }\n", "label": 1, "substitutes": {"fileDownload": [" filedownload", "urldownload", "urlDownload", "Filedownload", "fileUpdate", "fileGet", "FileGet", "FileUpdate", "urlGet", "urlUpdate", " fileUpdate", " fileGet", "filedownload", "FileDownload"], "fAddress": ["FOrder", "fdAddress", "fiaddress", "fiAddress", "eOrder", "sfAddress", "sfOrder", "eAddress", "fmPart", "pURI", "pValue", "xfValue", "fAdmin", "fURL", "xfLocation", "fiAlias", "vDomain", "FAdd", "fAlias", "xfDomain", "feOrder", "fValue", "vaddress", "fOrder", "sfPart", "FAdmin", "hAddress", "fAdd", "vLocation", "fdAlias", " fAlias", " fURL", "pAdd", "fiURL", "hAdd", "fPart", "fURI", "feAdmin", "eAdmin", "FPart", "fContact", "fdURL", "xfaddress", "eAdd", " fAdd", "xfAdd", "fDomain", "fdAdd", "vAddress", "fiDomain", "pAddress", "fiLocation", "FContact", "fmOrder", "fiAdd", "fLocation", "hValue", "FAddress", "fmAddress", "sfContact", "feAdd", "fmContact", "feAddress", "faddress", "xfAddress", "xfURI", "hURI"], "destinationDir": ["destinationDirectory", "declificationFolder", "destificationDirector", "DestificationFolder", "destificationFolder", "DestificationDirector", "destinationsDir", "destinedDir", "destinationdir", "destarationDir", "destinationFolder", "declinationDirectory", "declificationDirectory", "destineddir", "declificationDir", "Destinationdir", "DestinationFolder", "destarationFolder", "destarationdir", "declificationdir", "destinationsdir", "DestinationDir", "destinationsFolder", "DestificationDir", "destificationdir", "destinedFolder", "Destificationdir", "destificationDirectory", "destinationsDirectory", "DestinationDirector", "destacementFolder", "destinedDirector", "declinationFolder", "destarationDirector", "declinationdir", "destinationDirector", "destificationDir", "declinationDir", "destacementDir", "destacementDirectory", "destacementdir"], "slashIndex": ["slashesPosition", "slashesInd", "fllashIndex", "slashInd", "flashPosition", "flashInd", "swashNumber", "slashesindex", "slugPosition", "flashindex", "fllashInd", "slashindex", "slasherPosition", "slashCount", "slashedPosition", "swasherNumber", "sllashInd", "slashedNumber", "slugIndex", "sllashPosition", "swashPosition", "fllashPosition", "slashedCount", "slashNumber", "sllashCount", "slasherIndex", "sllashIndex", "slashPosition", "swasherCount", "slasherCount", "slashedIndex", "slugindex", "swasherIndex", "slugInd", "slashesIndex", "slasherNumber", "fllashindex", "sllashNumber", "swashCount", "swashIndex", "sllashindex", "flashIndex", "swasherPosition"], "periodIndex": ["tickCounter", "periodPosition", "dollarCounter", "periodCounter", "dollarMax", "pieMax", "dollarPosition", "pieIndex", "tickIndex", "dollarIndex", "pieCounter", "piePosition", "tickMax", "tickPosition", "periodMax"], "fileName": ["FileInfo", "Filename", "fileInfo", " fileInfo", " fileKey", "filename", "pageName", "FileKey", " filename", "pagename", "pageKey", "FileName", "pageInfo", "fileKey"], "url": ["build", "sl", "gl", "address", "Url", "ret", "str", "nl", "mail", "char", "browser", "re", "r", "ll", "pl", "https", "ssl", "link", "uri", "base", "rel", "URL", "job", "web", "cl", "com", "loc", "raw", "ur", "conn", "github", "impl", "cert", "ml", "un", "u", "client", "util", "bel", "http", "www", "hl", "rl", "or", "mount", "el", "l", "xml", "il", "cal", "org", "con", "ul"], "uc": ["mc", "cur", "auc", "fc", "unc", "anc", "cu", "oc", "lc", "ucc", "c", "cr", "ci", "cc", "cl", "sc", "loc", "usc", "userc", "cus", "dc", "nc", "soc", "ub", "uu", "UC", "ux", "rc", "us", "uf", "tc", "ec", "um", "bc", "co", "con", "ul"], "in": ["ln", "mc", "ic", "en", "io", "is", "inf", "al", "cin", "conf", "reader", "r", "re", "IN", "inc", "i", "inner", "ze", " din", "f", "on", "iter", "din", "init", "isin", "input", "ind", "mm", "read", "gin", "In", "and", "ins", "rin", "l", "it", "bin", "il", "body", "ill", "con", "inn"], "file": ["local", "path", "pdf", "log", "fil", "io", "resource", "FILE", "print", "ile", "po", "File", "output", "model", "filename", "view", "to", "port", "piece", "zip", "f", "base", "form", "table", "result", "page", "message", "format", "db", "fp", "document", "name", "spec", "data", "fo", "image", "handle", "task", "type"], "fos": ["flof", "Fos", " fof", "fios", "woss", " foes", "tOS", "fof", " fios", "flios", "foss", "wOS", "foes", "to", "flos", "tos", "toss", "Foes", "Fios", "floes", "Fo", "fo", "wo", "Fof", "fOS", "FOS", "wos", "Foss"], "out": ["os", "v", "cos", "at", "OU", "io", "crit", "print", "st", "conv", "nt", "ot", "output", "flush", "inv", "conf", "to", "ex", "n", "inner", "write", "outer", "dis", "o", "set", "net", "end", "all", "writer", "gr", "OUT", "Out", "sum", "it", "g", "ou", "outs", "news", "co", "con", "w"], "inputLine": [" inputRow", "inLINE", "inputBlock", "Inputline", "inCode", "submitLINE", " inputBlock", " inputline", "InputRow", "configline", "inputFile", "inputline", "inputRow", "textLINE", "InputFile", "inRow", "inputLINE", " inputCode", "submitLine", "configFile", "inputCode", "textCode", "InputBlock", "configRow", "textLine", "InputLINE", "submitBlock", "textRow", "InputLine", " inputLINE", "configLine", "inLine", " inputFile", "submitRow"]}}
{"id1": "14598566", "id2": "6421904", "code1": "    public static void copyFileByNIO(File in, File out) throws IOException {\n        FileChannel sourceChannel = new FileInputStream(in).getChannel();\n        FileChannel destinationChannel = new FileOutputStream(out).getChannel();\n        sourceChannel.transferTo(0, sourceChannel.size(), destinationChannel);\n        sourceChannel.close();\n        destinationChannel.close();\n    }\n", "code2": "    public DataRecord addRecord(InputStream input) throws DataStoreException {\n        File temporary = null;\n        try {\n            temporary = newTemporaryFile();\n            DataIdentifier tempId = new DataIdentifier(temporary.getName());\n            usesIdentifier(tempId);\n            long length = 0;\n            MessageDigest digest = MessageDigest.getInstance(DIGEST);\n            OutputStream output = new DigestOutputStream(new FileOutputStream(temporary), digest);\n            try {\n                length = IOUtils.copyLarge(input, output);\n            } finally {\n                output.close();\n            }\n            DataIdentifier identifier = new DataIdentifier(digest.digest());\n            File file;\n            synchronized (this) {\n                usesIdentifier(identifier);\n                file = getFile(identifier);\n                if (!file.exists()) {\n                    File parent = file.getParentFile();\n                    parent.mkdirs();\n                    if (temporary.renameTo(file)) {\n                        temporary = null;\n                    } else {\n                        throw new IOException(\"Can not rename \" + temporary.getAbsolutePath() + \" to \" + file.getAbsolutePath() + \" (media read only?)\");\n                    }\n                } else {\n                    long now = System.currentTimeMillis();\n                    if (getLastModified(file) < now + ACCESS_TIME_RESOLUTION) {\n                        setLastModified(file, now + ACCESS_TIME_RESOLUTION);\n                    }\n                }\n                if (file.length() != length) {\n                    if (!file.isFile()) {\n                        throw new IOException(\"Not a file: \" + file);\n                    }\n                    throw new IOException(DIGEST + \" collision: \" + file);\n                }\n            }\n            inUse.remove(tempId);\n            return new FileDataRecord(identifier, file);\n        } catch (NoSuchAlgorithmException e) {\n            throw new DataStoreException(DIGEST + \" not available\", e);\n        } catch (IOException e) {\n            throw new DataStoreException(\"Could not add record\", e);\n        } finally {\n            if (temporary != null) {\n                temporary.delete();\n            }\n        }\n    }\n", "label": 1, "substitutes": {"copyFileByNIO": ["copyFileByStandardIR", "copyFileByStandardIO", "copyFileBynIO", "copyFileByNDII", "copyFileByStandardio", "copyFilebyNio", "copyFileByNIR", "copyFileBynio", "copyFilebynio", "copyFilebyNII", "copyFileByStandardII", "copyFilebynIO", "copyFileByNDIR", "copyFilebyNIR", "copyFileByNDIO", "copyFilebyNIO", "copyFilebynII", "copyFileByNio", "copyFileByNII", "copyFileBynII", "copyFileBynIR", "copyFileByNDio", "copyFilebynIR"], "in": ["ic", "en", "id", "b", "old", "is", "st", "up", "cin", "from", "edIn", "IN", "inc", "i", "ar", "on", "as", "o", "din", "vin", "isin", "input", "ind", "mm", "gin", "source", "In", "el", "ins", "rin", "l", "it", "sql", "inn"], "out": ["err", "v", "serv", "op", "at", "log", "str", "io", "b", "po", "t", "ot", "nt", "output", "ex", "n", "null", "check", "to", "gt", "o", "net", "s", "oss", "ch", "u", "OUT", "Out", "l", "it", "g", "ou", "outs", "ne", "os", "w"], "sourceChannel": ["ourceChannel", "seedButton", " sourceProvider", "sourceChan", "srcProvider", "sourceButton", " sourceConnection", " sourceChain", "givenListener", "srcMessage", "SourceChannel", "sourceCategory", "sourceProvider", " sourceListener", "seedCategory", "srcChan", "ourceConnection", "Sourcechannel", "seedChannel", "sourceConnection", "parseCategory", " sourceChan", "srcCategory", "givenProvider", " sourceMessage", "givenChannel", "ourceChan", "SourceListener", "parseChannel", "sourceChain", "srcMember", "ourceListener", "ourceChain", " sourcechannel", "seedMember", "srcChain", "srcChannel", "srcListener", "givenMessage", "parseButton", "srcButton", "srcConnection", "sourceMember", "SourceConnection", "sourcechannel", "parseMember", "sourceListener", "ourcechannel", "sourceMessage"], "destinationChannel": ["destationConnection", "destructionConnection", "DestinationConnector", " destationComponent", "destensionChan", "destationStream", "DestationStream", "DestinatorConnection", "destensionClient", "destinatedChannel", " destinationConnection", " destationConnection", "destinationStream", "destationComponent", "destinatorChan", "DestinationConnection", "DestinationChannel", "destinatorClient", "destationConnector", "destensionConnection", "destinationsConnection", "DestinationStream", "destructionChannel", " destationChan", "DestinatorChan", " destationChannel", "destinationClient", "DestationConnector", "destationChannel", "destinationConnector", "DestationChan", " destinationComponent", "DestinatorChannel", "destinationsComponent", "destinationsChan", " destinationChan", "DestinationChan", "destationClient", "destinatorConnection", "destationChan", "destensionChannel", "destinationsChannel", "DestinatorClient", "destructionComponent", "destinationChan", "destinationComponent", "destinatedStream", "destinatedChan", "destructionChan", "destinatedConnector", "destinationConnection", "destensionStream", "destensionConnector", "DestationChannel", "destinatorChannel", "DestinationClient"]}}
{"id1": "5744493", "id2": "344764", "code1": "    protected void onlyFileCopy(File in, File out) throws IOException {\n        FileChannel inChannel = new FileInputStream(in).getChannel();\n        FileChannel outChannel = new FileOutputStream(out).getChannel();\n        try {\n            int maxCount = (1024 * 1024 * 64) - (1024 * 32);\n            long size = inChannel.size();\n            long pos = 0;\n            while (pos < size) {\n                pos += inChannel.transferTo(pos, maxCount, outChannel);\n            }\n        } catch (IOException e) {\n            throw e;\n        } finally {\n            if (inChannel != null) inChannel.close();\n            if (outChannel != null) outChannel.close();\n        }\n    }\n", "code2": "    static HttpURLConnection connect(String url, String method, String contentType, String content, int timeoutMillis) throws ProtocolException, IOException, MalformedURLException, UnsupportedEncodingException {\n        HttpURLConnection conn = (HttpURLConnection) (new URL(url).openConnection());\n        conn.setRequestMethod(method);\n        conn.setConnectTimeout(timeoutMillis);\n        byte[] bContent = null;\n        if (content != null && content.length() > 0) {\n            conn.setDoOutput(true);\n            conn.setRequestProperty(\"Content-Type\", contentType);\n            bContent = content.getBytes(\"UTF-8\");\n            conn.setFixedLengthStreamingMode(bContent.length);\n        }\n        conn.connect();\n        if (bContent != null) {\n            OutputStream os = conn.getOutputStream();\n            os.write(bContent);\n            os.flush();\n            os.close();\n        }\n        return conn;\n    }\n", "label": 0, "substitutes": {"onlyFileCopy": [" doFileCopy", " doFileDownload", " synchronizedFullMove", " doFileMove", " synchronizedFullCopy", " synchronizedFileDownload", " synchronizedFileCopy", " doStreamMove", " doPageMove", " doStreamDownload", " doPageCopy", " synchronizedFullDownload", " synchronizedFileMove", " doFullMove", " doPageDownload", " doFullCopy", " doStreamCopy", " doFullDownload"], "in": ["ic", "file", "en", "b", "old", "inf", "up", "cin", "from", "r", "ex", "IN", "inc", "i", "n", "o", "as", "din", "ck", "init", " input", "isin", "input", "ind", "mm", "gin", "source", "In", "or", "el", "ac", "ins", "rin", "l", "it", "ain", "inn"], "out": ["v", "serv", "op", "at", "log", "file", "p", "io", "help", "t", "po", "up", "nt", "ot", "output", "c", "null", "n", "ex", "check", "to", "write", "res", "gt", "o", "as", "net", "s", "ch", "OUT", "Out", "l", "it", "ou", "outs", "ne", "os", "w"], "inChannel": ["inConnection", "outChan", "InChan", " inConnection", " inButton", " inCase", " inCategory", "innCommand", "InCh", "innChannel", "innerStream", "inCommand", "INChan", " inchannel", " inCh", "outCh", "dinChan", "inCategory", "dinButton", "inCase", "dinConnection", "inButton", "inStream", "INchannel", "cinCommand", "inCh", "isinConnection", " inChan", "outStream", "INChannel", "isinChan", "innCategory", "INStream", "innerChannel", "dinCommand", "vinCase", "outchannel", "innButton", "inChan", "inchannel", "isinButton", "cinButton", "dinChannel", "dinCase", "InChannel", " inCommand", "cinChannel", "vinConnection", "innerChan", "Inchannel", "innerchannel", "vinCommand", "isinChannel", "cinCategory", "vinChannel"], "outChannel": ["aosMachine", "outChan", "upSection", "outerChannel", " outRoom", "outputChannel", "onChan", "upChannel", "OutStream", "outConnection", "OutChan", "cosMachine", "aosDisk", "outerChan", "outCh", "outerStream", " outStream", "onchannel", "onChannel", "newChannel", "upDisk", "inRoom", "outDisk", "inStream", " outChan", "onConnection", "OutChannel", "outputStream", "upMachine", "aosSection", "outSection", "cosSection", "outStream", "cosChannel", "newchannel", " outCh", "outchannel", "outMachine", "inChan", "OutCh", "outRoom", "outputCh", "outputChan", "newConnection", " outchannel", "cosDisk", " outConnection", "outerRoom", "newChan", "aosChannel"], "maxCount": ["minFlag", "maxLength", "MAXLength", " maxSize", "MaxCount", " maxFlag", "minSize", "minCount", "minCast", "minLength", "maxFlag", "maxSize", "MAXCount", "MaxCast", "maxCast", "MaxLength", " maxLength", "MAXFlag", "MaxSize", " maxCast"], "size": ["send", "sample", "bytes", "height", "show", "any", "ose", "speed", "Size", "fee", "length", "is", "count", "start", "position", "resolution", "total", "export", "scale", "si", "len", "range", "ize", "south", "write", "scroll", "duration", "area", "m", "close", "ze", "notice", "small", "set", "sd", "message", "ms", "sent", "capacity", "read", "seek", "name", "score", "readable", "shift", "keys", "shape", "sum", "SIZE", "empty", "equal", "body", "space", "gets"], "pos": ["pose", "cos", "pt", "p", "Pos", "pro", "point", "part", "length", "po", "start", "position", "row", "slot", "no", "pg", "limit", "left", "len", "index", "to", "n", "i", "pl", "port", "pi", "o", "rel", "ps", "def", "seq", "loc", "Position", "sp", "coord", "page", "pass", "pid", "doc", "exp", "offset", "POS", "spec", "zero", "pr", "x", "pointer", "l", "it", "resp", "pc", "off", "os"]}}
{"id1": "5436973", "id2": "20588811", "code1": "    public String httpToStringStupid(String url) throws IllegalStateException, IOException, HttpException, InterruptedException, URISyntaxException {\n        String pageDump = null;\n        getParams().setParameter(ClientPNames.COOKIE_POLICY, org.apache.http.client.params.CookiePolicy.BROWSER_COMPATIBILITY);\n        getParams().setParameter(HttpConnectionParams.SO_TIMEOUT, getPreferenceService().getSearchSocketTimeout());\n        HttpGet httpget = new HttpGet(url);\n        httpget.getParams().setParameter(HttpConnectionParams.SO_TIMEOUT, getPreferenceService().getSearchSocketTimeout());\n        HttpResponse response = execute(httpget);\n        HttpEntity entity = response.getEntity();\n        pageDump = IOUtils.toString(entity.getContent(), \"UTF-8\");\n        return pageDump;\n    }\n", "code2": "    public void run() {\n        long time = System.currentTimeMillis();\n        logger.info(\"Version: \" + version);\n        String hostname = properties.getProperty(\"mercuriushost\");\n        String protocol = properties.getProperty(\"mercuriusprotocol\");\n        String port = properties.getProperty(\"mercuriusport\");\n        String path = properties.getProperty(\"mercuriuspath\");\n        String action = properties.getProperty(\"mercuriusaction\");\n        logger.info(\"Getting Timex Data --- \" + getTimeDifferent(time));\n        String xml = timexfrmk.getUnsynchedSessionsXMLFormat();\n        logger.info(\"Done getting Timex Data --- \" + getTimeDifferent(time));\n        if (timexfrmk.getSessionCount() > 0) {\n            try {\n                logger.info(\"Sending Timex Data to Mercurius --- \" + getTimeDifferent(time));\n                String data = URLEncoder.encode(\"action\", \"UTF-8\") + \"=\" + URLEncoder.encode(action, \"UTF-8\");\n                data += \"&\" + URLEncoder.encode(\"data\", \"UTF-8\") + \"=\" + URLEncoder.encode(xml, \"UTF-8\");\n                if (isAdminFeedKeySet()) {\n                    data += \"&\" + URLEncoder.encode(\"adminfeedkey\", \"UTF-8\") + \"=\" + URLEncoder.encode(adminfeedkey, \"UTF-8\");\n                    logger.debug(\"Using adminfeedkey to authenticate\");\n                } else {\n                    Authenticator.setDefault(new CustomAuthenticator(user, password));\n                    logger.debug(\"Using user/pwd to authenticate\");\n                }\n                String u = protocol + \"://\" + hostname + \":\" + port + path;\n                logger.debug(\"Posting xml data to: \" + u);\n                URL url = new URL(u);\n                URLConnection conn = url.openConnection();\n                conn.setRequestProperty(\"User-Agent\", \"TimexMercurius/\" + version);\n                conn.setDoOutput(true);\n                OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());\n                wr.write(data);\n                wr.flush();\n                BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n                String line;\n                StringBuffer s = new StringBuffer();\n                while ((line = rd.readLine()) != null) {\n                    s.append(line);\n                }\n                if (s.length() > 0) {\n                    logger.debug(s.toString());\n                    if (s.toString().indexOf(\"Result:\") != -1) {\n                        logger.info(s.toString().substring(s.toString().indexOf(\"Result:\")));\n                        if (s.toString().indexOf(\"Result: Successful\") != -1) {\n                            timexfrmk.updateSessionsStatus();\n                        }\n                    } else {\n                        logger.error(s.toString());\n                    }\n                } else {\n                    logger.info(\"No data returned\");\n                }\n                wr.close();\n                rd.close();\n            } catch (MalformedURLException e) {\n                logger.error(e);\n                logger.trace(e, e);\n            } catch (IOException e) {\n                logger.error(e);\n                logger.trace(e, e);\n            } catch (Exception e) {\n                logger.error(e);\n                logger.trace(e, e);\n            }\n        } else {\n            logger.info(\"There is nothing to send.  Everything has already been synchronized\");\n        }\n        timexfrmk.close();\n        logger.info(\"Done!!! Total Time: \" + getTimeDifferent(time));\n    }\n", "label": 0, "substitutes": {"httpToStringStupid": ["httpToStringUupid", "httpToStringUuff", "httpToStringRestuid", "httpToStringStuff", "httpToStringUuid", "httpToStringStuid", "httpToStringRestamp", "httpToStrUuid", "httpToStringSnupid", "httpToStrUamp", "httpToStringSnuid", "httpToStringRestupid", "httpToStringUamp", "httpToStrStuid", "httpToStringRestuff", "httpToStrUuff", "httpToStrStupid", "httpToStringSnamp", "httpToStrStuff", "httpToStrStamp", "httpToStringSnuff", "httpToStrUupid", "httpToStringStamp"], "url": ["path", "address", "string", "file", "Url", "p", "ret", "str", "id", "b", "char", "ls", "dl", "i", "pl", "pattern", "ll", "host", "https", "ssl", "link", "location", "uri", "base", "server", "URL", "web", "page", "loc", "result", "out", "ur", "name", "u", "http", "key", "password", "l", "ref", "ul"], "IOException": [" IOError", "TimeoutException", "IOError", "ioException", "TimeoutError", "ioError"], "HttpException": ["RuntimeException", "HttpError", "HTTPException", "HTTPError", "RuntimeError", "httpException", "httpError"], "InterruptedException": ["InterruptionError", "InterinterruptedEx", "InterruptEx", "InterruptException", "InterinterruptedException", "InterruptError", "InterruptionEx", " InterruptedError", " InterruptException", "InterruptedError", " InterruptedEx", " InterruptError", "InterruptionException", "InterruptedEx", "InterinterruptedError", " InterruptEx"], "URISyntaxException": ["URISyntixException", "URISyntntaxException", "URISyntntaxEx", "URISyntaxEx", "URISyntixWarning", "URISeticntaxWarning", "URISyntaxWarning", "URISeticaxEx", "URISeticntaxException", "URISyntntaxWarning", "URISeticaxWarning", "URISyntlexEx", "URISyntlexException", "URISeticntaxEx", "URISyntixEx", "URISeticaxException", "URISyntlexWarning"], "pageDump": ["pageStash", "pageDamp", "pageDumps", "pageSumps", "pagePdump", "pageDodump", "pagedumper", " pageDumper", "PageDumper", "pageddump", "PageDumps", " pageDdump", "PageDump", "pageStamp", "pageStdump", " pageDumps", "pageSump", "pageDumper", "pageDoumper", "pagePamp", " pageDamp", "pagedump", "pagedumps", "pageSumper", "PageDdump", "pageStump", "pageDdump", "pageSdump", "pagePash", "pageDoumps", "pageDoump", " pageDash", "pageDash", "pagePump"], "httpget": ["httpGet", "hoverGET", "Httppost", "HTTPcreate", " httpGET", "hoverGet", "ttpget", "httpcreate", " httpGet", "ttpfind", "ttpcall", "HTTPGet", " httpcreate", "httpcall", "Httpcall", "ttpcreate", "httpfind", "httppost", "HTTPfind", "Httpget", "HTTPget", " httpfind", "hovercreate", "ttppost", "Httpfind", "HTTPGET", "httpGET", " httpcall", "ttpGet", " httppost", "hoverget"], "response": ["description", "sequence", "given", "respond", "that", "remote", "onse", "event", "service", "still", "open", "Response", "output", "attribute", "content", "block", "connection", "res", "profile", "status", "resp", "result", "page", "message", "document", "frame", "successful", "object", "application", "answer", "report", "yes", "request", "pos", "json", "next", "reply", "body", "entry", "command"], "entity": ["address", "icon", "ce", "resource", "e", "obj", "event", "ity", "detail", "output", "ee", "model", "inv", "content", "email", "Entity", "person", "security", "encrypted", "pe", "result", "page", "voice", "environment", "activity", "ie", "document", "object", "comment", "line", "me", "image", "el", "metadata", "ITY", "group", "json", "ent", "existent", "unit", "body", "entry"]}}
{"id1": "21125261", "id2": "13666876", "code1": "    @Test\n    public void test() throws Exception {\n        InputStream is = this.getClass().getResourceAsStream(\"originAndDestination.xml\");\n        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\n        IOUtils.copy(is, byteArrayOutputStream);\n        TrafficModelDefinition def = MDFReader.read(byteArrayOutputStream.toByteArray());\n        TrafficSimulationEngine se = new TrafficSimulationEngine();\n        se.init(def);\n        int linkId = 2;\n        int segmentId = 0;\n        Map<Integer, Set<Integer>> linkSegments = new HashMap<Integer, Set<Integer>>();\n        Set<Integer> segments = new HashSet<Integer>();\n        segments.add(segmentId);\n        linkSegments.put(linkId, segments);\n        FrameProperties frameProperties = new FrameProperties(linkSegments, new HashSet<Integer>());\n        se.setFrameProperties(frameProperties);\n        for (float time = 0; time < 60 * 10; time += 0.1f) {\n            se.step(0.1f);\n            for (RoadObject vehicle : se.getDynamicObjects()) {\n                System.out.println(time + \": X=\" + vehicle.getPosition() + \"\\tV=\" + vehicle.getSpeed());\n            }\n        }\n    }\n", "code2": "    @Override\n    public String transformSingleFile(X3DEditorSupport.X3dEditor xed) {\n        Node[] node = xed.getActivatedNodes();\n        X3DDataObject dob = (X3DDataObject) xed.getX3dEditorSupport().getDataObject();\n        FileObject mySrc = dob.getPrimaryFile();\n        File mySrcF = FileUtil.toFile(mySrc);\n        File myOutF = new File(mySrcF.getParentFile(), mySrc.getName() + \".x3dv.gz\");\n        TransformListener co = TransformListener.getInstance();\n        co.message(NbBundle.getMessage(getClass(), \"Gzip_compression_starting\"));\n        co.message(NbBundle.getMessage(getClass(), \"Saving_as_\") + myOutF.getAbsolutePath());\n        co.moveToFront();\n        co.setNode(node[0]);\n        try {\n            String x3dvFile = ExportClassicVRMLAction.instance.transformSingleFile(xed);\n            FileInputStream fis = new FileInputStream(new File(x3dvFile));\n            GZIPOutputStream gzos = new GZIPOutputStream(new FileOutputStream(myOutF));\n            byte[] buf = new byte[4096];\n            int ret;\n            while ((ret = fis.read(buf)) > 0) gzos.write(buf, 0, ret);\n            gzos.close();\n        } catch (Exception ex) {\n            co.message(NbBundle.getMessage(getClass(), \"Exception:__\") + ex.getLocalizedMessage());\n            return null;\n        }\n        co.message(NbBundle.getMessage(getClass(), \"Gzip_compression_complete\"));\n        return myOutF.getAbsolutePath();\n    }\n", "label": 1, "substitutes": {"test": ["tests", "evaluate", "sample", " tests", "show", "fit", "debug", "t", " evaluate", "run", "server", "feature", "example", "read", " testing", " sample", "T", "load", "testing", "hello", "execute", "train", "Test", "unit", "launch", "volt"], "is": ["does", "serv", "isa", "ws", "sis", "in", "xs", "ls", "mis", "ais", "ri", "rs", "i", "ios", "has", "are", "sit", "fs", "es", "as", "ps", "IS", "ms", "s", "bs", "out", "lis", "its", "input", "ris", "sys", "tis", "ai", "Is", "xml", "us", "isi", "isc", "stream", "os", "iso"], "byteArrayOutputStream": ["byteArrayByteString", "byteArrayOutputForm", "byteStreamOutputStyle", "byteArrayOutputString", "byteStringInputString", "byteStringInputView", "byteStringoutputStream", "byteArrayoutputSteam", "byteArrayByteSteam", "byteStreamInputForm", "byteStringInputSteam", "byteArrayInputStream", "byteArrayInputForm", "byteArrayApplicationStream", "byteArray4String", "byteArrayOutputStyle", "byteStreamOutputForm", "byteStringoutputString", "byteArrayApplicationStyle", "byteStreamInputSteam", "byteArrayInputSteam", "byteArrayByteStream", "byteStreamInputStyle", "byteArrayApplicationSteam", "byteStreamOutputStream", "byteStreamInputStream", "byteArray4Steam", "byteArrayOutputView", "byteStringOutputView", "byteStringOutputForm", "byteArrayByteView", "byteArrayInputString", "byteArrayApplicationForm", "byteStringInputStream", "byteArrayInputStyle", "byteArrayoutputString", "byteStringOutputStream", "byteArrayoutputForm", "byteStringoutputSteam", "byteStreamOutputSteam", "byteStringoutputForm", "byteStringOutputString", "byteArray4View", "byteArrayByteForm", "byteStringOutputSteam", "byteArray4Stream", "byteArrayoutputStream", "byteArrayInputView", "byteArrayByteStyle", "byteArrayOutputSteam"], "def": ["d", "Def", "dec", "decl", "definition", "da", "des", "pro", "crit", "sche", "dict", "conf", "dl", "det", "ded", "define", "md", "desc", "DEF", "sd", "dal", "DE", "hd", "db", "ds", "cd", "Definition", "dem", "default", "df", "json", "del", "ef", "defined", "dev", "de"], "se": ["sec", "sl", "ae", "ade", "so", "sed", "ste", "ce", "e", "sche", "be", "ense", "te", "ese", "ase", "we", "ke", "ee", "he", "sem", "Se", "she", "sa", "ene", "ze", "ode", "es", "ge", "engine", "set", "ses", "su", "pe", "sd", "sp", "est", "sel", "ane", "parse", "see", "ie", "ide", "SE", "spe", "me", "ine", "le", "ser", "pse", "ve", "ne", "de", "sea"], "linkId": ["connectionIdent", "lineId", "chainID", " linkName", "lineName", " linkid", "LinkId", "lineid", " linkID", "linkIdent", "LinkID", "linkid", "linkName", "linkID", "linkedID", "lineID", "linkedIdent", "linkedId", "LinkName", "Linkid", "connectionID", "connectionId", "chainIdent", "chainId"], "segmentId": ["begroupById", "idegmentid", "begroupName", "begroupId", "segroupById", "segementid", "semissionid", "begmentById", "idegmentName", "idegmentRef", "segmentRef", "segmentID", "sementid", "segementName", "idegementName", "sementID", "begroupID", "segementID", "segroupName", "segmentName", "begmentId", "segementById", "sementById", "idegementRef", "segroupId", "sementName", "begmentID", "segmentid", "idegmentId", "begmentName", "sementRef", "semissionName", "sementId", "idegementid", "segementRef", "segroupID", "idegementId", "semissionId", "semissionRef", "segementId", "segmentById"], "linkSegments": ["linkConnectables", "linkBuildroups", "linkFragments", " linkSeggments", " linkGroups", "linkBuildets", " linkSegets", " linkBuildets", " linkSegables", "linkThreadroups", "linkParments", " linkSeglements", " linkThreadlements", "linkConnectets", "linkGment", "linkSegables", "linkSegroups", " linkThreadroups", " linkSegment", "linkSements", "linkParlements", "linkConnectlements", " linkBuildables", "linkConnectroups", "linkBuildgments", " linkSegroups", "linkSegets", "linkConnectgments", " linkThreadgments", "linkGments", "linkParroups", "linkSegment", "linkSeglements", "linkSeables", "linkFragroups", "linkThreadgments", "linkGgments", "linkThreadlements", "linkSeets", "linkConnectments", " linkThreadments", "linkFraggments", "linkFragment", "linkBuildment", "linkBuildments", " linkBuildgments", " linkGgments", "linkBuildables", " linkGment", "linkPargments", " linkBuildments", " linkGments", "linkThreadments", "linkSeggments", "linkGroups"], "segments": ["usegments", "parsements", "vectors", "mements", "velements", " Seges", "segs", " segs", "vements", "sevals", "megments", " Sevals", "parsectors", "parselements", " selements", " sevals", "megins", " seges", "usements", "megs", "parsegments", "usegins", "begments", "sements", "sectors", "bevals", " sectors", " Sements", "beges", "bements", "vegments", "selements", " sements", "seges", "usegs", " segins", " Segments", "segins"], "frameProperties": ["framePrps", " frameByilities", "frameParps", "framePropilities", "frameProrics", " frameByperties", "frameParrics", " framePrps", "framePropperties", "framePrperties", "frameByptions", " framePrrics", " frameByptions", " frameProrics", "frameProfps", " frameProilities", "frameProps", "frameProilities", "framePropps", "frameByps", "framePrptions", "frameComrics", "frameComptions", "frameProptions", "frameComps", "framePropptions", "frameProfperties", "frameParperties", " framePrptions", "frameParptions", "frameByperties", " frameByps", " frameProptions", " framePrperties", "framePrrics", "frameProfilities", " frameProps", "frameProfptions", "frameComperties", "frameByilities"], "time": ["system", "sequence", "step", "TIME", "timer", "transform", "before", "speed", "length", "point", "t", "count", "start", "event", "context", "total", "runtime", "frequency", "ts", "check", "trust", "clock", "rate", "money", "estamp", "duration", "delay", "times", "size", "set", "trace", "message", "counter", "think", "each", "date", "ime", "second", "slow", "Time", "tim", "x", "etime", "distance", "value", "version", "window", "task", "depth", "year", "tx", "tt", "now", "timeout"], "vehicle": ["verogram", "verocity", "vehic", "heroicles", "heroocity", "vertocity", "verendor", "yardicle", "Vehocity", "survendor", " vehICLE", "Vehicles", "ventic", " vehicles", "verticle", "yardendor", "venticles", "vericle", "survicle", "verticles", "heroicle", "vehocity", "vehICLE", "yardogram", "venticle", "survocity", "vehicles", "vehendor", "Vehicle", "yardocity", "vertic", "VehICLE", "survogram", "vehogram", "ventocity", "Vehic", " vehocity", "heroICLE"]}}
{"id1": "5977352", "id2": "13891080", "code1": "    public static void copyFile(File src, File dest, int bufSize, boolean force) throws IOException {\n        if (dest.exists()) if (force) dest.delete(); else throw new IOException(\"Cannot overwrite existing file: \" + dest.getName());\n        byte[] buffer = new byte[bufSize];\n        int read = 0;\n        InputStream in = null;\n        OutputStream out = null;\n        try {\n            in = new FileInputStream(src);\n            out = new FileOutputStream(dest);\n            while (true) {\n                read = in.read(buffer);\n                if (read == -1) break;\n                out.write(buffer, 0, read);\n            }\n        } finally {\n            if (in != null) try {\n                in.close();\n            } finally {\n                if (out != null) out.close();\n            }\n        }\n    }\n", "code2": "    public static void copyFile(File srcFile, File destFile) throws IOException {\n        logger.debug(\"copyFile(srcFile={}, destFile={}) - start\", srcFile, destFile);\n        FileChannel srcChannel = new FileInputStream(srcFile).getChannel();\n        FileChannel dstChannel = new FileOutputStream(destFile).getChannel();\n        try {\n            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n        } finally {\n            srcChannel.close();\n            dstChannel.close();\n        }\n    }\n", "label": 1, "substitutes": {"copyFile": ["copyfile", "cpFiles", " cpFiles", "cpFolder", " cpFolder", " cpfile", "copyFiles", " copyfile", " copyFolder", "cpFile", " cpFile", "cpfile", "copyFolder", " copyFiles"], "src": ["sec", "sr", "sq", "cur", "ctr", "orig", "st", "start", "SOURCE", "from", "rs", "img", "sit", "sf", "rel", "sc", "Source", "sb", "loc", "ipl", "init", "usr", "req", "via", "input", "sys", "source", "rest", "rl", "cont", "rc", "ser", "ins", "pkg", "inst"], "dest": ["master", "foreign", "trans", "them", "decl", "dir", "dat", "txt", "cat", "parent", "orig", "test", "st", "Dest", "nt", "de", "target", "copy", "tif", "nom", "cp", "null", "good", "port", "gt", "sit", "origin", "opt", "desc", "result", "th", "est", "sp", "tmp", "loc", "comp", "usr", " dst", "nw", "mk", "name", "spec", "etc", "end", "dist", "rest", "source", "cont", "self", "comb", "tom", "del", "none", "temp", "coord", "lit"], "bufSize": ["bufSIZE", "bufNum", "ufSIZE", " bufLen", "bcLen", " bufferSize", "fontNum", " bufNum", "ufNum", "bcSize", "fontSIZE", "bcSIZE", "fontSize", "ufLen", "bcNum", " bufferNum", "ufSize", " bufferSIZE", "bufLen", " bufSIZE"], "force": ["allow", "send", "apply", "forge", "always", "ce", "replace", "print", "only", "remote", "fill", "rule", "forcing", " Force", "forces", "safe", "check", "write", "quote", "auto", "kill", "require", "close", "f", "base", "form", "stall", "fast", "draw", "forced", "Force", "frame", "error", "reset", "use", "flag", "raise", "enable", "default", "cmd", "co", "command"], "buffer": ["text", "sample", "batch", "number", "binary", "sequence", "variable", "queue", "print", "length", "history", "row", "stack", "phrase", "device", "total", "limit", "attribute", "view", "word", "library", "block", "mem", "quote", "base", "table", "paste", "buff", "message", "tree", "document", "frame", "template", "comment", "memory", "shape", "window", "cache", "buf", "Buffer", "temp", "display", "command"], "read": ["text", "allow", "send", "scan", "height", "str", "print", "before", "length", "t", "count", "start", "bind", "row", "record", "fill", "run", "open", "reader", "len", "r", "index", "range", "word", "check", "query", "write", "i", "feed", "wait", "valid", "through", "iter", "set", "pe", "connect", "end", "READ", "get", "raw", "reads", "pass", "q", "req", "parse", "push", "input", "ind", "readable", "load", "im", "give", "add", "reading", "Read", "hello", "need", "shape", "request", "hold", " Read", "next", "stream", "find", "w", "size"], "in": ["local", "ln", "irm", "ic", "en", "sin", "is", "inf", "t", "per", "up", "internal", "al", "cin", "from", "mi", "ini", "IN", "inc", "i", "check", "inner", "n", "inside", "m", "ar", "on", "o", "iter", "ma", "din", "get", "init", "cn", "doc", "all", "input", "isin", "ind", "ie", "mm", "gin", "include", "im", "In", "source", "or", "ins", "rin", "l", "it", "info", "bin", "ain", "co", "con", "inn"], "out": ["ln", "v", "cos", "op", "again", "at", "outs", "file", "not", "io", "oe", "b", "t", "obj", "conv", "ot", "nt", "up", "aos", "output", "flush", "to", "n", "ex", "write", "inner", "gt", "on", "outer", "o", "ns", "br", "net", "end", "oss", "conn", "cn", "ch", "all", "writer", "om", "mit", "client", "sys", "con", "OUT", "one", "or", "Out", "list", "l", "sum", "cache", "it", "g", "ent", "cmd", "ou", "ne", "can", "co", "os"]}}
{"id1": "11305840", "id2": "22855019", "code1": "    public boolean setUpdateCliente(int IDcliente, String nombre, String paterno, String materno, String ocupacion, String rfc) {\n        boolean update = false;\n        try {\n            stm = conexion.prepareStatement(\"update clientes set nombre='\" + nombre.toUpperCase().trim() + \"' , paterno='\" + paterno.toUpperCase().trim() + \"' ,\" + \"materno='\" + materno.toUpperCase().trim() + \"',ocupacion='\" + ocupacion.toUpperCase().trim() + \"',rfc='\" + rfc.trim() + \"' where IDcliente ='\" + IDcliente + \"' \");\n            stm.executeUpdate();\n            conexion.commit();\n            update = true;\n        } catch (SQLException e) {\n            System.out.println(\"error al actualizar registro en la tabla clientes  \" + e.getMessage());\n            try {\n                conexion.rollback();\n            } catch (SQLException ee) {\n                System.out.println(ee.getMessage());\n            }\n            return update = false;\n        }\n        return update;\n    }\n", "code2": "    public static MessageService getMessageService(String fileId) {\n        MessageService ms = null;\n        if (serviceCache == null) init();\n        if (serviceCache.containsKey(fileId)) return serviceCache.get(fileId);\n        Properties p = new Properties();\n        try {\n            URL url = I18nPlugin.getFileURL(fileId);\n            p.load(url.openStream());\n            ms = new MessageService(p);\n        } catch (Exception e) {\n            ms = new MessageService();\n        }\n        serviceCache.put(fileId, ms);\n        return ms;\n    }\n", "label": 0, "substitutes": {"setUpdateCliente": [" setUpdateclienta", " setUpdatePersono", " setUpdateCliento", " setUpdatePersone", " setupdatecliente", " setupdateCliente", " setUpdatePersones", " setUpdateClientes", " setUpdateclientes", " setUpdatecliento", " setUpdatePee", " setupdateclientes", " setUpdatePersona", " setupdateClientes", " setUpdatePees", " setUpdatePeo", " setupdatecliento", " setUpdateClienta", " setupdateclienta", " setupdateClienta", " setupdateCliento", " setUpdatePea", " setUpdatecliente"], "IDcliente": ["idclientel", "IDcode", "IDcodee", "IDactivee", "IDscliente", "IDclientee", "IDclientes", "idCliente", "idclientee", "IDClientes", "IDClientE", "idClientee", "IDcelle", "IDcliento", "IDsclienti", "IDClientel", "idclientoe", "IDcodoe", "IDparentoe", "IDClientoe", "IDscliento", "idcliente", "IDCliente", "IDcodes", "IDcodE", "IDsCliente", "IDstae", "IDcellE", "IDclientoe", "IDclientel", "IDactiveel", "IDcodel", "IDstao", "idClientel", "IDsCliento", "idClientes", "idClientoe", "IDactivees", "IDsClienti", "IDCliento", "IDactiveE", "IDstaE", "IDstai", "IDparentee", "IDparentE", "IDClienti", "IDcelli", "idClientE", "IDparente", "IDcello", "IDclienti", "idclientes", "IDclientE", "IDsclientE", "IDClientee", "IDsClientE", "idclientE"], "nombre": ["numbreb", " nombren", "nomer", " numbreb", "nometre", " numbren", "nometren", " numbre", "nometr", " nomere", " nombres", " nomeres", "numbr", "numbren", "nomeren", "nombr", "numbre", "nomere", " numbres", "nucleres", " nomer", "nomereb", "numbres", "nombren", "nombreb", "nomeres", "nucleren", " nombr", "nuclereb", "nometres", "nuclere", " nomeren", " nombreb", "nombres"], "paterno": ["patterne", "patern", "taterna", "paterlo", "petterna", "pattereno", "tattereno", "tatterno", "pATERlo", "pettern", "patereno", "catterlo", "pATERno", "patterno", "tatterna", "tatereno", "paterne", "pattern", "caterne", "tatern", "catterno", "peterno", "tattern", "patterna", "peterna", "pATERn", "pATEReno", "caterlo", "petterno", "patterlo", "pettereno", "peterlo", "paterna", "peterne", "catterna", "caterna", "catterne", "pATERne", "pATERna", "taterno", "caterno"], "materno": ["pATERnumber", "matterNo", " materNo", " matterNo", "materNo", "mterno", "maserNo", "maserna", "mterNO", " matterna", "materNO", "pATERno", "matterna", "mATERnumber", "materna", "pATERNo", " matterno", " materNO", "mterNo", "masernumber", "maserno", "mATERNO", "maternumber", " materna", " matterNO", "mATERna", "mATERno", "matterno", "matternumber", "paterna", "paterNo", "mATERNo", "mterna", "matterNO", "pATERna", "paternumber"], "ocupacion": ["icupidad", "incupacion", "ocueacion", "ocupidad", "ocuptacion", "ocUpaton", "ocuppac", "ocupanc", "ocupsidad", "ocuppanc", "icuptacion", "icuptidad", "incuparro", "ocuptaci", "ocupsaci", "ocupsacion", "ocUpidad", "icuptaton", "ocUpaci", "ocupsaton", "ocueanc", "ocupparro", "ocuptac", "ocuearro", "ocuptarro", "ocupaton", "ocupaci", "incuppacion", "ocuptanc", "ocupac", "ocuptaton", "icupaci", "ocuptidad", "icupaton", "ocueac", "incupparro", "ocuparro", "icupacion", "incuppanc", "icuptaci", "incuppac", "incupac", "incupanc", "ocuppacion", "ocUpacion"], "rfc": ["trfa", "rtc", "mfc", "yrfa", "yrfc", " rfl", "mwic", "rfa", "rco", "yrtc", "rwic", "yrco", " rwic", "urfc", "mfl", " rfa", "rcos", "urcos", " rco", "trfc", "urwic", "urfl", "mcos", "trtc", "trco", " rtc", " rcos", "rfl"], "stm": ["statma", "sema", " stmi", "STmc", "strmi", "seM", " stmt", "stmi", "STm", "sem", "STma", "Stem", "stmt", "statm", "strm", "stem", "stmc", " stem", "Stmi", "Stmt", "semc", "Stm", "stma", "statmc", "STM", "statM", "stM", "strem", "strmt"], "update": ["local", "build", "send", "module", "submit", "apply", "delete", "append", "only", "replace", "component", "remote", "up", "success", "fill", "open", "flush", "complete", "run", "check", "updated", "write", "ok", "status", "feed", "valid", "accept", "initial", "set", "result", "end", "out", "fail", "draw", "commit", "change", "create", "Update", "UPDATE", "remove", "load", "save", "report", "add", "include", "use", "equal", "it", "layout", "continue", "edit"]}}
{"id1": "13891080", "id2": "10547671", "code1": "    public static void copyFile(File srcFile, File destFile) throws IOException {\n        logger.debug(\"copyFile(srcFile={}, destFile={}) - start\", srcFile, destFile);\n        FileChannel srcChannel = new FileInputStream(srcFile).getChannel();\n        FileChannel dstChannel = new FileOutputStream(destFile).getChannel();\n        try {\n            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n        } finally {\n            srcChannel.close();\n            dstChannel.close();\n        }\n    }\n", "code2": "    private String retrieveTemplate() throws Exception {\n        if (cachedTemplate == null) {\n            final URL url = new URL(blogEditor.getBlogInfo().getBlogUrl());\n            final BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n            final StringBuilder result = new StringBuilder();\n            String line;\n            while ((line = in.readLine()) != null) {\n                result.append(line);\n            }\n            in.close();\n            cachedTemplate = result.toString();\n        }\n        return cachedTemplate;\n    }\n", "label": 0, "substitutes": {"copyFile": [" copyStream", "copyStream", "cloneTo", "transferFile", " copyDir", "copyTo", " copyTo", "cloneFile", "transferTo", "cloneStream", "transferDir", "copyDir", "transferStream", "cloneDir"], "srcFile": ["rcfile", "destPath", "srcPath", "srcEmail", "sourceFile", "sourcefile", "subFile", " srcEmail", "subEmail", "initBlock", "srcBlock", "rcFile", "srcfile", " srcPath", "initFile", " srcBlock", "rcPath", "subfile", "initfile", " srcfile", "initEmail", "subBlock"], "destFile": ["altStyle", " dstPlace", "destMail", "litDir", "litFile", " dstfile", " destStyle", "destPlace", " destFILE", " destPlace", "Destfile", " dstFile", " destDir", "DestFile", "destStyle", "srcDir", "srcfile", "destfile", "refDir", "refMail", "destDir", " dstDir", "refFile", "litMail", "refFILE", " destMail", "srcStyle", "litFILE", "altfile", " destfile", "altDir", "DestDir", "altFile", "DestPlace", "destFILE"], "srcChannel": [" srcClient", "srcchannel", "srcFace", " srcChan", " srcFace", "rbChannel", "subFace", " srcButton", "rcChannel", "rcChan", " srcchannel", "srcStream", "rcchannel", "rbClient", "srcChan", "rcConnection", "subClient", "curStream", "srcSection", "rcSection", "curChannel", "subChannel", "srcClient", "rbFace", " srcStream", "rbButton", " srcSection", "curConnection", "curchannel", "curSection", "srcButton", "srcConnection", "curChan", "rcStream", "subButton", " srcConnection"], "dstChannel": ["rddestConnection", "rdstChannel", "rdstStore", "dotUser", " dotBuffer", " dotChannel", " dotUser", "dndChannel", "ddestStore", " dotConnection", "ddestCow", "dblConnection", "ddestChannel", "ddestChan", "dblStore", "ddestBuffer", " dstChan", "dotChannel", " dstConnection", "ddestConnection", "dndConnection", "dotConnection", "dblChannel", "dndChan", "dotCow", "dstBuffer", " dstCow", " dstUser", "rdstChan", "distConnection", "rdstConnection", "dblChan", "dstUser", "rddestChannel", "ddestUser", "dstChan", " dstBuffer", "dndCow", "dstStore", "rddestChan", "distChannel", "dstConnection", " dotChan", "dotChan", "rddestStore", " dotCow", "distUser", "dotStore", "dstCow", "distBuffer", "dotBuffer"]}}
{"id1": "4602568", "id2": "7872659", "code1": "    public String storeImage(InputStream inStream, String fileName, boolean resize) throws Exception {\n        Calendar rightNow = Calendar.getInstance();\n        String dayNamedFolderName = \"\" + rightNow.get(Calendar.YEAR) + StringUtil.getPaddedIntWithZeros(2, rightNow.get(Calendar.MONTH) + 1) + StringUtil.getPaddedIntWithZeros(2, rightNow.get(Calendar.DATE));\n        String uploadDirRoot = props.getProperty(\"uploaded.files.root\");\n        File file = new File(uploadDirRoot + System.getProperty(\"file.separator\") + dayNamedFolderName);\n        if (!file.exists()) file.mkdirs();\n        String extension = FilenameUtils.getExtension(fileName);\n        String outFileName;\n        if (Boolean.parseBoolean(props.getPropertiesInstance().getProperty(IFConsts.USEORIGINALFILENAME, \"true\"))) {\n            outFileName = StringUtil.removeSpecChars(StringUtil.unaccent(FilenameUtils.getBaseName(fileName)));\n        } else {\n            outFileName = StringUtil.hash(fileName + Long.toString(System.currentTimeMillis()));\n        }\n        if (Boolean.parseBoolean(props.getPropertiesInstance().getProperty(IFConsts.USEEXTENSION, \"true\"))) {\n            outFileName = outFileName + DOT + extension;\n        }\n        String outPathAndName = uploadDirRoot + System.getProperty(\"file.separator\") + dayNamedFolderName + System.getProperty(\"file.separator\") + props.getProperty(\"uploaded.files.prefix\") + outFileName;\n        File uploadedFile = new File(outPathAndName);\n        _logger.info(\"uploadedFile.getAbsolutePath() = {}\", uploadedFile.getAbsolutePath());\n        uploadedFile.createNewFile();\n        OutputStream outStream = new FileOutputStream(outPathAndName);\n        IOUtils.copyLarge(inStream, outStream);\n        IOUtils.closeQuietly(inStream);\n        outStream.close();\n        if (resize) {\n            writeResizedImage(outPathAndName, extension, \"imgSize_xs\");\n            writeResizedImage(outPathAndName, extension, \"imgSize_s\");\n            writeResizedImage(outPathAndName, extension, \"imgSize_m\");\n            writeResizedImage(outPathAndName, extension, \"imgSize_l\");\n            writeResizedImage(outPathAndName, extension, \"imgSize_xl\");\n        }\n        String retVal = dayNamedFolderName + \"/\" + props.getProperty(\"uploaded.files.prefix\") + outFileName;\n        return retVal;\n    }\n", "code2": "    private static boolean genCustRatingFileAndMovieIndexFile(String completePath, String masterFile, String CustRatingFileName, String MovieIndexFileName) {\n        try {\n            File inFile = new File(completePath + fSep + \"SmartGRAPE\" + fSep + masterFile);\n            FileChannel inC = new FileInputStream(inFile).getChannel();\n            File outFile1 = new File(completePath + fSep + \"SmartGRAPE\" + fSep + MovieIndexFileName);\n            FileChannel outC1 = new FileOutputStream(outFile1, true).getChannel();\n            File outFile2 = new File(completePath + fSep + \"SmartGRAPE\" + fSep + CustRatingFileName);\n            FileChannel outC2 = new FileOutputStream(outFile2, true).getChannel();\n            int fileSize = (int) inC.size();\n            int totalNoDataRows = fileSize / 7;\n            ByteBuffer mappedBuffer = inC.map(FileChannel.MapMode.READ_ONLY, 0, fileSize);\n            int startIndex = 1, count = 0;\n            short currentMovie = 1;\n            while (mappedBuffer.hasRemaining()) {\n                count++;\n                short movieName = mappedBuffer.getShort();\n                int customer = mappedBuffer.getInt();\n                byte rating = mappedBuffer.get();\n                if (movieName != currentMovie) {\n                    ByteBuffer outBuf1 = ByteBuffer.allocate(10);\n                    outBuf1.putShort(currentMovie);\n                    outBuf1.putInt(startIndex);\n                    outBuf1.putInt(count - 1);\n                    outBuf1.flip();\n                    outC1.write(outBuf1);\n                    currentMovie = movieName;\n                    startIndex = count;\n                }\n                ByteBuffer outBuf2 = ByteBuffer.allocate(5);\n                outBuf2.putInt(customer);\n                outBuf2.put(rating);\n                outBuf2.flip();\n                outC2.write(outBuf2);\n            }\n            ByteBuffer endOfIndexFile = ByteBuffer.allocate(10);\n            endOfIndexFile.putShort(currentMovie);\n            endOfIndexFile.putInt(startIndex);\n            endOfIndexFile.putInt(100480506);\n            endOfIndexFile.flip();\n            outC1.write(endOfIndexFile);\n            outC1.close();\n            outC2.close();\n            return true;\n        } catch (IOException e) {\n            System.err.println(e);\n            return false;\n        }\n    }\n", "label": 1, "substitutes": {"storeImage": [" storeImages", "storeImages", "StorePicture", "StoreImages", "saveImage", "StoreFile", "storeFile", "storePicture", " storeFile", " storePicture", "saveImages", "savePicture", "saveFile", "StoreImage"], "inStream": ["cinFile", "inputStream", "inputView", "cinSteam", "inputFile", " inView", " inSteam", " inFile", "outForm", "fileSteam", "outSteam", "inputSteam", "cinStream", "inForm", "inFile", "fileStream", "inSteam", "inView", "cinView", "outFile", "fileFile", "fileForm", " inForm"], "fileName": ["FILEPath", "imageType", "imageInfo", " filePath", "fileTime", " filename", "imagename", "FILEName", " fileType", "filename", "imagePath", "resourceName", "Filename", "resourcePath", "FilePath", "imageTime", "FILEname", "FILEInfo", "FileName", "resourceType", "FileType", "imageName", "FileInfo", "fileInfo", " fileInfo", "fileType", "resourceTime", "FileTime", "filePath"], "resize": ["ressize", "renizes", "renize", "renized", "resizes", " ressize", "rensize", "Resized", " resized", "Resizes", "resized", "Resize", "Ressize", " resizes"], "rightNow": ["rightToday", "rToday", " RightCurrent", "correctNow", "rNow", "rNOW", "correctNOW", " rightServer", "rServer", "westToday", "westThen", "rightCurrent", "westFuture", "rightThen", "westServer", " rightNOW", " RightThen", " RightNOW", " rightFuture", " RightNow", "rightFuture", "RightToday", "correctToday", "RightNow", " rightCurrent", " rightThen", "RightCurrent", "westNow", "rightServer", "RightFuture", "westCurrent", "correctFuture", "westNOW", " rightToday", "rightNOW"], "dayNamedFolderName": ["dayNamingFoldername", "dayNamingDirectoryNames", "dayNamedFolderNames", "dayNamedFolderPath", "dayNamedAreaName", "dayNamingFolderSize", "dayNamingFileName", "dayNamedDirectoryName", "dayNamedFolder1", "dayNamingFilePath", "dayNamingFolderNames", "dayNamedfolderName", "dayNamedThemeName", "dayNamedArea1", "dayNamedThemePath", "dayNamedDirectoryNames", "dayNamedFilePath", "dayNamingFileNames", "dayNamedThemeNames", "dayNamingDirectory1", "dayNamedfolder1", "dayNamedFilename", "dayNamedFoldername", "dayNamedAreaNames", "dayNamedFileName", "dayNamedThemeSize", "dayNamingDirectoryname", "dayNamingDirectoryName", "dayNamingFolderPath", "dayNamedfoldername", "dayNamedfolderPath", "dayNamingFolder1", "dayNamedFolderSize", "dayNamedAreaname", "dayNamedFileNames", "dayNamingFilename", "dayNamedThemename", "dayNamedfolderNames", "dayNamedDirectory1", "dayNamedDirectoryname", "dayNamedFileSize", "dayNamingFolderName", "dayNamingFileSize"], "uploadDirRoot": ["uploaddirroot", "saveDbParent", "uploadUrlParent", "uploadDbCover", "uploadDbRoot", "uploadNetRoot", "saveDirroot", "uploadRelRoot", "saveDbroot", "uploadDbParent", "uploadFolderRoot", " uploadDirPath", "uploadDirPath", "saveDirParent", " uploadDirBase", "UploadDbCover", "uploadUrlroot", "uploaddirRoot", "UploadDirCover", "uploadNetCover", "uploadUrlBase", "uploadNetroot", " uploadRelroot", "uploadDbroot", "uploadDbBase", "uploadDirBase", "UploadDirBase", " uploadRelRoot", "uploadFolderroot", "UploadDbroot", "UploadDbRoot", " uploadDirroot", "uploadDirectoryRoot", " uploadRelPath", "uploadUrlRoot", "uploadRelroot", "UploadDbBase", "uploadDirroot", "uploadFolderBase", "uploadDirectoryroot", "uploadDirCover", "uploadUrlPath", "uploaddirCover", "saveDbRoot", "saveDirRoot", "uploaddirBase", "uploadRelBase", "uploadDirectoryParent", "UploadDirroot", "uploadDirParent", "uploadFolderPath", "uploadNetBase", " uploadRelBase", "UploadDirRoot", "uploadRelPath"], "file": ["local", "force", "op", "dir", "h", "parent", "resource", "FILE", "channel", "ile", "t", "up", "class", "no", "File", "open", "run", "work", "time", "to", "null", "node", "port", "link", "f", "base", "table", "page", "entity", "get", "project", "tree", "name", "source", "folder", "key", "top", "image", "el", "handle", "task", "pool", "il", "full", "type"], "extension": ["expend", "expensions", "EXTension", "extention", "xtend", "extended", "dimendant", "xtended", "exension", "expended", "exensions", "EXTended", "dimension", "exention", "dimensions", "extendant", "expention", "expendant", "EXTention", "extensions", "exendant", "extend", "EXTend", "dimention", "xtention", "expension", "xtension"], "outFileName": ["outfileNames", "OutFilename", "outFileNames", " outFileInfo", "OUTFilename", "outLogNames", "outDirPath", "outLogKey", " outFileVersion", "outFileType", " outLogVersion", "outFieldType", "OUTLogName", "outFieldName", "OUTFileKey", "outImageKey", "outfileType", "outLogPath", "OutFilePath", "inFileType", " outLogname", "OutfilePath", "outImageNames", "outFieldname", "outFilenameType", "OUTLogname", "outfileVersion", "outFilesName", "outLogName", "outFilenamename", "outLogVersion", "outImagePath", "OUTFieldPath", "OutfileKey", "outFilesPath", "outfileSize", "outImageName", " outFileNames", "outLinePath", "OutFileKey", " outLinePath", "outLineKey", "outFilename", "outLineName", "inFilename", " outLineName", "infilename", " outLogName", "outFilenameSize", "outImageInfo", "OutfileName", " outFilePath", "outFileKey", " outLineInfo", "outDirname", "outFileInfo", "outFileVersion", "outFilenameVersion", "outFilePath", "OUTFieldName", "outFieldSize", "outLineInfo", "outFilesname", "outFieldPath", "inFileSize", "outLineNames", "outFilenamePath", "outLogname", "outDirName", "infileSize", "outfilePath", "outLinename", "outfileKey", " outFilename", "outFilenameInfo", "outfileName", "infileName", "OUTFieldname", "inFileName", "outImagename", "outFilenameName", "outFilenameNames", "OUTFilePath", "outFilenameKey", "OUTLogPath", "outfilename", "OutFileName", "OUTLogKey", "infileType", "outFileSize", " outLogNames", " outLineNames", "Outfilename", "OUTFileName"], "outPathAndName": ["outLocationandNames", "outPathOrSize", "outPathOrKey", "outTimeButPath", "outPathButLike", "outLocationAndSize", "outTimeButLike", "outPortButName", "outTimeAndTime", "outPathandNames", "outLocationandSize", "outTimeButTime", "outPathandSize", "outPathandName", "outLocationAndName", "outPathButName", "outTimeButName", "outPathOrLike", "outLocationandKey", "outPathOrTime", "outPathOrPath", "outPathAndPath", "outPathandPath", "outLocationAndNames", "outPathandKey", "outPathOrNames", "outTimeAndPath", "outPathAndLike", "outPathButPath", "outPathANDTime", "outPathANDName", "outLocationandName", "outPortButPath", "outPathAndSize", "outPathANDPath", "outPathANDLike", "outPathButTime", "outPortButKey", "outLocationAndKey", "outPortAndPath", "outPathOrName", "outPathButKey", "outPortAndKey", "outTimeAndName", "outPathAndNames", "outPathAndKey", "outPathAndTime", "outTimeAndLike", "outPortAndName"], "uploadedFile": ["uploadiedF", "uploadpedFile", "uploaderFile", "uploadashedFile", " uploadedifiedFile", " UploadmedGlobal", "uploadredFormat", "uploadedLine", "presentedfile", "uploadedUnit", "uploadtedField", "uploadpedUnit", " UploadmedPlace", "uploadtedfile", " uploadedifiedUnit", "uploadededGlobal", "uploadedPlace", "uploadifiedF", " UploadmedFile", "uploadedField", "uploadmedGlobal", "uploadredFile", "uploadmedFormat", "presentedField", " UploadedGlobal", "uploadtedFile", " UploadedPlace", "uploadedfile", "uploadashedFILE", "uploadededFormat", "uploadashedfile", "presenttedFILE", "presentedFile", "uploadedFormat", "uploadmedFile", "presenttedFile", "uploadpedLine", " uploadededUnit", "uploadedF", "uploadifiedLine", "uploadiedUnit", " uploadedifiedF", "uploadedGlobal", "presenttedField", "uploadifiedUnit", " uploadededLine", " uploadededF", "presentedFILE", "uploaderfile", "uploaderField", " UploadmedFormat", "uploadashedField", "uploadiedLine", "presenttedfile", " uploadedifiedLine", "uploadpedF", "uploadredPlace", "uploadtedFILE", " UploadedFormat", "uploadiedFile", "uploadmedPlace", "uploadredGlobal", "uploadededPlace", "uploadifiedFile", " uploadededFile", "uploadededFile", "uploaderFILE", " UploadedFile", "uploadedFILE"], "outStream": [" outView", "oStream", "_", " outSteam", "outSteam", "oFile", "inFile", "oView", "inSteam", "inView", "outView", "oSteam", "outFile", " outFile"]}}
{"id1": "62362", "id2": "823074", "code1": "    public void convert(File src, File dest) throws IOException {\n        InputStream in = new BufferedInputStream(new FileInputStream(src));\n        DcmParser p = pfact.newDcmParser(in);\n        Dataset ds = fact.newDataset();\n        p.setDcmHandler(ds.getDcmHandler());\n        try {\n            FileFormat format = p.detectFileFormat();\n            if (format != FileFormat.ACRNEMA_STREAM) {\n                System.out.println(\"\\n\" + src + \": not an ACRNEMA stream!\");\n                return;\n            }\n            p.parseDcmFile(format, Tags.PixelData);\n            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n                System.out.println(\"\\n\" + src + \": contains UIDs!\" + \" => probable already DICOM - do not convert\");\n                return;\n            }\n            boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n            int pxlen = p.getReadLength();\n            if (hasPixelData) {\n                if (inflate) {\n                    ds.putUS(Tags.BitsAllocated, 16);\n                    pxlen = pxlen * 4 / 3;\n                }\n                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n                    System.out.println(\"\\n\" + src + \": mismatch pixel data length!\" + \" => do not convert\");\n                    return;\n                }\n            }\n            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n            ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n            ds.putUI(Tags.SOPClassUID, classUID);\n            if (!ds.contains(Tags.NumberOfSamples)) {\n                ds.putUS(Tags.NumberOfSamples, 1);\n            }\n            if (!ds.contains(Tags.PhotometricInterpretation)) {\n                ds.putCS(Tags.PhotometricInterpretation, \"MONOCHROME2\");\n            }\n            if (fmi) {\n                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n            }\n            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n            try {\n            } finally {\n                ds.writeFile(out, encodeParam());\n                if (hasPixelData) {\n                    if (!skipGroupLen) {\n                        out.write(PXDATA_GROUPLEN);\n                        int grlen = pxlen + 8;\n                        out.write((byte) grlen);\n                        out.write((byte) (grlen >> 8));\n                        out.write((byte) (grlen >> 16));\n                        out.write((byte) (grlen >> 24));\n                    }\n                    out.write(PXDATA_TAG);\n                    out.write((byte) pxlen);\n                    out.write((byte) (pxlen >> 8));\n                    out.write((byte) (pxlen >> 16));\n                    out.write((byte) (pxlen >> 24));\n                }\n                if (inflate) {\n                    int b2, b3;\n                    for (; pxlen > 0; pxlen -= 3) {\n                        out.write(in.read());\n                        b2 = in.read();\n                        b3 = in.read();\n                        out.write(b2 & 0x0f);\n                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n                        out.write(b3 >> 4);\n                    }\n                } else {\n                    for (; pxlen > 0; --pxlen) {\n                        out.write(in.read());\n                    }\n                }\n                out.close();\n            }\n            System.out.print('.');\n        } finally {\n            in.close();\n        }\n    }\n", "code2": "    public void convert(File src, File dest) throws IOException {\n        InputStream in = new BufferedInputStream(new FileInputStream(src));\n        DcmParser p = pfact.newDcmParser(in);\n        Dataset ds = fact.newDataset();\n        p.setDcmHandler(ds.getDcmHandler());\n        try {\n            FileFormat format = p.detectFileFormat();\n            if (format != FileFormat.ACRNEMA_STREAM) {\n                System.out.println(\"\\n\" + src + \": not an ACRNEMA stream!\");\n                return;\n            }\n            p.parseDcmFile(format, Tags.PixelData);\n            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n                System.out.println(\"\\n\" + src + \": contains UIDs!\" + \" => probable already DICOM - do not convert\");\n                return;\n            }\n            boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n            int pxlen = p.getReadLength();\n            if (hasPixelData) {\n                if (inflate) {\n                    ds.putUS(Tags.BitsAllocated, 16);\n                    pxlen = pxlen * 4 / 3;\n                }\n                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n                    System.out.println(\"\\n\" + src + \": mismatch pixel data length!\" + \" => do not convert\");\n                    return;\n                }\n            }\n            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n            ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n            ds.putUI(Tags.SOPClassUID, classUID);\n            if (!ds.contains(Tags.NumberOfSamples)) {\n                ds.putUS(Tags.NumberOfSamples, 1);\n            }\n            if (!ds.contains(Tags.PhotometricInterpretation)) {\n                ds.putCS(Tags.PhotometricInterpretation, \"MONOCHROME2\");\n            }\n            if (fmi) {\n                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n            }\n            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n            try {\n            } finally {\n                ds.writeFile(out, encodeParam());\n                if (hasPixelData) {\n                    if (!skipGroupLen) {\n                        out.write(PXDATA_GROUPLEN);\n                        int grlen = pxlen + 8;\n                        out.write((byte) grlen);\n                        out.write((byte) (grlen >> 8));\n                        out.write((byte) (grlen >> 16));\n                        out.write((byte) (grlen >> 24));\n                    }\n                    out.write(PXDATA_TAG);\n                    out.write((byte) pxlen);\n                    out.write((byte) (pxlen >> 8));\n                    out.write((byte) (pxlen >> 16));\n                    out.write((byte) (pxlen >> 24));\n                }\n                if (inflate) {\n                    int b2, b3;\n                    for (; pxlen > 0; pxlen -= 3) {\n                        out.write(in.read());\n                        b2 = in.read();\n                        b3 = in.read();\n                        out.write(b2 & 0x0f);\n                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n                        out.write(b3 >> 4);\n                    }\n                } else {\n                    for (; pxlen > 0; --pxlen) {\n                        out.write(in.read());\n                    }\n                }\n                out.close();\n            }\n            System.out.print('.');\n        } finally {\n            in.close();\n        }\n    }\n", "label": 1, "substitutes": {"convert": ["CONversion", "compvert", "CONverting", "consverting", "Converted", "Converts", "consversion", "confer", "unprocess", "conversion", "unvert", "consvert", "unverted", "compverts", "CONVERT", "unfer", "Conversion", "Convert", "unversion", "CONverted", "unverts", "Converting", "CONfer", "ConVERT", "conprocess", "converting", "converts", "CONvert", "Conprocess", "conVERT", "consVERT", "Confer", "compprocess", "compversion", "converted"], "src": ["sr", "path", "sq", "cur", "scan", "file", "txt", "str", "sin", "orig", "rx", "st", "start", "SOURCE", "from", "filename", "url", "rs", "href", "RC", "ource", "img", "host", "cc", "buster", "sit", "uri", "rel", "config", "sc", "Source", "s", "loc", "ipl", "attr", "ur", "its", "req", "usr", "input", "upload", "scene", "hl", "http", "sys", "dist", "source", "SourceFile", "cont", "addr", "rest", "func", "rc", "ser", "ins", "pkg", "inst", "ebin", "stream", "iv"], "dest": ["foreign", "dir", "dat", " Destination", "txt", " orig", "orig", "disk", "test", "Dest", "target", "tif", "write", " destinations", "port", "img", "table", "result", "est", " Dest", " dst", " destination", "gin", "dist", "rest", "source", "temp", "mat"], "in": ["d", "serv", "file", "en", "io", "b", "is", "inf", "st", "up", "cin", "from", "reader", "r", "IN", "i", "inner", "ad", "res", "m", "ar", "as", "din", "isin", "input", "ind", "source", "In", "el", "ins", "rin", "l", "bin", "sql", "stream", "inn"], "p": ["d", "ping", "op", "pb", "P", "pt", "tp", "lp", "pd", "py", "pro", "h", "post", "vp", "part", "b", "prot", "per", "t", "dp", "j", "pg", "at", "cp", "r", "c", "i", "pl", "pi", "wp", "ph", "m", "pre", "f", "ps", "pm", "pers", "pe", "sp", "er", "parse", "fp", "parser", "ap", "pa", "pp", "rep", "pkg", "l", "it", "g", "php", "pc", "jp"], "ds": ["tp", "des", "lists", "gs", "rs", "dates", "ns", "nas", "ps", "ports", "dd", "db", "yes", "amps", "sets", "ks", "mys", "vs", "ats", "obs", "ils", "s", "bs", "hd", " des", " DS", "Ds", "drivers", "iffs", "dos", "outs", "qs", "tests", "d", "js", "aws", "eds", "pd", "points", "dds", "terms", "eps", "ws", "xs", "tes", "dl", "workers", "sd", "dt", " d", "edes", "posts", "loads", "scripts", "ras", "df", "els", "ss", "gd", "di", "dp", "ls", "hs", "cks", "ts", "uds", "DS", "cs", " dd", "ads", "its", " ads", "tags", "ands", "ags", "sts", "dh", " os", "ods", "docs", "os", "ys"], "format": ["settings", "path", "module", "filter", "fc", "at", "file", "mt", "ats", "tag", "id", "lat", "mode", "t", "sche", "feat", "style", "output", "act", "pattern", "pi", " Format", "status", "title", "f", "cf", "Format", "form", "ct", "feature", "table", "set", "parse", "name", "template", "pretty", "spec", "MAT", "source", "top", "fm", "shape", "version", "l", "it", "layout", "unit", "type", "policy", "mat", "size"], "hasPixelData": ["haspixelDATA", " hasPixeldata", "haspixeldata", "haspixelData", "Haspixeldata", "hasFramedata", "hasFrameDATA", "hasixeldata", "HaspixelData", "hasPixeldata", "hasixelData", "HasPixelDATA", "hasixelDATA", " hasPixelDATA", "hasFrameData", "HasPixelData", "HaspixelDATA", "hasPixelDATA", "HasPixeldata"], "inflate": ["inflATE", " invalidATE", "inFLate", "infolat", "incelATE", "informate", "inflicate", "Informate", "inFlicate", " inflATE", "inFlATE", "inFLocate", "inFlocate", "Informated", "informocate", "incelicate", "invalidocate", "infolate", "inflat", "Inflate", "inFlate", "invalidate", " invalidicate", "Inflat", " invalidate", " inflocate", "incelate", "incelocate", " invalidocate", " inflicate", "infolocate", "inFLat", "Informat", "informated", "Inflated", "informat", "inFLated", "invalidicate", "infolated", "inflated", "invalidATE", "Inflocate", "Informocate", "inflocate"], "pxlen": ["xylin", "mmlength", "pxlength", "cpden", "xplength", "pixellen", "cplen", "pexls", "pexden", "tmplength", "packlength", "mmlen", "mxlen", "cplength", "mmln", "pixelfun", "tmplin", "pexlen", "phpdec", "tmplen", "pixellength", "tmpln", "mxdec", "mmlin", "cpln", "pxls", "xyln", "mxlength", "packlen", "xpln", "pxden", "pxdec", "phpln", "mxln", "pexlength", "pxlin", "xpden", "packls", "xplen", "xylen", "packln", "pixells", "pexfun", "pxln", "packdec", "phplen", "packfun", "xylength", "phplength", "pexln", "pxfun"], "out": ["ln", "err", "log", "dir", "io", "crit", "store", "print", "obj", "up", "aos", "msg", "output", "inv", "ex", "res", "inter", "outer", "prefix", "net", "screen", "conn", "init", "user", "cfg", "writer", "gr", "client", "pretty", "name", "sys", "OUT", "group", "list", "Out", "sum", "gov", "cmd", "ou", "outs", "temp"]}}
{"id1": "15797402", "id2": "2642914", "code1": "    public void parse(InputStream stream, ContentHandler handler, Metadata metadata, ParseContext context) throws IOException, SAXException, TikaException {\n        String name = metadata.get(Metadata.RESOURCE_NAME_KEY);\n        if (name != null && wanted.containsKey(name)) {\n            FileOutputStream out = new FileOutputStream(wanted.get(name));\n            IOUtils.copy(stream, out);\n            out.close();\n        } else {\n            if (downstreamParser != null) {\n                downstreamParser.parse(stream, handler, metadata, context);\n            }\n        }\n    }\n", "code2": "    private static void addFileToTarGz(TarArchiveOutputStream taro, String path, String base) throws IOException {\n        File f = new File(path);\n        String entryName = base + f.getName();\n        FileInputStream goIn = new FileInputStream(f);\n        TarArchiveEntry tarEntry = new TarArchiveEntry(f, entryName);\n        taro.setLongFileMode(TarArchiveOutputStream.LONGFILE_GNU);\n        taro.putArchiveEntry(tarEntry);\n        if (f.isFile()) {\n            IOUtils.copy(goIn, taro);\n            taro.closeArchiveEntry();\n        } else {\n            taro.closeArchiveEntry();\n            File[] children = f.listFiles();\n            if (children != null) {\n                for (File child : children) {\n                    addFileToTarGz(taro, child.getAbsolutePath(), entryName + \"/\");\n                }\n            }\n        }\n        taro.close();\n        goIn.close();\n    }\n", "label": 1, "substitutes": {"parse": ["build", "ping", "filter", "apply", "p", "tag", "transform", "render", "process", "map", "resource", "print", "scale", "interpret", "write", "close", "split", "dump", "slice", "format", "pe", "create", "parser", "read", "patch", "load", "save", "add", "use", "shape", "execute", "handle", "xml", "php", "se"], "stream": ["sample", "file", "sequence", "resource", "channel", "Stream", "clean", "test", "length", "event", "in", "stack", "open", "output", "reader", "url", "content", "instance", "zip", "console", "iterator", "form", "buffer", "message", "input", "read", "download", "document", "upload", "http", "data", "ream", "cont", "source", "image", "chain", "response", "handle", "window", "sync", "archive"], "handler": ["address", "function", "h", "resource", "wrapper", "processor", "loader", "event", "service", "storage", "reader", "management", "Handler", "ctx", "worker", "connection", "hand", "host", "server", "message", "writer", "parser", "callback", "application", "password", "hander", "shape", "handle", "controller", "pool", "policy"], "metadata": ["module", "tar", "pdf", "java", "definition", "material", "mt", "dirty", "property", "properties", "managed", "basic", "still", "detail", "manager", "management", "met", "content", "ctx", "mem", "meta", "m", "md", "google", "config", "iterator", "parts", "unknown", "dd", "message", "td", "document", "template", "common", "data", "memory", "image", "details", "general", "header", "adata", "handle", "json", "xml", "hold", "info", "MD", "policy"], "context": ["local", "system", "module", "sequence", "ce", "resource", "component", "event", "stack", "dict", "current", "network", "content", "ctx", "null", "connection", "instance", "condition", "usage", "cc", "location", "options", "config", "reason", "set", "sc", "environment", "document", "template", "Context", "frame", "chain", "response", "translation", "state", "collection", "command"], "name": ["local", "system", "path", "description", "string", "file", "term", "nl", "id", "resource", "channel", "part", "old", "ame", "service", "family", "no", "nm", "current", "filename", "url", "names", "NAME", "len", "time", "null", "named", "n", "alias", "label", "title", "on", "reason", "base", "prefix", "lower", "pass", "none", "all", "create", "Name", "client", "common", "comment", "data", "source", "value", "key", "image", "version", "l", "default", "type", "body", "size"], "out": ["v", "serv", "cos", "file", "OU", "io", "print", "po", "conv", "obj", "up", "in", "aos", "output", "conf", "flush", "external", "url", "gen", "lay", "null", "n", "to", "ex", "res", "auto", "outer", "col", "o", "net", "table", "oss", "cn", "user", "all", "writer", "sys", "one", "OUT", "Out", "list", "sum", "us", "it", "cmd", "ou", "outs", "co", "con"]}}
{"id1": "14390569", "id2": "3053403", "code1": "    private DialogHelper(String title, final URL imageURL) {\n        jd = new JDialog();\n        jd.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);\n        jd.setAlwaysOnTop(true);\n        jd.setLayout(new BoxLayout(jd.getContentPane(), BoxLayout.Y_AXIS));\n        jd.setTitle(title);\n        JLabel jl = new JLabel();\n        ImageIcon icon = new ImageIcon(imageURL);\n        jl.setIcon(icon);\n        jd.add(new JScrollPane(jl));\n        final JFileChooser chooser = getSaveImageChooser();\n        JPanel jp = new JPanel();\n        JButton jb = new JButton(getMessage(\"btn_save_as\"));\n        jb.addActionListener(new ActionListener() {\n\n            public void actionPerformed(ActionEvent e) {\n                int returnVal = chooser.showSaveDialog(jd);\n                if (returnVal == JFileChooser.APPROVE_OPTION) {\n                    File file = chooser.getSelectedFile();\n                    String fileName = file.getPath();\n                    String ext = StringUtil.getLowerExtension(fileName);\n                    if (!\"png\".equals(ext)) {\n                        fileName += \".png\";\n                        file = new File(fileName);\n                    }\n                    boolean doIt = true;\n                    if (file.exists()) {\n                        int i = JOptionPane.showConfirmDialog(jd, getMessage(\"warn_file_exist\"));\n                        if (i != JOptionPane.YES_OPTION) doIt = false;\n                    } else if (!file.getParentFile().exists()) {\n                        doIt = file.getParentFile().mkdirs();\n                    }\n                    if (doIt) {\n                        FileChannel src = null;\n                        FileChannel dest = null;\n                        try {\n                            src = new FileInputStream(imageURL.getPath()).getChannel();\n                            dest = new FileOutputStream(fileName).getChannel();\n                            src.transferTo(0, src.size(), dest);\n                        } catch (FileNotFoundException e1) {\n                            warn(jd, getMessage(\"err_no_source_file\"));\n                        } catch (IOException e2) {\n                            warn(jd, getMessage(\"err_output_target\"));\n                        } finally {\n                            try {\n                                if (src != null) src.close();\n                            } catch (IOException e1) {\n                            }\n                            try {\n                                if (dest != null) dest.close();\n                            } catch (IOException e1) {\n                            }\n                            src = null;\n                            dest = null;\n                        }\n                    }\n                }\n            }\n        });\n        jp.add(jb);\n        jb = new JButton(getMessage(\"btn_close\"));\n        jb.addActionListener(new ActionListener() {\n\n            public void actionPerformed(ActionEvent e) {\n                jd.dispose();\n            }\n        });\n        jp.add(jb);\n        jd.add(jp);\n        jd.pack();\n        setCentral(jd);\n    }\n", "code2": "    public static void main(String[] args) throws Exception {\n        FileChannel fc = new FileOutputStream(\"data2.txt\").getChannel();\n        fc.write(ByteBuffer.wrap(\"Some text\".getBytes()));\n        fc.close();\n        fc = new FileInputStream(\"data2.txt\").getChannel();\n        ByteBuffer buff = ByteBuffer.allocate(BSIZE);\n        fc.read(buff);\n        buff.flip();\n        System.out.println(buff.asCharBuffer());\n        buff.rewind();\n        String encoding = System.getProperty(\"file.encoding\");\n        System.out.println(\"Decoded using \" + encoding + \": \" + Charset.forName(encoding).decode(buff));\n        fc = new FileOutputStream(\"data2.txt\").getChannel();\n        fc.write(ByteBuffer.wrap(\"Some text\".getBytes(\"UTF-16BE\")));\n        fc.close();\n        fc = new FileInputStream(\"data2.txt\").getChannel();\n        buff.clear();\n        fc.read(buff);\n        buff.flip();\n        System.out.println(buff.asCharBuffer());\n        fc = new FileOutputStream(\"data2.txt\").getChannel();\n        buff = ByteBuffer.allocate(24);\n        buff.asCharBuffer().put(\"Some text\");\n        fc.write(buff);\n        fc.close();\n        fc = new FileInputStream(\"data2.txt\").getChannel();\n        buff.clear();\n        fc.read(buff);\n        buff.flip();\n        System.out.println(buff.asCharBuffer());\n    }\n", "label": 1, "substitutes": {"title": ["text", "subject", "TIT", "description", " Title", "string", "holiday", "term", "help", "t", "hash", "question", "start", "Title", "msg", "filename", "content", "theme", "label", "summary", "html", "notice", "prefix", "padding", "message", "parts", "lead", "hd", "heading", "setup", "name", "template", "password", "details", "header", "metadata", "tip", "layout", "type", "itle", "size"], "imageURL": ["imageString", "fileURL", "ImageURI", "ImageUrl", "fileUrl", "photoURL", " imageUrl", " imageUR", "imageUR", "fileString", "mediaURL", " imageString", "photoID", "imageUrl", "photoUR", "photoUrl", "photoString", " imageURI", "imageID", "imageURI", "photoURI", "ImageUR", "fileURI", "mediaUrl", "mediaURI", "ImageID", "mediaID", "ImageURL"], "jd": ["javads", " jds", "ujmd", "djd", "zad", "ajds", "ujdt", "ujd", "djsd", "jD", "ujD", "Jp", "jsd", "jspd", "ijds", "jdo", "kdt", "ajdm", "kds", "qdo", "jsdm", "gbd", "simD", "gds", " jc", "ajpd", "ijD", "JD", "ajd", "simmd", "djds", "jmd", "jjD", "kdo", "djc", "qbd", "jjbd", "jjp", " jdt", "jds", "Jc", "javadm", "djdo", "Jad", "jdt", "jsD", "kd", "Jds", "ijd", "qp", "javad", "jdm", "qD", " jsd", "jpd", "Jbd", "simd", "kbd", "jsds", "jc", "zd", "gdo", "jjd", "Jd", "Jmd", "qds", " jD", "jbd", "jobdo", " jdo", "simdt", "gd", "javapd", " jad", "Jdo", "qd", "jad", "djad", "zsd", "Jdt", "ujad", "jobd", "jobdt"], "jl": ["ln", "js", "ji", "Label", "kn", "elt", "lp", "ell", " ol", "jj", "dj", "txt", "nl", "li", "isl", "kl", "mil", "J", "lv", "jet", "bol", "j", "ja", " li", "abl", "dl", "dll", "kj", "elle", "jah", "syn", "ibl", "lu", "kel", "dyl", "elly", "jc", "jac", "ij", "uj", "gn", "rl", "igl", "bj", "ijk", "yl", "il", "jin"], "icon": ["Icon", "eric", " tip", "ico", "ic", "lock", " widget", "icons", " ion", " lang", "nic", "addon", " canvas", " fruit", "conv", "ion", "ocon", "font", "cil", "ICO", "iban", "ex", " intent", "chron", "label", "gc", " ancestor", " captcha", "syn", " Icon", "iao", "conn", "cn", "png", "icol", "jc", "fn", "image", " screen", "pen", "pic", "\u4e2d", "fa", " conn", "con"], "chooser": ["Choicer", "choose", "composer", "choerer", "comperer", " chooder", "booser", "choosen", "poicer", "boosen", "CHOoser", "compicer", " choosen", "chooder", "Chooder", " choose", "Choosen", "composen", " choicer", "poose", "choicer", "compose", "CHOose", "pooser", "Chooser", "CHOosen", "CHOicer", " choerer", "boose", "pooder", "boerer", "Choose"], "jp": [" sp", "js", " dj", " gp", "p", "np", " cp", " ja", "btn", "j", "ja", "JP", " pic", " ap", "kj", " pl", " je", "sp", " np", " joint", " ip", " mp", "jc", "ij", " sip", "bp", "pic", "bj", "jin"], "jb": ["qcb", "qbd", " jbd", "kjbd", " jcb", "kjb", "qb", "jcb", "Jbd", "Jcb", "kjcb", "jbd", "Jb"], "e": ["d", "ev", "v", "en", "p", "E", "t", "event", "te", "ed", "ee", "re", "c", "n", "a", "m", "f", "o", "s", "Event", "ie", "u", "or", "it", "g", "es", "er", "w"], "returnVal": ["retVal", " returnval", "getVal", "returnVol", "getVAL", "responseVal", " returnValid", "returnVAL", "returnValue", " returnValue", " returnVAL", "ReturnVal", "returnValid", "getValid", "returnval", "responseVol", "retval", "Returnval", "ReturnVAL", "retVAL", "ReturnValue", "responseVAL", "getVol", " returnVol", "responseValid", "retValue"], "file": ["local", "path", "place", "h", "dir", "io", "angle", "resource", "FILE", "channel", "ile", "be", "class", "File", "open", "run", "target", "filename", "rule", "model", "work", "real", "fe", "null", "to", "library", "relation", "port", "stat", "status", "link", "valid", "f", "fs", "base", "table", "buffer", "page", "format", "get", "user", "core", "db", "fp", "create", "tree", "document", "name", "foo", "http", "source", "le", "drop", "image", "or", "report", "handle", "info", "il", "full", "body", "type", "word"], "fileName": ["FILEPath", "handleName", " fileNAME", " filePath", "FILEExt", "fileNAME", " fileNames", " filename", "imagename", "fileClass", "handlename", " fileClass", "fileFace", "fileSystem", "FILEName", "imageFace", "FILESet", "handleClass", "filename", "fileExt", "fileNames", "imageNAME", "entityPath", "FileExt", "FILESystem", "imagePath", "ileNAME", "Filename", "fileSet", "FilePath", "ileClass", "entityName", "ilename", "taskname", "taskPath", "FILENAME", "FileName", "FileNAME", "imageName", "taskName", " fileSystem", " fileExt", "FileSystem", "FileFace", "FileNames", "FILENames", "filePath", "taskFace", "entityNAME", "ileName", "handleNAME", "entitySet", "FileSet"], "ext": ["aux", "exc", "ag", "typ", "dir", "lib", "txt", "part", "prot", "test", "t", "eur", "Ext", "external", "len", "cod", "ex", "EXT", "sem", "vert", "pat", "ord", "lex", "def", "ct", "desc", "end", "xt", "req", "exe", "exp", "ind", "hex", "cont", "enc", "ix", "fr", "ec", "cmd", "xp", "off", "word"], "i": ["ti", "I", "li", "id", "gi", "print", "is", "di", "ii", "j", "phi", "mi", "si", "index", "ini", "iu", "pi", "status", "cli", "ci", "m", "init", "xi", "ei", "qi", "ai", "fi", "it", "bi", "hi", "ui", "info", "ori", "y"], "doIt": ["doneIt", "odoIt", "doWhich", "doneIT", "doIs", "doIT", "donIt", "donIs", "didit", "waIs", " doYou", "didYou", "odoHe", "doit", "donYou", "doHe", "odoIT", "donit", "didIs", " doHe", "diit", "waIt", " doWhich", "didIt", "donIT", "odoWhich", "waIT", "doneit", " doit", " doIT", "diWhich", "diIt", " doIs", "diHe", "odoit", "doYou"], "src": ["sec", "sr", "sq", "sl", "trans", "ctr", "rx", "st", "conv", "ources", "start", "rb", "ptr", "rob", "from", "copy", "url", "gs", "rs", "r", "ource", "inner", "https", "ssl", "rel", "syn", "crop", "sc", "loc", "sb", "comp", "tmp", "init", "rt", "usr", "impl", "input", "http", "sys", "source", "rest", "rl", "cont", "rc", "ser", "ins", "sub", "inst", "proc", "sh", "lb"], "dest": ["master", "local", "foreign", "trans", "decl", "dir", "dat", "des", "cat", "orig", "st", "Dest", "gest", "slave", "output", "target", "pipe", "pas", "cp", "nom", "way", "mem", "port", "https", "pot", "origin", "rel", "desc", "iter", "loc", "sp", "out", "est", "tmp", "usr", "nw", "sys", "dist", "source", "cont", "rest", "comb", "can", "proc", "temp", "coord"]}}
{"id1": "5061606", "id2": "7468827", "code1": "    protected void createSettingsIfNecessary() throws IOException {\n        OutputStream out = null;\n        try {\n            final File fSettings = SettingsUtils.getSettingsFile();\n            if (!fSettings.exists()) {\n                fSettings.createNewFile();\n                final Path src = new Path(\"mvn/settings.xml\");\n                final InputStream in = FileLocator.openStream(getBundle(), src, false);\n                out = new FileOutputStream(SettingsUtils.getSettings(), true);\n                IOUtils.copy(in, out);\n            } else {\n                Logger.getLog().info(\"File settings.xml already exists at \" + fSettings);\n            }\n        } finally {\n            if (out != null) {\n                out.flush();\n                out.close();\n            }\n        }\n    }\n", "code2": "        public void run() {\n            try {\n                HttpURLConnection con = (HttpURLConnection) url.openConnection();\n                con.setRequestMethod(\"GET\");\n                con.setDoInput(true);\n                byte[] encodedPassword = (username + \":\" + password).getBytes();\n                BASE64Encoder encoder = new BASE64Encoder();\n                con.setRequestProperty(\"Authorization\", \"Basic \" + encoder.encode(encodedPassword));\n                BufferedInputStream in = new BufferedInputStream(con.getInputStream());\n                FileOutputStream fos = new FileOutputStream(toFile);\n                BufferedOutputStream bout = new BufferedOutputStream(fos, 1024);\n                byte[] data = new byte[1024];\n                int x = 0;\n                while ((x = in.read(data, 0, 1024)) >= 0) {\n                    bout.write(data, 0, x);\n                    lastIteraction = System.currentTimeMillis();\n                }\n                bout.flush();\n                bout.close();\n                fos.flush();\n                fos.close();\n                in.close();\n                con.disconnect();\n                finish = true;\n            } catch (Exception e) {\n                this.e = e;\n            }\n        }\n", "label": 0, "substitutes": {"createSettingsIfNecessary": ["createSettingsIfNacessed", "createSettingsIfNeccesible", "createSettingsIfNecessesar", "createSettingsIfNacessesible", "createSettingsIfNeccessible", "createSettingsIfNacessesed", "createSettingsIfNeccesar", "createSettingsIfNacessary", "createSettingsIfNecessed", "createSettingsIfNacessesary", "createSettingsIfNeccessar", "createSettingsIfNecessar", "createSettingsIfNeccessed", "createSettingsIfNecessesible", "createSettingsIfNacessar", "createSettingsIfNeccesary", "createSettingsIfNeccesed", "createSettingsIfNecessesed", "createSettingsIfNacessible", "createSettingsIfNecessible", "createSettingsIfNecessesary", "createSettingsIfNeccessary", "createSettingsIfNacessesar"], "out": ["os", "err", "cos", "again", "log", "file", "OU", "that", "io", "oe", "print", "t", "conv", "obj", "nt", "ot", "ion", "up", "aos", "max", "output", "flush", "inv", "go", "bo", "null", "n", "to", "ex", "write", "res", "gc", "outer", "f", "o", "server", "note", "on", "net", "end", "oss", "conn", "cn", "init", "ch", "writer", "exit", "client", "comment", "sys", "OUT", "report", "one", "or", "cho", "Out", "list", "yes", "it", "ent", "ou", "outs", "ne", "off", "can", "co", "con", "w", "timeout"], "fSettings": ["hSettings", "sfSetting", " fChanges", "cfsettings", "finalSetting", "bfSetting", "sfChanges", "cfSetup", "sfSettings", "hsettings", "eSetting", "sfsettings", "sfSetup", "sfOptions", "bfSettings", "eSettings", "hSetting", "fsettings", "cfSetting", "fChanges", " fSetup", "fSetting", "bfsettings", "finalSettings", "cfSettings", " fOptions", " fsettings", "fSetup", " fSetting", "fOptions", "finalOptions", "finalsettings", "esettings", "bfChanges"], "src": ["sr", "sq", "cur", "dir", "txt", "resource", "rx", "dest", "ls", "filename", "url", "rs", "view", "img", "sit", "sf", "rel", "syn", "config", "desc", "sc", "sb", "loc", "root", "th", "tmp", "ur", "rt", "attr", "upload", "fn", "spec", "sys", "source", "cont", "rl", "rc", "ser", "pkg"], "in": ["ln", "en", "id", "sin", "is", "inf", "cin", "from", "r", "IN", "n", "i", "inner", "ad", "inside", " din", "iter", "din", "init", "vin", "isin", "input", "gin", "In", "source", "and", "ins", "rin", "l", "info", "bin", "inn"]}}
{"id1": "17557289", "id2": "8079516", "code1": "    private static void copyFile(File source, File dest) throws IOException {\n        FileChannel srcChannel = new FileInputStream(source).getChannel();\n        FileChannel dstChannel = new FileOutputStream(dest).getChannel();\n        dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n        srcChannel.close();\n        dstChannel.close();\n    }\n", "code2": "    public void buildSiteForEdit(String sBasePath, String sOutputPath, String sCtrlPath, String sMenuPath, String sIntegradorPath, String sSelPageOptions, Properties oEnvironmentProps, Properties oUserProps) throws IOException, DOMException, TransformerException, TransformerConfigurationException, MalformedURLException {\n        Transformer oTransformer;\n        StreamResult oStreamResult;\n        StreamSource oStreamSrcXML;\n        StringWriter oStrWritter;\n        InputStream oXMLStream = null;\n        String sTransformed;\n        StringBuffer oPostTransform;\n        String sKey;\n        String sMedia;\n        Object sVal;\n        Page oCurrentPage;\n        int iCloseHead, iOpenBody, iCloseBody;\n        int iReaded;\n        char CharBuffer[] = new char[8192];\n        String sCharBuffer;\n        long lElapsed = 0;\n        final String sSep = System.getProperty(\"file.separator\");\n        if (DebugFile.trace) {\n            lElapsed = System.currentTimeMillis();\n            DebugFile.writeln(\"Begin Pageset.buildSiteForEdit(\" + sBasePath + \",\" + sOutputPath + \",\" + sCtrlPath + \",\" + sMenuPath + \")\");\n            DebugFile.incIdent();\n        }\n        FileSystem oFS = new FileSystem();\n        Vector vPages = pages();\n        if (!sBasePath.endsWith(sSep)) sBasePath += sSep;\n        String sWebServer = oEnvironmentProps.getProperty(\"webserver\", \"\");\n        if (DebugFile.trace && sWebServer.length() == 0) DebugFile.writeln(\"WARNING: webserver property not set at EnvironmentProperties\");\n        if (!sWebServer.endsWith(\"/\")) sWebServer += \"/\";\n        Node oContainers = oMSite.seekChildByName(oMSite.getRootNode().getFirstChild(), \"containers\");\n        if (oContainers == null) {\n            if (DebugFile.trace) DebugFile.writeln(\"ERROR: <containers> node not found.\");\n            throw new DOMException(DOMException.NOT_FOUND_ERR, \"<containers> node not found\");\n        }\n        if (DebugFile.trace) DebugFile.writeln(\"new FileInputStream(\" + (sURI.startsWith(\"file://\") ? sURI.substring(7) : sURI) + \")\");\n        for (int c = 0; c < vPages.size(); c++) {\n            oCurrentPage = (Page) vPages.get(c);\n            oXMLStream = new FileInputStream(sURI.startsWith(\"file://\") ? sURI.substring(7) : sURI);\n            oStreamSrcXML = new StreamSource(oXMLStream);\n            oStrWritter = new StringWriter();\n            oStreamResult = new StreamResult(oStrWritter);\n            try {\n                oTransformer = StylesheetCache.newTransformer(sBasePath + \"xslt\" + sSep + \"templates\" + sSep + oMSite.name() + sSep + oCurrentPage.template());\n                sMedia = oTransformer.getOutputProperty(OutputKeys.MEDIA_TYPE);\n                if (DebugFile.trace) DebugFile.writeln(OutputKeys.MEDIA_TYPE + \"=\" + sMedia);\n                if (null == sMedia) sMedia = \"html\"; else sMedia = sMedia.substring(sMedia.indexOf('/') + 1);\n                if (null == oCurrentPage.getTitle()) throw new NullPointerException(\"Page \" + String.valueOf(c) + \" title is null\");\n                if (DebugFile.trace) DebugFile.writeln(\"Page.filePath(\" + sOutputPath + oCurrentPage.getTitle().replace(' ', '_') + \".\" + sMedia + \")\");\n                oCurrentPage.filePath(sOutputPath + oCurrentPage.getTitle().replace(' ', '_') + \".\" + sMedia);\n                StylesheetCache.setParameters(oTransformer, oEnvironmentProps);\n                StylesheetCache.setParameters(oTransformer, oUserProps);\n                oTransformer.setParameter(\"param_page\", ((Page) (vPages.get(c))).getTitle());\n                oTransformer.transform(oStreamSrcXML, oStreamResult);\n            } catch (TransformerConfigurationException e) {\n                oLastXcpt = e;\n                sMedia = null;\n                SourceLocator sl = e.getLocator();\n                if (DebugFile.trace) {\n                    if (sl == null) {\n                        DebugFile.writeln(\"ERROR TransformerConfigurationException \" + e.getMessage());\n                    } else {\n                        DebugFile.writeln(\"ERROR TransformerConfigurationException \" + e.getMessage() + \" line=\" + String.valueOf(sl.getLineNumber()) + \" column=\" + String.valueOf(sl.getColumnNumber()));\n                    }\n                }\n            } catch (TransformerException e) {\n                oLastXcpt = e;\n                sMedia = null;\n                if (DebugFile.trace) DebugFile.writeln(\"ERROR TransformerException \" + e.getMessageAndLocation());\n            }\n            oTransformer = null;\n            oStreamResult = null;\n            sTransformed = oStrWritter.toString();\n            if (DebugFile.trace) DebugFile.writeln(\"transformation length=\" + String.valueOf(sTransformed.length()));\n            if (sTransformed.length() > 0) {\n                iCloseHead = sTransformed.indexOf(\"</head\");\n                if (iCloseHead < 0) iCloseHead = sTransformed.indexOf(\"</HEAD\");\n                iOpenBody = sTransformed.indexOf(\"<body\", iCloseHead);\n                if (iOpenBody < 0) iOpenBody = sTransformed.indexOf(\"<BODY\", iCloseHead);\n                iCloseBody = sTransformed.indexOf(\">\", iOpenBody + 5);\n                for (char s = sTransformed.charAt(iCloseBody + 1); s == '\\r' || s == '\\n' || s == ' ' || s == '\\t'; s = sTransformed.charAt(++iCloseBody)) ;\n                oPostTransform = new StringBuffer(sTransformed.length() + 4096);\n                oPostTransform.append(sTransformed.substring(0, iCloseHead));\n                oPostTransform.append(\"\\n<script language=\\\"JavaScript\\\" src=\\\"\" + sMenuPath + \"\\\"></script>\");\n                oPostTransform.append(\"\\n<script language=\\\"JavaScript\\\" src=\\\"\" + sIntegradorPath + \"\\\"></script>\\n\");\n                oPostTransform.append(sTransformed.substring(iCloseHead, iCloseHead + 7));\n                oPostTransform.append(sTransformed.substring(iOpenBody, iCloseBody));\n                try {\n                    sCharBuffer = oFS.readfilestr(sCtrlPath, \"UTF-8\");\n                    if (DebugFile.trace) DebugFile.writeln(String.valueOf(sCharBuffer.length()) + \" characters readed\");\n                } catch (com.enterprisedt.net.ftp.FTPException ftpe) {\n                    throw new IOException(ftpe.getMessage());\n                }\n                try {\n                    if (DebugFile.trace) DebugFile.writeln(\"Gadgets.replace(\" + sCtrlPath + \",http://demo.hipergate.com/,\" + sWebServer + \")\");\n                    Gadgets.replace(sCharBuffer, \"http://demo.hipergate.com/\", sWebServer);\n                } catch (org.apache.oro.text.regex.MalformedPatternException e) {\n                }\n                oPostTransform.append(\"<!--Begin \" + sCtrlPath + \"-->\\n\");\n                oPostTransform.append(sCharBuffer);\n                sCharBuffer = null;\n                oPostTransform.append(\"\\n<!--End \" + sCtrlPath + \"-->\\n\");\n                oPostTransform.append(sTransformed.substring(iCloseBody));\n            } else {\n                oPostTransform = new StringBuffer(\"Page \" + ((Page) vPages.get(c)).getTitle() + \" could not be rendered.\");\n                if (oLastXcpt != null) oPostTransform.append(\"<BR>\" + oLastXcpt.getMessageAndLocation());\n            }\n            if (DebugFile.trace) DebugFile.writeln(\"new FileWriter(\" + sOutputPath + oCurrentPage.getTitle().replace(' ', '_') + \"_.\" + sMedia + \")\");\n            if (sSelPageOptions.length() == 0) oFS.writefilestr(sOutputPath + oCurrentPage.getTitle().replace(' ', '_') + \"_.\" + sMedia, oPostTransform.toString(), \"UTF-8\"); else try {\n                oFS.writefilestr(sOutputPath + oCurrentPage.getTitle().replace(' ', '_') + \"_.\" + sMedia, Gadgets.replace(oPostTransform.toString(), \":selPageOptions\", sSelPageOptions), \"UTF-8\");\n            } catch (Exception e) {\n            }\n            oPostTransform = null;\n            sTransformed = null;\n        }\n        oXMLStream.close();\n        if (DebugFile.trace) {\n            DebugFile.writeln(\"done in \" + String.valueOf(System.currentTimeMillis() - lElapsed) + \" miliseconds\");\n            DebugFile.decIdent();\n            DebugFile.writeln(\"End Pageset.buildSiteForEdit()\");\n        }\n    }\n", "label": 1, "substitutes": {"copyFile": ["copyfile", " cpFiles", " cpMessage", " copyMessage", " cpfile", "copyFiles", " dupMessage", " copyfile", " dupFile", " dupFiles", " cpFile", " dupfile", " copyFiles", "copyMessage"], "source": ["master", "search", "seed", "sample", "subject", "match", "site", "parent", "ce", "src", "resource", "start", "ources", "service", "SOURCE", "from", "target", "style", "copy", "shell", "original", "view", "query", "ource", "scope", "check", "base", "Source", "get", "sql", "init", "input", "scene", "template", "spec", "sys", "image", "origin", "ace", "se"], "dest": ["master", "d", "trans", "them", "des", "that", "crit", "src", "orig", "test", "st", "Dest", "gest", "temp", "target", "nom", "way", "null", "good", "img", "gt", "pot", "result", "end", "est", "loc", "sp", "tmp", "usr", "exp", "etc", "dist", "rest", "pub", "cont", "tom", "del", "bin", "origin"], "srcChannel": ["rcCommand", "srcFile", "srcchannel", " srcChan", " srcChuck", "sourceChan", "sqChuck", "rcChannel", "rcChan", " srcChain", "sourceCommand", "sourceStream", "srcCommand", " srcchannel", "srcStream", "rcchannel", " srcHandler", "rcHandler", "robChain", "srcChan", "robChannel", "srcHandler", "sqFile", " srcCommand", "sqChain", " srcFile", "sysHandler", " srcStream", "srcChain", "sourcechannel", "sourceChannel", "sysChan", "sysChannel", "sqChannel", "rcStream", "robFile", "srcChuck", "robChuck", "syschannel"], "dstChannel": ["destChan", "nddestCh", " dotchannel", "destQueue", "dndStream", "dotQueue", " dotChannel", " dndChannel", "dndChannel", "destchannel", " dstQueue", "ddestQueue", "destCh", "dstMethod", "dndMethod", "destChannel", " dndChan", "ddestChannel", "dgtChannel", "ddestChan", "ddestCh", "ndstHandler", " dstChan", "ndstCh", " dstStream", "dotChannel", "dstCh", "dstchannel", "dndHandler", "dndChan", "dgtChan", " dstchannel", "dndchannel", "dndCh", "dgtchannel", "dstQueue", "ndstMethod", "dstChan", "dstStream", "nddestChannel", "ddestchannel", "nddestHandler", " dotChan", "ddestHandler", " dotQueue", "dotChan", "dgtStream", "nddestMethod", "ddestStream", " dndchannel", " dndStream", "dstHandler", "ndstChannel", "destMethod", "ddestMethod", "destHandler", "dotchannel"]}}
{"id1": "3375722", "id2": "13783549", "code1": "    public void importarSetor(File pArquivoXLS, String pCabecalhoSetor, Andamento pAndamento) throws FileNotFoundException, IOException, SQLException, InvalidFormatException {\n        int iLinha = -1;\n        Statement stmtLimpezaInicialDestino = null;\n        OraclePreparedStatement stmtDestino = null;\n        try {\n            Workbook arquivo = WorkbookFactory.create(new FileInputStream(pArquivoXLS));\n            Sheet plan1 = arquivo.getSheetAt(0);\n            int QUANTIDADE_DE_REGISTROS_DE_CABECALHO = 7;\n            int QUANTIDADE_DE_REGISTROS_DE_RODAPE = 14;\n            int QUANTIDADE_DE_REGISTROS_DE_METADADOS = QUANTIDADE_DE_REGISTROS_DE_CABECALHO + QUANTIDADE_DE_REGISTROS_DE_RODAPE;\n            int quantidadeDeRegistrosEstimada = plan1.getPhysicalNumberOfRows() - QUANTIDADE_DE_REGISTROS_DE_METADADOS;\n            String vSetor = \"\", vSubsetor = \"\", vSegmento = \"\";\n            LinhaDaPlanilhaDosSetores registroAtual;\n            int vPapeisPorSegmento = 0;\n            stmtLimpezaInicialDestino = conDestino.createStatement();\n            String sql = \"TRUNCATE TABLE TMP_TB_SETOR_SUBSETOR_SEGMENTO\";\n            stmtLimpezaInicialDestino.executeUpdate(sql);\n            sql = \"INSERT INTO TMP_TB_SETOR_SUBSETOR_SEGMENTO(SIGLA_EMPRESA, NOME_SETOR, NOME_SUBSETOR, NOME_SEGMENTO) VALUES(:SIGLA_EMPRESA, :NOME_SETOR, :NOME_SUBSETOR, :NOME_SEGMENTO)\";\n            stmtDestino = (OraclePreparedStatement) conDestino.prepareStatement(sql);\n            stmtDestino.setExecuteBatch(COMANDOS_POR_LOTE);\n            int quantidadeDeRegistrosImportados = 0;\n            iLinha = 8;\n            while (true) {\n                registroAtual = new LinhaDaPlanilhaDosSetores(plan1.getRow(iLinha));\n                if (registroAtual.nomeDoSetor.length() > 0 && !registroAtual.nomeDoSetor.equalsIgnoreCase(pCabecalhoSetor)) {\n                    if (registroAtual.nomeDoSubsetor.equalsIgnoreCase(\"\")) {\n                        break;\n                    } else {\n                        vSetor = registroAtual.nomeDoSetor;\n                        vSubsetor = null;\n                        vSegmento = null;\n                    }\n                }\n                if (registroAtual.nomeDoSubsetor.length() > 0 && !registroAtual.nomeDoSetor.equalsIgnoreCase(pCabecalhoSetor)) {\n                    vSubsetor = registroAtual.nomeDoSubsetor;\n                    vSegmento = null;\n                }\n                String nomeDoSegmento = registroAtual.nomeDoSegmentoOuDaEmpresa;\n                if (nomeDoSegmento.length() > 0 && !registroAtual.nomeDoSetor.equalsIgnoreCase(pCabecalhoSetor) && registroAtual.siglaDaEmpresa.equals(\"\")) {\n                    if (vSegmento != null && vPapeisPorSegmento == 0) {\n                        vSegmento = vSegmento + \" \" + nomeDoSegmento;\n                    } else {\n                        vSegmento = nomeDoSegmento;\n                    }\n                    vPapeisPorSegmento = 0;\n                }\n                String nomeDaEmpresa = registroAtual.nomeDoSegmentoOuDaEmpresa;\n                if (registroAtual.siglaDaEmpresa.length() == 4 && !registroAtual.nomeDoSetor.equalsIgnoreCase(pCabecalhoSetor) && !nomeDaEmpresa.equals(\"\")) {\n                    String vCodneg = registroAtual.siglaDaEmpresa;\n                    stmtDestino.clearParameters();\n                    stmtDestino.setStringAtName(\"SIGLA_EMPRESA\", vCodneg);\n                    stmtDestino.setStringAtName(\"NOME_SETOR\", vSetor);\n                    stmtDestino.setStringAtName(\"NOME_SUBSETOR\", vSubsetor);\n                    stmtDestino.setStringAtName(\"NOME_SEGMENTO\", vSegmento);\n                    int contagemDasInsercoes = stmtDestino.executeUpdate();\n                    quantidadeDeRegistrosImportados++;\n                    vPapeisPorSegmento++;\n                }\n                iLinha++;\n                double percentualCompleto = (double) quantidadeDeRegistrosImportados / quantidadeDeRegistrosEstimada * 100;\n                pAndamento.setPercentualCompleto((int) percentualCompleto);\n            }\n            conDestino.commit();\n        } catch (Exception ex) {\n            conDestino.rollback();\n            ProblemaNaImportacaoDeArquivo problemaDetalhado = new ProblemaNaImportacaoDeArquivo();\n            problemaDetalhado.nomeDoArquivo = pArquivoXLS.getName();\n            problemaDetalhado.linhaProblematicaDoArquivo = iLinha;\n            problemaDetalhado.detalhesSobreOProblema = ex;\n            throw problemaDetalhado;\n        } finally {\n            pAndamento.setPercentualCompleto(100);\n            if (stmtLimpezaInicialDestino != null && (!stmtLimpezaInicialDestino.isClosed())) {\n                stmtLimpezaInicialDestino.close();\n            }\n            if (stmtDestino != null && (!stmtDestino.isClosed())) {\n                stmtDestino.close();\n            }\n        }\n    }\n", "code2": "    private static void copy(String sourceName, String destName) throws IOException {\n        File source = new File(sourceName);\n        File dest = new File(destName);\n        FileChannel in = null, out = null;\n        try {\n            in = new FileInputStream(source).getChannel();\n            out = new FileOutputStream(dest).getChannel();\n            long size = in.size();\n            MappedByteBuffer buf = in.map(FileChannel.MapMode.READ_ONLY, 0, size);\n            out.write(buf);\n        } finally {\n            if (in != null) in.close();\n            if (out != null) out.close();\n        }\n    }\n", "label": 0, "substitutes": {"importarSetor": [" importatSetero", " importarDator", " importarSelector", " importatSetors", " importarDatr", " importarStr", " importatSelectr", " importatSelector", " importarDators", " importarDatero", " importarSelectero", " importarSetors", " importarSelectr", " importarStor", " importarSelectors", " importarStero", " importatSetr", " importatSetor", " importarSetr", " importatSelectero", " importarSetero", " importarStors", " importatSelectors"], "pArquivoXLS": ["pArquivoXls", "pArquivoDXls", "pArquarioXLS", "pArquivoXXCS", "pArquivoDXLS", "pArquiveEXCS", "pArquivoOXCS", "pArquiveEXLS", "pArquivoDXCS", "pArquiveEXls", "pArquivoOXls", "pArquivoTXCS", "pArquivoTXML", "pArquivoXXLS", "pArquivoTXls", "pArquivoXXML", "pArquiveXML", "pArquiveEXML", "pArquivoXCS", "pArquiveXCS", "pArquiveXls", "pArquiveXLS", "pArquivoEXML", "pArquivoXML", "pArquarioEXls", "pArquivoEXLS", "pArquivoEXls", "pArquivoEXCS", "pArquarioXML", "pArquarioEXCS", "pArquivoOXLS", "pArquarioEXLS", "pArquivoDXML", "pArquivoOXML", "pArquivoTXLS", "pArquarioXls", "pArquarioXCS", "pArquivoXXls", "pArquarioEXML"], "pCabecalhoSetor": ["pCabecalhoStter", "pCabecalhaSetr", "pCabecalhoStar", "pCabecalhaSetor", "pCabecalhaSetar", "pCabecalhoSetr", "pCabecalhoStr", "pCabecalhoStor", "pCabecalhaSetter", "pCabecalhoSetar", "pCabecalhoSetter"], "pAndamento": ["pandmente", "pAndimentO", "pAndimento", "pandamente", "pAndementO", "pAndamentos", "pAndamente", "pAndmente", "pandmentos", "pandmento", "pandamento", "pandamentO", "pAndmentO", "pAndamentO", "pAndimente", "pandamentos", "pAndementos", "pandmentO", "pAndmentos", "pAndemento", "pAndmento", "pAndimentos", "pAndemente"], "iLinha": ["iPlanva", "iLu\u00e7a", "iLin\u00e7a", "iEnzo", "aiLinva", "aiPlanzo", "iPlan\u00e7a", "aiLinha", "aiLinzo", "aiPlan\u00e7a", "iPlanha", "iLuzo", "iEn\u00e7a", "iLuva", "aiPlanha", "iLuha", "iEnva", "aiPlanva", "iPlanzo", "iLinva", "aiLin\u00e7a", "iLinzo", "iEnha"], "stmtLimpezaInicialDestino": ["stmtLimpezaInitalDestino", "stmtLimpezaInicialDestione", "stmtLimpezaInicialDecINO", "stmtLimpezaInicioEstination", "stmtLimpezaIniciodestino", "stmtLimpezaInicioDestinos", "stmtLimpezaInicialEstin", "stmtLimpezaInitalDestINO", "stmtLimpezaInicioEstINO", "stmtLimpezaInicialEstination", "stmtLimpezaInicialDecino", "stmtLimpezaInitalDestinos", "stmtLimpezaInicialdestino", "stmtLimpezaInitalEstinos", "stmtLimpezaInitalEstINO", "stmtLimpezaInicioEstino", "stmtLimpezaInicioDestino", "stmtLimpezaInicioEstin", "stmtLimpezaInicialDestINO", "stmtLimpezaInitalEstino", "stmtLimpezaInicialEstinos", "stmtLimpezaIniciodestination", "stmtLimpezaInitalEstione", "stmtLimpezaInicioDestINO", "stmtLimpezaInitalDestione", "stmtLimpezaInicialEstino", "stmtLimpezaInicioDestination", "stmtLimpezaInicialdestINO", "stmtLimpezaInicialdestin", "stmtLimpezaInicialEstINO", "stmtLimpezaInicialdestinos", "stmtLimpezaInicialDestinos", "stmtLimpezaIniciodestinos", "stmtLimpezaInicialDestin", "stmtLimpezaInicialdestination", "stmtLimpezaInicioDestin", "stmtLimpezaInicialEstione", "stmtLimpezaIniciodestINO", "stmtLimpezaInicialDestination", "stmtLimpezaInicialDecione", "stmtLimpezaInicialDecinos"], "stmtDestino": ["stmtdestino", "stmpDestino", "stmtDesino", "stmtdestinos", "stmtDesano", "stmtDestoin", "stmpOrigoin", "stmdestino", "stmtOrigoin", "stmtDecano", "stmtDesin", "stmtDestano", "stmtdestoin", "stmDestination", "stmtDestined", "stmtDestin", "stmtDecination", "stmtOrigino", "stmtdestination", "stmtDescino", "stmtDescination", "stmOrigined", "stmpOrigination", "stmDestano", "stmtDecin", "stmtdestin", "stmdestin", "stmtOriginos", "stmdestano", "stmpDestinos", "stmtDescin", "stmOrigination", "stmtOrigination", "stmpOriginos", "stmOrigino", "stmOrigin", "stmtDescined", "stmpDestination", "stmDestin", "stmtdestano", "stmtStino", "stmtDestinos", "stmpDestoin", "stmtOrigin", "stmtDecino", "stmtStination", "stmtOrigined", "stmtStoin", "stmDestino", "stmtDestination", "stmpOrigino", "stmtDesination", "stmDestined", "stmtStinos", "stmdestination"], "arquivo": ["arqive", " araquiva", "araquarius", "arqivo", " araquivo", "rquivo", " arqive", " araquario", "rquiva", "rquarius", "raquario", "rquario", "raquarius", "arquerario", "araquario", " arquive", "arquerarius", "araquiva", "arqario", "raquiva", " araquive", " arQuiva", "arquive", "arqarius", " arQuivo", " arqiva", "arquario", "arqiva", " arquario", " arquiva", "arquerivo", " arQuario", " arqivo", " arQuive", "arquarius", "raquivo", " arqario", "arqueriva", "araquivo", "arquiva"], "plan1": ["planOne", " planner1", "Plan1", "panel01", " plan01", "Plan2", " plan0", " plan2", "plan2", "panel1", "PlanOne", " planner0", "Plan01", " plannerOne", "plan01", " planner2", "plan0", "panel2", "panel0", "Plan0", " planOne"], "QUANTIDADE_DE_REGISTROS_DE_CABECALHO": ["QUANTIDADE_DE_REGISTERAS_", "QUANTIDADE_DE_REGISTROS__", "QUANTIDADE_DE_REGISTROs_", "QUANTIDADE_DE_REGISTEROS_", "QUANTIDADE_DE_REGISTRos_", "QUANTIDADE_DE_REGISTERos_", "QUANTIDADE_DE_REGISTRAS_", "QUANTIDADE_DE_REGISTROs2", "QUANTIDADE_DE_REGISTRANS_", "QUANTIDADE_DE_REGISTEROS2", "QUANTIDADE_DE_REGISTRAS2", "QUANTIDADE_DE_REGISTEROS__", "QUANTIDADE_DE_REGISTRos__", "QUANTIDADE_DE_REGISTRAS__", "QUANTIDADE_DE_REGISTROS2", "QUANTIDADE_DE_REGISTRos2", "QUANTIDADE_DE_REGISTROs__", "QUANTIDADE_DE_REGISTROS_", "QUANTIDADE_DE_REGISTERos__", "QUANTIDADE_DE_REGISTERos2"], "QUANTIDADE_DE_REGISTROS_DE_RODAPE": ["QUANTIDADE_DE_REGISTERosON", "QUANTIDADE_DE_REGISTRIES2", "QUANTIDADE_DE_REGISTEROSON", "QUANTIDADE_DE_REGISTEROS_", "QUANTIDADE_DE_REGISTRos_", "QUANTIDADE_DE_REGISTRATESON", "QUANTIDADE_DE_REGISTRIES_", "QUANTIDADE_DE_REGISTERos_", "QUANTIDADE_DE_REGISTRAS_", "QUANTIDADE_DE_REGISTEROS2", "QUANTIDADE_DE_REGISTRATIONS_", "QUANTIDADE_DE_REGISTRAS2", "QUANTIDADE_DE_REGISTRATIONSON", "QUANTIDADE_DE_REGISTRosON", "QUANTIDADE_DE_REGISTROSON", "QUANTIDADE_DE_REGISTROS2", "QUANTIDADE_DE_REGISTRos2", "QUANTIDADE_DE_REGISTROS_", "QUANTIDADE_DE_REGISTRATES_", "QUANTIDADE_DE_REGISTERos2"], "QUANTIDADE_DE_REGISTROS_DE_METADADOS": ["QUANTIDADE_DE_REGISTERAS_", "QUANTIDADE_DE_REGISTEROS_", "QUANTIDADE_DE_REGISTRos_", "QUANTIDADE_DE_REGISTRIES_", "QUANTIDADE_DE_REGISTRAS_", "QUANTIDADE_DE_REGISTRATIONS_", "QUANTIDADE_DE_REGISTROS_", "QUANTIDADE_DE_REGISTRATES_"], "quantidadeDeRegistrosEstimada": ["quantidadeDeRegistrosEstIMadas", "quantidadeDeRegistrosEstimados", "quantidadeDeRegistrosEstIMados", "quantidadeDeRegistrosEstipada", "quantidadeDeRegistrosEstipados", "quantidadeDeRegistrosEstifados", "quantidadeDeRegistrosEstifada", "quantidadeDeRegistrosEstipadas", "quantidadeDeRegistrosEstifadas", "quantidadeDeRegistrosEstipated", "quantidadeDeRegistrosEstifated", "quantidadeDeRegistrosEstimated", "quantidadeDeRegistrosEstimadas", "quantidadeDeRegistrosEstIMada", "quantidadeDeRegistrosEstIMated"], "vSetor": ["vSetora", "vSetero", "vEndar", "vEndora", "valuesSetor", "vSelectora", "vEndor", "valuesSetar", "vSETora", "valuesSetero", "vSelector", "vSETor", "valuesSETar", "vEndero", "vSETero", "valuesSetora", "valuesSETor", "vSetar", "vSelectar", "valuesSETero", "vSETar", "vSelectero", "valuesSETora"], "vSubsetor": ["vsubseto", "vsubsetor", "vSubsetation", "vSubetor", "vsubsetation", "vSubmentation", "vsubsetOR", "vSubscriptation", "vsubscriptation", "vSubscripto", "vSubmento", "vSubmentOR", "vSubetOR", "vSubscriptor", "vSubseto", "vSubeto", "vsubscriptor", "vSubetation", "vSubmentor", "vSubsetOR", "vsubscripto", "vSubscriptOR", "vsubscriptOR"], "vSegmento": ["vSegementO", "vSegementano", "vSeggmentO", "vIncrementao", "vSegementao", "vIncreementano", "vSegMENTano", "vSeggmento", "vIncreementao", "vSegemento", "vSeggmentao", "vIncreemento", "vIncrementO", "vSeggmentano", "vIncrementano", "vIncremento", "vSegMENTo", "vSegMENTO", "vSegMENTao", "vSegmentano", "vIncreementO", "vSegmentO", "vSegmentao"], "registroAtual": ["Registroatuel", "RegistroATuel", "RegistroAtomic", "RegistroATUAL", "RegistroActUAL", "Registroatomic", "RegistroActual", "RegistrosAtomic", "RegistroAtuel", "RegistroATual", "RegistroAtUAL", "RegistrosActuel", "RegistroActuel", "RegistrosActual", "RegistrosAtual", "Registroatual", "RegistroAtual", "RegistrosAtUAL", "RegistroActomic", "RegistrosActomic", "RegistroatUAL", "RegistrosActUAL", "RegistrosAtuel", "RegistroATomic"], "vPapeisPorSegmento": ["vPapeisPorSegmentO", "vPapeisPorGmentao", "vPapeisPorSegmentede", "vPapeisPorSegmente", "vPapeisPorGamentao", "vPapeisPorSegmentedo", "vPapeisPorSegmentedO", "vPapeisPorGamente", "vPapeisPorGmentO", "vPapeisPorSegemente", "vPapeisPorSegamentao", "vPapeisPorSegmentao", "vPapeisPorSegementO", "vPapeisPorSegmentedao", "vPapeisPorGamentO", "vPapeisPorSegamentO", "vPapeisPorSegamento", "vPapeisPorGmento", "vPapeisPorGmente", "vPapeisPorSegemento", "vPapeisPorSegementao", "vPapeisPorSegamente", "vPapeisPorGamento"], "sql": ["js", "sq", "seed", "description", "spr", "scl", "string", "log", "orm", "pel", "str", "nl", "mail", "eps", "ls", "pg", "select", "inv", "url", "email", "dl", "query", "sol", "session", "condition", "statement", "html", "SQL", "csv", "security", "rel", "expression", "prefix", "table", "sd", "s", "params", "sp", "software", "expr", "series", "cfg", "wal", "db", "fn", "template", "spec", "comment", "sys", "pr", "sv", "socket", "details", "xml", "json", "cmd", "ql", "install"]}}
{"id1": "11484416", "id2": "7948308", "code1": "    private void moveFile(File orig, File target) throws IOException {\n        byte buffer[] = new byte[1000];\n        int bread = 0;\n        FileInputStream fis = new FileInputStream(orig);\n        FileOutputStream fos = new FileOutputStream(target);\n        while (bread != -1) {\n            bread = fis.read(buffer);\n            if (bread != -1) fos.write(buffer, 0, bread);\n        }\n        fis.close();\n        fos.close();\n        orig.delete();\n    }\n", "code2": "    private void getRandomGUID(boolean secure) {\n        MessageDigest md5 = null;\n        StringBuffer sbValueBeforeMD5 = new StringBuffer();\n        try {\n            md5 = MessageDigest.getInstance(\"MD5\");\n        } catch (NoSuchAlgorithmException e) {\n            logger.error(\"At RandomGUID !!!\", e);\n        }\n        try {\n            long time = System.currentTimeMillis();\n            long rand = 0;\n            if (secure) {\n                rand = mySecureRand.nextLong();\n            } else {\n                rand = myRand.nextLong();\n            }\n            sbValueBeforeMD5.append(s_id);\n            sbValueBeforeMD5.append(\":\");\n            sbValueBeforeMD5.append(Long.toString(time));\n            sbValueBeforeMD5.append(\":\");\n            sbValueBeforeMD5.append(Long.toString(rand));\n            valueBeforeMD5 = sbValueBeforeMD5.toString();\n            md5.update(valueBeforeMD5.getBytes());\n            byte[] array = md5.digest();\n            StringBuffer sb = new StringBuffer();\n            for (int j = 0; j < array.length; ++j) {\n                int b = array[j] & 0xFF;\n                if (b < 0x10) sb.append('0');\n                sb.append(Integer.toHexString(b));\n            }\n            valueAfterMD5 = sb.toString();\n        } catch (Exception e) {\n            logger.error(\"At RandomGUID !!!\", e);\n        }\n    }\n", "label": 0, "substitutes": {"moveFile": ["copyfile", "movefile", " moveImage", "copyFile", "MoveFile", "MoveDirectory", "copyImage", "MoveImage", "moveDirectory", " movefile", "copyDirectory", " moveDirectory", "moveImage", "Movefile"], "orig": [" ORIG", "created", "cur", "proxy", "ret", "src", "clip", "old", "was", "internal", "dest", "imp", "prop", "temp", "original", "copy", "inv", "existing", "act", "good", "ex", "Original", "img", "Orig", "ord", "base", "iter", "def", "raw", "tmp", "init", "create", "ie", "exp", "lim", "dom", "im", "Origin", "or", "rc", "ra", "ip", "ori", "origin", "coord", "org", " original"], "target": ["local", "mac", "build", "path", "match", "file", "ret", "Target", "parent", "replace", "src", "test", "t", "dest", "output", "copy", "null", "goal", "gt", "rel", "base", "tile", "table", "format", "out", "tmp", "touch", "png", "template", "sys", "arget", "source", "top", "it", "next", "origin"], "buffer": ["sample", "bytes", "batch", "filter", "binary", "sequence", "variable", "bar", "queue", "print", "length", "char", "face", "history", "bridge", "stack", "phrase", "limit", "bb", "output", "attribute", "button", "block", "mem", "scroll", "base", "engine", "iter", "table", "screen", "buff", "message", "page", "paste", "read", "document", "line", "comment", "bank", "data", "memory", "password", "chain", "header", "window", "cache", "available", "buf", "Buffer", "stream", "display", "command"], "bread": ["iber", "print", "fee", "bridge", "fred", "bb", "knife", "middle", "rown", "good", "blow", "gear", "web", "READ", "rik", "brew", "bel", " ribs", "uckle", "give", "don", "inn", "rew", "broken", "brow", "bush", "cake", "stay", "shield", "wei", "eb", "read", "neum", "bishop", "bn", "robe", "rain", "log", "fine", "billion", "lf", "level", "boat", "fan", "jing", "scroll", "piece", " barely", "ig", "ful", "beat", "bill", "nob", "spoken", "bi", "bc", " Bread", "bad", "eric", "bird", "leen", "bold", "beck", " breadth", "score", "oug", "four", "wake", "bled", "ble", "corruption", "crafted", "less"], "fis": ["Fos", "bos", "li", "ufis", "di", "biss", "fris", "fia", "liss", " fiss", " fi", "fiss", "Fis", " fris", "bis", "dis", "frei", "ufos", "los", "lis", "freia", "Fiss", "ufris", " fia", "Fris", "fi", "freis", "ufiss", "dia", "bi"], "fos": ["toos", "ooes", "Fos", "oos", "eis", "poes", "vus", "eos", " foes", "oot", "ooses", "eoos", "Foses", "fot", "foes", "tos", "Foos", "eoes", "vos", "Fis", "Foes", "voes", "Fot", " fot", " foses", "foos", " fus", " foos", "poos", "fus", "tis", "toes", "foses", "pos", "voos", "pus"]}}
{"id1": "19584877", "id2": "16142024", "code1": "    public static boolean encodeFileToFile(String infile, String outfile) {\n        boolean success = false;\n        java.io.InputStream in = null;\n        java.io.OutputStream out = null;\n        try {\n            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);\n            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n            byte[] buffer = new byte[65536];\n            int read = -1;\n            while ((read = in.read(buffer)) >= 0) {\n                out.write(buffer, 0, read);\n            }\n            success = true;\n        } catch (java.io.IOException exc) {\n            exc.printStackTrace();\n        } finally {\n            try {\n                in.close();\n            } catch (Exception exc) {\n            }\n            try {\n                out.close();\n            } catch (Exception exc) {\n            }\n        }\n        return success;\n    }\n", "code2": "    private static final void copyFile(File srcFile, File destDir, byte[] buffer) {\n        try {\n            File destFile = new File(destDir, srcFile.getName());\n            InputStream in = new FileInputStream(srcFile);\n            OutputStream out = new FileOutputStream(destFile);\n            int bytesRead;\n            while ((bytesRead = in.read(buffer)) != -1) out.write(buffer, 0, bytesRead);\n            in.close();\n            out.close();\n        } catch (IOException ioe) {\n            System.err.println(\"Couldn't copy file '\" + srcFile + \"' to directory '\" + destDir + \"'\");\n        }\n    }\n", "label": 1, "substitutes": {"encodeFileToFile": ["encodeFileToStream", "encodeStringToDisk", "encodeFiletoStream", "encodeFileAsStream", "encodeFiletoFiles", "encodeFileToFiles", "encodeStringAsFiles", "encodeFileFromFile", "encodeStringAsFile", "encodeFileAsFile", "encodeStringToStream", "encodeStringToFile", "encodeStringAsDisk", "encodeFileAsDisk", "encodeFiletoDisk", "encodeStringToFiles", "encodeFileFromFiles", "encodeStringAsStream", "encodeFileToDisk", "encodeFiletoFile", "encodeFileFromStream", "encodeFileAsFiles", "encodeFileFromDisk"], "infile": ["Inbase", "Infile", "inputFile", "outpath", "inpath", "outbase", " inbase", " inFile", "inbase", "InFile", " infilename", " inpath", "inputfile", "inFile", "inputpath", "outfilename", "Inpath", "outFile", "inputfilename", "infilename"], "outfile": ["tofp", "newname", "outdir", "todir", "newfilename", "fromFile", " outname", "newfile", "fromfp", "inFile", "inname", "fromdir", "outfilename", "tofile", "indir", "outfp", "fromfile", "outFile", "newFile", "outname", "infp", " outFile", "toFile", "infilename", " outfilename"], "in": ["pin", "en", "by", "id", "is", "inf", "t", "per", "up", "al", "cin", "from", "re", "ini", "IN", "inc", "i", "ro", "inner", "inside", "ar", "on", " din", "amin", "iter", "form", "din", "conn", "get", "oin", "init", "input", "isin", "ind", "gin", "source", "In", "or", "im", "image", "ins", "rin", "it", "info", "bin", "nin", "ain", "con", "inn"], "out": ["os", "outs", "at", "file", "en", "OU", "io", "print", "b", "t", "ot", "nt", "ion", "aos", "up", "output", "flush", "ex", "n", "to", "null", "write", "inner", "res", "gt", "on", "outer", "o", "opt", "net", "end", "oss", "cn", "writer", "fn", "sys", "OUT", "Out", "it", "g", "ou", "ne", "can", "co", "con"], "buffer": ["black", "sample", "batch", "number", "binary", "sequence", "variable", "append", "bar", "queue", "print", "length", "history", "row", "stack", "phrase", "total", "attribute", "button", "view", "library", "block", "mem", "bone", "base", "note", "initial", "padding", "table", "message", "buff", "paste", "column", "frame", "template", "document", "comment", "memory", "password", "header", "pad", "window", "cache", "character", "info", "available", "buf", "Buffer", "temp", "display", "command"], "read": ["text", "allow", "send", "first", "print", "before", "length", "count", "start", "select", "skip", "run", "open", "reader", "len", "index", "range", "n", "check", "query", "write", "i", "ok", "close", "wait", "through", "iter", "set", "connect", "end", "each", "get", "READ", "reads", "raw", "req", "push", "input", "ind", "seek", "readable", "load", "reading", "give", "add", "Read", "ready", "need", "hold", " Read", "stream", "find", "size"], "success": [" Success", "submit", "first", "please", " failure", "ratulations", "crit", "unity", "growth", "complete", "town", "Success", "ith", "primary", "good", "successfully", "snap", "safe", "condition", "cess", "ok", "status", "release", "summary", "valid", "city", "accept", "sufficient", "positive", " successful", "result", "fail", "ccess", "danger", "commit", "second", "support", "setup", "successful", " successes", " okay", "error", "ceed", "photo", " succ", "warning", "value", "democracy", "same", "done", "response", "continue", "surv"]}}
{"id1": "5676111", "id2": "10158738", "code1": "    public void get() {\n        try {\n            int cnt;\n            URL url = new URL(urlStr);\n            URLConnection conn = url.openConnection();\n            conn.setDoInput(true);\n            conn.setDoOutput(false);\n            InputStream is = conn.getInputStream();\n            String filename = new File(url.getFile()).getName();\n            FileOutputStream fos = new FileOutputStream(dstDir + File.separator + filename);\n            byte[] buffer = new byte[4096];\n            while ((cnt = is.read(buffer, 0, buffer.length)) != -1) fos.write(buffer, 0, cnt);\n            fos.close();\n            is.close();\n        } catch (Exception ex) {\n            ex.printStackTrace();\n        }\n    }\n", "code2": "    public void add(String language, String tag, String root, String surface) throws FidoDatabaseException, MorphologyTagNotFoundException {\n        try {\n            Connection conn = null;\n            Statement stmt = null;\n            try {\n                conn = FidoDataSource.getConnection();\n                conn.setAutoCommit(false);\n                stmt = conn.createStatement();\n                if (containsTag(stmt, tag) == false) throw new MorphologyTagNotFoundException(tag);\n                if (isRuleUnique(stmt, language, tag, root, surface) == false) return;\n                int row;\n                if (root.equals(\"*\") == true) row = getAppendRowForTag(stmt, language, tag); else if (root.indexOf('*') == -1) row = getFirstRowForTag(stmt, language, tag); else row = getFirstRegularFormForTag(stmt, language, tag);\n                boolean use = determineRecognitionUse(root, surface);\n                bumpAllRowsDown(stmt, language, tag, row);\n                String sql = \"insert into LanguageMorphologies (LanguageName, Rank, Root, Surface, MorphologyTag, Used) \" + \"values ('\" + language + \"', \" + row + \", '\" + root + \"', '\" + surface + \"', '\" + tag + \"', \";\n                if (use == true) sql = sql + \"TRUE)\"; else sql = sql + \"FALSE)\";\n                stmt.executeUpdate(sql);\n                conn.commit();\n            } catch (SQLException e) {\n                if (conn != null) conn.rollback();\n                throw e;\n            } finally {\n                if (stmt != null) stmt.close();\n                if (conn != null) conn.close();\n            }\n        } catch (SQLException e) {\n            throw new FidoDatabaseException(e);\n        }\n    }\n", "label": 0, "substitutes": {"get": [" recover", " put", "delete", "print", " reload", " copy", "export", "run", "call", "Download", " delete", "zip", "gc", "dump", " finish", "init", "upload", "download", " download", "GET", "exec", "execute", " construct", "Get", "info", "sync", " fetch"], "cnt": [" cct", "ccount", "cNT", "Ccount", " cNT", "CNT", "acNT", "cct", " cnc", "nnt", "clen", "nct", "acnt", "uncNT", "cnc", "ncct", "Cct", "cht", "ncht", "nnc", "nccount", "uncnc", "acnc", "aclen", "nNT", "unclen", "Cnc", "Cnt", "ncnt", " ccount", " clen", " cht", "uncnt", "Cht"], "url": ["build", "sl", "gl", "path", "fl", "ret", "Url", "str", "nl", "mail", "char", "browser", "ls", "open", "r", "cp", "dl", "null", "ll", "pl", "host", "https", "ssl", "link", "f", "google", "base", "rel", "URL", "uri", "web", "fs", "loc", "ur", "cert", "client", "bel", "hl", "http", "www", "socket", "addr", "mount", "el", "l", "handle", "xml", "ref", "con", "ul"], "conn": ["os", "cur", "serv", "dial", "en", "nl", "conv", "Conn", "obj", "nt", "ca", "open", "cons", "comm", "cp", "ctx", "c", "pas", "act", "access", "connection", "ns", "col", "rel", "syn", "ens", "com", "net", "connect", "loc", "ct", "cn", "init", "ch", "cert", "yn", "client", "cm", "nc", "cont", "gn", "addr", "exec", "enc", "cb", "l", "coll", "cmd", "nec", "resp", "org", "jp", "co", "con"], "is": ["iss", "ic", "isl", "abs", "isa", "ists", "in", "imp", "ist", "mis", "ais", "ri", "iris", "si", "rs", "vis", "i", "ios", "has", "ib", "bis", "sit", "fs", "es", "dis", "ps", "iter", "IS", "ms", "bs", "lis", "icks", "init", "its", "isin", "ris", "sys", "im", "ends", "isf", "Is", "sim", "nis", "ip", "it", "us", "ins", "isi", "isc", "os", "iso", "ys"], "filename": ["river", "path", "subject", "string", "file", "fil", "FIL", "txt", "str", "sbm", "LCS", "kl", "FILE", "ame", "latest", "family", "nm", "ename", "username", "ren", "knife", "til", "title", "Filename", "f", "stem", "mson", "prefix", "journal", "fp", "continental", "name", "fn", "println", "source", "lua", "nu", "sql"], "fos": ["voses", "Fos", "bos", "Fres", " fres", "faos", " foes", " fows", "laos", "Foses", "foss", "foes", "flos", "Faos", "vos", "boss", "loes", " faos", "Foes", "fres", "boes", "loss", "los", "fows", "floss", " foses", "floes", "vaos", "bows", "vres", "foses", "Fows", "flaos", " foss", "Foss"], "buffer": ["text", "sample", "bytes", "batch", "binary", "sequence", "variable", "append", "queue", "bar", "print", "length", "char", "event", "history", "stack", "phrase", "total", "attribute", "output", "button", "view", "library", "block", "mem", "scroll", "bone", "base", "note", "iter", "table", "message", "buff", "page", "paste", "result", "database", "document", "frame", "template", "comment", "data", "source", "memory", "window", "cache", "available", "buf", "Buffer", "temp", "display", "command"]}}
{"id1": "13720140", "id2": "9727056", "code1": "    private void modifyProperty(String valueID, String value, Long userID) throws JspTagException {\n        Property property = new Property(new Long(valueID), userID);\n        String newValue = value;\n        System.out.println(property.getName());\n        if (property.getName().equals(\"Password\")) {\n            try {\n                MessageDigest crypt = MessageDigest.getInstance(\"MD5\");\n                crypt.update(value.getBytes());\n                byte digest[] = crypt.digest();\n                StringBuffer hexString = new StringBuffer();\n                for (int i = 0; i < digest.length; i++) {\n                    hexString.append(hexDigit(digest[i]));\n                }\n                newValue = hexString.toString();\n                crypt.reset();\n            } catch (NoSuchAlgorithmException e) {\n                System.err.println(\"jspShop: Could not get instance of MD5 algorithm. Please fix this!\" + e.getMessage());\n                e.printStackTrace();\n                throw new JspTagException(\"Error crypting password!: \" + e.getMessage());\n            }\n        }\n        property.setValue(newValue);\n    }\n", "code2": "    @Override\n    public OBJModel loadModel(URL url, String skin) throws IOException, IncorrectFormatException, ParsingErrorException {\n        boolean baseURLWasNull = setBaseURLFromModelURL(url);\n        OBJModel model = loadModel(url.openStream(), skin);\n        if (baseURLWasNull) {\n            popBaseURL();\n        }\n        return (model);\n    }\n", "label": 0, "substitutes": {"modifyProperty": ["modifyValue", "modifiesProp", "modifiesValue", "modifiesAttribute", "ModifyValue", "modateProp", "ModifyProp", "ModifiesProperty", "modateProperty", "modateAttribute", "modifyAttribute", "modifiesProperty", "ModifiesValue", "ModifyProperty", "ModifiesProp", "modateValue", "ModifiesAttribute", "modifyProp", "modureAttribute", "modureProp", "ModifyAttribute", "modureValue", "modureProperty"], "valueID": ["VALUEID", " valueUID", "valueMD", " valueId", "versionId", "propertyId", " valueid", " valueMD", "valueId", " valueIDs", "VALUEId", "VALUEMD", "versionID", "valueUID", "propertyID", "valueIDs", "propertyIDs", "versionMD", "versionIDs", "versionid", "versionUID", "VALUEUID", "propertyid", "valueid"], "value": ["text", "val", "address", "v", "function", "description", "string", "field", "variable", "VALUE", "update", "current", "output", "attribute", "content", "Value", "instance", "label", "code", "expression", "padding", "buffer", "example", "message", "format", "vector", "get", "input", "name", "comment", "data", "application", "save", "key", "password", "memory", "hello", "version", "default", "state", "type", "entry", "values"], "userID": [" userName", "ownerName", " userURL", "usernameId", " userType", "UserType", "ownerID", "userId", "userURL", "usernameURL", "UserURL", "userName", "usernameID", " userId", "ownerId", "usernameName", "UserName", "UserId", "UserID", "userType", "ownerType"], "property": ["item", "address", "module", "function", "description", "field", "p", "term", "pair", "resource", "print", "properties", "position", "method", "style", "attribute", "Property", "section", "to", "relation", "alias", "label", "profile", "title", "language", "claim", "license", "config", "expression", "prefix", "table", "pe", "message", "feature", "project", "second", "setup", "associated", "name", "operator", "object", "media", "data", "key", "metadata", "prototype", "ty", "option", "type", "state", "prop", "this", "translation", "policy", "display", "command"], "newValue": ["newValues", "NEWResult", "oldVersion", "uniqueVersion", " newMessage", "newString", " newName", "uniqueName", "NEWValue", "newvalue", " newValues", " newvalue", "oldResult", "uniqueValue", "NewValue", " newResult", "oldvalue", "newName", " newString", "uniqueMessage", "newResult", "newVersion", "newMessage", "oldString", "NEWvalue", "oldName", "NewValues", "NewString", "Newvalue", "oldValues", "NEWString", "oldValue", " newVersion", "oldMessage"], "crypt": ["rypt", "mac", "cook", "dec", "cmp", "cos", "cur", "CR", "pt", "ctr", "magic", "prot", "hash", "sm", "nt", "conv", "auth", "go", "comm", "cp", "rem", "cy", "rh", "check", "trust", "mem", "cs", "cr", "code", "cc", "ssl", "gc", "rot", "col", "ct", "init", "ch", "core", "cert", "bec", "roy", "cm", "sync", "cry", "sys", "hex", "cont", "reset", "Crypt", "password", "enc", "cot", "coll", "ocr", "cmd", "coin", "dict", "arch"], "digest": [" Digester", "mdested", "hashge", "hashests", "digested", " digEST", "Diggest", "Digested", "mdest", "mdge", "digge", "DigEST", " DigEST", "dester", "dest", "mdEST", "Digest", "digert", "digests", "mdester", "Digestamp", "digestamp", " digested", " Digest", "digEST", "Digester", "mdgest", "mdestamp", "hexester", "diggest", "Digert", "hexert", "hexest", " Digert", "hexEST", "dested", "hashest", "mdests", "dEST", " digestamp", "Digests", "hashgest", "digester", "Digge"], "hexString": ["hexstring", "shortStr", "shortstring", " hexStr", "hexBuffer", " hexBytes", "exstring", " hexBuffer", "formString", "hashstring", "hashArray", "shortString", "exBytes", " hexstring", "hashStr", "formBytes", "exBuffer", " hexArray", "hexStr", "hexBytes", "exString", "shortBuffer", "exStr", "hashString", "exArray", "formBuffer", "hexArray", "formStr"], "i": ["ti", "v", "ji", "I", "number", "ic", "li", "id", "io", "gi", "point", "is", "di", "e", "ki", "ii", "\u0438", "j", "span", "phi", "mi", "si", "index", "ex", "ini", "a", "pi", "ci", "m", "cli", "uri", "o", "ms", "slice", "multi", "q", "init", "ie", "ind", "gu", "u", "ei", "major", "x", "qi", "im", "chain", "ai", "ix", "sim", "ip", "it", "bi", "us", "ui", "info", "hi", "y"]}}
{"id1": "5620792", "id2": "17286898", "code1": "    public static String SHA1(String text, int HASH_VALUE_SIZE) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n        MessageDigest md;\n        md = MessageDigest.getInstance(\"SHA-1\");\n        byte[] sha1hash = new byte[HASH_VALUE_SIZE];\n        md.update(text.getBytes(\"iso-8859-1\"), 0, text.length());\n        sha1hash = md.digest();\n        return convertToHex(sha1hash);\n    }\n", "code2": "                public void run() {\n                    BufferedReader reader = null;\n                    String message = null;\n                    int messageStyle = SWT.ICON_WARNING;\n                    try {\n                        URL url = new URL(Version.LATEST_VERSION_URL);\n                        URLConnection conn = url.openConnection();\n                        reader = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n                        String latestVersion = reader.readLine();\n                        latestVersion = latestVersion.substring(latestVersion.indexOf(' ') + 1);\n                        if (!Version.getVersion().equals(latestVersion)) {\n                            message = Labels.getLabel(\"text.version.old\");\n                            message = message.replaceFirst(\"%LATEST\", latestVersion);\n                            message = message.replaceFirst(\"%VERSION\", Version.getVersion());\n                            messageStyle = SWT.ICON_QUESTION | SWT.YES | SWT.NO;\n                        } else {\n                            message = Labels.getLabel(\"text.version.latest\");\n                            messageStyle = SWT.ICON_INFORMATION;\n                        }\n                    } catch (Exception e) {\n                        message = Labels.getLabel(\"exception.UserErrorException.version.latestFailed\");\n                        Logger.getLogger(getClass().getName()).log(Level.WARNING, message, e);\n                    } finally {\n                        try {\n                            if (reader != null) reader.close();\n                        } catch (IOException e) {\n                        }\n                        final String messageToShow = message;\n                        final int messageStyleToShow = messageStyle;\n                        Display.getDefault().asyncExec(new Runnable() {\n\n                            public void run() {\n                                statusBar.setStatusText(null);\n                                MessageBox messageBox = new MessageBox(statusBar.getShell(), messageStyleToShow);\n                                messageBox.setText(Version.getFullName());\n                                messageBox.setMessage(messageToShow);\n                                if (messageBox.open() == SWT.YES) {\n                                    BrowserLauncher.openURL(Version.DOWNLOAD_URL);\n                                }\n                            }\n                        });\n                    }\n                }\n", "label": 0, "substitutes": {"SHA1": ["SHA256", " SHA256", " SHAOne", "HS2", " SHA2", "HS1", "sha256", "HS256", "SHAOne", "HSOne", "sha1", "SHA2", "sha2", "shaOne"], "text": ["path", "subject", "pt", "string", "txt", "Text", "str", "term", "print", "test", "t", "event", "nt", "msg", "select", "current", "output", "url", "content", "act", "ext", "pattern", "code", "config", "form", "prefix", "ct", "message", "out", "q", "input", "read", "document", "name", "template", "comment", "data", "cont", "source", "value", "key", "password", "TEXT", "tx", "translation", "word"], "HASH_VALUE_SIZE": ["HASH_VALUE_DIR", "HASH_VALUE_NO", "HASH_VAL_SIZE", "HASH_VALUE_SOURCE", "HASH_value_TYPE", "HASH_value_DIR", "HASH_VAL_NAME", "HASH_value_SIZE", "HASH_VALUE_NAME", "HASH_value_SOURCE", "HASH_VALUE_TYPE", "HASH_VALUE_Size", "HASH_VAL_Size", "HASH_VAL_NO"], "md": ["mc", "d", "js", " man", "h", "pd", "dir", "ctr", "mt", "ld", "mod", "mode", " ms", "sm", " ma", " mm", " mo", " sd", "nd", " mc", " cd", "det", "ad", "m", "mond", " dd", " rm", "ms", "sd", "dd", "mand", "rm", "td", "hd", "dig", "hm", "mm", "ds", "mk", "cd", "ind", "od", " del", "bd", "mg", " cmd", "mn", "dm", "add", "mp", "metadata", "der", "dh", "and", "df", "mb", "cmd", "grad", "MD", "cond", " Md"], "sha1hash": ["sha2sum", " SHA1value", "sha5have", "sha1result", "sha3hash", "shaonesum", "SHA2Hash", "sha31hash", " SHA31value", " SHA1hash", "sha2have", "sha3hex", "sha2value", "sha7hash", "SHA1hash", "sha2hash", "sha7Hash", " SHA31sum", " SHA31hash", "sha1have", "sha1str", "ha1sum", "sha1sum", "ha2sum", "sha2result", "ha1hash", "sha3str", "sha1Hash", "SHA2hash", "ha2result", "sha5sum", "sha2hex", "sha3Hash", "shaoneHash", "SHA1hex", "sha7str", " SHA31have", "sha2str", "sha31have", "sha31sum", "ha2Hash", "sha1value", " SHA1have", "shaonehash", " SHA1sum", "sha2Hash", "SHA2hex", "SHA2str", "SHA1Hash", "ha1Hash", "sha5hash", "shaoneresult", "sha31value", "ha2hash", "SHA1str", "sha7hex", "ha1result", "sha1hex", "sha5value"]}}
{"id1": "9479502", "id2": "5632808", "code1": "    private File unpackZIP(URL url, String dirName) {\n        try {\n            URLConnection connection = url.openConnection();\n            if (connection instanceof JarURLConnection) {\n                File destDir = new File(getExtensionsDirectory() + EGEConstants.fS + dirName);\n                destDir.mkdirs();\n                EGEIOUtils.unzipFile(((JarURLConnection) connection).getJarFile(), destDir);\n                return destDir;\n            }\n        } catch (IOException e) {\n            LOGGER.error(\"Could not unzip jar file.\", e);\n        }\n        return null;\n    }\n", "code2": "        @Override\n        public void respondGet(HttpServletResponse resp) throws IOException {\n            setHeaders(resp);\n            final OutputStream os;\n            if (willDeflate()) {\n                resp.setHeader(\"Content-Encoding\", \"gzip\");\n                os = new GZIPOutputStream(resp.getOutputStream(), bufferSize);\n            } else os = resp.getOutputStream();\n            transferStreams(url.openStream(), os);\n        }\n", "label": 0, "substitutes": {"unpackZIP": ["unpackSWZip", "unpackSWIP", "unpackSWIT", "unpackZipAP", "unpackSWAP", "unPackZipIT", "unPackZipIP", "unpackGIP", "unPackZipZip", "unpackZipZip", "unpackZIT", "unpackZipIP", "unPackZAP", "unPackZZip", "unpackGAP", "unpackGZip", "unpackZAP", "unpackZZip", "unpackZipIT", "unPackZIT", "unpackGIT", "unPackZipAP", "unPackZIP"], "url": ["build", "sl", "address", "string", "file", "Url", "log", "ret", "str", "nl", "b", "char", "browser", "loader", "in", "r", "n", "ll", "ssl", "link", "location", "html", "uri", "config", "URL", "job", "page", "out", "ur", "conn", "user", "download", "un", "name", "client", "http", "image", "key", "mount", "l", "request", "xml"], "dirName": ["directoryName", "fileDir", " dirname", "directoryKey", "directoryNames", "Dirname", "dirNames", " dirDir", "filename", "fileNames", "DirKey", "dirDir", "dirname", "directoryname", " dirKey", "DirDir", " dirNames", "dirKey", "DirNames", "fileName", "DirName"], "connection": ["created", "system", "description", "communication", "resource", "channel", "cone", "position", "ion", "opening", "still", "open", "Connection", "network", "c", "entry", "relation", "condition", "session", "instance", "computer", "close", "link", "uri", "server", "connect", "message", "conn", "database", "associated", "client", "generation", "document", "nc", "application", "pointer", "socket", "response", "connected", "directory", "character", "established", "usage", "now", "con", "creator", "command"], "destDir": ["stFile", "tempPath", " DestDir", " destDirectory", "tempDir", "destPath", " DestFile", "targetCh", "DestRel", " destRel", " destFolder", "targetRel", "destDirectory", "destCh", "DestFolder", "DestFile", "destFolder", "stDir", "targetdir", " destFile", "Destdir", "destRel", " DestCh", " destPath", "tempFolder", "targetDir", "destdir", "DestPath", "tempDirectory", " destdir", "targetDirectory", "stDirectory", "destFile", " destCh", "targetPath", "targetFolder", "DestDirectory", "stFolder", "DestDir", " DestFolder", "targetFile"]}}
{"id1": "1133123", "id2": "9824814", "code1": "            @Override\n            protected Reader openConnection(URL url) throws IOException {\n                try {\n                    if (limit != null) {\n                        limit.acquirePermit();\n                    }\n                    return super.openConnection(url);\n                } catch (InterruptedException e) {\n                    throw new IOException(e);\n                }\n            }\n", "code2": "    public void run() {\n        if (status == COMPLETE) {\n            return;\n        }\n        waitRandom();\n        RandomAccessFile file = null;\n        InputStream inputStream = null;\n        boolean success = false;\n        URL url = null;\n        try {\n            BeatportAccessor beatportAccessor = new BeatportAccessor();\n            if (sessionCookies == null) {\n                sessionCookies = beatportAccessor.getSessionCookies(user, password);\n            }\n            url = new URL(new BeatportAccessor().getTrackDownloadUrl(downloadId, sessionCookies));\n            log.info(\"Open (DownloadWorker.run): \" + url);\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n            connection.setRequestProperty(\"User-Agent\", BeatportAccessor.userAgent);\n            connection.setRequestProperty(\"Cookie\", sessionCookies);\n            connection.connect();\n            if (connection.getResponseCode() / 100 != 2) {\n                log.error(\"Unexpected response from server: \" + connection.getResponseCode());\n                error();\n                return;\n            }\n            if (connection.getContentType().indexOf(\"text\") >= 0) {\n                log.error(\"Tried to request: \" + url.toString());\n                log.error(\"Unexpected file content type from server: \" + connection.getContentType());\n                log.error(\"Server replied:\\n\" + getContentAsString(connection));\n                error();\n                return;\n            }\n            int contentLength = connection.getContentLength();\n            if (contentLength < 1) {\n                log.error(\"Invalid content length: \" + connection.getContentLength());\n                error();\n                return;\n            }\n            if (size == -1) {\n                size = contentLength;\n                stateChanged();\n            } else if (size != contentLength) {\n                changeTotal(0, contentLength - size);\n            }\n            if (new File(tmpFileName(fileName)).exists()) {\n                if (!new File(tmpFileName(fileName)).delete()) {\n                    throw new Exception(\"Could not delete file: \" + tmpFileName(fileName));\n                }\n            }\n            file = new RandomAccessFile(tmpFileName(fileName), \"rw\");\n            file.seek(downloaded);\n            inputStream = connection.getInputStream();\n            if (started == 0) {\n                started = System.currentTimeMillis();\n                time = started;\n            }\n            statusChangedObserver.statusChanged(status);\n            byte buffer[] = new byte[MAX_BUFFER_SIZE];\n            while (status == DOWNLOADING) {\n                if (size - downloaded < MAX_BUFFER_SIZE) {\n                    buffer = new byte[(int) (size - downloaded)];\n                }\n                int read = inputStream.read(buffer);\n                if (read == -1) break;\n                file.write(buffer, 0, read);\n                downloaded += read;\n                changeTotal(read, 0);\n                stateChanged();\n            }\n            if (status == DOWNLOADING) {\n                stopped = System.currentTimeMillis();\n                status = COMPLETE;\n            }\n            statusChangedObserver.statusChanged(status);\n            stateChanged();\n            success = true;\n        } catch (Exception e) {\n            e.printStackTrace();\n            error();\n        } finally {\n            try {\n                file.close();\n            } catch (Exception e) {\n            }\n            if (success) {\n                try {\n                    if (!new File(tmpFileName(fileName)).renameTo(new File(fileName))) {\n                        throw new Exception(\"Rename Failed\");\n                    }\n                } catch (Exception e) {\n                    log.error(\"Error moving temp file \" + tmpFileName(fileName) + \" file: \" + fileName, e);\n                }\n            } else {\n                try {\n                    new File(tmpFileName(fileName)).delete();\n                } catch (Exception e) {\n                    log.error(\"Error deleting erroneous temp file: \" + tmpFileName(fileName), e);\n                }\n            }\n            try {\n                inputStream.close();\n            } catch (Exception e) {\n                log.error(\"Error closing input stream of: \" + url + \" / \" + fileName, e);\n            }\n        }\n    }\n", "label": 0, "substitutes": {"openConnection": ["openLink", "openChannel", "openReader", "openClient", " openChannel", " openReader", "OpenReader", "createSession", "openSession", "OpenChannel", "readReader", " openSession", "newChannel", " openClient", "createClient", "OpenLink", "newSession", "readConnection", "readChannel", "createChannel", "readLink", "newClient", "createConnection", "OpenConnection", " openLink", "newConnection"], "url": ["build", "sl", "path", "address", "string", "file", "Url", "log", "ld", "ret", "str", "nl", "mail", "b", "dl", "ll", "pl", "host", "ssl", "link", "location", "uri", "base", "URL", "web", "loc", "page", "q", "ur", "name", "util", "http", "load", "rl", "rect", "l", "xml", "ref", "ul"]}}
{"id1": "14865947", "id2": "2936678", "code1": "    public Object execute(ExecutionEvent event) throws ExecutionException {\n        try {\n            Shell shell = PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell();\n            QuizTreeView view = (QuizTreeView) PlatformUI.getWorkbench().getActiveWorkbenchWindow().getActivePage().showView(\"org.rcpquizengine.views.quizzes\");\n            Folder rootFolder = view.getRootFolder();\n            if (rootFolder.isEncrypted()) {\n                PasswordDialog dialog = new PasswordDialog(shell);\n                if (dialog.open() == Window.OK) {\n                    String password = dialog.getPassword();\n                    if (!password.equals(\"\")) {\n                        String md5 = \"\";\n                        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n                        md.update(password.getBytes());\n                        md5 = new BigInteger(md.digest()).toString();\n                        if (rootFolder.getMd5Digest().equals(md5)) {\n                            rootFolder.setMd5Digest(\"\");\n                            rootFolder.setEncrypted(false);\n                            MessageDialog.openInformation(shell, \"Quiz bank unlocked\", \"The current quiz bank has been unlocked\");\n                        } else {\n                            MessageDialog.openError(shell, \"Error unlocking quiz bank\", \"Incorrect password\");\n                        }\n                        password = \"\";\n                        md5 = \"\";\n                    }\n                }\n            } else {\n                MessageDialog.openError(shell, \"Error unlocking quiz bank\", \"Quiz bank already unlocked\");\n            }\n        } catch (PartInitException e) {\n            e.printStackTrace();\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n", "code2": "    public static String getUniqueKey() {\n        String digest = \"\";\n        try {\n            final MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            final String timeVal = \"\" + (System.currentTimeMillis() + 1);\n            String localHost = \"\";\n            try {\n                localHost = InetAddress.getLocalHost().toString();\n            } catch (UnknownHostException e) {\n                println(\"Warn: getUniqueKey(), Error trying to get localhost\" + e.getMessage());\n            }\n            final String randVal = \"\" + new Random().nextInt();\n            final String val = timeVal + localHost + randVal;\n            md.reset();\n            md.update(val.getBytes());\n            digest = toHexString(md.digest());\n        } catch (NoSuchAlgorithmException e) {\n            println(\"Warn: getUniqueKey() \" + e);\n        }\n        return digest;\n    }\n", "label": 1, "substitutes": {"execute": ["Exec", " operate", "invoke", " Execution", "process", " interpret", " evaluate", " executing", "run", " Run", " proceed", " executed", " dispatch", " executions", " execution", " manage", " executable", " resume", " Exec", " command", " executes", "Command", " query", " parse", "exec", " eval", "Action", "command"], "event": ["ev", "ae", "exc", "xe", "ce", "E", "t", " environment", "context", "te", "ed", "ee", "ex", " invocation", " EVENT", " command", " frame", "pe", "Event", "command", " events", "EE", "frame", "de", "Ev", " Event", "w", "se"], "shell": ["windows", "system", "search", "js", "cell", "lock", "h", "nl", "help", "microsoft", "b", "tool", "history", "grid", "stack", "kernel", "ssh", "detail", "ja", "style", "widget", "range", "query", "scope", "session", "sol", "scroll", "theme", "cli", "html", "console", "base", "round", "buffer", "screen", "sb", "message", "root", "sql", "pty", "tree", "template", "tools", "hl", "tab", "line", "sys", "hell", "l", "window", "handle", "fr", "layout", "pool", "Shell", "body", "quit", "sh", "bot"], "view": ["cv", "v", "show", "vp", "VIEW", "browser", "row", "View", "review", "eye", "widget", "query", "block", "html", "vm", "web", "screen", "buffer", "iew", "see", "tree", "document", "template", "views", "report", "image", "list", "version", "window", "layout", "ui", "tv", "ou", "display", "w", "ve"], "rootFolder": [" rootDir", "rootLibrary", "coverLibrary", "RootArea", "bottomLibrary", "RootCategory", "coverDirectory", "rootEntry", "parentArea", " rootEntry", "RootFolder", " rootDirectory", "rootDisk", "parentDirectory", "parentCategory", " rootArea", " rootLibrary", "RootEntry", "parentDir", "rootDir", "RootDir", " rootDisk", "bottomFolder", "bottomDirectory", "rootDirectory", "rootArea", "bottomDisk", "parentFolder", " rootCategory", "coverDisk", "RootDirectory", "rootCategory", "parentEntry", "coverFolder"], "dialog": ["choog", "selectog", "clog", "clig", "Dializ", "choOG", "dialoc", "callogs", "choDialog", " Dialoc", "logDialog", " Dializ", "dlj", "selectDialog", "Dialog", "dialogs", "DialDialog", "dialig", "closer", "callog", " Dialj", "choogs", "callDialog", "selectig", "logoser", "dliz", "logog", "DialOG", "clDialog", "dialj", "dialOG", "selectoser", "Dialogs", "callOG", "logig", "Dialj", "dloc", "dialoser", "dlog", "Dialoc", "dialDialog", "dializ", " Dialog"], "password": ["path", "secret", "address", "PASS", "description", "picture", "string", "wd", "definition", "p", "hash", "device", "phrase", "shadow", "username", "attribute", "word", "query", "pattern", "clear", "language", "expression", "encrypted", "padding", "prefix", "paste", "message", "buffer", "table", "raw", "database", "pass", "user", "sword", "comment", "data", "source", "reset", "key", "hello", "response", "request", "login", "directory", "words", "Password", "entry", "command"], "md5": ["mt4", "mt2", "ma7", "MD2", "mb512", "MD512", " md512", "mt3", "mm7", "mb4", "md4", "ma5", "md6", "m5", "m3", "m4", "md64", "mm6", " md64", "MD5", "md7", " md2", "MD7", "mm5", "ma64", " md6", "MD3", "md2", "MD4", "mt5", "md512", "MD64", "mm2", "ma2", " md7", " md4", "mb2", "mb5", "md3", "MD6", "m2"], "md": ["mac", "d", "mc", "dr", "pdf", "pt", "pd", "mt", "ld", "magic", "mod", "hash", "sm", "nt", "msg", "de", "nd", "red", "det", "m", " dd", "pm", "ct", "ms", "sd", "dd", "rm", "hd", "dig", "mm", "ind", "cd", "mk", "od", "bd", "mg", "mn", "dm", "metadata", "dh", "df", "mb", "cmd", "MD", " Md"]}}
{"id1": "7468819", "id2": "21232043", "code1": "        public void run() {\n            try {\n                HttpURLConnection con = (HttpURLConnection) url.openConnection();\n                con.setRequestMethod(\"GET\");\n                con.setDoInput(true);\n                byte[] encodedPassword = (username + \":\" + password).getBytes();\n                BASE64Encoder encoder = new BASE64Encoder();\n                con.setRequestProperty(\"Authorization\", \"Basic \" + encoder.encode(encodedPassword));\n                InputStream is = con.getInputStream();\n                BufferedReader rd = new BufferedReader(new InputStreamReader(is));\n                String line;\n                StringBuffer response = new StringBuffer();\n                while ((line = rd.readLine()) != null) {\n                    response.append(line);\n                    response.append('\\n');\n                    lastIteraction = System.currentTimeMillis();\n                }\n                rd.close();\n                is.close();\n                con.disconnect();\n                result = response.toString();\n                finish = true;\n            } catch (Throwable e) {\n                this.e = e;\n            }\n        }\n", "code2": "    @Override\n    public File call() throws IOException {\n        HttpURLConnection conn = null;\n        ReadableByteChannel fileDownloading = null;\n        FileChannel fileWriting = null;\n        try {\n            conn = (HttpURLConnection) url.openConnection();\n            if (size == -1) {\n                size = conn.getContentLength();\n            }\n            fileDownloading = Channels.newChannel(conn.getInputStream());\n            fileWriting = new FileOutputStream(file).getChannel();\n            long left = size;\n            long chunkSize = BLOCK_SIZE;\n            for (long downloaded = 0; downloaded < size; left = size - downloaded) {\n                if (left < BLOCK_SIZE) {\n                    chunkSize = left;\n                }\n                fileWriting.transferFrom(fileDownloading, downloaded, chunkSize);\n                downloaded += chunkSize;\n                setProgress(downloaded);\n            }\n        } finally {\n            if (file != null) {\n                file.deleteOnExit();\n            }\n            if (conn != null) {\n                conn.disconnect();\n            }\n            if (fileDownloading != null) {\n                try {\n                    fileDownloading.close();\n                } catch (IOException ioe) {\n                    Helper.logger.log(Level.SEVERE, \"\u041d\u0435 \u0443\u0434\u0430\u043b\u043e\u0441\u044c \u0437\u0430\u043a\u0440\u044b\u0442\u044c \u043f\u043e\u0442\u043e\u043a \u0441\u043a\u0430\u0447\u0438\u0432\u0430\u043d\u0438\u044f\", ioe);\n                }\n            }\n            if (fileWriting != null) {\n                try {\n                    fileWriting.close();\n                } catch (IOException ioe) {\n                    Helper.logger.log(Level.SEVERE, \"\u041d\u0435 \u0443\u0434\u0430\u043b\u043e\u0441\u044c \u0437\u0430\u043a\u0440\u044b\u0442\u044c \u043f\u043e\u0442\u043e\u043a \u0437\u0430\u043f\u0438\u0441\u0438 \u0432 \u0444\u0430\u0439\u043b\", ioe);\n                }\n            }\n        }\n        return file;\n    }\n", "label": 0, "substitutes": {"run": ["submit", "invoke", "process", "test", "start", " Run", "begin", "work", "go", "call", "thread", "block", "profile", "wait", "runner", "poll", "loop", "Run", "func", "exec", "hello", "execute", "running", "task", "unit", "runs", "launch"], "con": ["ln", "Con", "win", "cur", "CON", "cos", "canon", "fc", "dial", "en", "sin", "clean", "construct", "cone", "conv", "Conn", "ctrl", "const", "cons", "open", "conf", "url", "re", "cp", "mos", "c", "comm", "act", "connection", "res", "cc", "fin", "bur", "acon", "cf", "syn", "ct", "com", "cl", "connect", "conn", "cn", "ch", "create", "un", "client", "xc", "cm", "nc", "ran", "cont", "don", "pc", "pen", "rc", "cmd", "cal", "can", "gc", "ain", "co"], "encodedPassword": ["decodingpassword", "encodingpassword", "encressedResponse", "encuredpassword", "encachedResponse", "encuredResponse", "encressedUser", "decachedUser", "encodedUser", "encodingPassword", "decodedResponse", "decodingPassword", "enccodedPass", "decodingData", "encuredPassword", "enccodedData", "encodedResponse", "encachedPassword", "decodingPass", "encodedpassword", "decachedPassword", "enccodedPassword", "decodedData", "encodingData", "encodedData", "encryptedpassword", "decodedUser", "decachedpassword", "encachedpassword", "decachedResponse", "encachedUser", "encryptedPassword", "encodedPass", "enccodedpassword", "decodedPass", "decodedpassword", "encressedPassword", "encodingPass", "encryptedData", "decodedPassword", "encryptedPass", "encuredUser", "encressedpassword"], "encoder": [" encoser", "decoder", "Encoser", "decoser", "encODE", "ecoding", "ecoder", " encater", "ecODE", "Encoding", "enoding", "encoding", " encoding", "decoded", "enoder", "decODE", "enODE", "encater", "decater", "decoding", "encoser", "encoded", "Encoder", "enoded", "Encater", "ecoded"], "is": ["iss", "ic", "isl", "asin", "isa", "was", "ists", "sis", "in", "ist", "ais", "ri", "iris", "si", "rs", "i", "ios", "are", "ib", "sit", "fs", "es", "as", "IS", "ms", "s", "bs", "lis", "its", "isin", "ris", "ys", "sys", "im", "isf", "ai", "Is", "ins", "nis", "ir", "it", "il", "isi", "isc", "os", "iso", "se"], "rd": ["d", "sr", "dr", "rid", "ld", "rx", "rb", "erd", "rob", "rod", "nd", "ri", "ren", "mr", "r", "rs", "rw", "reader", "rh", "rg", "red", "xd", "cr", "dd", "hr", "din", "rt", "RD", "ind", "rr", "cd", "nder", "rand", "bd", "rl", "rc", "rect", "ra", "ru", "fr", "rar", "rn"], "line": ["ln", "sample", "cell", "string", "log", "file", "sequence", "nl", "inline", "point", "print", "row", " LINE", "stroke", "phrase", "record", "detail", "se", "re", "word", "block", "ice", "label", "code", "link", "base", "page", "lin", "message", "column", "lo", "frame", "name", "liner", "comment", "lane", "ine", "le", "eline", "chain", "header", "Line", "l", "LINE", "entry", "command"], "response": ["description", "results", "sequence", "sheet", "print", "onse", "position", "service", "detail", "relative", "Response", "output", "model", "network", "view", "library", "relation", "connection", "res", "summary", "console", "continue", "csv", "server", "trace", "buffer", "vector", "message", "page", "format", "table", "database", "tree", "frame", "template", "document", "respons", "application", "answer", "data", "reset", "value", "memory", "report", "image", "array", "list", "request", "xml", "json", "pos", "next", "reply", "resp", "this", "display", "collection", "command"], "lastIteraction": [" lastRelations", " lastRelation", " lastIteration", "lastInterations", " lastiteration", "lastInterate", " lastiterate", " lastRelated", " lastInterations", " lastIterated", " lastInterate", "lastInterated", " lastiterations", " lastiterated", "lastIterations", " lastInteration", " lastIterate", "lastIteration", " lastIterations", "lastIterate", "lastInteration", "lastIterated", " lastInterated", " lastRelate"], "result": ["err", "results", "string", "ret", "str", "success", "current", "url", "r", "content", "query", "res", "status", "reason", "buffer", "message", "out", "page", "Result", "data", "answer", "value", "report", "request", "cache", "json"], "e": ["err", "d", "ev", "ae", "exc", "v", "h", "en", "p", "xe", "E", "oe", "b", "t", "be", "eg", "te", "eeee", "ee", "re", "r", "c", "ex", "n", "i", "a", "m", "ze", "f", "o", "note", "pe", "s", "ep", "ue", "ie", "ei", "u", "error", "x", "eu", "me", "le", "ate", "ine", "or", "l", "g", "ent", "ec", "ne", "es", "er", "se"]}}
{"id1": "16388708", "id2": "4629990", "code1": "    public static boolean decodeFileToFile(String infile, String outfile) {\n        boolean success = false;\n        java.io.InputStream in = null;\n        java.io.OutputStream out = null;\n        try {\n            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);\n            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n            byte[] buffer = new byte[65536];\n            int read = -1;\n            while ((read = in.read(buffer)) >= 0) {\n                out.write(buffer, 0, read);\n            }\n            success = true;\n        } catch (java.io.IOException exc) {\n            exc.printStackTrace();\n        } finally {\n            try {\n                in.close();\n            } catch (Exception exc) {\n            }\n            try {\n                out.close();\n            } catch (Exception exc) {\n            }\n        }\n        return success;\n    }\n", "code2": "    private String logonToServer(FTPClient ftpClient, String ftpAddress, int noRetries) {\n        String remoteHomeDir = null;\n        noRetriesSoFar = 0;\n        while (true) {\n            try {\n                ftpClient.connect(ftpAddress, ftpPort);\n                int reply = ftpClient.getReplyCode();\n                if (!FTPReply.isPositiveCompletion(reply)) {\n                    ftpClient.disconnect();\n                    throw new IOException();\n                }\n                if (!ftpClient.login(user, password)) {\n                    throw new IOException();\n                }\n                remoteHomeDir = ftpClient.printWorkingDirectory();\n                msgEntry.setAppContext(\"logonToServer()\");\n                msgEntry.setMessageText(\"Logged into FTP server \" + ftpAddress + \":\" + ftpPort + \" as user \" + user);\n                logger.logProcess(msgEntry);\n                break;\n            } catch (IOException e) {\n                logoutAndDisconnect(ftpClient);\n                if (noRetriesSoFar++ < noRetries) {\n                    waitBetweenRetry();\n                    notifyAndStartWaitingFlag = false;\n                } else {\n                    notifyAndStartWaitingFlag = true;\n                    errEntry.setThrowable(e);\n                    errEntry.setAppContext(\"logonToServer()\");\n                    errEntry.setAppMessage(\"Unable to login after \" + (noRetriesSoFar - 1) + \" retries. Max Retries.\\n\" + \"Address:\" + ftpAddress + \"\\n\" + \"User:\" + user);\n                    errEntry.setSubjectSendEmail(\"Unable to login to \" + ftpAddress + \" after \" + (noRetriesSoFar - 1) + \" retries.\");\n                    logger.logError(errEntry);\n                    break;\n                }\n            }\n        }\n        return remoteHomeDir;\n    }\n", "label": 0, "substitutes": {"decodeFileToFile": ["decodeString2Files", "decodeFileToFiles", "decodeFileFilefile", "decodeFileFileString", "decodeString2String", "decodeString2file", "decodeFile2Files", "decodeStringToFile", "decodeFileTofile", "decodeFileFileFile", "decodeFileAsString", "decodeFile2File", "decodeStringTofile", "decodeFile2String", "decodeFileAsFiles", "decodeFileToString", "decodeFileFileFiles", "decodeString2File", "decodeFile2file", "decodeFileAsFile", "decodeFileAsfile", "decodeStringToString", "decodeStringToFiles"], "infile": ["Inbase", "fromfilename", "outfolder", "Infile", "inputFile", "outbase", "InFile", "isinname", "fromFile", "inputname", "inputfile", "inFile", "inname", "outfilename", "infolder", "isinfile", "infilename", "isinfolder", "frombase", "Infilename", "inputfolder", "isinFile", "fromfile", "outFile", "outname", "inbase"], "outfile": ["outFILE", "inFILE", "outdir", "todir", " outFILE", "otname", "tofilename", " outname", "Outdir", "otFILE", "otfile", "inFile", "inname", "outfilename", "otFile", "tofile", "indir", "Outfilename", "outFile", "outname", "Outfile", "OutFile", " outFile", "toFile", "infilename"], "in": ["pin", "en", "by", "id", "is", "inf", "t", "per", "up", "al", "cin", "from", "re", "ini", "IN", "inc", "i", "inner", "inside", "ar", "on", " din", "amin", "iter", "form", "din", "conn", "get", "oin", "init", "input", "isin", "ind", "gin", "source", "In", "or", "im", "ins", "rin", "it", "info", "bin", "nin", "ain", "con", "inn"], "out": ["os", "outs", "at", "file", "en", "OU", "io", "print", "b", "t", "ot", "nt", "ion", "aos", "output", "flush", "ex", "n", "to", "null", "write", "inner", "res", "auto", "gt", "on", "outer", "o", "opt", "net", "end", "oss", "cn", "writer", "fn", "sys", "OUT", "Out", "it", "g", "ou", "ne", "can", "co", "con"], "buffer": ["black", "sample", "batch", "number", "binary", "sequence", "variable", "append", "bar", "print", "history", "row", "stack", "phrase", "total", "attribute", "button", "view", "library", "block", "mem", "bone", "base", "note", "initial", "padding", "table", "message", "buff", "paste", "column", "frame", "template", "document", "comment", "memory", "password", "header", "pad", "shape", "window", "cache", "character", "info", "available", "buf", "Buffer", "temp", "display", "command"], "read": ["text", "allow", "send", "first", "print", "before", "length", "count", "start", "select", "skip", "run", "open", "reader", "len", "index", "range", "n", "check", "query", "write", "i", "ok", "close", "wait", "through", "iter", "set", "connect", "end", "each", "get", "READ", "reads", "raw", "req", "push", "input", "ind", "seek", "shift", "readable", "load", "reading", "give", "add", "Read", "ready", "need", "hold", " Read", "stream", "find", "size"], "success": ["submit", "first", "please", " failure", "ratulations", "crit", " succeeds", "unity", "exist", "growth", "complete", "town", "Success", "primary", "good", "successfully", "snap", "safe", "scope", "condition", "cess", "ok", "status", "release", "summary", "valid", "city", "accept", "sufficient", "positive", " successful", "result", "fail", "ccess", "danger", "commit", "second", "support", "setup", "successful", " successes", " okay", "error", "ceed", "photo", " succ", "same", "democracy", "done", "value", "response", " succeed", "continue", "surv"]}}
{"id1": "7425022", "id2": "8625346", "code1": "    private String transferWSDL(String wsdlURL, String userPassword) throws WiseConnectionException {\n        String filePath = null;\n        try {\n            URL endpoint = new URL(wsdlURL);\n            HttpURLConnection conn = (HttpURLConnection) endpoint.openConnection();\n            conn.setDoOutput(false);\n            conn.setDoInput(true);\n            conn.setUseCaches(false);\n            conn.setRequestMethod(\"GET\");\n            conn.setRequestProperty(\"Accept\", \"text/xml,application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5\");\n            conn.setRequestProperty(\"Connection\", \"close\");\n            if (userPassword != null) {\n                conn.setRequestProperty(\"Authorization\", \"Basic \" + (new BASE64Encoder()).encode(userPassword.getBytes()));\n            }\n            InputStream is = null;\n            if (conn.getResponseCode() == 200) {\n                is = conn.getInputStream();\n            } else {\n                is = conn.getErrorStream();\n                InputStreamReader isr = new InputStreamReader(is);\n                StringWriter sw = new StringWriter();\n                char[] buf = new char[200];\n                int read = 0;\n                while (read != -1) {\n                    read = isr.read(buf);\n                    sw.write(buf);\n                }\n                throw new WiseConnectionException(\"Remote server's response is an error: \" + sw.toString());\n            }\n            File outputDir = new File(wiseProperties.getProperty(\"wise.tmpDir\"));\n            if (!outputDir.exists()) {\n                outputDir.mkdir();\n                wiseProperties.setProperty(\"wise.forceImportObject\", \"true\");\n            }\n            File file = new File(wiseProperties.getProperty(\"wise.tmpDir\"), new StringBuffer(\"Wise\").append(IDGenerator.nextVal()).append(\".xml\").toString());\n            OutputStream fos = new BufferedOutputStream(new FileOutputStream(file));\n            IOUtils.copyStream(fos, is);\n            fos.close();\n            is.close();\n            filePath = file.getPath();\n        } catch (WiseConnectionException wce) {\n            throw wce;\n        } catch (Exception e) {\n            throw new WiseConnectionException(\"Wsdl download failed!\", e);\n        }\n        return filePath;\n    }\n", "code2": "    public static boolean encodeFileToFile(String infile, String outfile) {\n        boolean success = false;\n        java.io.InputStream in = null;\n        java.io.OutputStream out = null;\n        try {\n            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);\n            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n            byte[] buffer = new byte[65536];\n            int read = -1;\n            while ((read = in.read(buffer)) >= 0) {\n                out.write(buffer, 0, read);\n            }\n            success = true;\n        } catch (java.io.IOException exc) {\n            exc.printStackTrace();\n        } finally {\n            try {\n                in.close();\n            } catch (Exception exc) {\n            }\n            try {\n                out.close();\n            } catch (Exception exc) {\n            }\n        }\n        return success;\n    }\n", "label": 1, "substitutes": {"transferWSDL": ["transferSWSDl", "transferWSMl", "transferSWsdML", "transferWSDDL", "transferWsdML", "transferWSMDL", "transferSWSDML", "transferWSSDL", "transferWSSML", "transferSWSDL", "transferSWsdl", "transferSWSDDL", "transferWSMML", "transferWsdL", "transferSWsdDL", "transferWSML", "transferWsdDL", "transferWSSL", "transferWsdl", "transferWSDl", "transferWSSl", "transferSWsdL", "transferWSDML"], "wsdlURL": ["awsdlURL", "WsdlURL", "wslUR", "wsDLUrl", "WsdlURI", "WsqlUR", "wsdURI", "WsqlUrl", "awslUrl", "awsdlUrl", "wslurl", "awslURL", "wsqlUrl", "wsdlurl", "wsqlURL", "wsqlurl", "wsdlUrl", "awslUR", "wsdURL", "wsDLUR", "wsDLURL", "wsdUR", "wsdlUR", "awsdlUR", "wsDLurl", "wslURL", "wslURI", "wsqlUR", "wsqlURI", "wslUrl", "WsdlUR", "WsqlURL", "awsdlurl", "awslurl", "WsqlURI", "WsdlUrl", "wsdUrl", "wsdlURI"], "userPassword": ["useSecret", "clientPassword", "usernamePass", "UserPassword", " userToken", "usernameSalt", "UserSecret", "usernameToken", "userSalt", "usernamePassword", "userToken", "usernameInformation", "clientInformation", "clientPass", "UserInformation", "userInformation", " userSalt", "userPass", "usePass", " userSecret", "UserToken", "userSecret", "userpassword", " userpassword", "clientToken", "UserPass", "usepassword", "UserSalt", "usePassword", " userPass", "Userpassword"], "filePath": ["fileName", "resourcePath", "FilePath", " fileRef", "fileRef", "resourceName", "Filepath", "resourcepath", "FileRef", "resourceRef", "FileName", "filepath", " fileName", " filepath"], "endpoint": ["adp", "Endp", "endpoints", "EndPoint", "endPO", " endPO", "endger", "Endpoints", "ndpoints", "endp", "ENDpoint", "ENDger", "adPoint", "EndPO", "endPoint", "adpoint", "Endpoint", "ENDPO", "ndpoint", "ndp", "adpoints", "ndPoint", " endPoint", "Endger", " endger", "ENDPoint"], "conn": ["os", "cur", "subject", "canon", "dial", "en", "ell", "txt", "gate", "ce", "ws", "conv", "Conn", "obj", "nt", "msg", "pg", "auth", "open", "conf", "url", "comm", "cp", "ctx", "act", "call", "pas", "proc", "connection", "res", "fin", "ssl", "on", "desc", "ct", "ens", "ann", "connect", "loc", "get", "cn", "init", "ch", "req", "attach", "nw", "cert", "cfg", "client", "ait", "http", "nc", "att", "cont", "add", "addr", "gn", "exec", "enc", "cb", "pkg", "cmd", "resp", "org", "jp", "con"], "is": ["where", "does", "serv", "ess", "iss", "I", "isl", "abs", "ism", "isa", "ists", "sis", " are", "in", "xs", "ous", "still", "ist", "ais", "ri", "iris", "si", "gs", "rs", "ress", "ice", "i", "ison", "ios", "has", "are", " Is", "obs", "ims", "bis", "fs", "es", "IS", "ches", "ms", "s", "bs", "est", "lis", "icks", "ois", "its", "oss", " seems", "\u00eds", "isin", "ris", "ish", "sys", "im", " IS", "isf", "Is", "ins", "nis", "ip", "us", "info", "isi", "isc", "inst", "ISS", "os", "iso", "ys"], "isr": [" iser", "owsp", "isrc", "esp", " isrt", "eser", "esr", "owsr", "itsw", "issr", " isw", "esrt", "issw", "isR", " isR", "itsr", "issrc", " isrc", "itsR", "itsrc", "owsrt", "isp", "iser", "isw", "owser", " isp", "issR", "isrt"], "sw": ["tw", "sr", "wh", "nex", "wn", "ws", "sm", "aw", "w", "we", "rs", "rw", "sam", "wx", "she", "sem", "sf", "sk", "sc", "sp", "Sw", "sb", "iw", "wr", "ch", "writer", "nw", "ow", "sword", "war", "SW", "sv", "ew", "amp", "wo", "ser", "fr", "igm", "hw", "sn", "wa", "sh", "rew"], "buf": ["cv", "err", "cur", "bytes", "batch", "ctr", "bag", "bound", "txt", "bar", "cat", "orig", "b", "char", "fac", "conv", "rb", "arr", "msg", "row", "cast", "nm", "cp", "bl", "good", "mu", "box", "Buffer", "mem", "vec", "img", "bh", "col", "cf", "br", "seq", "buffer", "buff", "fam", "cap", "db", "tab", "Buff", "cb", "pkg", "uf", "next", "wb", "temp"], "read": ["text", "send", "cur", "tail", "str", "print", "before", "length", "old", "count", "char", "start", "in", "current", "skip", "run", "open", "reader", "len", "index", "word", "n", "check", "write", "mem", "tell", "ok", "close", "wait", "iter", "set", "buffer", "end", "READ", "get", "each", "reads", "q", "input", "seek", "ind", "readable", "load", "give", "add", "Read", "ready", "need", "handle", "have", "hold", "warn", "stream", "find", "gets", "w", "size"], "outputDir": [" outputdir", "createDest", "createLen", "outputSp", " OutputDir", "writeFile", "outputDest", "inputFile", "outputDirectory", "documentDir", "outputFile", "inputdir", "writeDef", " Outputdir", " OutputSp", "coinFile", "outputLen", " OutputDirectory", "writeDir", " outputLen", "coinDest", " outputDirectory", "inputDir", " outputSp", " outputDest", "createDir", "coinLen", "coinDir", "inputDef", "outputdir", "createFile", " outputFile", "writedir", "documentDirectory", "documentdir", " outputDef", "documentSp", "outputDef"], "file": ["local", "path", "p", "resource", "print", "channel", "FILE", "ile", "class", "File", "output", "work", "filename", "to", "tf", "library", "node", "link", "f", "base", "web", "table", "page", "message", "format", "out", "fp", "tree", "name", "template", "spec", "object", "data", "le", "image", "el", "handle", "xml", "task", "pool", "type", "con", "w"], "fos": [" fops", "inew", "Fos", "onew", "bos", "fnew", " fwe", " foes", "fwe", "ijson", "Fops", "bOs", "foes", "owe", "fOs", "Foes", "fops", " fOs", "ojson", "iwe", "boes", " fnew", " fjson", "fjson", "FOs", "bops"]}}
{"id1": "397240", "id2": "3330944", "code1": "    private static void readAndRewrite(File inFile, File outFile) throws IOException {\n        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n        Dataset ds = DcmObjectFactory.getInstance().newDataset();\n        dcmParser.setDcmHandler(ds.getDcmHandler());\n        dcmParser.parseDcmFile(null, Tags.PixelData);\n        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        System.out.println(\"reading \" + inFile + \"...\");\n        pdReader.readPixelData(false);\n        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n        ds.writeDataset(out, dcmEncParam);\n        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n        System.out.println(\"writing \" + outFile + \"...\");\n        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        pdWriter.writePixelData();\n        out.flush();\n        out.close();\n        System.out.println(\"done!\");\n    }\n", "code2": "    public void extractImage(String input, String output, DjatokaDecodeParam params, IWriter w) throws DjatokaException {\n        File in = null;\n        String dest = output;\n        if (input.equals(STDIN)) {\n            try {\n                in = File.createTempFile(\"tmp\", \".jp2\");\n                input = in.getAbsolutePath();\n                in.deleteOnExit();\n                IOUtils.copyFile(new File(STDIN), in);\n            } catch (IOException e) {\n                logger.error(\"Unable to process image from \" + STDIN + \": \" + e.getMessage());\n                throw new DjatokaException(e);\n            }\n        }\n        BufferedImage bi = extractImpl.process(input, params);\n        if (bi != null) {\n            if (params.getScalingFactor() != 1.0 || params.getScalingDimensions() != null) bi = applyScaling(bi, params);\n            if (params.getTransform() != null) bi = params.getTransform().run(bi);\n            try {\n                BufferedOutputStream os = new BufferedOutputStream(new FileOutputStream(new File(dest)));\n                w.write(bi, os);\n                os.close();\n            } catch (FileNotFoundException e) {\n                logger.error(\"Requested file was not found: \" + dest);\n                throw new DjatokaException(e);\n            } catch (IOException e) {\n                logger.error(\"Error attempting to close: \" + dest);\n                throw new DjatokaException(e);\n            }\n        }\n        if (in != null) in.delete();\n    }\n", "label": 1, "substitutes": {"readAndRewrite": ["readAndrewWrite", "readAndResrite", "readAndResend", "readAndReprites", "readAndRewWrite", "readAndrewrites", "readAndRewend", "readAndResrites", "readAndrewend", "readAndReprite", "readAndResWrite", "readAndRepWrite", "readAndRewrites", "readAndRepend", "readAndrewrite"], "inFile": ["docFile", "InFilename", "inFILE", "docFILE", "initFilename", "docFilename", "Infile", "inputFile", "iTime", "inputFilename", "iFilename", "INPlace", " inFilename", "outfile", " infile", "inputFace", "InFile", "infile", "INFILE", "INFilename", "INFace", "inPlace", "inFace", "initFile", "initFace", "iFile", "initPlace", "INFile", "iFILE", "inputPlace", "inTime", "outFilename", "INTime", "inFilename", "docTime"], "outFile": ["outFILE", "checkFile", "inFILE", "checkFilename", " outFilename", "checkfile", " outfile", "nameFILE", " outFILE", "reportFILE", "outfile", "reportFile", "toFilename", "infile", "nameFile", "reportFilename", "tofile", "checkFILE", "namefile", "outFilename", "nameFilename", "inFilename", "toFILE", "reportfile", "toFile"], "iis": ["liisc", "eIS", " iIS", "eis", "iiss", "iisc", "ii", "liIs", "iIS", "Iiss", " iisc", "liris", "iiis", "Iis", "diIs", "aiis", "iris", "iiris", "diiss", "IIs", "iIs", " iiss", "diis", "aiIS", "iiisc", "dii", " ii", " iIs", "liis", "Ii", "iiIs", " iris", "aiIs", "eIs"], "dcmParser": ["dcfStatement", "dmodulePrivate", " dpmPar", " dpmLoader", "dmmAdapter", "dmoduleParser", " dpmReader", "dpmLoader", "dfmLoader", "dromAssistant", "dmmmAdapter", "dcmAssistant", "DpmAdapter", "dpmparser", "dcfReader", "dmmparser", "dcfParser", "DpmReader", "DcmAdapter", "dcomParser", "dmmmParser", "dmoduleReader", " dcmarser", " dcmLoader", "dcommReader", "dcrParser", "deromarser", "dcrBuilder", "dcmBuilder", "dmparser", "dpcParser", "dpmParser", "dpmarser", "dmmarser", "dfmParser", "dromListener", "dcomLoader", "dcomBuilder", "dcomReader", " dcmListener", "decmReader", "drumBuilder", "dpmAssistant", "dpcPrivate", "drumReader", "dmmmReader", "dpmReader", "dpmBuilder", "dromparser", "decmParser", "dpmPar", "DcmBuilder", "dmmmparser", "dcmLoader", " dpmParser", "decmarser", " dcmparser", "dcrReader", " dpmPrivate", "dpmListener", "deromReader", "drumParser", " dpmBuilder", "dromarser", "decmparser", "dcommParser", "dmParser", " dcmPar", "Dpmparser", "dmmParser", "dfmBuilder", "deromparser", "dpcAssistant", "dmmReader", "DpmParser", "dromParser", "dgrPar", "dgrStatement", " dcmAssistant", "dcfPar", "dcmarser", " dcmBuilder", "DcmReader", " dcmReader", " dpmStatement", "dmoduleAssistant", "dpcReader", "dcommAssistant", "dromReader", " dpmarser", "dcmparser", "dcrparser", "DcmPar", "dmarser", "dpmAdapter", " dpmAssistant", "dcmReader", "dfmReader", "dgrReader", "dcmPrivate", "DpmPar", "dmReader", " dpmparser", "DpmBuilder", "dcmStatement", "dcmListener", "dpmPrivate", " dcmPrivate", " dpmListener", "dcmPar", "dpmStatement", "drumPar", "dgrParser", "dcmAdapter", "Dcmparser", "deromParser", "dcommListener", " dcmStatement", "DcmParser"], "ds": ["d", "js", "ks", "eds", "outs", "pd", "des", "vs", "dat", "da", "dds", "gd", "qs", "dq", "eps", "ws", "xs", "in", "aos", "ls", "hs", "gs", "rs", "tes", "dl", "dx", "uds", "DS", "cs", "obs", "ims", "fs", "ns", "as", "ps", "ads", "sets", "ils", "sd", "dt", "dd", "s", "bs", "pers", "hd", " des", "its", "db", " DS", "services", "Ds", "sys", "data", "bd", "drivers", "sv", "details", "dos", "dh", "der", "ins", "df", "es", "ss", "ods", "os", "ys"], "pdReader": ["dpReader", "tdParser", "dpCar", "pdHelper", "hdReader", "pedReader", "tdWriter", "hdParser", "ddCar", "ddRunner", "hdWriter", "vdReader", "vdHelper", "pdCar", "dpLoader", "pdParser", "pdRead", "xdWriter", "xdReader", "ddRead", "pdLoader", "ddParser", "ddHelper", "vdWriter", "ddLoader", "xdLoader", "pedRunner", "tdReader", "hdRead", "ddReader", "vdLoader", "pdRunner", "tdRead", "pedLoader", "pedCar", "ddWriter", "xdHelper", "dpRunner"], "out": ["serv", "sw", "t", "conv", "msg", "aos", "output", "gen", "auto", "on", "opt", "screen", "ch", "all", "cfg", "name", "con", "list", "ins", "pos", "ent", "pool", "full", "w", "err", "v", "at", "p", "txt", "io", "up", "in", "flush", "c", "ex", " err", "inter", "status", "o", "net", "s", "raw", "tmp", "conn", "cn", "gr", "client", "sys", "data", "one", "sum", "cmd", "outs", "js", "log", "str", "id", "obj", "we", "to", "n", "null", "inner", "res", "outer", "desc", "writer", "over", "OUT", "Out", "cache", "it", "ou", "en", "nr", "nt", "inv", "go", "gt", "end", "oss", "cb", "co", "os"], "dcmEncParam": ["dmmencCmd", "dcmDecNum", "dmmEnPar", "dcmencPar", "dcmEscParam", "dmmencMsg", "dmmEncMsg", "dmmencParam", "dcmEncVal", "dcmEscVal", "dmmEnParam", "dmmEncVal", "dmmEncPar", "dcmEnNum", "dcmEnPar", "dcmDecCmd", "dcmencMsg", "dcmencCmd", "dmmEncNum", "dcmEnVal", "dcmEncMsg", "dcmEncCmd", "dcmDecParam", "dmmEncParam", "dcmencNum", "dcmEscNum", "dcmDecMsg", "dmmEncCmd", "dmmEnNum", "dcmEncNum", "dmmencNum", "dcmencParam", "dcmEscPar", "dcmEnParam", "dcmEncPar"], "pdWriter": ["dpReader", "PDWrite", "dpWrite", "dpEditor", "tdWriter", "pcwriter", "pidWrite", "dpWriter", "PDWriter", "tdWrite", "tdEditor", "PDEditor", "pdEditor", "pdwriter", "pidWriter", "pidWriting", "tdwriter", "pidwriter", "tdReader", "pdWrite", "pcWriter", "PDReader", "pcWrite", "pcWriting", "pdWriting", "tdWriting"]}}
{"id1": "17296916", "id2": "14878593", "code1": "    public void logging() throws Fault {\n        final InterceptorWrapper wrap = new InterceptorWrapper(message);\n        final LoggingMessage buffer = new LoggingMessage(\"Inbound Message\\n----------------------------\");\n        String encoding = (String) wrap.getEncoding();\n        if (encoding != null) {\n            buffer.getEncoding().append(encoding);\n        }\n        Object headers = wrap.getProtocolHeaders();\n        if (headers != null) {\n            buffer.getHeader().append(headers);\n        }\n        InputStream is = (InputStream) wrap.getContent(InputStream.class);\n        if (is != null) {\n            CachedOutputStream bos = new CachedOutputStream();\n            try {\n                IOUtils.copy(is, bos);\n                bos.flush();\n                is.close();\n                this.message.setContent(InputStream.class, bos.getInputStream());\n                if (bos.getTempFile() != null) {\n                    logger.error(\"\\nMessage (saved to tmp file):\\n\");\n                    logger.error(\"Filename: \" + bos.getTempFile().getAbsolutePath() + \"\\n\");\n                }\n                if (bos.size() > limit) {\n                    logger.error(\"(message truncated to \" + limit + \" bytes)\\n\");\n                }\n                bos.writeCacheTo(buffer.getPayload(), limit);\n                bos.close();\n            } catch (IOException e) {\n                throw new Fault(e);\n            }\n        }\n        logger.debug(buffer.getPayload().toString().replaceAll(\"\\r\\n|\\n|\\r\", \"\"));\n    }\n", "code2": "    public void hyperlinkUpdate(HyperlinkEvent e) {\n        if (e.getEventType() == EventType.ACTIVATED) {\n            try {\n                URL url = e.getURL();\n                InputStream stream = url.openStream();\n                try {\n                    StringWriter writer = new StringWriter();\n                    IOUtils.copy(stream, writer, \"UTF-8\");\n                    JEditorPane editor = new JEditorPane(\"text/plain\", writer.toString());\n                    editor.setEditable(false);\n                    editor.setBackground(Color.WHITE);\n                    editor.setCaretPosition(0);\n                    editor.setPreferredSize(new Dimension(600, 400));\n                    String name = url.toString();\n                    name = name.substring(name.lastIndexOf('/') + 1);\n                    JDialog dialog = new JDialog(this, \"\u5185\u5bb9\u89e3\u6790: \" + name);\n                    dialog.add(new JScrollPane(editor));\n                    dialog.pack();\n                    dialog.setVisible(true);\n                } finally {\n                    stream.close();\n                }\n            } catch (IOException exception) {\n                exception.printStackTrace();\n            }\n        }\n    }\n", "label": 1, "substitutes": {"logging": ["debugging", "debugStorage", "debugger", "LogStorage", " loging", "logger", "Logger", " logStorage", " logger", "debuging", "Loging", "Logging", "loging", "logStorage"], "wrap": ["build", "force", "sw", "gate", "transform", "wrapper", "store", "ws", "aw", "start", "grow", "we", "work", "pack", "safe", "box", "wx", "ad", "zip", "inter", "link", "form", "web", "message", "sp", "root", " wrapper", "wra", "xf", "get", "format", "create", "nw", "parse", "read", "W", "ow", "python", "x", "me", "rap", "ew", "add", "reset", "chain", "use", "shape", "pad", "handle", "window", " wrapped", "wind", "wire", "find", "wa", "w", "word"], "buffer": ["layer", "batch", "pb", "binary", "sequence", "append", "bar", "queue", "print", "store", "face", "wrapper", "position", "bridge", "row", "phrase", "bb", "output", "complete", "button", "attribute", "view", "surface", "bo", "word", "library", "block", "Buffer", "profile", "quote", "console", "builder", "base", "note", "iter", "trace", "size", "table", "message", "buff", "screen", "database", "writer", "reference", "document", "frame", "template", "line", "reset", "memory", "report", "header", "flag", "window", "cache", "ob", "directory", "reply", "body", "buf", "display", "flash", "command"], "encoding": ["enumging", "encryption", "codryption", "ecryption", "ecoding", "cryption", "enumoder", "ecoder", "enging", "coding", "enaling", "caling", "enumoding", "cododer", "Encoding", "cging", "enclanguage", "enoding", "encging", "Encryption", "encoder", "enoder", "enumlanguage", "coder", "enlanguage", "cododing", "encaling", "Encaling", "encoded", "Encoder", "cododed", "clanguage", "enryption", "enoded", "ecoded"], "getEncoding": ["getEnryption", "getencging", " getEnination", "getencination", "getOrigryption", "getEncryption", " getEncression", "getExpging", "getencoding", " getEnging", "getEnination", " getEnryption", "getEncging", "getExpryption", " getEncryption", "getEnoding", "getOrigling", " getEncling", "getencryption", "getEncination", "getEnling", "getEncling", "getOrigination", "getExpression", " getEncination", "getencression", " getEnoding", " getEncging", " getEnression", " getEnling", "getEncression", "getencling", "getEnging", "getOrigoding", "getExpoding", "getEnression"], "headers": ["head", "members", "builders", "objects", "terms", "modules", "groups", "limits", "weights", "properties", "ids", "authors", "pres", "blocks", "fields", "comments", "names", "users", "rs", "reports", "images", "caps", "chains", "ports", "writers", "params", "frames", "pins", "codes", "holders", "tags", "relations", "ers", "drivers", "ilers", "styles", "keys", "header", "heads", "ppers", "checks", "ters", "boxes", "ctors", "values"], "is": ["does", "iss", "ic", "isl", "isa", "was", "ists", "sis", "in", "ist", "mis", "ais", "iris", "ri", "si", "i", "ios", "has", "obs", "ims", "bis", "fs", "dis", "as", "IS", "ms", "osi", "bs", "lis", "ois", "its", "\u00eds", "isin", "ris", "sys", "isf", "or", "tis", "isd", "Is", "ins", "nis", "ip", "us", "ui", "isi", "isc", "os", "iso", "ys"], "bos": ["windows", "js", "pod", "cos", "oos", "bytes", "des", "uts", "ows", "aos", "fits", "ots", "tops", "bits", "tes", "bo", "ts", "uds", "ols", "stats", "bones", "oops", "ios", "cs", "obs", "bh", "banks", "bis", "jas", "fs", "ps", "ses", "ms", "bs", "los", "oss", "oids", "ones", "lets", "eros", "bes", "sys", "soc", "nos", "tis", "dos", "bi", "ubis", "ui", "boards", "bin", "bas", "isi", "ods", "os", "bot", "ys"], "e": ["err", "d", "ev", "ae", "v", "exc", "h", "en", "p", "E", "oe", "t", "eeee", "ed", "de", "ee", "re", "r", "c", "ex", "n", "i", "a", "m", "f", "ge", "o", "ie", "error", "x", "me", "le", "ate", "g", "ne", "es", "er", "se"]}}
{"id1": "4602568", "id2": "11377441", "code1": "    public String storeImage(InputStream inStream, String fileName, boolean resize) throws Exception {\n        Calendar rightNow = Calendar.getInstance();\n        String dayNamedFolderName = \"\" + rightNow.get(Calendar.YEAR) + StringUtil.getPaddedIntWithZeros(2, rightNow.get(Calendar.MONTH) + 1) + StringUtil.getPaddedIntWithZeros(2, rightNow.get(Calendar.DATE));\n        String uploadDirRoot = props.getProperty(\"uploaded.files.root\");\n        File file = new File(uploadDirRoot + System.getProperty(\"file.separator\") + dayNamedFolderName);\n        if (!file.exists()) file.mkdirs();\n        String extension = FilenameUtils.getExtension(fileName);\n        String outFileName;\n        if (Boolean.parseBoolean(props.getPropertiesInstance().getProperty(IFConsts.USEORIGINALFILENAME, \"true\"))) {\n            outFileName = StringUtil.removeSpecChars(StringUtil.unaccent(FilenameUtils.getBaseName(fileName)));\n        } else {\n            outFileName = StringUtil.hash(fileName + Long.toString(System.currentTimeMillis()));\n        }\n        if (Boolean.parseBoolean(props.getPropertiesInstance().getProperty(IFConsts.USEEXTENSION, \"true\"))) {\n            outFileName = outFileName + DOT + extension;\n        }\n        String outPathAndName = uploadDirRoot + System.getProperty(\"file.separator\") + dayNamedFolderName + System.getProperty(\"file.separator\") + props.getProperty(\"uploaded.files.prefix\") + outFileName;\n        File uploadedFile = new File(outPathAndName);\n        _logger.info(\"uploadedFile.getAbsolutePath() = {}\", uploadedFile.getAbsolutePath());\n        uploadedFile.createNewFile();\n        OutputStream outStream = new FileOutputStream(outPathAndName);\n        IOUtils.copyLarge(inStream, outStream);\n        IOUtils.closeQuietly(inStream);\n        outStream.close();\n        if (resize) {\n            writeResizedImage(outPathAndName, extension, \"imgSize_xs\");\n            writeResizedImage(outPathAndName, extension, \"imgSize_s\");\n            writeResizedImage(outPathAndName, extension, \"imgSize_m\");\n            writeResizedImage(outPathAndName, extension, \"imgSize_l\");\n            writeResizedImage(outPathAndName, extension, \"imgSize_xl\");\n        }\n        String retVal = dayNamedFolderName + \"/\" + props.getProperty(\"uploaded.files.prefix\") + outFileName;\n        return retVal;\n    }\n", "code2": "    public void resolvePlugins() {\n        try {\n            File cacheDir = XPontusConfigurationConstantsIF.XPONTUS_CACHE_DIR;\n            File pluginsFile = new File(cacheDir, \"plugins.xml\");\n            if (!pluginsFile.exists()) {\n                URL pluginURL = new URL(\"http://xpontus.sourceforge.net/snapshot/plugins.xml\");\n                InputStream is = pluginURL.openStream();\n                OutputStream os = FileUtils.openOutputStream(pluginsFile);\n                IOUtils.copy(is, os);\n                IOUtils.closeQuietly(os);\n                IOUtils.closeQuietly(is);\n            }\n            resolvePlugins(pluginsFile.getAbsolutePath());\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n", "label": 1, "substitutes": {"storeImage": [" storeImages", "storeImages", "StorePicture", "StoreImages", "saveImage", "StoreFile", "storeFile", "storePicture", " storeFile", " storePicture", "saveImages", "savePicture", "saveFile", "StoreImage"], "inStream": ["cinFile", "inputStream", "inputView", "cinSteam", "inputFile", " inView", " inSteam", " inFile", "outForm", "fileSteam", "outSteam", "inputSteam", "cinStream", "inForm", "inFile", "fileStream", "inSteam", "inView", "cinView", "outFile", "fileFile", "fileForm", " inForm"], "fileName": ["FILEPath", "imageType", "imageInfo", " filePath", "fileTime", " filename", "imagename", "FILEName", " fileType", "filename", "imagePath", "resourceName", "Filename", "resourcePath", "FilePath", "imageTime", "FILEname", "FILEInfo", "FileName", "resourceType", "FileType", "imageName", "FileInfo", "fileInfo", " fileInfo", "fileType", "resourceTime", "FileTime", "filePath"], "resize": ["ressize", "renizes", "renize", "renized", "resizes", " ressize", "rensize", "Resized", " resized", "Resizes", "resized", "Resize", "Ressize", " resizes"], "rightNow": ["rightToday", "rToday", " RightCurrent", "correctNow", "rNow", "rNOW", "correctNOW", " rightServer", "rServer", "westToday", "westThen", "rightCurrent", "westFuture", "rightThen", "westServer", " rightNOW", " RightThen", " RightNOW", " rightFuture", " RightNow", "rightFuture", "RightToday", "correctToday", "RightNow", " rightCurrent", " rightThen", "RightCurrent", "westNow", "rightServer", "RightFuture", "westCurrent", "correctFuture", "westNOW", " rightToday", "rightNOW"], "dayNamedFolderName": ["dayNamingFoldername", "dayNamingDirectoryNames", "dayNamedFolderNames", "dayNamedFolderPath", "dayNamedAreaName", "dayNamingFolderSize", "dayNamingFileName", "dayNamedDirectoryName", "dayNamedFolder1", "dayNamingFilePath", "dayNamingFolderNames", "dayNamedfolderName", "dayNamedThemeName", "dayNamedArea1", "dayNamedThemePath", "dayNamedDirectoryNames", "dayNamedFilePath", "dayNamingFileNames", "dayNamedThemeNames", "dayNamingDirectory1", "dayNamedfolder1", "dayNamedFilename", "dayNamedFoldername", "dayNamedAreaNames", "dayNamedFileName", "dayNamedThemeSize", "dayNamingDirectoryname", "dayNamingDirectoryName", "dayNamingFolderPath", "dayNamedfoldername", "dayNamedfolderPath", "dayNamingFolder1", "dayNamedFolderSize", "dayNamedAreaname", "dayNamedFileNames", "dayNamingFilename", "dayNamedThemename", "dayNamedfolderNames", "dayNamedDirectory1", "dayNamedDirectoryname", "dayNamedFileSize", "dayNamingFolderName", "dayNamingFileSize"], "uploadDirRoot": ["uploaddirroot", "saveDbParent", "uploadUrlParent", "uploadDbCover", "uploadDbRoot", "uploadNetRoot", "saveDirroot", "uploadRelRoot", "saveDbroot", "uploadDbParent", "uploadFolderRoot", " uploadDirPath", "uploadDirPath", "saveDirParent", " uploadDirBase", "UploadDbCover", "uploadUrlroot", "uploaddirRoot", "UploadDirCover", "uploadNetCover", "uploadUrlBase", "uploadNetroot", " uploadRelroot", "uploadDbroot", "uploadDbBase", "uploadDirBase", "UploadDirBase", " uploadRelRoot", "uploadFolderroot", "UploadDbroot", "UploadDbRoot", " uploadDirroot", "uploadDirectoryRoot", " uploadRelPath", "uploadUrlRoot", "uploadRelroot", "UploadDbBase", "uploadDirroot", "uploadFolderBase", "uploadDirectoryroot", "uploadDirCover", "uploadUrlPath", "uploaddirCover", "saveDbRoot", "saveDirRoot", "uploaddirBase", "uploadRelBase", "uploadDirectoryParent", "UploadDirroot", "uploadDirParent", "uploadFolderPath", "uploadNetBase", " uploadRelBase", "UploadDirRoot", "uploadRelPath"], "file": ["local", "force", "op", "dir", "h", "parent", "resource", "FILE", "channel", "ile", "t", "up", "class", "no", "File", "open", "run", "work", "time", "to", "null", "node", "port", "link", "f", "base", "table", "page", "entity", "get", "project", "tree", "name", "source", "folder", "key", "top", "image", "el", "handle", "task", "pool", "il", "full", "type"], "extension": ["expend", "expensions", "EXTension", "extention", "xtend", "extended", "dimendant", "xtended", "exension", "expended", "exensions", "EXTended", "dimension", "exention", "dimensions", "extendant", "expention", "expendant", "EXTention", "extensions", "exendant", "extend", "EXTend", "dimention", "xtention", "expension", "xtension"], "outFileName": ["outfileNames", "OutFilename", "outFileNames", " outFileInfo", "OUTFilename", "outLogNames", "outDirPath", "outLogKey", " outFileVersion", "outFileType", " outLogVersion", "outFieldType", "OUTLogName", "outFieldName", "OUTFileKey", "outImageKey", "outfileType", "outLogPath", "OutFilePath", "inFileType", " outLogname", "OutfilePath", "outImageNames", "outFieldname", "outFilenameType", "OUTLogname", "outfileVersion", "outFilesName", "outLogName", "outFilenamename", "outLogVersion", "outImagePath", "OUTFieldPath", "OutfileKey", "outFilesPath", "outfileSize", "outImageName", " outFileNames", "outLinePath", "OutFileKey", " outLinePath", "outLineKey", "outFilename", "outLineName", "inFilename", " outLineName", "infilename", " outLogName", "outFilenameSize", "outImageInfo", "OutfileName", " outFilePath", "outFileKey", " outLineInfo", "outDirname", "outFileInfo", "outFileVersion", "outFilenameVersion", "outFilePath", "OUTFieldName", "outFieldSize", "outLineInfo", "outFilesname", "outFieldPath", "inFileSize", "outLineNames", "outFilenamePath", "outLogname", "outDirName", "infileSize", "outfilePath", "outLinename", "outfileKey", " outFilename", "outFilenameInfo", "outfileName", "infileName", "OUTFieldname", "inFileName", "outImagename", "outFilenameName", "outFilenameNames", "OUTFilePath", "outFilenameKey", "OUTLogPath", "outfilename", "OutFileName", "OUTLogKey", "infileType", "outFileSize", " outLogNames", " outLineNames", "Outfilename", "OUTFileName"], "outPathAndName": ["outLocationandNames", "outPathOrSize", "outPathOrKey", "outTimeButPath", "outPathButLike", "outLocationAndSize", "outTimeButLike", "outPortButName", "outTimeAndTime", "outPathandNames", "outLocationandSize", "outTimeButTime", "outPathandSize", "outPathandName", "outLocationAndName", "outPathButName", "outTimeButName", "outPathOrLike", "outLocationandKey", "outPathOrTime", "outPathOrPath", "outPathAndPath", "outPathandPath", "outLocationAndNames", "outPathandKey", "outPathOrNames", "outTimeAndPath", "outPathAndLike", "outPathButPath", "outPathANDTime", "outPathANDName", "outLocationandName", "outPortButPath", "outPathAndSize", "outPathANDPath", "outPathANDLike", "outPathButTime", "outPortButKey", "outLocationAndKey", "outPortAndPath", "outPathOrName", "outPathButKey", "outPortAndKey", "outTimeAndName", "outPathAndNames", "outPathAndKey", "outPathAndTime", "outTimeAndLike", "outPortAndName"], "uploadedFile": ["uploadiedF", "uploadpedFile", "uploaderFile", "uploadashedFile", " uploadedifiedFile", " UploadmedGlobal", "uploadredFormat", "uploadedLine", "presentedfile", "uploadedUnit", "uploadtedField", "uploadpedUnit", " UploadmedPlace", "uploadtedfile", " uploadedifiedUnit", "uploadededGlobal", "uploadedPlace", "uploadifiedF", " UploadmedFile", "uploadedField", "uploadmedGlobal", "uploadredFile", "uploadmedFormat", "presentedField", " UploadedGlobal", "uploadtedFile", " UploadedPlace", "uploadedfile", "uploadashedFILE", "uploadededFormat", "uploadashedfile", "presenttedFILE", "presentedFile", "uploadedFormat", "uploadmedFile", "presenttedFile", "uploadpedLine", " uploadededUnit", "uploadedF", "uploadifiedLine", "uploadiedUnit", " uploadedifiedF", "uploadedGlobal", "presenttedField", "uploadifiedUnit", " uploadededLine", " uploadededF", "presentedFILE", "uploaderfile", "uploaderField", " UploadmedFormat", "uploadashedField", "uploadiedLine", "presenttedfile", " uploadedifiedLine", "uploadpedF", "uploadredPlace", "uploadtedFILE", " UploadedFormat", "uploadiedFile", "uploadmedPlace", "uploadredGlobal", "uploadededPlace", "uploadifiedFile", " uploadededFile", "uploadededFile", "uploaderFILE", " UploadedFile", "uploadedFILE"], "outStream": [" outView", "oStream", "_", " outSteam", "outSteam", "oFile", "inFile", "oView", "inSteam", "inView", "outView", "oSteam", "outFile", " outFile"]}}
{"id1": "19549489", "id2": "8788371", "code1": "    public static void copy(File sourceFile, File destinationFile) throws IOException {\n        FileChannel sourceFileChannel = (new FileInputStream(sourceFile)).getChannel();\n        FileChannel destinationFileChannel = (new FileOutputStream(destinationFile)).getChannel();\n        sourceFileChannel.transferTo(0, sourceFile.length(), destinationFileChannel);\n        sourceFileChannel.close();\n        destinationFileChannel.close();\n    }\n", "code2": "    private void tail(String[] cmd, int pos) throws IOException {\n        CommandFormat c = new CommandFormat(\"tail\", 1, 1, \"f\");\n        String src = null;\n        Path path = null;\n        try {\n            List<String> parameters = c.parse(cmd, pos);\n            src = parameters.get(0);\n        } catch (IllegalArgumentException iae) {\n            System.err.println(\"Usage: java FsShell \" + TAIL_USAGE);\n            throw iae;\n        }\n        boolean foption = c.getOpt(\"f\") ? true : false;\n        path = new Path(src);\n        FileSystem srcFs = path.getFileSystem(getConf());\n        if (srcFs.isDirectory(path)) {\n            throw new IOException(\"Source must be a file.\");\n        }\n        long fileSize = srcFs.getFileStatus(path).getLen();\n        long offset = (fileSize > 1024) ? fileSize - 1024 : 0;\n        while (true) {\n            FSDataInputStream in = srcFs.open(path);\n            in.seek(offset);\n            IOUtils.copyBytes(in, System.out, 1024, false);\n            offset = in.getPos();\n            in.close();\n            if (!foption) {\n                break;\n            }\n            fileSize = srcFs.getFileStatus(path).getLen();\n            offset = (fileSize > offset) ? offset : fileSize;\n            try {\n                Thread.sleep(5000);\n            } catch (InterruptedException e) {\n                break;\n            }\n        }\n    }\n", "label": 1, "substitutes": {"copy": ["clone", "delete", "Cop", "cat", " cp", "replace", "map", "export", "cp", "write", "csv", "slice", "paste", "rm", "create", "Copy", "upload", "download", "transfer", "read", " mirror", " duplicate", "load", " Copy", "save", "add", "move", "sync"], "sourceFile": ["inputLine", "inputPage", "ourcefile", "ourcePage", "ourceFile", "sourcefile", "inputFile", "ourceFilename", "ourceLine", "SourceFilename", " sourceLine", " sourceFilename", "inputfile", "sourceFilename", "SourceLine", " sourcefile", "SourcePage", " sourcePage", "SourceFile", "sourcePage", "Sourcefile", "sourceLine"], "destinationFile": ["destinationfile", "destinatedPlace", "destinationsfile", "declinatorFile", "destinationPath", "destinatorFile", "destinatedfile", "estinatedFilename", "estinationFile", "destinatePlace", "destrativePlace", "destinatorPath", "estinationPlace", "destinationsPlace", "declinationPlace", "estinatedFile", "declinationFilename", "declinatorPlace", "destinoFilename", "destrativeFile", "destinatedFilename", "declinationPath", "declinatorFilename", "destinatePath", "estinatedPlace", "destinatorPlace", "destinatedFile", "destinationPlace", "destinationFilename", "estinationfile", "declinationFile", "estinationFilename", "destinoFile", "destinationsFilename", "destinatorFilename", "destrativePath", "estinatedfile", "declinatorPath", "destinofile", "destrativeFilename", "destinoPlace", "destinationsFile", "destinateFile", "destinateFilename"], "sourceFileChannel": ["sourceFileApplication", "sourceBaseHandler", "ourceEntrychannel", "sourceBaseChuck", "ourceEntryChan", "sourceBlockConnection", "srcFilechannel", "sourceStreamChan", "sourceFilechannel", "srcFileChannel", "sourceStreamChuck", "sourceEntrychannel", "srcBlockchannel", "sourceEntryChannel", "sourceStreamchannel", "sourceBlockchannel", "sourceFileChuck", "sourceBaseChannel", "sourceEntryConnection", "sourceEntryChan", "ourceFileChannel", "srcBlockConnection", "sourceFileHandler", " sourceFileHandler", "sourceStreamChannel", "sourceByteEntry", "srcBlockEntry", "srcFileEntry", "sourceStreamApplication", "sourceByteConnection", "sourceLineEntry", "ourceFileChan", " sourceFileApplication", "ourceFilechannel", "sourceLineConnection", "ourceFileConnection", "sourceLineChan", "sourceFileChan", "sourceFileConnection", "sourceBytechannel", "sourceBlockEntry", "sourceByteChannel", "sourceBaseApplication", "sourceFileEntry", "sourceLineChannel", "sourceBlockChannel", "srcBlockChannel", "sourceStreamHandler", "ourceEntryChannel", "sourceLinechannel", " sourceFileChuck", "srcFileConnection", "sourceStreamConnection", "ourceEntryConnection"], "destinationFileChannel": ["destinationDirectoryChan", "destinatorFilesChannel", "destinatorFilesCh", "destmentResourceManager", "destmentPageContext", "destmentResourcechannel", "destmentFileContext", "destinationDirectoryChannel", "destinationResourcechannel", "destinationPageChan", "destinationFileConnection", "destinationfileManager", "destinationPageContext", "destinationChannelContext", "destinationFilesChan", "destinationfilechannel", "destinationfileConnection", "destinatorFileCh", "destinationChannelCh", "destinationChannelChannel", "destinationResourceChan", "destmentResourceChan", "destinationPageChannel", "destinatorFileConnection", "destinationFileContext", "destinationFileCh", "destinationResourceChannel", "destmentResourceChannel", "destinationDirectoryManager", "destinationPageEntry", "destinationChannelEntry", "destinatorFilesConnection", "destmentPageEntry", "destinatorFileChannel", "destinationFileManager", "destinatorFilesChan", "destinationDirectorychannel", "destmentFilechannel", "destinationfileChannel", "destinationFileChan", "destinationFileEntry", "destinationFilesChannel", "destmentFileManager", "destmentFileChan", "destmentFileEntry", "destinationResourceManager", "destinationFilechannel", "destinationChannelConnection", "destinatorFileChan", "destmentFileChannel", "destinationfileChan", "destinationfileCh", "destmentPageChan", "destinationFilesConnection", "destinationfileContext", "destinationChannelChan", "destinationFilesCh", "destinationfileEntry", "destmentPageChannel"]}}
{"id1": "3330944", "id2": "15580610", "code1": "    public void extractImage(String input, String output, DjatokaDecodeParam params, IWriter w) throws DjatokaException {\n        File in = null;\n        String dest = output;\n        if (input.equals(STDIN)) {\n            try {\n                in = File.createTempFile(\"tmp\", \".jp2\");\n                input = in.getAbsolutePath();\n                in.deleteOnExit();\n                IOUtils.copyFile(new File(STDIN), in);\n            } catch (IOException e) {\n                logger.error(\"Unable to process image from \" + STDIN + \": \" + e.getMessage());\n                throw new DjatokaException(e);\n            }\n        }\n        BufferedImage bi = extractImpl.process(input, params);\n        if (bi != null) {\n            if (params.getScalingFactor() != 1.0 || params.getScalingDimensions() != null) bi = applyScaling(bi, params);\n            if (params.getTransform() != null) bi = params.getTransform().run(bi);\n            try {\n                BufferedOutputStream os = new BufferedOutputStream(new FileOutputStream(new File(dest)));\n                w.write(bi, os);\n                os.close();\n            } catch (FileNotFoundException e) {\n                logger.error(\"Requested file was not found: \" + dest);\n                throw new DjatokaException(e);\n            } catch (IOException e) {\n                logger.error(\"Error attempting to close: \" + dest);\n                throw new DjatokaException(e);\n            }\n        }\n        if (in != null) in.delete();\n    }\n", "code2": "    @Override\n    public void trainClassifier(File dir, String... args) throws Exception {\n        String[] command = new String[args.length + 3];\n        command[0] = this.getCommand();\n        System.arraycopy(args, 0, command, 1, args.length);\n        command[command.length - 2] = new File(dir, \"training-data.libsvm\").getPath();\n        command[command.length - 1] = new File(dir, this.getModelName()).getPath();\n        Process process = Runtime.getRuntime().exec(command);\n        IOUtils.copy(process.getInputStream(), System.out);\n        IOUtils.copy(process.getErrorStream(), System.err);\n        process.waitFor();\n    }\n", "label": 1, "substitutes": {"extractImage": ["extlateimage", "extractorFrame", "extractorImages", "extractorImage", "extractFrame", "extlateFrame", "extlateImage", "extprocessFrame", "Extprocessimage", "extprocessImages", "extprocessimage", "extractorimage", "ExtprocessFrame", "ExtractImage", "ExtprocessImage", "extprocessImage", "extlateImages", "extractimage", "ExtractFrame", "Extractimage", "ExtprocessImages", "ExtractImages", "extractImages"], "input": ["local", "text", "path", "sample", "seed", "background", "address", "string", "file", "p", "txt", "str", "before", "start", "Input", "context", "internal", "audio", "current", "select", "from", "url", "index", "qa", "null", "check", "query", "i", "pattern", "img", "hidden", "accept", "initial", "base", "config", "uri", "prefix", "buffer", "format", "out", "raw", "tmp", "init", "q", "upload", "error", "data", "source", "image", "hello", "rc", "ins", "empty", "ip", "request", "xml", "it", "this", "origin", "partial"], "output": ["path", "Output", "PUT", "icon", "put", "file", "OU", "generated", "oe", "print", "success", "current", "target", "filename", "to", "write", "port", "hidden", "o", "STDOUT", "prefix", "result", "format", "out", "name", "pretty", "source", "OUT", "image", "response", "type", "temp", "display"], "params": ["settings", " parameters", "Par", "arms", "members", "results", "packages", "p", "ars", "points", "pro", "terms", "modules", "eps", "pps", "properties", "abilities", "devices", "conf", "phi", "pas", "gs", "names", "ctx", "rs", "parents", "users", "stats", "images", "pi", "caps", "eters", "m", "units", "ims", "chains", "Parameters", "options", "config", "ps", "ports", "phys", "pins", "parts", "s", "fps", "changes", "mm", "actions", "tags", "requires", "pretty", "tools", "spec", "docs", "styles", "AMS", "details", "keys", "pkg", "photos", "marks", "las", "json", "param", "ams", "types", "proc", "prop", "jp", "par"], "w": ["d", "v", "wh", "h", "wd", "p", "sw", "ws", "e", "we", "rw", "n", "wx", "write", "wp", "m", "f", "o", "wl", "out", "wr", "Ws", "q", "writer", "nw", "wal", "W", "kw", "wt", "Writer", "ew", "wo", "window", "wb", "hw", "wa", "word"], "in": ["local", "win", "mc", "ln", "path", "file", "en", "p", "id", "sin", "old", "is", "inf", "po", "e", "Input", "al", "cin", "from", "copy", "mi", "edIn", "conf", " IN", "ini", "IN", "null", "i", "inner", "ar", " din", "f", "base", "phys", "ma", "out", "din", "raw", "init", "all", "isin", "vin", "mm", "read", "name", "gin", "include", "In", "source", "one", "ins", "rin", "it", "info", "bin", "nin", "sql", "con", "inn"], "dest": ["path", "trans", "decl", "dir", "dat", "des", "p", "txt", "cat", "orig", "src", "oe", "ws", "st", "Dest", "prop", "target", "pipe", "deg", "pas", "tif", "nom", "way", "to", "mem", "port", "img", "write", "csv", "origin", "opt", "desc", "resp", "result", "end", "out", "loc", "tmp", " dst", "usr", " destination", "alt", "dist", "data", "rest", "source", "save", "cont", "comb", "shape", "buf", "wb", "temp", "lit", "display"], "bi": ["ba", "ji", "phi", "pb", "zi", "li", "gi", "nb", "b", "di", "ki", "bg", "be", "jiang", "umi", "rob", "bb", "BI", "mi", "oi", "ni", "bie", "bits", "bo", "ini", " nib", "mu", "ibi", "i", "bra", "obo", "pi", "yi", "bh", "ib", "bis", "bone", "beck", "buff", "bs", "bm", "bil", "ali", "ibe", "iri", "abi", "phy", "bank", "qi", "hog", "bf", "obi", "ai", "ble", "bp", "fi", "bas", "vi", "bin", "isi", "Bi", "bc"], "os": ["ks", "cos", "oses", "oos", "bos", "et", "oes", "io", "ose", "is", "ot", "ox", "mot", "OS", "aos", "ows", "ls", "mos", "ts", "ols", "ios", "cs", "obs", "ons", "fs", "ns", "o", "ros", "osi", "bs", "los", "oss", "s", "acs", "ops", "ds", "ow", "oid", "sys", "or", "Os", "pos", "us", "css", "es", "oo", "ys"]}}
{"id1": "2668853", "id2": "11562165", "code1": "    public static boolean decodeFileToFile(final String infile, final String outfile) {\n        boolean success = false;\n        java.io.InputStream in = null;\n        java.io.OutputStream out = null;\n        try {\n            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);\n            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n            final byte[] buffer = new byte[65536];\n            int read = -1;\n            while ((read = in.read(buffer)) >= 0) {\n                out.write(buffer, 0, read);\n            }\n            success = true;\n        } catch (final java.io.IOException exc) {\n            exc.printStackTrace();\n        } finally {\n            try {\n                in.close();\n            } catch (final Exception exc) {\n            }\n            try {\n                out.close();\n            } catch (final Exception exc) {\n            }\n        }\n        return success;\n    }\n", "code2": "    private void streamContains(String in, InputStream stream) throws IOException {\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        IOUtils.copy(stream, baos);\n        byte[] bytes = baos.toByteArray();\n        String cmp = new String(bytes, \"UTF-8\");\n        assertTrue(cmp.contains(in));\n        baos.close();\n    }\n", "label": 1, "substitutes": {"decodeFileToFile": ["decodeFiles2String", "decodeFileAsPage", "decodeFileTOPage", "decodeFileToFiles", "decodeFileTOFile", "decodeFileToPage", "decodeFiles2Files", "decodeFilesToFiles", "decodeFilesToString", "decodeFile2Files", "decodeFileTOFiles", "decodeFileAsString", "decodeFile2File", "decodeFiles2File", "decodeFileTOString", "decodeFile2String", "decodeFiles2Page", "decodeFileAsFiles", "decodeFile2Page", "decodeFileToString", "decodeFileAsFile", "decodeFilesToPage", "decodeFilesToFile"], "infile": ["Inbase", "inwhere", "Infile", "inputFile", "inputwhere", "outpath", "inpath", " inbase", "outbase", "innfilename", "inbase", "innfile", "InFile", " infilename", "innbase", "inputfile", "inFile", "inputpath", "inputbase", "innwhere", "outFile", " inwhere", "Inpath", "inputfilename", "infilename"], "outfile": ["listfile", "tofp", "outpath", "inpath", "listfilename", " outpath", "OutFile", "tofilename", "inFile", "outfilename", "listfp", "listFile", "tofile", "outfp", "outFile", "Outpath", "Outfile", "infp", "Outfilename", " outFile", "toFile", "infilename", " outfilename"], "in": ["pin", "en", "by", "io", "is", "inf", "per", "al", "cin", "from", "re", "ini", "IN", "n", "i", "ro", "inner", "inc", "inside", "on", " din", "amin", "o", "iter", "form", "din", "conn", "get", "oin", "init", "user", "input", "isin", "ind", "gin", "In", "source", "im", "image", "ai", "ins", "rin", "it", "info", "bin", "nin", "ain", "con", "inn"], "out": ["os", "ln", "at", "outs", "file", "en", "OU", "io", "print", "b", "t", "ot", "nt", "ion", "aos", "output", "flush", "ex", "n", "to", "write", "inner", "res", "gt", "on", "outer", "o", "opt", "net", "end", "oss", "cn", "writer", "fn", "sys", "OUT", "Out", "it", "ent", "g", "ou", "ne", "can", "co", "con", "w"], "buffer": ["black", "sample", "batch", "number", "binary", "sequence", "variable", "append", "bar", "queue", "length", "history", "row", "stack", "phrase", "total", "attribute", "view", "block", "mem", "bone", "base", "note", "initial", "padding", "table", "message", "buff", "paste", "column", "tree", "frame", "template", "document", "comment", "zero", "memory", "password", "header", "pad", "window", "cache", "info", "available", "buf", "Buffer", "temp", "display", "command"], "read": ["text", "send", "first", "print", "before", "length", "count", "start", "select", "skip", "run", "open", "reader", "len", "index", "range", "check", "query", "write", "i", "ok", "close", "wait", "through", "iter", "set", "connect", "pe", "end", "each", "get", "READ", "reads", "raw", "q", "push", "input", "seek", "shift", "readable", "load", "data", "reading", "give", "add", "Read", "ready", "need", "hold", " Read", "stream", "find", "size"], "success": ["master", " Success", "submit", "please", "first", " failure", "ratulations", "crit", " succeeds", "unity", "exist", " succeeded", "growth", "complete", "town", "Success", "primary", "good", "successfully", "snap", "green", "safe", "cess", "ok", "status", "summary", "release", "close", "valid", "city", "security", "sufficient", "accept", " successfully", " successful", "result", "ccess", "danger", "commit", "second", "support", "setup", "successful", " successes", " okay", "error", "ceed", "photo", " succ", "warning", "same", "democracy", "done", "cont", "top", "response", " succeed", " convergence", "continue", "surv"]}}
{"id1": "22320592", "id2": "823074", "code1": "    private static void loadDefaultPreferences() {\n        try {\n            URL url = ClassLoader.getSystemResource(\"OpenDarkRoom.defaults.properties\");\n            preferences.load(url.openStream());\n        } catch (FileNotFoundException e) {\n            log.error(\"Default preferences file not found\");\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n", "code2": "    public void convert(File src, File dest) throws IOException {\n        InputStream in = new BufferedInputStream(new FileInputStream(src));\n        DcmParser p = pfact.newDcmParser(in);\n        Dataset ds = fact.newDataset();\n        p.setDcmHandler(ds.getDcmHandler());\n        try {\n            FileFormat format = p.detectFileFormat();\n            if (format != FileFormat.ACRNEMA_STREAM) {\n                System.out.println(\"\\n\" + src + \": not an ACRNEMA stream!\");\n                return;\n            }\n            p.parseDcmFile(format, Tags.PixelData);\n            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n                System.out.println(\"\\n\" + src + \": contains UIDs!\" + \" => probable already DICOM - do not convert\");\n                return;\n            }\n            boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n            int pxlen = p.getReadLength();\n            if (hasPixelData) {\n                if (inflate) {\n                    ds.putUS(Tags.BitsAllocated, 16);\n                    pxlen = pxlen * 4 / 3;\n                }\n                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n                    System.out.println(\"\\n\" + src + \": mismatch pixel data length!\" + \" => do not convert\");\n                    return;\n                }\n            }\n            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n            ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n            ds.putUI(Tags.SOPClassUID, classUID);\n            if (!ds.contains(Tags.NumberOfSamples)) {\n                ds.putUS(Tags.NumberOfSamples, 1);\n            }\n            if (!ds.contains(Tags.PhotometricInterpretation)) {\n                ds.putCS(Tags.PhotometricInterpretation, \"MONOCHROME2\");\n            }\n            if (fmi) {\n                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n            }\n            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n            try {\n            } finally {\n                ds.writeFile(out, encodeParam());\n                if (hasPixelData) {\n                    if (!skipGroupLen) {\n                        out.write(PXDATA_GROUPLEN);\n                        int grlen = pxlen + 8;\n                        out.write((byte) grlen);\n                        out.write((byte) (grlen >> 8));\n                        out.write((byte) (grlen >> 16));\n                        out.write((byte) (grlen >> 24));\n                    }\n                    out.write(PXDATA_TAG);\n                    out.write((byte) pxlen);\n                    out.write((byte) (pxlen >> 8));\n                    out.write((byte) (pxlen >> 16));\n                    out.write((byte) (pxlen >> 24));\n                }\n                if (inflate) {\n                    int b2, b3;\n                    for (; pxlen > 0; pxlen -= 3) {\n                        out.write(in.read());\n                        b2 = in.read();\n                        b3 = in.read();\n                        out.write(b2 & 0x0f);\n                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n                        out.write(b3 >> 4);\n                    }\n                } else {\n                    for (; pxlen > 0; --pxlen) {\n                        out.write(in.read());\n                    }\n                }\n                out.close();\n            }\n            System.out.print('.');\n        } finally {\n            in.close();\n        }\n    }\n", "label": 0, "substitutes": {"loadDefaultPreferences": ["loadDefaultProfs", "loadDefaultPrefs", "loadDefaultConfSettings", "loadDefaultPrefSettings", "loaddefaultPreerences", "loadDefaultConferences", "loadDefaultConfs", "loadDefaultPreies", "loaddefaultPreies", "loaddefaultPrefs", "loadDefaultProfies", "loadDefaultPres", "loadDefaultPreSettings", "loadDefaultPrefies", "loaddefaultPreSettings", "loaddefaultPrefies", "loadDefaultPreerences", "loaddefaultPrefSettings", "loaddefaultPres", "loadDefaultProfSettings", "loaddefaultPreferences", "loadDefaultConfies", "loadDefaultProferences"], "url": ["resources", "sl", "path", "address", "log", "file", "Url", "ret", "abs", "str", "nl", "resource", "char", "browser", "loader", "obj", "context", "service", "ls", "re", "r", "ll", "res", "link", "location", "f", "uri", "base", "config", "URL", "cl", "result", "ur", "name", "u", "document", "http", "rl", "mount", "l", "ref", "ul"]}}
{"id1": "15018553", "id2": "13565787", "code1": "    public static String encrypt(String text) throws NoSuchAlgorithmException {\n        MessageDigest md;\n        md = MessageDigest.getInstance(\"MD5\");\n        byte[] md5hash = new byte[32];\n        try {\n            md.update(text.getBytes(\"iso-8859-1\"), 0, text.length());\n        } catch (UnsupportedEncodingException e) {\n            e.printStackTrace();\n        }\n        md5hash = md.digest();\n        return convertToHex(md5hash);\n    }\n", "code2": "    public static String encryptPassword(String plainPassword) {\n        StringBuffer sb = new StringBuffer();\n        try {\n            MessageDigest messageDigest = MessageDigest.getInstance(\"MD5\");\n            messageDigest.update(plainPassword.getBytes());\n            byte[] digestBytes = messageDigest.digest();\n            String hex = null;\n            for (int i = 0; i < digestBytes.length; i++) {\n                hex = Integer.toHexString(0xFF & digestBytes[i]);\n                if (hex.length() < 2) sb.append(\"0\");\n                sb.append(hex);\n            }\n        } catch (Exception ex) {\n            System.out.println(ex.getMessage());\n        }\n        return new String(sb);\n    }\n", "label": 1, "substitutes": {"encrypt": ["uncrypted", " enccrypt", "Encrypt", "encrypted", "uncrypt", "unccrypt", "Encrypted", "Enccrypt", "encode", " encode", " encrypted", "uncode", "enccrypt", "Encode"], "text": ["path", "v", "pt", "string", "p", "txt", "Text", "str", "print", "test", "t", "nt", "msg", "phrase", "select", "output", "url", "content", "act", "ext", "pattern", "code", "title", "form", "ct", "buffer", "message", "ut", "th", "q", "input", "read", "document", "name", "comment", "data", "x", "cont", "source", "value", "password", "TEXT", "tx", "translation", "body", "now", "w", "word"], "md": ["mac", "mc", "d", "err", "cmp", "h", "pd", "mt", "ld", "mod", "mo", "mode", "di", "t", "hash", "msg", "de", "nd", "c", " cd", "mem", "det", "ad", "img", "m", "mond", " dd", "pm", "ct", "ms", "dd", "mand", "rm", "hd", "doc", "dig", "mm", "ind", "cd", "mk", "od", "bd", "mg", " cmd", "mn", "dm", "and", "mp", "metadata", "der", "dh", "pkg", "sha", "df", "mb", "cmd", "grad", "MD", "del"], "md5hash": ["md5h", "md5sum", "md512sha", " md2hash", "md3sum", "md3h", "md3sha", "md2cloth", " md3Hash", " md5sha", "md512sum", "md2sha", " md2hex", " md5hex", " md5cloth", " md5sum", " md3hash", " md5Hash", "md2h", "md2sum", " md5h", "md3hex", "md5hex", " md3sum", " md3h", "md2hash", "md3Hash", "md3cloth", "md512hash", " md2cloth", "md512Hash", "md2hex", "md5Hash", "md5cloth", " md2sum", "md3hash", " md3sha", "md5sha", "md2Hash", "md512h"]}}
{"id1": "2017833", "id2": "8079516", "code1": "    public static String hash(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n        MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n        byte[] sha1hash = new byte[40];\n        md.update(text.getBytes(\"iso-8859-1\"), 0, text.length());\n        sha1hash = md.digest();\n        return SHA1.convertToHex(sha1hash);\n    }\n", "code2": "    public void buildSiteForEdit(String sBasePath, String sOutputPath, String sCtrlPath, String sMenuPath, String sIntegradorPath, String sSelPageOptions, Properties oEnvironmentProps, Properties oUserProps) throws IOException, DOMException, TransformerException, TransformerConfigurationException, MalformedURLException {\n        Transformer oTransformer;\n        StreamResult oStreamResult;\n        StreamSource oStreamSrcXML;\n        StringWriter oStrWritter;\n        InputStream oXMLStream = null;\n        String sTransformed;\n        StringBuffer oPostTransform;\n        String sKey;\n        String sMedia;\n        Object sVal;\n        Page oCurrentPage;\n        int iCloseHead, iOpenBody, iCloseBody;\n        int iReaded;\n        char CharBuffer[] = new char[8192];\n        String sCharBuffer;\n        long lElapsed = 0;\n        final String sSep = System.getProperty(\"file.separator\");\n        if (DebugFile.trace) {\n            lElapsed = System.currentTimeMillis();\n            DebugFile.writeln(\"Begin Pageset.buildSiteForEdit(\" + sBasePath + \",\" + sOutputPath + \",\" + sCtrlPath + \",\" + sMenuPath + \")\");\n            DebugFile.incIdent();\n        }\n        FileSystem oFS = new FileSystem();\n        Vector vPages = pages();\n        if (!sBasePath.endsWith(sSep)) sBasePath += sSep;\n        String sWebServer = oEnvironmentProps.getProperty(\"webserver\", \"\");\n        if (DebugFile.trace && sWebServer.length() == 0) DebugFile.writeln(\"WARNING: webserver property not set at EnvironmentProperties\");\n        if (!sWebServer.endsWith(\"/\")) sWebServer += \"/\";\n        Node oContainers = oMSite.seekChildByName(oMSite.getRootNode().getFirstChild(), \"containers\");\n        if (oContainers == null) {\n            if (DebugFile.trace) DebugFile.writeln(\"ERROR: <containers> node not found.\");\n            throw new DOMException(DOMException.NOT_FOUND_ERR, \"<containers> node not found\");\n        }\n        if (DebugFile.trace) DebugFile.writeln(\"new FileInputStream(\" + (sURI.startsWith(\"file://\") ? sURI.substring(7) : sURI) + \")\");\n        for (int c = 0; c < vPages.size(); c++) {\n            oCurrentPage = (Page) vPages.get(c);\n            oXMLStream = new FileInputStream(sURI.startsWith(\"file://\") ? sURI.substring(7) : sURI);\n            oStreamSrcXML = new StreamSource(oXMLStream);\n            oStrWritter = new StringWriter();\n            oStreamResult = new StreamResult(oStrWritter);\n            try {\n                oTransformer = StylesheetCache.newTransformer(sBasePath + \"xslt\" + sSep + \"templates\" + sSep + oMSite.name() + sSep + oCurrentPage.template());\n                sMedia = oTransformer.getOutputProperty(OutputKeys.MEDIA_TYPE);\n                if (DebugFile.trace) DebugFile.writeln(OutputKeys.MEDIA_TYPE + \"=\" + sMedia);\n                if (null == sMedia) sMedia = \"html\"; else sMedia = sMedia.substring(sMedia.indexOf('/') + 1);\n                if (null == oCurrentPage.getTitle()) throw new NullPointerException(\"Page \" + String.valueOf(c) + \" title is null\");\n                if (DebugFile.trace) DebugFile.writeln(\"Page.filePath(\" + sOutputPath + oCurrentPage.getTitle().replace(' ', '_') + \".\" + sMedia + \")\");\n                oCurrentPage.filePath(sOutputPath + oCurrentPage.getTitle().replace(' ', '_') + \".\" + sMedia);\n                StylesheetCache.setParameters(oTransformer, oEnvironmentProps);\n                StylesheetCache.setParameters(oTransformer, oUserProps);\n                oTransformer.setParameter(\"param_page\", ((Page) (vPages.get(c))).getTitle());\n                oTransformer.transform(oStreamSrcXML, oStreamResult);\n            } catch (TransformerConfigurationException e) {\n                oLastXcpt = e;\n                sMedia = null;\n                SourceLocator sl = e.getLocator();\n                if (DebugFile.trace) {\n                    if (sl == null) {\n                        DebugFile.writeln(\"ERROR TransformerConfigurationException \" + e.getMessage());\n                    } else {\n                        DebugFile.writeln(\"ERROR TransformerConfigurationException \" + e.getMessage() + \" line=\" + String.valueOf(sl.getLineNumber()) + \" column=\" + String.valueOf(sl.getColumnNumber()));\n                    }\n                }\n            } catch (TransformerException e) {\n                oLastXcpt = e;\n                sMedia = null;\n                if (DebugFile.trace) DebugFile.writeln(\"ERROR TransformerException \" + e.getMessageAndLocation());\n            }\n            oTransformer = null;\n            oStreamResult = null;\n            sTransformed = oStrWritter.toString();\n            if (DebugFile.trace) DebugFile.writeln(\"transformation length=\" + String.valueOf(sTransformed.length()));\n            if (sTransformed.length() > 0) {\n                iCloseHead = sTransformed.indexOf(\"</head\");\n                if (iCloseHead < 0) iCloseHead = sTransformed.indexOf(\"</HEAD\");\n                iOpenBody = sTransformed.indexOf(\"<body\", iCloseHead);\n                if (iOpenBody < 0) iOpenBody = sTransformed.indexOf(\"<BODY\", iCloseHead);\n                iCloseBody = sTransformed.indexOf(\">\", iOpenBody + 5);\n                for (char s = sTransformed.charAt(iCloseBody + 1); s == '\\r' || s == '\\n' || s == ' ' || s == '\\t'; s = sTransformed.charAt(++iCloseBody)) ;\n                oPostTransform = new StringBuffer(sTransformed.length() + 4096);\n                oPostTransform.append(sTransformed.substring(0, iCloseHead));\n                oPostTransform.append(\"\\n<script language=\\\"JavaScript\\\" src=\\\"\" + sMenuPath + \"\\\"></script>\");\n                oPostTransform.append(\"\\n<script language=\\\"JavaScript\\\" src=\\\"\" + sIntegradorPath + \"\\\"></script>\\n\");\n                oPostTransform.append(sTransformed.substring(iCloseHead, iCloseHead + 7));\n                oPostTransform.append(sTransformed.substring(iOpenBody, iCloseBody));\n                try {\n                    sCharBuffer = oFS.readfilestr(sCtrlPath, \"UTF-8\");\n                    if (DebugFile.trace) DebugFile.writeln(String.valueOf(sCharBuffer.length()) + \" characters readed\");\n                } catch (com.enterprisedt.net.ftp.FTPException ftpe) {\n                    throw new IOException(ftpe.getMessage());\n                }\n                try {\n                    if (DebugFile.trace) DebugFile.writeln(\"Gadgets.replace(\" + sCtrlPath + \",http://demo.hipergate.com/,\" + sWebServer + \")\");\n                    Gadgets.replace(sCharBuffer, \"http://demo.hipergate.com/\", sWebServer);\n                } catch (org.apache.oro.text.regex.MalformedPatternException e) {\n                }\n                oPostTransform.append(\"<!--Begin \" + sCtrlPath + \"-->\\n\");\n                oPostTransform.append(sCharBuffer);\n                sCharBuffer = null;\n                oPostTransform.append(\"\\n<!--End \" + sCtrlPath + \"-->\\n\");\n                oPostTransform.append(sTransformed.substring(iCloseBody));\n            } else {\n                oPostTransform = new StringBuffer(\"Page \" + ((Page) vPages.get(c)).getTitle() + \" could not be rendered.\");\n                if (oLastXcpt != null) oPostTransform.append(\"<BR>\" + oLastXcpt.getMessageAndLocation());\n            }\n            if (DebugFile.trace) DebugFile.writeln(\"new FileWriter(\" + sOutputPath + oCurrentPage.getTitle().replace(' ', '_') + \"_.\" + sMedia + \")\");\n            if (sSelPageOptions.length() == 0) oFS.writefilestr(sOutputPath + oCurrentPage.getTitle().replace(' ', '_') + \"_.\" + sMedia, oPostTransform.toString(), \"UTF-8\"); else try {\n                oFS.writefilestr(sOutputPath + oCurrentPage.getTitle().replace(' ', '_') + \"_.\" + sMedia, Gadgets.replace(oPostTransform.toString(), \":selPageOptions\", sSelPageOptions), \"UTF-8\");\n            } catch (Exception e) {\n            }\n            oPostTransform = null;\n            sTransformed = null;\n        }\n        oXMLStream.close();\n        if (DebugFile.trace) {\n            DebugFile.writeln(\"done in \" + String.valueOf(System.currentTimeMillis() - lElapsed) + \" miliseconds\");\n            DebugFile.decIdent();\n            DebugFile.writeln(\"End Pageset.buildSiteForEdit()\");\n        }\n    }\n", "label": 0, "substitutes": {"hash": ["string", "str", "tag", "transform", "render", "print", "replace", "test", "update", " digest", "to", "check", "write", "code", "dump", "message", "format", "parse", " fingerprint", "read", "sign", "hex", "sha", "hello", "Hash", "sum", " hashing"], "text": ["path", "v", "pt", "string", "log", "txt", "Text", "str", "print", "test", "t", "event", "nt", "msg", "select", "output", "aut", "url", "content", "act", "ext", "pattern", "title", "code", "config", "form", "prefix", "buffer", "ct", "message", "format", "out", "command", "q", "input", "read", "document", "name", "comment", "data", "cont", "source", "value", "password", "TEXT", "tx", "translation", "body", "now", "word"], "UnsupportedEncodingException": ["UnsupportedDecoderFailure", "UnsupportedDecodingFailure", "UnsupportedEncoderFailure", "UnsupportedEncensionException", "UnsupportedEncodingFailure", "UnsupportedEncoderException", "UnsupportedEncensionFailure", "UnsupportedEncryptionError", "UnsupportedDecoderException", "UnsupportedEncryptionException", "UnsupportedEncensionError", "UnsupportedDecodingError", "UnsupportedDecodingException", "UnsupportedEncodingError", "UnsupportedDecoderError", "UnsupportedEncryptionFailure", "UnsupportedEncoderError"], "md": ["d", "mc", "dr", "pdf", "h", "pd", "dir", "ld", "mt", "amd", "mod", "di", "sm", "red", "ad", "det", "m", "pm", "ct", "sd", "ms", "dd", "mand", "rm", "hd", "mm", "ind", "mk", "cd", "od", "bd", "add", "mn", "sha", "dm", "mg", "and", "der", "dh", "df", "mb", "cmd", "grad", "MD", " Md"], "sha1hash": ["sha2sum", "sha3hash", "shaonesum", "ha3hash", "sha3key", "ha1hex", "sha512Hash", "sha5hex", "ha3Hash", "sha11hash", "haonehash", "sha11h", "sha2hash", "ha1h", "sha1key", "haonehex", "ha2dig", "sha11dig", "ha1dig", "ha1sum", "sha1sum", "shaonehex", "ha1hash", "sha1Hash", "sha5sum", "sha3Hash", "sha2hex", "shaoneHash", "sha3sum", "sha5key", "ha2h", "sha512hash", "ha3key", "ha3sum", "ha1key", "sha11Hash", "sha512h", "ha2Hash", "shaonehash", "sha2Hash", "sha1dig", "sha5Hash", "sha1h", "sha2key", "ha1Hash", "sha2h", "sha5hash", "ha2hash", "sha512dig", "sha2dig", "sha1hex", "haoneHash", "haonesum"]}}
{"id1": "2198730", "id2": "15645004", "code1": "    public void importCSV(InputStream csvfile) throws Exception {\n        try {\n            String[] qmarks = new String[columns.length];\n            for (int i = 0; i < qmarks.length; i++) {\n                qmarks[i] = \"?\";\n            }\n            if (cleartable) {\n                String delsql = \"delete from \" + table;\n                Statement delstm = conn.createStatement();\n                delstm.executeUpdate(delsql);\n            }\n            String sql = \"insert into \" + table + \" (\" + StringUtils.join(columns, \", \") + \") values (\" + StringUtils.join(qmarks, \", \") + \")\";\n            log.debug(\"SQL: \" + sql);\n            PreparedStatement stm = conn.prepareStatement(sql);\n            int datatypes[] = new int[columns.length];\n            for (int i = 0; i < columns.length; i++) {\n                Table tbl = project.getTableByName(table);\n                if (tbl == null) throw new OntopiaRuntimeException(\"Unknown table: \" + table);\n                Column col = tbl.getColumnByName(columns[i]);\n                if (col == null) throw new OntopiaRuntimeException(\"Unknown table column: \" + columns[i]);\n                if (col.getType() == null) throw new OntopiaRuntimeException(\"Column type is null: \" + col.getType());\n                DataType datatype = project.getDataTypeByName(col.getType(), \"generic\");\n                if (datatype == null) throw new OntopiaRuntimeException(\"Unknown column type: \" + col.getType());\n                String dtype = datatype.getType();\n                if (\"varchar\".equals(dtype)) datatypes[i] = Types.VARCHAR; else if (\"integer\".equals(dtype)) datatypes[i] = Types.INTEGER; else throw new OntopiaRuntimeException(\"Unknown datatype: \" + dtype);\n            }\n            LineNumberReader reader = new LineNumberReader(new InputStreamReader(csvfile));\n            for (int i = 0; i < ignorelines; i++) {\n                String line = reader.readLine();\n                if (line == null) break;\n            }\n            log.debug(\"[\" + StringUtils.join(columns, \", \") + \"]\");\n            int lineno = 0;\n            while (true) {\n                lineno++;\n                String line = reader.readLine();\n                if (line == null) break;\n                try {\n                    String[] cols = StringUtils.split(line, separator);\n                    if (cols.length > columns.length && !ignorecolumns) log.debug(\"Ignoring columns: \" + (columns.length + 1) + \"-\" + cols.length + \" '\" + line + \"'\");\n                    log.debug(\"CVALUES: \" + (columns.length + 1) + \"-\" + cols.length + \" '\" + line + \"'\");\n                    String dmesg = \"(\";\n                    for (int i = 0; i < columns.length; i++) {\n                        String col = cols[i];\n                        if (stripquotes) {\n                            int len = col.length();\n                            if (len > 1 && ((col.charAt(0) == '\"' && col.charAt(len - 1) == '\"') || (col.charAt(0) == '\\'' && col.charAt(len - 1) == '\\''))) col = col.substring(1, len - 1);\n                        }\n                        if (col != null && col.equals(\"\")) col = null;\n                        dmesg = dmesg + col;\n                        if (i < columns.length - 1) dmesg = dmesg + \", \";\n                        stm.setObject(i + 1, col, datatypes[i]);\n                    }\n                    dmesg = dmesg + \")\";\n                    log.debug(dmesg);\n                    stm.execute();\n                } catch (Exception e) {\n                    conn.rollback();\n                    throw new OntopiaRuntimeException(\"Cannot read line \" + lineno + \": '\" + line + \"'\", e);\n                }\n            }\n            conn.commit();\n        } finally {\n            if (conn != null) conn.close();\n        }\n    }\n", "code2": "    private void unzip(File filename) throws ZipException, IOException {\n        ZipInputStream in = new ZipInputStream(new BufferedInputStream(new FileInputStream(filename)));\n        ZipEntry entry = null;\n        boolean first_entry = true;\n        while ((entry = in.getNextEntry()) != null) {\n            if (first_entry) {\n                if (!entry.isDirectory()) {\n                    File subdir = new File(dir + File.separator + filename.getName().substring(0, filename.getName().length() - SUFFIX_ZIP.length()));\n                    if (!subdir.exists()) {\n                        subdir.mkdir();\n                        dir = subdir;\n                    }\n                }\n                first_entry = false;\n            }\n            if (entry.isDirectory()) {\n                FileUtils.forceMkdir(new File(dir + File.separator + entry.getName()));\n            } else {\n                File outfile = new File(dir + File.separator + entry.getName());\n                File outdir = new File(outfile.getAbsolutePath().substring(0, outfile.getAbsolutePath().length() - outfile.getName().length()));\n                if (!outdir.exists()) FileUtils.forceMkdir(outdir);\n                FileOutputStream fo = new FileOutputStream(outfile);\n                BufferedOutputStream bos = new BufferedOutputStream(fo, BUFFER);\n                int read;\n                byte data[] = new byte[BUFFER];\n                while ((read = in.read(data, 0, BUFFER)) != -1) {\n                    read_position++;\n                    bos.write(data, 0, read);\n                }\n                bos.flush();\n                bos.close();\n            }\n        }\n        in.close();\n    }\n", "label": 0, "substitutes": {"importCSV": ["importDSS", "importDSDF", " importESS", " importDSV", " importDSS", " importESDF", " importDSVD", " importWSV", "importCSS", " importESVD", "importCSDF", " importESV", "importDSV", " importWSDF", " importWSS", " importWSVD", " importCSS", " importCSVD", "importDSVD", "importCSVD", " importDSDF", " importCSDF"], "csvfile": ["xmlFile", "txtfile", "svFILE", "xmlfile", "xmlstream", "httpsFile", "csvstream", "cssfile", "csvresource", "csvfiles", "csvFILE", "svFile", "cssFile", "httpsstream", "svfiles", "cssfiles", "svstream", "csvFile", "svfile", "txtresource", "svresource", "txtfiles", "httpsFILE", "cssresource", "txtFile", "httpsfile", "xmlFILE"], "qmarks": ["qualgrades", "Qarks", "qualparams", "qualarks", "dqmarked", "qugrades", "Qgrades", "qparams", "sqmark", "qgrades", "dqmarks", "qmark", "qualmark", " qgrades", " qparams", " qarks", " qmarked", "sqmarked", "Qmarks", " qmark", "qualmarked", "qumarked", "Qmarked", "sqmarks", "quarks", "qmarked", "dqmark", "qumark", "qualmarks", "dqparams", "qumarks", "sqarks", "qarks"], "i": ["I", "iq", "jj", "point", "print", "t", "e", "ini", "cgi", "iy", "ci", "m", "f", "gu", "exp", "name", "qi", "list", "ix", "json", "ui", "iii", "y", "err", "v", "zi", "h", "ic", "p", "gi", "io", "ion", "z", "in", "you", "phi", "oi", "ri", "mi", "ex", "iu", "ice", "status", "cli", "ims", "o", "iter", "set", "series", "lo", "major", "me", "chain", "ip", "ti", "batch", "li", "id", "is", "history", "ity", "si", "to", "n", "pi", "multi", "init", "ind", "ei", "ij", "x", "im", "ai", "sim", "l", "it", "bi", "hi", "ami", "ji", "b", "di", "ki", "ii", "j", "span", "go", "index", "inx", "uri", "q", "xi", "ie", "u", "g", "info"], "delsql": ["delsQL", "delssql", "diffssql", "dlesq", "delesql", "delessql", "deltfx", "dlesql", "diffsq", "dlesQL", "dletesql", "deelsdl", "delsdl", "deelsQL", "delesQL", "diffsql", "diffsQL", "deelsql", "deletesfx", "delsq", "deletesdl", "deltq", "delesq", "dyssql", "deletesql", "dysfx", "deelssql", "delsfx", "deltql", "deltdl", "dletesdl", "deelsfx", "dysdl", "deletessql", "dlessql", "deltsql", "dletesfx", "deltQL", "dletessql", "deelsq", "dysql"], "delstm": [" delStmt", "delStem", "delestem", " delstr", " delstem", "delstrtm", "DelSttm", "delctem", "delstr", "Delstm", " delStr", " delstmt", "DelStem", "delsttm", "delSttm", "delStm", "delstmt", "delStn", "Delstem", " delStm", "delstrm", "delestn", "delstrem", "delesttm", "delctm", " delStem", "delstrn", "Delsttm", "DelStn", "delStmt", "delctmt", "DelStm", "delstn", "delstem", "delctr", "delStr", "Delstn", "delestm"], "sql": ["sl", "js", "sq", "seed", "scl", "description", "string", "log", "orm", "nl", "ls", "select", "repl", "inv", "url", "shell", "dl", "query", "zip", "statement", "ssl", "html", "quote", "SQL", "security", "sf", "rel", "expression", "form", "sd", "su", "sb", "sp", "format", "raw", "wal", "plan", "setup", "template", "spec", "fn", "sys", "sv", "asm", "socket", "pkg", "xml", "install", "script", "login", "cmd", "json", "qs", "ql", "command"], "stm": [" stsm", "Stsm", " stam", "tham", "thmt", "thm", " stmt", "Stam", "stam", "Stmt", "thsm", "stsm", "Stm", "stmt"], "datatypes": ["datATpes", "datATools", "datatsools", "datatsypes", "datatstypes", "datAtypes", "datetypes", "datmattypes", " datatopes", "datamatypes", " datattypes", " datatpes", " datAType", " datATools", "dataatypes", "datetype", "datatopes", "datamattypes", "datattypes", "datATtypes", "dataattypes", "datamativities", "dataativities", "datmatype", "datatools", "datmativities", "datAType", " datatools", " datATypes", "datmatools", "datATopes", "datmatypes", "datetpes", " datATpes", " datATtypes", "datAtpes", "datamatype", "datatpes", "datatsype", "dataatype", " datATopes", "datativities", "datetopes", "datATypes", "datATivities", "datAtype", "datAtopes"], "tbl": [" tamb", "rtll", " tbf", "wtba", "Torg", "tbf", "rtpl", "tbody", "Tll", "ptll", "tll", "wtbl", "ctpl", "tpl", "torg", "Ttable", "rttable", "atbody", "ctba", "rtbl", "Tba", "atbl", "ctorg", "dbl", "dbf", " tbody", "damb", "wtorg", "ptpl", "ttable", "dbody", "atbf", "tamb", "tba", "Tbl", "atamb", "ctbl", "wtpl", "pttable", "ptbl", "Tpl"], "col": ["local", "cur", "cell", "fl", "serv", "Column", "fc", "pt", "var", "cat", "crit", "char", "conv", "num", "row", "cop", "ol", "ctrl", "mon", "Col", "comm", "COL", "cp", "c", "act", "ll", "chron", "crypt", "cf", "def", "ct", "cl", "loc", "column", "rol", "dc", "tab", "cor", "cont", "el", "coll", "pos", "cmd", "cond", "cal", "prop", "co", "con"], "datatype": [" datmatype", "datmatyp", "datAtypes", "datATime", "donatype", "datamatypes", "dataatypes", " datmatrace", "datcatrace", "datcatyp", "doncatyp", "datamatyp", "datatime", " datmatime", "datAtime", " datmatypes", "datamatime", "datmatype", "datmatrace", "datATyp", "dataatime", " datatime", "datAType", "datmatypes", "datcatypes", "dataatyp", "doncatty", " datatrace", "datantime", "datATty", "donatyp", "datamatype", "datantypes", "donatypes", "doncatypes", "datatrace", "doncatype", "datantrace", "dataatype", "datAtyp", "datmatty", "datatty", "donatty", "datantype", "datatyp", "datcatime", "datcatty", "datmatime", "datATypes", "datAtype", "datcatype"], "dtype": ["dtest", " dType", "dattry", " dvalid", "dcolor", "dattype", "ctry", "dbvalid", "Dfield", "datstyle", " dword", "dbType", "datword", "domtype", "ctype", "dltest", "djword", "dType", "djtype", "Dtype", "datmt", "dvalid", "duffy", "dlcolor", "domstyle", "ctest", "djuffy", " dfield", "datype", "dtry", "dattest", "dbfield", "Dvalid", " dype", "dstyle", " dstyle", "dword", "dltry", "dbtype", " dmt", "dype", "datuffy", "domuffy", "ccolor", "dltype", "dfield", "djmt", " duffy", "DType", "domype", "datcolor", "dmt"], "reader": ["file", "wrapper", "rx", "loader", "ner", "row", "Reader", "r", "rs", "inner", "instance", "builder", "runner", "iterator", "iter", "buffer", "writer", "input", "parser", "read", "data", "driver", "df", "proc", "er", "stream", "handler"], "line": ["ln", "item", "cell", "lock", "field", "mark", "inline", "char", "row", "record", "section", "block", "label", "link", "page", "lin", "message", "column", "lines", "ine", "key", "header", "el", "Line", "l", "LINE", "next", "entry"]}}
{"id1": "3558512", "id2": "2808955", "code1": "    public void serialize(OutputStream out) throws IOException, BadIMSCPException {\n        ensureParsed();\n        ZipFilePackageParser parser = utils.getIMSCPParserFactory().createParser();\n        parser.setContentPackage(cp);\n        if (on_disk != null) on_disk.delete();\n        on_disk = createTemporaryFile();\n        parser.serialize(on_disk);\n        InputStream in = new FileInputStream(on_disk);\n        IOUtils.copy(in, out);\n    }\n", "code2": "    @Override\n    public EntrySet read(EntrySet set) throws ReadFailedException {\n        if (!SourceCache.contains(url)) {\n            SSL.certify(url);\n            try {\n                super.setParser(Parser.detectParser(url.openStream()));\n                final PipedInputStream in = new PipedInputStream();\n                final PipedOutputStream forParser = new PipedOutputStream(in);\n                new Thread(new Runnable() {\n\n                    public void run() {\n                        try {\n                            OutputStream out = SourceCache.startCaching(url);\n                            InputStream is = url.openStream();\n                            byte[] buffer = new byte[100000];\n                            while (true) {\n                                int amountRead = is.read(buffer);\n                                if (amountRead == -1) {\n                                    break;\n                                }\n                                forParser.write(buffer, 0, amountRead);\n                                out.write(buffer, 0, amountRead);\n                            }\n                            forParser.close();\n                            out.close();\n                            SourceCache.finish(url);\n                        } catch (IOException e) {\n                            e.printStackTrace();\n                        }\n                    }\n                }).start();\n                super.setIos(in);\n            } catch (Exception e) {\n                throw new ReadFailedException(e);\n            }\n            return super.read(set);\n        } else {\n            try {\n                return SourceCache.get(url).read(set);\n            } catch (IOException e) {\n                throw new ReadFailedException(e);\n            }\n        }\n    }\n", "label": 0, "substitutes": {"serialize": [" serialized", "serializer", "initialize", "Serialize", "Serialized", " serializer", "initialized", "serialization", "erializer", " serialate", "erialize", "initialze", "serialze", "serialate", "finalize", "erialized", "finalized", "serialized", "finalization", "initialization", "Serialate", "Serialization", "finalze", "Serializer", "erialate", "Serialze"], "out": ["d", "err", "v", "serv", "log", "file", "p", "OU", "sw", "io", "b", "t", "up", "aos", "output", "c", "to", "n", "i", "a", "res", "f", "o", "result", "ch", "OUT", "report", " OUT", "Out", "sum", "it", "pool", "ou", "outs", "stream", "os", "w"], "parser": ["tar", "layer", "asser", "file", "lp", "p", "tp", "magic", "ger", "part", "per", "processor", "loader", "style", "manager", "reader", "walker", "worker", "instance", "inner", "ler", "ker", "builder", "language", "base", "job", "jack", "format", "arser", "parse", "writer", "plan", "tree", "util", "bank", "aser", "rer", "password", "pkg", "Parser", "xml", "peer", "token", "proc", "er", "handler", "policy", "now", "command"], "on_disk": [" on_dis", " on_download", "on_dis", " on_disc", "On_cloud", "On2Disk", "on_file", "on_link", "on_download", " on_Disk", "On_link", "On_Disk", "On2file", "on2Disk", " on_volume", " on_file", "On_file", "on_disc", "On2disk", "On2link", "on2file", "on2disk", "On_disk", "on_Disk", "on2link", "on_cloud", "on_volume"], "in": ["en", "id", "sin", "io", "is", "inf", "cin", "from", "mi", " IN", "r", "IN", "inc", "i", "inner", "ad", "inside", "on", " din", "din", "vin", "input", "isin", "ind", "min", "gin", "In", "and", "ins", "rin", "it", "bin", "body", "ain", "inn"]}}
{"id1": "11049257", "id2": "8625346", "code1": "    public static String generate(boolean secure, boolean sep) throws UnknownHostException {\n        MessageDigest messagedigest;\n        StringBuilder stringbuffer = new StringBuilder();\n        try {\n            messagedigest = MessageDigest.getInstance(\"MD5\");\n        } catch (NoSuchAlgorithmException nosuchalgorithmexception) {\n            throw new RuntimeException(nosuchalgorithmexception);\n        }\n        StringBuffer stringbuffer2;\n        InetAddress inetaddress = InetAddress.getLocalHost();\n        long l = System.currentTimeMillis();\n        long l1 = 0L;\n        if (secure) l1 = _secureRand.nextLong(); else l1 = _rand.nextLong();\n        stringbuffer.append(inetaddress.toString());\n        stringbuffer.append(\":\");\n        stringbuffer.append(Long.toString(l));\n        stringbuffer.append(\":\");\n        stringbuffer.append(Long.toString(l1));\n        messagedigest.update(stringbuffer.toString().getBytes());\n        byte abyte0[] = messagedigest.digest();\n        StringBuffer stringbuffer1 = new StringBuffer();\n        for (int i = 0; i < abyte0.length; i++) {\n            int j = abyte0[i] & 0xff;\n            if (j < 16) stringbuffer1.append('0');\n            stringbuffer1.append(Integer.toHexString(j));\n        }\n        String s = stringbuffer1.toString();\n        stringbuffer2 = new StringBuffer();\n        if (sep) {\n            stringbuffer2.append(s.substring(0, 8));\n            stringbuffer2.append(\"-\");\n            stringbuffer2.append(s.substring(8, 12));\n            stringbuffer2.append(\"-\");\n            stringbuffer2.append(s.substring(12, 16));\n            stringbuffer2.append(\"-\");\n            stringbuffer2.append(s.substring(16, 20));\n            stringbuffer2.append(\"-\");\n            stringbuffer2.append(s.substring(20));\n            return stringbuffer2.toString();\n        } else {\n            return s;\n        }\n    }\n", "code2": "    public static boolean encodeFileToFile(String infile, String outfile) {\n        boolean success = false;\n        java.io.InputStream in = null;\n        java.io.OutputStream out = null;\n        try {\n            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);\n            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n            byte[] buffer = new byte[65536];\n            int read = -1;\n            while ((read = in.read(buffer)) >= 0) {\n                out.write(buffer, 0, read);\n            }\n            success = true;\n        } catch (java.io.IOException exc) {\n            exc.printStackTrace();\n        } finally {\n            try {\n                in.close();\n            } catch (Exception exc) {\n            }\n            try {\n                out.close();\n            } catch (Exception exc) {\n            }\n        }\n        return success;\n    }\n", "label": 0, "substitutes": {"generate": ["validate", "validator", " Generate", " obfuscates", " obfuscator", " Generize", " obfuscize", "validize", "validates", "generates", "generize", " obfuscate", " Generates", " Generator", "generator"], "secure": ["sec", " securely", "sr", "secret", "force", "nice", "debug", "stable", " Secure", "ls", "control", "Secure", "strong", "safe", "query", "trust", "status", "https", "ssl", "close", "confirmed", "crypt", "security", "server", "prime", "encrypted", "sp", "quiet", "active", "conn", "ie", "protect", "client", " insecure", "sys", "domain", "sync"], "sep": ["keq", " seep", "peq", " elepc", " elep", "SEq", "sepa", "keps", "kepa", "seep", " elepa", "SEps", " eleep", "kep", "seq", "sepc", "asep", "asepc", "peps", "pepa", " sepc", "SEpa", "seps", " sepa", "asepa", "pep", "aseep", "SEp"], "messagedigest": ["messagedisset", "messagegist", "messageddiger", "messageddigener", "messagingigester", "messributedigment", "messagedegener", "messagedegist", "messagedeger", "messagedegest", "messagediget", "messagediffest", "messagigest", "messributedegest", "messagediffist", "messagedigoest", "messagediffer", "messageriger", "messageregener", "messributedigester", "messagerigest", "messagingegest", "messagegest", "messagingeger", "messagedigerer", "messagedigergest", "messagedagest", "messributedeget", "messagediffener", "messageger", "messagingigest", "messagediger", "messagedigerester", "messagedigist", "messributedigest", "messagingiger", "messagedequer", "messagedequener", "messributedegester", "messagedequest", "messagedigener", "messagedegment", "messagedequment", "messagerigener", "messagingeggest", "messageddigest", "messagedissester", "messagedaggest", "messributedegment", "messagedigoer", "messagedigment", "messagedegester", "messagedeget", "messagedigoment", "messagigener", "messagedissest", "messagedeggest", "messagediggest", "messagedigerest", "messributediget", "messagigist", "messagedager", "messagedagester", "messagegener", "messagedigoener", "messageregment", "messagedigoester", "messagerigment", "messageregest", "messagereger", "messagingiggest", "messagingegester", "messagedissment", "messagiger", "messageddigist", "messagedigoet", "messagedigester"], "stringbuffer": ["bufferserver", "stringattribute", "joinattribute", " stringbuilder", "stringpage", "commenttemplate", " stringdocument", "soundtable", "librarybuffer", " stringloader", "buffertemplate", "resourcedocument", "chainbuffer", "ringcommand", "stringBuffer", "commentbuffer", "Stringsequence", "stringserver", "ringqueue", "ringbuffer", "commentdocument", "bufferdatabase", "bufferqueue", "stringappend", "chainqueue", "bufferattribute", "Stringbuffer", "librarytable", "stringservice", " stringattribute", "sequencestyle", "buffercommand", "bufferbuilder", " stringdatabase", "joinpage", "joinbuilder", " stringtable", "stringtemplate", " stringBuffer", " stringappend", "chaintemplate", "soundvector", "chaincommand", "ringBuffer", "stringbuff", " stringbuff", "ringservice", " stringsequence", "ringtemplate", "stringsequence", " stringtemplate", " stringservice", " stringvector", "stringcommand", "stringqueue", "soundbuffer", "bufferloader", "sequencedatabase", "sequencebuffer", "stringstyle", "stringloader", "stringvector", "joinloader", "stringdatabase", "resourcetemplate", "Stringservice", "libraryvector", "librarytemplate", " stringserver", "ringpage", "joinappend", "ringappend", "ringattribute", "sequenceserver", "stringtable", "resourcebuffer", "joinbuffer", "resourcebuff", "stringdocument", "bufferstyle", " stringstyle", "commentbuff", " stringpage", "bufferbuffer", "ringsequence", "stringbuilder", "soundtemplate"], "stringbuffer2": [" stringmodel6", "numberbuffer5", "stringbuffer3", "stringblock1", "numberqueue2", "stringBuffer02", "stringbuf1", "stringbuffer52", "stringvector9", "sequencebuffer5", "stringdocument2", "stringrequest102", "statusbuffer102", "relationbuffer2", "stringbatch5", "relationbuffer32", " stringbuffer14", "stringdirectory22", "stringcomment2", " stringmodel4", "numberbuff2", "stringflake32", "stringbuf2", "relationfilter32", "stringwindow9", "stringbuff2", "stringconst4", " stringmodel2", "stringqueueTwo", "listbufferTwo", "stringmodel32", "stringbuff52", "stringlevel14", " stringbatch14", "storeference2", " stringblock4", "stringvector2", "stringdocument6", "numberbuffer2", "sequencebuffer2", "statusbatch2", "stringrecord02", " stringblock1", "stringprofile32", "stringbuffer14", " stringbuffer32", "stringdirectory9", "stringbutton102", "stringbutton52", "listbuffer4", "stringbatch102", "listbuff2", "stringBuffer1", "stringdirectory2", "listbuff15", "storebuffer102", "stringmodel4", "stringcomment32", "stringbuffer22", " stringwindow9", "listcacheTwo", "stringbuffer182", "stringcell\t", "stringference14", "stringbufTwo", "stringBuffer22", "relationfilter2", "stringcell2", "stringrecord1", "stringdocument4", "stringrecord4", "stringdirectory4", "stringlevel102", "sequencebuff4", "stringbuffer02", " stringbuffer6", "stringbuffer15", "numberbuffer02", "stringprofileTwo", "stringbatch52", "statusbuffer\t", "stringdocument14", "stringcell52", "sequencebuff5", "stringbatch14", "stringbuffer9", "storeference102", "numberqueueTwo", "stringference52", "stringwindow182", "stringdirectory32", "stringqueue1", "stringmodel2", "stringbutton2", "stringcache6", " stringbatch6", "stringqueue2", "stringbuffer5", "stringbuf02", "stringcomment5", "stringbuff32", "stringfilter22", "stringcache5", "numberqueue1", "stringBuffer3", "numberqueue02", "stringblock02", "statusbatch\t", "stringfilter32", "stringcacheTwo", "stringbuffer32", "stringbuffer6", "stringBuffer2", "stringBuffer4", "stringbuff6", " stringblock02", "numberbufferTwo", "storeference14", "statusbuffer52", "relationfilter22", "stringbuff15", "listcache32", "storebuffer2", "stringrecord2", "stringbuff4", "stringrequest14", " stringbatch4", "listbuffer15", "listbuff52", "listbuff4", "listbuffer52", "stringrequest52", "stringdirectory182", " stringbuffer02", "stringdirectory15", "stringbuffer4", "stringdirectory3", "stringcache2", " stringmodel32", "stringwindow2", "stringcache4", "numberbuffer32", "stringbuff5", "stringblock2", " stringwindow2", "stringmodel6", "stringbatch4", "stringrequest2", "statusbatch52", "relationbuffer22", "stringqueue02", "stringbuffer102", "stringvector4", " stringbuffer4", "stringbatch2", "listbuffer2", "stringflake5", "storebuffer14", " stringbuffer182", "stringfilter3", "sequencebuff2", "stringlevel2", " stringbuffer9", "listcache4", "storebuffer52", "stringference102", " stringwindow32", " stringbatch2", "stringvector32", " stringblock2", " stringwindow182", "stringblock4", "stringvector52", "storeference52", "stringconst2", "stringdirectory52", "stringbatch6", "listcache2", "stringlevel52", "stringBuffer32", "listbuffer32", "stringflake2", "stringcell102", "relationbuffer3", "stringcache32", "relationfilter3", "stringbatch\t", "statusbatch102", "stringprofile4", "sequencebuffer4", "stringprofile2", "numberbuff32", "stringbuff14", "stringfilter2", "stringBufferTwo", "statusbuffer2", "stringvector182", "stringconst32", "stringconstTwo", "stringference2", "stringvector15", "stringwindow32", "numberbuff5", "numberbuffer1", "stringbutton\t", "stringbufferTwo"], "inetaddress": ["ptonattribute", "bitcoinaddress", "inetattribute", "inetAddress", "ixchannel", "bitcoinbuffer", "ptonbuffer", "inetbuffer", "ixaddress", "socketaddr", "bitcoinattribute", "socketAddress", "etchannel", "jsonmedia", "ixAddress", "inetaddr", "jsonbuffer", "ixaddr", "ptonaddress", "ptonmedia", "etaddress", "socketchannel", "socketaddress", "etAddress", "jsonaddress", "etaddr", "jsonattribute", "inetmedia", "inetchannel", "bitcoinmedia"], "l": ["local", "ln", "d", "lp", "lang", "li", "ld", "p", "nl", "b", "t", "z", "ls", "tl", "L", "left", "lc", "r", "len", "dl", "n", "ll", "lt", "m", "loc", "u", "x", "le", "el", "g", "lit", "locking"], "l1": ["fl1", " l2", "lOne", "lc1", " lau", "l11", "l2", "lang11", "li2", "llau", "lock001", "lock1", "lf001", "L1", "lav", "lfasso", "lasso", "lcau", "ll0", " LOne", "lf1", "L0", "l001", "li1", "li11", " lav", "flasso", "lcav", "lock01", "lf01", "lang1", "L11", "li0", "l01", "l0", "fl01", " L2", " l11", " l0", "ll1", " lOne", "fl001", " L11", "lau", " L1", "L2", "langOne", "lang2", "lockasso", "llav", "lc0"], "abyte0": ["there6", "byte0", "binaryee", " bite000", "byte1", "abyte9", "abyte19", "slice5", "byte6", "there9", " bite0", "binary0", "abyte1", "abyte6", "gment000", " bite160", "byte5", "abyte5", "ano1", "there0", "gment0", "bone0", "abyteee", "slice0", "bone19", "there1", "sliceee", " bite19", "binary5", "abyte160", "ano6", "bone160", "gment160", "byte9", "ano9", "byteee", "gment19", "ano0", "bone000", "abyte000"], "stringbuffer1": ["stringblock1", "stringbuffer3", "stringblock3", "Stringbuffer2", "Stringbuffer1", "stringbatch2", "sqlbank01", "stringbatch3", "stringbuf1", "stringBuffer1", "StringBuffer1", "stringBuffer01", "stringBuffer3", "stringbatch01", "StringBuffer01", "StringbufferOne", "resourcebuffer01", " stringcache1", "stringcache8", "stringbank01", "stringcache01", "stringbufferOne", "sqlbank2", "stringbuffer8", "stringcache1", "Stringbuffer01", "stringBuffer2", "stringbuff1", "StringBufferOne", "resourcebuffer1", "stringbank1", " stringbuffer8", " stringbuffer3", "StringBuffer2", "sqlbuffer2", "stringbuff2", "resourcebuffer2", "stringbankOne", "stringbank2", "sqlbank3", "stringbatch1", "stringbatchOne", "stringbuffer01", "stringbuff01", "stringbuf8", "resourcecache2", "resourcebuffer3", "stringbank3", "sqlbuffer3", "sqlbuffer1", "stringbuff3", "sqlbuffer01", "resourcecache01", "resourcecache1", "stringbuf3", " stringcache8", "sqlbank1", " stringcache3", "stringcache2", "stringBufferOne", "resourcecache3", "stringblock8", "stringcache3"], "i": ["ti", "v", "ji", "I", "zi", "ic", "iq", "li", "id", "io", "gi", "print", "is", "di", "ki", "ii", "in", "\u0438", "phi", "ri", "mi", "si", "ini", "pi", "ci", "m", "cli", "uri", "o", "multi", "q", "init", "xi", "ie", "ind", "u", "ij", "x", "qi", "im", "me", "chain", "ai", "ix", "ip", "it", "us", "bi", "ui", "info", "json", "ami", "y", "PI"], "j": ["js", "ji", "v", "p", "dj", "jj", "aj", "b", "k", "J", "obj", "z", "ja", "nm", "n", "kj", "m", "o", "oj", "job", "note", "br", "jump", "q", "jit", "ind", "jc", "ij", "x", "uj", "jl", "ix", "json", "bi", "g", "bj", "it", "y", "jp"], "s": ["js", "sq", "v", "sample", "h", "string", "p", "abs", "str", "ats", "ings", "b", "is", "t", "e", "S", "ls", "hs", "comm", "gs", "r", "rs", "c", "ts", "n", "bits", "stats", "cs", "m", "ims", "als", "f", "fs", "ns", "ps", "es", "ches", "ms", "sb", "bs", "parts", "sql", "erences", "its", "ashes", "ds", "sys", "sts", "sv", "ends", "details", "less", "ss", "qs", "y"]}}
{"id1": "11032546", "id2": "8150996", "code1": "    @Test\n    public void testCopyUnknownSize() throws IOException {\n        final InputStream in = new ByteArrayInputStream(TEST_DATA);\n        final ByteArrayOutputStream out = new ByteArrayOutputStream(TEST_DATA.length);\n        final int cpySize = ExtraIOUtils.copy(in, out, (-1));\n        assertEquals(\"Mismatched copy size\", TEST_DATA.length, cpySize);\n        final byte[] outArray = out.toByteArray();\n        assertArrayEquals(\"Mismatched data\", TEST_DATA, outArray);\n    }\n", "code2": "    private static boolean copyFile(File in, File out) {\n        boolean ok = true;\n        InputStream is = null;\n        OutputStream os = null;\n        try {\n            is = new FileInputStream(in);\n            os = new FileOutputStream(out);\n            byte[] buffer = new byte[0xFFFF];\n            for (int len; (len = is.read(buffer)) != -1; ) os.write(buffer, 0, len);\n        } catch (IOException e) {\n            System.err.println(e);\n            ok = false;\n        } finally {\n            if (is != null) {\n                try {\n                    is.close();\n                } catch (IOException e) {\n                    System.err.println(e);\n                }\n            }\n            if (os != null) {\n                try {\n                    os.close();\n                } catch (IOException e) {\n                    System.err.println(e);\n                }\n            }\n        }\n        return ok;\n    }\n", "label": 1, "substitutes": {"testCopyUnknownSize": [" testCopyDifferentsize", " testCopyUnknownsize", " testCopyunknownSize", " testcopyKnownSize", " testCopyUnknownLength", " testCopyKnownsize", " testCopyDifferentSize", " testcopyUnknownsize", " testCopyunknownShape", " testcopyUnknownShape", " testCopyunknownsize", " testCopyKnownSize", " testcopyUnknownSize", " testCopyunknownLength", " testCopyDifferentShape", " testcopyUnknownLength", " testCopyKnownLength", " testcopyKnownShape", " testCopyDifferentLength", " testCopyUnknownShape", " testcopyKnownsize", " testcopyKnownLength", " testCopyKnownShape"], "in": ["log", "file", "en", "sin", "is", "inf", "up", "al", "cin", "from", "copy", "inv", "r", "null", "IN", "i", "inner", "inside", "on", "din", "isin", "mm", "input", "ind", "gin", "data", "In", "source", "ins", "rin", "l", "it", "bin", "ain", "con", "inn"], "out": ["err", "at", "log", "OU", " Out", "by", "io", "b", "t", "obj", "up", "aos", "output", "inv", "null", "to", "ex", "check", "n", "a", "res", "auto", "gt", "on", "o", "net", "result", "end", "user", "all", "gr", "client", "con", "data", "OUT", "one", " OUT", "or", "Out", "list", "sum", "it", "cmd", "ou", "outs", "co", "os"], "cpySize": ["CpyCount", "cplysize", "Cpysize", "cpeCount", "cfisize", " cpyCount", "cdyLength", "cfiSize", "cpyCount", "cdysize", " cpyLength", "cpysize", "cfiLength", "cpesize", "CplySize", "Cplysize", "CplyLength", " cplysize", "cplySize", "cplyCount", " cplySize", "cpeSize", "CpyLength", " cplyCount", "cdyCount", " cplyLength", "CpySize", "cdySize", " cpysize", "cpyLength", "CplyCount", "cpeLength", "cfiCount", "cplyLength"], "outArray": ["listArray", "OUTArray", "neObject", "inImpl", " outObject", "neStream", "outString", "outImpl", "outObject", "inString", "OUTObject", " outStream", "inArea", "outArea", "listArea", "OUTarray", "outStream", "listString", " outarray", " outImpl", "inArray", " outString", "neArray", " outArea", "listImpl", "nearray", "outarray", "OUTStream"]}}
{"id1": "19494842", "id2": "16931472", "code1": "    private void callService() {\n        try {\n            URL url = new URL(baseUrl + servicePath + attributes);\n            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n            String inputLine;\n            StringBuffer buf = new StringBuffer();\n            while ((inputLine = in.readLine()) != null) {\n                buf.append(inputLine);\n            }\n            in.close();\n            answer = buf.toString();\n        } catch (MalformedURLException e) {\n            answer = \"Malformed Url:\" + e.getMessage();\n            return;\n        } catch (IOException e) {\n            answer = \"I/O exception: \" + e.getMessage();\n            return;\n        }\n    }\n", "code2": "    public void handler(Map<String, String> result, TargetPage target) {\n        try {\n            URL url = new URL(target.getUrl());\n            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));\n            String line = null;\n            while ((line = reader.readLine()) != null) {\n                for (Map.Entry<String, String> entry : result.entrySet()) {\n                    if (line.indexOf(target.getInclude()) != -1) {\n                        int fromIndex = line.indexOf(target.getFromStr());\n                        String r = line.substring(fromIndex + target.getFromStr().length(), line.indexOf(target.getToStr(), fromIndex));\n                        entry.setValue(r);\n                        line = line.substring(line.indexOf(target.getToStr()) + target.getToStr().length());\n                    }\n                }\n            }\n            reader.close();\n        } catch (MalformedURLException e) {\n        } catch (IOException e) {\n        }\n    }\n", "label": 1, "substitutes": {"callService": ["useServices", "callQuery", " callservice", "runservice", " callQuery", "useService", "runService", "callservice", " callServices", "callServices", "runServices", "useQuery", "runQuery", "useservice"], "url": ["sl", "gl", "address", "file", "Url", "str", "nl", "resource", "channel", "char", "b", "oul", "browser", "service", "ls", "r", "dl", "ll", "pl", "ssl", "link", "uri", "base", "google", "URL", "web", "sb", "get", "ur", "conn", "client", "acl", "hl", "bel", "http", "l", "ul"], "in": ["mc", "again", "ic", "en", "io", "b", "is", "inf", "cin", "from", "ill", "conf", "reader", "r", "ri", "IN", "inc", "i", "check", "inner", " din", "on", "iter", "out", "din", "oin", "all", "input", "read", "isin", "gin", "In", "mn", "and", "el", "ins", "rin", "sum", "l", "it", "bin", "er", "con", "inn"], "inputLine": [" inputRow", "contextRow", "Inputline", "helloRow", "helloLINE", " inputline", "parseLINE", "helloFile", "InputRow", "inputFile", "inputline", "responseLINE", "parseFile", "responseLine", "inputRow", "contextLine", "inputLINE", "responseRow", "parseLine", "outputLine", "outputL", "inputL", "parseRow", "outputRow", "helloLine", "InputLINE", "outputline", "InputLine", "contextline", " inputLINE", " inputL", "responseline", " inputFile", "contextL"], "buf": ["cv", "aux", "bed", "cur", "pb", "alph", "bag", "bar", "queue", "gor", "bu", "bg", "conv", "hung", "rb", "msg", "nm", "raf", "inv", "comm", "nom", "mu", "block", "mem", "vec", "img", "area", "bh", "cf", "br", "buffer", "buff", "fam", "cap", "db", "vet", "mk", "tab", "Buff", "cam", "cb", "pkg", "uf", "ob", "cmd", "Buffer"], "answer": ["search", "send", "address", "Answer", "answered", "place", "again", "sequence", "say", "replace", "print", "channel", "remember", "question", "onse", "archive", "review", "username", "interpret", "offer", "continue", "accept", "about", "poll", "form", "result", "message", "equ", "command", "argument", "ask", "exit", "report", "value", "image", "version", "array", "response", "install", "cache", "option", "reply", "ver", "sn", "entry", "ve"]}}
{"id1": "8150996", "id2": "7499186", "code1": "    private static boolean copyFile(File in, File out) {\n        boolean ok = true;\n        InputStream is = null;\n        OutputStream os = null;\n        try {\n            is = new FileInputStream(in);\n            os = new FileOutputStream(out);\n            byte[] buffer = new byte[0xFFFF];\n            for (int len; (len = is.read(buffer)) != -1; ) os.write(buffer, 0, len);\n        } catch (IOException e) {\n            System.err.println(e);\n            ok = false;\n        } finally {\n            if (is != null) {\n                try {\n                    is.close();\n                } catch (IOException e) {\n                    System.err.println(e);\n                }\n            }\n            if (os != null) {\n                try {\n                    os.close();\n                } catch (IOException e) {\n                    System.err.println(e);\n                }\n            }\n        }\n        return ok;\n    }\n", "code2": "    private void bootKernel(String conf) {\n        try {\n            AssetManager am = getResources().getAssets();\n            InputStream is = am.open(conf + \".conf\");\n            Properties props = new Properties();\n            props.load(is);\n            is.close();\n            Log.d(\"bootKernel\", \"Listing sdcard assets...\");\n            String[] sdcardfiles = am.list(\"sdcard\");\n            for (String file : sdcardfiles) {\n                Log.d(\"bootKernel\", \"Copying sdcard asset \" + file + \".\");\n                AssetFileDescriptor afd = am.openFd(\"sdcard/\" + file);\n                FileInputStream fis = afd.createInputStream();\n                FileChannel fic = fis.getChannel();\n                FileOutputStream fos = new FileOutputStream(\"/sdcard/\" + file);\n                FileChannel foc = fos.getChannel();\n                fic.transferTo(0, fic.size(), foc);\n                fic.close();\n                foc.close();\n            }\n            Configuration gconf = new JavaPropertiesConfiguration(props);\n            Configuration bconf = gconf.subset(\"boot\");\n            String kclass_name = bconf.getString(\"kernel\");\n            Log.d(\"bootKernel\", \"Attempting to load kernel from class '\" + kclass_name + \"'...\");\n            Class<? extends Kernel> kclass = Class.forName(kclass_name).asSubclass(Kernel.class);\n            Kernel kernel = kclass.newInstance();\n            Log.d(\"bootKernel\", \"Kernel loaded, proceeding with boot...\");\n            BootContext bctx = new SimpleBootContext(gconf, AndroidBridgeService.class, AndroidBridgeServiceImpl.class);\n            kernel.boot(bctx).get();\n            Log.d(\"bootKernel\", \"Kernel boot complete.\");\n        } catch (Exception e) {\n            Log.e(\"bootKernel\", \"Unable to boot kernel due to exception.\", e);\n            finish();\n        }\n    }\n", "label": 1, "substitutes": {"copyFile": ["cpDir", " dupChannel", " copyStream", "CopyDir", "cpStream", " copyDir", "CopyFile", " dupStream", "cpFile", "CopyChannel", " dupFile", " copyChannel", " dupDir", "CopyStream", "cpChannel"], "in": ["v", "ic", "file", "en", "by", "id", "b", "old", "inf", "cin", "from", "r", "IN", "n", "i", "inc", "on", "as", "s", "din", "init", "ch", "doc", " input", "input", "isin", "vin", "ind", "gin", "source", "In", "or", "el", "ins", "rin", "l", "it", "con", "inn"], "out": ["v", "at", "p", "io", "b", "po", "t", "obj", "ot", "nt", "aos", "output", "null", "n", "ex", "to", "write", "gt", "ns", "o", "set", "net", "s", "oss", "ch", "OUT", "one", "Out", "l", "it", "ou", "outs", "can", "ne", "w"], "is": ["js", "iss", "isl", "abs", "ics", "isa", "eps", "sis", "xs", "mis", "ais", "ri", "iris", "si", "mos", "vis", "i", "ios", "are", "cs", "obs", "ims", "bis", "fs", "ils", "es", "dis", "ans", "atis", "IS", "ms", "iter", "s", "bs", "lis", "icks", "init", "its", "ois", "isin", "ie", "ind", "ris", "ains", "sys", "ns", "im", "tis", "Is", "ins", "nis", "ir", "it", "ip", "us", "isal", "isi", "isc", "ires", "iso", "ys"], "os": ["js", "ks", "cos", "oses", "bos", "oos", "oes", "vs", "des", "io", "ost", "eps", "ws", "ot", "mot", "ox", "OS", "aos", "ows", "ls", "gs", "mos", "ts", "ols", "ios", "cs", "obs", "fs", "ns", "o", "es", "ros", "ens", "ms", "osi", "bs", "oss", "los", "acs", "s", "oS", "ops", "ds", "mes", "sys", "Os", "nos", "tis", "dos", "pos", "less", "css", "outs", "ss"], "buffer": ["sample", "batch", "number", "binary", "sequence", "variable", "append", "bar", "print", "length", "event", "bridge", "stack", "phrase", "stroke", "button", "view", "word", "block", "mem", "initial", "base", "reason", "iter", "table", "message", "buff", "paste", "padding", "tree", "frame", "template", "document", "comment", "source", "memory", "pad", "window", "cache", "buf", "Buffer", "temp", "display", "command"], "len": [" length", "ln", "err", "val", "gl", "sl", "fl", "et", "elt", "en", "ld", "li", "length", "lf", "e", "t", " el", "nt", "z", "count", "num", "no", "ls", "lan", "tl", "L", "n", "ll", "fin", "rel", "seq", "end", "cap", "all", "Len", "ind", "un", "yn", "lim", "hl", " le", " l", "le", " clen", "el", "wid", "l", "coll", "pos", "del", "els", "lon", "full", "body", "size"], "ok": ["ack", "dec", " good", "clean", "ko", "k", " Ok", "ak", "ot", "up", "msg", "arc", "ook", "ol", "bo", "good", "boot", "check", "ll", "cs", "ik", "status", "OK", "valid", "md", "f", "sk", "ms", "comp", "Ok", "app", "ck", "oh", "og", "iro", "ch", "req", "u", " okay", "ku", "ready", "kok", "rc", "coll", "yes", "ocr", "it", "state", "full", "y", "oc", "par", "quick"]}}
{"id1": "494226", "id2": "15905041", "code1": "    public static void main(String[] args) throws Exception {\n        String linesep = System.getProperty(\"line.separator\");\n        FileOutputStream fos = new FileOutputStream(new File(\"lib-licenses.txt\"));\n        fos.write(new String(\"JCP contains the following libraries. Please read this for comments on copyright etc.\" + linesep + linesep).getBytes());\n        fos.write(new String(\"Chemistry Development Kit, master version as of \" + new Date().toString() + \" (http://cdk.sf.net)\" + linesep).getBytes());\n        fos.write(new String(\"Copyright 1997-2009 The CDK Development Team\" + linesep).getBytes());\n        fos.write(new String(\"License: LGPL v2 (http://www.gnu.org/licenses/old-licenses/gpl-2.0.html)\" + linesep).getBytes());\n        fos.write(new String(\"Download: https://sourceforge.net/projects/cdk/files/\" + linesep).getBytes());\n        fos.write(new String(\"Source available at: http://sourceforge.net/scm/?type=git&group_id=20024\" + linesep + linesep).getBytes());\n        File[] files = new File(args[0]).listFiles(new JarFileFilter());\n        for (int i = 0; i < files.length; i++) {\n            if (new File(files[i].getPath() + \".meta\").exists()) {\n                Map<String, Map<String, String>> metaprops = readProperties(new File(files[i].getPath() + \".meta\"));\n                Iterator<String> itsect = metaprops.keySet().iterator();\n                while (itsect.hasNext()) {\n                    String section = itsect.next();\n                    fos.write(new String(metaprops.get(section).get(\"Library\") + \" \" + metaprops.get(section).get(\"Version\") + \" (\" + metaprops.get(section).get(\"Homepage\") + \")\" + linesep).getBytes());\n                    fos.write(new String(\"Copyright \" + metaprops.get(section).get(\"Copyright\") + linesep).getBytes());\n                    fos.write(new String(\"License: \" + metaprops.get(section).get(\"License\") + \" (\" + metaprops.get(section).get(\"LicenseURL\") + \")\" + linesep).getBytes());\n                    fos.write(new String(\"Download: \" + metaprops.get(section).get(\"Download\") + linesep).getBytes());\n                    fos.write(new String(\"Source available at: \" + metaprops.get(section).get(\"SourceCode\") + linesep + linesep).getBytes());\n                }\n            }\n            if (new File(files[i].getPath() + \".extra\").exists()) {\n                fos.write(new String(\"The author says:\" + linesep).getBytes());\n                FileInputStream in = new FileInputStream(new File(files[i].getPath() + \".extra\"));\n                int len;\n                byte[] buf = new byte[1024];\n                while ((len = in.read(buf)) > 0) {\n                    fos.write(buf, 0, len);\n                }\n            }\n            fos.write(linesep.getBytes());\n        }\n        fos.close();\n    }\n", "code2": "    public void createPartControl(Composite parent) {\n        viewer = new ScrollingGraphicalViewer();\n        viewer.setRootEditPart(new ScalableRootEditPart());\n        viewer.setEditPartFactory(new BlockEditPartFactory());\n        viewer.setEditDomain(new EditDomain());\n        viewer.createControl(parent);\n        viewer.setKeyHandler(new GraphicalViewerKeyHandler(viewer));\n        ActionRegistry actionRegistry = new ActionRegistry();\n        createActions(actionRegistry);\n        ContextMenuProvider cmProvider = new BlockContextMenuProvider(viewer, actionRegistry);\n        viewer.setContextMenu(cmProvider);\n        Block b = new Block();\n        b.addChild(new ChartItem());\n        viewer.setContents(b);\n        System.err.println(\"!!! \" + viewer.getContents().getChildren().get(0));\n        viewer.select((EditPart) viewer.getContents().getChildren().get(0));\n        PaletteRoot root = new PaletteRoot();\n        PaletteGroup toolGroup = new PaletteGroup(\"Chart Tools\");\n        List toolList = new ArrayList();\n        ToolEntry tool = new SelectionToolEntry();\n        toolList.add(tool);\n        root.setDefaultEntry(tool);\n        tool = new MarqueeToolEntry();\n        toolList.add(tool);\n        toolGroup.addAll(toolList);\n        PaletteGroup templateGroup = new PaletteGroup(\"Templates\");\n        List templateList = new ArrayList();\n        CombinedTemplateCreationEntry entry = new CombinedTemplateCreationEntry(\"Rect\", \"Rect\", new ChartItem(), new SimpleFactory(ChartItem.class), ImageDescriptor.getMissingImageDescriptor(), ImageDescriptor.getMissingImageDescriptor());\n        CombinedTemplateCreationEntry entry1 = new CombinedTemplateCreationEntry(\"Line\", \"Line\", new ChartLine(), new SimpleFactory(ChartLine.class), ImageDescriptor.getMissingImageDescriptor(), ImageDescriptor.getMissingImageDescriptor());\n        templateList.add(entry);\n        templateList.add(entry1);\n        templateGroup.addAll(templateList);\n        List rootList = new ArrayList();\n        rootList.add(toolGroup);\n        rootList.add(templateGroup);\n        root.addAll(rootList);\n        final PaletteViewer v = new PaletteViewer();\n        v.setPaletteRoot(root);\n        v.createControl(parent);\n        v.addSelectionChangedListener(new ISelectionChangedListener() {\n\n            public void selectionChanged(SelectionChangedEvent event) {\n                System.err.println(\"selectionChanged \" + v.getActiveTool());\n            }\n        });\n        deleteAction.setSelectionProvider(viewer);\n        viewer.getEditDomain().setPaletteViewer(v);\n        viewer.addSelectionChangedListener(new ISelectionChangedListener() {\n\n            public void selectionChanged(SelectionChangedEvent event) {\n                System.err.println(event.getSelection());\n                deleteAction.update();\n            }\n        });\n        viewer.getEditDomain().getCommandStack().addCommandStackEventListener(new CommandStackEventListener() {\n\n            public void stackChanged(CommandStackEvent event) {\n                undoAction.setEnabled(viewer.getEditDomain().getCommandStack().canUndo());\n                redoAction.setEnabled(viewer.getEditDomain().getCommandStack().canRedo());\n            }\n        });\n    }\n", "label": 0, "substitutes": {"linesep": [" linespe", "despeg", "deseper", "linip", "lineop", "lineet", "myseper", "deseps", "linep", "inesop", " linesel", "lineset", "inespe", " lineseps", "ineset", "inesel", "lineip", "codesep", "linesop", "ineseps", "lineeps", "linepe", " linesp", "linespeg", "codeset", "linesip", "lineps", " linespeg", "mysep", "linesel", " linesip", "linespe", "desep", "codespe", "inesp", "myseps", "lineseps", "myspeg", "lineep", "codesel", " lineset", "inesep", "linesp", "lineel", "lineseper", " lineseper", "codesp", "inesip", " linesop"], "fos": ["yos", "eOS", "fortos", "fullaos", "po", " foes", "fot", "wOS", "utfess", "foS", "Fot", "wess", "waos", "utfuts", " futs", " foa", "utfoss", "pos", "hOS", " foss", "bot", "fess", "yo", "eos", "fom", " fOS", " fo", "fluts", "fulloS", " fows", "flOS", "Foses", "utfaos", "foss", "utfom", "futs", "pows", "nows", "nos", "fortoa", " fom", "flaos", "fortaos", "Fos", "yoses", "woes", "utfos", "bo", "fortoS", " faos", "yot", "naos", "floss", "Fo", "fullos", "fo", "hos", "foses", "fless", "fOS", "wos", "bos", "boses", "woss", "faos", "paos", "no", "foes", "flos", "eoes", "hoss", " fess", "fows", "haos", "fulloa", "flom", " foS", "foa", "eaos", "hoes"], "files": ["tests", "assets", "features", "balls", "objects", "books", "ids", "artifacts", "fields", "plates", "sites", "users", "roots", "jobs", " Files", "parents", "images", "states", "pages", "projects", "obs", "chains", "fixes", "bees", "fs", "workers", "ports", "ails", "models", "frames", "events", "videos", "lets", "actions", "lines", "items", "faces", "scripts", "flows", "seconds", "uploads", "Files", "rows", "iles", "classes", "checked", "archives", "thumbnails"], "i": ["ti", "ji", "I", "ic", "iq", "li", "gi", "point", "is", "di", "t", "ki", "ii", "j", "phi", "oi", "ri", "mi", "si", "index", "ini", "n", "iu", "pi", "status", "ci", "m", "cli", "uri", "multi", "init", "xi", "ei", "u", "ij", "x", "me", "im", "ai", "ix", "sim", "ip", "it", "bi", "hi", "ui", "us", "info", "y"], "metaprops": ["metapprops", "metapprogs", "metapproeps", "metapropperties", "metaprovps", "metapromPS", "metapropPS", "metaprobs", "metiproperties", "metaprovperties", "metipproeps", "metAProveps", "metaproperties", "metAProps", "metaprobps", "metapropms", "metaproPS", "metapars", "metiprops", "metapproperties", "metaproms", "metaprPS", "metAProbperties", "metippropes", "metaproveps", "metaprogs", "metaprobms", "metapros", "metapromps", "metaparperties", "metAProperties", "metaprperties", "metapargs", "metAProbps", "metAProms", "metapraps", "metipprops", "metipproperties", "metaprms", "metAProvperties", "metapropps", "metapraeps", "metipropes", "metaprobPS", "metaprovPS", "metapromperties", "metapropes", "metaprapes", "metaprobpes", "metAProeps", "metAProvps", "metAProbms", "metAProbPS", "metaprobperties", "metaprps", "metappropes", "metapromeps", "metAProvPS", "metaprobeps", "metapraperties", "metaprobgs", "metiproeps", "metAProPS", "metaparps", "metappros", "metaproeps"], "itsect": ["isection", " itlex", "icsection", "entsections", "entsection", "icsections", "tsections", "icsect", "isec", " itconnect", "tsection", "Itsection", "itsec", "tconnect", "itsections", "itsection", "Itsec", " itsections", "itlex", "Itsect", "isections", "isect", "ilex", "itsector", "entsect", "isector", " itsector", " itsection", "tsect", "iclex", "itconnect", "Itsector", " itsec", "entconnect"], "section": ["sec", "course", "system", "subject", "string", "file", "definition", "member", "Section", "parent", "tag", "pair", "component", "test", "context", "service", "row", "sections", "establishment", "sect", "filename", "network", "library", "block", "session", "label", "instance", "connection", "title", "area", "language", "server", "config", "job", "sector", "set", "page", "environment", "element", "container", "journal", "second", "name", "client", "key", "header", "group", "character", "option", "setting", "body", "entry"]}}
{"id1": "8024375", "id2": "15351863", "code1": "    private void getRandomGUID(boolean secure) {\n        MessageDigest md5 = null;\n        StringBuffer sbValueBeforeMD5 = new StringBuffer();\n        try {\n            md5 = MessageDigest.getInstance(\"MD5\");\n        } catch (NoSuchAlgorithmException e) {\n            System.out.println(\"Error: \" + e);\n        }\n        try {\n            long time = System.currentTimeMillis();\n            long rand = 0;\n            if (secure) {\n                rand = mySecureRand.nextLong();\n            } else {\n                rand = myRand.nextLong();\n            }\n            sbValueBeforeMD5.append(s_id);\n            sbValueBeforeMD5.append(\":\");\n            sbValueBeforeMD5.append(Long.toString(time));\n            sbValueBeforeMD5.append(\":\");\n            sbValueBeforeMD5.append(Long.toString(rand));\n            valueBeforeMD5 = sbValueBeforeMD5.toString();\n            md5.update(valueBeforeMD5.getBytes());\n            byte[] array = md5.digest();\n            StringBuffer sb = new StringBuffer();\n            for (int j = 0; j < array.length; ++j) {\n                int b = array[j] & 0xFF;\n                if (b < 0x10) sb.append('0');\n                sb.append(Integer.toHexString(b));\n            }\n            valueAfterMD5 = sb.toString();\n        } catch (Exception e) {\n            System.out.println(\"Error:\" + e);\n        }\n    }\n", "code2": "    public static String generate(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n        MessageDigest md;\n        md = MessageDigest.getInstance(\"SHA-1\");\n        byte[] sha1hash = new byte[40];\n        md.update(text.getBytes(\"iso-8859-1\"), 0, text.length());\n        sha1hash = md.digest();\n        return convertToHex(sha1hash);\n    }\n", "label": 1, "substitutes": {"getRandomGUID": ["getRandUuid", "getRandGuid", "getRandomUID", "getRandomUUID", "getRandomSUID", "getRandomUuid", "getRandUID", "getRandomGuid", "getRandGid", "getRandGID", "getRandomSid", "getRandUid", "getRandomCuid", "getRandUUID", "getRandomCid", "getRandomCUID", "getRandomGid", "getRandomUid", "getRandomSID", "getRandomGID", "getRandomCID", "getRandGUID", "getRandomSuid"], "secure": ["sec", " securely", "sr", "secret", "force", "nice", "dirty", "stable", " Secure", "service", "weak", "Secure", "strong", "safe", "trust", "status", "https", "ssl", "clear", "confirmed", "security", "google", "prime", "server", "encrypted", "quiet", "active", "ie", "protect", "pretty", "client", "sync", "sys", "http", "sensitive", " insecure"], "md5": ["MD2", "MD512", " md512", "md4", " mdle", "md45", "md6", "MDle", "sha3", " md3", "digle", "dig5", "MD5", "metadata3", " md2", "sha2", "sha512", "MD45", " md6", "MD3", "sha6", "md2", "dig4", "MD4", "mdle", " md45", "md512", "metadata5", "metadata2", "dig3", "sha5", " md4", "md3", "MD6", "metadata45"], "sbValueBeforeMD5": ["sbValueBeforeIM5", "sbValueAfterND2", "sbValueBeforeMD65", "sbValueBeforeMP5", "sbValueBeforeIM1", "sbValueAfterMD2", "sbValueBeforeMD1", "sbValueAfterMDson", "sbValueBeforemdFound", "sbValueBeforeDD512", "sbValueBeforeDS512", "sbValueBeforeLM2", "sbValueBeforeOLD512", "sbValueWithoutDD512", "sbValueBeforeMD512", "sbValueBeforemd5", "sbValueBeforeMT2", "sbValueBeforeDD2", "sbValueBeforeMACFive", "sbValueBeforeMOD3", "sbValueAfterMD4", "sbValueBeforeOLD2", "sbValueBeforeMP2", "sbValueBeforeAMDFound", "sbValueWithoutMD2", "sbValueWithoutMD5", "sbValueBeforemd2", "sbValueBeforeLM512", "sbValueBeforeIM2", "sbValueBeforeMD3", "sbValueAfterND5", "sbValueAfterND4", "sbValueBeforeMS5", "sbValueAfterMDLeft", "sbValueBeforeMPLeft", "sbValueBeforeND4", "sbValueBeforemdson", "sbValueAfterMD65", "sbValueBeforeMDFive", "sbValueBeforeMOD5", "sbValueWithoutDD5", "sbValueBeforeMDLeft", "sbValueBeforeMT5", "sbValueWithoutMD512", "sbValueBeforeMDFound", "sbValueBeforeMAC65", "sbValueAfterMD5", "sbValueBeforeMTson", "sbValueBeforeMT4", "sbValueBeforeAMDson", "sbValueBeforeMS3", "sbValueAfterMDFive", "sbValueBeforeMDson", "sbValueBeforeMD4", "sbValueAfterNDson", "sbValueAfterMD3", "sbValueBeforeMS1", "sbValueBeforeMS2", "sbValueBeforeND2", "sbValueBeforeMP1", "sbValueBeforeMAC5", "sbValueAfterMD1", "sbValueBeforeSM2", "sbValueBeforeMOD2", "sbValueBeforeAMD2", "sbValueBeforeSMson", "sbValueBeforeDD5", "sbValueAfterMDFound", "sbValueBeforeMAC2", "sbValueBeforeMD2", "sbValueBeforeLM5", "sbValueBeforeDDFive", "sbValueBeforeSM4", "sbValueBeforeOLD5", "sbValueWithoutDD2", "sbValueBeforeIMLeft", "sbValueBeforeDD65", "sbValueBeforeNDson", "sbValueBeforeAMD5", "sbValueBeforeSM5", "sbValueBeforeMOD1", "sbValueBeforeND5", "sbValueBeforeDS2", "sbValueBeforeDS5"], "time": ["system", "race", "when", "TIME", "id", "timer", "length", "timeout", "t", "start", "history", "current", "total", "runtime", "work", "age", "ts", "clock", "rate", "estamp", "duration", "times", "set", "counter", "date", "est", "user", "ime", "frame", "Time", "name", "tim", "today", "client", "hour", "etime", "value", "top", "ty", "year", "now", "size"], "rand": ["seed", "sample", "dr", "rid", "quant", "id", "mid", "uid", "std", "hash", "z", "nt", "did", "roll", "nd", "frac", "sid", "inv", "gz", "gen", "r", "rev", "range", "ng", "sam", "red", "rate", "res", "rank", "rh", "rss", "cr", "gt", "rot", "round", "serial", "rd", "init", "rt", "pid", "reg", "random", "rad", "dist", "and", "rc", "pick", "grad", "Rand"], "valueBeforeMD5": ["valueBeforeMD2", "valueAfterMD2", "valueAfterMD7", "valueAfterND2", "valueBeforeMC7", "valueAfterND7", "valueBeforeMOD5", "valueBeforeMT5", "valueBeforeMOD2", "valueBeforeMT2", "valueBeforeMD25", "valueBeforeMD7", "valueBeforeMC25", "valueBeforeND3", "valueBeforeND7", "valueAfterMD3", "valueBeforeMT25", "valueBeforeMOD7", "valueBeforeMC5", "valueBeforeND5", "valueAfterND5", "valueBeforeND2", "valueAfterND3", "valueBeforeMD3", "valueBeforeMOD3", "valueBeforeMT3", "valueBeforeMC2", "valueBeforeMC3"], "array": ["sample", "address", "batch", "number", "binary", "var", "pair", "ash", "angle", "length", "map", "hash", "angular", "arr", "row", "audio", "arrow", "record", "attribute", "storage", "external", "range", "a", "instance", " Array", "area", "ray", "expression", "feature", "buffer", "vector", "ary", "Array", "app", "raw", "RAY", "av", "atomic", "object", "random", "data", "our", "image", "list", "response", "rays", "share", "sh", "archive", "collection"], "sb": ["sr", "sq", "pb", "lp", "sw", "nb", "bt", "bg", "rb", "kb", "ctrl", "sg", "rob", "bb", "hs", "si", "obs", "sa", "bh", "ssl", "xb", "bis", "ib", "bps", "sf", "sth", "erb", "bs", "abb", "eb", "db", "wb", "bsp", "ub", "soc", "sv", "bf", "zb", "cb", "bp", "ob", "gc", "gb", "sh", "SB", "lb"], "j": ["js", "ji", "v", "ju", "jj", "aj", "dj", "str", "J", "k", "obj", "t", "z", "msg", "__", "ja", "_", "index", "i", "kj", "jo", "m", "je", "oj", "yy", "br", "ct", "job", "jp", "jump", "jack", "q", "jit", "ind", "jc", "ij", "att", "uj", "key", "jl", "ix", "us", "json", "g", "it", "bj", "off", "bot"], "b": ["d", "ba", "v", "bound", "bar", "nb", "bt", "bg", "be", "k", "bu", "rb", "ab", "bb", "a", "xb", "ib", "bis", "B", "fb", "br", "bs", "db", "eb", "u", "bd", "bf", "bp", "cb", "bi", "mb", "beta", "gb", "y", "bc"], "valueAfterMD5": ["valueBeforeMD2", "valueAfterMD2", "valueAfterMD7", "valueAfterID2", "valueAfterID5", "valueAfterID3", "valueBeforeMD7", "valueAftermd5", "valueAfterMD3", "valueAftermd2", "valueAfterID7", "valueBeforeMD3", "valueAftermd7", "valueAftermd3"]}}
{"id1": "884867", "id2": "22264586", "code1": "    public static void main(String[] args) {\n        if (args.length != 1) {\n            System.out.println(\"Usage: GZip source\");\n            return;\n        }\n        String zipname = args[0] + \".gz\";\n        GZIPOutputStream zipout;\n        try {\n            FileOutputStream out = new FileOutputStream(zipname);\n            zipout = new GZIPOutputStream(out);\n        } catch (IOException e) {\n            System.out.println(\"Couldn't create \" + zipname + \".\");\n            return;\n        }\n        byte[] buffer = new byte[sChunk];\n        try {\n            FileInputStream in = new FileInputStream(args[0]);\n            int length;\n            while ((length = in.read(buffer, 0, sChunk)) != -1) zipout.write(buffer, 0, length);\n            in.close();\n        } catch (IOException e) {\n            System.out.println(\"Couldn't compress \" + args[0] + \".\");\n        }\n        try {\n            zipout.close();\n        } catch (IOException e) {\n        }\n    }\n", "code2": "    private static void copyFiles(String strPath, String dstPath) throws Exception {\n        File src = new File(strPath);\n        File dest = new File(dstPath);\n        if (src.isDirectory()) {\n            dest.mkdirs();\n            String list[] = src.list();\n            for (int i = 0; i < list.length; i++) {\n                String dest1 = dest.getAbsolutePath() + \"\\\\\" + list[i];\n                String src1 = src.getAbsolutePath() + \"\\\\\" + list[i];\n                copyFiles(src1, dest1);\n            }\n        } else {\n            FileChannel sourceChannel = new FileInputStream(src).getChannel();\n            FileChannel targetChannel = new FileOutputStream(dest).getChannel();\n            sourceChannel.transferTo(0, sourceChannel.size(), targetChannel);\n            sourceChannel.close();\n            targetChannel.close();\n        }\n    }\n", "label": 1, "substitutes": {"zipname": [" zipnamed", "tarnamed", " zipName", "zebase", "archivebase", "polyname", "zipName", "archiveout", "zfilename", "ziproot", " ziproot", "tarroot", "archivename", "polyName", "downloadName", "znamed", "downloadname", "gznamed", "zipnamed", "zname", "archiveName", "tarsize", "downloadnamed", "tarname", "zipbase", "zeName", " zipsize", "zipsize", "zeout", "gzsize", "gzname", "downloadfilename", "zName", "polynamed", " zipbase", "zipfilename", "gzroot", "polyfilename", "zename"], "zipout": ["gzion", "sendin", "zipn", " zipgen", "Zipn", " zipin", "sendname", "gzin", "gzobj", "Zipout", "zname", "zipOut", "gzall", "zipgen", "zipobj", "zipclient", " zipall", "zion", "sendoutput", "zout", "gzOut", "zn", "gzgen", "zipin", "zin", "zipall", "Zipin", "sendout", " zipoutput", "gzout", " zipobj", " zipOut", "sendclient", "zipion", " zipclient", " zipion", "zobj", "Zipoutput", "zgen", "Zipname", "zall", "zOut", "zipoutput", "sendn", "Zipclient"], "out": ["by", "print", "t", "msg", "aos", "output", "conf", "gen", "auto", "on", "opt", "screen", "ch", "cfg", "all", "name", "pretty", "con", " OUT", "ac", "list", "ins", "gov", "ent", "w", "ln", "at", "p", "io", "up", " output", "ex", "o", "set", "net", "conn", "cn", "client", "sys", "one", "cmd", "can", "outs", "log", " Out", "str", "obj", " outs", " manager", "to", "n", "null", "inner", "res", "desc", "dt", "init", "writer", "OUT", " say", "Out", " abort", "ou", "cos", "en", "inf", "nt", "inv", "go", "gt", " fmt", "oss", " bout", " sys", "group", "g", "co", "os"], "buffer": ["batch", "filter", "binary", "sequence", "variable", "append", "bar", "queue", "history", "row", "stack", "phrase", "total", "attribute", "output", "button", "library", "block", "mem", "iter", "paste", "page", "message", "table", "buff", "database", "tree", "frame", "document", "template", "comment", "line", "memory", "pad", "window", "cache", "available", "buf", "Buffer", "temp", "command"], "in": ["mc", "ic", "en", "by", "is", "inf", "per", "up", "cin", "from", "reader", "ex", "IN", "inc", "query", "i", "inner", "check", "pi", "like", "ini", "on", "iter", "form", "ma", "din", "get", "init", "oin", "input", "isin", "ind", "mm", "read", "gin", "im", "In", "or", "and", "ac", "ai", "ins", "rin", "it", "bi", "info", "bin", "nin", "con", "inn"], "length": ["match", "tail", "number", "Length", "string", "sequence", "height", "amount", "angle", "point", "print", "component", "count", "join", "position", "class", "ength", "history", "needed", "no", "family", "total", "phi", "ENGTH", "len", "frequency", "library", "code", "duration", "present", "volume", "language", "padding", "vector", "loc", "message", "database", "maximum", "capacity", "read", "impl", "shift", "bow", "load", "reading", "value", "distance", "shape", "version", "hello", "depth", "character", "available", "type", "full", "space", "integer", "display", "collection", "size"]}}
{"id1": "3330775", "id2": "19206412", "code1": "    public static JSONObject getJSONData(String url) throws JSONException {\n        JSONObject jObject = null;\n        InputStream data = null;\n        DefaultHttpClient httpClient = new DefaultHttpClient();\n        URI uri;\n        try {\n            uri = new URI(url);\n            HttpGet httpGet = new HttpGet(uri);\n            HttpResponse response = httpClient.execute(httpGet);\n            data = response.getEntity().getContent();\n            String line;\n            StringBuilder builder = new StringBuilder();\n            BufferedReader reader;\n            reader = new BufferedReader(new InputStreamReader(data), 8192);\n            while ((line = reader.readLine()) != null) builder.append(line);\n            reader.close();\n            jObject = (JSONObject) new JSONTokener(builder.toString()).nextValue();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return jObject;\n    }\n", "code2": "    public static String md5String(String str) {\n        try {\n            MessageDigest md;\n            md = MessageDigest.getInstance(\"MD5\");\n            md.update(str.getBytes());\n            byte[] hash = md.digest();\n            final char[] hexChars = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };\n            StringBuffer res = new StringBuffer();\n            for (int i = 0; i < hash.length; i++) {\n                res.append(hexChars[(0xF0 & hash[i]) >> 4]);\n                res.append(hexChars[0x0F & hash[i]]);\n            }\n            return res.toString();\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n", "label": 0, "substitutes": {"getJSONData": ["getJContent", "getJSONResponse", "getjsonContent", "loadJSONObject", "getJObject", "loadJSONResponse", "getBasicObject", "getJSONContent", "loadJSONData", "loadjsonObject", "getJSONObject", "loadJSONContent", "loadjsonResponse", "getJResponse", "loadjsonContent", "getjsonData", "getjsonResponse", "loadjsonData", "getBasicResponse", "getBasicData", "getJData", "getjsonObject", "getBasicContent"], "url": ["sl", "path", "item", "address", "string", "file", "Url", "ret", "log", "str", "id", "nl", "b", "remote", "ls", "href", "dl", "i", "ll", "pattern", "pl", "host", "ssl", "link", "location", "rel", "base", "URL", "web", "loc", "result", "ur", "name", "lim", "util", "http", "addr", "l", "json", "ul"], "jObject": ["objObject", "jsonData", "jsonobject", "jpAnonymous", "jpobject", " jDocument", " jObj", "jData", "reportData", "jAnonymous", "jsonNull", "jpNull", "jpObject", "reportDocument", "reportObject", "jsonObject", " jNull", "jDocument", " jAnonymous", "jObj", "jsonAnonymous", "jNull", "jsonObj", "jobject", " jData", "reportObj", "jsonDocument", "objDocument", "objObj", "objData", " jobject"], "data": ["text", "sample", "bytes", "trans", "results", "ata", "dat", "sequence", "string", "resource", "aw", "no", "output", "content", "mu", "block", "session", "ad", "area", "feed", "html", "api", "buffer", "message", "result", "raw", "input", "name", "media", "error", "source", "done", "image", "details", "value", "or", "DATA", "window", "cache", "json", "ne", "body", "dev", "stream", "size"], "httpClient": [" httpclient", " httpBuilder", "httpsBuilder", "httpBuilder", "httpsclient", "httpControl", "ttpContext", "httpsClient", "httpContext", "ttpClient", "httpsContext", "ttpclient", "HttpBuilder", "HttpControl", " httpControl", "ttpGet", "HttpGet", "httpclient", "Httpclient", "httpsControl", "HttpContext", "HttpClient", "httpsGet"], "uri": ["du", "path", "address", " ur", "subject", "Url", "term", "hub", "hu", "resource", "uni", "qu", "char", "point", "remote", "phi", "manager", "ri", "cp", "range", "i", "connection", "pi", "URI", "ilo", "host", "link", "location", " URI", "base", "api", "URL", "server", "ur", "lu", "via", "client", "u", "util", "iri", "http", "qi", "source", "uu", "ip", "directory", "hi", "ui", "domain", "ref", "nu", "origin", "archive"], "httpGet": ["hGET", "HTTPQuery", "httpPut", " httpGET", "hGate", "htmlGET", "httpQuery", "httpGate", " httpPut", "htmlGet", "hGet", "HTTPGet", " httpQuery", "HTTPPut", "htmlQuery", "htmlPut", "HTTPGET", "httpGET", "htmlGate", " httpGate", "hQuery"], "response": ["description", "respond", "resource", "remote", "onse", "opening", "success", "context", "service", "resolution", "still", "Response", "output", "block", "connection", "status", "server", "resp", "result", "message", "page", "client", "document", "frame", "object", "successful", "http", "answer", "application", "socket", "report", "image", "hello", "version", "yes", "request", "pos", "json", "next", "reply", "body"], "line": ["text", "ln", "sample", "cell", "number", "log", "file", "sequence", "field", "nl", "inline", "point", "print", "part", "e", "row", "stroke", "phrase", "len", "block", "ice", " Line", "label", "code", "status", "link", "page", "message", "lin", "entity", "column", "user", "frame", "name", "liner", "comment", "error", "ine", "online", "eline", "key", "chain", "header", "Line", "l", "LINE", "next", "entry", "word"], "builder": ["build", "black", "ener", "utils", "number", "ender", "alph", "builders", "atter", "bar", "by", "eng", " builders", "b", "length", "oster", "join", "loader", "ward", "board", "row", "control", "library", "inner", "upper", "built", "language", "bean", "sf", "base", "fb", "trace", "building", "buffer", "web", "sb", "message", "lower", "lu", "writer", "parser", "name", "BU", "operator", "Builder", "der", "uf", "order", "full", "er"], "reader": ["river", "where", "dr", " readers", "field", "ger", " writer", "wrapper", " read", "roller", "oder", "e", "loader", "per", "ner", "row", "Reader", "record", "mr", "ri", "r", "bo", "range", "ro", "inner", "worker", "rar", "runner", "iterator", "iter", "buffer", "message", "dd", "older", "writer", "dra", "read", "parser", "readable", "ator", "util", "reading", "rl", "driver", "peer", "er", "stream", "handler", "entry"]}}
{"id1": "20855053", "id2": "9257487", "code1": "    public void init(ServletContext context) throws ScratchException {\n        try {\n            log.debug(\"Attempting to load Controllers from file: \" + REGISTRY_FILENAME);\n            ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n            Enumeration<URL> urls = classLoader.getResources(REGISTRY_FILENAME);\n            while (urls.hasMoreElements()) {\n                URL url = urls.nextElement();\n                log.debug(\"Found: \" + url);\n                BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));\n                String className = null;\n                while ((className = reader.readLine()) != null) {\n                    className = className.trim();\n                    if (!\"\".equals(className) && !className.startsWith(\"#\")) {\n                        log.debug(\"Found class: \" + className);\n                        Class<?> clazz = classLoader.loadClass(className);\n                        addClass(clazz);\n                    }\n                }\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n            log.error(e);\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n            log.error(e);\n        }\n    }\n", "code2": "    public static boolean downloadFile(String from, String to, ProgressMonitor pm) {\n        try {\n            FileOutputStream out = new FileOutputStream(to);\n            URL url = new URL(from);\n            URLConnection conn = url.openConnection();\n            InputStream in = conn.getInputStream();\n            byte[] buffer = new byte[1024];\n            int read = 0;\n            while ((read = in.read(buffer)) != -1) {\n                out.write(buffer, 0, read);\n                if (pm != null) pm.addToProgress(read);\n            }\n            out.close();\n            in.close();\n        } catch (Exception e) {\n            Installer.getInstance().getLogger().log(StringUtils.getStackTrace(e));\n            return false;\n        }\n        return true;\n    }\n", "label": 0, "substitutes": {"init": [" initialization", "initialized", " refresh", "construct", "start", " deploy", " initialized", "run", " Init", " prepare", " dispatch", " authorize", " initiation", " restart", "Init", " initiate", "config", "activate", " service", " login", "action", "register", "execute", " construct", " bind", " abort", "launch", " reset"], "context": ["exc", "h", "txt", "component", " contexts", "event", "ctx", "c", "ex", "null", "res", "config", "X", "web", "sc", "Context", "application", "x", "chain", "self", "tx", "state", "this", "bc", "w"], "classLoader": ["taskBuilder", "ClassReader", "classLess", "ClassElf", " classPath", "fileParser", "classPath", " classBuilder", "ClassLoader", "ClassManager", " classLess", " classManager", "taskLoader", "classManager", "classParser", "classElf", "urlLoader", "urlloader", "urlPath", "classReader", "classloader", "taskElf", "Classloader", "ClassLess", " classReader", "classBuilder", "taskLess", "fileReader", "fileLoader", "ClassPath", "ClassParser", "fileManager", "ClassBuilder", " classElf", " classParser", " classloader", "urlReader"], "urls": ["limxs", " urlms", "urps", " urllets", "slports", "normports", "urlists", "lls", "longists", "ls", "longs", "URLs", "urlxs", "limps", "urlgs", "longports", "urxs", "URLgs", "slists", "URLlets", "urlms", "limgs", "limls", "urlps", "lxs", "sls", "lims", "slies", "urllets", "normists", "normies", "norms", "urs", "limlets", "urlports", "urlls", "lps", "URLms", "longies", " urlgs", "limms", "urlies"], "url": ["sl", "path", "address", "lr", "log", "file", "Url", "ret", "li", "str", "nl", "resource", "mail", "channel", "b", "char", "browser", "row", "ls", "re", "r", "email", "dl", "ll", "res", "ssl", "link", "location", "f", "uri", "base", "rel", "URL", "job", "web", "loc", "page", "ur", "user", "req", "name", "util", "bel", "http", "rl", "uu", "mount", "el", "l", "ob", "ref", "org", "entry", "ul"], "reader": ["layer", "iper", "file", "resource", " Reader", "roller", "rx", "per", "loader", "ner", "row", "Reader", "r", "range", "ro", "inner", "rar", "runner", "rot", "iterator", "iter", "buffer", "dd", "older", "writer", "parser", "read", "input", "rr", "reading", "rer", "rl", "driver", "peer", "er", "stream", "handler", "entry"], "className": ["ClassName", "packageName", "classPath", "classData", "titleName", "moduleType", "logname", " classNAME", " ClassTitle", "stringType", "partNAME", " classNames", "packageData", "CLASSName", "moduleName", "moduleString", "ClassLine", "logName", "clPath", "partValue", "logValue", "partname", "titleLine", "classToken", " ClassName", "ClassRel", " classString", "playBody", "clRel", " classBody", "titleString", "classname", "CLASSTitle", " ClassNames", "completeRel", "classString", "logNAME", " classTitle", "classTitle", "playName", "classNo", " classLine", " ClassFull", " classStart", "packagePath", "classRel", " classToken", "classNot", "classType", "classFull", " classname", "stringName", "stringStart", " classData", "cellString", "cellToken", "classStart", "cellName", "Classname", "ClassNot", "partName", " classNot", "classValue", " classRel", "CLASSFull", "ClassString", "packagename", "cellRel", "ClassPath", "classNAME", "playNo", "ClassData", " classPath", "ClassToken", "classBody", "classLine", "clString", " classNo", "clBody", " classValue", "completeName", "clNo", "CLASSNames", "playString", "moduleStart", "completePath", "titleNot", "stringString", " classType", "clName", "classNames", " classFull"], "clazz": ["gluster", "cluster", "shace", "clace", "glade", " clade", "glclass", "claz", "laz", "class", "lass", "glace", "shade", "lclass", "classclass", " clace", "lazz", "classass", "clade", "classaz", "glass", "clclass", "shuster", "glazz", "classazz", "shazz", " cluster", "glaz"]}}
{"id1": "350482", "id2": "16353490", "code1": "    public static void doVersionCheck(View view) {\n        view.showWaitCursor();\n        try {\n            URL url = new URL(jEdit.getProperty(\"version-check.url\"));\n            InputStream in = url.openStream();\n            BufferedReader bin = new BufferedReader(new InputStreamReader(in));\n            String line;\n            String develBuild = null;\n            String stableBuild = null;\n            while ((line = bin.readLine()) != null) {\n                if (line.startsWith(\".build\")) develBuild = line.substring(6).trim(); else if (line.startsWith(\".stablebuild\")) stableBuild = line.substring(12).trim();\n            }\n            bin.close();\n            if (develBuild != null && stableBuild != null) {\n                doVersionCheck(view, stableBuild, develBuild);\n            }\n        } catch (IOException e) {\n            String[] args = { jEdit.getProperty(\"version-check.url\"), e.toString() };\n            GUIUtilities.error(view, \"read-error\", args);\n        }\n        view.hideWaitCursor();\n    }\n", "code2": "    private String executePost(String targetURL, String urlParameters) {\n        URL url;\n        HttpURLConnection connection = null;\n        try {\n            url = new URL(targetURL);\n            connection = (HttpURLConnection) url.openConnection();\n            connection.setRequestMethod(\"POST\");\n            connection.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\n            connection.setRequestProperty(\"Content-Length\", \"\" + Integer.toString(urlParameters.getBytes().length));\n            connection.setRequestProperty(\"Content-Language\", \"en-US\");\n            connection.setUseCaches(false);\n            connection.setDoInput(true);\n            connection.setDoOutput(true);\n            DataOutputStream wr = new DataOutputStream(connection.getOutputStream());\n            wr.writeBytes(urlParameters);\n            wr.flush();\n            wr.close();\n            InputStream is = connection.getInputStream();\n            BufferedReader rd = new BufferedReader(new InputStreamReader(is));\n            String line;\n            StringBuffer response = new StringBuffer();\n            while ((line = rd.readLine()) != null) {\n                response.append(line);\n                response.append('\\r');\n            }\n            rd.close();\n            return response.toString();\n        } catch (Exception e) {\n            e.printStackTrace();\n            return null;\n        } finally {\n            if (connection != null) {\n                connection.disconnect();\n            }\n        }\n    }\n", "label": 0, "substitutes": {"doVersionCheck": ["doFeatureInfo", " doVersionTest", "doApplicationTest", "doVersionInfo", "doFeatureCheck", "doFeatureTest", "doImageQuery", " doVersionsCheck", " doApplicationInfo", "doApplicationCheck", " doVersionsTest", "doImageTest", "doImageCheck", "doVersionQuery", "doImageInfo", " doVersioncheck", " doApplicationTest", " doVersionsUpdate", "doVersionsUpdate", " doVersionUpdate", "doVersionsCheck", "doVersionTest", " doVersionQuery", "doVersionscheck", " doApplicationCheck", "doFeatureUpdate", "doVersioncheck", "doApplicationQuery", " doVersionInfo", "doBuildcheck", " doVersionscheck", "doVersionUpdate", "doApplicationInfo", " doApplicationQuery", "doBuildCheck", "doFeatureQuery", "doVersionsTest", "doBuildTest", "doFeaturecheck", "doBuildUpdate"], "view": ["cv", "subject", "v", "cell", "h", "file", "lock", "show", "VIEW", "print", "component", "browser", "update", "context", "row", "View", "review", "eye", "manager", "model", "call", "widget", "index", "box", "query", "block", "check", "port", "html", "vm", "server", "engine", "form", "buffer", "iew", "page", "q", "project", "input", "see", "ml", "document", "client", "tree", "http", "views", "report", "image", "virtual", "self", "version", "window", "layout", "tv", "controller", "this", "pool", "display"], "url": ["build", "sl", "gl", "address", "v", "log", "file", "Url", "str", "nl", "mail", "b", "char", "oul", "browser", "r", "dl", "ll", "pl", "host", "ssl", "link", "html", "f", "uri", "rel", "URL", "job", "loc", "get", "ur", "client", "bel", "hl", "http", "rl", "mount", "l", "domain", "ref", "lb", "ul"], "in": ["ln", "sin", "asin", "is", "inf", "cin", "from", "reader", " IN", "IN", "n", "i", "inc", "inner", " din", "f", "on", "out", "din", "init", "vin", "input", "isin", "gin", "In", "source", "mn", "ins", "rin", "l", "info", "can", "body", "ain", "stream", "mat", "inn"], "bin": ["local", "ln", "win", "bed", "cos", "binary", "lib", "file", "by", "sin", "nb", "b", "bg", "conv", "rb", "mon", "cin", "abin", "reader", "thin", "re", "len", "bl", "sam", "inner", "session", "jin", "bur", " din", " Bin", "stock", "buffer", "body", "buff", "out", "din", "init", "all", "db", "gin", "obin", "brain", "ran", "bn", "cb", "ins", "rin", "cache", "bi", " bins", "spin", "ebin", "con", "inn"], "line": ["ln", "err", "sample", "cell", "string", "file", "log", "sequence", "field", "cat", "inline", "point", "channel", "print", "part", "char", "zone", "row", "detail", "record", "style", "rule", "section", "range", "ice", "block", "port", "code", "status", "link", "stay", "base", "iter", "trace", "tile", "job", "page", "lin", "message", "column", "parse", " block", "lo", "frame", "liner", "comment", "lines", "lane", "ine", "le", "key", "eline", "chain", "Line", "l", "LINE", "cmd", "next", "stream", "entry", "word"], "develBuild": ["deffBuilt", "develLog", "depobuild", "desVELLoad", "deeltaLoad", "desvelRelease", "duVELBuilder", "DeVELLog", "deeltaBuild", "deployRelease", "deployBuild", "deffbuild", "deffBuilder", "deployBoot", "deVELBuilder", "develBoot", "DevelBuilt", "duffBuilder", "desVELbuild", "deffBuild", "duvelbuild", "desVELBuild", "depoBuilt", "duffbuild", "devBuilder", "deVELRelease", "duvelBoot", "DeVELBuilt", "deVELBuilt", "desvelLoad", "duvelBuild", "desvelBuild", "devBoot", "deVELbuild", "develRelease", "desVELRelease", "develBuilder", "develBuilt", "develbuild", "DevelBuild", "devbuild", "deployBuilt", "duvelBuilder", "deVELLog", "duvelBuilt", "develLoad", "duffBuilt", "duffBuild", "Develbuild", "deVELBoot", "depoBuild", "DeVELbuild", "duVELBuild", "DeVELBuild", "devBuilt", "depoLog", "desvelbuild", "duVELbuild", "devBuild", "deeltaRelease", "deploybuild", "devLog", "deployBuilder", "DevelLog", "duVELBoot", "deVELLoad", "deployLoad", "deeltabuild", "deVELBuild"], "stableBuild": ["secureBuilder", " stablebuild", " unstableBind", " unstablebuild", " stableBoot", "activeBuilder", " stableBind", "secureBuild", "devBuilder", "stableBind", " stableMake", "secureCraft", " unstableBuilder", "activebuild", "confirmedLong", " stableLong", "activeBuild", " unstableLong", "confirmedBuild", "confirmedBoot", "securebuild", "devbuild", "stableBoot", "stableMake", "devBind", " unstableCraft", "devMake", "stableLong", "stableCraft", " unstableBuild", "devBuild", "stablebuild", "activeMake", " unstableBoot", " stableBuilder", "stableBuilder", " stableCraft", "confirmedbuild"]}}
{"id1": "3266833", "id2": "822452", "code1": "    public MotixFileItem(final InputStream is, final String name, final String contentType, final int index) throws IOException {\n        this.name = name;\n        this.contentType = contentType;\n        this.index = index;\n        this.extension = FilenameUtils.getExtension(this.name);\n        this.isImage = ImageUtils.isImage(name);\n        ArrayInputStream isAux = null;\n        final ByteArrayOutputStream out = new ByteArrayOutputStream();\n        try {\n            IOUtils.copy(is, out);\n            isAux = new ArrayInputStream(out.toByteArray());\n            if (this.isImage) {\n                this.bufferedImage = imaging.read(isAux);\n            }\n        } finally {\n            IOUtils.closeQuietly(out);\n            IOUtils.closeQuietly(isAux);\n        }\n        this.inputStream = new ArrayInputStream(out.toByteArray());\n    }\n", "code2": "    private static void readAndRewrite(File inFile, File outFile) throws IOException {\n        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n        Dataset ds = DcmObjectFactory.getInstance().newDataset();\n        dcmParser.setDcmHandler(ds.getDcmHandler());\n        dcmParser.parseDcmFile(null, Tags.PixelData);\n        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        System.out.println(\"reading \" + inFile + \"...\");\n        pdReader.readPixelData(false);\n        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n        ds.writeDataset(out, dcmEncParam);\n        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n        System.out.println(\"writing \" + outFile + \"...\");\n        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        pdWriter.writePixelData();\n        out.flush();\n        out.close();\n        System.out.println(\"done!\");\n    }\n", "label": 1, "substitutes": {"is": ["serv", "iss", "isl", "any", "isa", "was", "ists", "sis", "in", "ais", "iris", "bits", "i", "ios", "has", "bis", "fs", "as", "IS", "parts", "s", "get", "ois", "init", "lis", "its", "bs", "isin", "ris", "sys", "isf", "Is", "us", "info", "isi", "isc", "os", "iso"], "name": ["local", "search", "path", "description", "number", "string", "file", "sequence", "term", "id", "parent", "part", "length", "ame", "position", "class", "in", "family", "current", "filename", "url", "names", "NAME", "admin", "null", "named", "n", "i", "alias", "title", "code", "location", "base", "normal", "size", "prefix", "format", "get", "create", "Name", "template", "data", "source", "value", "image", "key", "self", "version", "handle", "default", "info", "order", "type", "body", "this", "word"], "contentType": [" contentTypes", "ContentTypes", "contentLength", "contenttype", "Contenttype", "mediaControl", "messageQuery", "messageLength", "contentTypes", "mediaQuery", "fileLength", "messageType", " contentLength", "ContentLength", "contentQuery", " contenttype", "mediaType", "fileTypes", "messagetype", "ContentType", "mediaUnit", " contentUnit", "mediaTypes", "fileQuery", "contentUnit", "mediatype", " contentControl", "fileType", "contentControl", "mediaLength", "messageControl", "messageTypes", "messageUnit"], "index": ["path", "address", "batch", "number", "lock", "sequence", "height", "id", "length", "test", "timeout", "count", "level", "start", "num", "position", "success", "fee", "row", "Index", "update", "max", "open", "si", "axis", "content", "dx", "n", "access", "i", "instance", "code", "prefix", "slice", "sort", "exclusive", "action", "create", "ind", "offset", "error", "x", "value", "image", "key", "list", "pos", "depth", "info", "type", "find", "size"], "extension": ["protend", "protitude", "xtitude", "protension", "extitude", "contend", "extend", "xtend", "extention", "contitude", "contension", "xtention", "protention", "contention", "xtension"], "isImage": ["isoMedia", " isFile", "ISPhoto", "isaImage", "wasFile", "areImage", "areMedia", "needsPhoto", "ISimage", " isItemImage", "hasimage", " isMedia", "areItemImage", "isaPhoto", "isPhoto", "isaPicture", "needsPicture", "needsFile", "isMedia", "isoItemImage", "needsImage", "ISPicture", "isoFile", "isoImage", "areFile", "wasimage", "wasImage", "isimage", "needsMedia", "hasFile", "isaimage", "isPicture", "hasMedia", "isItemImage", "ISImage", "wasMedia", "needsimage", "hasImage", "isFile"], "isAux": ["isPaUX", "isinPaaux", "isaiox", " isAx", "isPaux", "isiOAuxe", "isPamp", "isinAaux", "isiAaux", "isinPaUX", "isiAiox", "isiAux", "isOAaux", "isCAiox", "wasAAUX", "isAxx", "isSAux", "isAcUX", "isAAux", "isiOAaux", "isOAUX", " isCAUX", "isCAux", "isNAux", "isAmp", "isAult", " isAaux", "isauxe", "isAndaux", "isOAult", " isCAx", "isiAuxe", "wasAUX", "wasAAult", "isaaux", "isAcux", "isOAux", "wasAAxx", "isAndux", "isNAaux", "isAx", "isaux", "wasAxx", "isinPamp", "isAaux", "isNAUX", "wasAAux", "isSAUX", "isinAUX", "isAndUX", "isCAuxe", "isSAaux", "isAcaux", "isSAmp", "isAcx", "wasAult", "isOAuxe", "isAUX", "isOAxx", "isNAmp", "isAuxe", "isCAUX", "wasAux", "isCAaux", "isinAux", "isAAUX", "isinPaux", " isAUX", "isCAx", " isCAaux", "isiOAux", " isCAux", "isiOAiox", "isAAxx", "isinAmp", "isAiox", "isAAult", "isPaaux", "isOAiox", "isAndx"], "out": ["os", "v", "cos", "batch", "at", "outs", "log", "lock", "p", "OU", " Out", "by", "io", "b", "t", "conv", "nt", "in", "up", "ion", "aos", "output", "we", "go", " output", "null", "to", "n", "boot", "ex", "vol", "port", "res", "auto", "outer", "o", "net", "result", "oss", "tmp", "cn", "conn", "user", "all", "sys", "OUT", " OUT", "chain", "Out", "list", "sum", "pos", "cache", "ent", "it", "pool", "order", "gc", "this", "co", "con", "w", "timeout"], "bufferedImage": ["bufferingImages", "renderedImage", "bufferredImages", "bufferredImage", "bufferedImages", "renderedimage", "bufferedimage", "buffererImages", "renderedImages", "renderingimage", "bufferedVideo", "bufferredVideo", "renderingImage", "buffererimage", "buffererImage", "renderedVideo", "buffererVideo", "bufferingVideo", "bufferingImage", "renderingImages", "renderingVideo", "bufferredimage", "bufferingimage"], "inputStream": ["outputSteam", "outputstream", "inputSteam", "currentstream", "outputStream", "inputView", "currentStream", "InputStream", "inputstream", "currentView", "Inputstream", "InputSteam", "InputView", "currentSteam", "outputView"]}}
{"id1": "21125261", "id2": "5299276", "code1": "    @Test\n    public void test() throws Exception {\n        InputStream is = this.getClass().getResourceAsStream(\"originAndDestination.xml\");\n        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();\n        IOUtils.copy(is, byteArrayOutputStream);\n        TrafficModelDefinition def = MDFReader.read(byteArrayOutputStream.toByteArray());\n        TrafficSimulationEngine se = new TrafficSimulationEngine();\n        se.init(def);\n        int linkId = 2;\n        int segmentId = 0;\n        Map<Integer, Set<Integer>> linkSegments = new HashMap<Integer, Set<Integer>>();\n        Set<Integer> segments = new HashSet<Integer>();\n        segments.add(segmentId);\n        linkSegments.put(linkId, segments);\n        FrameProperties frameProperties = new FrameProperties(linkSegments, new HashSet<Integer>());\n        se.setFrameProperties(frameProperties);\n        for (float time = 0; time < 60 * 10; time += 0.1f) {\n            se.step(0.1f);\n            for (RoadObject vehicle : se.getDynamicObjects()) {\n                System.out.println(time + \": X=\" + vehicle.getPosition() + \"\\tV=\" + vehicle.getSpeed());\n            }\n        }\n    }\n", "code2": "    public void execute(File sourceFile, File destinationFile, String conversionType, Properties java2HtmlConfig) {\n        FileReader reader = null;\n        Writer writer = null;\n        try {\n            reader = new FileReader(sourceFile);\n            logger.info(\"Using source file: \" + trimPath(userDir, sourceFile));\n            if (!destinationFile.getParentFile().exists()) {\n                createDirectory(destinationFile.getParentFile());\n            }\n            writer = new FileWriter(destinationFile);\n            logger.info(\"Destination file:  \" + trimPath(userDir, destinationFile));\n            execute(reader, writer, conversionType, java2HtmlConfig);\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            if (writer != null) {\n                try {\n                    writer.close();\n                    writer = null;\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n            if (reader != null) {\n                try {\n                    reader.close();\n                    reader = null;\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n", "label": 1, "substitutes": {"test": ["tests", "evaluate", "sample", " tests", "show", "fit", "debug", "t", " evaluate", "run", "server", "feature", "example", "read", " testing", " sample", "T", "load", "testing", "hello", "execute", "train", "Test", "unit", "launch", "volt"], "is": ["does", "serv", "isa", "ws", "sis", "in", "xs", "ls", "mis", "ais", "ri", "rs", "i", "ios", "has", "are", "sit", "fs", "es", "as", "ps", "IS", "ms", "s", "bs", "out", "lis", "its", "input", "ris", "sys", "tis", "ai", "Is", "xml", "us", "isi", "isc", "stream", "os", "iso"], "byteArrayOutputStream": ["byteArrayByteString", "byteArrayOutputForm", "byteStreamOutputStyle", "byteArrayOutputString", "byteStringInputString", "byteStringInputView", "byteStringoutputStream", "byteArrayoutputSteam", "byteArrayByteSteam", "byteStreamInputForm", "byteStringInputSteam", "byteArrayInputStream", "byteArrayInputForm", "byteArrayApplicationStream", "byteArray4String", "byteArrayOutputStyle", "byteStreamOutputForm", "byteStringoutputString", "byteArrayApplicationStyle", "byteStreamInputSteam", "byteArrayInputSteam", "byteArrayByteStream", "byteStreamInputStyle", "byteArrayApplicationSteam", "byteStreamOutputStream", "byteStreamInputStream", "byteArray4Steam", "byteArrayOutputView", "byteStringOutputView", "byteStringOutputForm", "byteArrayByteView", "byteArrayInputString", "byteArrayApplicationForm", "byteStringInputStream", "byteArrayInputStyle", "byteArrayoutputString", "byteStringOutputStream", "byteArrayoutputForm", "byteStringoutputSteam", "byteStreamOutputSteam", "byteStringoutputForm", "byteStringOutputString", "byteArray4View", "byteArrayByteForm", "byteStringOutputSteam", "byteArray4Stream", "byteArrayoutputStream", "byteArrayInputView", "byteArrayByteStyle", "byteArrayOutputSteam"], "def": ["d", "Def", "dec", "decl", "definition", "da", "des", "pro", "crit", "sche", "dict", "conf", "dl", "det", "ded", "define", "md", "desc", "DEF", "sd", "dal", "DE", "hd", "db", "ds", "cd", "Definition", "dem", "default", "df", "json", "del", "ef", "defined", "dev", "de"], "se": ["sec", "sl", "ae", "ade", "so", "sed", "ste", "ce", "e", "sche", "be", "ense", "te", "ese", "ase", "we", "ke", "ee", "he", "sem", "Se", "she", "sa", "ene", "ze", "ode", "es", "ge", "engine", "set", "ses", "su", "pe", "sd", "sp", "est", "sel", "ane", "parse", "see", "ie", "ide", "SE", "spe", "me", "ine", "le", "ser", "pse", "ve", "ne", "de", "sea"], "linkId": ["connectionIdent", "lineId", "chainID", " linkName", "lineName", " linkid", "LinkId", "lineid", " linkID", "linkIdent", "LinkID", "linkid", "linkName", "linkID", "linkedID", "lineID", "linkedIdent", "linkedId", "LinkName", "Linkid", "connectionID", "connectionId", "chainIdent", "chainId"], "segmentId": ["begroupById", "idegmentid", "begroupName", "begroupId", "segroupById", "segementid", "semissionid", "begmentById", "idegmentName", "idegmentRef", "segmentRef", "segmentID", "sementid", "segementName", "idegementName", "sementID", "begroupID", "segementID", "segroupName", "segmentName", "begmentId", "segementById", "sementById", "idegementRef", "segroupId", "sementName", "begmentID", "segmentid", "idegmentId", "begmentName", "sementRef", "semissionName", "sementId", "idegementid", "segementRef", "segroupID", "idegementId", "semissionId", "semissionRef", "segementId", "segmentById"], "linkSegments": ["linkConnectables", "linkBuildroups", "linkFragments", " linkSeggments", " linkGroups", "linkBuildets", " linkSegets", " linkBuildets", " linkSegables", "linkThreadroups", "linkParments", " linkSeglements", " linkThreadlements", "linkConnectets", "linkGment", "linkSegables", "linkSegroups", " linkThreadroups", " linkSegment", "linkSements", "linkParlements", "linkConnectlements", " linkBuildables", "linkConnectroups", "linkBuildgments", " linkSegroups", "linkSegets", "linkConnectgments", " linkThreadgments", "linkGments", "linkParroups", "linkSegment", "linkSeglements", "linkSeables", "linkFragroups", "linkThreadgments", "linkGgments", "linkThreadlements", "linkSeets", "linkConnectments", " linkThreadments", "linkFraggments", "linkFragment", "linkBuildment", "linkBuildments", " linkBuildgments", " linkGgments", "linkBuildables", " linkGment", "linkPargments", " linkBuildments", " linkGments", "linkThreadments", "linkSeggments", "linkGroups"], "segments": ["usegments", "parsements", "vectors", "mements", "velements", " Seges", "segs", " segs", "vements", "sevals", "megments", " Sevals", "parsectors", "parselements", " selements", " sevals", "megins", " seges", "usements", "megs", "parsegments", "usegins", "begments", "sements", "sectors", "bevals", " sectors", " Sements", "beges", "bements", "vegments", "selements", " sements", "seges", "usegs", " segins", " Segments", "segins"], "frameProperties": ["framePrps", " frameByilities", "frameParps", "framePropilities", "frameProrics", " frameByperties", "frameParrics", " framePrps", "framePropperties", "framePrperties", "frameByptions", " framePrrics", " frameByptions", " frameProrics", "frameProfps", " frameProilities", "frameProps", "frameProilities", "framePropps", "frameByps", "framePrptions", "frameComrics", "frameComptions", "frameProptions", "frameComps", "framePropptions", "frameProfperties", "frameParperties", " framePrptions", "frameParptions", "frameByperties", " frameByps", " frameProptions", " framePrperties", "framePrrics", "frameProfilities", " frameProps", "frameProfptions", "frameComperties", "frameByilities"], "time": ["system", "sequence", "step", "TIME", "timer", "transform", "before", "speed", "length", "point", "t", "count", "start", "event", "context", "total", "runtime", "frequency", "ts", "check", "trust", "clock", "rate", "money", "estamp", "duration", "delay", "times", "size", "set", "trace", "message", "counter", "think", "each", "date", "ime", "second", "slow", "Time", "tim", "x", "etime", "distance", "value", "version", "window", "task", "depth", "year", "tx", "tt", "now", "timeout"], "vehicle": ["verogram", "verocity", "vehic", "heroicles", "heroocity", "vertocity", "verendor", "yardicle", "Vehocity", "survendor", " vehICLE", "Vehicles", "ventic", " vehicles", "verticle", "yardendor", "venticles", "vericle", "survicle", "verticles", "heroicle", "vehocity", "vehICLE", "yardogram", "venticle", "survocity", "vehicles", "vehendor", "Vehicle", "yardocity", "vertic", "VehICLE", "survogram", "vehogram", "ventocity", "Vehic", " vehocity", "heroICLE"]}}
{"id1": "1798720", "id2": "3024970", "code1": "    public static void save(String packageName, ArrayList<byte[]> fileContents, ArrayList<String> fileNames) throws Exception {\n        String dirBase = Util.JAVA_DIR + File.separator + packageName;\n        File packageDir = new File(dirBase);\n        if (!packageDir.exists()) {\n            boolean created = packageDir.mkdir();\n            if (!created) {\n                File currentPath = new File(\".\");\n                throw new Exception(\"Directory \" + packageName + \" could not be created. Current directory: \" + currentPath.getAbsolutePath());\n            }\n        }\n        for (int i = 0; i < fileContents.size(); i++) {\n            File file = new File(Util.JAVA_DIR + File.separator + fileNames.get(i));\n            FileOutputStream fos = new FileOutputStream(file);\n            fos.write(fileContents.get(i));\n            fos.flush();\n            fos.close();\n        }\n        for (int i = 0; i < fileNames.size(); i++) {\n            File fileSrc = new File(Util.JAVA_DIR + File.separator + fileNames.get(i));\n            File fileDst = new File(dirBase + File.separator + fileNames.get(i));\n            BufferedReader reader = new BufferedReader(new FileReader(fileSrc));\n            BufferedWriter writer = new BufferedWriter(new FileWriter(fileDst));\n            writer.append(\"package \" + packageName + \";\\n\");\n            String line = \"\";\n            while ((line = reader.readLine()) != null) writer.append(line + \"\\n\");\n            writer.flush();\n            writer.close();\n            reader.close();\n        }\n    }\n", "code2": "    @Test\n    public void testCopy_inputStreamToOutputStream() throws Exception {\n        InputStream in = new ByteArrayInputStream(inData);\n        in = new YellOnCloseInputStreamTest(in);\n        ByteArrayOutputStream baout = new ByteArrayOutputStream();\n        OutputStream out = new YellOnFlushAndCloseOutputStreamTest(baout, false, true);\n        int count = IOUtils.copy(in, out);\n        assertTrue(\"Not all bytes were read\", in.available() == 0);\n        assertEquals(\"Sizes differ\", inData.length, baout.size());\n        assertTrue(\"Content differs\", Arrays.equals(inData, baout.toByteArray()));\n    }\n", "label": 1, "substitutes": {"save": ["Save", "send", " seal", "delete", "saving", "store", "aw", "update", "export", "filename", "pack", "zip", "release", "accept", "dump", "init", "download", "upload", "register", "data", "folder", " Save", "version", "pkg", "archive", "install"], "packageName": ["pkgname", "pkgType", "pkgId", " packageCode", "pkgKey", " packagename", "pkgNames", " packageId", "PackageType", "PackageId", "packageType", "packageKey", " packageKey", "modulename", "pkgCode", "packageId", "packageCode", "moduleName", "pkgName", "PackageNames", "packagename", "moduleCode", "PackageName", "packageNames", "moduleId", " packageNames", "moduleKey", " packageType", "moduleNames"], "fileContents": ["byteContent", "byteValues", "byteNames", "FileBytes", "pageNames", "FileItems", "fileBytes", "byteContents", "pageBytes", "fileItems", " fileItems", "fileContent", " fileValues", "fileIngredients", " fileBytes", "pageItems", " fileContent", "FileContents", "packageContents", " fileIngredients", "fileValues", "pageContents", "packageIngredients", "FileContent", "FileNames", "FileValues", "FileIngredients", "packageNames", "packageContent"], "fileNames": ["resourceTypes", " fileLeaks", "dirKeys", "FileKeys", "issueNames", "resourceNumbers", "issueName", "resourceValues", "dirTypes", "fileVaults", "fieldContents", "dirLeaks", "issueVaults", "fieldNumbers", "dirNames", "messageKeys", "fileLeaks", "FileLeaks", " fileValues", "fileNumbers", "fileKeys", "resourceContents", "moduleContents", "messageNames", " fileKeys", "fileTypes", "fieldTypes", "moduleVaults", "FileTypes", "FileContents", "FileName", "messageName", " fileName", "moduleName", "fileValues", "fileName", "resourceNames", "issueContents", " fileTypes", "FileNames", "fieldNames", "FileValues", " fileVaults", " fileNumbers", "messageValues", "moduleNames"], "dirBase": ["folderBase", " directoryBase", "folderBas", "folderBasic", "dirSet", "DirBuilder", "directoryBasic", "dirBasic", "folderbase", "directoryBas", " directoryBottom", "pkgBas", "pathBas", " directoryBas", "DIRBas", "DirBase", "irBase", "irSet", "DIRBuilder", "pathbase", "dirBas", "DirBottom", "directorybase", "DIRBase", "pkgSet", "dirBuilder", " directoryBuilder", "DirBas", "pathBasic", "irbase", "dirbase", "pkgbase", "DIRBottom", "directorySet", "pkgBase", "irBas", "directoryBase", "dirBottom", "pathBase"], "packageDir": [" packagePath", "podDef", " packageRel", "installDist", "packageDef", " packageFolder", " packageDef", "podDist", "packageDist", "modulePath", "installDir", "pkgPath", "moduleFolder", "packageD", "installDef", "moduleRel", " packageDist", "moduleDir", " packageD", "moduleDef", "podD", "packagePath", "pkgDef", "podDir", "installD", "pkgDir", "pkgFolder", "packageRel", "pkgRel", "packageFolder"], "created": ["started", "added", " started", "filled", "printed", "given", "generated", "Created", "loaded", "reported", "recorded", "developed", "creation", "founded", " generated", "TED", "provided", "present", "confirmed", "released", "registered", "arted", "creat", "allowed", "create", "forced", "associated", "locked", "successful", "mounted", "made", "called", "produced", "raised", "ready", "installed", "joined", "defined", "existent", "checked", "ced", "creator", "activated"], "currentPath": ["recentPath", "currentCh", " currentName", "currentPoint", "currentParent", "CurrentParent", " currentPoint", "CurrentPath", "CurrentPoint", " currentParent", "CurrentFile", "currentlyCh", "currentlyName", "currentlyFile", "recentPoint", " currentCh", "recentParent", "recentName", "currentlyPath", "currentName", " currentFile", "CurrentCh", "currentFile", "CurrentName"], "i": ["I", "iq", "jj", "ini", "cgi", "iy", "ci", "m", "f", "slice", "exp", "qi", "key", "ix", "ui", "this", "iii", "y", "v", "ic", "zi", "p", "gi", "in", "phi", "oi", "ri", "mi", "ex", "iu", "status", "cli", "o", "major", "me", "chain", "ip", "ti", "batch", "them", "li", "id", "my", "ity", "si", "pi", "yi", "multi", "init", "ind", "ei", "ij", "im", "ai", "sim", "it", "bi", "hi", "ami", "ji", "di", "ki", "ii", "j", "go", "index", "mu", "ski", "uri", "q", "xi", "ie", "u", "g", "info", "os"], "file": ["local", "path", "et", "dir", "p", "log", "h", "parent", "io", "resource", "FILE", "disk", "ile", "child", "row", "File", "rule", "port", "link", "f", "sf", "base", "set", "play", "buffer", "table", "page", "format", "db", "name", "template", "comment", "source", "le", "fo", "header", "l", "handle", "info", "pool", "type", "body", "handler"], "fos": ["sfos", "Fos", "sfaos", "oos", "woss", "floses", "ffos", "flo", "faos", " fow", "ffaos", " fOS", " fo", "woes", " foes", "ffo", "fbos", "fow", "fbow", "foss", "fbaos", "woses", "foes", "flos", "Faos", " faos", "Foes", "fbo", "floss", "ffoes", "oow", " foses", "floes", "Fo", "sfOS", "fo", "oaos", "sfoss", "foses", "fOS", "FOS", "flaos", "oo", "wos", " foss", "Foss"], "fileSrc": ["jobSri", "fileSRC", "fileNrc", "fileNrl", "jobNci", "fileInource", " fileInsource", "fileNci", "fileErc", " fileSRC", "fileInsRC", "jobSci", "fileDri", "fileDrc", "jobNri", " fileInsrc", "fileInssrc", " fileSource", "fileInRC", "jobNrl", "fileSource", " fileInsRC", "fileEci", "fileSri", "fileDsrc", "jobNrc", "fileInrc", "fileDource", "jobSrc", " fileInssrc", "fileSsrc", "fileDci", "fileDRC", "fileSrl", "fileSci", "fileErl", "fileInsource", "fileInsrc", "fileEri", "jobSrl", "fileNri", " fileSsrc", "fileDrl"], "fileDst": ["fileNot", "FileSpl", "fileSld", "fileWpl", "FileDst", "fileSlt", "FileSot", "fileDld", "fileDnd", "FileDld", "fileSot", "filedld", "fileDot", "FileDnd", "FileSld", "fileNnd", "fileNpl", "FileSlt", "fileNst", "fileDlt", "FileSnd", "fileSpl", "filedst", "fileSnd", "fileWot", "fileWlt", "fileNlt", "fileSst", "fileNld", "FileDcr", "fileDcr", "FileDlt", "filedcr", "FileSst", "FileScr", "filednd", "fileNcr", "FileDpl", "fileScr", "fileWst", "fileDpl", "FileDot"], "reader": ["dr", "ocker", "Larry", "handler", "resource", "roller", "oder", "rx", "loader", "ader", "ner", "context", "row", "Reader", "review", "ri", "r", "entry", "query", "ro", "inner", "upper", "ler", "rot", "runner", "book", "iterator", "iter", "buffer", "read", "parser", "rr", "readable", "reading", "rer", "rl", "actor", "driver", "rc", "controller", "er", "stream", "rar", "author"], "writer": ["later", "player", "function", "riter", "variable", "print", "wrapper", "test", "store", "browser", "loader", "wright", "adder", "creator", "service", "Reader", "flush", "manager", "storage", "maker", "walker", "editor", "query", "write", "worker", "console", "outer", "runner", "builder", "server", "iterator", "iter", "writers", "buffer", "table", "format", "draw", "user", "read", "parser", "document", "client", "caster", "liner", "ter", "println", "Writer", "report", "driver", "writing", "window", "order", "wire", "operator", "stream", "handler", "entry", "w", "word"], "line": ["text", "ln", "kin", "sample", "cell", "number", "string", "sequence", "nl", "inline", "point", "print", "ole", "row", "stroke", "detail", "record", "style", "rule", "edge", "range", "block", "node", "port", "label", "code", "link", "valid", "pe", "page", "message", "lin", "entity", "date", "column", "user", "frame", "liner", "comment", "ine", "source", "le", "eline", "lined", "chain", "header", "Line", "l", "LINE", "continue", "entry", "word"]}}
{"id1": "149935", "id2": "3806532", "code1": "    public void convert(File src, File dest) throws IOException {\n        InputStream in = new BufferedInputStream(new FileInputStream(src));\n        DcmParser p = pfact.newDcmParser(in);\n        Dataset ds = fact.newDataset();\n        p.setDcmHandler(ds.getDcmHandler());\n        try {\n            FileFormat format = p.detectFileFormat();\n            if (format != FileFormat.ACRNEMA_STREAM) {\n                System.out.println(\"\\n\" + src + \": not an ACRNEMA stream!\");\n                return;\n            }\n            p.parseDcmFile(format, Tags.PixelData);\n            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n                System.out.println(\"\\n\" + src + \": contains UIDs!\" + \" => probable already DICOM - do not convert\");\n                return;\n            }\n            boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n            int pxlen = p.getReadLength();\n            if (hasPixelData) {\n                if (inflate) {\n                    ds.putUS(Tags.BitsAllocated, 16);\n                    pxlen = pxlen * 4 / 3;\n                }\n                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n                    System.out.println(\"\\n\" + src + \": mismatch pixel data length!\" + \" => do not convert\");\n                    return;\n                }\n            }\n            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n            ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n            ds.putUI(Tags.SOPClassUID, classUID);\n            if (!ds.contains(Tags.NumberOfSamples)) {\n                ds.putUS(Tags.NumberOfSamples, 1);\n            }\n            if (!ds.contains(Tags.PhotometricInterpretation)) {\n                ds.putCS(Tags.PhotometricInterpretation, \"MONOCHROME2\");\n            }\n            if (fmi) {\n                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n            }\n            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n            try {\n            } finally {\n                ds.writeFile(out, encodeParam());\n                if (hasPixelData) {\n                    if (!skipGroupLen) {\n                        out.write(PXDATA_GROUPLEN);\n                        int grlen = pxlen + 8;\n                        out.write((byte) grlen);\n                        out.write((byte) (grlen >> 8));\n                        out.write((byte) (grlen >> 16));\n                        out.write((byte) (grlen >> 24));\n                    }\n                    out.write(PXDATA_TAG);\n                    out.write((byte) pxlen);\n                    out.write((byte) (pxlen >> 8));\n                    out.write((byte) (pxlen >> 16));\n                    out.write((byte) (pxlen >> 24));\n                }\n                if (inflate) {\n                    int b2, b3;\n                    for (; pxlen > 0; pxlen -= 3) {\n                        out.write(in.read());\n                        b2 = in.read();\n                        b3 = in.read();\n                        out.write(b2 & 0x0f);\n                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n                        out.write(b3 >> 4);\n                    }\n                } else {\n                    for (; pxlen > 0; --pxlen) {\n                        out.write(in.read());\n                    }\n                }\n                out.close();\n            }\n            System.out.print('.');\n        } finally {\n            in.close();\n        }\n    }\n", "code2": "    public Resource createNew(String name, InputStream in, Long length, String contentType) throws IOException {\n        File dest = new File(this.getRealFile(), name);\n        LOGGER.debug(\"PUT?? - real file: \" + this.getRealFile() + \",name: \" + name);\n        if (isOwner) {\n            if (!\".request\".equals(name) && !\".tokens\".equals(name)) {\n                FileOutputStream out = null;\n                try {\n                    out = new FileOutputStream(dest);\n                    IOUtils.copy(in, out);\n                } finally {\n                    IOUtils.closeQuietly(out);\n                }\n            } else {\n                if (ServerConfiguration.isDynamicSEL()) {\n                } else {\n                }\n                FileOutputStream out = null;\n                try {\n                    out = new FileOutputStream(dest);\n                    IOUtils.copy(in, out);\n                } finally {\n                    IOUtils.closeQuietly(out);\n                }\n            }\n            return factory.resolveFile(this.host, dest);\n        } else {\n            LOGGER.error(\"User isn't owner of this folder\");\n            return null;\n        }\n    }\n", "label": 1, "substitutes": {"convert": ["CONversion", "compvert", "CONverting", "consverting", "Converted", "Converts", "consversion", "confer", "unprocess", "conversion", "unvert", "consvert", "unverted", "compverts", "CONVERT", "unfer", "Conversion", "Convert", "unversion", "CONverted", "unverts", "Converting", "CONfer", "ConVERT", "conprocess", "converting", "converts", "CONvert", "Conprocess", "conVERT", "consVERT", "Confer", "compprocess", "compversion", "converted"], "src": ["sr", "path", "sq", "cur", "scan", "file", "txt", "str", "sin", "orig", "rx", "st", "start", "SOURCE", "from", "filename", "url", "rs", "href", "RC", "ource", "img", "host", "cc", "buster", "sit", "uri", "rel", "config", "sc", "Source", "s", "loc", "ipl", "attr", "ur", "its", "req", "usr", "input", "upload", "scene", "hl", "http", "sys", "dist", "source", "SourceFile", "cont", "addr", "rest", "func", "rc", "ser", "ins", "pkg", "inst", "ebin", "stream", "iv"], "dest": ["foreign", "dir", "dat", " Destination", "txt", " orig", "orig", "disk", "test", "Dest", "target", "tif", "write", " destinations", "port", "img", "table", "result", "est", " Dest", " dst", " destination", "gin", "dist", "rest", "source", "temp", "mat"], "in": ["d", "serv", "file", "en", "io", "b", "is", "inf", "st", "up", "cin", "from", "reader", "r", "IN", "i", "inner", "ad", "res", "m", "ar", "as", "din", "isin", "input", "ind", "source", "In", "el", "ins", "rin", "l", "bin", "sql", "stream", "inn"], "p": ["d", "ping", "op", "pb", "P", "pt", "tp", "lp", "pd", "py", "pro", "h", "post", "vp", "part", "b", "prot", "per", "t", "dp", "j", "pg", "at", "cp", "r", "c", "i", "pl", "pi", "wp", "ph", "m", "pre", "f", "ps", "pm", "pers", "pe", "sp", "er", "parse", "fp", "parser", "ap", "pa", "pp", "rep", "pkg", "l", "it", "g", "php", "pc", "jp"], "ds": ["tp", "des", "lists", "gs", "rs", "dates", "ns", "nas", "ps", "ports", "dd", "db", "yes", "amps", "sets", "ks", "mys", "vs", "ats", "obs", "ils", "s", "bs", "hd", " des", " DS", "Ds", "drivers", "iffs", "dos", "outs", "qs", "tests", "d", "js", "aws", "eds", "pd", "points", "dds", "terms", "eps", "ws", "xs", "tes", "dl", "workers", "sd", "dt", " d", "edes", "posts", "loads", "scripts", "ras", "df", "els", "ss", "gd", "di", "dp", "ls", "hs", "cks", "ts", "uds", "DS", "cs", " dd", "ads", "its", " ads", "tags", "ands", "ags", "sts", "dh", " os", "ods", "docs", "os", "ys"], "format": ["settings", "path", "module", "filter", "fc", "at", "file", "mt", "ats", "tag", "id", "lat", "mode", "t", "sche", "feat", "style", "output", "act", "pattern", "pi", " Format", "status", "title", "f", "cf", "Format", "form", "ct", "feature", "table", "set", "parse", "name", "template", "pretty", "spec", "MAT", "source", "top", "fm", "shape", "version", "l", "it", "layout", "unit", "type", "policy", "mat", "size"], "hasPixelData": ["haspixelDATA", " hasPixeldata", "haspixeldata", "haspixelData", "Haspixeldata", "hasFramedata", "hasFrameDATA", "hasixeldata", "HaspixelData", "hasPixeldata", "hasixelData", "HasPixelDATA", "hasixelDATA", " hasPixelDATA", "hasFrameData", "HasPixelData", "HaspixelDATA", "hasPixelDATA", "HasPixeldata"], "inflate": ["inflATE", " invalidATE", "inFLate", "infolat", "incelATE", "informate", "inflicate", "Informate", "inFlicate", " inflATE", "inFlATE", "inFLocate", "inFlocate", "Informated", "informocate", "incelicate", "invalidocate", "infolate", "inflat", "Inflate", "inFlate", "invalidate", " invalidicate", "Inflat", " invalidate", " inflocate", "incelate", "incelocate", " invalidocate", " inflicate", "infolocate", "inFLat", "Informat", "informated", "Inflated", "informat", "inFLated", "invalidicate", "infolated", "inflated", "invalidATE", "Inflocate", "Informocate", "inflocate"], "pxlen": ["xylin", "mmlength", "pxlength", "cpden", "xplength", "pixellen", "cplen", "pexls", "pexden", "tmplength", "packlength", "mmlen", "mxlen", "cplength", "mmln", "pixelfun", "tmplin", "pexlen", "phpdec", "tmplen", "pixellength", "tmpln", "mxdec", "mmlin", "cpln", "pxls", "xyln", "mxlength", "packlen", "xpln", "pxden", "pxdec", "phpln", "mxln", "pexlength", "pxlin", "xpden", "packls", "xplen", "xylen", "packln", "pixells", "pexfun", "pxln", "packdec", "phplen", "packfun", "xylength", "phplength", "pexln", "pxfun"], "out": ["ln", "err", "log", "dir", "io", "crit", "store", "print", "obj", "up", "aos", "msg", "output", "inv", "ex", "res", "inter", "outer", "prefix", "net", "screen", "conn", "init", "user", "cfg", "writer", "gr", "client", "pretty", "name", "sys", "OUT", "group", "list", "Out", "sum", "gov", "cmd", "ou", "outs", "temp"]}}
{"id1": "19322941", "id2": "3806532", "code1": "    @Test\n    public void test_lookupResourceType_FullSearch_TwoWordsInMiddle() throws Exception {\n        URL url = new URL(baseUrl + \"/lookupResourceType/armor+plates\");\n        HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n        connection.setRequestMethod(\"GET\");\n        connection.setRequestProperty(\"Accept\", \"application/json\");\n        assertThat(connection.getResponseCode(), equalTo(200));\n        assertThat(getResponse(connection), equalTo(\"[{\\\"itemTypeID\\\":25605,\\\"itemCategoryID\\\":4,\\\"name\\\":\\\"Armor Plates\\\",\\\"icon\\\":\\\"69_09\\\"},{\\\"itemTypeID\\\":25624,\\\"itemCategoryID\\\":4,\\\"name\\\":\\\"Intact Armor Plates\\\",\\\"icon\\\":\\\"69_10\\\"}]\"));\n        assertThat(connection.getHeaderField(\"Content-Type\"), equalTo(\"application/json; charset=utf-8\"));\n    }\n", "code2": "    public Resource createNew(String name, InputStream in, Long length, String contentType) throws IOException {\n        File dest = new File(this.getRealFile(), name);\n        LOGGER.debug(\"PUT?? - real file: \" + this.getRealFile() + \",name: \" + name);\n        if (isOwner) {\n            if (!\".request\".equals(name) && !\".tokens\".equals(name)) {\n                FileOutputStream out = null;\n                try {\n                    out = new FileOutputStream(dest);\n                    IOUtils.copy(in, out);\n                } finally {\n                    IOUtils.closeQuietly(out);\n                }\n            } else {\n                if (ServerConfiguration.isDynamicSEL()) {\n                } else {\n                }\n                FileOutputStream out = null;\n                try {\n                    out = new FileOutputStream(dest);\n                    IOUtils.copy(in, out);\n                } finally {\n                    IOUtils.closeQuietly(out);\n                }\n            }\n            return factory.resolveFile(this.host, dest);\n        } else {\n            LOGGER.error(\"User isn't owner of this folder\");\n            return null;\n        }\n    }\n", "label": 0, "substitutes": {"test_lookupResourceType_FullSearch_TwoWordsInMiddle": ["test_lookupResourceType_FullSearch_ThreeLetter", "test_lookupResourceType_FullSearch_ThreeWords", "test_lookupResourceType_FullSearch_TwoLetter", "test_lookupResourceType_FullSearch_TwoWord", "test_lookupResourceType_FullSearch_MultiWords", "test_lookupResourceType_FullSearchWithTwoLetter", "test_lookupResourceType_FullSearch_twoWord", "test_lookupResourceType_FullSearch_Multiwords", "test_lookupResourceType_FullSearchWithtwoLetter", "test_lookupResourceType_FullSearch_TwoWords", "test_lookupResourceType_FullSearch_twoWords", "test_lookupResourceType_FullSearch_twowords", "test_lookupResourceType_FullSearch_ThreeWord", "test_lookupResourceType_FullSearchWithTwoWords", "test_lookupResourceType_FullSearch_twoLetter", "test_lookupResourceType_FullSearch_Twowords", "test_lookupResourceType_FullSearch_Threewords", "test_lookupResourceType_FullSearch_MultiWord", "test_lookupResourceType_FullSearchWithtwoWord", "test_lookupResourceType_FullSearchWithTwoWord", "test_lookupResourceType_FullSearch_MultiLetter", "test_lookupResourceType_FullSearchWithTwowords", "test_lookupResourceType_FullSearchWithtwowords", "test_lookupResourceType_FullSearchWithtwoWords"], "url": ["build", "sl", "Url", "str", "nl", "resource", "char", "browser", "loader", "service", "ls", "open", "r", "null", "ll", "https", "ssl", "link", "location", "f", "uri", "base", "google", "URL", "job", "get", "ur", "conn", "impl", "document", "u", "name", "http", "rl", "uu", "el", "l", "ul"], "connection": ["settings", "created", "description", "number", "operation", "communication", "resource", "channel", "wrapper", "position", "ion", "creator", "still", "open", "Connection", "network", "creation", "c", "to", "entry", "query", "relation", "condition", "office", "computer", "session", "statement", "instance", "console", "link", "close", "uri", "server", "connect", "information", "using", "message", "conn", "database", "reference", "client", "http", "application", "online", "socket", "pointer", "response", "request", "connected", "directory", "established", "character", "machine", "government", "handler", "con", "collection", "command"]}}
{"id1": "18793482", "id2": "13063241", "code1": "    public void modifyApplicationMessage(String locale, String messageName, String messageValue) {\n        Properties properties = new Properties();\n        try {\n            String i18nPath = ServerUtil.removelastResourceURL(ConfigurationServiceImpl.class.getResource(\"/es/ua/tranube/prototype/main/client/TranubeConstants_en.properties\").getPath()).toString();\n            File englishFile = new File(i18nPath + \"TranubeConstants_en.properties\");\n            if (!englishFile.exists()) throw new Exception(\"English file not found\");\n            String propertiesFilePath = i18nPath + \"TranubeConstants_\" + locale + \".properties\";\n            File file = new File(propertiesFilePath);\n            if (!file.exists()) {\n                FileReader in = new FileReader(englishFile);\n                FileWriter out = new FileWriter(file);\n                int c;\n                while ((c = in.read()) != -1) out.write(c);\n                in.close();\n                out.close();\n            }\n            InputStream is = ConfigurationServiceImpl.class.getResourceAsStream(\"/es/ua/tranube/prototype/main/client/TranubeConstants_\" + locale + \".properties\");\n            BufferedReader breader = new BufferedReader(new InputStreamReader(is));\n            String line = null;\n            StringBuilder strBuilder = new StringBuilder();\n            boolean found = false;\n            while ((line = breader.readLine()) != null) {\n                if (line.startsWith(\"#\")) strBuilder.append(line).append(\"\\n\"); else {\n                    String[] pieces = line.split(\"=\");\n                    if (pieces.length == 2) {\n                        if (pieces[0].trim().equals(messageName)) {\n                            strBuilder.append(pieces[0].trim() + \" = \" + messageValue + \"\\n\");\n                            found = true;\n                        } else strBuilder.append(line).append(\"\\n\");\n                    } else strBuilder.append(line).append(\"\\n\");\n                }\n            }\n            if (!found) strBuilder.append(messageName).append(\" = \").append(messageValue).append(\"\\n\");\n            breader.close();\n            is.close();\n            FileWriter writer = new FileWriter(file);\n            writer.write(strBuilder.toString());\n            writer.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n", "code2": "    public static void copyFile(File src, File dest) throws IOException {\n        FileInputStream fis = new FileInputStream(src);\n        FileOutputStream fos = new FileOutputStream(dest);\n        java.nio.channels.FileChannel channelSrc = fis.getChannel();\n        java.nio.channels.FileChannel channelDest = fos.getChannel();\n        channelSrc.transferTo(0, channelSrc.size(), channelDest);\n        fis.close();\n        fos.close();\n    }\n", "label": 1, "substitutes": {"modifyApplicationMessage": ["modifyapplicationMsg", "modifyServermessage", "modifyServerMessage", "modifyAppmessage", "modureApplicationMsg", "modureAppMessage", "modureApplicationData", "modifyAppData", "modifyapplicationMessage", "modureAppMsg", "modureApplicationMessage", "modifyAppMsg", "modifyapplicationmessage", "modifyApplicationMsg", "modifyapplicationData", "modifyAppMessage", "modifyServerData", "modureApplicationmessage", "modureAppData", "modifyServerMsg", "modifyApplicationmessage", "modifyApplicationData", "modureAppmessage"], "locale": ["locational", "localey", " locales", " localey", "localales", " locALE", "Locale", "Locational", "regale", "regales", "locales", "regALE", " locational", "Localey", "regational", "localaley", "Locales", "localale", "localALE", "LocALE", "locALE", "localational"], "messageName": ["mediaKey", "MessageKey", " messageType", "messageKey", "msgKey", "msgValue", "mediaNAME", "mediaName", "messageType", " messageNames", "messageNAME", "messageNames", " messageNAME", "MessageValue", " messageKey", "MessageName", "msgType", "MessageType", "MessageNames", "MessageNAME", "msgName", "mediaNames"], "messageValue": ["languageName", "languageValue", " messageType", "messageVal", "msgValue", "messageVALUE", "msgvalue", "messageType", "messagevalue", "essageVal", "MessageValue", "MessageName", "languagevalue", "Messagevalue", "essageName", "msgVALUE", "MessageVALUE", "MessageType", "essageValue", " messageVal", "msgName", "MessageVal", "essageType", "languageVALUE"], "properties": ["settings", "pdf", "utils", "results", "pro", "property", "policy", "perties", "profile", " props", "options", "config", "ps", "params", "message", "parts", "files", "project", "pid", "data", "report", "details", "metadata", "json", "types", "prop", " Properties"], "i18nPath": ["i18nePoints", "i18anPoints", "i18lPath", "i18nP", "i18natDriver", "i18neStr", "i18lUrl", "i18bPath", "i8nStr", "i18lStr", "i18bDir", "i18anP", "i18nyDir", "i18lDir", "i18anDir", "i18rPath", "i18nyPath", "i18natP", "i8nUrl", "i18bStr", "i18nePath", "i18nyDriver", "i18neDriver", "i18bUrl", "i18nDir", "i18nDriver", "i18anIf", "i18nPoints", "i18nUrl", "i8lPath", "i8nPath", "i18neUrl", "i18nStr", "i18anPath", "i18rDriver", "i18natPoints", "i18nyIf", "i18neDir", "i18natPath", "i18nIf", "i18rDir", "i8lStr", "i18anDriver", "i18neP", "i18rIf", "i8nDir", "i8lUrl", "i8lDir"], "englishFile": ["englishfile", "languageFiles", "wikiPath", "ianaTable", "enFilename", "Englishfile", "EnglishFilename", "ianafile", "wikifile", "EnglishFiles", " englishDirectory", "EnglishFile", " englishTable", " englishPath", "ianaDirectory", "languagefile", "wikiTable", "ianaPath", "englishPath", "englishTable", "electricFile", "languageFile", "enFile", "enfile", "englishDirectory", "electricDir", "englishPort", "englishDir", "wikiFile", "ianaDir", " englishPort", "ianaPort", "englishFiles", "electricPort", " englishfile", "electricDirectory", "languageFilename", "ianaFile", "enFiles", "englishFilename", " englishDir"], "propertiesFilePath": ["settingsFilePath", "pertiesfilepath", "propertiesfilePath", "propertiesFilenamepath", "propertiesFilenameType", "pertiesFilePath", "propertiesFilesLocation", "propertiesFilenameLocation", "propertiesFileName", "pertiesfilePath", "propertiesFilesType", "pertiesfileType", "pertiesFilepath", "settingsFilenameLocation", "pertiesfileName", "pertiesFileName", "propertiesfileType", "pertiesFileType", "propertiesFilespath", "propertiesFilenameName", "propertiesFileLocation", "propertiesFilenamePath", "settingsFilenamepath", "propertiesFileType", "propertiesFilepath", "settingsFileLocation", "settingsFilenamePath", "propertiesfileName", "propertiesFilesPath", "settingsFilenameName", "propertiesfilepath", "propertiesfileLocation", "settingsFileName", "propertiesFilesName", "settingsFilepath"], "file": ["local", "os", "path", "module", "string", "parent", "io", "resource", "FILE", "print", "channel", "ile", "be", "class", "current", "File", "record", "run", "output", "complete", "filename", "model", "rule", "content", "style", "attribute", "null", "library", "connection", "port", "write", "console", "language", "f", "base", "table", "buffer", "page", "format", "message", "files", "result", "fp", "create", "name", "document", "object", "comment", "application", "data", "source", "report", "key", "image", "use", "fi", "handle", "xml", "domain", "pool", "type", "info", "entry"], "in": ["ic", "en", "sin", "io", "asin", "inf", "al", "cin", "from", "ri", "reader", "ini", "IN", "inc", "i", "inner", "inside", "ar", " din", "iter", "din", "get", "init", "oin", "isin", "input", "ind", "read", "gin", "In", "ai", "ins", "rin", "ir", "it", "bin", "ain", "inn"], "out": ["os", "cos", "again", "at", "log", "put", "sw", "io", "print", "conv", "nt", "aos", "output", "we", "conf", "external", "ex", "to", "n", "check", "write", "inner", "outer", "csv", "o", "set", "net", "screen", "end", "OUT", "Out", "cache", "it", "can", "outs", "ou", "co", "con", "w"], "c": ["d", "mc", "v", "cos", "fc", "unc", "ce", "cu", "char", "k", "t", "count", "ca", "arc", "conf", "lc", "r", "cp", "call", "n", "cod", "i", "cs", "code", "cr", "cc", "col", "cf", "ct", "cl", "\u00e7", "cap", "ch", "cd", "etc", "u", "cm", "nc", "x", "con", "cont", "ac", "chain", "C", "rc", "cb", "l", "cache", "character", "ec", "gc", "pc", "bc", "co", "dc"], "is": ["iss", "ic", "isl", "isa", "sis", "ais", "ri", "iris", "i", "ios", "bis", "sit", "es", "as", "IS", "lis", "its", "\u00eds", "isin", "ris", "sys", "isf", "tis", "Is", "ins", "nis", "it", "isi", "isc", "os", "iso"], "breader": ["browe", " breade", " breadar", "brewer", "bleder", " breadr", "bber", " breadber", "bbr", "browger", "bler", "brewger", "brewber", "bbar", "breadger", "breadber", " breadger", "breadder", "brewe", "brower", "bbder", "bleer", "breade", "breadr", "browber", "breadar", " breadder", "blear"], "line": ["text", "ln", "sample", "cell", "log", "sequence", "string", "nl", "queue", "inline", "point", "mail", "part", "char", "row", "stroke", "phrase", "no", "detail", "record", "left", "rule", "shell", "section", "email", "edge", "range", "word", "ice", "block", "node", "query", "label", "port", "code", "side", "link", "stay", "note", "iter", "trace", "normal", "slice", "message", "lin", "entity", "page", "column", "parse", "lo", "frame", "liner", "comment", "lines", "lane", "ine", "online", "le", "eline", "chain", "header", "Line", "l", "LINE", "ip", "handle", "cmd", "next", "body", "continue", "entry", "se"], "strBuilder": [" strBuffer", "frBuilt", "stringBuild", "strBuilt", " strBuild", "Strbuilder", "stringBuffer", "StrBuffer", "StrBuilder", "strBu", "strBuffer", "frBuild", "StrBuilt", "frParser", " strBu", "objBuilder", "arrParser", "arrBuilder", "strParser", "arrBuffer", "stringParser", "stringBuilder", "stringBuilt", " strbuilder", "StrBuild", "arrbuilder", "StrParser", "objBuild", "arrBu", "frBuilder", "StrBu", "arrBuild", "strbuilder", "objbuilder", " strParser", "strBuild", "objBuffer", "stringbuilder"], "pieces": ["places", "bytes", "terms", "groups", "eps", "Parts", "tips", "sections", "rings", "strings", "fits", "plates", "blocks", "knife", "finals", "bits", "steps", "links", "feet", "caps", "piece", "fixes", "units", "ces", "maps", "pointers", "ps", "times", "letters", "pins", "parts", "its", "ops", "xes", "tools", "services", "lines", "sts", "powers", "items", "keys", "cars", "checks", "words", "players", "cuts", "types", "ties", "ctors"], "found": ["created", "err", "started", "search", "changed", " Found", "printed", "first", "bool", "given", "filled", "sold", "finished", "supported", "used", "old", "count", "loaded", "success", " founded", "identified", "needed", "ed", "compl", "index", "good", "opened", "built", "expected", "valid", "confirmed", "failed", "fixed", "released", "tested", " caught", "sent", "focused", "read", "forced", "Found", "successful", "mounted", " detected", "done", "finder", "empty", "installed", "available", "defined", "find"]}}
{"id1": "9033639", "id2": "16142024", "code1": "    public void testHttpsConnection() throws Throwable {\n        setUpStoreProperties();\n        try {\n            SSLContext ctx = getContext();\n            ServerSocket ss = ctx.getServerSocketFactory().createServerSocket(0);\n            TestHostnameVerifier hnv = new TestHostnameVerifier();\n            HttpsURLConnection.setDefaultHostnameVerifier(hnv);\n            URL url = new URL(\"https://localhost:\" + ss.getLocalPort());\n            HttpsURLConnection connection = (HttpsURLConnection) url.openConnection();\n            SSLSocket peerSocket = (SSLSocket) doInteraction(connection, ss);\n            checkConnectionStateParameters(connection, peerSocket);\n            connection.connect();\n        } finally {\n            tearDownStoreProperties();\n        }\n    }\n", "code2": "    private static final void copyFile(File srcFile, File destDir, byte[] buffer) {\n        try {\n            File destFile = new File(destDir, srcFile.getName());\n            InputStream in = new FileInputStream(srcFile);\n            OutputStream out = new FileOutputStream(destFile);\n            int bytesRead;\n            while ((bytesRead = in.read(buffer)) != -1) out.write(buffer, 0, bytesRead);\n            in.close();\n            out.close();\n        } catch (IOException ioe) {\n            System.err.println(\"Couldn't copy file '\" + srcFile + \"' to directory '\" + destDir + \"'\");\n        }\n    }\n", "label": 0, "substitutes": {"testHttpsConnection": ["testHttpsconnection", "testHhttpConnection", "testHhttpsSession", "testHttTPSSession", "testHttpsSocket", "testHttlesconnection", "testHttpconnection", "testHttlesSession", "testHttTPSSocket", "testHttlesSocket", "testHttpSession", "testHhttpsConnection", "testHhttpsconnection", "testHttlesConnection", "testHhttpSession", "testHhttpconnection", "testHttpConnection", "testHttpsSession", "testHttTPSConnection", "testHttpSocket", "testHhttpsSocket", "testHttTPSconnection", "testHhttpSocket"], "ctx": ["mc", "sq", "cmp", "txt", "np", "src", "qu", "ws", "obj", "nt", "context", "pg", "hs", " cx", "cp", "ssl", "bh", "cc", "config", "cf", "ct", "sc", "jp", "conn", "tmp", "rt", "init", "setup", "Context", "cm", "xc", "nc", "sys", "socket", "pkg", " context", "tc", "cmd", "tx", "pool", "hw", "bc", "co"], "ss": ["sec", "js", "sq", "ks", "ess", "serv", "iss", " SS", "sw", "SS", "ws", "ls", "ssh", "si", "rs", "ts", "rss", "sol", "cs", "https", "ssl", "sa", "sit", "fs", "sf", "sk", "ps", "ses", "sc", "sd", "sp", "sb", "bs", "oss", "ds", "hess", "sys", "soc", "socket", "css", "tx", "sch", "ys"], "hnv": ["kinver", "hnver", "hnov", "kinj", "kinov", "dnov", "hnV", " knw", " knV", "mnw", "kinv", "dnV", " knf", "hnf", "mnf", "dnf", "dnw", "bnver", "dnj", " knv", "hnw", "mnv", "dnv", "bnov", "dnver", "bnv", "bnj", "hnj", "mnV"], "url": ["build", "sl", "address", "log", "Url", "abs", "str", "nl", "b", "char", "browser", "ls", "ol", "r", "dl", "atl", "dll", "ll", "pl", "https", "ssl", "location", "uri", "base", "URL", "net", "sb", "ur", "parse", "ml", "name", "client", "util", "http", "socket", "rl", "mount", "el", "l", "au", "il", "ref", "ul"], "connection": ["subject", "function", "log", "operation", "sequence", "communication", "resource", "channel", "wrapper", "event", "ion", "context", "service", "open", " Connection", "Connection", "network", "cp", "relation", "session", "instance", "condition", "node", "statement", "ssl", "close", "link", "server", "connect", "message", "result", "conn", "database", "client", "object", "application", "data", "socket", "response", "request", "connected", "established", "controller", "character", "management", "handler", "entry", "command"], "peerSocket": ["peerConn", "peConnection", "parentSocket", "peSession", "peerSite", "parentConnection", " peerConnection", "parentConn", "targetConn", "serverConnection", "serverSocket", "peerServer", " peerSession", "parentServer", "targetSocket", "peerSession", " peerSite", "targetServer", "peSite", "peerConnection", " peerServer", "targetConnection", "serverSite", "serverSession", " peerConn", "peSocket"]}}
{"id1": "14473711", "id2": "3945236", "code1": "    public static String str2md5(String str) {\n        try {\n            MessageDigest alga = MessageDigest.getInstance(MESSAGE_DIGEST_TYPE);\n            alga.update(str.getBytes());\n            byte[] digesta = alga.digest();\n            return byte2hex(digesta);\n        } catch (NoSuchAlgorithmException ex) {\n            return str;\n        }\n    }\n", "code2": "    public static void hash(String... plainTexts) {\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            for (String plainText : plainTexts) md.update(plainText.getBytes());\n            byte b[] = md.digest();\n            int i;\n            StringBuffer buf = new StringBuffer(\"\");\n            for (int offset = 0; offset < b.length; offset++) {\n                i = b[offset];\n                if (i < 0) i += 256;\n                if (i < 16) buf.append(\"0\");\n                buf.append(Integer.toHexString(i));\n            }\n            String str = buf.toString();\n            System.out.println(\"result: \" + buf.toString());\n            System.out.println(\"result: \" + buf.toString().substring(8, 24));\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        }\n    }\n", "label": 1, "substitutes": {"str2md5": ["str_MD7", "str2MD5", "str_md7", "str_md5", "str2sha7", "str2md7", "str2dig7", "str2digest", "str_MD5", "str2mdest", "str_mdest", "str2shaest", "str2dig5", "str2MDest", "str2md6", "str2dig6", "str_md6", "str2sha6", "str2sha5", "str_MDest", "str2MD6", "str2MD7", "str_MD6"], "str": ["text", "cur", "v", "dr", "string", "ctr", "p", "txt", "print", "b", "char", "t", "st", "obj", "in", "arr", "msg", "wcs", "url", "r", "oct", "c", "n", "rs", "vol", "res", "cr", "piece", "f", "Str", "br", "s", "sp", "out", "STR", "wr", "ch", "input", "exp", "name", "hex", "data", "sts", "cont", "enc", "tr", "fr"], "alga": ["palha", " alxa", "alxa", " AlGa", " alGa", "agba", "balGa", "balha", "aga", "balba", "algas", " Algas", " calgas", " alba", "alba", " Alba", "bala", " alha", "palga", " calGa", "balga", " calba", " algas", "palba", "agga", "ala", "agxa", "alha", " ala", " Alga", " calga", "alGa", "balxa", "palGa"], "digesta": ["digosi", "igista", "digested", "divista", "designeste", "digella", "divested", "igesta", "digeste", "igresso", "igella", "divella", " digested", "diveste", " digresso", "designested", "designosi", " digella", "divosi", "digista", " digosi", "divresso", "digresso", "divesta", "designesta", " digeste", " digista"]}}
{"id1": "10759917", "id2": "20685385", "code1": "    public void delete(String name) throws FidoDatabaseException, CannotDeleteSystemLinkException, ClassLinkTypeNotFoundException {\n        try {\n            Connection conn = null;\n            Statement stmt = null;\n            try {\n                conn = fido.util.FidoDataSource.getConnection();\n                conn.setAutoCommit(false);\n                stmt = conn.createStatement();\n                if (isSystemLink(stmt, name) == true) throw new CannotDeleteSystemLinkException(name);\n                AdjectivePrepositionTable prepTable = new AdjectivePrepositionTable();\n                prepTable.deleteLinkType(stmt, name);\n                ObjectLinkTable objectLinkTable = new ObjectLinkTable();\n                objectLinkTable.deleteLinkType(stmt, name);\n                String sql = \"delete from ClassLinkTypes where LinkName = '\" + name + \"'\";\n                stmt.executeUpdate(sql);\n                conn.commit();\n            } catch (SQLException e) {\n                if (conn != null) conn.rollback();\n                throw e;\n            } finally {\n                if (stmt != null) stmt.close();\n                if (conn != null) conn.close();\n            }\n        } catch (SQLException e) {\n            throw new FidoDatabaseException(e);\n        }\n    }\n", "code2": "    private Long getNextPkValueForEntityIncreaseBy(String entityName, int count, int increasePkBy) {\n        if (increasePkBy < 1) increasePkBy = 1;\n        String where = \"where eoentity_name = '\" + entityName + \"'\";\n        if (false) {\n            EOEditingContext ec = ERXEC.newEditingContext();\n            ec.lock();\n            try {\n                EODatabaseContext dbc = ERXEOAccessUtilities.databaseContextForEntityNamed((EOObjectStoreCoordinator) ec.rootObjectStore(), entityName);\n                dbc.lock();\n                try {\n                    EOEntity entity = ERXEOAccessUtilities.entityNamed(ec, entityName);\n                    EOAdaptorChannel channel = (EOAdaptorChannel) dbc.adaptorContext().channels().lastObject();\n                    NSArray result = channel.primaryKeysForNewRowsWithEntity(increasePkBy, entity);\n                    return (Long) ((NSDictionary) result.lastObject()).allValues().lastObject();\n                } finally {\n                    dbc.unlock();\n                }\n            } finally {\n                ec.unlock();\n            }\n        } else {\n            ERXJDBCConnectionBroker broker = ERXJDBCConnectionBroker.connectionBrokerForEntityNamed(entityName);\n            Connection con = broker.getConnection();\n            try {\n                try {\n                    con.setAutoCommit(false);\n                    con.setReadOnly(false);\n                } catch (SQLException e) {\n                    log.error(e, e);\n                }\n                for (int tries = 0; tries < count; tries++) {\n                    try {\n                        ResultSet resultSet = con.createStatement().executeQuery(\"select pk_value from pk_table \" + where);\n                        con.commit();\n                        boolean hasNext = resultSet.next();\n                        long pk = 1;\n                        if (hasNext) {\n                            pk = resultSet.getLong(\"pk_value\");\n                            con.createStatement().executeUpdate(\"update pk_table set pk_value = \" + (pk + increasePkBy) + \" \" + where);\n                        } else {\n                            pk = maxIdFromTable(entityName);\n                            con.createStatement().executeUpdate(\"insert into pk_table (eoentity_name, pk_value) values ('\" + entityName + \"', \" + (pk + increasePkBy) + \")\");\n                        }\n                        con.commit();\n                        return new Long(pk);\n                    } catch (SQLException ex) {\n                        String s = ex.getMessage().toLowerCase();\n                        boolean creationError = (s.indexOf(\"error code 116\") != -1);\n                        creationError |= (s.indexOf(\"pk_table\") != -1 && s.indexOf(\"does not exist\") != -1);\n                        creationError |= s.indexOf(\"ora-00942\") != -1;\n                        if (creationError) {\n                            try {\n                                con.rollback();\n                                log.info(\"creating pk table\");\n                                con.createStatement().executeUpdate(\"create table pk_table (eoentity_name varchar(100) not null, pk_value integer)\");\n                                con.createStatement().executeUpdate(\"alter table pk_table add primary key (eoentity_name)\");\n                                con.commit();\n                            } catch (SQLException ee) {\n                                throw new NSForwardException(ee, \"could not create pk table\");\n                            }\n                        } else {\n                            throw new NSForwardException(ex, \"Error fetching PK\");\n                        }\n                    }\n                }\n            } finally {\n                broker.freeConnection(con);\n            }\n        }\n        throw new IllegalStateException(\"Couldn't get PK\");\n    }\n", "label": 1, "substitutes": {"delete": ["put", "replace", "update", "select", "query", "write", "clear", "link", "dump", "insert", "set", "Delete", "lete", "touch", "get", "create", "download", "load", "remove", "save", "drop", "reset", "move", "execute", "destroy", "del", "de", "command"], "name": ["local", "search", "path", "item", "description", "string", "file", "term", "str", "id", "parent", "resource", "part", "old", "ame", "e", "family", "nm", "filename", "url", "names", "NAME", "time", "c", "n", "null", "alias", "label", "connection", "title", "code", "m", "link", "base", "size", "o", "prefix", "ma", "message", "format", "create", "Name", "common", "comment", "error", "data", "me", "source", "value", "key", "chain", "version", "l", "lon", "type", "w", "word"], "CannotDeleteSystemLinkException": ["CannotDeleteSysLinksException", "CannotDeleteSysLinkError", "CannotDeleteSysLinkException", "CannotDeleteSystemTypeEx", "CannotDeleteSystemPageStatus", "CannotDeleteSysLinksEx", "CannotDeleteSystemDataError", "CannotDeleteSystemLinkStatus", "CannotDeleteSystemPageEx", "CannotDeleteSystemLinksEx", "CannotDeleteSystemLinkEx", "CannotDeleteSystemTypeWarning", "CannotDeleteSystemLinkWarning", "CannotDeleteSystemTypeError", "CannotDeleteSystemDataStatus", "CannotDeleteSystemLinksStatus", "CannotDeleteSystemLinksError", "CannotDeleteSysLinksError", "CannotDeleteSysLinkStatus", "CannotDeleteSystemPageError", "CannotDeleteSystemPageException", "CannotDeleteSystemDataEx", "CannotDeleteSystemLinksWarning", "CannotDeleteSystemDataException", "CannotDeleteSystemLinksException", "CannotDeleteSysLinkEx", "CannotDeleteSysLinksStatus", "CannotDeleteSystemLinkError", "CannotDeleteSystemTypeException"], "ClassLinkTypeNotFoundException": ["ClassLinkTypeNotFindException", "ClassLinkTypeIsFindOver", "ClassLinkTypeNotFoundOver", "ClassLinkTypeNotFound ", "ClassLinkTypeNotFind ", "ClassLinkTypeNotUsedEx", "ClassLinkTypeNotFindEx", "ClassLinkTypeNotUsed ", "ClassLinkTypeIsFoundException", "ClassLinkTypeIsFoundOver", "ClassLinkTypeNotFindOver", "ClassLinkTypeIsFindException", "ClassLinkTypeNotUsedException", "ClassLinkTypeNotFoundEx", "ClassLinkTypeIsFoundEx", "ClassLinkTypeNotUsedOver", "ClassLinkTypeIsFindEx", "ClassLinkTypeIsFound ", "ClassLinkTypeIsFind "], "conn": ["win", "pt", "priv", "t", "conv", "Conn", "conf", "cc", "close", "on", "ns", "iw", "ch", "req", "db", "addr", "yes", "pool", "jp", "err", "cur", "ce", "ca", "dn", "open", "pas", "cp", "c", "rel", "ct", "loc", "cn", "client", "sys", "socket", "enc", "pen", "ec", "cmd", "resp", "org", "sec", "mc", "canon", "ws", "obj", "ang", "ctx", "bo", "port", "https", "col", "connect", "cert", "yn", "nc", "exec", "coll", "gc", "en", "mt", "gate", "nt", "pg", "comm", "act", "connection", "ens", "rt", "die", "cb", "pkg", "oc", "co", "con"], "stmt": ["Stmp", "startmp", "Sttm", "stattm", " str", "Stmm", "constmt", "stmp", "stmb", "STmm", " stpr", "str", "strpr", "startmt", "StMT", "startmm", " sttx", "Stpr", " stm", "sttx", "stMT", "sttm", "stpt", "Stpt", "constm", "startMT", "STm", "strm", "statm", "strr", "Str", "STMT", "constmb", "stpr", "snm", "snMT", "STmb", " sttm", "Stmt", "Sttx", "Stm", "snmt", "strmm", "stmm", " stmm", "strMT", "consttm", "Stmb", " stpt", "snpt", "statmt", "strmp", "STmt", "stm", " stmb", " stMT", "STtx", "statMT", "STtm", "strmt"], "prepTable": ["PrepTable", "summaryTable", "ppTab", "PrepTab", "PrepTier", "prepTier", "summaryTier", "ppTable", "prepTab", "prepTree", " prepTree", "pptable", " prepTab", "preptable", "PrepTree", "Preptable", " prepTier", "summarytable", "ppTree", " preptable"], "objectLinkTable": ["objectTypetable", "objectlinkType", " objectLinkType", "objLinkTable", "objectLinkController", "objectLinkType", "objectLinkList", "objectLinktable", "objectLinksList", " objectLinktable", "objectLinksTable", "objectlinktable", "objectTypeTab", "objLinksController", "objectlinkTable", "objLinksTable", "objectTypeTable", "objLinksList", "objectTypeType", "objectlinkTab", "objectLinksController", "objLinkController", "objLinkstable", "objLinktable", "objLinkList", " objectLinkTab", "objectLinkTab", "objectLinkstable"], "sql": ["sl", "js", "sq", "description", "spr", "scl", "string", "str", "nl", "join", "select", "fields", "inv", "url", "dl", "query", "quote", "html", "SQL", "csv", "sf", "ns", "expression", "rel", "form", "sd", "s", "result", "format", "sp", "q", "expr", "fn", "template", "spec", "ips", "sv", "xml", "json", "qs", "ql"]}}
{"id1": "4223002", "id2": "18370075", "code1": "    public String getPasswordMD5() {\n        try {\n            MessageDigest algorithm = MessageDigest.getInstance(\"MD5\");\n            algorithm.reset();\n            algorithm.update(password.getBytes());\n            byte messageDigest[] = algorithm.digest();\n            StringBuffer hexString = new StringBuffer();\n            for (int i = 0; i < messageDigest.length; i++) {\n                hexString.append(Integer.toHexString(0xFF & messageDigest[i]));\n            }\n            return hexString.toString();\n        } catch (NoSuchAlgorithmException nsae) {\n        }\n        return null;\n    }\n", "code2": "    public static byte[] createPasswordDigest(String password, byte[] salt) throws Exception {\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(salt);\n        md.update(password.getBytes(\"UTF8\"));\n        byte[] digest = md.digest();\n        return digest;\n    }\n", "label": 1, "substitutes": {"getPasswordMD5": ["getPasswordSM6", "getPasswordmd5", "getPasswordSM4", "getTokenSM512", "getPasswordMD512", "getPasswordHS5", "getPasswordmd4", "getPasswordSM512", "getTokenMD4", "getPasswordHS512", "getPasswordHS6", "getPasswordMD4", "getTokenSM5", "getTokenSM4", "getPasswordSM5", "getPasswordmd512", "getTokenSM6", "getTokenMD512", "getTokenMD5", "getPasswordMD6", "getTokenMD6", "getPasswordmd6", "getPasswordHS4"], "algorithm": ["alphgebra", " Almother", "malgorith", "alric", "malgorithm", " already", "malchemist", "eargebra", "approgorith", "halignment", "omalgo", "alphric", "Algo", "Algorithm", "thechemist", "halgorith", "themother", "omalgorith", "eargorithm", "halric", " algo", " aluristic", "alphgorithm", "approready", "earric", "malmother", "halgebra", "algo", "eargorith", "Algorith", " algorith", "Aluristic", "thegorithm", "alignment", "already", " Alchemist", "alphgorith", "halready", "omaluristic", "alchemist", "approignment", " Algorithm", "approgorithm", " Algorith", "aluristic", "almother", "algorith", "halgorithm", "thegorith", "algebra", " alignment", "omalgorithm"], "messageDigest": ["messagedigests", "messageDigist", "messageAndester", "MessagedigEST", "messageDigested", "messagedigested", "Messagedigse", "messageDse", "Messagedigest", "messageMixests", "messageDriist", "messageDests", "messagedigEST", "messageAndse", "messageMixse", "messageDigse", " messagedigester", "messageDriester", "messageDrise", "messageDigitalEST", "MessageDigest", "messageDesignester", "messageDigests", "MessageDigse", "MessageDigests", "messageMixEST", "messageDigester", "messageDigEST", "MessageDigester", "messageAndest", "messageDesignest", "messagedigest", "messageMixest", "messageAndist", " messageDigester", "messageDriest", "messagedigist", "Messagedigests", "messageDigitalested", "messageDigitalest", "messageDEST", "messageDigitalester", " messagedigested", "Messagedigester", " messagedigEST", "messageDesignEST", "messageDest", "messageDesignested", " messagedigest", " messageDigested", " messageDigEST", "MessageDigist", "MessageDigEST", "messagedigse", "Messagedigist", "messagedigester"], "hexString": ["octstring", "hexstring", "octString", "stringBuffer", "httpsString", "hexBuffer", "exScreen", "exstring", "httpsstring", " hexBuffer", "textBuffer", "textStatement", "stringstring", " hexstring", "stringArray", "httpsBuffer", "httpsScreen", "exBuffer", " hexArray", "textString", "exString", "httpsArray", "hexScreen", "stringString", "textArray", " hexStatement", "hexStatement", "octScreen", "exArray", "octArray", "hexArray", "httpsStatement"], "i": ["ti", "ji", "I", "ic", "zi", "li", "gi", "io", "my", "point", "is", "di", "ii", "in", "\u0438", "j", "span", "phi", "ri", "mi", "si", "c", "ex", "n", "a", "pi", "ci", "m", "ski", "cli", "yi", "uri", "o", "set", "loop", "ms", "multi", "q", "init", "xi", "ie", "ind", "ei", "u", "gu", "client", "x", "qi", "im", "key", "chain", "ai", "ix", "sim", "ip", "it", "us", "bi", "ui", "hi", "y"]}}
{"id1": "20208819", "id2": "7372311", "code1": "    private static final String hash(String input, String algorithm) {\n        try {\n            MessageDigest dig = MessageDigest.getInstance(algorithm);\n            dig.update(input.getBytes());\n            StringBuffer result = new StringBuffer();\n            byte[] digest = dig.digest();\n            String[] hex = { \"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\" };\n            for (int i = 0; i < digest.length; i++) {\n                int u = digest[i];\n                u &= 0x000000FF;\n                int highCount = u / 16;\n                int lowCount = u - (highCount * 16);\n                result.append(hex[highCount]);\n                result.append(hex[lowCount]);\n            }\n            return result.toString();\n        } catch (NoSuchAlgorithmException e) {\n            return null;\n        }\n    }\n", "code2": "    private void generateDeviceUUID() {\n        try {\n            MessageDigest md5 = MessageDigest.getInstance(\"MD5\");\n            md5.update(deviceType.getBytes());\n            md5.update(internalId.getBytes());\n            md5.update(bindAddress.getHostName().getBytes());\n            StringBuffer hexString = new StringBuffer();\n            byte[] digest = md5.digest();\n            for (int i = 0; i < digest.length; i++) {\n                hexString.append(Integer.toHexString(0xFF & digest[i]));\n            }\n            uuid = hexString.toString().toUpperCase();\n        } catch (Exception ex) {\n            RuntimeException runTimeEx = new RuntimeException(\"Unexpected error during MD5 hash creation, check your JRE\");\n            runTimeEx.initCause(ex);\n            throw runTimeEx;\n        }\n    }\n", "label": 1, "substitutes": {"hash": ["h", "id", "tag", "print", "render", "update", "run", "check", "code", "uri", "dump", "message", "format", "get", " fingerprint", "read", "name", "sign", " Hash", "value", "key", "sha", "password", "Hash", "sum", " hashing", " sum"], "input": ["text", "sample", "string", "sequence", "p", "lat", "char", "Input", "in", "current", "select", "output", "url", "null", "bit", "pattern", "valid", "accept", "config", "form", "prefix", "buffer", "example", "message", "out", "raw", "q", "active", "data", "source", "value", "image", "password", "hello", "request", "empty", "this", " inputs", "command"], "algorithm": ["alphoch", "alabet", " Alabet", "assgorithm", " Aloch", "argorithm", "Algo", "Alabet", "arabet", "Algorithm", " Algo", "Aloch", "alometry", "validgorithm", "aloch", "alphgo", "alphgorithm", "algo", "validabet", "validometry", "assabet", "assometry", "assgo", " Algorithm", "validgo", "argo", "alphabet", "arometry"], "dig": ["cong", "d", "dec", "dash", "dir", "dat", "des", "ld", "mod", "fun", "dep", "nd", "deg", "comm", "ng", "dim", "cr", "fin", "md", "round", "desc", "pers", "sd", "dd", "rd", "Dig", "alg", "rip", "db", "ind", "cd", "od", "bd", "add", " Dig", "enc", "dh", "df", "g", "grad", "del", "plug", "de", "find", "div", "her", "ve"], "result": ["created", "match", "description", "results", "ret", "dat", "term", "make", "ral", "mark", "pixel", "pair", "print", "wrapper", "component", "render", "join", "part", "event", "position", "up", "success", "current", "total", "run", "output", "complete", "product", "r", "proc", "relation", "res", "profile", "summary", "mate", "reason", "br", "prefix", "date", "out", "Result", "user", "create", "comment", "answer", "currency", "report", "region", "use", "rc", "response", "group", "next", "this", "continue", "true", "display"], "digest": ["hasested", "digested", "equgest", " digEST", "Diggest", "Digested", "digenge", "Digse", "Digenge", "DigEST", "dest", "digate", "Digest", "definedested", "displayEST", "displayist", "dgest", "Digate", "equested", " digested", "digEST", " digenge", "digtest", "Digist", "diggest", "displaytest", " digtest", "definedgest", "Digtest", "equest", "dested", "hasate", "definedest", "dist", "equse", "digist", "digse", "displayest", "hasenge", "displayested", "hasest", " digate", "displaygest", "definedse"], "hex": ["sex", "solid", "wh", "h", "alph", "des", "tex", "term", "pex", "rex", "print", "char", "alpha", "hist", "row", " Hex", "percent", "oct", "index", "ex", "check", "zip", "https", "ph", "hw", "html", "def", "form", "com", "serial", "iter", "comp", "raw", "xf", "utf", "ch", "exp", "color", "hl", "zero", "x", "sv", "key", "ape", "json", "tx", "full", "prop", "sh", "nuts"], "i": ["ti", "v", "ji", "I", "batch", "zi", "ic", "li", "gi", "id", "io", "print", "di", "k", "ki", "ii", "z", "conv", "e", "\u0438", "j", "phi", "ri", "mi", "si", "index", "ini", "n", "iu", "a", "pi", "status", "ci", "m", "cli", "f", "uri", "multi", "xi", "ind", "ei", "ij", "x", "qi", "im", "me", "ai", "ix", "ip", "it", "bi", "g", "ui", "info", "hi", "y"], "u": ["d", "v", "h", "hu", "uni", "U", "cu", "b", "bu", "uid", "t", "fu", "up", "num", "you", "c", "mu", "iu", "unsigned", "uv", "f", "su", "ut", "q", "lu", "ur", "user", "ue", "util", "uc", "eu", "uj", "uu", "uint", "us", "au", "tu", "ui", "ou", "nu", "um", "pu", "ul"], "highCount": ["topCode", " highcount", "Highcount", "hiFlag", "HighCount", "highPtr", "lowcount", "highercount", "highcount", "HighCode", "higherCount", "topCount", "HighPtr", "highCode", " highLength", "hiCast", "highLength", " highFlag", "lowCast", "topPtr", "higherAmount", " highPtr", " highAmount", " highCode", "hiCount", "lowFlag", "lowLength", "highCast", "topcount", "lowAmount", " highCast", "highAmount", "hiLength", "higherCast", "highFlag"], "lowCount": ["littleCount", "littleCountry", "ownButton", " lowSum", "highCounter", "midCountry", "littleLength", "midSum", "lowButton", "littleCounter", "ownSum", "ownCount", " lowCold", "midLength", "midCold", "highLength", "midButton", "midCounter", "lowSum", "lowCounter", "lowLength", "highCountry", "midCount", "lowCold", " lowButton", "lowCountry", "ownCold"]}}
{"id1": "12678045", "id2": "19322941", "code1": "    private void addQDInformation() {\n        try {\n            long qdDate = System.currentTimeMillis();\n            if (_local == true) {\n                File qdFile = new File(\"qdinfo.dat\");\n                if (!qdFile.exists()) {\n                    return;\n                }\n                qdDate = qdFile.lastModified();\n            }\n            if (qdDate > this._qdFileDate) {\n                this._qdFileDate = qdDate;\n                for (int ii = 0; ii < this._projectInfo.size(); ii++) {\n                    Information info = getInfo(ii);\n                    if (info != null) {\n                        info._qdValue = null;\n                    }\n                }\n                Reader reader = null;\n                if (_local == true) {\n                    reader = new FileReader(\"qdinfo.dat\");\n                } else {\n                    StringBuffer urlName = new StringBuffer();\n                    urlName.append(\"http://boston.quik.com/rph/\");\n                    urlName.append(\"qdinfo.dat\");\n                    try {\n                        URL url = new URL(urlName.toString());\n                        InputStream stream = url.openStream();\n                        reader = new InputStreamReader(stream);\n                    } catch (MalformedURLException mue) {\n                        mue.printStackTrace();\n                    }\n                }\n                BufferedReader file = new BufferedReader(reader);\n                try {\n                    String line = null;\n                    while ((line = file.readLine()) != null) {\n                        if (line.startsWith(\"pg \")) {\n                            this._qdDate = Long.parseLong(line.substring(3), 16);\n                            this._qdDate = (this._qdDate + 946684800) * 1000;\n                        } else if (line.startsWith(\"pt \")) {\n                            line = line.substring(3).trim();\n                            int pos = -1;\n                            while ((line.length() > 0) && ((pos = line.indexOf(' ')) > 0)) {\n                                int projectNum = 0;\n                                Double value = null;\n                                if (pos > 0) {\n                                    projectNum = Integer.parseInt(line.substring(0, pos));\n                                    line = line.substring(pos).trim();\n                                }\n                                pos = line.indexOf(' ');\n                                if (pos > 0) {\n                                    value = new Double((double) Integer.parseInt(line.substring(0, pos)) / 100);\n                                    line = line.substring(pos).trim();\n                                }\n                                Information info = getInfo(projectNum);\n                                if (info == null) {\n                                    info = createInfo(projectNum);\n                                }\n                                if (info._qdValue == null) {\n                                    info._qdValue = value;\n                                }\n                            }\n                        }\n                    }\n                } finally {\n                    file.close();\n                }\n            }\n        } catch (FileNotFoundException e) {\n        } catch (IOException e) {\n        }\n    }\n", "code2": "    @Test\n    public void test_lookupResourceType_FullSearch_TwoWordsInMiddle() throws Exception {\n        URL url = new URL(baseUrl + \"/lookupResourceType/armor+plates\");\n        HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n        connection.setRequestMethod(\"GET\");\n        connection.setRequestProperty(\"Accept\", \"application/json\");\n        assertThat(connection.getResponseCode(), equalTo(200));\n        assertThat(getResponse(connection), equalTo(\"[{\\\"itemTypeID\\\":25605,\\\"itemCategoryID\\\":4,\\\"name\\\":\\\"Armor Plates\\\",\\\"icon\\\":\\\"69_09\\\"},{\\\"itemTypeID\\\":25624,\\\"itemCategoryID\\\":4,\\\"name\\\":\\\"Intact Armor Plates\\\",\\\"icon\\\":\\\"69_10\\\"}]\"));\n        assertThat(connection.getHeaderField(\"Content-Type\"), equalTo(\"application/json; charset=utf-8\"));\n    }\n", "label": 0, "substitutes": {"addQDInformation": ["addQuestionDinformation", "addQSinformation", "addQDInfo", "addQDinfo", "addQdinformation", "addQDMinformation", "addQDMInformation", "addQuestiondinfo", "addQdInfo", "addQuestionDInfo", "addQSInformation", "addQdInformation", "addQuestiondinformation", "addQSInfo", "addQuestionDinfo", "addQDMinfo", "addQDMInfo", "addQdinfo", "addQuestiondInfo", "addQuestiondInformation", "addQDinformation", "addQSinfo", "addQuestionDInformation"], "qdDate": ["requduDate", "qdtdate", "qdNow", "qdsTime", " qdoNow", "qedNow", "qadDo", " qddate", "requdDat", "qdodate", "qdsDat", "questedNow", "requduDisplay", "qedDo", "qadDate", "questdDo", "qdxDate", "requduDat", "qdoDate", "questedDate", "qdxNow", " qdDat", "requduTime", " qdodate", "qdDo", "qdsDate", "qdmDo", "qdoNow", "qduDat", "questdDate", "qdoDat", "qdsDisplay", "questedDo", "qldTime", " qdDo", "qdxDo", " qdTime", "qdxFile", " qdoDat", "qddate", "requdDisplay", "qdtDate", "qdtNow", "qlDat", "qadDat", "qduDisplay", "questedDat", "qldDisplay", "qlDate", "questdDat", "qduTime", "qdmDate", "questdNow", "qedDate", "requdDate", "qlDo", "qdxTime", "qlNow", "qduDate", "qedDat", "qdxdate", "qdmFile", "qdtDat", "qdmTime", "qadNow", "qldDat", " qdoDate", "qdxDat", "qdTime", "qdDisplay", "qldDate", " qdNow", "requdTime", "qdDat"], "qdFile": [" qdfile", "querydFile", "qdByte", "qmdfile", "qrdFile", "qdmByte", "qdsfile", "qdFilename", "qdsTable", "qsdSourceFile", "querydSourceFile", "iqdoByte", "qmdSourceFile", "iqdByte", "iqdofile", "qdsTime", "qdoByte", "qrdfile", " qdFilename", "querysdSourceFile", "qdmSourceFile", "iqdoFile", "qsdTime", "qdrTable", "iqdSourceFile", "qdrfile", " qdTable", "qdmFile", "qdsByte", "qdmTime", "qrdByte", "qdrFilename", "querysdByte", "querysdTime", "qsdByte", "querydTime", "qdsFile", "qdsFilename", "querydByte", "qdofile", "qdTime", "qdrFile", "qdoSourceFile", "qdTable", "qmdByte", "qdoFile", "qrdSourceFile", "qdfile", "qsdFile", "iqdoSourceFile", "querysdFile", "iqdfile", "iqdFile", "qdSourceFile", "qmdFile", "qdsSourceFile"], "_qdFileDate": ["_qdFileMap", "_qdTotalDate", "_qdfileDo", "_qdDirDo", "_qdUnitDate", "_qdSetNumber", "_qpFileFormat", "_qdDirWrite", "_qdDirDate", "_qdFileFormat", "_qdsFileMap", "_qdfileMap", "_qdFileNumber", "_qdsFileDo", "_qdsFileDate", "_qpFileYear", "_qpFileDate", "_qpTotalFormat", "_qdFileDo", "_qdFileYear", "_qdDirMap", "_qdFileWrite", "_qdsFileNumber", "_qdsfileDate", "_qdSetMap", "_qdfileDate", "_qdsfileNumber", "_qdDirNumber", "_qdsfileMap", "_qdUnitWrite", "_qdSetDo", "_qpTotalYear", "_qdTotalWrite", "_qdSetDate", "_qdfileNumber", "_qdTotalFormat", "_qdTotalYear", "_qpTotalDate", "_qdDirYear", "_qdDirFormat", "_qpFileWrite", "_qdUnitFormat", "_qpTotalWrite", "_qdUnitYear", "_qdsfileDo"], "ii": ["oci", "ti", "aii", "ico", "qq", "zi", "iq", "li", "jj", "gi", "cu", "iona", "di", "ati", "aa", "umi", "iat", "oi", "mi", "si", "ni", "ani", "ishi", "ini", "cgi", "ice", "i", "pi", "iy", "ci", "yi", "ims", " ni", "ski", "inch", "ta", "xi", " iii", "ie", "chi", "ei", "ind", "iri", "ij", "qi", "ku", "ai", "ix", "fi", "sim", "II", "Si", "hi", "ou", "ori", "iii", "ami", "ia", "co", "iso"], "info": ["ti", "item", "INFO", "id", "io", "used", "is", "inf", "join", "Info", "history", "success", "conf", "index", "time", "i", "query", "inner", "instance", "pi", "alias", "status", "summary", "check", "f", "about", "notice", "note", "def", "what", "unknown", "init", "name", "object", "http", "error", "data", "fo", "key", "details", "tip", "ip", "type", "none", "information", "translation", "entry", "iso"], "_qdValue": ["_dqdInfo", "_qDInfo", "_qdResult", "_qDValue", "_qldvalue", "_dqDValue", "_dqDInfo", "_qldInfo", "_dqdValue", "_qDvalue", "_qdvalue", "_qDResult", "_qldValue", "_qldResult", "_qdInfo", "_qdovalue", "_dqDResult", "_qdoInfo", "_dqdvalue", "_qdoResult", "_dqdResult", "_dqDvalue", "_qdoValue"], "reader": ["pull", "dr", "lr", "redo", "resource", "wrapper", "rx", "loader", "ner", "row", "then", "Reader", "holder", "r", "library", "relation", "inner", "worker", "rar", "upper", "ro", "feed", "builder", "runner", "rot", "iterator", "iter", "buffer", "dd", "READ", "writer", "parser", "read", "rr", "random", "data", "reading", "rl", "driver", "handle", "body", "er", "handler"], "urlName": ["rowname", "UrlString", "lName", "URLNames", "URLString", "UrlN", "strName", "urlString", " urlname", "UrlDefault", "urlKey", "lNames", " urlDefault", "UrlKey", "strKey", "urlDefault", " urlNames", "lname", "rowNames", "urlPath", "UrlName", "URLName", " urlKey", "URLPath", "strname", "rowN", "rowName", "UrlNames", " urlString", "urlname", "strNames", "lN", "urlNames", "URLKey", "UrlPath", "URLname", "URLDefault", " urlPath", "urlN", "Urlname"], "url": ["sl", "gl", "address", "lr", "string", "Url", "str", "nl", "resource", "mail", "b", "char", "browser", "open", "re", "r", "ll", "host", "ssl", "link", "console", "location", "f", "uri", "rel", "URL", "loc", "ur", "user", "name", "hl", "bel", "http", "rl", "mount", "l", "mb", "ref"], "stream": ["system", "sl", "sample", "pod", "REAM", "str", "sw", "resource", "channel", "Stream", "clean", "in", "row", "stack", "network", "inner", "instance", "feed", "present", "console", "poll", "iterator", "iter", "form", "buffer", "screen", "message", "input", "stage", "data", "ream", "socket", "cont", "window", "platform", "body"], "file": ["dir", "io", "FILE", "fd", "ile", "loader", "in", "File", "run", "open", "rule", "filename", "r", "range", "port", "f", "fs", "buffer", "table", "page", "message", "format", "files", "fast", "writer", "fp", "input", "db", "tree", "document", "data", "report", "header", "handle", "fr", "body", "handler"], "line": ["sample", "queue", "point", "print", "part", "e", "job", "trace", "dd", "comment", "eline", "header", "LINE", "entry", "ln", "rule", "ice", "query", "side", "iter", "out", "raw", "lo", "frame", "online", "one", "chain", "Line", "handle", "ip", "cmd", "next", "body", "sql", "word", "cell", "log", "field", "channel", "level", "position", "phrase", "detail", "record", "section", "range", "port", "code", "piece", "normal", "buffer", "page", "message", "user", "liner", "error", "lines", "ine", "l", "string", "sequence", "inline", "store", "char", "row", "no", "block", "node", "link", "note", "lin", "column", "le", "continue", "se"], "_qdDate": ["_kdTotal", "_kdGeneral", "_iqdValue", "_qdxFile", "_qdtTime", "_qlDate", "_qdoFile", "_qdsDate", "_iqtTime", "_qudDate", "_qdtDat", "_qdtDate", "_iqtDate", "_iqtValue", "_qdmFile", "_kdxFile", "_qdoPort", "_qdFile", "_qdTime", "_qdxDate", "_qtDate", "_qdmTotal", "_kdxDate", "_qtTime", "_iqdDat", "_qdtPort", "_qdoDate", "_qlValue", "_qudPort", "_qdsDat", "_qudtTime", "_qdsPort", "_kdxGeneral", "_qudDat", "_qdTotal", "_qtValue", "_qdxTotal", "_qdPort", "_qdoTime", "_qdsValue", "_qudTime", "_qdmDate", "_iqdDate", "_qudtDat", "_iqtDat", "_qdoTotal", "_qlTime", "_qdoDat", "_qlDat", "_qdDat", "_kdFile", "_kdDate", "_qdsTime", "_qdxGeneral", "_iqdTime", "_qdGeneral", "_qdoGeneral", "_qudtDate", "_qudtPort", "_qtDat", "_kdxTotal", "_qdmGeneral"], "pos": ["pose", "win", "neg", "cos", "pt", "p", "Pos", "pro", "point", "part", "length", "prot", "px", "po", "start", "position", "num", "slot", "no", "max", "pres", "conf", "apo", "len", "axis", "index", "n", "snap", "i", "port", "pat", "present", "o", "ps", "def", "prefix", "loc", "sp", "pid", "min", "ind", "offset", "POS", "exp", "zero", "pr", "add", "or", "nos", "top", "pad", "yes", "cond", "proc", "pc", "os", "size"], "projectNum": ["componentNumber", " projectnum", "ProjectNumber", "projectNumber", "componentNum", "projectNo", "Projectnum", "modelNo", "ProjectConn", " projectConn", " projectNumber", "componentConn", "projectnum", "componentNo", "componentnum", "componentDir", "modelDir", "projectConn", "projectDir", "modelNum", "ProjectNum", " projectDir", "modelnum", " projectNo"], "value": ["val", "v", "description", "number", "field", "point", "VALUE", "property", "total", "scale", "index", "Value", "port", "profile", "feature", "result", "format", "project", "ue", "name", "object", "data", "distance", "key", "unit", "type", "values"]}}
{"id1": "8046691", "id2": "841724", "code1": "    private void retrieveFile(URL url, RSLink link) {\n        link.setStatus(RSLink.STATUS_DOWNLOADING);\n        HttpURLConnection httpConn = null;\n        DataOutputStream outs = null;\n        BufferedInputStream bins = null;\n        BufferedOutputStream bouts = null;\n        try {\n            String postData = URLEncoder.encode(\"mirror\", \"UTF-8\") + \"=\" + URLEncoder.encode(url.toString(), \"UTF-8\");\n            httpConn = (HttpURLConnection) url.openConnection();\n            httpConn.setRequestMethod(\"POST\");\n            httpConn.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\n            httpConn.setRequestProperty(\"Content-Length\", \"\" + Integer.toString(postData.getBytes().length));\n            httpConn.setRequestProperty(\"Content-Language\", \"en-US\");\n            httpConn.setDoOutput(true);\n            httpConn.setDoInput(true);\n            outs = new DataOutputStream(httpConn.getOutputStream());\n            outs.writeBytes(postData);\n            outs.flush();\n            Pattern mimePattern = Pattern.compile(\".+/html.+\");\n            Matcher matcher = mimePattern.matcher(httpConn.getContentType());\n            if (matcher.find()) {\n                log(\"Can not download, maybe all RS slots are busy!\");\n                return;\n            }\n            link.setSize(httpConn.getContentLength());\n            bins = new BufferedInputStream(httpConn.getInputStream(), 4096);\n            bouts = new BufferedOutputStream(new FileOutputStream(link.getFile()), 4096);\n            link.setStatus(RSLink.STATUS_DOWNLOADING);\n            link.setDown(0);\n            byte[] byteBuffer = new byte[4096];\n            int count;\n            while ((count = bins.read(byteBuffer)) != -1) {\n                bouts.write(byteBuffer, 0, count);\n                link.setDown(link.getDown() + count);\n                if (!Main.start.get()) {\n                    link.setStatus(RSLink.STATUS_NOTHING);\n                    return;\n                }\n            }\n            link.setStatus(RSLink.STATUS_DONE);\n        } catch (IOException ex) {\n            log(\"I/O Exception!\");\n            link.setStatus(RSLink.STATUS_NOTHING);\n        } finally {\n            try {\n                if (outs != null) outs.close();\n                if (bouts != null) bouts.close();\n                if (bins != null) bins.close();\n            } catch (IOException ex) {\n                JOptionPane.showMessageDialog(null, \"Can not close some connections:\\n\" + ex.getMessage(), \"ERROR\", JOptionPane.ERROR_MESSAGE);\n            }\n            if (httpConn != null) httpConn.disconnect();\n        }\n    }\n", "code2": "    private static void readAndRewrite(File inFile, File outFile) throws IOException {\n        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n        Dataset ds = DcmObjectFactory.getInstance().newDataset();\n        dcmParser.setDcmHandler(ds.getDcmHandler());\n        dcmParser.parseDcmFile(null, Tags.PixelData);\n        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        System.out.println(\"reading \" + inFile + \"...\");\n        pdReader.readPixelData(false);\n        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n        ds.writeDataset(out, dcmEncParam);\n        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n        System.out.println(\"writing \" + outFile + \"...\");\n        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        pdWriter.writePixelData();\n        out.flush();\n        out.close();\n        System.out.println(\"done!\");\n    }\n", "label": 0, "substitutes": {"retrieveFile": ["detrieveLocal", "retrievedFile", "detrievedLocal", "detrievedFile", "retractFile", "retireLocal", "retrievedLink", "detrieveFile", "retractLink", "retrieveLocal", "retrieveLink", "retrievedImage", "detrievedImage", "retireFile", "retractLocal", "retireImage", "retireLink", "detrieveLink", "retrieveImage", "retrievedLocal", "detrieveImage", "detrievedLink", "retractImage"], "url": ["arl", "build", "sl", "path", "address", "string", "file", "Url", "abs", "str", "nl", "id", "resource", "char", "remote", "row", "ls", "run", "call", "cp", "dl", "ll", "pl", "host", "ssl", "location", "m", "f", "uri", "base", "URL", "job", "web", "get", "ur", "ml", "name", "u", "un", "bel", "http", "rl", "image", "el", "rect", "l", "ref"], "link": ["local", "master", "build", "path", "map", "msg", "ink", "network", " lock", "pack", "ssl", "base", "linked", " relay", "db", "line", "sign", "load", "key", "list", "task", "share", "Link", "entry", "install", "system", "lib", "tag", "loader", "open", "links", "cp", "check", "query", "write", "status", "rel", "set", "loop", "get", " block", "image", "handle", "stream", "log", "li", "ld", "mark", "mail", " reload", "tool", "detail", "style", " delay", "light", "dl", "relation", "def", "message", " load", "page", "init", "ml", "error", "l", "type", " jump", "ment", "lock", "file", "post", " check", "remote", " LINK", "ls", "go", "index", "thread", "library", "block", "label", "let", "download", "le", "add", "self", "info"], "httpConn": ["httpsCons", "appConn", "httpsconn", " httpConnect", "appconn", "socketconn", "hoverCt", "realConn", "socketConnection", "HTTPCon", "ttpCons", "HTTPConn", "htmlConnect", "httpsConnect", "appConnect", "localconn", "hoverCons", "internalConn", "ttpSyn", "internalCt", "localConnection", "ttpconn", "httpCon", "localConn", "realConnect", "ttpCon", "ttpConnect", "HttpConn", "HttpConnect", "httpsConn", "httpCt", "hoverCon", "httpConnection", " httpCmd", "httpCmd", "socketConnect", "ttpConn", "ttpCmd", "hoverConn", " httpCons", "internalConnection", "HTTPConnect", " httpConnection", "httpsCon", "socketConn", "internalConnect", "realCt", "ttpConnection", "internalCon", "hoverSyn", "httpCons", " httpCt", "HttpConnection", "httpsCmd", "htmlCt", "hoverConnect", "internalconn", " httpSyn", "htmlconn", "HTTPCons", "httpsConnection", " httpCon", "httpconn", "ttpCt", "appConnection", "hoverConnection", "httpConnect", "realconn", " httpconn", "localCon", "htmlConn", "HttpCon", "httpSyn"], "outs": ["gets", "plays", "yout", "cells", "ks", " layouts", "cos", "lists", "uts", "ats", "eps", "ows", "boxes", "aos", "ls", "fits", "tops", "bits", "gs", "nets", "ts", "uds", " ops", "ios", "aps", "obs", "ims", "dates", "als", "ns", "sets", "ports", " out", "ches", "s", "bs", "out", "locks", "its", "ops", "lets", "vals", "ds", "ips", "orts", "uns", "ends", "aches", "nos", "offs", "ins", "uploads", "checks", "qs", " outputs", "os"], "bins": ["binos", "win", "wobs", "bkins", "routs", "bans", " bans", "blouts", " binn", "wouts", "linn", "hobs", "lins", "blids", "blinos", " bids", "linos", "binn", "hin", "wins", "lobs", "blans", "rins", "hins", "lin", " binos", "rans", "bids", "bobs", "lids", "blins", "louts", "houts", "blinn", "rkins", "bin", "blkins", " bkins"], "bouts": ["obbs", "bbyout", " baints", " baos", "wbonds", "fbouts", "fbyout", "bbins", "bbs", "wouts", "bbbs", "obins", "waints", "baints", "wbouts", "Baos", "bbouts", "bout", "Bins", "wins", "wbout", "waos", "fbbs", " bout", " bonds", "wonds", "Baints", "byout", "obouts", "baos", "bonds", "wout", "obyout", "Bouts", "wbaos", "fbins"], "postData": ["PostData", "Postdata", "formDATA", "postsData", "postDATA", " postdata", "POSTBody", "postQuery", "formdata", "PostBytes", "postDat", "PostBody", "POSTdata", "PostQuery", "postBody", " postBody", " postDat", "POSTDat", "POSTQuery", "postsBytes", "formDat", " postDATA", "postsDATA", "postBytes", "postsdata", "postdata", "POSTDATA", "PostDATA", " postQuery", "formData", "POSTData", "POSTBytes", " postBytes"], "mimePattern": ["smimeFormat", "mimesPattern", " muxpattern", "smetypattern", "mimesTemplate", "muxTemplate", "smetyFormat", "metyPattern", "metyFormat", "mimeTemplate", "metyTemplate", "smimePattern", "muxPattern", " muxPattern", "mimesFormat", " mimeTemplate", "metypattern", " muxTemplate", "smimepattern", "mimepattern", "mIMEPattern", "mimespattern", "mimeFormat", " mimepattern", "mIMEpattern", "smetyPattern", "muxpattern", "mIMEFormat"], "matcher": ["stather", "Mature", "matter", "dismatch", "match", "Match", "Matching", "statching", "matching", "patcher", "mather", "Matches", "Matcher", " match", "disure", "Mather", "Matmatch", " matches", "Matter", " mather", "statter", " matter", "pather", "matmatch", "matches", "discher", "patch", "patter", " matching", "statcher", " mature", "disches", "mature", " matmatch"], "byteBuffer": ["wordBuffer", "charBuff", "letterBuffer", "charVar", "wordMatrix", "wordFrame", "bBuffer", " byteFFER", "ByteFFER", "byteVar", " bytebuffer", "noteVar", " byteVar", "byteMatrix", "charBuilder", " byteBuilder", "ByteBuff", "noteBuilder", " byteFrame", "letterMatrix", "bBuff", "wordbuffer", "letterbuffer", "charBuffer", "bFFER", "byteFrame", "byteBuff", "letterFrame", "Bytebuffer", "noteBuffer", "byteFFER", "noteBuff", "byteBuilder", "bbuffer", " byteBuff", "bytebuffer", "ByteBuffer", " byteMatrix"], "count": ["err", "val", "force", "batch", "number", "ctr", "first", "ount", "amount", "length", "char", "start", "num", "child", "nt", "current", "total", "more", "max", "conf", "len", "call", "index", "c", "n", "check", "code", "cc", "iter", "loop", "buffer", "counter", "result", "found", "acc", "ch", "core", "all", "cap", "read", "ind", "Count", "comment", "cont", "add", "list", "C", "sum", "cache", "depth", "find", "continue", "last", "cycle", "size"]}}
{"id1": "1798720", "id2": "9347451", "code1": "    public static void save(String packageName, ArrayList<byte[]> fileContents, ArrayList<String> fileNames) throws Exception {\n        String dirBase = Util.JAVA_DIR + File.separator + packageName;\n        File packageDir = new File(dirBase);\n        if (!packageDir.exists()) {\n            boolean created = packageDir.mkdir();\n            if (!created) {\n                File currentPath = new File(\".\");\n                throw new Exception(\"Directory \" + packageName + \" could not be created. Current directory: \" + currentPath.getAbsolutePath());\n            }\n        }\n        for (int i = 0; i < fileContents.size(); i++) {\n            File file = new File(Util.JAVA_DIR + File.separator + fileNames.get(i));\n            FileOutputStream fos = new FileOutputStream(file);\n            fos.write(fileContents.get(i));\n            fos.flush();\n            fos.close();\n        }\n        for (int i = 0; i < fileNames.size(); i++) {\n            File fileSrc = new File(Util.JAVA_DIR + File.separator + fileNames.get(i));\n            File fileDst = new File(dirBase + File.separator + fileNames.get(i));\n            BufferedReader reader = new BufferedReader(new FileReader(fileSrc));\n            BufferedWriter writer = new BufferedWriter(new FileWriter(fileDst));\n            writer.append(\"package \" + packageName + \";\\n\");\n            String line = \"\";\n            while ((line = reader.readLine()) != null) writer.append(line + \"\\n\");\n            writer.flush();\n            writer.close();\n            reader.close();\n        }\n    }\n", "code2": "    public void writeData(String name, int items, int mzmin, int mzmax, long tstart, long tdelta, int[] peaks) {\n        PrintWriter file = getWriter(name + \".txt\");\n        file.print(\"Filename\\t\");\n        file.print(\"Date\\t\");\n        file.print(\"Acquisition #\\t\");\n        file.print(\"\ufffdm Diameter\\t\");\n        for (int i = mzmin; i <= mzmax; i++) file.print(i + \"\\t\");\n        file.println();\n        int nothing = 0;\n        String fileLoc = \"C:/abcd/\" + name + \".txt\\t\";\n        Date tempDate;\n        for (int i = 0; i < items; i++) {\n            tempDate = new Date(tstart);\n            tstart += tdelta;\n            file.print(fileLoc);\n            file.print(dateFormat.format(tempDate) + \"\\t\");\n            file.print(i + 1 + \"\\t\");\n            double t = (double) (i) / 10;\n            file.print(t + \"\\t\");\n            boolean peaked = false;\n            for (int k = mzmin; k <= mzmax; k++) {\n                for (int j = 0; j < peaks.length && !peaked; j++) {\n                    if (k == peaks[j]) {\n                        file.print(peakVals[j % peakVals.length] + \"\\t\");\n                        peaked = true;\n                    }\n                }\n                if (!peaked) {\n                    if (k == mzmax) file.print(nothing); else file.print(nothing + \"\\t\");\n                }\n                peaked = false;\n            }\n            file.println();\n        }\n        try {\n            Scanner test = new Scanner(f);\n            while (test.hasNext()) {\n                System.out.println(test.nextLine());\n            }\n            System.out.println(\"test\");\n        } catch (Exception e) {\n        }\n        file.close();\n    }\n", "label": 1, "substitutes": {"save": ["Save", "send", " seal", "delete", "saving", "store", "aw", "update", "export", "filename", "pack", "zip", "release", "accept", "dump", "init", "download", "upload", "register", "data", "folder", " Save", "version", "pkg", "archive", "install"], "packageName": ["pkgname", "pkgType", "pkgId", " packageCode", "pkgKey", " packagename", "pkgNames", " packageId", "PackageType", "PackageId", "packageType", "packageKey", " packageKey", "modulename", "pkgCode", "packageId", "packageCode", "moduleName", "pkgName", "PackageNames", "packagename", "moduleCode", "PackageName", "packageNames", "moduleId", " packageNames", "moduleKey", " packageType", "moduleNames"], "fileContents": ["byteContent", "byteValues", "byteNames", "FileBytes", "pageNames", "FileItems", "fileBytes", "byteContents", "pageBytes", "fileItems", " fileItems", "fileContent", " fileValues", "fileIngredients", " fileBytes", "pageItems", " fileContent", "FileContents", "packageContents", " fileIngredients", "fileValues", "pageContents", "packageIngredients", "FileContent", "FileNames", "FileValues", "FileIngredients", "packageNames", "packageContent"], "fileNames": ["resourceTypes", " fileLeaks", "dirKeys", "FileKeys", "issueNames", "resourceNumbers", "issueName", "resourceValues", "dirTypes", "fileVaults", "fieldContents", "dirLeaks", "issueVaults", "fieldNumbers", "dirNames", "messageKeys", "fileLeaks", "FileLeaks", " fileValues", "fileNumbers", "fileKeys", "resourceContents", "moduleContents", "messageNames", " fileKeys", "fileTypes", "fieldTypes", "moduleVaults", "FileTypes", "FileContents", "FileName", "messageName", " fileName", "moduleName", "fileValues", "fileName", "resourceNames", "issueContents", " fileTypes", "FileNames", "fieldNames", "FileValues", " fileVaults", " fileNumbers", "messageValues", "moduleNames"], "dirBase": ["folderBase", " directoryBase", "folderBas", "folderBasic", "dirSet", "DirBuilder", "directoryBasic", "dirBasic", "folderbase", "directoryBas", " directoryBottom", "pkgBas", "pathBas", " directoryBas", "DIRBas", "DirBase", "irBase", "irSet", "DIRBuilder", "pathbase", "dirBas", "DirBottom", "directorybase", "DIRBase", "pkgSet", "dirBuilder", " directoryBuilder", "DirBas", "pathBasic", "irbase", "dirbase", "pkgbase", "DIRBottom", "directorySet", "pkgBase", "irBas", "directoryBase", "dirBottom", "pathBase"], "packageDir": [" packagePath", "podDef", " packageRel", "installDist", "packageDef", " packageFolder", " packageDef", "podDist", "packageDist", "modulePath", "installDir", "pkgPath", "moduleFolder", "packageD", "installDef", "moduleRel", " packageDist", "moduleDir", " packageD", "moduleDef", "podD", "packagePath", "pkgDef", "podDir", "installD", "pkgDir", "pkgFolder", "packageRel", "pkgRel", "packageFolder"], "created": ["started", "added", " started", "filled", "printed", "given", "generated", "Created", "loaded", "reported", "recorded", "developed", "creation", "founded", " generated", "TED", "provided", "present", "confirmed", "released", "registered", "arted", "creat", "allowed", "create", "forced", "associated", "locked", "successful", "mounted", "made", "called", "produced", "raised", "ready", "installed", "joined", "defined", "existent", "checked", "ced", "creator", "activated"], "currentPath": ["recentPath", "currentCh", " currentName", "currentPoint", "currentParent", "CurrentParent", " currentPoint", "CurrentPath", "CurrentPoint", " currentParent", "CurrentFile", "currentlyCh", "currentlyName", "currentlyFile", "recentPoint", " currentCh", "recentParent", "recentName", "currentlyPath", "currentName", " currentFile", "CurrentCh", "currentFile", "CurrentName"], "i": ["I", "iq", "jj", "ini", "cgi", "iy", "ci", "m", "f", "slice", "exp", "qi", "key", "ix", "ui", "this", "iii", "y", "v", "ic", "zi", "p", "gi", "in", "phi", "oi", "ri", "mi", "ex", "iu", "status", "cli", "o", "major", "me", "chain", "ip", "ti", "batch", "them", "li", "id", "my", "ity", "si", "pi", "yi", "multi", "init", "ind", "ei", "ij", "im", "ai", "sim", "it", "bi", "hi", "ami", "ji", "di", "ki", "ii", "j", "go", "index", "mu", "ski", "uri", "q", "xi", "ie", "u", "g", "info", "os"], "file": ["local", "path", "et", "dir", "p", "log", "h", "parent", "io", "resource", "FILE", "disk", "ile", "child", "row", "File", "rule", "port", "link", "f", "sf", "base", "set", "play", "buffer", "table", "page", "format", "db", "name", "template", "comment", "source", "le", "fo", "header", "l", "handle", "info", "pool", "type", "body", "handler"], "fos": ["sfos", "Fos", "sfaos", "oos", "woss", "floses", "ffos", "flo", "faos", " fow", "ffaos", " fOS", " fo", "woes", " foes", "ffo", "fbos", "fow", "fbow", "foss", "fbaos", "woses", "foes", "flos", "Faos", " faos", "Foes", "fbo", "floss", "ffoes", "oow", " foses", "floes", "Fo", "sfOS", "fo", "oaos", "sfoss", "foses", "fOS", "FOS", "flaos", "oo", "wos", " foss", "Foss"], "fileSrc": ["jobSri", "fileSRC", "fileNrc", "fileNrl", "jobNci", "fileInource", " fileInsource", "fileNci", "fileErc", " fileSRC", "fileInsRC", "jobSci", "fileDri", "fileDrc", "jobNri", " fileInsrc", "fileInssrc", " fileSource", "fileInRC", "jobNrl", "fileSource", " fileInsRC", "fileEci", "fileSri", "fileDsrc", "jobNrc", "fileInrc", "fileDource", "jobSrc", " fileInssrc", "fileSsrc", "fileDci", "fileDRC", "fileSrl", "fileSci", "fileErl", "fileInsource", "fileInsrc", "fileEri", "jobSrl", "fileNri", " fileSsrc", "fileDrl"], "fileDst": ["fileNot", "FileSpl", "fileSld", "fileWpl", "FileDst", "fileSlt", "FileSot", "fileDld", "fileDnd", "FileDld", "fileSot", "filedld", "fileDot", "FileDnd", "FileSld", "fileNnd", "fileNpl", "FileSlt", "fileNst", "fileDlt", "FileSnd", "fileSpl", "filedst", "fileSnd", "fileWot", "fileWlt", "fileNlt", "fileSst", "fileNld", "FileDcr", "fileDcr", "FileDlt", "filedcr", "FileSst", "FileScr", "filednd", "fileNcr", "FileDpl", "fileScr", "fileWst", "fileDpl", "FileDot"], "reader": ["dr", "ocker", "Larry", "handler", "resource", "roller", "oder", "rx", "loader", "ader", "ner", "context", "row", "Reader", "review", "ri", "r", "entry", "query", "ro", "inner", "upper", "ler", "rot", "runner", "book", "iterator", "iter", "buffer", "read", "parser", "rr", "readable", "reading", "rer", "rl", "actor", "driver", "rc", "controller", "er", "stream", "rar", "author"], "writer": ["later", "player", "function", "riter", "variable", "print", "wrapper", "test", "store", "browser", "loader", "wright", "adder", "creator", "service", "Reader", "flush", "manager", "storage", "maker", "walker", "editor", "query", "write", "worker", "console", "outer", "runner", "builder", "server", "iterator", "iter", "writers", "buffer", "table", "format", "draw", "user", "read", "parser", "document", "client", "caster", "liner", "ter", "println", "Writer", "report", "driver", "writing", "window", "order", "wire", "operator", "stream", "handler", "entry", "w", "word"], "line": ["text", "ln", "kin", "sample", "cell", "number", "string", "sequence", "nl", "inline", "point", "print", "ole", "row", "stroke", "detail", "record", "style", "rule", "edge", "range", "block", "node", "port", "label", "code", "link", "valid", "pe", "page", "message", "lin", "entity", "date", "column", "user", "frame", "liner", "comment", "ine", "source", "le", "eline", "lined", "chain", "header", "Line", "l", "LINE", "continue", "entry", "word"]}}
{"id1": "22135199", "id2": "8011262", "code1": "    public void testCodingEmptyFile() throws Exception {\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        WritableByteChannel channel = newChannel(baos);\n        HttpParams params = new BasicHttpParams();\n        SessionOutputBuffer outbuf = new SessionOutputBufferImpl(1024, 128, params);\n        HttpTransportMetricsImpl metrics = new HttpTransportMetricsImpl();\n        LengthDelimitedEncoder encoder = new LengthDelimitedEncoder(channel, outbuf, metrics, 16);\n        encoder.write(wrap(\"stuff;\"));\n        File tmpFile = File.createTempFile(\"testFile\", \"txt\");\n        FileOutputStream fout = new FileOutputStream(tmpFile);\n        OutputStreamWriter wrtout = new OutputStreamWriter(fout);\n        wrtout.flush();\n        wrtout.close();\n        FileChannel fchannel = new FileInputStream(tmpFile).getChannel();\n        encoder.transfer(fchannel, 0, 20);\n        encoder.write(wrap(\"more stuff\"));\n        String s = baos.toString(\"US-ASCII\");\n        assertTrue(encoder.isCompleted());\n        assertEquals(\"stuff;more stuff\", s);\n        tmpFile.delete();\n    }\n", "code2": "    private void uploadFile() {\n        String end = \"\\r\\n\";\n        String twoHyphens = \"--\";\n        String boundary = \"*****\";\n        try {\n            URL url = new URL(actionUrl);\n            HttpURLConnection con = (HttpURLConnection) url.openConnection();\n            con.setDoInput(true);\n            con.setDoOutput(true);\n            con.setUseCaches(false);\n            con.setRequestMethod(\"POST\");\n            con.setRequestProperty(\"Connection\", \"Keep-Alive\");\n            con.setRequestProperty(\"Charset\", \"UTF-8\");\n            con.setRequestProperty(\"Content-Type\", \"multipart/form-data;boundary=\" + boundary);\n            DataOutputStream ds = new DataOutputStream(con.getOutputStream());\n            ds.writeBytes(twoHyphens + boundary + end);\n            ds.writeBytes(\"Content-Disposition: form-data; \" + \"name=\\\"file1\\\";filename=\\\"\" + newName + \"\\\"\" + end);\n            ds.writeBytes(end);\n            FileInputStream fStream = new FileInputStream(uploadFile);\n            int bufferSize = 1024;\n            byte[] buffer = new byte[bufferSize];\n            int length = -1;\n            while ((length = fStream.read(buffer)) != -1) {\n                ds.write(buffer, 0, length);\n            }\n            ds.writeBytes(end);\n            ds.writeBytes(twoHyphens + boundary + twoHyphens + end);\n            fStream.close();\n            ds.flush();\n            InputStream is = con.getInputStream();\n            int ch;\n            StringBuffer b = new StringBuffer();\n            while ((ch = is.read()) != -1) {\n                b.append((char) ch);\n            }\n            showDialog(b.toString().trim());\n            ds.close();\n        } catch (Exception e) {\n            showDialog(\"\" + e);\n        }\n    }\n", "label": 0, "substitutes": {"testCodingEmptyFile": [" testCachingemptyStream", " testCachingEmptyFiles", " testCodingEmptyFiles", " testCodingFullfile", " testCodingFullStream", " testCachingemptyfile", " testCodingemptyFiles", " testCachingemptyFiles", " testCodingEmptyfile", " testCodingSizefile", " testCodingFullFiles", " testCodingEmptyStream", " testCodingSizeFile", " testCachingEmptyFile", " testCodingemptyfile", " testCodingemptyFile", " testCodingSizeFiles", " testCachingemptyFile", " testCachingEmptyStream", " testCodingSizeStream", " testCodingemptyStream", " testCodingFullFile", " testCachingEmptyfile"], "baos": ["boos", " bao", " baoss", "taoS", "booss", "tao", "Bao", " baOs", "boo", "BaOs", "boOS", "taos", "Baos", "baoS", "caOs", "aoOs", "aoos", "taOs", "baOS", " baoS", "Baoss", "boOs", "caoS", "bao", "aoo", " baOS", "aoOS", "baOs", "cao", "caos", "baoss"], "channel": ["system", "batch", "file", "queue", "io", "resource", "component", "context", "service", "Channel", "network", "c", "block", "session", "connection", "console", "chan", "room", "server", "buffer", "message", "out", "container", "ch", "input", "client", "caster", "cm", "application", "socket", "password", "chain", "window", "cache", "controller", "can", "stream", "handler", "con", "command"], "params": ["settings", " parameters", "cms", "cmp", "Par", "radius", "p", "pps", "limits", "properties", "conf", "names", "rs", "ctx", "headers", "proc", "pi", "caps", "units", "Parameters", "options", "config", "ps", "phys", "pins", "parts", "fps", "ops", "mm", "tags", "name", "spec", "services", "pretty", "sys", "data", "AMS", "details", "password", "json", "param", "ams", "types", "pool", "par"], "outbuf": ["outputrb", " outbuffer", "outbuff", "Outbuff", " outbuff", "inrb", "outputbuff", "Outbuffer", "Outbuf", "inBuffer", " outBuffer", "outrb", "outputbuffer", "inbuff", "outBuffer", " outrb", "inbuffer", "outbuffer", "inbuf", "outputbuf", "OutBuffer"], "metrics": ["metths", "monrics", "mutrices", "metrors", "mutrics", "Metrix", " metrices", "monrix", " metths", " metcs", "mtrics", "metric", "monrors", "matrics", "metcs", "metrices", "mtcs", "Metrors", "matrix", "matric", "metrix", "mutths", "mtrices", "mtths", "matrors", "monric", "mutcs", "Metric", "Metrics"], "encoder": ["enciever", "Encrier", "enrier", "execoder", "execrier", "Encuter", "ecoding", "Enciever", "ecramer", "executer", "ecrier", "enressor", "encramer", "encrier", "Encoding", "enoding", "encuter", "encoding", "Encramer", " encressor", " encoding", " encuter", " encrier", "enoder", "enramer", " encoded", " encramer", "eniever", "enoded", "execoding", "encoded", "eciever", "Encoder", "encressor", "ecoder", "ecressor", "ecoded"], "tmpFile": ["tempPath", "imgfile", "testFilename", "tempFile", "tmpName", "tmpFiles", "txtfile", "fakeFiles", "mpFile", "tmpFilename", "fakefile", " tmpfile", "imgKey", " tmpKey", "fakeFilename", " tmpFilename", "testfile", "tempKey", "txtPath", "imgFile", "tmpKey", "tempfile", "tempFILE", " tmpPath", "testFile", "tmpPath", "mpfile", " tmpFiles", "mpName", "tmpFILE", "tmpfile", " tmpFILE", "tempFilename", "mpFilename", " tmpName", "fakeFile", "imgFILE", "testName", "txtFile", "tempFiles"], "fout": ["vao", "foutput", "dfbal", "dfOUT", "sfOut", "fOUT", "fbal", "lOUT", "fullout", "fullOUT", "sfouts", "wouts", "fullbal", "sfout", "vouts", "dfoutput", "sfao", "fao", "wao", "loutput", "fOut", "wOut", "vout", "dfout", "vOut", "lout", "lbal", "wout", "fouts", "fulloutput"], "wrtout": ["wgtwriter", "hwrcw", "wltwriter", "wRTwriter", "hwrtout", "wwtout", "hwrtwriter", "wrdio", "wgtout", "wttio", "hwrtw", "Wrtn", "wrdout", "hwrcex", "wrtin", "wltgen", "ewrtgen", "wltin", "wrdgen", "wrtw", "wwtwriter", "wrdn", "wRTn", "wttout", "wrtn", "Wrdn", "wgtw", "wrcex", "ewltwriter", "ewltgen", "wttwriter", "hwrcout", "ewltin", "wrcwriter", "ewrtout", "hwrtex", "wrcw", "wrtio", "Wrdio", "Wrdout", "wwtw", "wrtgen", "Wrtwriter", "hwrcwriter", "ewltout", "Wrtio", "wdrwriter", "ewrtwriter", "wdrout", "ewrtin", "wrtex", "wttn", "wgtex", "wdrgen", "wdrin", "wltout", "wrtwriter", "Wrdwriter", "wrdin", "Wrtout", "wRTio", "wRTout", "wrdwriter", "wwtex", "wrcout"], "fchannel": ["fchan", " fconsole", "wchannel", "fconnection", "fChannel", "fcconnection", "FChannel", " fnet", "fconsole", " fChannel", "wconnection", "wcontroller", "fcontroller", "flnet", "flconsole", "fccontroller", " fcontroller", " fconnection", " fchan", "Fnet", "Fchannel", "fcchan", "fcchannel", "flchannel", "Fconsole", "fnet", "wchan", "flChannel"], "s": ["js", "sq", "v", "string", "h", "p", "str", "b", "is", "t", "ws", "e", "S", "ls", "j", "sg", "gs", "r", "rs", "c", "ts", "n", "i", "a", "m", "csv", "f", "ns", "ds", "sv", "g", "ss", "qs", "gets", "w"]}}
{"id1": "9954926", "id2": "12380475", "code1": "    private void simulate() throws Exception {\n        BufferedWriter out = null;\n        out = new BufferedWriter(new FileWriter(outFile));\n        out.write(\"#Thread\\tReputation\\tAction\\n\");\n        out.flush();\n        System.out.println(\"Simulate...\");\n        File file = new File(trsDemoSimulationfile);\n        ObtainUserReputation obtainUserReputationRequest = new ObtainUserReputation();\n        ObtainUserReputationResponse obtainUserReputationResponse;\n        RateUser rateUserRequest;\n        RateUserResponse rateUserResponse;\n        FileInputStream fis = new FileInputStream(file);\n        BufferedReader br = new BufferedReader(new InputStreamReader(fis));\n        String call = br.readLine();\n        while (call != null) {\n            rateUserRequest = generateRateUserRequest(call);\n            try {\n                rateUserResponse = trsPort.rateUser(rateUserRequest);\n                System.out.println(\"----------------R A T I N G-------------------\");\n                System.out.println(\"VBE: \" + rateUserRequest.getVbeId());\n                System.out.println(\"VO: \" + rateUserRequest.getVoId());\n                System.out.println(\"USER: \" + rateUserRequest.getUserId());\n                System.out.println(\"SERVICE: \" + rateUserRequest.getServiceId());\n                System.out.println(\"ACTION: \" + rateUserRequest.getActionId());\n                System.out.println(\"OUTCOME: \" + rateUserResponse.isOutcome());\n                System.out.println(\"----------------------------------------------\");\n                assertEquals(\"The outcome field of the rateUser should be true: MESSAGE=\" + rateUserResponse.getMessage(), true, rateUserResponse.isOutcome());\n            } catch (RemoteException e) {\n                fail(e.getMessage());\n            }\n            obtainUserReputationRequest.setIoi(null);\n            obtainUserReputationRequest.setServiceId(null);\n            obtainUserReputationRequest.setUserId(rateUserRequest.getUserId());\n            obtainUserReputationRequest.setVbeId(rateUserRequest.getVbeId());\n            obtainUserReputationRequest.setVoId(null);\n            try {\n                obtainUserReputationResponse = trsPort.obtainUserReputation(obtainUserReputationRequest);\n                System.out.println(\"-----------R E P U T A T I O N----------------\");\n                System.out.println(\"VBE: \" + obtainUserReputationRequest.getVbeId());\n                System.out.println(\"VO: \" + obtainUserReputationRequest.getVoId());\n                System.out.println(\"USER: \" + obtainUserReputationRequest.getUserId());\n                System.out.println(\"SERVICE: \" + obtainUserReputationRequest.getServiceId());\n                System.out.println(\"IOI: \" + obtainUserReputationRequest.getIoi());\n                System.out.println(\"REPUTATION: \" + obtainUserReputationResponse.getReputation());\n                System.out.println(\"----------------------------------------------\");\n                assertEquals(\"The outcome field of the obtainUserReputation should be true: MESSAGE=\" + obtainUserReputationResponse.getMessage(), true, obtainUserReputationResponse.isOutcome());\n                assertEquals(0.0, obtainUserReputationResponse.getReputation(), 1.0);\n            } catch (RemoteException e) {\n                fail(e.getMessage());\n            }\n            obtainUserReputationRequest.setIoi(null);\n            obtainUserReputationRequest.setServiceId(null);\n            obtainUserReputationRequest.setUserId(rateUserRequest.getUserId());\n            obtainUserReputationRequest.setVbeId(rateUserRequest.getVbeId());\n            obtainUserReputationRequest.setVoId(rateUserRequest.getVoId());\n            try {\n                obtainUserReputationResponse = trsPort.obtainUserReputation(obtainUserReputationRequest);\n                System.out.println(\"-----------R E P U T A T I O N----------------\");\n                System.out.println(\"VBE: \" + obtainUserReputationRequest.getVbeId());\n                System.out.println(\"VO: \" + obtainUserReputationRequest.getVoId());\n                System.out.println(\"USER: \" + obtainUserReputationRequest.getUserId());\n                System.out.println(\"SERVICE: \" + obtainUserReputationRequest.getServiceId());\n                System.out.println(\"IOI: \" + obtainUserReputationRequest.getIoi());\n                System.out.println(\"REPUTATION: \" + obtainUserReputationResponse.getReputation());\n                System.out.println(\"----------------------------------------------\");\n                assertEquals(\"The outcome field of the obtainUserReputation should be true: MESSAGE=\" + obtainUserReputationResponse.getMessage(), true, obtainUserReputationResponse.isOutcome());\n                assertEquals(0.0, obtainUserReputationResponse.getReputation(), 1.0);\n            } catch (RemoteException e) {\n                fail(e.getMessage());\n            }\n            call = br.readLine();\n        }\n        fis.close();\n        br.close();\n        out.flush();\n        out.close();\n    }\n", "code2": "    public void transport(File file) throws TransportException {\n        if (file.exists()) {\n            if (file.isDirectory()) {\n                File[] files = file.listFiles();\n                for (int i = 0; i < files.length; i++) {\n                    transport(file);\n                }\n            } else if (file.isFile()) {\n                try {\n                    FileChannel inChannel = new FileInputStream(file).getChannel();\n                    FileChannel outChannel = new FileOutputStream(destinationDir).getChannel();\n                    inChannel.transferTo(0, inChannel.size(), outChannel);\n                } catch (IOException e) {\n                    log.error(\"File transfer failed\", e);\n                }\n            }\n        }\n    }\n", "label": 1, "substitutes": {"simulate": ["smure", "simulates", "modulate", " simulation", "smulates", "modulates", "smulate", " simure", "simulation", "smulation", "modure", "simure", " simulates", "modulation"], "out": ["ger", "print", "t", "e", "conv", "aos", "output", "conf", "copy", "gen", "content", "on", "f", "base", "screen", "all", "cfg", "exp", "name", "pretty", "con", "list", "ins", "gov", "ent", "pool", "w", "err", "v", "at", "p", "OU", "io", "help", "up", "in", "flush", "c", "ex", "write", "o", "set", "net", "raw", "conn", "cn", "gr", "client", "sys", "handle", "sum", "cmd", "can", "outs", "state", "batch", "log", "obj", "to", "null", "n", "inner", "res", "outer", "buffer", "init", "writer", "tree", "error", "OUT", "report", "Out", "cache", "it", "ou", "gc", "last", "put", "store", "b", "nr", "nt", "manager", "inv", "go", "group", "hit", "co", "os"], "file": ["path", "log", "lock", "io", "resource", "FILE", "b", "channel", "ile", "t", "e", "File", "output", "filename", "model", "library", "connection", "port", "console", "f", "base", "set", "play", "buffer", "table", "format", "result", "message", "db", "fp", "input", "document", "name", "template", "data", "source", "le", "report", "l", "handle", "pool", "type"], "obtainUserReputationRequest": ["obtainUserRepresentutationQuery", "obtainUserReputationsTask", "obtainUserReputionRequest", "obtainUserRepationResponse", "obtainUserRepresentutationRequest", "obtainUserRepresentutationTarget", "obtainUserRelutationQuery", "obtainUserReputationsError", "obtainUserReputationTask", "obtainUserRepresentationTarget", "obtainUserRepationrequest", "obtainUserReputationsTarget", "obtainUserReplutationTarget", "obtainUserReputionResponse", "obtainUserReputationQuery", "obtainUserReputationsResponse", "obtainUserRepositoryQuery", "obtainUserRepresentationQuery", "obtainUserRepositoryResponse", "obtainUserRepositoryRequest", "obtainUserReputationTarget", "obtainUserReplutationResponse", "obtainUserRelutationTask", "obtainUserRepetitionTarget", "obtainUserReputationsQuery", "obtainUserRepationTarget", "obtainUserReporationResponse", "obtainUserRelutationRequest", "obtainUserReporationQuery", "obtainUserReputionTarget", "obtainUserRepetitionRequest", "obtainUserRepresentutationResponse", "obtainUserReputationError", "obtainUserRepresentutationError", "obtainUserRelutationResponse", "obtainUserReputionrequest", "obtainUserRepresentutationrequest", "obtainUserRepresentationError", "obtainUserReputionTask", "obtainUserRelutationsRequest", "obtainUserReporationRequest", "obtainUserRepationRequest", "obtainUserReporationError", "obtainUserReputationrequest", "obtainUserRepresentationResponse", "obtainUserRelutationsResponse", "obtainUserRepresentationRequest", "obtainUserRepationQuery", "obtainUserRelutationsQuery", "obtainUserRelutationsTask", "obtainUserRepositoryTask", "obtainUserReputionQuery", "obtainUserReputationsRequest", "obtainUserReputationsrequest", "obtainUserRepresentationrequest", "obtainUserRepetitionResponse", "obtainUserRepationError", "obtainUserReplutationRequest"], "obtainUserReputationResponse": ["obtainUserRepulationAnswer", "obtainUserReputationResp", "obtainUserReputationsAnswer", "obtainUserRepositoryResp", "obtainUserReputationsResp", "obtainUserReputationService", "obtainUserReputationsResponse", "obtainUserRepulationResponse", "obtainUserRepositoryResponse", "obtainUserReportutationResponse", "obtainUserReportositoryResp", "obtainUserRepulationService", "obtainUserRepositoryAnswer", "obtainUserReportositoryResponse", "obtainUserRepulationResp", "obtainUserReportositoryAnswer", "obtainUserReportositoryService", "obtainUserReputationAnswer", "obtainUserReportutationAnswer", "obtainUserRepositoryService", "obtainUserReportutationResp", "obtainUserReputationsService", "obtainUserReportutationService"], "rateUserRequest": ["RateUserGrant", "rateClientGrant", "rateJobResponse", "rateuserRequ", "rateuserQuery", "rateuserCommand", "raceUserRecord", "RateUserChange", "rateuserAccess", "rateClientJob", "rateOwnerRecord", "rateUsersChange", " rateUserrequest", "createUserCommand", "scaleOwnerAccess", "rateClientRequest", "rateRowResponse", "rateProxyQuery", "RateUserQUEST", "RateLineResponse", "RateUsersQUEST", "raceUserrequest", "rateUsersResponse", "raceRowrequest", "RateUsersQuery", "rateOwnerrequest", "rateRowrequest", "rateLineRequ", "rateTimerequest", "rateSamplerequest", "rateUserJob", "rateuserResponse", "rateJobRequest", "rateUserRequ", "rateLineRequest", "rateLineCommand", "scaleUserRequest", "rateProxyResponse", "rateProxyRequest", "rateUserGrant", "rateOwnerRequest", "rateUsersQUEST", "scaleOwnerRequest", "scaleUserResponse", "createuserRequest", " rateUserQuery", "rateuserRequest", "scaleUserAccess", "rateLineQuery", "RateUsersResponse", "createUserRequest", "RateUserQuery", "rateUsersRequest", "RateUsersrequest", "createuserRequ", "rateClientrequest", "rateSampleCommand", " rateUserJob", "rateUserrequest", "RateLinerequest", "rateRowRequest", "RateUsersRequest", "RateUserRequest", "raceRowRequest", "rateDateResponse", "RateClientRequest", "rateUserChange", "rateSampleRequ", "rateJobChange", "rateUserQuery", "rateTimeRequest", "rateUsersQuery", "rateLineGrant", "RateUsersChange", "rateDateRequest", "rateSampleRequest", "rateUserQUEST", "createuserCommand", "rateuserQUEST", "rateDateGrant", "rateUserAccess", "rateUserRecord", "rateUserCommand", "createUserRequ", "raceUserRequest", "createUserrequest", "RateUserResponse", "rateUsersrequest", "rateOwnerResponse", "RateLineQuery", "rateTimeResponse", "rateRowRecord", "RateClientResponse", "scaleOwnerResponse", "rateuserrequest", "RateUserrequest", "RateClientGrant", "rateClientResponse", "createuserrequest", "rateUsersAccess", "rateLineResponse", "rateOwnerAccess", "rateLinerequest", "RateLineRequest", "rateRowJob", "raceRowRecord", "rateProxyQUEST"], "rateUserResponse": ["rateControllerRequest", " rateClientresponse", "ratesUserRequest", "rateControllerResponse", "rateMethodVersion", "rateUserresponse", "rateFileRequest", "ratesClientMessage", "rateManagerRequest", "rateMemberReply", " rateUserresponse", "rateUsersAnswer", "rateUserVersion", "rateClientRequest", " rateUserAnswer", "rateUsersResponse", " rateUserReturn", "rateuserResponse", " rateClientReturn", "rateUserMessage", "rateMethodData", "rateClientresponse", "rateUserReturn", "rateControllerMessage", "RateUserReply", "rateuserReply", "ratesClientResp", "rateDateVersion", "rateMemberResponse", "rateuserRequest", "ratesUserMessage", "rateWordReturn", "rateManagerMessage", "RateUsersResponse", "rateuserresponse", "rateMemberRequest", " rateClientResponse", "ratesUserResponse", "rateMethodRequest", "rateFileresponse", " rateUserStatus", "rateFileResponse", "rateUsersRequest", "rateTimeAnswer", "rateClientMessage", "rateFileReturn", "rateMemberresponse", " rateClientRequest", "RateUserData", "rateUserResp", "rateClientResp", "rateUsersReply", "rateManagerResp", "RateUsersRequest", "rateTimeStatus", "rateUserReply", "RateUserRequest", "rateDateResponse", "rateWordResponse", "rateUsersStatus", "rateClientReturn", "RateUserVersion", "rateTimeRequest", "rateDateRequest", "ratesClientRequest", "rateMethodResponse", "rateUsersresponse", "rateWordresponse", "rateUserData", "rateWordRequest", "rateControllerResp", "RateUsersReply", "RateUserResponse", "rateTimeResponse", "rateManagerResponse", "rateClientResponse", "RateUserresponse", "ratesClientResponse", "ratesUserResp", "RateUsersresponse", "rateUserAnswer", "rateUserStatus", "rateDateData"], "fis": ["FIS", "flis", "sfIS", "lIS", "fli", "flisa", "sfiss", "liss", "sfIs", " fi", "fiss", "fIs", "Fis", "bis", " fisa", "FIs", "sfis", "lis", "fisa", "Fiss", "lIs", "fIS", "fi", "bi", "bisa"], "br": ["sr", "dr", "lr", "BR", "ctr", "str", "ger", "bt", "browser", "be", "nr", "gb", "bridge", "vr", "mr", "bl", "bro", "cr", "bh", "adr", "ber", "hr", "wr", "bm", "ch", "gr", "pr", "bd", "bn", "bf", "bp", "tr", "shr", "fr", "kr", "bi", "div", "buf", "Br"], "call": ["send", "contact", "cell", "function", "Call", "log", "ell", "str", "char", "test", "update", "bridge", "cin", "inv", "url", "c", "word", "n", "block", "query", "check", "label", "status", "code", "trace", "play", "result", "message", "draw", "action", "all", "name", "frame", "comment", "line", "callback", "report", "called", "add", "use", "list", "execute", "request", "info", "cal", "continue", "dial", "command"]}}
{"id1": "17161805", "id2": "18238468", "code1": "    private String encode(String plaintext) {\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"SHA\");\n            md.update(plaintext.getBytes(\"UTF-8\"));\n            byte raw[] = md.digest();\n            return (new BASE64Encoder()).encode(raw);\n        } catch (NoSuchAlgorithmException e) {\n            throw new IllegalStateException(\"Error encoding: \" + e);\n        } catch (UnsupportedEncodingException e) {\n            throw new IllegalStateException(\"Error encoding: \" + e);\n        }\n    }\n", "code2": "    @Test\n    public void testLoadSource() throws IOException {\n        ArticleMetadata metadata = new ArticleMetadata();\n        metadata.setId(\"http://arxiv.org/abs/math/0205003v1\");\n        InputStream inputStream = arxivDAOFacade.loadSource(metadata);\n        Assert.assertNotNull(inputStream);\n        StringWriter writer = new StringWriter();\n        IOUtils.copy(inputStream, writer, \"utf8\");\n        String contents = writer.toString();\n        Assert.assertTrue(contents.contains(\"A strengthening of the Nyman\"));\n        inputStream.close();\n    }\n", "label": 0, "substitutes": {"encode": ["enode", "encprocess", "unode", "Enforce", "ensode", "enscode", "unprocess", "ensprocess", "encforce", "enprocess", "ensforce", "unforce", "enforce", "uncode", "Enode", "Encode", "enccode"], "plaintext": [" plainmessage", "mainlat", "pronlat", "plainth", "formtext", "formdata", "plainlat", " plainth", "plainText", "ainmessage", "pronText", "pronth", " plainlat", "plaindata", " plainText", "maintext", "formText", "aintext", "formmessage", "aindata", "prontext", "mainth", "plainmessage", "mainText", "ainText", " plaindata"], "md": ["d", "mc", "dr", "pdf", "pd", "ld", "mt", "amd", "mod", "mo", " MD", "sm", "nt", "med", "managed", "msg", "ng", "red", "det", "m", "pm", "sd", "ms", "dd", "mand", "hd", "mm", "ind", "mk", "cd", "od", "bd", "mg", "mn", "sha", "dm", "add", "mp", "der", "dh", "df", "mb", "cmd", "grad", "MD", "del", " Md"], "raw": ["wrap", "bytes", "bare", "bound", "strip", " Raw", "des", "orig", "clean", "map", "aw", "stable", "rendered", "row", "pack", "n", "custom", "unsigned", "mem", "inner", "valid", "modified", "def", "serial", "message", "Raw", "unknown", "input", "read", "hex", "value", " RAW", "RAW", "json", "derived", "cmd", "full", "buf", "cooked", "sh"]}}
{"id1": "19584877", "id2": "12586404", "code1": "    public static boolean encodeFileToFile(String infile, String outfile) {\n        boolean success = false;\n        java.io.InputStream in = null;\n        java.io.OutputStream out = null;\n        try {\n            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);\n            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n            byte[] buffer = new byte[65536];\n            int read = -1;\n            while ((read = in.read(buffer)) >= 0) {\n                out.write(buffer, 0, read);\n            }\n            success = true;\n        } catch (java.io.IOException exc) {\n            exc.printStackTrace();\n        } finally {\n            try {\n                in.close();\n            } catch (Exception exc) {\n            }\n            try {\n                out.close();\n            } catch (Exception exc) {\n            }\n        }\n        return success;\n    }\n", "code2": "    @Override\n    public List<ProvaSolution[]> run(ProvaService prova, String agent, String key, String src) throws IOException {\n        File file = new File(src);\n        BufferedReader in;\n        InputStream is = null;\n        try {\n            if (!file.exists() || !file.canRead()) {\n                try {\n                    is = Thread.currentThread().getContextClassLoader().getResourceAsStream(src);\n                    in = new BufferedReader(new InputStreamReader(is));\n                } catch (Exception ex1) {\n                    try {\n                        is = RuleReaderImpl.class.getResourceAsStream(src);\n                        in = new BufferedReader(new InputStreamReader(is));\n                    } catch (Exception ex2) {\n                        try {\n                            URL url = new URL(src);\n                            in = new BufferedReader(new InputStreamReader(url.openStream()));\n                        } catch (Exception ex3) {\n                            throw new IOException(\"Cannot read from \" + src);\n                        }\n                    }\n                }\n            } else {\n                FileReader fr = new FileReader(file);\n                in = new BufferedReader(fr);\n            }\n            List<ProvaSolution[]> results = prova.consult(agent, in, key);\n            return results;\n        } finally {\n            if (is != null) is.close();\n        }\n    }\n", "label": 0, "substitutes": {"encodeFileToFile": ["encodeFileToStream", "encodeStringToDisk", "encodeFiletoStream", "encodeFileAsStream", "encodeFiletoFiles", "encodeFileToFiles", "encodeStringAsFiles", "encodeFileFromFile", "encodeStringAsFile", "encodeFileAsFile", "encodeStringToStream", "encodeStringToFile", "encodeStringAsDisk", "encodeFileAsDisk", "encodeFiletoDisk", "encodeStringToFiles", "encodeFileFromFiles", "encodeStringAsStream", "encodeFileToDisk", "encodeFiletoFile", "encodeFileFromStream", "encodeFileAsFiles", "encodeFileFromDisk"], "infile": ["Inbase", "Infile", "inputFile", "outpath", "inpath", "outbase", " inbase", " inFile", "inbase", "InFile", " infilename", " inpath", "inputfile", "inFile", "inputpath", "outfilename", "Inpath", "outFile", "inputfilename", "infilename"], "outfile": ["tofp", "newname", "outdir", "todir", "newfilename", "fromFile", " outname", "newfile", "fromfp", "inFile", "inname", "fromdir", "outfilename", "tofile", "indir", "outfp", "fromfile", "outFile", "newFile", "outname", "infp", " outFile", "toFile", "infilename", " outfilename"], "in": ["pin", "en", "by", "id", "is", "inf", "t", "per", "up", "al", "cin", "from", "re", "ini", "IN", "inc", "i", "ro", "inner", "inside", "ar", "on", " din", "amin", "iter", "form", "din", "conn", "get", "oin", "init", "input", "isin", "ind", "gin", "source", "In", "or", "im", "image", "ins", "rin", "it", "info", "bin", "nin", "ain", "con", "inn"], "out": ["os", "outs", "at", "file", "en", "OU", "io", "print", "b", "t", "ot", "nt", "ion", "aos", "up", "output", "flush", "ex", "n", "to", "null", "write", "inner", "res", "gt", "on", "outer", "o", "opt", "net", "end", "oss", "cn", "writer", "fn", "sys", "OUT", "Out", "it", "g", "ou", "ne", "can", "co", "con"], "buffer": ["black", "sample", "batch", "number", "binary", "sequence", "variable", "append", "bar", "queue", "print", "length", "history", "row", "stack", "phrase", "total", "attribute", "button", "view", "library", "block", "mem", "bone", "base", "note", "initial", "padding", "table", "message", "buff", "paste", "column", "frame", "template", "document", "comment", "memory", "password", "header", "pad", "window", "cache", "character", "info", "available", "buf", "Buffer", "temp", "display", "command"], "read": ["text", "allow", "send", "first", "print", "before", "length", "count", "start", "select", "skip", "run", "open", "reader", "len", "index", "range", "n", "check", "query", "write", "i", "ok", "close", "wait", "through", "iter", "set", "connect", "end", "each", "get", "READ", "reads", "raw", "req", "push", "input", "ind", "seek", "readable", "load", "reading", "give", "add", "Read", "ready", "need", "hold", " Read", "stream", "find", "size"], "success": [" Success", "submit", "first", "please", " failure", "ratulations", "crit", "unity", "growth", "complete", "town", "Success", "ith", "primary", "good", "successfully", "snap", "safe", "condition", "cess", "ok", "status", "release", "summary", "valid", "city", "accept", "sufficient", "positive", " successful", "result", "fail", "ccess", "danger", "commit", "second", "support", "setup", "successful", " successes", " okay", "error", "ceed", "photo", " succ", "warning", "value", "democracy", "same", "done", "response", "continue", "surv"]}}
{"id1": "17716716", "id2": "8320469", "code1": "    public static String plainToMD(LoggerCollection loggerCol, String input) {\n        byte[] byteHash = null;\n        MessageDigest md = null;\n        StringBuilder md5result = new StringBuilder();\n        try {\n            md = MessageDigest.getInstance(\"MD5\");\n            md.reset();\n            md.update(input.getBytes());\n            byteHash = md.digest();\n            for (int i = 0; i < byteHash.length; i++) {\n                md5result.append(Integer.toHexString(0xFF & byteHash[i]));\n            }\n        } catch (NoSuchAlgorithmException ex) {\n            loggerCol.logException(CLASSDEBUG, \"de.searchworkorange.lib.misc.hash.MD5Hash\", Level.FATAL, ex);\n        }\n        return (md5result.toString());\n    }\n", "code2": "    public static String md5(String text) {\n        String encrypted = \"\";\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            md.update(text.getBytes());\n            encrypted = hex(md.digest());\n        } catch (NoSuchAlgorithmException nsaEx) {\n        }\n        return encrypted;\n    }\n", "label": 1, "substitutes": {"plainToMD": [" stringAsmd", " stringFrommd", " stringTomd", " stringAsDM", " convertAsMD", " stringFromDM", " stringToMD", " stringAsMC", " convertToMC", " convertToDM", " stringToMC", " convertToMD", " convertAsMC", " stringFromMD", " convertAsmd", " convertTomd", " stringFromMC", " convertAsDM", " stringAsMD", " stringToDM"], "loggerCol": ["logGERColumn", "logggerCl", "logggerCol", "logggerCOL", "badinatorColl", "badgerCl", "loginatorCOL", "loginatorCl", " logggerCol", "badgerColl", " logggerColumn", "loggeCOL", " logggerCOL", "logGERCOL", "loggeColl", "logiderCol", "logGERCol", "loggeCol", "loggerCOL", "logiderColumn", "logggerColl", "loggeCl", "badinatorCl", " loggerCOL", "logggerColumn", "badinatorCOL", "badinatorCol", "loggerColl", "loginatorColl", "loginatorCol", "loggerColumn", "loggerCl", "badgerCol", " loggerColumn", "logiderCOL", "badgerCOL"], "input": ["text", "background", "subject", "string", "file", "str", " Input", "char", "hash", "Input", "up", "in", "context", "from", "output", "url", "pattern", "initial", "base", "config", "form", "prefix", "buffer", "example", "result", "out", "raw", "q", "active", "document", "data", "source", "value", "image", "hello", "request", "it", "this", " inputs", "command"], "byteHash": ["byteHas", "byteLength", "binaryHas", "ByteHas", "bytehash", "ByteMap", "byteMap", "byteshash", "ByteHash", "binaryhash", " byteMap", "binaryHash", " byteLength", " bytehash", "Bytehash", "ueLength", " byteHas", "bytesHash", "byteTr", "ByteTr", " byteTr", "ueHash", "uehash", "bytesMap", "bytesHas", "ueTr", "ByteLength"], "md": ["mac", "mc", "d", "dr", "pd", "material", "ld", "mt", "mod", "mo", "di", " MD", "hash", "sm", "med", "msg", "de", "nd", "met", " mc", "sam", "ng", "red", "ded", "det", "m", "def", "ct", "pm", "sd", "ms", "dd", "comp", "rm", "hd", "doc", "dig", "gr", "mm", "ds", "mk", "cd", "ind", "od", "bd", "mg", "mn", "add", "dm", "mp", "der", "df", "mb", "cmd", "gm", "MD", "grad", " Md", "cond"], "md5result": ["md64response", "md7string", "MD2string", "md65message", "md7result", "md64comment", "md3result", "md7results", " md5message", "md45result", "md2Result", "md5proc", " md5proc", "md5response", "MD2result", "md45response", "md3Result", "MD5comment", "md5message", "md5results", "md3string", "md5comment", "md64results", "MD2comment", " md5Result", "MD5result", "md8result", "md2result", "md2string", "md45comment", "MD2response", "MD5response", "MD2results", " md8proc", "md2comment", "md2response", "md8proc", "MD2Result", "md3message", "md65proc", "md8message", "md64result", "md7Result", "md5Result", "md8Result", " md8message", "md3results", "md5string", "md2results", "md65result", "md65Result", "md45results", "md3proc", "MD5Result", " md8Result", "MD5results", " md8result", "MD5string"], "i": ["ti", "v", "ji", "I", "ic", "li", "id", "io", "gi", "my", "b", "is", "di", "ii", "z", "in", "\u0438", "j", "span", "phi", "mi", "si", "index", "c", "n", "a", "pi", "ci", "m", "cli", "ims", "uri", "o", "iter", "multi", "q", "init", "xi", "ie", "ind", "gu", "u", "ei", "x", "qi", "im", "me", "key", "ai", "ix", "fi", "sim", "l", "ip", "us", "it", "bi", "ui", "y"]}}
{"id1": "10451698", "id2": "7908169", "code1": "    private void copy(File source, File destinationDirectory) throws IOException {\n        if (source.isDirectory()) {\n            File newDir = new File(destinationDirectory, source.getName());\n            newDir.mkdir();\n            File[] children = source.listFiles();\n            for (int i = 0; i < children.length; i++) {\n                if (children[i].getName().equals(\".svn\")) {\n                    continue;\n                }\n                copy(children[i], newDir);\n            }\n        } else {\n            File newFile = new File(destinationDirectory, source.getName());\n            if (newFile.exists() && source.lastModified() == newFile.lastModified()) {\n                return;\n            }\n            FileOutputStream output = new FileOutputStream(newFile);\n            FileInputStream input = new FileInputStream(source);\n            byte[] buff = new byte[2048];\n            int read = 0;\n            while ((read = input.read(buff)) > 0) {\n                output.write(buff, 0, read);\n            }\n            output.flush();\n            output.close();\n            input.close();\n        }\n    }\n", "code2": "    public String execute() {\n        String dir = \"E:\\\\ganymede_workspace\\\\training01\\\\web\\\\user_imgs\\\\\";\n        HomeMap map = new HomeMap();\n        map.setDescription(description);\n        Integer id = homeMapDao.saveHomeMap(map);\n        FileOutputStream fos;\n        try {\n            fos = new FileOutputStream(dir + id);\n            IOUtils.copy(new FileInputStream(imageFile), fos);\n            IOUtils.closeQuietly(fos);\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return list();\n    }\n", "label": 1, "substitutes": {"copy": ["perm", "proxy", "file", "clone", "delete", "Cop", "cat", "pixel", "clip", "map", "cop", "export", "cp", "write", "zip", "link", "split", "crop", "slice", "paste", "core", "create", "Copy", "download", "transfer", "share", "sync", "remove", "move", "gc", "continue", "co", "archive", "opy"], "source": ["local", "subject", "force", "file", "site", "parent", "sin", "ce", "resource", "src", "store", "remote", "start", "in", "class", "service", "SOURCE", "current", "from", "style", "target", "shell", "original", "index", "null", "query", "ource", "scope", "inner", "secure", "instance", "status", "sit", "base", "config", "note", "size", "table", "Source", "sp", "get", "raw", "init", "sql", "none", "create", "ie", "name", "template", "spec", "http", "image", "details", "use", "empty", "cache", "directory", "unit", "body", "origin", "space", "entry", "se"], "destinationDirectory": ["identinatorLocation", "destinationsInternal", "destineDirectory", " destationFolder", "identinationDirectory", "destinationsLocation", "destinateFolder", " destinationApplication", "destinationsDir", "destarationLocation", "destinatorLocation", "identinatorInternal", "destinateApplication", " destationApplication", "destinationFolder", "destmentDirectory", "identinationLocation", "destinationLocation", "targetinationsdirectory", "targetinationsDir", "destationFolder", "destineFolder", "targetinationDirectory", " destationdirectory", "destarationDirectory", "destationdirectory", "destationDirectory", "destarationInternal", "destinateDirectory", "destinationsFolder", "destinedirectory", "destineApplication", "destinationsDirectory", "targetinationDir", "targetinationsDirectory", "targetinationdirectory", "identinationInternal", "destinatorInternal", "destinatorDirectory", " destationDirectory", "destinationdirectory", "targetinationFolder", "destmentFolder", " destinationFolder", "destmentDir", "targetinationsFolder", "destmentdirectory", "destinationApplication", " destinationdirectory", "destationApplication", "destinationInternal", "destinationDir", "identinatorDirectory", "destinationsdirectory", "destinatedirectory"], "newDir": ["newDirectory", "newsDirectory", "newsDir", "newsdir", " newDirectory", "NewFile", "newRel", "nextDir", "nextRel", "NewFolder", "NewDirectory", "Newdir", "nextdir", " newFolder", "NewRel", "nextFile", "newsFolder", "newdir", "NewDir", "newsFile", "newFolder", " newRel", " newdir"], "children": ["resources", "nil", "members", "follow", "related", "when", "packages", "objects", "modules", "groups", "child", "ids", "ls", "pres", "blocks", "ren", "reports", "users", "links", "names", "parents", "jobs", "these", "images", "pages", "may", "Children", "projects", "his", "gc", "ports", "times", "desc", "unknown", "many", "files", "each", "stories", "its", "all", "ml", "relations", "services", "kids", "lines", "items", "cont", "keys", "details", "uploads", "sub", "cache", "apps", "classes", "bc"], "i": ["ti", "ji", "I", "batch", "ic", "iq", "li", "id", "gi", "my", "point", "io", "is", "di", "t", "ki", "ii", "remote", "in", "j", "span", "you", "phi", "oi", "ri", "mi", "si", "index", "ex", "ini", "iu", "pi", "ci", "m", "ims", "ski", "base", "iter", "ms", "multi", "q", "init", "xi", "ie", "gu", "client", "u", "ij", "x", "me", "im", "qi", "key", "uu", "chain", "ai", "ix", "sim", "ip", "us", "g", "hi", "ui", "bi", "um", "json", "it", "info", "y"], "newFile": ["newsfile", "newsDir", "ewLe", "ewFile", "NewFile", "nextfile", "NewLe", " newfile", "nextDir", "newsTh", " newGlobal", " newSourceFile", "NewTh", "Newfile", "newSourceFile", "goodSourceFile", "nextLe", "goodFile", "goodfile", "NewGlobal", "newfile", "goodDir", "ewfile", "createfile", "createDir", "newGlobal", "NEWfile", "ewDir", "nextFile", "newLe", "newTh", "createFile", "NewDir", "NEWDir", "newsFile", "createSourceFile", "NEWTh", "newsGlobal", "NEWFile"], "output": ["text", "Output", "batch", "put", "monitor", "file", "parent", "io", "print", "update", "position", "internal", "success", "cut", "current", "export", "open", "network", "admin", "block", "connection", "write", "ilo", "auto", "console", "outer", "config", "web", "net", "buffer", "result", "format", "out", "enabled", "message", "connect", "blue", "writer", "exit", "document", "pretty", "client", "object", "four", "online", "response", "next", "body", "stream", "display"], "input": ["local", "op", "ic", "back", "io", "before", "inf", "Input", "internal", "in", "start", "child", "ink", "current", "from", "open", "storage", "reader", "inc", "inner", "unsigned", "feed", "initial", "insert", "iter", "form", "buffer", "out", "get", "ahead", "active", "init", "raw", "upload", "error", "add", "image", "exec", "rc", "ip", "it", "info", "operator"], "buff": ["text", "xx", "bed", "black", "bytes", "qq", "batch", "pb", "bound", "txt", "cat", "nb", "b", "old", "bg", "printf", "msg", "nd", "bb", " buf", "bo", "bl", "ff", "uff", "box", "mem", "img", "fb", "seq", "buffer", "sb", "bs", "comp", "ch", "eb", "ind", "tab", "data", "Buff", "bf", "cb", "uf", "hold", "mb", "cmd", "bin", "buf", "tt", "gb", "xff", "cond"], "read": ["text", " count", "d", "send", "en", "height", "str", "print", "before", "length", "old", "count", "t", "start", "bind", "test", "in", " write", "ink", "select", "skip", "run", "len", "index", "check", "query", "mem", "write", "tell", "like", "feed", "wait", "config", "iter", "set", "buffer", "end", "READ", "get", "q", "reads", "each", "raw", "push", "ind", "seek", "readable", "load", "reading", "give", "add", "and", "Read", "ready", "hello", "need", "handle", "hold", " Read", "stream", "find", "size"]}}
{"id1": "4164833", "id2": "8069594", "code1": "    public static void buildDeb(File debFile, File controlFile, File dataFile) throws IOException {\n        long now = new Date().getTime() / 1000;\n        OutputStream deb = new FileOutputStream(debFile);\n        deb.write(\"!<arch>\\n\".getBytes());\n        startFileEntry(deb, DEBIAN_BINARY_NAME, now, DEBIAN_BINARY_CONTENT.length());\n        deb.write(DEBIAN_BINARY_CONTENT.getBytes());\n        endFileEntry(deb, DEBIAN_BINARY_CONTENT.length());\n        startFileEntry(deb, CONTROL_NAME, now, controlFile.length());\n        FileInputStream control = new FileInputStream(controlFile);\n        byte[] buffer = new byte[1024];\n        while (true) {\n            int read = control.read(buffer);\n            if (read == -1) break;\n            deb.write(buffer, 0, read);\n        }\n        control.close();\n        endFileEntry(deb, controlFile.length());\n        startFileEntry(deb, DATA_NAME, now, dataFile.length());\n        FileInputStream data = new FileInputStream(dataFile);\n        while (true) {\n            int read = data.read(buffer);\n            if (read == -1) break;\n            deb.write(buffer, 0, read);\n        }\n        data.close();\n        endFileEntry(deb, dataFile.length());\n        deb.close();\n    }\n", "code2": "    public static void copyFile(File in, File out) throws IOException {\n        if (in.getCanonicalPath().equals(out.getCanonicalPath())) {\n            return;\n        }\n        FileChannel inChannel = new FileInputStream(in).getChannel();\n        FileChannel outChannel = new FileOutputStream(out).getChannel();\n        try {\n            inChannel.transferTo(0, inChannel.size(), outChannel);\n        } catch (IOException e) {\n            throw e;\n        } finally {\n            if (inChannel != null) {\n                inChannel.close();\n            }\n            if (outChannel != null) {\n                outChannel.close();\n            }\n        }\n    }\n", "label": 1, "substitutes": {"buildDeb": [" rebuilddeb", "BuildDeb", " rebuildAud", " buildAud", " builddeb", "Builddeb", "buildDub", " rebuildDeb", " rebuildDub", "BuildDub", "builddeb", "BuildAud", "buildAud", " buildDub"], "debFile": ["debfile", "pkgFiles", "debile", "obfile", "debFILE", "pkgFILE", "obFile", "audFiles", " debFilename", "ubFile", "debFilename", "debFiles", " debFILE", "audFile", "ubile", "obile", "pkgFile", "audFilename", "ubFilename", " debFiles", "pkgFilename", "audFILE", " debfile", "ubfile", "obFilename", " debile"], "controlFile": ["scriptFile", "controlChain", " controlChain", "ctrlFile", " controlfile", "controlLog", "scriptFiles", "scriptFILE", "ctrlLog", "dataFiles", "controlfile", "rolfile", "datafile", "configFile", "ctrlFILE", "controlFiles", "rolFILE", "dataLog", "ctrlChain", "configFILE", "ctrlFiles", "ctrlfile", " controlLog", "controlFILE", "configfile", "configFiles", "dataChain", "rolFile", "scriptfile", " controlFILE", " controlFiles"], "dataFile": ["dataLot", " datafile", "runFile", " dataStream", "DATATable", "helpList", " dataTable", "DATAStream", "datfile", "dataList", "runFILE", "dataSet", "byFile", "datFILE", "DataStream", " dataFILE", " dataLot", "runLot", "DATAFile", "helpfile", "runSet", " dataList", "datafile", "runList", "runfile", "valueFile", "dataStream", "DATAFiles", "dataTable", " dataFiles", "datFile", "DataFiles", "DataTable", "byFILE", "helpFile", "byLot", "valueLot", " dataSet", "helpLot", "byFiles", "dataFILE", "valueFILE", "valueFiles", "datSet", "dataFiles", "DataFile"], "now": ["system", "cur", "force", "stuff", "java", "first", "aj", "post", "sw", "always", "since", "store", "length", "old", "start", "num", "fx", " NOW", "aw", "after", "current", "from", "percent", "here", " Now", "time", "age", "present", "wait", "on", "set", "low", "loc", "date", "app", "create", "ow", "today", "www", "zero", "NOW", "and", "Now", "full", "off", "then", "size"], "deb": ["dec", "decl", "priv", "abs", "aud", "review", "bb", "conf", "reb", "rob", "ib", "web", "gif", "com", "og", "req", "db", "daily", "jpg", "debian", "und", "de", "gob", "stab", "dan", "bar", "be", "Deb", "cp", "img", "fin", "rel", "erb", "eb", "cm", "ub", "cmd", "debug", "eg", "compl", "we", "dl", "red", "fb", "def", "desc", "dt", "sd", "sb", "pub", "report", "df", "ob", "del", "dev", " Deb", "put", "dat", "dp", "dep", "pay", "broad", "comm", "bl", "iban", "av", "download", "cd", "etc", "dm", "cb", "pkg", "sub", "mb", "prep", "div"], "control": ["system", "cell", "correct", "ctr", "crit", "history", "ca", "compl", "current", "ctrl", "roll", "const", "cons", "ctl", "comm", "Control", "content", "check", "ro", "ll", "scroll", "code", "cc", "console", "rel", "config", "controlled", "form", "com", "connect", "comp", "critical", "core", "rol", "setup", "trl", "cm", "cont", "rl", "rc", "controller", "cmd", "cond", "co", "con", "command"], "buffer": ["sample", "match", "function", "batch", "number", "filter", "binary", "sequence", "variable", "append", "term", "bar", "queue", "resource", "print", "length", "history", "bridge", "context", "row", "stack", "phrase", "attribute", "rule", "button", "view", "bo", "library", "block", "label", "scroll", "absolute", "base", "note", "iter", "table", "message", "buff", "page", "result", "paste", "database", "parse", "document", "template", "frame", "comment", "memory", "chain", "shape", "window", "cache", "directory", "hold", "buf", "Buffer", "temp", "stream", "command"], "read": ["build", "val", "search", "print", "close", "dd", "READ", "each", "est", "core", "req", "input", "load", "rand", "give", "key", "then", "find", "height", "io", "in", "run", "len", "check", "query", "write", "valid", "iter", "play", "get", "raw", "reads", "ek", "push", "seek", "handle", "ip", " Read", "stream", "word", "match", "old", "start", "skip", "ang", "red", "ro", "scroll", "like", "through", "connect", "pe", "rd", "ind", "readable", "error", "remove", "cont", "report", "exec", "need", "reflect", "depth", "size", "text", "send", "length", "char", "count", "bind", "mix", "select", "fill", "ke", "reader", "index", "thread", "config", "end", "draw", "pass", "add", "hold", "se"], "data": ["d", "batch", "ata", "dat", "not", "file", "da", "help", "debug", "test", "di", "internal", "extra", "no", "reader", "good", "to", "mu", "query", "meta", "feed", "bus", "auto", "valid", "rel", "normal", "def", "table", "raw", "database", "db", "video", "error", "http", "one", "image", "list", "news", "DATA", "na", "window", "cache", "info", "next", "dev", "bin", "share", "div"]}}
{"id1": "4531653", "id2": "12586404", "code1": "    public static String md5(String data) {\n        try {\n            MessageDigest md = MessageDigest.getInstance(MD);\n            md.update(data.getBytes(UTF8));\n            return encodeHex(md.digest());\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }\n", "code2": "    @Override\n    public List<ProvaSolution[]> run(ProvaService prova, String agent, String key, String src) throws IOException {\n        File file = new File(src);\n        BufferedReader in;\n        InputStream is = null;\n        try {\n            if (!file.exists() || !file.canRead()) {\n                try {\n                    is = Thread.currentThread().getContextClassLoader().getResourceAsStream(src);\n                    in = new BufferedReader(new InputStreamReader(is));\n                } catch (Exception ex1) {\n                    try {\n                        is = RuleReaderImpl.class.getResourceAsStream(src);\n                        in = new BufferedReader(new InputStreamReader(is));\n                    } catch (Exception ex2) {\n                        try {\n                            URL url = new URL(src);\n                            in = new BufferedReader(new InputStreamReader(url.openStream()));\n                        } catch (Exception ex3) {\n                            throw new IOException(\"Cannot read from \" + src);\n                        }\n                    }\n                }\n            } else {\n                FileReader fr = new FileReader(file);\n                in = new BufferedReader(fr);\n            }\n            List<ProvaSolution[]> results = prova.consult(agent, in, key);\n            return results;\n        } finally {\n            if (is != null) is.close();\n        }\n    }\n", "label": 0, "substitutes": {"md5": ["sha7", "MD3", "sha3", "sha5", "md4", "MD5", "MD4", " md3", " md4", "md7", " md7", "sha4", "md3", "MD7"], "data": ["text", "d", "bytes", "batch", "ata", "dat", "string", "txt", "any", "id", "msg", "no", "output", "content", "mu", "block", "a", "html", "valid", "padding", "serial", "table", "message", "format", "result", "raw", "input", "name", "foo", "value", "sha", "image", "hello", "DATA", "cache", "json", "info", "type", "this", "now", "os", "command"], "md": ["d", "mc", "pdf", "da", "pd", "dir", "ld", "mt", "amd", "mod", "di", "sm", "nt", "managed", "msg", "de", "nd", "red", "det", "m", "pm", "sd", "ms", "dd", "mand", "rm", "hd", "db", "mm", "ds", "mk", "cd", "ind", "od", "bd", "mg", "mn", "dm", "mp", "der", "dh", "df", "mb", "cmd", "MD"]}}
{"id1": "13563706", "id2": "21348951", "code1": "    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        String selectedPage = request.getParameter(\"SelectedPage\");\n        Page page = null;\n        PortalRequest portalRequest = PortalRequest.getCurrentRequest();\n        if (selectedPage == null) {\n            try {\n                Property pageProp = Property.getProperty(\"HomePage\");\n                selectedPage = pageProp.getValue();\n            } catch (PersistentModelException e) {\n                myLogger.info(\"Page could not be found due to an exception\");\n                response.sendError(response.SC_NOT_FOUND);\n                return;\n            }\n        }\n        myLogger.info(\"Handling Page Request for Page \" + selectedPage);\n        try {\n            if (page == null) {\n                try {\n                    page = Page.getPage(Long.parseLong(selectedPage));\n                } catch (NumberFormatException e) {\n                    List<Page> possiblePage = Page.findByName(selectedPage);\n                    if (possiblePage.size() > 0) {\n                        page = possiblePage.get(0);\n                    } else {\n                        response.sendError(response.SC_NOT_FOUND);\n                        return;\n                    }\n                }\n            }\n            if (!page.isVisibleTo(portalRequest.getCurrentUser())) {\n                Property pageProp = Property.getProperty(\"HomePage\");\n                selectedPage = pageProp.getValue();\n                page = Page.getPage(Long.parseLong(selectedPage));\n            }\n            try {\n                Property property = Property.getProperty(\"LogPageRequests\");\n                if (property.getValue().toLowerCase().equals(\"true\")) {\n                    String referer = request.getHeader(\"Referer\");\n                    if (referer == null || referer.indexOf(portalRequest.getRequest().getServerName()) > 0) {\n                        referer = \" \";\n                    } else {\n                        if (referer.length() >= 200) {\n                            referer = referer.substring(0, 198);\n                        }\n                    }\n                    PageRequest.createRequest(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), portalRequest.getRequest().getRemoteAddr(), referer);\n                }\n            } catch (PersistentModelException e) {\n                myLogger.log(Level.WARNING, \"Log Page Requests property was not found.\", e);\n            }\n            if (page.isVisibleTo(portalRequest.getCurrentUser())) {\n                HttpSession session = request.getSession();\n                if (session != null) {\n                    RecentlyViewedManager rvm = (RecentlyViewedManager) session.getAttribute(\"ipoint.RecentlyViewedManager\");\n                    if (rvm == null) {\n                        rvm = new RecentlyViewedManager();\n                    }\n                    rvm.add(page);\n                    session.setAttribute(\"ipoint.RecentlyViewedManager\", rvm);\n                }\n                PageCacheEntry entry = null;\n                if (!portalRequest.isPost() && !page.isEditableBy(portalRequest.getCurrentUser())) {\n                    try {\n                        int pageCacheTime = 60000;\n                        try {\n                            Property pageCacheTimeProperty = Property.getProperty(\"PageCacheTime\");\n                            pageCacheTime = Integer.parseInt(pageCacheTimeProperty.getValue());\n                            pageCacheTime *= 1000;\n                        } catch (PersistentModelException pme) {\n                            myLogger.warning(\"Ignoring Exception when retrieving PageCacheTime property\");\n                        } catch (NumberFormatException nfe) {\n                        }\n                        entry = PageCacheEntry.find(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), pageCacheTime);\n                    } catch (PersistentModelException e) {\n                        myLogger.log(Level.WARNING, \"An error occurred finding a page cache entry\", e);\n                    }\n                }\n                response.setContentType(\"text/html\");\n                response.setHeader(\"Cache-Control\", \"no-cache\");\n                boolean processed = false;\n                if (entry != null) {\n                    String tempFile = entry.getTempFile();\n                    File file = new File(tempFile);\n                    if (file.exists() && file.isFile() && file.canRead()) {\n                        FileReader reader = new FileReader(file);\n                        BufferedReader br = new BufferedReader(reader);\n                        PrintWriter out = response.getWriter();\n                        out.write(\"<!-- Starting to output cached page in \" + portalRequest.elapsedTime() + \" ms -->\\n\");\n                        while (br.ready()) {\n                            out.write(br.readLine() + \"\\n\");\n                        }\n                        out.write(\"<!-- Cached output produced in \" + portalRequest.elapsedTime() + \" ms -->\\n\");\n                        reader.close();\n                        processed = true;\n                        portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageTotal, page.getName() + \"-\" + page.getID(), portalRequest.elapsedTime(), true);\n                    } else {\n                        entry.delete();\n                    }\n                }\n                if (!processed) {\n                    PrintWriter out = response.getWriter();\n                    out.write(\"<!-- Output produced by iPoint Portal -->\\n\");\n                    PageRenderer renderer = new PageRenderer(page);\n                    long startTime = System.currentTimeMillis();\n                    request.setAttribute(ELConstants.IPOINT_USER, portalRequest.getCurrentUser());\n                    request.setAttribute(ELConstants.IPOINT_PAGE, page);\n                    request.setAttribute(ELConstants.IPOINT_TEMPLATE, page.getTemplate());\n                    request.setAttribute(ELConstants.IPOINT_PORTAL_PROPERTIES, Property.getPropertiesMap());\n                    request.setAttribute(ELConstants.IPOINT_USER_PROPERTIES, portalRequest.getCurrentUser().getProperties());\n                    renderer.preProcess();\n                    portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PagePreProcess, page.getName() + \"-\" + page.getID(), System.currentTimeMillis() - startTime, false);\n                    long renderStart = System.currentTimeMillis();\n                    renderer.render();\n                    portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageRender, page.getName() + \"-\" + page.getID(), System.currentTimeMillis() - renderStart, false);\n                    portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageTotal, page.getName() + \"-\" + page.getID(), System.currentTimeMillis() - startTime, false);\n                    out.write(\"<!-- output produced in \" + PortalRequest.getCurrentRequest().elapsedTime() + \" ms -->\\n\");\n                    if (!page.isEditableBy(portalRequest.getCurrentUser())) {\n                        if (response instanceof CachingResponseWrapper) {\n                            CachingResponseWrapper crw = (CachingResponseWrapper) response;\n                            crw.flushBuffer();\n                            Property tempProperty = Property.getProperty(\"UploadLocation\");\n                            File tempDirectory = new File(tempProperty.getValue());\n                            if (tempDirectory.exists() && tempDirectory.canWrite()) {\n                                File file = File.createTempFile(\"iPointPage\", \".html\", tempDirectory);\n                                try {\n                                    FileWriter fw = new FileWriter(file);\n                                    fw.write(crw.getOutput());\n                                    fw.flush();\n                                    fw.close();\n                                    PageCacheEntry.create(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), file.getAbsolutePath());\n                                } catch (IOException e) {\n                                }\n                            } else {\n                                myLogger.warning(\"Can not write to directory \" + tempProperty.getValue());\n                            }\n                        }\n                    }\n                }\n            } else {\n                myLogger.info(\"Current User is Forbidden from seeing this Page\");\n                response.sendError(response.SC_FORBIDDEN);\n            }\n        } catch (PersistentModelException e) {\n            myLogger.log(Level.INFO, \"Unable to find page \" + selectedPage, e);\n            response.sendError(response.SC_NOT_FOUND);\n        } catch (PresentationException pe) {\n            pe.printStackTrace();\n            throw new ServletException(\"Error processing the page\", pe);\n        }\n    }\n", "code2": "        protected void processAddByURLSubmit(URL url, String invalidUrlMsg) {\n            if (!this.hasError()) {\n                try {\n                    StringWriter xmlSourceWriter = new StringWriter();\n                    IOUtils.copy(url.openStream(), xmlSourceWriter);\n                    processSubmittedDoap(xmlSourceWriter.toString());\n                } catch (FileNotFoundException e) {\n                    Session.get().error(invalidUrlMsg);\n                    logger.warn(\"Error processing URL: \" + invalidUrlMsg);\n                } catch (IOException e) {\n                    setResponsePage(new ErrorReportPage(new UserReportableException(\"Unable to add doap using RDF supplied\", DoapFormPage.class, e)));\n                    logger.warn(\"Error processing URL: \" + url + \"; \" + e.getMessage(), e);\n                }\n            }\n        }\n", "label": 1, "substitutes": {"doGet": ["handlePut", "handleget", " doPut", "doGET", " doget", "handleGET", "doget", "DoGet", "DoGET", " doGET", "handleGet", "Doget", "doPut", "DoPut"], "request": ["search", "path", "address", "subject", "first", "parent", "resource", "transform", "event", "position", "context", "current", "route", "attribute", "complete", "url", "re", "call", "view", "query", "connection", "initial", "message", "each", "get", "project", "user", "create", "input", "reference", "setup", "frame", "document", "Request", "http", "application", "socket", "reset", "report", "QUEST", "use", "hello", "version", "xml", "directory", "forward", "order", "command"], "response": ["search", "description", "sequence", "respond", "ce", "print", "render", "hash", "position", "success", "service", "Response", "output", "network", "view", "fire", "block", "relation", "write", "res", "connection", "status", "summary", "console", "condition", "continue", "security", "server", "example", "message", "result", "format", "see", "foundation", "exit", "frame", "document", "tree", "http", "zero", "application", "answer", "report", "image", "header", "version", "default", "json", "next", "reply", "resp", "display", "collection", "ve"], "selectedPage": ["namedLine", "electedPort", "namedToken", " selectedRow", "selectionItem", "namedKey", "selectPath", "lectedPath", "singlePage", "selectedRow", "singlePort", "selectionToken", "electedPage", "matchedPage", "singleFrame", " selectedFrame", " selectedPath", "selectedFrame", "verifiedRow", "lectedToken", " selectedFile", "lectedLine", "selectFile", "lectedPage", "selectedItem", "electedFrame", "selectedKey", "matchedpage", "lectedFile", " selectedpage", "selectionLine", "specifiedDocument", " selectedPort", "lectedFrame", "electionDocument", "lectedPort", "selectedLine", "matchedFrame", " selectedLine", "verifiedPage", "namedpage", "electionPage", "selectionFile", "selectPage", "selectedpage", "selectedPort", "selectedToken", " selectedKey", "selectItem", "selectPort", "namedFrame", "selectionPort", "lectedDocument", "lectedRow", "verifiedFile", "electionPort", "selectedDocument", "specifiedFrame", "namedPage", "specifiedPort", "lectedItem", "selectedFile", "matchedPort", "selectLine", "verifiedpage", "electedpage", "singlepage", "namedPort", "lectedKey", "specifiedPage", "selectedPath", "selectionPage", "electionFrame", "lectedpage"], "page": ["proxy", "site", "point", "output", "network", "profile", "project", "document", "object", "line", "pointer", "pp", "window", "peer", "pool", "policy", "display", "created", "filter", "Page", "p", "be", "complete", "rule", "menu", "office", "instance", "server", "client", "frame", "me", "image", "chain", "next", "address", "force", "log", "parent", "channel", "position", "phrase", "current", "record", "age", "url", "view", "to", "port", "language", "form", "message", "result", "user", "application", "cache", "layout", "number", " Page", "resource", "row", "phone", "block", "node", "pages", "table", "associated", "successful", "self", "group", "version", "collection"], "portalRequest": ["portalingCall", "portpalContext", "portortalEvent", "portaleRequest", "portalaCall", "portualResponse", "portaleSession", " portalAccess", "portsalRequest", "portpalRequest", "portsortalResponse", "portortalThread", "portalaAccess", "portralSession", "portsortalRequest", "portalingApply", "PortalQuery", "terminalRequest", "portortalrequest", "portsortalrequest", "portaleQuery", "portalingRequest", "portalThread", "PortaleContext", "portalSession", "terminalidRequest", "terminalidSession", "portalidResponse", "portortalResponse", "terminalidResponse", "portalEvent", "portalidRequest", "portualEvent", "portalaApply", "PortaleResponse", "portsortalEvent", "portalResponse", "portaleResponse", "portortalContext", "portsalEvent", "portualRequest", "portalaRequest", "PortaleThread", "portpalResponse", "portalityResponse", " portalApply", "portalQuery", "portalrequest", "portalidContext", "portsalResponse", "portaleCall", "terminalSession", "portalFrame", "PortaleQuery", "PortalResponse", "portalityContext", "portralQuery", "portralRequest", "portaleThread", "terminalidQuery", " portaleAccess", "portsalrequest", "portortalQuery", "portpalThread", "portralContext", "portalidSession", "PortalThread", "portalityFrame", "portalerequest", "portalityRequest", "portaleContext", "portualrequest", " portaleApply", "portalContext", "PortalRequest", "portalApply", "portaleEvent", "PortaleFrame", "portalidFrame", "terminalResponse", "portalidQuery", "terminalQuery", " portalCall", "portralResponse", "portortalRequest", "portalAccess", "portaleApply", " portaleRequest", "portaleAccess", "PortalContext", "portalCall", "PortaleRequest", "PortalFrame", "portaleFrame", "portalingAccess", " portaleCall"], "pageProp": ["profilePred", "imageProp", " pagePr", "pagePriv", "pagePred", "ageProp", "pageComp", "phraseComp", "propertyPack", " pageDef", "sectionProp", "poolProp", "keyProperty", " pageComp", "phraseProp", "imagePr", "agePro", "officeProp", "officePack", "sectionZip", "pagePack", "propertyProp", "poolPro", "officeDef", " pagePred", "profileZip", " pagePack", "phrasePr", "pageProperty", "phraseProperty", "keyComp", "keyPr", "pagePro", "poolPred", "imagePred", "agePred", "pageDef", "agePr", "sectionPro", "profilePro", "profileProp", "poolZip", "pageZip", "pagePr", "officePriv", "sectionPred", "imagePro", " pagePriv", " pageProperty", "keyProp", " pagePro", "propertyPriv", "propertyDef"], "possiblePage": ["PossiblyCollection", " possibleTag", " possibleCollection", "pspecifiedPage", "possiblyLine", "possiblyCollection", "packedLine", "pbablePage", "pableCollection", " packedTag", "PossiblyPage", "pibleCollection", "packedTag", " packedLine", "possibleCollection", "possibleTag", "pibleChild", "packedPage", "possiblyTag", "pentialPages", "pableTag", "PossiblePage", " packedPage", "possiblepage", "possibleChild", "pspecifiedPages", "packedCollection", "PossibleTag", "possiblyUser", "PossiblyChild", "possiblyPage", "PossibleUser", "pbableChild", "possibleLine", "pableLine", "pibleUser", "pbableCollection", "PossiblePages", "pentialTag", "PossibleCollection", "pentialPage", "possibleUser", " packedCollection", "pablePage", "possiblePages", "pentialpage", "pspecifiedTag", "possiblyChild", "piblePage", "pbableUser", "PossibleChild", "Possiblepage", "pspecifiedpage", "PossiblyUser", " possibleLine"], "property": ["address", "integer", "description", "function", "string", "field", "p", "definition", "variable", "resource", "properties", "position", "class", "service", "phrase", "attribute", "Property", "rule", "owner", "rue", "relation", "title", "location", "config", "expression", "feature", "trace", "message", "second", "frame", "name", "operator", "object", "behavior", "value", "key", "header", "metadata", "domain", "type", "prop", "policy", "command"], "referer": ["diffrer", "rorerer", "rerier", "refirect", "rederee", "rerer", " refered", "afener", "rangeerer", "Refere", "rorrer", "requerer", "printerer", "deferer", "reportered", "retered", "reporterer", "relender", "printerential", "reering", "reere", "verrier", "refrier", " refirect", "reener", "reportarer", "reerential", "rederer", "Referee", "retarer", "refender", "relerer", "Referer", "aferential", "redrer", "aferer", "refener", "differing", "vererential", "refered", "relener", "diffonder", "rorirect", "requonder", "reerer", "printrer", "relering", "refarer", "requering", "fener", "rorered", "retrer", "requrer", "rangeender", "differer", "defirect", "relrer", "refering", "reender", " refrer", "defrer", "defered", "verrer", "referential", "afrer", "rangeener", "refere", "ferer", "vererer", "rangerer", "relerential", "frer", "referee", "printrier", "refrer", "reeree", "Refrer", "redere", "rearer", "reportrer", "fering", "refonder", "reterer", "reered", "reonder"], "e": ["err", "ae", "ception", "h", "echo", "p", "E", "oe", "t", "eg", "eur", "event", "te", "eeee", "de", "ee", "r", "n", "a", "m", "f", "ge", "o", "ie", "error", "x", "me", "eu", "g", "es", "er", "se"]}}
{"id1": "10383721", "id2": "15465293", "code1": "    @SuppressWarnings(\"unchecked\")\n    private ReaderFeed processEntrys(String urlStr, String currentFlag) throws UnsupportedEncodingException, IOException, JDOMException {\n        String key = \"processEntrys@\" + urlStr + \"_\" + currentFlag;\n        if (cache.containsKey(key)) {\n            return (ReaderFeed) cache.get(key);\n        }\n        List<Post> postList = new ArrayList<Post>();\n        URL url = new URL(urlStr);\n        HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n        connection.setRequestMethod(\"GET\");\n        connection.setRequestProperty(\"Cookie\", \"SID=\" + sid);\n        BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream(), \"UTF-8\"));\n        SAXBuilder builder = new SAXBuilder(false);\n        Document doc = builder.build(reader);\n        Element root = doc.getRootElement();\n        Namespace grNamespace = root.getNamespace(\"gr\");\n        Namespace namespace = root.getNamespace();\n        String newflag = root.getChildText(\"continuation\", grNamespace);\n        String title = root.getChildText(\"title\", namespace);\n        String subTitle = root.getChildText(\"subtitle\", namespace);\n        List<Element> entryList = root.getChildren(\"entry\", namespace);\n        DateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss'Z'\");\n        for (Element e : entryList) {\n            Post post = new Post();\n            post.setTitle(e.getChildText(\"title\", namespace));\n            try {\n                post.setDate(sdf.parse(e.getChildText(\"published\", namespace)));\n            } catch (ParseException e1) {\n            }\n            post.setUrl(e.getChild(\"link\", namespace).getAttributeValue(\"href\"));\n            post.setSauthor(e.getChild(\"author\", namespace).getChildText(\"name\", namespace));\n            String content = e.getChildText(\"content\", namespace);\n            if (StringUtils.isEmpty(content)) {\n                content = e.getChildText(\"description\", namespace);\n            }\n            if (StringUtils.isEmpty(content)) {\n                content = e.getChildText(\"summary\", namespace);\n            }\n            post.setContent(content);\n            postList.add(post);\n        }\n        ReaderFeed readerFeed = new ReaderFeed();\n        readerFeed.setTitle(title);\n        readerFeed.setSubTitle(subTitle);\n        readerFeed.setFlag(newflag);\n        readerFeed.setPostList(postList);\n        cache.put(key, readerFeed);\n        return readerFeed;\n    }\n", "code2": "    public static void main(String[] args) throws Exception {\n        if (args.length != 2) {\n            System.out.println(\"Usage:  URLDumper <URL> <file>\");\n            System.exit(1);\n        }\n        String location = args[0];\n        String file = args[1];\n        URL url = new URL(location);\n        FileOutputStream fos = new FileOutputStream(file);\n        byte[] bytes = new byte[4096];\n        InputStream is = url.openStream();\n        int read;\n        while ((read = is.read(bytes)) != -1) {\n            fos.write(bytes, 0, read);\n        }\n        is.close();\n        fos.close();\n    }\n", "label": 0, "substitutes": {"processEntrys": [" processEntries", "processENTries", "processENTrys", "processENTry", "processentrys", " processEntry", "processEntry", " processEntrs", "processentries", "processentry", "processentrs", "processEntrs", "processENTrs", "processEntries"], "urlStr": ["UrlString", "UrlSTR", "UrlSt", "urlRes", "urlSt", " urlRest", "uriRest", "UrlDec", "pathRes", "urlString", "UrlStr", "urlBr", "uriRes", "URLRes", "uriSt", " urlBr", "uriStr", "pathString", "urlDec", " urlRes", "urlSTR", "URLBr", "URLDec", "URLRest", "URLSt", "urlRest", "uriDec", "URLSTR", "URLStr", " urlString", " urlSTR", "pathSTR", "pathStr", "UrlRes", "uriBr", "uriSTR"], "currentFlag": ["reportedFlags", "currentFLAG", " currentStatus", " currentflag", "reportedflag", "uniqueFlags", "curStatus", "reportedFLAG", "curFlag", "newFlag", "newFlags", "currentStatus", "reportedStatus", "curflag", "newFLAG", " currentFlags", "currentflag", "curFlags", "currentFlags", "uniqueFLAG", "uniqueFlag", "reportedFlag"], "key": ["search", "seed", "item", "path", "Key", "description", "file", "step", "member", "by", "tag", "my", "char", "k", "hash", "service", "ke", "filename", "index", "pattern", "KEY", "label", "base", "reason", "sk", "set", "prefix", "message", "q", "column", "ek", "name", "template", "rand", "value", "keys", "chain", "tip", "pkg", "sum", "ey", "task", "token", "it", "info", "default", "y", "entry"], "postList": ["postGroup", " postlist", "feedGroup", "feedList", "feedMap", " postMap", "entryGroup", "entrylist", "entryMap", "postMap", "postlist", "feedlist", " postGroup"], "url": ["sl", "address", "log", "Url", "abs", "str", "nl", "b", "t", "browser", "loader", "ls", "open", "r", "dl", "atl", "ll", "https", "ssl", "link", "location", "f", "uri", "URL", "web", "loc", "sb", "get", "ur", "conn", "impl", "document", "u", "name", "http", "uc", "rl", "l", "au", "il", "org"], "connection": ["created", "description", "number", "operation", "communication", "io", "resource", "channel", "wrapper", "ion", "position", "context", "opening", "open", " Connection", "Connection", "creation", "c", "to", "network", "entry", "relation", "session", "condition", "statement", "close", "location", "language", "uri", "server", "web", "connect", "conn", "database", "writer", "reference", "document", "client", "http", "application", "socket", "pointer", "reset", "response", "directory", "character", "established", "information", "con", "creator", "command"], "reader": ["file", "io", "resource", "loader", "ner", "in", "context", "row", "Reader", "r", "ro", "inner", "rar", "feed", "runner", "iterator", "iter", "buffer", "message", "writer", "read", "parser", "input", "document", "client", "data", "reading", "driver", "response", "body", "er", "stream", "handler", "entry"], "builder": ["settings", "build", "layer", "uild", "builders", "hub", "bar", " builders", "b", "loader", "ner", "adder", "bridge", "row", "control", "manager", "bo", "good", "block", "built", "bus", "outer", "sf", "base", "building", "buffer", "web", "aker", "writer", "parser", "BU", "Builder", "full", "operator", "handler", "creator"], "doc": ["d", "dec", "dr", "study", "h", "file", "dir", "git", "DOC", "t", "Document", "res", "html", "m", "md", "city", "Doc", "def", "result", "ree", "db", "og", "writer", "tree", "document", "ml", "dom", "data", "pub", "man", "xml", "div", "g", "json", "tx", "unit", "body", "graph", "dc"], "root": ["roid", "local", "cover", "results", "owner", "has", "area", "m", "base", "feature", "container", "all", "document", "Root", "right", "this", "er", "entry", "rocket", " Root", "r", "instance", "host", "server", "loc", "zero", "data", "or", "body", "rar", "roots", "head", "first", "parent", "obj", "start", "oot", "record", "primary", "null", "ro", "scope", "res", "result", "element", "init", "tree", "mounted", "rap", "default", "xml", "wrap", "remote", "row", "mr", "original", "box", "node", "rank", "role", "table", "central", "rt", "ree", "self", "empty", "unit", "div", "os", "collection"], "grNamespace": ["GRnamesSpace", "GrNamesSpace", "GrNamespace", "grNamepace", "GrNameset", "GRNameset", "grNamesSpace", "grNamepaces", "GRNamesSpace", "GRnamespace", "GRNamespace", "GRnameset", "grNsSpace", "grnamesSpace", "grNset", "grnamespace", "grnamespaces", "grNspace", "GrNameet", "grNameet", "GrNamepace", "grNameSpace", "GrNameSpace", "grnameset", "GRnamespaces", "grNameset", "grNamespaces", "GRNamespaces"], "namespace": [" namesspace", "E", "Namespace", "namepace", "nameset", "Namespaces", " nameship", "termsspace", "termsistence", "namesSpace", "amesspace", "mascore", "namescore", "memberspace", "Nameset", "nameet", "namesistence", "space", "St", "amesSpace", "Feed", "membership", "mscore", "Entry", "spaced", "masacing", "sacing", "namesACE", " namesace", "s", "nsSpace", "nspaced", "termsSpace", "namespaces", "wordsSpace", "membersSpace", "Namesspace", "termspace", "Document", "New", "nsspace", "membersspace", " namesSpace", "namepaces", "Ent", "namesspace", "Secure", " namespaced", " namesistence", "nameship", "mspace", "wordsistence", "namesace", "termspaced", "maspaced", "ameship", " namespaces", "nspace", "Namesistence", "maspace", "wordspace", "context", "mspaced", "_", "msacing", " nameset", "namesacing", "nameistence", "membersace", "NamesSpace", "wordsACE", "namespaced", "Raw", "score", "amesistence", "nameace", " namesACE", "amesACE", "nameSpace", "amespace"], "newflag": ["Newstatus", "continuestatus", "nextstatus", "newflags", "continueFlag", "Newflags", "newFlag", "nextflag", "NewFlag", "continueflags", "nextflags", "continueflag", "newstatus", "Newflag", "nextFlag"], "title": ["text", "topic", "subject", "description", "file", "term", "t", "Title", "phrase", "filename", "label", "summary", "status", "published", "desc", "prefix", "format", "message", "lead", "name", "template", "value", "header", "tip", "type", "displayText", "itle"], "subTitle": ["Subtitle", "shortName", "subText", " subText", "subtitle", "shortText", "SubName", "shorttitle", "subName", "shortTitle", " subtitle", " subName", "SubTitle", "SubText"], "entryList": ["entlist", "ryList", "entArray", "entList", "EntrySet", "entryArray", "entrylist", "entL", "ryL", "postSet", "Entrylist", "EntryList", " entryArray", " entrylist", "rylist", "entryL", "entrySet", "rySet", "ryArray", "postlist", " entryL"], "sdf": ["sfx", " sfx", "sdef", "ssfd", "sDF", "sfd", "psdef", " sdef", "Sdef", " sdd", "sdd", "dsfx", "ssdf", "psde", "dsfd", " sde", "ssdd", "Sdf", " sDF", "Sde", "ssfx", "sde", " sfd", "dsdd", "dsdf", "psDF", "SDF", "psdf"], "e": ["v", "Element", "et", "en", "p", "ce", "E", "oe", "t", "event", "eg", "eur", "te", "be", "eeee", "ed", "de", "ee", "r", "fe", "c", "i", "a", "ea", "f", "ele", "o", "ge", "pe", "entity", "end", "element", "ep", "eb", "ue", "ie", "exp", "ei", "u", "x", "le", "el", "l", "ef", "it", "ent", "ec", "ve", "es", "er", "y", "entry", "se"], "post": ["local", "pod", "op", "follow", "pt", "log", "put", "p", "ost", "mod", "print", "process", "store", "test", "po", "t", "after", "row", "pg", "record", "skip", "admin", "check", "write", "status", "feed", "wp", "person", "link", "pre", "rel", "ps", "def", "form", "set", "prefix", "page", "end", "get", "draw", "pass", "Post", "create", "commit", "read", "exp", "object", "comment", "od", "posts", "save", "add", "pub", "POST", "pp", "man", "info", "next", "entry", "word"], "content": ["text", "path", "description", "ontent", "Content", "child", "section", "label", "code", "status", "link", "message", "entity", "format", "name", "template", "media", "document", "comment", "object", "data", "source", "value", "header", "layout", "body"]}}
{"id1": "23310397", "id2": "494226", "code1": "    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.main);\n        mButton1 = (Button) findViewById(R.id.myButton1);\n        mButton2 = (Button) findViewById(R.id.myButton2);\n        mTextView1 = (TextView) findViewById(R.id.myTextView1);\n        mButton1.setOnClickListener(new Button.OnClickListener() {\n\n            public void onClick(View v) {\n                String uriAPI = \"http://www.sina.com\";\n                HttpPost httpRequest = new HttpPost(uriAPI);\n                List<NameValuePair> params = new ArrayList<NameValuePair>();\n                params.add(new BasicNameValuePair(\"str\", \"post string\"));\n                try {\n                    httpRequest.setEntity(new UrlEncodedFormEntity(params, HTTP.UTF_8));\n                    HttpResponse httpResponse = new DefaultHttpClient().execute(httpRequest);\n                    if (httpResponse.getStatusLine().getStatusCode() == 200) {\n                        String strResult = EntityUtils.toString(httpResponse.getEntity());\n                        mTextView1.setText(strResult);\n                    } else {\n                        mTextView1.setText(\"Error Response: \" + httpResponse.getStatusLine().toString());\n                    }\n                } catch (ClientProtocolException e) {\n                    mTextView1.setText(e.getMessage().toString());\n                    e.printStackTrace();\n                } catch (IOException e) {\n                    mTextView1.setText(e.getMessage().toString());\n                    e.printStackTrace();\n                } catch (Exception e) {\n                    mTextView1.setText(e.getMessage().toString());\n                    e.printStackTrace();\n                }\n            }\n        });\n        mButton2.setOnClickListener(new Button.OnClickListener() {\n\n            public void onClick(View v) {\n                String uriAPI = \"http://www.sina.com\";\n                HttpGet httpRequest = new HttpGet(uriAPI);\n                try {\n                    HttpResponse httpResponse = new DefaultHttpClient().execute(httpRequest);\n                    if (httpResponse.getStatusLine().getStatusCode() == 200) {\n                        String strResult = EntityUtils.toString(httpResponse.getEntity());\n                        strResult = eregi_replace(\"(\\r\\n|\\r|\\n|\\n\\r)\", \"\", strResult);\n                        mTextView1.setText(strResult);\n                    } else {\n                        mTextView1.setText(\"Error Response: \" + httpResponse.getStatusLine().toString());\n                    }\n                } catch (ClientProtocolException e) {\n                    mTextView1.setText(e.getMessage().toString());\n                    e.printStackTrace();\n                } catch (IOException e) {\n                    mTextView1.setText(e.getMessage().toString());\n                    e.printStackTrace();\n                } catch (Exception e) {\n                    mTextView1.setText(e.getMessage().toString());\n                    e.printStackTrace();\n                }\n            }\n        });\n    }\n", "code2": "    public static void main(String[] args) throws Exception {\n        String linesep = System.getProperty(\"line.separator\");\n        FileOutputStream fos = new FileOutputStream(new File(\"lib-licenses.txt\"));\n        fos.write(new String(\"JCP contains the following libraries. Please read this for comments on copyright etc.\" + linesep + linesep).getBytes());\n        fos.write(new String(\"Chemistry Development Kit, master version as of \" + new Date().toString() + \" (http://cdk.sf.net)\" + linesep).getBytes());\n        fos.write(new String(\"Copyright 1997-2009 The CDK Development Team\" + linesep).getBytes());\n        fos.write(new String(\"License: LGPL v2 (http://www.gnu.org/licenses/old-licenses/gpl-2.0.html)\" + linesep).getBytes());\n        fos.write(new String(\"Download: https://sourceforge.net/projects/cdk/files/\" + linesep).getBytes());\n        fos.write(new String(\"Source available at: http://sourceforge.net/scm/?type=git&group_id=20024\" + linesep + linesep).getBytes());\n        File[] files = new File(args[0]).listFiles(new JarFileFilter());\n        for (int i = 0; i < files.length; i++) {\n            if (new File(files[i].getPath() + \".meta\").exists()) {\n                Map<String, Map<String, String>> metaprops = readProperties(new File(files[i].getPath() + \".meta\"));\n                Iterator<String> itsect = metaprops.keySet().iterator();\n                while (itsect.hasNext()) {\n                    String section = itsect.next();\n                    fos.write(new String(metaprops.get(section).get(\"Library\") + \" \" + metaprops.get(section).get(\"Version\") + \" (\" + metaprops.get(section).get(\"Homepage\") + \")\" + linesep).getBytes());\n                    fos.write(new String(\"Copyright \" + metaprops.get(section).get(\"Copyright\") + linesep).getBytes());\n                    fos.write(new String(\"License: \" + metaprops.get(section).get(\"License\") + \" (\" + metaprops.get(section).get(\"LicenseURL\") + \")\" + linesep).getBytes());\n                    fos.write(new String(\"Download: \" + metaprops.get(section).get(\"Download\") + linesep).getBytes());\n                    fos.write(new String(\"Source available at: \" + metaprops.get(section).get(\"SourceCode\") + linesep + linesep).getBytes());\n                }\n            }\n            if (new File(files[i].getPath() + \".extra\").exists()) {\n                fos.write(new String(\"The author says:\" + linesep).getBytes());\n                FileInputStream in = new FileInputStream(new File(files[i].getPath() + \".extra\"));\n                int len;\n                byte[] buf = new byte[1024];\n                while ((len = in.read(buf)) > 0) {\n                    fos.write(buf, 0, len);\n                }\n            }\n            fos.write(linesep.getBytes());\n        }\n        fos.close();\n    }\n", "label": 0, "substitutes": {"onCreate": ["onNew", "OnCreated", "onsCreate", "onsCre", "onCreated", " onCre", "onCre", "OnNew", " onCreated", "onsNew", "whenCre", " onCreat", "onsCreat", "whenCreate", "onsCreated", "onCreat", "whenCreat", "OnCreate", " onNew", "whenCreated"], "savedInstanceState": ["saveinstanceState", "savedInstantstate", "savedInstEx", "saveInstance_", "savingInstInfo", "savedInstIn", "savingInstEx", "savedinstanceInfo", "saveinstancestate", "savedInstanceEx", "saveinstanceIn", "savedInstance_", "savedInststate", "saveInstanceState", "savedinstanceEx", "savedinstance_", "savedInstantIn", "saveinstance_", "savingInstanceState", "savedanceState", "savedinstancestate", "saveInstanceIn", "savedanceInfo", "savingInstState", "savingInstanceInfo", "savedInstState", "savedInstancestate", "savedinstanceState", "savedInstInfo", "saveInstancestate", "savedInstantState", "savedInst_", "savedInstanceInfo", "savedinstanceIn", "savingInstanceEx", "savedanceEx", "savedInstanceIn", "savedInstant_"], "mButton1": ["mButtonOne", "MButtonOne", "mLabel1", "MLabelOne", "MButton1", "mDialog0", "mActionOne", "mLabel11", "mButton0", "mDialogA", "mButton11", "mAction2", "mSwitch11", "mSwitch1", "MButton2", " mButtonA", "mAction11", "mLabelOne", "MButton11", "mActionA", "mAction1", " mAction0", " mActionA", "mSwitchOne", " mButtonOne", "mLabelA", "mSwitch2", "mButtonA", " mButton0", " mActionOne", " mAction1", "MLabel11", "mLabel0", "mDialogOne", "mAction0", "MLabel2", "mDialog1", "mLabel2", "MLabel1"], "mButton2": ["mLabel3", "mButtonTwo", "mConnector0", "pButton0", "mBut0", "mButton0", "pBut3", " mAction3", "mAction2", " mAction6", "mConnector3", "mQueue2", "mBut2", "mConnector2", "mQueue6", "mAction6", " mButton6", "mConnector6", "pButtonTwo", "mBut3", "mButton3", "mAction3", "pBut0", "mConnectorTwo", "mLabel0", "pBut2", " mButton3", "pButTwo", "pButton2", "pButton3", "mButton6", "mLabel2", "mLabelTwo", " mAction2", "mQueue3", "mButTwo"], "mTextView1": ["mTEXTModel1", "mTextView2", "mTextVName", "mTextModelOne", "mTextStream1", "mTextview4", "mTextView0", "mTEXTModelOne", "mTextviewTab", "mTextViewOnce", "mTextview2", "mTEXTStream4", "mTextBox2", "mTextView8", "mTEXTViewTab", "mTEXTModel3", "mTextRow2", "mTextBoxTab", "mTextModel2", "mTextView4", "mTextBoxOne", "mTextviewOne", "mTextModelTab", "mTextviewName", "mTextViewName", "mTEXTViewOne", "mTEXTviewOne", "mTextModel3", "mTEXTStreamOne", "mTEXTView1", "mTEXTView8", "mTextview8", "mTEXTModelName", "mTEXTviewTab", "mTextModel8", "mTEXTViewOnce", "mTextStreamOne", "mTextRow0", "mTextV3", "mTextModelOnce", "mTextModelName", "mTextBox1", "mTEXTview1", "mTextviewOnce", "mTextview3", "mTEXTViewName", "mTEXTView3", "mTEXTModel2", "mTextRowOne", "mTextStream2", "mTEXTView4", "mTextV1", "mTextview0", "mTEXTModelOnce", "mTEXTview0", "mTextModel1", "mTEXTView0", "mTextStream4", "mTextModel0", "mTextViewOne", "mTextRow1", "mTEXTView2", "mTEXTStream1", "mTEXTview2", "mTEXTview8", "mTextModel4", "mTextBox8", "mTEXTStream2", "mTextV2", "mTextViewTab", "mTextView3", "mTextview1"], "v": ["d", "h", "p", "id", "vp", "V", "b", "t", "e", "lv", "z", "j", "view", "c", "n", "i", "a", "uv", "m", "vm", "f", "o", "q", "u", "x", "sv", "ov", "l", "g", "y", "w"], "uriAPI": ["uriPI", "uriII", "databaseNP", "doiAPI", "databaseAPI", "pictureCI", "folderAPI", "directoryII", "originII", "folderII", "directoryapi", "URIURI", "URIII", "databasePI", "directionAPI", "directionII", "paralleNP", "doiPI", "directionID", "surfacePLE", "surfaceNP", "directionURI", "originAPI", "doiCI", "databasePLE", "uriNP", "databaseCI", "uriVM", "uiURI", "parallePLE", "uriPLE", "uriURI", "databaseVM", "uriID", "originapi", "paralleAPI", "surfacePI", "folderapi", "pictureVM", "URIID", "uiID", "uriapi", "folderURI", "directoryAPI", "surfaceAPI", "URIAPI", "directoryURI", "picturePI", "pictureAPI", "uiII", "uiAPI", "parallePI", "originURI", "uriCI", "doiVM"], "httpRequest": ["facebookRequest", " httpUpon", "ttpQuery", "httpsRequest", "HttpQuery", "httpsCommand", "httpQuery", "httpUpon", "facebookResponse", "httprequest", "facebookrequest", "HttpRequest", " httpQuery", "httQUEST", "HttpUpon", "HttpCommand", " httpCommand", " httprequest", " httpQUEST", "ttpQUEST", "ttpRequest", "httpQUEST", "facebookUpon", "httpCommand", "httpsResponse", "httpsQuery", "httRequest", "ttpCommand", "Httprequest", "httResponse", "HttpResponse", "ttpResponse"], "params": ["settings", "forms", "members", "packages", "p", "np", "objects", "terms", "pps", "groups", "properties", "mas", "fields", "pres", "conf", "pas", "gs", "rs", "names", "pi", "caps", "Parameters", "options", "api", "ps", "times", "phys", "pins", "parts", "padding", "multi", "changes", "pass", "requires", "actions", "tags", "vals", "posts", "lines", "data", "AMS", "details", "keys", "marks", "photos", "pos", "json", "request", "param", "ams", "sql", "values"], "httpResponse": ["HTTPRequest", "httpsRequest", " httpReturn", "HttpReturn", "HttpRes", "httpsResults", "httpResp", "htmlresponse", " httpResp", "htmlResults", "Httpresponse", "httpsresponse", "ttpresponse", "HttpResult", "httpsReturn", "httpReturn", "httpsResult", " httpResult", "htmlResponse", "httpresponse", "ttpResp", "httpRes", "httpsRes", " httpResults", " httpRes", "HTTPResponse", "htmlRequest", "htmlResult", "HTTPResult", "ttpRequest", "ttpResult", "httpsResponse", "HTTPresponse", "httpResults", " httpresponse", "httpResult", "httpsResp", "HttpResponse", "HttpRequest", "ttpResponse"], "strResult": ["STRResult", " strresult", "stringResult", "strResults", " strRes", "STRresult", "stringResults", "STRResponse", "StrResults", "STRResults", "strResponse", "strRes", "StrResult", "strresult", "stringRes", "StrRes", "Strresult", "stringResponse", " strResults", "stringresult", "StrResponse"]}}
{"id1": "2676365", "id2": "10451698", "code1": "    public void reset(int currentPilot) {\n        try {\n            PreparedStatement psta = jdbc.prepareStatement(\"DELETE FROM component_prop \" + \"WHERE pilot_id = ? \");\n            psta.setInt(1, currentPilot);\n            psta.executeUpdate();\n            jdbc.commit();\n        } catch (SQLException e) {\n            jdbc.rollback();\n            log.debug(e);\n        }\n    }\n", "code2": "    private void copy(File source, File destinationDirectory) throws IOException {\n        if (source.isDirectory()) {\n            File newDir = new File(destinationDirectory, source.getName());\n            newDir.mkdir();\n            File[] children = source.listFiles();\n            for (int i = 0; i < children.length; i++) {\n                if (children[i].getName().equals(\".svn\")) {\n                    continue;\n                }\n                copy(children[i], newDir);\n            }\n        } else {\n            File newFile = new File(destinationDirectory, source.getName());\n            if (newFile.exists() && source.lastModified() == newFile.lastModified()) {\n                return;\n            }\n            FileOutputStream output = new FileOutputStream(newFile);\n            FileInputStream input = new FileInputStream(source);\n            byte[] buff = new byte[2048];\n            int read = 0;\n            while ((read = input.read(buff)) > 0) {\n                output.write(buff, 0, read);\n            }\n            output.flush();\n            output.close();\n            input.close();\n        }\n    }\n", "label": 0, "substitutes": {"reset": ["ping", "delete", "clean", "replace", "update", "flush", "write", "release", "clear", "close", "kill", "config", "set", "init", "touch", "setup", "exit", "register", "remove", "save", "kick", "alert", "report", "request", "destroy", "stop", "state", "quit", "command"], "currentPilot": ["currentNane", "currentPortolly", "currentCail", "currentPortane", "currentpolly", " currentPane", " currentPlan", "currentpilot", "currentPolt", "currentNail", " currentPolt", " currentPortolly", "currentCane", "currentCilot", " currentPortlan", "currentPail", "currentPolly", " currentPortolt", "currentNlan", "currentPane", " currentPortail", " currentPortane", "currentPortail", "currentPortlan", "currentPortilot", "currentpolt", "currentClan", " currentPolly", "currentNilot", " currentPail", "currentpail", "currentPlan", "currentPortolt", " currentPortilot"], "psta": [" psa", "ppsta", "apsa", "Psta", " psha", "Pesta", "apesta", "apsha", "pesta", "ppesta", "pstan", "Psa", "apstan", "Pstan", "psa", "Psha", "psha", "ppstan", " pesta", " pstan", "ppsa", "apsta"]}}
{"id1": "20855053", "id2": "8430178", "code1": "    public void init(ServletContext context) throws ScratchException {\n        try {\n            log.debug(\"Attempting to load Controllers from file: \" + REGISTRY_FILENAME);\n            ClassLoader classLoader = Thread.currentThread().getContextClassLoader();\n            Enumeration<URL> urls = classLoader.getResources(REGISTRY_FILENAME);\n            while (urls.hasMoreElements()) {\n                URL url = urls.nextElement();\n                log.debug(\"Found: \" + url);\n                BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));\n                String className = null;\n                while ((className = reader.readLine()) != null) {\n                    className = className.trim();\n                    if (!\"\".equals(className) && !className.startsWith(\"#\")) {\n                        log.debug(\"Found class: \" + className);\n                        Class<?> clazz = classLoader.loadClass(className);\n                        addClass(clazz);\n                    }\n                }\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n            log.error(e);\n        } catch (ClassNotFoundException e) {\n            e.printStackTrace();\n            log.error(e);\n        }\n    }\n", "code2": "    public static void copyFile(String source_name, String dest_name) throws IOException {\n        source_name = Shell.getUtils().constructPath(source_name);\n        File source_file = new File(source_name);\n        dest_name = Shell.getUtils().constructPath(dest_name);\n        File destination_file = new File(dest_name);\n        FileInputStream source = null;\n        FileOutputStream destination = null;\n        byte[] buffer;\n        int bytes_read;\n        try {\n            if (!source_file.exists() || !source_file.isFile()) throw new FileCopyException(\"cp: no such source file: \" + source_name);\n            if (!source_file.canRead()) throw new FileCopyException(\"cp: source file \" + \"is unreadable: \" + source_name);\n            if (destination_file.exists()) {\n                if (destination_file.isFile()) {\n                    BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n                    String response;\n                    if (!destination_file.canWrite()) throw new FileCopyException(\"cp: destination \" + \"file is unwriteable: \" + dest_name);\n                    System.out.print(\"cp: file \" + dest_name + \" already exists. Overwrite it ? (Y/N): \");\n                    System.out.flush();\n                    response = in.readLine();\n                    if (!response.equals(\"Y\") && !response.equals(\"y\")) throw new FileCopyException(\"cp: copy cancelled.\");\n                } else throw new FileCopyException(\"cp: destination \" + \"is not a file: \" + dest_name);\n            } else {\n                File parentdir = parent(destination_file);\n                if (!parentdir.exists()) throw new FileCopyException(\"cp: destination \" + \"directory doesn't exist: \" + dest_name);\n                if (!parentdir.canWrite()) throw new FileCopyException(\"cp: destination \" + \"directory is unwriteable: \" + dest_name);\n            }\n            source = new FileInputStream(source_file);\n            destination = new FileOutputStream(destination_file);\n            buffer = new byte[1024];\n            int size = (new Long((source_file.length() / 1024) / 50)).intValue();\n            int c = 1;\n            int written = 0;\n            System.out.print(\"cp: \");\n            while (true) {\n                if (written < 50) {\n                    if ((c - 1) == size && size != 0) {\n                        System.out.print(\"#\");\n                        c = 1;\n                        written++;\n                    } else if (size == 0) {\n                        int j = 1;\n                        if (c > 1) j = (50 / c) - 50; else j = 50 / c;\n                        for (int i = 0; i < j; i++) System.out.print(\"#\");\n                        written += j;\n                    }\n                }\n                bytes_read = source.read(buffer);\n                if (bytes_read == -1) break;\n                destination.write(buffer, 0, bytes_read);\n                c++;\n            }\n            System.out.println();\n        } finally {\n            if (source != null) try {\n                source.close();\n            } catch (IOException e) {\n            }\n            if (destination != null) try {\n                destination.close();\n            } catch (IOException e) {\n            }\n        }\n    }\n", "label": 0, "substitutes": {"init": [" initialization", "initialized", " refresh", "construct", "start", " deploy", " initialized", "run", " Init", " prepare", " dispatch", " authorize", " initiation", " restart", "Init", " initiate", "config", "activate", " service", " login", "action", "register", "execute", " construct", " bind", " abort", "launch", " reset"], "context": ["exc", "h", "txt", "component", " contexts", "event", "ctx", "c", "ex", "null", "res", "config", "X", "web", "sc", "Context", "application", "x", "chain", "self", "tx", "state", "this", "bc", "w"], "classLoader": ["taskBuilder", "ClassReader", "classLess", "ClassElf", " classPath", "fileParser", "classPath", " classBuilder", "ClassLoader", "ClassManager", " classLess", " classManager", "taskLoader", "classManager", "classParser", "classElf", "urlLoader", "urlloader", "urlPath", "classReader", "classloader", "taskElf", "Classloader", "ClassLess", " classReader", "classBuilder", "taskLess", "fileReader", "fileLoader", "ClassPath", "ClassParser", "fileManager", "ClassBuilder", " classElf", " classParser", " classloader", "urlReader"], "urls": ["limxs", " urlms", "urps", " urllets", "slports", "normports", "urlists", "lls", "longists", "ls", "longs", "URLs", "urlxs", "limps", "urlgs", "longports", "urxs", "URLgs", "slists", "URLlets", "urlms", "limgs", "limls", "urlps", "lxs", "sls", "lims", "slies", "urllets", "normists", "normies", "norms", "urs", "limlets", "urlports", "urlls", "lps", "URLms", "longies", " urlgs", "limms", "urlies"], "url": ["sl", "path", "address", "lr", "log", "file", "Url", "ret", "li", "str", "nl", "resource", "mail", "channel", "b", "char", "browser", "row", "ls", "re", "r", "email", "dl", "ll", "res", "ssl", "link", "location", "f", "uri", "base", "rel", "URL", "job", "web", "loc", "page", "ur", "user", "req", "name", "util", "bel", "http", "rl", "uu", "mount", "el", "l", "ob", "ref", "org", "entry", "ul"], "reader": ["layer", "iper", "file", "resource", " Reader", "roller", "rx", "per", "loader", "ner", "row", "Reader", "r", "range", "ro", "inner", "rar", "runner", "rot", "iterator", "iter", "buffer", "dd", "older", "writer", "parser", "read", "input", "rr", "reading", "rer", "rl", "driver", "peer", "er", "stream", "handler", "entry"], "className": ["ClassName", "packageName", "classPath", "classData", "titleName", "moduleType", "logname", " classNAME", " ClassTitle", "stringType", "partNAME", " classNames", "packageData", "CLASSName", "moduleName", "moduleString", "ClassLine", "logName", "clPath", "partValue", "logValue", "partname", "titleLine", "classToken", " ClassName", "ClassRel", " classString", "playBody", "clRel", " classBody", "titleString", "classname", "CLASSTitle", " ClassNames", "completeRel", "classString", "logNAME", " classTitle", "classTitle", "playName", "classNo", " classLine", " ClassFull", " classStart", "packagePath", "classRel", " classToken", "classNot", "classType", "classFull", " classname", "stringName", "stringStart", " classData", "cellString", "cellToken", "classStart", "cellName", "Classname", "ClassNot", "partName", " classNot", "classValue", " classRel", "CLASSFull", "ClassString", "packagename", "cellRel", "ClassPath", "classNAME", "playNo", "ClassData", " classPath", "ClassToken", "classBody", "classLine", "clString", " classNo", "clBody", " classValue", "completeName", "clNo", "CLASSNames", "playString", "moduleStart", "completePath", "titleNot", "stringString", " classType", "clName", "classNames", " classFull"], "clazz": ["gluster", "cluster", "shace", "clace", "glade", " clade", "glclass", "claz", "laz", "class", "lass", "glace", "shade", "lclass", "classclass", " clace", "lazz", "classass", "clade", "classaz", "glass", "clclass", "shuster", "glazz", "classazz", "shazz", " cluster", "glaz"]}}
{"id1": "18451704", "id2": "7425022", "code1": "    public boolean isValidPage(BookPage page) {\n        boolean isValid = false;\n        try {\n            if (page.getType() == BookPage.TYPE_RESOURCE) {\n                BookPagePreviewPanel panel = new BookPagePreviewPanel(dControl, true);\n                panel.setCurrentBookPage(page);\n                isValid = !page.getUri().equals(\"\") && panel.isValid();\n            } else if (page.getType() == BookPage.TYPE_URL) {\n                URL url = new URL(page.getUri());\n                url.openStream().close();\n                isValid = true;\n            } else if (page.getType() == BookPage.TYPE_IMAGE) {\n                if (page.getUri().length() > 0) isValid = true;\n            }\n        } catch (Exception e) {\n            isValid = false;\n        }\n        return isValid;\n    }\n", "code2": "    private String transferWSDL(String wsdlURL, String userPassword) throws WiseConnectionException {\n        String filePath = null;\n        try {\n            URL endpoint = new URL(wsdlURL);\n            HttpURLConnection conn = (HttpURLConnection) endpoint.openConnection();\n            conn.setDoOutput(false);\n            conn.setDoInput(true);\n            conn.setUseCaches(false);\n            conn.setRequestMethod(\"GET\");\n            conn.setRequestProperty(\"Accept\", \"text/xml,application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5\");\n            conn.setRequestProperty(\"Connection\", \"close\");\n            if (userPassword != null) {\n                conn.setRequestProperty(\"Authorization\", \"Basic \" + (new BASE64Encoder()).encode(userPassword.getBytes()));\n            }\n            InputStream is = null;\n            if (conn.getResponseCode() == 200) {\n                is = conn.getInputStream();\n            } else {\n                is = conn.getErrorStream();\n                InputStreamReader isr = new InputStreamReader(is);\n                StringWriter sw = new StringWriter();\n                char[] buf = new char[200];\n                int read = 0;\n                while (read != -1) {\n                    read = isr.read(buf);\n                    sw.write(buf);\n                }\n                throw new WiseConnectionException(\"Remote server's response is an error: \" + sw.toString());\n            }\n            File outputDir = new File(wiseProperties.getProperty(\"wise.tmpDir\"));\n            if (!outputDir.exists()) {\n                outputDir.mkdir();\n                wiseProperties.setProperty(\"wise.forceImportObject\", \"true\");\n            }\n            File file = new File(wiseProperties.getProperty(\"wise.tmpDir\"), new StringBuffer(\"Wise\").append(IDGenerator.nextVal()).append(\".xml\").toString());\n            OutputStream fos = new BufferedOutputStream(new FileOutputStream(file));\n            IOUtils.copyStream(fos, is);\n            fos.close();\n            is.close();\n            filePath = file.getPath();\n        } catch (WiseConnectionException wce) {\n            throw wce;\n        } catch (Exception e) {\n            throw new WiseConnectionException(\"Wsdl download failed!\", e);\n        }\n        return filePath;\n    }\n", "label": 0, "substitutes": {"isValidPage": [" isValidPoint", " isValidpage", " isAvailableRow", "isSupportedPoint", "isCompletepage", " isAvailablePoint", "isValidpage", "isCompletePage", "isValidRow", "isValidPoint", "isAvailablePoint", "isCompletePoint", " isAvailablepage", "isSupportedRow", "isCompleteRow", " isAvailablePage", " isValidRow", "isSupportedPage", "isAvailableRow", "isSupportedpage", "isAvailablepage", "isAvailablePage"], "page": ["module", "site", "e", "attribute", "content", "admin", "base", "web", "project", "document", "name", "object", "key", "header", "pp", "window", "peer", "policy", "display", "entry", "Page", "p", "property", "be", "complete", "rule", "office", "instance", "server", "out", "create", "frame", "data", "me", "image", "chain", "word", "item", "address", "log", "parent", "channel", "event", "phrase", "record", "age", "to", "port", "code", "title", "language", "pe", "result", "message", "see", "application", "report", "cache", "layout", "file", "post", "resource", "row", "pg", "block", "wikipedia", "node", "link", "book", "article", "config", "table", "password", "version", "bp", "request", "true", "collection"], "panel": ["local", "cell", "player", "radius", "sheet", "addon", "bar", "tool", "join", "Panel", "bridge", "span", "manager", "view", "widget", "menu", "block", "label", "profile", "inner", "title", "summary", "within", "console", "bean", "notice", "pal", "plugin", "table", "chart", "container", "plan", "desktop", "frame", "tab", "pan", "group", "list", "el", "window", "login", "peer", "layout", "controller", "cal", "spin", "dial"], "isValid": ["tracevalid", "IsInvalid", "setPresent", "isPresent", " isVal", "lisValid", "ISAvailable", "traceAvailable", " isOk", "formValid", "hasValid", "isActive", "issValid", "IsAvailable", " isvalid", "hasInvalid", "IsValid", "isVal", "stillInvalid", "formInvalid", "IsOk", "imAvailable", "stillOk", "IsPresent", "traceInvalid", "isPublic", "isAvailable", "lisInvalid", "ISVal", "ISInvalid", "isvalid", "hasPublic", "lisOk", "ISOk", "IsActive", "stillValid", " isFound", " isPresent", " isAvailable", "issInvalid", "traceValid", "isOk", " isActive", "issOk", "setActive", "formvalid", "formAvailable", "ISValid", "imInvalid", "setOk", "imValid", "ISFound", "issVal", "setValid", "stillVal", " isPublic", "hasOk", "IsFound", " isInvalid", "imOk", "isFound", "lisPublic", "isInvalid"], "url": ["build", "sl", "address", "string", "file", "Url", "abs", "str", "nl", "mail", "resource", "b", "char", "tool", "browser", "open", "external", "r", "email", "dl", "null", "ll", "https", "ssl", "link", "location", "f", "uri", "URL", "sb", "ur", "user", "cert", "ml", "name", "u", "http", "rl", "mount", "l", "window", "ul"]}}
{"id1": "15362793", "id2": "22855019", "code1": "    public static String ReadURL(URL url, boolean textonly) {\n        try {\n            URLConnection uconn = url.openConnection();\n            Object ucont = uconn.getContent();\n            if (ucont instanceof InputStream) return ReadInputStream((java.io.InputStream) ucont, textonly); else return \"\" + ucont;\n        } catch (java.io.IOException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n", "code2": "    public static MessageService getMessageService(String fileId) {\n        MessageService ms = null;\n        if (serviceCache == null) init();\n        if (serviceCache.containsKey(fileId)) return serviceCache.get(fileId);\n        Properties p = new Properties();\n        try {\n            URL url = I18nPlugin.getFileURL(fileId);\n            p.load(url.openStream());\n            ms = new MessageService(p);\n        } catch (Exception e) {\n            ms = new MessageService();\n        }\n        serviceCache.put(fileId, ms);\n        return ms;\n    }\n", "label": 0, "substitutes": {"ReadURL": ["ReadString", " readUrl", "readUR", " ReadUrl", " ReadUR", "readUrl", " readUR", " readURL", "readString", "ReadUrl", "readURL", " readString", " ReadString", "ReadUR"], "url": ["build", "path", "address", "file", "Url", "p", "str", "nl", "b", "char", "browser", "ls", "call", "dl", "ll", "ssl", "link", "html", "f", "uri", "base", "URL", "job", "page", "ur", "q", "conn", "un", "name", "bel", "http", "key", "mount", "el", "rect", "l", "request", "xml", "ul"], "textonly": ["textOnly", "textall", " textfirst", "inputrender", "readrender", "readonly", "inputfirst", "textrender", "readOnly", "Textall", "textfirst", " textrender", " textall", "inputonly", "readall", "inputOnly", "readfirst", "Textonly", "TextOnly", " textOnly"], "uconn": ["uucon", "ucert", "Ucert", "cuconn", "cucert", "cuiss", "puconn", "pucon", "uConn", "puphys", "uuiss", "uucert", "ucon", "puConn", " ucon", "Uiss", " uConn", " uphys", "Uphys", "UConn", "cucon", "Uconn", "uiss", "Ucon", "uuconn", "uphys"], "ucont": ["ucany", "uniconto", "ucount", "ucnt", "uscdet", "uphrypt", "bcount", "unicdet", "usercount", "ucrypt", "ancict", "uphonto", "bcond", "unicannot", "uccict", "uuont", "usercond", "uccront", "ucong", "unicront", "cuond", "uccont", "unicont", "bcnt", "cunt", "unicong", "uuong", "cuont", "uconto", "uscont", "unicond", "uuond", "uccany", "uvrypt", "bcont", "unicict", "usercont", "uvonto", "uudet", "ucdet", "usercnt", "ancont", "unicany", "ucannot", "cuount", "unicrypt", "uvannot", "ucond", "ucront", "uvont", "ancront", "uscond", "ancany", "uscong", "ucict", "uphont", "uphannot"]}}
{"id1": "4686922", "id2": "11562165", "code1": "    public void extractResourceToFile(String resourcePath, File dest) {\n        InputStream in = getClass().getResourceAsStream(resourcePath);\n        try {\n            FileOutputStream out = FileUtils.openOutputStream(dest);\n            try {\n                IOUtils.copy(in, out);\n            } finally {\n                if (out != null) {\n                    out.close();\n                }\n            }\n        } finally {\n            if (in != null) {\n                in.close();\n            }\n        }\n    }\n", "code2": "    private void streamContains(String in, InputStream stream) throws IOException {\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        IOUtils.copy(stream, baos);\n        byte[] bytes = baos.toByteArray();\n        String cmp = new String(bytes, \"UTF-8\");\n        assertTrue(cmp.contains(in));\n        baos.close();\n    }\n", "label": 1, "substitutes": {"extractResourceToFile": ["extractResourceAsFiles", "extractResourceAsStream", "extractResourceFromfile", "extractResource2Files", "extractResources2Files", "extractResource2File", "extractResources2file", "extractResourceToStream", "extractResourceToFiles", "extractResource2file", "extractResourceFromFiles", "extractResource2Stream", "extractResourcesToStream", "extractResourceAsfile", "extractResourcesTofile", "extractResourcesToFiles", "extractResourceTofile", "extractResources2File", "extractResourceFromFile", "extractResourceAsFile", "extractResourcesToFile", "extractResourceFromStream", "extractResources2Stream"], "resourcePath": ["resourceLocation", "resourceIn", "templatepath", "uriPath", "resourceUrl", "uriName", " resourcepath", "uriLocation", "ResourceName", "attributePath", "resourceName", "templateIn", "ResourcePath", "ResourceIn", "Resourcepath", "ResourceLocation", " resourceName", "templateName", "attributeLocation", "attributeName", "resourcepath", "ResourceUrl", "templatePath", "attributeUrl", " resourceIn", "uriUrl"], "dest": ["trans", "decl", "dir", "dat", "des", "parent", "cat", "orig", "src", "Dest", "prop", "target", "output", "nom", "to", "null", "good", "mem", "img", "origin", "opt", "desc", "result", "sp", "end", "tmp", "loc", "etc", "dist", "source", "cont", "rest", "home", "self", "comb", "gov", "this", "temp", "coord", "lit", "w"], "in": ["local", "ln", "mc", "file", "id", "sin", "resource", "is", "inf", "up", "al", "no", "cin", "conf", "from", "mi", "re", "r", "ini", "IN", "i", "inc", "inner", "inside", "m", " din", "f", "on", "iter", "din", "raw", "init", "all", "isin", "input", "ind", "gin", "In", "source", "or", "ins", "rin", "l", "it", "bin", "ne", "none", "con", "inn"], "out": ["v", "cos", "again", "at", "en", " Out", "io", "print", "b", "t", "conv", "stable", "nt", "ot", "obj", "aos", "no", "output", "to", "n", "null", "i", "write", "inner", "res", "outer", "f", "col", "o", "note", "on", "net", "oss", "tmp", "cn", "ch", "writer", "exit", "client", "sys", "con", "OUT", "Out", "na", "cache", "it", "pool", "ou", "outs", "can", "ne", "co", "os", "w"]}}
{"id1": "14188043", "id2": "23620712", "code1": "    public static byte[] openHttpResult(String urlPath, boolean retry) throws IOException {\n        AQUtility.debug(\"net\", urlPath);\n        URL url = new URL(urlPath);\n        HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n        connection.setUseCaches(false);\n        connection.setInstanceFollowRedirects(true);\n        connection.setConnectTimeout(NET_TIMEOUT);\n        int code = connection.getResponseCode();\n        if (code == 307 && retry) {\n            String redirect = connection.getHeaderField(\"Location\");\n            return openHttpResult(redirect, false);\n        }\n        if (code == -1 && retry) {\n            return openHttpResult(urlPath, false);\n        }\n        AQUtility.debug(\"response\", code);\n        if (code == -1 || code < 200 || code >= 300) {\n            throw new IOException();\n        }\n        byte[] result = AQUtility.toBytes(connection.getInputStream());\n        return result;\n    }\n", "code2": "    private void insertService(String table, int type) {\n        Connection con = null;\n        log.info(\"\");\n        log.info(\"\u6b63\u5728\u751f\u6210\" + table + \"\u7684\u670d\u52a1\u3002\u3002\u3002\u3002\u3002\u3002\u3002\");\n        try {\n            con = DODataSource.getDefaultCon();\n            con.setAutoCommit(false);\n            Statement stmt = con.createStatement();\n            Statement stmt2 = con.createStatement();\n            String serviceUid = UUIDHex.getInstance().generate();\n            DOBO bo = DOBO.getDOBOByName(table);\n            List props = new ArrayList();\n            StringBuffer mainSql = null;\n            String name = \"\";\n            String l10n = \"\";\n            String prefix = table;\n            String serviceType = \"null\";\n            Boolean isNew = null;\n            switch(type) {\n                case 1:\n                    name = prefix + \"_insert\";\n                    l10n = name;\n                    props = bo.retrieveProperties();\n                    mainSql = getInsertSql(props, table);\n                    serviceType = \"8\";\n                    isNew = Boolean.TRUE;\n                    break;\n                case 2:\n                    name = prefix + \"_update\";\n                    l10n = name;\n                    props = bo.retrieveProperties();\n                    mainSql = this.getModiSql(props, table);\n                    serviceType = \"7\";\n                    isNew = Boolean.FALSE;\n                    break;\n                case 3:\n                    DOBOProperty property = DOBOProperty.getDOBOPropertyByName(bo.getName(), this.keyCol);\n                    if (property == null || property.getColName() == null) {\n                        return;\n                    }\n                    name = prefix + \"_delete\";\n                    l10n = name;\n                    props.add(property);\n                    mainSql = new StringBuffer(\"delete from \").append(table).append(\" where \").append(this.keyCol).append(\" = ?\");\n                    serviceType = \"5\";\n                    break;\n                case 4:\n                    property = DOBOProperty.getDOBOPropertyByName(bo.getName(), this.keyCol);\n                    if (property == null || property.getColName() == null) {\n                        return;\n                    }\n                    name = prefix + \"_browse\";\n                    l10n = name;\n                    props.add(property);\n                    mainSql = new StringBuffer(\"select * from \").append(table).append(\" where \").append(this.keyCol).append(\" = ?\");\n                    serviceType = \"10\";\n                    break;\n                case 5:\n                    serviceType = \"2\";\n                    name = prefix + \"_list\";\n                    l10n = name;\n                    mainSql = new StringBuffer(\"select * from \").append(table);\n            }\n            this.setParaLinkBatch(props, stmt2, serviceUid, isNew);\n            StringBuffer aSql = new StringBuffer(\"insert into DO_Service(objuid,l10n,name,bouid,mainSql,type) values(\").append(\"'\").append(serviceUid).append(\"','\").append(l10n).append(\"','\").append(name).append(\"','\").append(this.getDOBOUid(table)).append(\"','\").append(mainSql).append(\"',\").append(serviceType).append(\")\");\n            log.info(\"Servcice's Sql:\" + aSql.toString());\n            stmt.executeUpdate(aSql.toString());\n            stmt2.executeBatch();\n            con.commit();\n        } catch (SQLException ex) {\n            try {\n                con.rollback();\n            } catch (SQLException ex2) {\n                ex2.printStackTrace();\n            }\n            ex.printStackTrace();\n        } finally {\n            try {\n                if (!con.isClosed()) {\n                    con.close();\n                }\n            } catch (SQLException ex1) {\n                ex1.printStackTrace();\n            }\n        }\n    }\n", "label": 0, "substitutes": {"openHttpResult": ["openQueryResults", "OpenHTTPRes", "openhttpMessage", "openhttpResponse", "openHTTPResults", "OpenHttpResults", "getHTTPResponse", "getHttpResults", "getHttpResult", "getHttpResponse", "openHttpResponse", "OpenHTTPResults", "OpenHttpResponse", "OpenHttpResult", "openUrlResponse", "OpenHTTPResponse", "getHTTPRes", "openhttpResults", "openhttpRes", "OpenHttpRes", "openUrlResult", "openQueryResult", "openHTTPResult", "openHttpResults", "openUrlMessage", "openHttpMessage", "OpenHTTPResult", "openQueryRes", "openQueryResponse", "getHTTPResults", "getHttpRes", "openHTTPRes", "openUrlRes", "OpenHTTPMessage", "openhttpResult", "openUrlResults", "getHTTPResult", "openHttpRes", "openHTTPResponse", "OpenHttpMessage", "openHTTPMessage"], "urlPath": ["xmlFile", "UrlString", "dlpath", "nlP", "pathPath", "URLString", "xmlPath", "urlString", "urlId", "UrlDir", "dlStr", " urlFile", "nlFile", "urlpath", " urlpath", "urlCh", " urlName", "urlDir", "urlName", "pathpath", " urlDir", "dlPath", " urlCh", " urlP", "URLDir", "UrlName", "URLName", "URLId", "URLPath", "UrlId", "urlP", "xmlStr", "URLCh", "UrlFile", "xmlpath", " urlId", "nlpath", "Urlpath", "UrlCh", " urlString", "UrlPath", "pathStr", "urlStr", "urlFile", "UrlP", "pathFile", "dlFile", "nlPath"], "retry": ["terry", "retrain", "retrier", "tric", "attried", "attrain", "pretric", "rery", " retri", "terrying", " retrying", "pretrain", "redric", "Retrying", " rettry", "rerying", "pretried", "Rettry", "retrying", "Retri", "pretrying", "pretwrite", "rettry", "attry", "redry", "pretry", "reri", "redwrite", "retri", "Retry", "attrying", "retried", "terrain", "terried", "redrier", "pretrier", "trier", "twrite", "retric", "retwrite"], "url": ["sl", "log", "file", "Url", "li", "str", "nl", "char", "loader", "service", "ls", "open", "r", "dl", "ll", "pl", "https", "ssl", "link", "location", "uri", "base", "URL", "job", "web", "loc", "get", "ur", "conn", "user", "www", "http", "rl", "mount", "l", "il", "org", "ul"], "connection": ["created", "subject", "description", "number", "operation", "communication", "io", "resource", "channel", "cone", "ion", "position", "context", "open", "Connection", "network", "creation", "c", "to", "relation", "condition", "session", "computer", "statement", "close", "link", "city", "builder", "uri", "server", "set", "connect", "message", "using", "conn", "database", "create", "writer", "client", "generation", "http", "nc", "con", "application", "online", "pointer", "socket", "response", "l", "connected", "directory", "established", "character", "controller", "translation", "usage", "entry", "creator", "command"], "code": ["sec", "xx", "dec", "force", "number", "sequence", "id", "ce", "cause", "mode", "component", "test", "count", "level", "length", "num", "zone", "success", "cast", "e", "co", "se", "go", "call", "cod", "time", "c", "check", "xxx", "a", "rate", "status", "zip", "Code", "cc", "close", "ode", "ord", "coe", "desc", "ct", "coded", "message", "page", "codes", "ch", "change", "create", "ie", "cd", "name", "error", "zero", "nc", "currency", "cont", "one", "x", "rc", "controller", "state", "type", "ne", "cycle", "now", "entry", "size"], "redirect": ["promirect", "redistant", " redirection", "promistant", " redir", "regirect", "redirection", "Redirect", "Redistant", "promirection", "predirect", " reduction", "regir", "predir", "Redirection", "predirection", "predistant", "redir", "promir", "reduction", "reguction", "Reduction", "Redir", "regirection"], "result": ["match", "description", "results", "ret", "sequence", "transform", "process", "test", "length", "success", "total", "output", "complete", "other", "r", "meg", "profile", "res", "reason", "feature", "buffer", "params", "message", "date", "table", "out", "root", "vector", "Result", "cert", "comment", "data", "answer", "currency", "report", "memory", "password", "value", "request", "mask", "proc", "cup", "true", "command"]}}
{"id1": "11032546", "id2": "13657103", "code1": "    @Test\n    public void testCopyUnknownSize() throws IOException {\n        final InputStream in = new ByteArrayInputStream(TEST_DATA);\n        final ByteArrayOutputStream out = new ByteArrayOutputStream(TEST_DATA.length);\n        final int cpySize = ExtraIOUtils.copy(in, out, (-1));\n        assertEquals(\"Mismatched copy size\", TEST_DATA.length, cpySize);\n        final byte[] outArray = out.toByteArray();\n        assertArrayEquals(\"Mismatched data\", TEST_DATA, outArray);\n    }\n", "code2": "    private void forBundle(BundleManipulator manip) {\n        ByteArrayOutputStream bout = null;\n        try {\n            bout = new ByteArrayOutputStream();\n            ZipOutputStream zout = new ZipOutputStream(bout);\n            Bundle bundle = getBundle();\n            Enumeration<URL> files = bundle.findEntries(\"/\", \"*.vm\", false);\n            if (files != null) {\n                while (files.hasMoreElements()) {\n                    URL url = files.nextElement();\n                    String name = url.getFile();\n                    if (name.startsWith(\"/\")) {\n                        name = name.substring(1);\n                    }\n                    if (manip.includeEntry(name)) {\n                        zout.putNextEntry(new ZipEntry(name));\n                        IOUtils.copy(url.openStream(), zout);\n                    }\n                }\n            }\n            manip.finish(bundle, zout);\n            Manifest mf = new Manifest(bundle.getEntry(\"META-INF/MANIFEST.MF\").openStream());\n            zout.putNextEntry(new ZipEntry(\"META-INF/MANIFEST.MF\"));\n            mf.write(zout);\n            zout.close();\n            File tmpFile = File.createTempFile(TEMPLATES_SYMBOLIC_NAME, \".jar\");\n            FileUtils.writeByteArrayToFile(tmpFile, bout.toByteArray());\n            if (pluginAccessor.getPlugin(TEMPLATES_SYMBOLIC_NAME) != null) {\n                pluginController.uninstall(pluginAccessor.getPlugin(TEMPLATES_SYMBOLIC_NAME));\n            } else if (pluginAccessor.getPlugin(TEMPLATES_PLUGIN_KEY) != null) {\n                pluginController.uninstall(pluginAccessor.getPlugin(TEMPLATES_PLUGIN_KEY));\n            }\n            pluginController.installPlugin(new JarPluginArtifact(tmpFile));\n            ServiceReference ref = bundleContext.getServiceReference(PackageAdmin.class.getName());\n            ((PackageAdmin) bundleContext.getService(ref)).refreshPackages(null);\n            tmpFile.delete();\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            IOUtils.closeQuietly(bout);\n        }\n    }\n", "label": 1, "substitutes": {"testCopyUnknownSize": [" testCopyDifferentsize", " testCopyUnknownsize", " testCopyunknownSize", " testcopyKnownSize", " testCopyUnknownLength", " testCopyKnownsize", " testCopyDifferentSize", " testcopyUnknownsize", " testCopyunknownShape", " testcopyUnknownShape", " testCopyunknownsize", " testCopyKnownSize", " testcopyUnknownSize", " testCopyunknownLength", " testCopyDifferentShape", " testcopyUnknownLength", " testCopyKnownLength", " testcopyKnownShape", " testCopyDifferentLength", " testCopyUnknownShape", " testcopyKnownsize", " testcopyKnownLength", " testCopyKnownShape"], "in": ["log", "file", "en", "sin", "is", "inf", "up", "al", "cin", "from", "copy", "inv", "r", "null", "IN", "i", "inner", "inside", "on", "din", "isin", "mm", "input", "ind", "gin", "data", "In", "source", "ins", "rin", "l", "it", "bin", "ain", "con", "inn"], "out": ["err", "at", "log", "OU", " Out", "by", "io", "b", "t", "obj", "up", "aos", "output", "inv", "null", "to", "ex", "check", "n", "a", "res", "auto", "gt", "on", "o", "net", "result", "end", "user", "all", "gr", "client", "con", "data", "OUT", "one", " OUT", "or", "Out", "list", "sum", "it", "cmd", "ou", "outs", "co", "os"], "cpySize": ["CpyCount", "cplysize", "Cpysize", "cpeCount", "cfisize", " cpyCount", "cdyLength", "cfiSize", "cpyCount", "cdysize", " cpyLength", "cpysize", "cfiLength", "cpesize", "CplySize", "Cplysize", "CplyLength", " cplysize", "cplySize", "cplyCount", " cplySize", "cpeSize", "CpyLength", " cplyCount", "cdyCount", " cplyLength", "CpySize", "cdySize", " cpysize", "cpyLength", "CplyCount", "cpeLength", "cfiCount", "cplyLength"], "outArray": ["listArray", "OUTArray", "neObject", "inImpl", " outObject", "neStream", "outString", "outImpl", "outObject", "inString", "OUTObject", " outStream", "inArea", "outArea", "listArea", "OUTarray", "outStream", "listString", " outarray", " outImpl", "inArray", " outString", "neArray", " outArea", "listImpl", "nearray", "outarray", "OUTStream"]}}
{"id1": "7006052", "id2": "23035537", "code1": "    public static void copyFileTo(String src, String dest) throws FileNotFoundException, IOException {\n        File destFile = new File(dest);\n        InputStream in = new FileInputStream(new File(src));\n        OutputStream out = new FileOutputStream(destFile);\n        byte buf[] = new byte[1024];\n        int len;\n        while ((len = in.read(buf)) > 0) out.write(buf, 0, len);\n        in.close();\n        out.close();\n    }\n", "code2": "    public boolean getContent(String userId, String latestMsgId) {\n        try {\n            String targetUrl = \"http://api.fanfou.com/statuses/user_timeline.xml?id=\" + userId + \"&since_id=\" + latestMsgId;\n            URL url = new URL(targetUrl);\n            InputStream in = url.openStream();\n            ArrayList<MessageObj> list;\n            if (in != null) {\n                MessageListDOMParser parser = new MessageListDOMParser();\n                list = (ArrayList<MessageObj>) parser.parseXML(in);\n                TransactionDAO dao = new TransactionDAO();\n                dao.insert(list);\n            }\n            return true;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n", "label": 0, "substitutes": {"copyFileTo": ["copyFileThrough", "copyToFrom", " copyFilesTo", "copyToOver", "copyFileFrom", " copyFileFrom", "copyfileThrough", "copyfileFrom", " copyFileThrough", "copyFilesTo", "copyFilesFrom", "copyFilesThrough", "copyFileOver", "copyToThrough", "copyFilesOver", " copyFileOver", "copyToTo", "copyfileOver", "copyfileTo", " copyFilesThrough", " copyFilesFrom", " copyFilesOver"], "src": ["sec", "sr", "cur", "sq", "cos", "ctr", "txt", "sin", "rx", "st", "start", "url", "rs", "obs", "sit", "sf", "rel", "config", "sc", "Source", "sb", "ipl", "bs", "init", "rt", "usr", "req", "input", "http", "sys", "source", "cont", "rl", "rc", "ser", "ins", "pkg", "inst", "iv"], "dest": ["d", "trans", "them", "decl", "dir", "dat", "des", "orig", "test", "st", "Dest", "nt", "target", "way", "good", "pl", "port", "mem", "desc", "result", "end", "est", "tmp", "loc", " dst", "usr", "req", "exp", "www", "dist", "rest", "source", "home", "done", "cont", "pub", "del", "de", "origin"], "destFile": ["distDo", "srcFile", "distfile", " destDo", "destFiles", "sourceFile", "newPage", " destPage", "sourcefile", "Destfile", "DestFile", "srcDir", "srcfile", "newDo", "destfile", "sourceFiles", "newfile", "destDir", "distFile", "DestFiles", " destfile", "newFile", "destDo", "DestDir", "distPage", "srcFiles", "sourceDir", "destPage"], "in": ["ic", "en", "io", "sin", "is", "inf", "per", "up", "al", "cin", "from", "act", "ini", "IN", "inc", "i", "inner", "inside", "ze", "on", "iter", "din", "init", "input", "isin", "ind", "mm", "read", "gin", "im", "In", "el", "ai", "rc", "ins", "rin", "it", "info", "bin", "ain", "con", "inn"], "out": ["v", "cos", "at", "outs", "en", "p", "by", "io", "b", "t", "obj", "po", "nt", "ot", "aos", "output", "we", "to", "null", "n", "ex", "write", "inner", "res", "auto", "gt", "on", "outer", "o", "net", "oss", "cn", "writer", "client", "sys", "con", "OUT", "and", "Out", "it", "g", "ou", "can", "ne", "co", "os"], "buf": ["aka", "cv", "cur", "bytes", "batch", "alph", "bag", "log", "var", "str", "bar", "cat", "queue", "b", "obj", "conv", "arr", "rb", "msg", "prop", "gen", "cp", "good", "mu", "box", "block", "vec", "img", "bh", "bus", "cf", "br", "seq", "buffer", "buff", "cap", "db", "tab", "data", "Buff", "cam", "cb", "pad", "pkg", "uf", "cmd", "abet", "Buffer", "tx", "bin", "bc"], "len": ["ln", "val", "cmp", "v", "elt", "en", "ld", "str", "length", "mid", "lf", "t", "e", "count", "nt", "z", "lic", "no", "ls", "lan", "compl", "dl", "n", "ll", "pl", "vec", "fin", "rel", "mun", "seq", "end", "cap", "Len", "la", "exp", "lif", "le", "el", "l", "wid", "pos", "coll", "del", "lon", "il", "size"]}}
{"id1": "3330944", "id2": "3767903", "code1": "    public void extractImage(String input, String output, DjatokaDecodeParam params, IWriter w) throws DjatokaException {\n        File in = null;\n        String dest = output;\n        if (input.equals(STDIN)) {\n            try {\n                in = File.createTempFile(\"tmp\", \".jp2\");\n                input = in.getAbsolutePath();\n                in.deleteOnExit();\n                IOUtils.copyFile(new File(STDIN), in);\n            } catch (IOException e) {\n                logger.error(\"Unable to process image from \" + STDIN + \": \" + e.getMessage());\n                throw new DjatokaException(e);\n            }\n        }\n        BufferedImage bi = extractImpl.process(input, params);\n        if (bi != null) {\n            if (params.getScalingFactor() != 1.0 || params.getScalingDimensions() != null) bi = applyScaling(bi, params);\n            if (params.getTransform() != null) bi = params.getTransform().run(bi);\n            try {\n                BufferedOutputStream os = new BufferedOutputStream(new FileOutputStream(new File(dest)));\n                w.write(bi, os);\n                os.close();\n            } catch (FileNotFoundException e) {\n                logger.error(\"Requested file was not found: \" + dest);\n                throw new DjatokaException(e);\n            } catch (IOException e) {\n                logger.error(\"Error attempting to close: \" + dest);\n                throw new DjatokaException(e);\n            }\n        }\n        if (in != null) in.delete();\n    }\n", "code2": "    public static void copy(File source, File destination) throws FileNotFoundException, IOException {\n        if (source == null) throw new NullPointerException(\"The source may not be null.\");\n        if (destination == null) throw new NullPointerException(\"The destination may not be null.\");\n        FileInputStream sourceStream = new FileInputStream(source);\n        destination.getParentFile().mkdirs();\n        FileOutputStream destStream = new FileOutputStream(destination);\n        try {\n            FileChannel sourceChannel = sourceStream.getChannel();\n            FileChannel destChannel = destStream.getChannel();\n            destChannel.transferFrom(sourceChannel, 0, sourceChannel.size());\n        } finally {\n            try {\n                sourceStream.close();\n                destStream.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n", "label": 1, "substitutes": {"extractImage": ["extlateimage", "extractorFrame", "extractorImages", "extractorImage", "extractFrame", "extlateFrame", "extlateImage", "extprocessFrame", "Extprocessimage", "extprocessImages", "extprocessimage", "extractorimage", "ExtprocessFrame", "ExtractImage", "ExtprocessImage", "extprocessImage", "extlateImages", "extractimage", "ExtractFrame", "Extractimage", "ExtprocessImages", "ExtractImages", "extractImages"], "input": ["local", "text", "path", "sample", "seed", "background", "address", "string", "file", "p", "txt", "str", "before", "start", "Input", "context", "internal", "audio", "current", "select", "from", "url", "index", "qa", "null", "check", "query", "i", "pattern", "img", "hidden", "accept", "initial", "base", "config", "uri", "prefix", "buffer", "format", "out", "raw", "tmp", "init", "q", "upload", "error", "data", "source", "image", "hello", "rc", "ins", "empty", "ip", "request", "xml", "it", "this", "origin", "partial"], "output": ["path", "Output", "PUT", "icon", "put", "file", "OU", "generated", "oe", "print", "success", "current", "target", "filename", "to", "write", "port", "hidden", "o", "STDOUT", "prefix", "result", "format", "out", "name", "pretty", "source", "OUT", "image", "response", "type", "temp", "display"], "params": ["settings", " parameters", "Par", "arms", "members", "results", "packages", "p", "ars", "points", "pro", "terms", "modules", "eps", "pps", "properties", "abilities", "devices", "conf", "phi", "pas", "gs", "names", "ctx", "rs", "parents", "users", "stats", "images", "pi", "caps", "eters", "m", "units", "ims", "chains", "Parameters", "options", "config", "ps", "ports", "phys", "pins", "parts", "s", "fps", "changes", "mm", "actions", "tags", "requires", "pretty", "tools", "spec", "docs", "styles", "AMS", "details", "keys", "pkg", "photos", "marks", "las", "json", "param", "ams", "types", "proc", "prop", "jp", "par"], "w": ["d", "v", "wh", "h", "wd", "p", "sw", "ws", "e", "we", "rw", "n", "wx", "write", "wp", "m", "f", "o", "wl", "out", "wr", "Ws", "q", "writer", "nw", "wal", "W", "kw", "wt", "Writer", "ew", "wo", "window", "wb", "hw", "wa", "word"], "in": ["local", "win", "mc", "ln", "path", "file", "en", "p", "id", "sin", "old", "is", "inf", "po", "e", "Input", "al", "cin", "from", "copy", "mi", "edIn", "conf", " IN", "ini", "IN", "null", "i", "inner", "ar", " din", "f", "base", "phys", "ma", "out", "din", "raw", "init", "all", "isin", "vin", "mm", "read", "name", "gin", "include", "In", "source", "one", "ins", "rin", "it", "info", "bin", "nin", "sql", "con", "inn"], "dest": ["path", "trans", "decl", "dir", "dat", "des", "p", "txt", "cat", "orig", "src", "oe", "ws", "st", "Dest", "prop", "target", "pipe", "deg", "pas", "tif", "nom", "way", "to", "mem", "port", "img", "write", "csv", "origin", "opt", "desc", "resp", "result", "end", "out", "loc", "tmp", " dst", "usr", " destination", "alt", "dist", "data", "rest", "source", "save", "cont", "comb", "shape", "buf", "wb", "temp", "lit", "display"], "bi": ["ba", "ji", "phi", "pb", "zi", "li", "gi", "nb", "b", "di", "ki", "bg", "be", "jiang", "umi", "rob", "bb", "BI", "mi", "oi", "ni", "bie", "bits", "bo", "ini", " nib", "mu", "ibi", "i", "bra", "obo", "pi", "yi", "bh", "ib", "bis", "bone", "beck", "buff", "bs", "bm", "bil", "ali", "ibe", "iri", "abi", "phy", "bank", "qi", "hog", "bf", "obi", "ai", "ble", "bp", "fi", "bas", "vi", "bin", "isi", "Bi", "bc"], "os": ["ks", "cos", "oses", "oos", "bos", "et", "oes", "io", "ose", "is", "ot", "ox", "mot", "OS", "aos", "ows", "ls", "mos", "ts", "ols", "ios", "cs", "obs", "ons", "fs", "ns", "o", "ros", "osi", "bs", "los", "oss", "s", "acs", "ops", "ds", "ow", "oid", "sys", "or", "Os", "pos", "us", "css", "es", "oo", "ys"]}}
{"id1": "9647576", "id2": "20685385", "code1": "    private void Reserve() throws SQLException {\n        Statement stbookings, stchartwl;\n        String sp = \"\";\n        if (useragent) sp = \"agent\"; else sp = \"user\";\n        String userbooksql = \"\";\n        String agentbooksql = \"\";\n        String bookingid = String.valueOf(System.currentTimeMillis());\n        String currentcoach;\n        String currentseat;\n        try {\n            if (useragent) {\n                agentbooksql = \"update hp_administrator.agent_bookings set BOOKINGS = xmlquery('copy $new := $BOOKINGS modify do insert \";\n                agentbooksql += \" <detail booking_id=\\\"\" + booking_details.getTicketno() + \"\\\" status=\\\"open\\\" train_no=\\\"\" + booking_details.getTrain_no() + \"\\\" source=\\\"\" + booking_details.getSource() + \"\\\" dest=\\\"\" + booking_details.getDestination() + \"\\\" dep_date=\\\"\" + booking_details.getDate() + \"\\\" > \";\n            } else if (!useragent) {\n                userbooksql = \"update hp_administrator.user_bookings set BOOKINGS = xmlquery('copy $new := $BOOKINGS modify do insert \";\n                userbooksql += \" <detail booking_id=\\\"\" + booking_details.getTicketno() + \"\\\" status=\\\"open\\\" train_no=\\\"\" + booking_details.getTrain_no() + \"\\\" source=\\\"\" + booking_details.getSource() + \"\\\" dest=\\\"\" + booking_details.getDestination() + \"\\\" dep_date=\\\"\" + booking_details.getDate() + \"\\\" > \";\n            }\n            for (int tickpos = 0; tickpos < booking_details.getNoOfPersons(); tickpos++) {\n                currentcoach = coach.get(tickpos);\n                currentseat = seatno.get(tickpos);\n                if (!currentcoach.equals(\"WL\")) {\n                    String chartavailupdsql = \"update hp_administrator.chart_wl_order set AVAILABLE_BOOKED = xmlquery('copy $new := $AVAILABLE_BOOKED   modify do insert \";\n                    chartavailupdsql += \"<seat number=\\\"\" + currentseat + \"\\\"><details user_id=\\\"\" + booking_details.getUserId() + \"\\\" usertype=\\\"\" + sp + \"\\\" ticket_no=\\\"\" + booking_details.getTicketno() + \"\\\" name=\\\"\" + booking_details.getNameAt(tickpos) + \"\\\" age=\\\"\" + booking_details.getAgeAt(tickpos) + \"\\\" sex=\\\"\" + booking_details.getSexAt(tickpos) + \"\\\" type=\\\"primary\\\"  /></seat>\";\n                    chartavailupdsql += \" into $new/status/class[@name=\\\"\" + booking_details.getTclass() + \"\\\"]/coach[@number=\\\"\" + currentcoach + \"\\\"] \";\n                    chartavailupdsql += \" return  $new' ) where train_no like '\" + booking_details.getTrain_no() + \"' and date = '\" + booking_details.getDate() + \"' \";\n                    System.out.println(chartavailupdsql);\n                    stchartwl = conn.createStatement();\n                    int updstat = stchartwl.executeUpdate(chartavailupdsql);\n                    if (updstat > 0) System.out.println(\"chart_wl  availability  updated\");\n                } else if (currentcoach.equals(\"WL\")) {\n                    String chartwlupdsql = \"update hp_administrator.chart_wl_order set WAITLISTING = xmlquery('copy $new := $WAITLISTING modify do insert \";\n                    chartwlupdsql += \"<details user_id=\\\"\" + booking_details.getUserId() + \"\\\" usertype=\\\"\" + sp + \"\\\" ticket_no=\\\"\" + booking_details.getTicketno() + \"\\\" name=\\\"\" + booking_details.getNameAt(tickpos) + \"\\\" age=\\\"\" + booking_details.getAgeAt(tickpos) + \"\\\" sex=\\\"\" + booking_details.getSexAt(tickpos) + \"\\\" type=\\\"primary\\\" /></seat>\";\n                    chartwlupdsql += \" into $new/status/class[@name=\\\"\" + booking_details.getTclass() + \"\\\"] \";\n                    chartwlupdsql += \" return  $new' ) where train_no like '\" + booking_details.getTrain_no() + \"' and date = '\" + booking_details.getDate() + \"' \";\n                    System.out.println(chartwlupdsql);\n                    stchartwl = conn.createStatement();\n                    int updstat = stchartwl.executeUpdate(chartwlupdsql);\n                    if (updstat > 0) System.out.println(\"chart_wl  waitlisting  updated\");\n                }\n                if (useragent) agentbooksql += \"<person><coach>\" + currentcoach + \"</coach><seat>\" + currentseat + \"</seat></person>\"; else userbooksql += \"<person><coach>\" + currentcoach + \"</coach><seat>\" + currentseat + \"</seat></person>\";\n            }\n            if (useragent) {\n                agentbooksql += \"</detail>   as first into $new/book return  $new' ) where agent_id like '\" + booking_details.getUserId() + \"'\";\n                System.out.println(agentbooksql);\n                stbookings = conn.createStatement();\n                int updstat = stbookings.executeUpdate(agentbooksql);\n                if (updstat > 0) System.out.println(\"agent bookings updated\");\n            } else {\n                userbooksql += \"</detail>   as first into $new/book return  $new' ) where user_id like '\" + booking_details.getUserId() + \"'\";\n                System.out.println(userbooksql);\n                stbookings = conn.createStatement();\n                int updstat = stbookings.executeUpdate(userbooksql);\n                if (updstat > 0) System.out.println(\"user bookings  updated\");\n            }\n        } catch (SQLException e) {\n            conn.rollback();\n            e.printStackTrace();\n        }\n    }\n", "code2": "    private Long getNextPkValueForEntityIncreaseBy(String entityName, int count, int increasePkBy) {\n        if (increasePkBy < 1) increasePkBy = 1;\n        String where = \"where eoentity_name = '\" + entityName + \"'\";\n        if (false) {\n            EOEditingContext ec = ERXEC.newEditingContext();\n            ec.lock();\n            try {\n                EODatabaseContext dbc = ERXEOAccessUtilities.databaseContextForEntityNamed((EOObjectStoreCoordinator) ec.rootObjectStore(), entityName);\n                dbc.lock();\n                try {\n                    EOEntity entity = ERXEOAccessUtilities.entityNamed(ec, entityName);\n                    EOAdaptorChannel channel = (EOAdaptorChannel) dbc.adaptorContext().channels().lastObject();\n                    NSArray result = channel.primaryKeysForNewRowsWithEntity(increasePkBy, entity);\n                    return (Long) ((NSDictionary) result.lastObject()).allValues().lastObject();\n                } finally {\n                    dbc.unlock();\n                }\n            } finally {\n                ec.unlock();\n            }\n        } else {\n            ERXJDBCConnectionBroker broker = ERXJDBCConnectionBroker.connectionBrokerForEntityNamed(entityName);\n            Connection con = broker.getConnection();\n            try {\n                try {\n                    con.setAutoCommit(false);\n                    con.setReadOnly(false);\n                } catch (SQLException e) {\n                    log.error(e, e);\n                }\n                for (int tries = 0; tries < count; tries++) {\n                    try {\n                        ResultSet resultSet = con.createStatement().executeQuery(\"select pk_value from pk_table \" + where);\n                        con.commit();\n                        boolean hasNext = resultSet.next();\n                        long pk = 1;\n                        if (hasNext) {\n                            pk = resultSet.getLong(\"pk_value\");\n                            con.createStatement().executeUpdate(\"update pk_table set pk_value = \" + (pk + increasePkBy) + \" \" + where);\n                        } else {\n                            pk = maxIdFromTable(entityName);\n                            con.createStatement().executeUpdate(\"insert into pk_table (eoentity_name, pk_value) values ('\" + entityName + \"', \" + (pk + increasePkBy) + \")\");\n                        }\n                        con.commit();\n                        return new Long(pk);\n                    } catch (SQLException ex) {\n                        String s = ex.getMessage().toLowerCase();\n                        boolean creationError = (s.indexOf(\"error code 116\") != -1);\n                        creationError |= (s.indexOf(\"pk_table\") != -1 && s.indexOf(\"does not exist\") != -1);\n                        creationError |= s.indexOf(\"ora-00942\") != -1;\n                        if (creationError) {\n                            try {\n                                con.rollback();\n                                log.info(\"creating pk table\");\n                                con.createStatement().executeUpdate(\"create table pk_table (eoentity_name varchar(100) not null, pk_value integer)\");\n                                con.createStatement().executeUpdate(\"alter table pk_table add primary key (eoentity_name)\");\n                                con.commit();\n                            } catch (SQLException ee) {\n                                throw new NSForwardException(ee, \"could not create pk table\");\n                            }\n                        } else {\n                            throw new NSForwardException(ex, \"Error fetching PK\");\n                        }\n                    }\n                }\n            } finally {\n                broker.freeConnection(con);\n            }\n        }\n        throw new IllegalStateException(\"Couldn't get PK\");\n    }\n", "label": 1, "substitutes": {"Reserve": ["Consolve", "Reserved", "Conserved", "Servation", "Reservation", "Conserve", "resolve", "reserve", "reservation", "Resolve", "Conservation", "Solve", "reserved", "Served", "Serve"], "stbookings": ["stbooksing", "Stbooksies", "stBookies", "stbinders", "Stbookers", "stbindies", "Stbookings", "stbindings", "stbooking", "stBookings", "stBookers", "stbinding", "stbookers", "stbooksers", "stBooking", "Stbooksings", "Stbooking", "stbooksies", "Stbooksing", "Stbookies", "Stbooksers", "stbookies", "stbooksings"], "stchartwl": ["stplotwl", "stchartml", "STchartwl", "STchartbook", "STchartml", "STChartwl", "stChartbook", "stchartbook", "stchartwal", "STChartbook", "stChartwal", "stpagewal", "stChartml", "STChartwal", "stChartwl", "stplotbook", "stplotml", "stplotwal", "stpagebook", "stpagewl", "stpageml", "STchartwal", "STChartml"], "sp": ["esp", "spr", "pb", "pt", "so", "tp", "lp", "p", "sw", "sy", "osp", "SP", "st", "sm", " SP", "asp", "service", "policy", "si", "cp", "scope", "vol", "pol", "sf", "sk", "ps", "sc", "pe", "sb", "isp", "bsp", " esp", "spe", "sil", "ap", "sv", "pp", "Sp", "yp", "ss", "space", "sh", "jp", "se"], "userbooksql": ["agentbookssql", "userbookql", "userbookQL", "userreadsql", "userpagesQL", "userpagesqs", " userbookssql", " userbooksSQL", "userbooksQL", " userbindql", "clientbooksql", "userreadsels", "usertypesqs", "userscriptselly", "userookselly", "userbooksels", "agentpagesqs", "usertypesql", "userooksql", "userooksqs", "userreadsqs", "clientbooksqs", "userbindquer", "userBookssql", "userbooksquer", "userBooksSQL", "agentbooksqs", "userscriptsqs", "userbysquer", "userbindql", "agentbooksQL", " userbindquer", "userbyssql", "userBooksql", "clientreadsql", "userbooksSQL", "usertypessql", "userbindsql", "userooksels", "userpagesql", "userbookssql", "userscriptsels", "clientbooksels", "clientreadsels", " userbindsql", "agentpagesql", "usertypesQL", "userbookqs", "agentpagessql", "clientreadselly", "userreadselly", "userbysql", " userbooksquer", "userbysSQL", "clientbookselly", " userbindSQL", "agentpagesQL", "userscriptsql", "userpagessql", "userbindSQL", "userbooksqs", "clientreadsqs", "userbookselly", "userBooksquer"], "agentbooksql": ["ownerbooksQL", " agentbooksQL", "agentiquesili", "agentbooksquer", "agentbookssql", "agentBookssql", "agentletsql", " agentBooksqu", "agentbeansql", "agentletsquer", "agentbookQL", "agentbookquer", "ownerbeansili", "agentBooksili", "agentbooksqu", "agentbookql", "agentbookili", "agentbeansili", "ownerbooksql", "agentbeansQL", "agentpagesili", "agentBooksQL", "agentBooksql", "agentiquesQL", " agentbooksqu", "agentiquesql", "agentbooksQL", " agentbookili", " agentBookssql", "ownerbooksili", " agentbookssql", "ownerbeansql", "agentBooksqu", "agentbooksili", "agentBooksquer", " agentBooksql", " agentBooksquer", " agentbookql", "agentbeansquer", "ownerbeansQL", " agentbooksquer", "agentletssql", "agentiquesqu", "ownerbooksquer", "agentletsqu", "ownerbeansquer", "agentpagesql", "agentpagessql", "agentiquesquer", "agentiquessql", "agentpagesQL", " agentbookQL", " agentbooksili"], "bookingid": ["bookillingID", "Bookingids", "bookingingids", "BookingID", "bookingsID", "bookingID", "BookingsID", "bookingids", "bookingingID", "Bookingsids", "Bookingsid", "bookingsid", "Bookingid", "bookillingids", "bookingingid", "bookingsids", "bookillingid"], "currentcoach": ["currentCoch", "currentCoACH", "currentCOac", "currentlycoat", "currentconac", "currentlycat", "currentcoac", "currentlycoch", "currentcoat", " currentcoACH", "currentcalech", "currentlycoasp", "currentcoarch", "currentcoachable", "currentlycoac", "currentlycoech", "currentconasp", "currentcoeACH", " currentfoarch", "currentcasp", "currentfoachable", "currentlyCoachable", "currentcoACH", "currentfoACH", "currentfoch", "currentlycasp", "currentconach", "currentcac", "currentcat", "currentlyCoech", "currentcoasp", "currentCOach", "currentcalach", "currentlyCoach", "currentcalachable", " currentcoch", "currentCoech", "currentfoarch", " currentfoACH", "currentfoach", "currentCoarch", "currentcoech", " currentcoarch", "currentCoachable", "currentCOasp", "currentlycoachable", "currentcach", "currentlycoach", " currentfoch", "currentlyCoch", "currentcoeach", "currentcoearch", "currentCoach", "currentlycac", "currentcalch", "currentCOat", "currentconat", "currentcoch", "currentfoech", "currentlycach", " currentfoach"], "currentseat": ["currentroute", " currentsen", "currentslot", " currentsel", "currentsen", "currentlyseat", "reportedsel", "curroute", "currentport", "currentlyslot", "reportedroute", "currentsel", " currentroute", "cursel", "curseat", "currentlysen", "currentlysel", "Currentsel", "curport", "reportedport", "Currentsen", "Currentseat", " currentport", " currentslot", "reportedseat", "Currentslot"], "tickpos": ["testposition", "rickpo", "snappo", "rickprop", " tickPos", "poppo", "popposition", "testpo", "tickposition", "stickpos", "checkposition", "checkpos", "quoteno", "snapposition", "snapPos", "quotepos", "checkPos", "snappos", "rickPos", "ickpo", "testpos", "rickpos", "tickpo", " tickno", " tickposition", "stickno", "popPos", "tickprop", "quoteposition", "tickPos", "testPos", "stickprop", "ickPos", " tickpo", "poppos", "quotePos", "ickpos", "checkpo", "tickno", "ickposition", " tickprop", "stickposition", "stickPos", "stickpo"], "chartavailupdsql": ["chartavailupdsQL", "chartavailupdatesq", "chartavailupdatessql", "chartavailupdatesQL", "chartavailupsdssql", "chartavailupdql", "chartavailupdQL", "chartavailupsdatessql", "chartavailupdatesql", "chartavailupsdsQL", "chartavailupsdsql", "chartavailupsdatesql", "chartavailupsdsq", "chartavailupdq", "chartavailupsdatesq", "chartavailupdssql", "chartavailupdsq", "chartavailupysql", "chartavailupysQL", "chartavailupsdatesQL", "chartavailupyssql", "chartavailupysq"]}}
{"id1": "16590954", "id2": "9526031", "code1": "    public void createJAR(String fileString, String ext) {\n        try {\n            File file = new File(fileString);\n            int i = fileString.lastIndexOf(java.io.File.separator);\n            String dir = fileString.substring(0, i + 1);\n            if (ext.matches(\"jar\")) {\n                jarFile = new File(getClass().getClassLoader().getResource(\"jsdviewer.jar\").toURI());\n                java.io.FileOutputStream fstrm = new java.io.FileOutputStream(file);\n                FileChannel in = (new java.io.FileInputStream(jarFile)).getChannel();\n                FileChannel out = fstrm.getChannel();\n                in.transferTo(0, jarFile.length(), out);\n                in.close();\n                out.close();\n            } else {\n                file.mkdir();\n            }\n            File.umount(file);\n            File temp = new File(dir + \"document.jsd\");\n            FileOutputStream fstrm2 = new FileOutputStream(temp.getCanonicalPath());\n            ostrm = new ObjectOutputStream(fstrm2);\n            ostrm.writeObject(doc);\n            ostrm.flush();\n            ostrm.close();\n            File.umount();\n            File docFile = new File(file.getCanonicalPath() + java.io.File.separator + \"document.jsd\");\n            File.cp_p(temp, docFile);\n            File.umount();\n            temp.delete();\n            File.umount(file);\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n", "code2": "    public boolean register(Object o) {\n        String passwordAsText;\n        if (o == null) throw new IllegalArgumentException(\"object cannot be null\");\n        if (!(o instanceof User)) {\n            throw new IllegalArgumentException(\"passed argument is not an instance of the User class\");\n        }\n        User newUser = (User) o;\n        passwordAsText = newUser.getPassword();\n        newUser.setPassword(passwordEncoder.encodePassword(passwordAsText, null));\n        newUser.setRegDate(new Date());\n        logger.debug(\"Setting default Authority {} to new user!\", Authority.DEFAULT_NAME);\n        newUser.getAuthorities().add(super.find(Authority.class, 1));\n        logger.debug(\"Creating hash from email address! using Base64\");\n        newUser.setHash(new String(Base64.encodeBase64(newUser.getEmail().getBytes())));\n        logger.debug(\"Creating phpBB forum User, by calling URL: {}\", forumUrl);\n        try {\n            StringBuilder urlString = new StringBuilder(forumUrl);\n            urlString.append(\"phpBB.php?action=register\").append(\"&login=\").append(newUser.getLogin()).append(\"&password=\").append(passwordAsText).append(\"&email=\").append(newUser.getEmail());\n            sqlInjectionPreventer(urlString.toString());\n            logger.debug(\"Connecting to URL: {}\", urlString.toString());\n            URL url = new URL(urlString.toString());\n            URLConnection urlCon = url.openConnection();\n            BufferedReader in = new BufferedReader(new InputStreamReader(urlCon.getInputStream()));\n            String inputLine;\n            while ((inputLine = in.readLine()) != null) newUser.setForumID(Integer.valueOf(inputLine));\n            in.close();\n        } catch (IOException io) {\n            logger.error(\"Connecting failed! Msg: {}\", io.getMessage());\n            throw new RuntimeException(\"Couldn't conntect to phpBB\");\n        } catch (NumberFormatException e) {\n            logger.error(\"phpBB user generation failed! Msg: {}\", e.getMessage());\n            throw new RuntimeException(\"phpBB user generation failed!\");\n        }\n        entityManager.persist(newUser);\n        try {\n            sendConfirmationEmail(newUser);\n            return true;\n        } catch (MailException ex) {\n            return false;\n        }\n    }\n", "label": 0, "substitutes": {"createJAR": ["createIJARS", "createGAP", "createPHAR", "createPHAP", "saveIJART", "saveIJARS", "createJARS", "createJAP", "saveIJAR", "createGART", "createIJAP", "createIJART", "createGAR", "createIJAR", "saveJART", "saveJAR", "saveIJAP", "createJART", "createPHART", "saveJARS", "createGARS", "createPHARS", "saveJAP"], "fileString": ["fileStr", "FileRest", "FileString", "messageText", "fileRest", "pathstring", "ileRest", " fileStr", "pathString", "ileString", "Filestring", " fileRest", " filestring", "FileText", "ilestring", " fileText", "FileName", "messageName", " fileName", "ileStr", "fileName", "messageStr", "pathStr", "filestring", "FileStr", "fileText", "ileName", "messageString"], "ext": ["text", "path", "js", "typ", "tex", "txt", "str", "append", "char", "prot", "e", "t", "ort", "Ext", "external", "gz", "ex", "EXT", "except", "pat", "desc", "suff", "format", "end", "xt", "req", "ime", "exe", "exp", "ind", "name", "cont", "rest", "enc", "ix", "fr", "xp", "cmd", "type", "off"], "file": ["local", "path", "module", "force", "h", "log", "lock", "parent", "io", "resource", "FILE", "store", "channel", "ile", "t", "disk", "mail", "class", "File", "open", "from", "output", "run", "url", "work", "model", "time", "to", "null", "port", " File", "link", "f", "base", "buffer", "table", "message", "page", "format", "get", "user", "doc", "db", "fp", "input", "tree", "name", "document", "foo", "line", "http", "data", "source", "le", "report", "image", "memory", "list", "handle", "default", "cache", "info", "pool", "type", "this"], "i": ["v", "I", "p", "li", "id", "gi", "is", "di", "t", "ii", "ati", "j", "phi", "ri", "mi", "si", "index", "c", "ini", "n", "pi", "ci", "m", "f", "o", "s", "xi", "ind", " j", "x", "ai", "ip", "ir", "bi", "ui", "ami"], "dir": ["direct", "d", "path", "lib", " Dir", "id", "disk", "mod", "part", "dy", "star", "url", "vol", " folder", "uri", "rel", "loc", "dd", "root", "tmp", "project", " d", "Dir", "db", "ind", "org", " directory", "direction", "dist", "folder", "home", "done", "addr", "pkg", "ir", "directory", "del", "DIR", "wd", "div"], "jarFile": ["jFilename", "javaName", "tarFile", "javaFile", "jarEmail", "javaFilename", "pkgFILE", " jarField", "javafile", "jarFilename", "JarFilename", "tarEmail", "jarfile", " jarFilename", "pkgField", "JarField", "jName", "pkgFile", "tarfile", "tarFilename", "jarFILE", "JarFILE", "jFile", "jarName", " jarfile", " jarFILE", "jarField", "JarEmail", " jarName", "JarFile", "jfile", " jarEmail", "Jarfile"], "fstrm": ["fcrms", "fbstrp", "ftrum", " fstrcm", " fdrm", "fsprdm", "fdrm", "fsprp", "ftrp", "fbstrm", "fdrmed", "fslm", "fsprm", " fdrum", "fbstrdm", "fdrum", "fstrp", "fstrcm", "fslcm", "ftrdm", "ftrcm", "fslmed", "fstrmed", "fstrms", " fstrmed", "fcrm", " fstrum", "fbsprdm", "fbsprm", "fcrp", "fslum", " fdrmed", "fbsprms", "fbstrms", "ftrms", "fbsprp", "fstrum", "ftrmed", "fsprms", "ftrm", "fdrcm", " fdrcm", "fcrdm", "fstrdm"], "in": ["pin", "ic", "en", "sin", "io", "is", "inf", "up", "cin", "from", "re", " IN", "r", "IN", "inc", "inner", "pi", "inside", "m", " din", "f", "o", "iter", "din", "oin", "init", "input", "isin", "ind", "read", "mm", "gin", "In", "im", "add", "ai", "ins", "rin", "it", "bin", "inn"], "out": ["v", "serv", "cos", "at", "p", "OU", "io", "channel", "t", "conv", "obj", "aos", "output", "inv", "c", "ex", "n", "null", "to", "inner", "m", "gc", "outer", "o", "net", "s", "conn", "cn", "ch", "writer", "client", "cm", "cont", "OUT", "Out", "it", "ou", "outs", "co", "os", "w"], "temp": ["fake", "local", "mint", "path", "tar", "wrap", "pt", "p", "mt", "term", "parent", "orig", "mod", "t", "tem", "dest", "current", "output", "copy", "cp", "thread", "null", "to", "TM", "Temp", "mem", "res", " Temp", "zip", "m", "EMP", "stem", "tm", "buffer", "tmp", "mm", "mk", "template", "name", "document", "util", "tree", "cont", "memory", "mp", "cache", "directory", " temporary", "tc", "porary", "tx", "tt", "emp", "Tem", "pool", "full", " tmp"], "fstrm2": ["fstrm1", "fStrtm2", "fstrp7", "fstrmm1", "fstrm7", "fstrp2", "fstrcm7", "fstrtm2", "fstrcm2", "fstrtm1", "fStrtm1", "fstrM7", "fstrmm2", "fStrp1", "fStrp2", "fStrp7", "fStrm7", "fStrm2", "fStrm1", "fstrp1", "fstrcm1", "fstrM2", "fstrM1"], "ostrm": ["ostRM", "astm", "astRM", "ostrom", "istnm", " ostm", "osRM", "osrm", "osmr", " ostrem", "istrem", "osrem", "osm", "istRM", " ostnm", "ostnm", "ostlamm", "ostmr", "ortrom", "astrem", "ostm", "ortrm", "astrom", "astrm", " ostRM", "astlamm", "astmr", "istrm", "ortlamm", " ostrom", "ostrem", "osnm", "ortRM", "istm", " ostlamm", "istmr", "oslamm"], "docFile": ["Docfile", "documentFiles", "DocLine", " docLine", " docFiles", "manPath", "documentFile", "documentDir", "docFiles", "docLine", "manFile", " docfile", "docfile", "manDir", "documentLine", "docPath", "DocPath", "DocDir", "DocFiles", "manfile", " docPath", " docDir", "DocFile", "docDir"]}}
{"id1": "12066447", "id2": "13657103", "code1": "    protected void truncate(final File file) {\n        LogLog.debug(\"Compression of file: \" + file.getAbsolutePath() + \" started.\");\n        if (FileUtils.isFileOlder(file, ManagementFactory.getRuntimeMXBean().getStartTime())) {\n            final File backupRoot = new File(this.getBackupDir());\n            if (!backupRoot.exists() && !backupRoot.mkdirs()) {\n                throw new AppenderInitializationError(\"Can't create backup dir for backup storage\");\n            }\n            SimpleDateFormat df;\n            try {\n                df = new SimpleDateFormat(this.getBackupDateFormat());\n            } catch (final Exception e) {\n                throw new AppenderInitializationError(\"Invalid date formate for backup files: \" + this.getBackupDateFormat(), e);\n            }\n            final String date = df.format(new Date(file.lastModified()));\n            final File zipFile = new File(backupRoot, file.getName() + \".\" + date + \".zip\");\n            ZipOutputStream zos = null;\n            FileInputStream fis = null;\n            try {\n                zos = new ZipOutputStream(new FileOutputStream(zipFile));\n                final ZipEntry entry = new ZipEntry(file.getName());\n                entry.setMethod(ZipEntry.DEFLATED);\n                entry.setCrc(FileUtils.checksumCRC32(file));\n                zos.putNextEntry(entry);\n                fis = FileUtils.openInputStream(file);\n                final byte[] buffer = new byte[1024];\n                int readed;\n                while ((readed = fis.read(buffer)) != -1) {\n                    zos.write(buffer, 0, readed);\n                }\n            } catch (final Exception e) {\n                throw new AppenderInitializationError(\"Can't create zip file\", e);\n            } finally {\n                if (zos != null) {\n                    try {\n                        zos.close();\n                    } catch (final IOException e) {\n                        LogLog.warn(\"Can't close zip file\", e);\n                    }\n                }\n                if (fis != null) {\n                    try {\n                        fis.close();\n                    } catch (final IOException e) {\n                        LogLog.warn(\"Can't close zipped file\", e);\n                    }\n                }\n            }\n            if (!file.delete()) {\n                throw new AppenderInitializationError(\"Can't delete old log file \" + file.getAbsolutePath());\n            }\n        }\n    }\n", "code2": "    private void forBundle(BundleManipulator manip) {\n        ByteArrayOutputStream bout = null;\n        try {\n            bout = new ByteArrayOutputStream();\n            ZipOutputStream zout = new ZipOutputStream(bout);\n            Bundle bundle = getBundle();\n            Enumeration<URL> files = bundle.findEntries(\"/\", \"*.vm\", false);\n            if (files != null) {\n                while (files.hasMoreElements()) {\n                    URL url = files.nextElement();\n                    String name = url.getFile();\n                    if (name.startsWith(\"/\")) {\n                        name = name.substring(1);\n                    }\n                    if (manip.includeEntry(name)) {\n                        zout.putNextEntry(new ZipEntry(name));\n                        IOUtils.copy(url.openStream(), zout);\n                    }\n                }\n            }\n            manip.finish(bundle, zout);\n            Manifest mf = new Manifest(bundle.getEntry(\"META-INF/MANIFEST.MF\").openStream());\n            zout.putNextEntry(new ZipEntry(\"META-INF/MANIFEST.MF\"));\n            mf.write(zout);\n            zout.close();\n            File tmpFile = File.createTempFile(TEMPLATES_SYMBOLIC_NAME, \".jar\");\n            FileUtils.writeByteArrayToFile(tmpFile, bout.toByteArray());\n            if (pluginAccessor.getPlugin(TEMPLATES_SYMBOLIC_NAME) != null) {\n                pluginController.uninstall(pluginAccessor.getPlugin(TEMPLATES_SYMBOLIC_NAME));\n            } else if (pluginAccessor.getPlugin(TEMPLATES_PLUGIN_KEY) != null) {\n                pluginController.uninstall(pluginAccessor.getPlugin(TEMPLATES_PLUGIN_KEY));\n            }\n            pluginController.installPlugin(new JarPluginArtifact(tmpFile));\n            ServiceReference ref = bundleContext.getServiceReference(PackageAdmin.class.getName());\n            ((PackageAdmin) bundleContext.getService(ref)).refreshPackages(null);\n            tmpFile.delete();\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            IOUtils.closeQuietly(bout);\n        }\n    }\n", "label": 1, "substitutes": {"truncate": ["extuncize", "trunize", "trculate", "extvalidize", "trunate", "extvalidate", "trunicate", "trvalidicate", "trvalidation", "extuncicate", "extuncation", "trvalidize", "truncize", "trculation", "extvalidicate", "trculize", "trunation", "trvalidate", "truncation", "extuncate", "extvalidation", "trculicate", "truncicate"], "file": ["local", "path", "module", "log", "dir", "lock", "parent", "io", "resource", "FILE", "channel", "ile", "be", "e", "event", "class", "current", "File", "run", "attribute", "work", "filename", "model", "from", "time", "null", "range", "block", "to", "port", "zip", "link", "f", "base", "size", "table", "message", "page", "out", "get", "format", "files", "user", "fp", "create", "tree", "frame", "name", "foo", "spec", "object", "line", "template", "data", "source", "le", "report", "image", "or", "use", "handle", "info", "type", "full", "this", "word"], "backupRoot": ["backureroot", "backumproot", " backupidDir", "backupFolder", "backflowDir", "workupidroot", "backupDir", "backupidFolder", " backupidroot", "BackupRoot", "backureDir", "backupHome", "backdownDir", "workuproot", "backuproot", "workupidDir", "backuperroot", "backmpBoot", "backuperRoot", "backmpRoot", "workupRoot", "backureHome", "backupidDir", "backureRoot", "workupidRoot", "BackupDir", "workupidHome", "workupDir", "backumpRoot", " backupidBox", "BackupFolder", " backupidRoot", "backupidRoot", "backupidBox", "backupBox", "workupHome", " backuproot", "backupsDir", "backdownRoot", "BackupidRoot", "backureBoot", "workupBoot", " backupDir", "backupsroot", "backdownFolder", "workupidBoot", "backflowFolder", "backuperHome", "backumpBox", "backumpDir", "backflowRoot", "BackupidFolder", "backmproot", "backupBoot", "BackupidDir", "backupidroot", "backupsBox", "backupidHome", "backmpDir", " backupBox", "backupsRoot", "backuperDir", "backupidBoot"], "df": ["DF", "d", "du", "Def", "dr", "pdf", "pd", "gd", "fd", "fun", "di", "lf", "dp", "NF", "dep", "raf", "tif", "dl", "dx", "tf", "dim", "md", "f", "sf", "cf", "def", "dt", "sd", "dd", "format", "hd", "db", "mm", "ds", "deb", "cd", "bf", "dm", "uf", " pdf", "dc"], "date": ["late", "module", "match", "number", "when", "string", "dat", "future", "tag", "resource", "update", "event", "zone", "start", "due", "month", "run", "output", "age", "content", "time", " day", "range", "day", "grade", "duration", "dates", "down", "note", "dt", "format", "message", "get", "create", "name", "frame", "today", "dated", " Date", "daily", "data", "days", "save", "Date", "value", "ate", "version", "default", "sum", "standard", "year", "cal", "now"], "zipFile": ["logfile", "logStream", "zipPath", "pdfFile", "Zipfile", "zStore", "ZipPath", "pdffile", "pdfStream", "zipStream", "zfile", "jsonFilename", "zFile", "zFilename", "logPath", "logFilename", "pdfPath", "jsonfile", "jsonStore", "logFile", "logStore", "ZipStream", "zipfile", "zipFilename", "ZipFile", "zipStore", "jsonFile"], "zos": ["js", "ss", "cos", "oses", "zi", "ez", "sbm", "zers", "sis", "z", "zon", "zzle", "esm", "zag", "zona", "tz", " sands", "hz", "hs", "zar", "Sax", "south", "sol", "asio", "shed", "za", "estro", "jas", "cz", "ze", "zik", "nz", "enz", "ros", "ses", "zan", "zen", "zo", "los", "oss", "stice", "bs", "ones", "zer", "asar", "eros", "zin", "hess", "bes", "rez", "zb", "enos", "css", "zes", "ozo", "sch", "os", "webkit"], "fis": ["sfisc", "ifIs", "ofisc", "efis", "efisc", "li", "ofois", " fib", "ofib", "efIs", "ofiss", "Fisc", "fisc", "fia", "sfiss", "foi", "ifisc", "fits", "cfits", "sfIs", " fiss", "fiib", "cfis", "fois", "if\u00eds", "ifis", "fiss", "Fis", "fIs", "foia", "dfiss", "foIs", "cfisc", "fiiss", "f\u00eds", "FIs", "sfier", "sfis", "fiis", "lis", "sfits", "ef\u00eds", "Fiss", "lIs", "dfis", "F\u00eds", "fib", "cfiss", "dfIs", "fier", "fi", "lia", "fiois", "Fier", "Fi", "ofits", "dfier", " fois", "Fia", "ofis"], "entry": ["search", "cell", "description", "delete", "member", "sheet", "tex", "ce", "resource", "Entry", "cue", "char", "e", "obj", "event", "ion", "internal", "row", "record", "se", "attribute", "rance", "deep", "section", "word", "office", "connection", "zip", "insert", "def", "set", "ary", "entity", "zo", "element", "ie", "ry", "object", "comment", "data", "add", "key", "escape", "and", "or", "xml", "ent", "option", "de", "ace", "ment", "command"], "buffer": ["sample", "batch", "binary", "sequence", "variable", "append", "queue", "bar", "length", "char", "stack", "phrase", "attribute", "button", "view", "word", "library", "block", "category", "code", "volume", "base", "iter", "letter", "padding", "table", "page", "buff", "message", "paste", "screen", "frame", "template", "document", "comment", "zero", "memory", "header", "window", "cache", "available", "buf", "Buffer", "temp", "command"], "readed": ["readableed", "indexED", "READED", "READer", "countd", " readeded", " readented", "Readed", "readableED", "redented", "readED", "Reader", "findared", "reader", "readared", "readableared", "readied", "finded", "indexed", "READd", "counter", "readeded", "reded", "indexented", "findied", "Readied", " readED", "READed", "ReadED", "indexeded", "findED", "Readd", "countED", "rededed", "readableied", "redED", "Readared", "readd", "counted", "readented"]}}
{"id1": "18202328", "id2": "1097147", "code1": "    public void register(MinecraftSession session, String username, String verificationKey) {\n        if (Configuration.getConfiguration().isVerifyingNames()) {\n            long salt = HeartbeatManager.getHeartbeatManager().getSalt();\n            String hash = new StringBuilder().append(String.valueOf(salt)).append(username).toString();\n            MessageDigest digest;\n            try {\n                digest = MessageDigest.getInstance(\"MD5\");\n            } catch (NoSuchAlgorithmException e) {\n                throw new RuntimeException(\"No MD5 algorithm!\");\n            }\n            digest.update(hash.getBytes());\n            if (!verificationKey.equals(new BigInteger(1, digest.digest()).toString(16))) {\n                session.getActionSender().sendLoginFailure(\"Illegal name.\");\n                return;\n            }\n        }\n        char[] nameChars = username.toCharArray();\n        for (char nameChar : nameChars) {\n            if (nameChar < ' ' || nameChar > '\\177') {\n                session.getActionSender().sendLoginFailure(\"Invalid name!\");\n                return;\n            }\n        }\n        for (Player p : playerList.getPlayers()) {\n            if (p.getName().equalsIgnoreCase(username)) {\n                p.getSession().getActionSender().sendLoginFailure(\"Logged in from another computer.\");\n                break;\n            }\n        }\n        final Player player = new Player(session, username);\n        if (!playerList.add(player)) {\n            player.getSession().getActionSender().sendLoginFailure(\"Too many players online!\");\n            return;\n        }\n        session.setPlayer(player);\n        final Configuration c = Configuration.getConfiguration();\n        session.getActionSender().sendLoginResponse(Constants.PROTOCOL_VERSION, c.getName(), c.getMessage(), false);\n        LevelGzipper.getLevelGzipper().gzipLevel(session);\n    }\n", "code2": "    public static String getMessageDigest(String[] inputs) {\n        if (inputs.length == 0) return null;\n        try {\n            MessageDigest sha = MessageDigest.getInstance(\"SHA-1\");\n            for (String input : inputs) sha.update(input.getBytes());\n            byte[] hash = sha.digest();\n            String CPass = \"\";\n            int h = 0;\n            String s = \"\";\n            for (int i = 0; i < 20; i++) {\n                h = hash[i];\n                if (h < 0) h += 256;\n                s = Integer.toHexString(h);\n                if (s.length() < 2) CPass = CPass.concat(\"0\");\n                CPass = CPass.concat(s);\n            }\n            CPass = CPass.toUpperCase();\n            return CPass;\n        } catch (NoSuchAlgorithmException e) {\n            throw new IllegalStateException(e.getMessage());\n        }\n    }\n", "label": 1, "substitutes": {"register": ["match", "submit", "log", "store", "remember", "bind", "update", "Register", "record", "auth", "email", "link", "server", "insert", " Register", "reg", "create", "setup", "hook", "callback", "save", "password", "hello", "handle", "login", "account", "launch", "install"], "session": ["master", "course", "local", "localhost", "system", "subject", "settings", "lock", "site", "member", "parent", "store", "process", "remote", "browser", "join", "question", "position", "ion", "current", "manager", "sid", "shell", "network", "view", "to", "connection", "instance", "condition", "status", "summary", "present", "person", "server", "job", "play", "set", "connect", "message", "result", "station", "environment", "global", "database", "user", "activity", "journal", "second", "input", "action", "client", "document", "brain", "application", "password", "use", "self", "version", "response", "ession", "request", "window", "cache", "task", "Session", "sim", "state", "account", "spin", "game", "usage"], "username": ["text", "master", "nil", "path", "subject", "description", "human", "monitor", "string", "term", "restricted", "uid", "ame", "whatever", "auth", "attribute", "filename", "url", "owner", "email", "NAME", "USER", "rue", "wikipedia", "profile", "title", "person", "host", "ername", "uri", "joining", "nick", "prefix", "message", "artist", "software", "minecraft", "cn", "user", "pty", "taker", "minimum", "name", "sword", "User", "source", "approximately", "john", "password", "key", "hello", "steam", "uno", "login", "token", "character", "pai", "account", "displayText", "information", "sn", "word"], "verificationKey": ["certicationKey", "verificationKeys", "certicationPoint", "veridationkey", "verifyingKEY", "veridationKey", "verifyingKeys", "verificationPoint", "verationKeys", "validificationKeys", "validifyingkey", "verifierKey", "verifyingKey", "verationKey", "verifyingkey", "validifyingKey", "verificationKEY", "verifierKEY", "veridationKeys", "validifyingKEY", "verifierPoint", "certificationKEY", "certificationKey", "validificationKEY", "verationKEY", "vericationPoint", "verationkey", "vericationKEY", "validificationkey", "vericationKey", "vericationkey", "verificationkey", "validificationKey", "validifyingKeys", "certificationkey", "certificationPoint", "certicationKEY", "verifyingPoint", "certicationkey", "veridationKEY", "verifierkey"], "salt": ["thunt", "Salt", "Sunt", "hALT", "solt", "Solt", "thalt", "sodium", "halt", "tholt", "ssl", "sssl", "hunt", "Ssl", "ssALT", "sALT", "sunt", "thALT", "Sodium", "hsl", "ssodium", "SALT", "holt", "ssalt", "hodium"], "hash": ["mac", "build", "search", "secret", "sample", "h", "log", "ash", "tag", "test", "shadow", "filename", "url", "href", "rh", "title", "html", "crypt", "message", "user", "name", "random", "hex", "memory", "key", "sha", "password", "report", "version", "Hash", "handle", "sum", "token", "cache", "hed", "her", "flash", "word"], "digest": [" Digester", "decester", "mdit", "digested", " digEST", "dighash", "Dighash", "Digested", "mdest", "bighash", "signhash", "DigEST", " DigEST", "mdEST", "Digest", "mdester", "digests", "diger", "Diger", "decEST", " digested", " Digest", "digEST", "Digester", " diger", " Diger", " digester", "decest", "Digests", "signests", "redest", "reder", "Digit", "redit", "redester", "bigest", "digit", "signest", "decested", "digester", "bigests", "mder"], "nameChars": ["nameCharars", " nameChers", "nameCheARS", "nameChecs", "namechars", " nameChARS", "nameCharrs", "nameCheras", " nameChecs", "namechARS", "nameChears", "nameChers", "namechras", " nameChcs", "nameCheats", " nameCheats", "nameChARS", "nameChats", " nameCheras", "nameChcs", " nameChats", "nameStrars", "namechcs", "nameChras", "namechats", "nameCharats", " nameChears", "namechrs", "nameChrs", "nameCharcs", " nameChras", " nameChrs", "nameStrARS", "nameStrras", " nameCheARS"], "nameChar": ["nameschar", "charchar", "caseCh", "namechar", "reasonCharacter", " nameArc", "NameCharacter", "Namechar", " nameCh", "nameArc", "NameChar", "charChar", " nameFix", "NameCh", "nameCharacter", "ameArc", "reasonChar", "nameFix", "ameCharacter", "namesCh", "reasonArc", "casechar", "charCh", "nameCh", "charFix", "ameChar", " namechar", "caseChar", " nameCharacter", "reasonCh", "namesChar", "namesFix", "caseCharacter", "ameCh"], "p": ["d", "v", "perm", "op", "P", "pt", "tp", "lp", "np", "pro", "vp", "part", "per", "t", "cp", "i", "pl", "pi", "gp", "m", "wp", "pre", "f", "ps", "pm", "pers", "pe", "sp", "user", "fp", "u", "ap", "pa", "pp", "mp", "pc", "bp", "pkg", "l", "peer", "pai", "php", "er", "jp", "par"], "player": ["master", "address", "layer", "field", "lp", "member", "pro", "timer", "vp", "wrapper", "part", "program", "loader", "position", "played", "adder", "board", "slot", "live", "PLAY", "linger", "slave", "owner", "cp", "admin", "node", "worker", "profile", "person", "Player", "ler", "role", "league", "server", "play", "er", "station", "party", "user", "taker", "winner", "name", "video", "actor", "top", "playing", "header", "steam", "ser", "aster", "peer", "controller", "pai", "game", "handler"], "c": ["mc", "v", "fc", "h", "ic", "cu", "t", "conv", "toc", "ca", "conf", "lc", "cp", "r", "cs", "cr", "ci", "cc", "config", "cf", "ct", "sc", "cfg", "dc", "cd", "u", "etc", "cm", "uc", "ac", "enc", "C", "rc", "cb", "l", "g", "tc", "gc", "co", "con"]}}
{"id1": "841724", "id2": "13891080", "code1": "    private static void readAndRewrite(File inFile, File outFile) throws IOException {\n        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n        Dataset ds = DcmObjectFactory.getInstance().newDataset();\n        dcmParser.setDcmHandler(ds.getDcmHandler());\n        dcmParser.parseDcmFile(null, Tags.PixelData);\n        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        System.out.println(\"reading \" + inFile + \"...\");\n        pdReader.readPixelData(false);\n        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n        ds.writeDataset(out, dcmEncParam);\n        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n        System.out.println(\"writing \" + outFile + \"...\");\n        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        pdWriter.writePixelData();\n        out.flush();\n        out.close();\n        System.out.println(\"done!\");\n    }\n", "code2": "    public static void copyFile(File srcFile, File destFile) throws IOException {\n        logger.debug(\"copyFile(srcFile={}, destFile={}) - start\", srcFile, destFile);\n        FileChannel srcChannel = new FileInputStream(srcFile).getChannel();\n        FileChannel dstChannel = new FileOutputStream(destFile).getChannel();\n        try {\n            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n        } finally {\n            srcChannel.close();\n            dstChannel.close();\n        }\n    }\n", "label": 1, "substitutes": {"readAndRewrite": ["readAndrewWrite", "readAndResrite", "readAndResend", "readAndReprites", "readAndRewWrite", "readAndrewrites", "readAndRewend", "readAndResrites", "readAndrewend", "readAndReprite", "readAndResWrite", "readAndRepWrite", "readAndRewrites", "readAndRepend", "readAndrewrite"], "inFile": ["docFile", "InFilename", "inFILE", "docFILE", "initFilename", "docFilename", "Infile", "inputFile", "iTime", "inputFilename", "iFilename", "INPlace", " inFilename", "outfile", " infile", "inputFace", "InFile", "infile", "INFILE", "INFilename", "INFace", "inPlace", "inFace", "initFile", "initFace", "iFile", "initPlace", "INFile", "iFILE", "inputPlace", "inTime", "outFilename", "INTime", "inFilename", "docTime"], "outFile": ["outFILE", "checkFile", "inFILE", "checkFilename", " outFilename", "checkfile", " outfile", "nameFILE", " outFILE", "reportFILE", "outfile", "reportFile", "toFilename", "infile", "nameFile", "reportFilename", "tofile", "checkFILE", "namefile", "outFilename", "nameFilename", "inFilename", "toFILE", "reportfile", "toFile"], "iis": ["liisc", "eIS", " iIS", "eis", "iiss", "iisc", "ii", "liIs", "iIS", "Iiss", " iisc", "liris", "iiis", "Iis", "diIs", "aiis", "iris", "iiris", "diiss", "IIs", "iIs", " iiss", "diis", "aiIS", "iiisc", "dii", " ii", " iIs", "liis", "Ii", "iiIs", " iris", "aiIs", "eIs"], "dcmParser": ["dcfStatement", "dmodulePrivate", " dpmPar", " dpmLoader", "dmmAdapter", "dmoduleParser", " dpmReader", "dpmLoader", "dfmLoader", "dromAssistant", "dmmmAdapter", "dcmAssistant", "DpmAdapter", "dpmparser", "dcfReader", "dmmparser", "dcfParser", "DpmReader", "DcmAdapter", "dcomParser", "dmmmParser", "dmoduleReader", " dcmarser", " dcmLoader", "dcommReader", "dcrParser", "deromarser", "dcrBuilder", "dcmBuilder", "dmparser", "dpcParser", "dpmParser", "dpmarser", "dmmarser", "dfmParser", "dromListener", "dcomLoader", "dcomBuilder", "dcomReader", " dcmListener", "decmReader", "drumBuilder", "dpmAssistant", "dpcPrivate", "drumReader", "dmmmReader", "dpmReader", "dpmBuilder", "dromparser", "decmParser", "dpmPar", "DcmBuilder", "dmmmparser", "dcmLoader", " dpmParser", "decmarser", " dcmparser", "dcrReader", " dpmPrivate", "dpmListener", "deromReader", "drumParser", " dpmBuilder", "dromarser", "decmparser", "dcommParser", "dmParser", " dcmPar", "Dpmparser", "dmmParser", "dfmBuilder", "deromparser", "dpcAssistant", "dmmReader", "DpmParser", "dromParser", "dgrPar", "dgrStatement", " dcmAssistant", "dcfPar", "dcmarser", " dcmBuilder", "DcmReader", " dcmReader", " dpmStatement", "dmoduleAssistant", "dpcReader", "dcommAssistant", "dromReader", " dpmarser", "dcmparser", "dcrparser", "DcmPar", "dmarser", "dpmAdapter", " dpmAssistant", "dcmReader", "dfmReader", "dgrReader", "dcmPrivate", "DpmPar", "dmReader", " dpmparser", "DpmBuilder", "dcmStatement", "dcmListener", "dpmPrivate", " dcmPrivate", " dpmListener", "dcmPar", "dpmStatement", "drumPar", "dgrParser", "dcmAdapter", "Dcmparser", "deromParser", "dcommListener", " dcmStatement", "DcmParser"], "ds": ["d", "js", "ks", "eds", "outs", "pd", "des", "vs", "dat", "da", "dds", "gd", "qs", "dq", "eps", "ws", "xs", "in", "aos", "ls", "hs", "gs", "rs", "tes", "dl", "dx", "uds", "DS", "cs", "obs", "ims", "fs", "ns", "as", "ps", "ads", "sets", "ils", "sd", "dt", "dd", "s", "bs", "pers", "hd", " des", "its", "db", " DS", "services", "Ds", "sys", "data", "bd", "drivers", "sv", "details", "dos", "dh", "der", "ins", "df", "es", "ss", "ods", "os", "ys"], "pdReader": ["dpReader", "tdParser", "dpCar", "pdHelper", "hdReader", "pedReader", "tdWriter", "hdParser", "ddCar", "ddRunner", "hdWriter", "vdReader", "vdHelper", "pdCar", "dpLoader", "pdParser", "pdRead", "xdWriter", "xdReader", "ddRead", "pdLoader", "ddParser", "ddHelper", "vdWriter", "ddLoader", "xdLoader", "pedRunner", "tdReader", "hdRead", "ddReader", "vdLoader", "pdRunner", "tdRead", "pedLoader", "pedCar", "ddWriter", "xdHelper", "dpRunner"], "out": ["serv", "sw", "t", "conv", "msg", "aos", "output", "gen", "auto", "on", "opt", "screen", "ch", "all", "cfg", "name", "con", "list", "ins", "pos", "ent", "pool", "full", "w", "err", "v", "at", "p", "txt", "io", "up", "in", "flush", "c", "ex", " err", "inter", "status", "o", "net", "s", "raw", "tmp", "conn", "cn", "gr", "client", "sys", "data", "one", "sum", "cmd", "outs", "js", "log", "str", "id", "obj", "we", "to", "n", "null", "inner", "res", "outer", "desc", "writer", "over", "OUT", "Out", "cache", "it", "ou", "en", "nr", "nt", "inv", "go", "gt", "end", "oss", "cb", "co", "os"], "dcmEncParam": ["dmmencCmd", "dcmDecNum", "dmmEnPar", "dcmencPar", "dcmEscParam", "dmmencMsg", "dmmEncMsg", "dmmencParam", "dcmEncVal", "dcmEscVal", "dmmEnParam", "dmmEncVal", "dmmEncPar", "dcmEnNum", "dcmEnPar", "dcmDecCmd", "dcmencMsg", "dcmencCmd", "dmmEncNum", "dcmEnVal", "dcmEncMsg", "dcmEncCmd", "dcmDecParam", "dmmEncParam", "dcmencNum", "dcmEscNum", "dcmDecMsg", "dmmEncCmd", "dmmEnNum", "dcmEncNum", "dmmencNum", "dcmencParam", "dcmEscPar", "dcmEnParam", "dcmEncPar"], "pdWriter": ["dpReader", "PDWrite", "dpWrite", "dpEditor", "tdWriter", "pcwriter", "pidWrite", "dpWriter", "PDWriter", "tdWrite", "tdEditor", "PDEditor", "pdEditor", "pdwriter", "pidWriter", "pidWriting", "tdwriter", "pidwriter", "tdReader", "pdWrite", "pcWriter", "PDReader", "pcWrite", "pcWriting", "pdWriting", "tdWriting"]}}
{"id1": "18782385", "id2": "5951961", "code1": "    public void saveFile(MainWindow window) {\n        FileOutputStream stream = null;\n        try {\n            Document outputDoc = new Document();\n            DocType dtd = new DocType(UI, DIRECTORY + File.separator + FILE_NAME_DTD);\n            Element uiElement = new Element(UI);\n            outputDoc.setDocType(dtd);\n            outputDoc.addContent(uiElement);\n            outputDoc.setRootElement(uiElement);\n            uiElement.setAttribute(USE_DEFAULT, \"false\");\n            uiElement.setAttribute(SHOW_TOOL_BAR, Boolean.toString(window.getToolToolBar().isVisible()));\n            uiElement.setAttribute(SHOW_UNIT_BAR, Boolean.toString(window.getUnitToolBar().isVisible()));\n            String currentLFClassName = UIManager.getLookAndFeel().getClass().getName();\n            String systemLFClassName = UIManager.getSystemLookAndFeelClassName();\n            if (currentLFClassName.equals(systemLFClassName)) uiElement.setAttribute(LOOK_AND_FEEL, \"native\"); else uiElement.setAttribute(LOOK_AND_FEEL, \"default\");\n            Element mainWindowElement = new Element(MAIN_WINDOW);\n            uiElement.addContent(mainWindowElement);\n            mainWindowElement.setAttribute(LOCATION_X, Integer.toString(window.getFrame().getX()));\n            mainWindowElement.setAttribute(LOCATION_Y, Integer.toString(window.getFrame().getY()));\n            mainWindowElement.setAttribute(WIDTH, Integer.toString(window.getFrame().getWidth()));\n            mainWindowElement.setAttribute(HEIGHT, Integer.toString(window.getFrame().getHeight()));\n            Element volumeElement = new Element(VOLUME);\n            uiElement.addContent(volumeElement);\n            AudioPlayer player = window.getDesktop().getSoundPlayer();\n            volumeElement.setAttribute(SOUND, Float.toString(player.getVolume()));\n            volumeElement.setAttribute(MUTE, Boolean.toString(player.isMute()));\n            Element internalWindowsElement = new Element(INTERNAL_WINDOWS);\n            uiElement.addContent(internalWindowsElement);\n            MainDesktopPane desktop = window.getDesktop();\n            JInternalFrame[] windows = desktop.getAllFrames();\n            for (JInternalFrame window1 : windows) {\n                Element windowElement = new Element(WINDOW);\n                internalWindowsElement.addContent(windowElement);\n                windowElement.setAttribute(Z_ORDER, Integer.toString(desktop.getComponentZOrder(window1)));\n                windowElement.setAttribute(LOCATION_X, Integer.toString(window1.getX()));\n                windowElement.setAttribute(LOCATION_Y, Integer.toString(window1.getY()));\n                windowElement.setAttribute(WIDTH, Integer.toString(window1.getWidth()));\n                windowElement.setAttribute(HEIGHT, Integer.toString(window1.getHeight()));\n                windowElement.setAttribute(DISPLAY, Boolean.toString(!window1.isClosed()));\n                if (window1 instanceof ToolWindow) {\n                    windowElement.setAttribute(TYPE, TOOL);\n                    windowElement.setAttribute(NAME, ((ToolWindow) window1).getToolName());\n                } else if (window1 instanceof UnitWindow) {\n                    windowElement.setAttribute(TYPE, UNIT);\n                    windowElement.setAttribute(NAME, ((UnitWindow) window1).getUnit().getName());\n                } else {\n                    windowElement.setAttribute(TYPE, \"other\");\n                    windowElement.setAttribute(NAME, \"other\");\n                }\n            }\n            Unit[] toolBarUnits = window.getUnitToolBar().getUnitsInToolBar();\n            for (Unit toolBarUnit : toolBarUnits) {\n                UnitWindow unitWindow = desktop.findUnitWindow(toolBarUnit);\n                if ((unitWindow == null) || unitWindow.isIcon()) {\n                    Element windowElement = new Element(WINDOW);\n                    internalWindowsElement.addContent(windowElement);\n                    windowElement.setAttribute(TYPE, UNIT);\n                    windowElement.setAttribute(NAME, toolBarUnit.getName());\n                    windowElement.setAttribute(DISPLAY, \"false\");\n                }\n            }\n            File configFile = new File(DIRECTORY, FILE_NAME);\n            if (!configFile.getParentFile().exists()) {\n                configFile.getParentFile().mkdirs();\n            }\n            InputStream in = getClass().getResourceAsStream(\"/dtd/ui_settings.dtd\");\n            IOUtils.copy(in, new FileOutputStream(new File(DIRECTORY, \"ui_settings.dtd\")));\n            XMLOutputter fmt = new XMLOutputter();\n            fmt.setFormat(Format.getPrettyFormat());\n            stream = new FileOutputStream(configFile);\n            OutputStreamWriter writer = new OutputStreamWriter(stream, \"UTF-8\");\n            fmt.output(outputDoc, writer);\n        } catch (Exception e) {\n            logger.log(Level.SEVERE, e.getMessage());\n        } finally {\n            IOUtils.closeQuietly(stream);\n        }\n    }\n", "code2": "    public static void main(String[] args) {\n        try {\n            URL url = new URL(args[0]);\n            HttpURLConnection httpCon = (HttpURLConnection) url.openConnection();\n            httpCon.setDoOutput(true);\n            httpCon.setRequestMethod(\"PUT\");\n            OutputStreamWriter out = new OutputStreamWriter(httpCon.getOutputStream());\n            out.write(\"fatal error\");\n            out.close();\n            System.out.println(\"end\");\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n", "label": 0, "substitutes": {"saveFile": ["outputPage", "storeFiles", "outputfile", "storeFile", "saveFiles", "outputFiles", " saveFiles", "savefile", " savefile", " savePage", "storePage", "storefile", "savePage", "outputFile"], "window": ["win", "where", "system", "fw", "lock", "file", "height", "before", "remote", "ws", "browser", "event", "history", "context", "device", "stack", "manager", "we", "button", "go", "view", "widget", "box", "query", "scope", "session", "wx", "port", "hw", "console", "env", "html", "Window", "Win", "wait", "server", "volume", "form", " Window", "buffer", "screen", "message", "page", "th", "draw", "doc", "flow", "frame", "document", "client", "stage", "http", "wa", "focus", "driver", "gui", "WIND", "this", "wd", "now", "w", "wall"], "stream": [" fin", "REAM", "Stream", " upload", "is", " con", " is", " steam", "aos", " console", " streams", " din", " status", " session", " sock", " error", " form", " response", " enc", " dos", " resp", "ream", " screen", " zip", " im", " context", " upstream", "os"], "outputDoc": [" outputdoc", "putDoc", "OutputDec", "documentDocument", "displaydoc", "toDec", "documentdoc", "exportDocument", "putMat", "outputMat", "putDec", "OutputDocument", "documentDoc", "displayDoc", "OutputCode", "OutputDoc", "outputDec", "putDocument", "OutputMat", " outputDocument", "toDocument", " outputCode", "toDoc", "outputCode", "displayDocument", "outputDocument", "Outputdoc", "exportCode", "outputdoc", "exportDoc", "toMat"], "dtd": ["dpd", "DTD", "sdpd", "dtif", "sdTD", " dtm", "dhtd", "dhTD", "dhtm", "sdtd", "ttm", "tTD", "Dtd", " dtif", "dtm", "Dpd", "dhtif", " dpd", "dTD", " dTD", "ttd", "ttif"], "uiElement": ["tiObject", "uMember", "tiEntry", "iuBlock", "ulement", "iuEntity", "uMotion", "uelement", "UIEngine", "tielement", "clielement", "zuSecret", "umiSecret", "uiItem", "uiFunction", "uEmail", "uE", "uiEntry", "guiFrame", "iuElement", "iuE", "uciElement", "iuEvent", "UILink", "uEvent", "iielement", "guielement", "iuMotion", "guiEvent", "ucilement", "uiTag", "zuLink", "iuFrame", "wuEmail", "uiBlock", "UIelement", "iuComponent", "tiItem", "uiEvent", "guiEntity", "umiEngine", "guiTag", "iuelement", "uFrame", "umiEntry", "zuEmail", "iulement", "tiEngine", "wuLink", "uiMember", "wuElement", "cuSecret", "uItem", "UIlement", "uiObject", "cuElement", "UIEmail", "cliElement", "iuItem", "uciE", "umiComponent", "UIEntry", "uielement", "cuEntry", "cuToken", "UITag", "UIEvent", "uiToken", "uiEmail", "umiElement", "tiElement", "guiElement", "uObject", "uiFrame", "wuSecret", "uiComponent", "UIEntity", "tilement", "iuObject", "UISecret", "iuTag", "UIE", "uiMotion", "cliEmail", "uFunction", "uiSecret", "umiToken", "uciBlock", "cliMember", "UIBlock", "uiEngine", "uilement", "iiElement", "UIElement", "iiMember", "uciFunction", "iiEmail", "culement", "uElement", "uiLink", "uiEntity", "iuToken", "umilement", "uciEvent", "cuComponent", "iuFunction", "guiE", "uciMotion", "uiE", "zuElement"], "currentLFClassName": ["currentLWClassConfig", "currentLEFClassClass", "currentLEFclassName", "currentLWStyleConfig", "currentLEFclassNames", "currentLFSystemPath", "currentLEFclassPath", "currentLFStyleSet", "currentLEFclassClass", "currentLFclassNames", "currentLWClassName", "currentLFclassPath", "currentLFDisplayClass", "currentLFClassNames", "currentLFClassPath", "currentLWStyleNames", "currentLFStyleName", "currentLFClassClass", "currentLEFClassName", "currentLFFullSet", "currentLWStyleName", "currentLFDisplayPath", "currentLEFClassNames", "currentLFSystemNames", "currentLFclassClass", "currentLFFullConfig", "currentLFDisplayName", "currentLFClassConfig", "currentLFSystemClass", "currentLFclassSet", "currentLFSystemName", "currentLFStyleNames", "currentLFFullName", "currentLWClassSet", "currentLEFClassPath", "currentLFDisplayNames", "currentLWClassNames", "currentLWStyleSet", "currentLFStyleConfig", "currentLFclassName", "currentLFclassConfig", "currentLFFullNames", "currentLFClassSet"], "systemLFClassName": ["systemLFFFilePath", "systemLFFClassPath", "systemLFclassname", "systemLFFFileString", "systemLEFClassname", "systemLFSystemString", "systemLFclassNames", "systemLFclassString", "systemLFFileNames", "systemLFFClassName", "systemLFScreenNames", "systemLFScreenName", "systemLFClassPath", "systemLEFclassName", "systemLFFileName", "systemLFFFileNames", "systemLFSystemNames", "systemLFclassPath", "systemLFFFileName", "systemLFSystemName", "systemLFFilename", "systemLFScreenname", "systemLEFclassname", "systemLFclassName", "systemLFSystemPath", "systemLFFileString", "systemLEFClassName", "systemLFFClassNames", "systemLEFclassPath", "systemLFFClassString", "systemLEFClassNames", "systemLFScreenPath", "systemLEFClassPath", "systemLEFclassNames", "systemLFClassname", "systemLFFilePath", "systemLFClassNames", "systemLFClassString"], "mainWindowElement": ["mainFrameElement", "mainSectionEntry", " mainWinLE", "mainwindowEntry", "mainWindowMENT", "mainScreenElement", " mainWinElement", "mainWinlement", " mainWindowlement", "mainwindowElement", "mainSectionE", " mainFramelement", "mainSectionlement", "mainFramePort", "mainwindowE", "mainSessionE", "mainWindowlement", "MainWindowelement", " mainWindowMENT", "mainWinElement", "MainWindowE", " mainFrameElement", "mainwindowMENT", "mainWindowLE", "MainWindowEntry", "mainSessionElement", "MainWinPort", "MainWinElement", "mainFrameE", "mainWinE", "mainWindowPort", "mainWindowelement", " mainFrameMENT", "mainWinMENT", "mainFrameMENT", "MainWinUser", "mainScreenEntry", " mainWinE", "mainScreenE", "mainWinLE", "MainWindowPort", "MainWinE", "mainWinelement", "mainFrameUser", " mainWinEntry", "mainFrameEntry", "mainFramelement", "mainWinEntry", "mainFrameelement", "mainFrameLE", "mainScreenLE", " mainFrameE", "mainWinPort", "MainWinelement", "mainwindowUser", " mainWindowEntry", " mainFrameEntry", " mainWindowLE", "MainWindowUser", "MainWindowElement", "mainwindowPort", "mainWindowUser", "mainSectionElement", "mainSessionelement", "mainWindowEntry", "mainWinUser", "MainWinEntry", " mainWindowE", "mainWindowE", "mainSessionEntry"], "volumeElement": ["voicelement", "audioElement", " volumeelement", " volumeMember", "volumeEmail", "VolumeEntity", "volumelement", "vineelement", "musicE", "audioE", " volumelement", "voiceelement", "volumeelement", "voiceElement", "vineElement", "musicEntry", "VolumeE", "musicElement", "voiceE", "voiceEntry", " volumeEntity", "VolumeEmail", "volumeE", "VolumeElement", "vinelement", "audioEntry", " volumeEmail", "vineE", " volumeEntry", "uiEntity", "voiceMember", "volumeEntry", "musicMember", "uiEmail", "audioEntity", "volumeMember", "voiceEntity", "volumeEntity", "uiE", " volumeE"], "player": ["sample", "layer", "file", "pro", "program", "loader", "position", "played", "audio", "live", "service", "PLAY", "youtube", "movie", "pipe", "lay", "worker", "profile", "speaking", "volume", "Player", "console", "play", "table", "user", "taker", "video", "score", "radio", "source", "driver", " playing", "playing", "ser", "aster", "peer", "controller", "pool", "er", "game", "uner", "display", " Player"]}}
{"id1": "6301863", "id2": "13207437", "code1": "    protected String doRawRequest(String postData) throws IOException {\n        URL url = new URL(SERVICE_URL);\n        URLConnection conn = url.openConnection();\n        conn.setDoOutput(true);\n        OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());\n        wr.write(postData);\n        wr.flush();\n        BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n        StringBuffer sb = new StringBuffer();\n        String line;\n        while ((line = rd.readLine()) != null) {\n            sb.append(line);\n        }\n        wr.close();\n        rd.close();\n        return sb.toString();\n    }\n", "code2": "    public Object sendRequestObjectResponse(java.lang.String servletName, java.lang.String request) {\n        String osRoot = OSRoot.getRoot();\n        String fname = \"\";\n        Object retobj = null;\n        String myurl = java.util.prefs.Preferences.systemRoot().get(\"serverurl\", \"\");\n        String myport = java.util.prefs.Preferences.systemRoot().get(\"portno\", \"8080\");\n        if (myport == null || myport.trim().equals(\"\")) {\n            myport = \"80\";\n        }\n        if (this.serverURL == null) {\n            try {\n                java.net.URL codebase = newgen.presentation.NewGenMain.getAppletInstance().getCodeBase();\n                if (codebase != null) serverURL = codebase.getHost(); else serverURL = \"localhost\";\n            } catch (Exception exp) {\n                exp.printStackTrace();\n                serverURL = \"localhost\";\n            }\n            newgen.presentation.component.IPAddressPortNoDialog ipdig = new newgen.presentation.component.IPAddressPortNoDialog(myurl, myport);\n            ipdig.show();\n            serverURL = myurl = ipdig.getIPAddress();\n            myport = ipdig.getPortNo();\n            java.util.prefs.Preferences.systemRoot().put(\"serverurl\", serverURL);\n            java.util.prefs.Preferences.systemRoot().put(\"portno\", myport);\n            System.out.println(serverURL);\n        }\n        try {\n            System.out.println(\"http://\" + serverURL + \":\" + myport + \"/newgenlibctxt/\" + servletName);\n            java.net.URL url = new java.net.URL(\"http://\" + serverURL + \":\" + myport + \"/newgenlibctxt/\" + servletName);\n            java.net.URLConnection urlconn = (java.net.URLConnection) url.openConnection();\n            urlconn.setDoOutput(true);\n            urlconn.setRequestProperty(\"Content-type\", \"text/xml; charset=UTF-8\");\n            java.io.OutputStream os = urlconn.getOutputStream();\n            String req1xml = request;\n            java.util.zip.CheckedOutputStream cos = new java.util.zip.CheckedOutputStream(os, new java.util.zip.Adler32());\n            java.util.zip.GZIPOutputStream gop = new java.util.zip.GZIPOutputStream(cos);\n            java.io.OutputStreamWriter dos = new java.io.OutputStreamWriter(gop, \"UTF-8\");\n            System.out.println(req1xml);\n            try {\n                java.io.FileOutputStream pw = new java.io.FileOutputStream(\"log.txt\");\n                pw.write(req1xml.getBytes());\n                pw.flush();\n                pw.close();\n            } catch (Exception exp) {\n                exp.printStackTrace();\n            }\n            dos.write(req1xml);\n            dos.flush();\n            dos.close();\n            System.out.println(\"url conn: \" + urlconn.getContentEncoding() + \"  \" + urlconn.getContentType());\n            java.io.InputStream ios = urlconn.getInputStream();\n            java.io.File f1 = new java.io.File(osRoot + \"/localattachments/Reports\");\n            if (!f1.exists()) f1.mkdirs();\n            java.io.File file = null;\n            if (urlconn.getContentType() != null && urlconn.getContentType().trim().equals(\"application/vnd.oasis.opendocument.text\")) {\n                file = new java.io.File(osRoot + \"/localattachments/Reports/\" + System.currentTimeMillis() + \".odt\");\n            } else if (urlconn.getContentType() != null && urlconn.getContentType().trim().equals(\"text/html\")) {\n                file = new java.io.File(osRoot + \"/localattachments/Reports/\" + System.currentTimeMillis() + \".html\");\n            } else {\n                file = new java.io.File(osRoot + \"/localattachments/Reports/\" + System.currentTimeMillis() + \".xls\");\n            }\n            file = new java.io.File(file.getAbsolutePath());\n            java.io.FileOutputStream fos = new java.io.FileOutputStream(file);\n            int c;\n            while ((c = ios.read()) != -1) fos.write(c);\n            fos.close();\n            ios.close();\n            fname = file.getAbsolutePath();\n            System.out.println(fname);\n            newgen.presentation.component.Utility.getInstance().showBrowser(\"file://\" + fname);\n        } catch (Exception exp) {\n            exp.printStackTrace(System.out);\n            javax.swing.JOptionPane.showMessageDialog(null, \"<html>Could not establish connection with the server, <br>Please verify server name/IP adress, <br>Also check if NewGenLib server is running</html>\", \"Critical error\", javax.swing.JOptionPane.ERROR_MESSAGE);\n        }\n        return fname;\n    }\n", "label": 1, "substitutes": {"doRawRequest": ["sendRawRequest", "doHttpQuery", "sendHttpAction", "doHttpCall", "doDirectAction", "doDirectRequest", "sendRawCall", "doRawAction", "doRawQuery", "doNativeAction", "sendRawAction", "doNativeQuery", "doNativeCall", "doHttpRequest", "sendHttpQuery", "doNativeRequest", "doDirectCall", "sendHttpCall", "doHttpAction", "sendHttpRequest", "doDirectQuery", "sendRawQuery", "doRawCall"], "postData": ["PostData", "Postdata", "postDATA", "postedData", " postdata", " postString", "POSTBody", "preData", "PostString", "preMessage", "requestMessage", "posteddata", "preDATA", "postBody", "postString", "postedString", "postdata", "requestDATA", " postMessage", "POSTDATA", "POSTMessage", "requestBody", "POSTData", "postedMessage", "preBody", "postMessage", "requestData", "PostMessage"], "url": ["build", "sl", "gl", "ret", "Url", "ld", "abs", "str", "nl", "mail", "ls", "re", "dl", "pl", "ll", "https", "ssl", "link", "uri", "rel", "google", "URL", "web", "loc", "ur", "cert", "client", "hl", "bel", "www", "http", "addr", "mount", "pkg", "l", "cmd", "org", "con", "lb", "ul"], "conn": ["cur", "canon", "pt", "conv", "Conn", "nt", "j", "pg", "open", "inv", "pas", "cp", "comm", "c", "act", "connection", "res", "fin", "close", "ssl", "ns", "col", "rel", "syn", "ct", "com", "net", "connect", "loc", "iw", "cn", "ch", "cert", "client", "nc", "sys", "cont", "gn", "addr", "exec", "enc", "cb", "l", "cmd", "nec", "resp", "org", "jp", "con"], "wr": ["dr", "lr", "spr", "fw", "wn", "sw", "Wr", "kl", "vr", "RW", "mr", "WR", "writ", "r", "rw", "dx", "wx", "write", "wp", "wer", "wm", "hr", "wy", "iw", "writer", "nw", "vet", "mk", "wt", "pr", "rou", "Writer", "wk", "wid", "tn", "kr", "fr", "wb", "wd", "w", "rew"], "rd": ["sr", "dr", "rpm", "rid", "ld", "rx", "rend", "rb", "erd", "ptr", "rob", "nd", "ri", "mr", "reader", "rod", "r", "rs", "rw", "rh", "red", "ro", "cr", "adr", "dd", "hr", "rt", "RD", "ry", "rr", "pr", "nder", "rand", "rl", "rer", "rog", "rect", "ra", "rc", "ru", "fr", "rar", "rn"], "sb": ["sq", "pb", "bag", "lp", "abs", "RB", "nb", "b", "bt", "bg", "sm", "rb", "kb", "sg", "rob", "bb", "si", "obb", "obs", "bh", "sa", "xb", "bis", "ib", "sth", "sf", "bps", "sd", "sp", "bs", "erb", "lbs", "eb", "bsp", "bd", "sv", "bn", "bf", "zb", "cb", "bp", "ob", "mb", "bj", "gc", "gb", "sh", "SB", "lb", "gob"], "line": ["text", "ln", "sample", "cell", "number", "string", "file", "log", "sequence", "nl", "inline", "point", "print", "e", "zone", "row", "stroke", "phrase", "style", "rule", "ice", "block", "check", "label", "code", "link", "valid", "stay", "buffer", "pe", "message", "lin", "page", "entity", "frame", "name", "liner", "comment", "ine", "le", "eline", "chain", "header", "list", "Line", "l", "LINE", "display", "entry", "word"]}}
{"id1": "18451704", "id2": "12055086", "code1": "    public boolean isValidPage(BookPage page) {\n        boolean isValid = false;\n        try {\n            if (page.getType() == BookPage.TYPE_RESOURCE) {\n                BookPagePreviewPanel panel = new BookPagePreviewPanel(dControl, true);\n                panel.setCurrentBookPage(page);\n                isValid = !page.getUri().equals(\"\") && panel.isValid();\n            } else if (page.getType() == BookPage.TYPE_URL) {\n                URL url = new URL(page.getUri());\n                url.openStream().close();\n                isValid = true;\n            } else if (page.getType() == BookPage.TYPE_IMAGE) {\n                if (page.getUri().length() > 0) isValid = true;\n            }\n        } catch (Exception e) {\n            isValid = false;\n        }\n        return isValid;\n    }\n", "code2": "    protected static void copyDeleting(File source, File dest) throws IOException {\n        byte[] buf = new byte[8 * 1024];\n        FileInputStream in = new FileInputStream(source);\n        try {\n            FileOutputStream out = new FileOutputStream(dest);\n            try {\n                int count;\n                while ((count = in.read(buf)) >= 0) out.write(buf, 0, count);\n            } finally {\n                out.close();\n            }\n        } finally {\n            in.close();\n        }\n    }\n", "label": 0, "substitutes": {"isValidPage": [" isValidPoint", " isValidpage", " isAvailableRow", "isSupportedPoint", "isCompletepage", " isAvailablePoint", "isValidpage", "isCompletePage", "isValidRow", "isValidPoint", "isAvailablePoint", "isCompletePoint", " isAvailablepage", "isSupportedRow", "isCompleteRow", " isAvailablePage", " isValidRow", "isSupportedPage", "isAvailableRow", "isSupportedpage", "isAvailablepage", "isAvailablePage"], "page": ["module", "site", "e", "attribute", "content", "admin", "base", "web", "project", "document", "name", "object", "key", "header", "pp", "window", "peer", "policy", "display", "entry", "Page", "p", "property", "be", "complete", "rule", "office", "instance", "server", "out", "create", "frame", "data", "me", "image", "chain", "word", "item", "address", "log", "parent", "channel", "event", "phrase", "record", "age", "to", "port", "code", "title", "language", "pe", "result", "message", "see", "application", "report", "cache", "layout", "file", "post", "resource", "row", "pg", "block", "wikipedia", "node", "link", "book", "article", "config", "table", "password", "version", "bp", "request", "true", "collection"], "panel": ["local", "cell", "player", "radius", "sheet", "addon", "bar", "tool", "join", "Panel", "bridge", "span", "manager", "view", "widget", "menu", "block", "label", "profile", "inner", "title", "summary", "within", "console", "bean", "notice", "pal", "plugin", "table", "chart", "container", "plan", "desktop", "frame", "tab", "pan", "group", "list", "el", "window", "login", "peer", "layout", "controller", "cal", "spin", "dial"], "isValid": ["tracevalid", "IsInvalid", "setPresent", "isPresent", " isVal", "lisValid", "ISAvailable", "traceAvailable", " isOk", "formValid", "hasValid", "isActive", "issValid", "IsAvailable", " isvalid", "hasInvalid", "IsValid", "isVal", "stillInvalid", "formInvalid", "IsOk", "imAvailable", "stillOk", "IsPresent", "traceInvalid", "isPublic", "isAvailable", "lisInvalid", "ISVal", "ISInvalid", "isvalid", "hasPublic", "lisOk", "ISOk", "IsActive", "stillValid", " isFound", " isPresent", " isAvailable", "issInvalid", "traceValid", "isOk", " isActive", "issOk", "setActive", "formvalid", "formAvailable", "ISValid", "imInvalid", "setOk", "imValid", "ISFound", "issVal", "setValid", "stillVal", " isPublic", "hasOk", "IsFound", " isInvalid", "imOk", "isFound", "lisPublic", "isInvalid"], "url": ["build", "sl", "address", "string", "file", "Url", "abs", "str", "nl", "mail", "resource", "b", "char", "tool", "browser", "open", "external", "r", "email", "dl", "null", "ll", "https", "ssl", "link", "location", "f", "uri", "URL", "sb", "ur", "user", "cert", "ml", "name", "u", "http", "rl", "mount", "l", "window", "ul"]}}
{"id1": "19086952", "id2": "3330775", "code1": "    public static HttpResponse createUrlResponse(final URL url, final TcpConnection connection) throws IOException, NullPointerException {\n        String fullPath = url.toString();\n        URLConnection conn = url.openConnection();\n        InputStream in = conn.getInputStream();\n        final long length = conn.getContentLength();\n        if (connection.isDebugEnabled()) connection.logDebug(\"Sending \" + fullPath + \" to \" + connection.getRemoteAddress() + \" (length: \" + length + \").\");\n        return createInputStreamResponse(in, conn.getContentType(), length, connection);\n    }\n", "code2": "    public static JSONObject getJSONData(String url) throws JSONException {\n        JSONObject jObject = null;\n        InputStream data = null;\n        DefaultHttpClient httpClient = new DefaultHttpClient();\n        URI uri;\n        try {\n            uri = new URI(url);\n            HttpGet httpGet = new HttpGet(uri);\n            HttpResponse response = httpClient.execute(httpGet);\n            data = response.getEntity().getContent();\n            String line;\n            StringBuilder builder = new StringBuilder();\n            BufferedReader reader;\n            reader = new BufferedReader(new InputStreamReader(data), 8192);\n            while ((line = reader.readLine()) != null) builder.append(line);\n            reader.close();\n            jObject = (JSONObject) new JSONTokener(builder.toString()).nextValue();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return jObject;\n    }\n", "label": 0, "substitutes": {"createUrlResponse": ["createFileresponse", "createURLresponse", "createUrlResp", "createURLView", "createurlResp", " createURLResponse", "createFileView", " createURLResp", "createFileResponse", "createURLResponse", "createurlresponse", " createURLView", "createurlResponse", "createFileResp", "createUrlView", " createUrlresponse", "createurlView", "createURLResp", " createURLresponse", " createUrlView", "createUrlresponse", " createUrlResp"], "url": ["build", "path", "address", "gl", "string", "file", "Url", "str", "nl", "mail", "b", "char", "browser", "ls", "call", "email", "dl", "ll", "pl", "host", "ssl", "link", "location", "html", "uri", "base", "URL", "job", "web", "loc", "get", "ur", "cert", "parser", "document", "client", "name", "bel", "http", "image", "mount", "el", "l", "xml", "domain", "sql", "org"], "connection": ["subject", "description", "number", "log", "communication", "handler", "channel", "process", "processor", "remote", "ion", "position", "context", "current", "open", "output", "Connection", "network", "ctx", "c", "thread", "intention", "to", "entry", "relation", "session", "condition", "computer", "close", "link", "location", "builder", "server", "reason", "config", "connect", "message", "using", "database", "writer", "generation", "document", "client", "callback", "nc", "application", "socket", "self", "response", "window", "connected", "directory", "controller", "pool", "usage", "con", "creator", "command"], "fullPath": [" fullName", "partialUrl", " fullpath", " fullUrl", "partialPort", "partialpath", "FullPort", "fullUrl", "fullPort", "Fullpath", "partialName", "FullName", "partialPath", "FullUrl", "fullpath", "FullPath", " fullPort", "fullName"], "conn": ["cur", "cell", "canon", "obj", "conv", "nt", "Conn", "num", "j", "pg", "open", "conf", "Connection", "cp", "ctx", "c", "comm", "n", "proc", "alloc", "res", "col", "ns", "desc", "ct", "ann", "connect", "loc", "iw", "init", "oss", "ch", "cfg", "reg", "cert", "nc", "cont", "exec", "cb", "enc", "connected", "cmd", "resp", "jp", "co", "con"], "in": ["mc", "file", "en", "is", "inf", "cin", "from", "mi", "reader", "IN", "inc", "i", "n", "inner", "ad", "inside", "m", "on", "ma", "out", "din", "get", "user", "input", "isin", "ind", "gin", "In", "or", "and", "ins", "rin", "sum", "bin", "body", "sql", "stream", "inn"], "length": ["text", "path", "address", "description", "number", "Length", "h", "height", "string", "sequence", "HH", "amount", "count", "position", "ength", "history", "family", "total", "phi", "left", "ENGTH", "filename", "len", "time", "duration", "volume", "loop", "padding", "buffer", "loss", "result", "end", "message", " Length", "impl", "offset", "frame", "width", "load", "data", "distance", "value", "shape", "enc", "l", "type", "size"]}}
{"id1": "10391753", "id2": "20663364", "code1": "    public static String encrypt(String text) {\n        char[] toEncrypt = text.toCharArray();\n        StringBuffer hexString = new StringBuffer();\n        try {\n            MessageDigest dig = MessageDigest.getInstance(\"MD5\");\n            dig.reset();\n            String pw = \"\";\n            for (int i = 0; i < toEncrypt.length; i++) {\n                pw += toEncrypt[i];\n            }\n            dig.update(pw.getBytes());\n            byte[] digest = dig.digest();\n            int digestLength = digest.length;\n            for (int i = 0; i < digestLength; i++) {\n                hexString.append(hexDigit(digest[i]));\n            }\n        } catch (java.security.NoSuchAlgorithmException ae) {\n            ae.printStackTrace();\n        }\n        return hexString.toString();\n    }\n", "code2": "    public void testPreparedStatement0009() throws Exception {\n        Statement stmt = con.createStatement();\n        stmt.executeUpdate(\"create table #t0009 \" + \"  (i  integer  not null,      \" + \"   s  char(10) not null)      \");\n        con.setAutoCommit(false);\n        PreparedStatement pstmt = con.prepareStatement(\"insert into #t0009 values (?, ?)\");\n        int rowsToAdd = 8;\n        final String theString = \"abcdefghijklmnopqrstuvwxyz\";\n        int count = 0;\n        for (int i = 1; i <= rowsToAdd; i++) {\n            pstmt.setInt(1, i);\n            pstmt.setString(2, theString.substring(0, i));\n            count += pstmt.executeUpdate();\n        }\n        pstmt.close();\n        assertEquals(count, rowsToAdd);\n        con.rollback();\n        ResultSet rs = stmt.executeQuery(\"select s, i from #t0009\");\n        assertNotNull(rs);\n        count = 0;\n        while (rs.next()) {\n            count++;\n            assertEquals(rs.getString(1).trim().length(), rs.getInt(2));\n        }\n        assertEquals(count, 0);\n        con.commit();\n        pstmt = con.prepareStatement(\"insert into #t0009 values (?, ?)\");\n        rowsToAdd = 6;\n        count = 0;\n        for (int i = 1; i <= rowsToAdd; i++) {\n            pstmt.setInt(1, i);\n            pstmt.setString(2, theString.substring(0, i));\n            count += pstmt.executeUpdate();\n        }\n        assertEquals(count, rowsToAdd);\n        con.commit();\n        pstmt.close();\n        rs = stmt.executeQuery(\"select s, i from #t0009\");\n        count = 0;\n        while (rs.next()) {\n            count++;\n            assertEquals(rs.getString(1).trim().length(), rs.getInt(2));\n        }\n        assertEquals(count, rowsToAdd);\n        con.commit();\n        stmt.close();\n        con.setAutoCommit(true);\n    }\n", "label": 0, "substitutes": {"encrypt": ["crypted", "decipher", "decryption", "Encrypt", "encrypted", "Encryption", "decrypted", "encryption", "Encrypted", "Encipher", "encipher", "cipher", "cryption", "decrypt", "crypt"], "text": ["path", "secret", "string", "binary", "txt", "Text", "str", "print", "char", "t", "nt", "phrase", "output", "content", "required", "ext", "pattern", "code", "hidden", "config", "prefix", "buffer", "message", "command", "input", "read", "name", "document", "hex", "data", "x", "cont", "source", "value", "password", "TEXT", "w", "word"], "toEncrypt": ["toExplrupt", "TOAccrypt", " toEncrupt", "toSecrupt", "toIntegreat", "toEnclect", " toEnclect", " toEncrypted", "toExplrypt", " toSecrypted", "toAcrypt", " toEnlect", "toAcreat", "toEncreat", "TOEncrypt", "toEnrupt", "toAclect", "toAccrypt", " toEnrypt", " toEncreat", "TOEnccrypt", "toEnrypt", "toSecrypted", "toEnrypted", "TOAcrypt", " toEnreat", "toEnlect", "toIntegrypted", "toSeccrypt", "toExplcrypt", " toSecrupt", "toSecrypt", "toEncrypted", " toEnrypted", " toSecrypt", " toSeccrypt", "TOAcrypted", "toInteglect", "toIntegrypt", "toEnccrypt", "TOEncrypted", "toEnreat", "toEncrupt", "toExplrypted", "toAcrypted", " toEnccrypt"], "hexString": ["hexstring", "hwNumber", "expstring", "hexNumber", " hexStr", "hexBuffer", "exstring", "hwRing", "hexRing", " hexBuffer", "expArray", "hashBuffer", "pexNumber", "hashstring", "expString", " hexstring", "hashStr", " hexNumber", "exBuffer", " hexArray", "hexStr", "pexRing", "exString", "exStr", "expStr", "pexString", "hwString", "hashString", "exArray", "hwArray", "pexArray", "hexArray", " hexRing"], "dig": ["cong", "d", "dec", "dr", "da", "dat", "des", "ld", "dir", "mod", "fun", "hash", "eval", "dep", "nd", "comm", "deep", "ng", "red", "write", "vol", "res", "pat", "fin", "md", "dis", "def", "pers", "round", "desc", "dd", "rd", "her", "get", "Dig", "alg", "rip", " des", "db", "read", "ind", "cd", "exp", "od", "sign", "bd", "add", "mn", "and", " Dig", "enc", "df", "pos", "grad", "del", "plug", "de", "find", "div", "dc", "ve"], "pw": [" apwd", "Pwp", "pwr", "tpwr", " pwp", "tpw", "phpwa", "phpwal", "Pwd", " apwp", "phpwr", " apw", " pwd", "pwa", " apW", "pwp", "cpw", "Pws", "tpws", "pwal", "pW", "cpwr", " pwa", " pW", " pwal", "Pwr", "cpwa", " pwr", "pwd", " pws", "cpwal", "Pw", "pws", "phpw", "tpwd", "PW"], "i": ["I", "iq", "ini", "iy", "ci", "m", "gu", "qi", "ix", "fi", "ui", "php", "y", "PI", "err", "ic", "MI", "gi", "io", "ion", "in", "umi", "\u0438", "you", "phi", "oi", "ri", "mi", "c", "ex", "iu", "ice", "cli", "ims", "o", "iter", "ms", "client", "me", "chain", "ip", "ti", "batch", "li", "id", "is", "ity", "si", "ni", "pi", "multi", "init", "ind", "ei", "im", "ai", "sim", "it", "bi", "ami", "ji", "sequence", "di", "ki", "ii", "j", "ski", "uri", "q", "xi", "ie", "us", "g", "info"], "digest": ["encEST", "decester", "digested", "cdress", " digEST", "Digress", "Digse", "Digested", "dester", "dest", "DigEST", "Digest", " digress", "deceter", "encse", "Digeter", "hexested", "decEST", " digested", "Digester", "digEST", "hexeter", "encest", " digester", "decist", "encester", "hexest", "decest", "hexEST", "digeter", "dested", " digist", "dist", " digse", "digist", "digse", "cdester", "decested", "digester", "cdest", "cdEST", "digress"], "digestLength": ["DigistLength", " digestVolume", "digistryLength", " digestInstallation", "digistryLen", " digidateVolume", "digistLength", "digistNumber", "digestedLen", "digidateLength", " digidateLength", "digistryInstallation", "digesterLen", " digidateInstallation", "digistryVolume", " digestLen", "digistVolume", "digestVolume", "digesterLength", "digestLen", "digesterNumber", "digidateInstallation", "digestNumber", "digestInstallation", "DigestLen", "DigestLength", "digistInstallation", "digidateLen", " digidateLen", "digestedNumber", "digidateVolume", "digistLen", "DigistLen", "digestedLength", "DigestNumber", "DigistNumber"]}}
{"id1": "8778962", "id2": "23666867", "code1": "    public static boolean decodeFileToFile(String infile, String outfile) {\n        boolean success = false;\n        java.io.InputStream in = null;\n        java.io.OutputStream out = null;\n        try {\n            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);\n            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n            byte[] buffer = new byte[65536];\n            int read = -1;\n            while ((read = in.read(buffer)) >= 0) {\n                out.write(buffer, 0, read);\n            }\n            success = true;\n        } catch (java.io.IOException exc) {\n            exc.printStackTrace();\n        } finally {\n            try {\n                in.close();\n            } catch (Exception exc) {\n            }\n            try {\n                out.close();\n            } catch (Exception exc) {\n            }\n        }\n        return success;\n    }\n", "code2": "    public static void copyFile(File in, File out) {\n        try {\n            FileChannel inChannel = null, outChannel = null;\n            try {\n                out.getParentFile().mkdirs();\n                inChannel = new FileInputStream(in).getChannel();\n                outChannel = new FileOutputStream(out).getChannel();\n                outChannel.transferFrom(inChannel, 0, inChannel.size());\n            } finally {\n                if (inChannel != null) {\n                    inChannel.close();\n                }\n                if (outChannel != null) {\n                    outChannel.close();\n                }\n            }\n        } catch (Exception e) {\n            ObjectUtils.throwAsError(e);\n        }\n    }\n", "label": 1, "substitutes": {"decodeFileToFile": ["decodeString2Files", "decodeFileToFiles", "decodeFileFilefile", "decodeFileFileString", "decodeString2String", "decodeString2file", "decodeFile2Files", "decodeStringToFile", "decodeFileTofile", "decodeFileFileFile", "decodeFileAsString", "decodeFile2File", "decodeStringTofile", "decodeFile2String", "decodeFileAsFiles", "decodeFileToString", "decodeFileFileFiles", "decodeString2File", "decodeFile2file", "decodeFileAsFile", "decodeFileAsfile", "decodeStringToString", "decodeStringToFiles"], "infile": ["Inbase", "fromfilename", "outfolder", "Infile", "inputFile", "outbase", "InFile", "isinname", "fromFile", "inputname", "inputfile", "inFile", "inname", "outfilename", "infolder", "isinfile", "infilename", "isinfolder", "frombase", "Infilename", "inputfolder", "isinFile", "fromfile", "outFile", "outname", "inbase"], "outfile": ["outFILE", "inFILE", "outdir", "todir", " outFILE", "otname", "tofilename", " outname", "Outdir", "otFILE", "otfile", "inFile", "inname", "outfilename", "otFile", "tofile", "indir", "Outfilename", "outFile", "outname", "Outfile", "OutFile", " outFile", "toFile", "infilename"], "in": ["pin", "en", "by", "id", "is", "inf", "t", "per", "up", "al", "cin", "from", "re", "ini", "IN", "inc", "i", "inner", "inside", "ar", "on", " din", "amin", "iter", "form", "din", "conn", "get", "oin", "init", "input", "isin", "ind", "gin", "source", "In", "or", "im", "ins", "rin", "it", "info", "bin", "nin", "ain", "con", "inn"], "out": ["os", "outs", "at", "file", "en", "OU", "io", "print", "b", "t", "ot", "nt", "ion", "aos", "output", "flush", "ex", "n", "to", "null", "write", "inner", "res", "auto", "gt", "on", "outer", "o", "opt", "net", "end", "oss", "cn", "writer", "fn", "sys", "OUT", "Out", "it", "g", "ou", "ne", "can", "co", "con"], "buffer": ["black", "sample", "batch", "number", "binary", "sequence", "variable", "append", "bar", "print", "history", "row", "stack", "phrase", "total", "attribute", "button", "view", "library", "block", "mem", "bone", "base", "note", "initial", "padding", "table", "message", "buff", "paste", "column", "frame", "template", "document", "comment", "memory", "password", "header", "pad", "shape", "window", "cache", "character", "info", "available", "buf", "Buffer", "temp", "display", "command"], "read": ["text", "allow", "send", "first", "print", "before", "length", "count", "start", "select", "skip", "run", "open", "reader", "len", "index", "range", "n", "check", "query", "write", "i", "ok", "close", "wait", "through", "iter", "set", "connect", "end", "each", "get", "READ", "reads", "raw", "req", "push", "input", "ind", "seek", "shift", "readable", "load", "reading", "give", "add", "Read", "ready", "need", "hold", " Read", "stream", "find", "size"], "success": ["submit", "first", "please", " failure", "ratulations", "crit", " succeeds", "unity", "exist", "growth", "complete", "town", "Success", "primary", "good", "successfully", "snap", "safe", "scope", "condition", "cess", "ok", "status", "release", "summary", "valid", "city", "accept", "sufficient", "positive", " successful", "result", "fail", "ccess", "danger", "commit", "second", "support", "setup", "successful", " successes", " okay", "error", "ceed", "photo", " succ", "same", "democracy", "done", "value", "response", " succeed", "continue", "surv"]}}
{"id1": "17791385", "id2": "16825994", "code1": "    public static void copyFile(File src, File dst) throws IOException {\n        InputStream in = new FileInputStream(src);\n        OutputStream out = new FileOutputStream(dst);\n        byte[] buf = new byte[1024];\n        int len;\n        while ((len = in.read(buf)) > 0) out.write(buf, 0, len);\n        in.close();\n        out.close();\n    }\n", "code2": "    public int run(String[] args) throws Exception {\n        if (args.length < 2) {\n            System.err.println(\"Download dir local\");\n            return 1;\n        }\n        OutputStream out = new FileOutputStream(args[1]);\n        Path srcDir = new Path(args[0]);\n        Configuration conf = new Configuration();\n        FileSystem srcFS = FileSystem.get(conf);\n        if (!srcFS.getFileStatus(srcDir).isDirectory()) {\n            System.err.println(args[0] + \" is not a directory.\");\n            return 1;\n        }\n        try {\n            FileStatus contents[] = srcFS.listStatus(srcDir);\n            for (int i = 0; i < contents.length; i++) {\n                if (contents[i].isFile()) {\n                    System.err.println(contents[i].getPath());\n                    InputStream in = srcFS.open(contents[i].getPath());\n                    try {\n                        IOUtils.copyBytes(in, out, conf, false);\n                    } finally {\n                        in.close();\n                    }\n                }\n            }\n        } finally {\n            out.close();\n        }\n        return 0;\n    }\n", "label": 1, "substitutes": {"copyFile": ["copyfile", "clonefile", " cpFiles", "cloneResource", " cpfile", "copyFiles", " copyfile", "copyResource", "cloneFile", " cpFile", " cpResource", " copyResource", "cloneFiles", " copyFiles"], "src": ["sec", "sr", "sq", "cur", "ctr", "txt", "sin", "rx", "sur", "st", "start", "from", "rs", "obs", "sit", "sf", "rel", "sc", "Source", "sb", "bs", "sel", "ipl", "ck", "init", "usc", "usr", "req", "via", "input", "sys", "source", "cont", "rl", "ux", "rc", "ser", "ins", "inst", "iv", "ys"], "dst": ["Dst", "dnd", "dth", "wst", "Dnt", "Dnd", "wth", "Dth", "ddest", "dddest", " dnd", "dnt", " ddest", " dth", "snt", "ddst", "sdest", "wdest", "snd", "sst", "ddnd", "Ddest", "ddnt", "wnd"], "in": ["ln", "ic", "en", "sin", "is", "inf", "rec", "st", "up", "al", "cin", "from", "act", "IN", "inc", "i", "inner", "inside", "ze", "on", "ar", "iter", "din", "oin", "init", "input", "mm", "isin", "ind", "min", "gin", "In", "im", "source", "ai", "ins", "rin", "it", "info", "bin", "ain", "con", "inn"], "out": ["at", "outs", "by", "io", "oe", "t", "obj", "st", "ot", "nt", "up", "conv", "po", "aos", "output", "to", "n", "ex", "write", "inner", "res", "auto", "gt", "on", "outer", "o", "dis", "net", "oss", "cn", "writer", "client", "sys", "con", "OUT", "and", "Out", "sum", "it", "g", "bin", "ou", "ne", "can", "co", "os"], "buf": ["cv", "aka", "stab", "bed", "cur", "bytes", "batch", "log", "bag", "var", "bar", "cat", "b", "conv", "arr", "msg", "norm", "gen", "cp", "good", "mu", "block", "box", "pl", "vec", "bh", "bus", "cf", "fb", "br", "seq", "buffer", "buff", "ck", "cap", "db", "tab", "Buff", "cam", "cb", "pkg", "uf", "cmd", "tx", "Buffer", "prop"], "len": ["ln", "val", "cmp", "v", "fl", "elt", "h", "en", "lib", "ld", "str", "length", "fun", "lf", "t", "e", "count", "nt", "z", "lic", "num", "no", "ls", "lan", "compl", "L", "ren", "dl", "n", "ll", "vol", "fin", "rel", "seq", "loc", "end", "cap", "all", "Len", "exp", "lim", "le", "el", "l", "wid", "pos", "coll", "lon", "il", "size"]}}
{"id1": "19109981", "id2": "19276022", "code1": "    private void startScript(wabclient.Attributes prop) throws SAXException {\n        dialog.beginScript();\n        String url = prop.getValue(\"src\");\n        if (url.length() > 0) {\n            try {\n                BufferedReader r = new BufferedReader(new InputStreamReader(new URL(url).openStream()));\n                String buffer;\n                while (true) {\n                    buffer = r.readLine();\n                    if (buffer == null) break;\n                    dialog.script += buffer + \"\\n\";\n                }\n                r.close();\n                dialog.endScript();\n            } catch (IOException ioe) {\n                System.err.println(\"[IOError] \" + ioe.getMessage());\n                System.exit(0);\n            }\n        }\n    }\n", "code2": "    public DataSet parse() throws SnifflibDatatypeException {\n        NumberFormat numformat = NumberFormat.getInstance();\n        if (this.headers.size() != this.types.size()) {\n            throw new SnifflibDatatypeException(\"Different number of headers (\" + this.headers.size() + \") and types(\" + this.types.size() + \").\");\n        }\n        DataSet out = null;\n        if (!this.dryrun) {\n            out = new DataSet();\n        }\n        BufferedReader r = null;\n        StreamTokenizer tokenizer = null;\n        try {\n            if (this.isURL) {\n                if (this.url2goto == null) {\n                    return (null);\n                }\n                DataInputStream in = null;\n                try {\n                    in = new DataInputStream(this.url2goto.openStream());\n                    System.out.println(\"READY TO READ FROM URL:\" + url2goto);\n                    r = new BufferedReader(new InputStreamReader(in));\n                } catch (Exception err) {\n                    throw new RuntimeException(\"Problem reading from URL \" + this.url2goto + \".\", err);\n                }\n            } else {\n                if (this.file == null) {\n                    throw new RuntimeException(\"Data file to be parsed can not be null.\");\n                }\n                if (!this.file.exists()) {\n                    throw new RuntimeException(\"The file \" + this.file + \" does not exist.\");\n                }\n                r = new BufferedReader(new FileReader(this.file));\n            }\n            if (this.ignorePreHeaderLines > 0) {\n                String strLine;\n                int k = 0;\n                while ((k < this.ignorePreHeaderLines) && ((strLine = r.readLine()) != null)) {\n                    k++;\n                }\n            }\n            tokenizer = new StreamTokenizer(r);\n            tokenizer.resetSyntax();\n            tokenizer.eolIsSignificant(true);\n            tokenizer.parseNumbers();\n            if (this.delimiter.equals(\"\\\\t\")) {\n                tokenizer.whitespaceChars('\\t', '\\t');\n            }\n            if (this.delimiter.equals(\",\")) {\n                tokenizer.whitespaceChars(',', ',');\n            }\n            tokenizer.quoteChar('\"');\n            tokenizer.whitespaceChars(' ', ' ');\n            boolean readingHeaders = true;\n            boolean readingInitialValues = false;\n            boolean readingData = false;\n            boolean readingScientificNotation = false;\n            if (this.headers.size() > 0) {\n                readingHeaders = false;\n                readingInitialValues = true;\n            }\n            if (this.types.size() > 0) {\n                readingInitialValues = false;\n                Class targetclass;\n                for (int j = 0; j < this.types.size(); j++) {\n                    targetclass = (Class) this.types.get(j);\n                    try {\n                        this.constructors.add(targetclass.getConstructor(String.class));\n                    } catch (java.lang.NoSuchMethodException err) {\n                        throw new SnifflibDatatypeException(\"Could not find appropriate constructor for \" + targetclass + \". \" + err.getMessage());\n                    }\n                }\n                readingData = true;\n            }\n            int currentColumn = 0;\n            int currentRow = 0;\n            this.rowcount = 0;\n            boolean advanceField = true;\n            while (true) {\n                tokenizer.nextToken();\n                switch(tokenizer.ttype) {\n                    case StreamTokenizer.TT_WORD:\n                        {\n                            if (readingScientificNotation) {\n                                throw new RuntimeException(\"Problem reading scientific notation at row \" + currentRow + \" column \" + currentColumn + \".\");\n                            }\n                            advanceField = true;\n                            if (readingHeaders) {\n                                this.headers.add(tokenizer.sval);\n                            } else {\n                                if (readingInitialValues) {\n                                    this.types.add(String.class);\n                                }\n                                if (!this.dryrun) {\n                                    if (out.getColumnCount() <= currentColumn) {\n                                        out.addColumn((String) this.headers.get(currentColumn), (Class) this.types.get(currentColumn));\n                                    }\n                                }\n                                try {\n                                    Constructor construct;\n                                    if (currentColumn < this.constructors.size()) {\n                                        construct = (Constructor) this.constructors.get(currentColumn);\n                                    } else {\n                                        Class targetclass = (Class) this.types.get(currentColumn);\n                                        construct = targetclass.getConstructor(String.class);\n                                        this.constructors.add(construct);\n                                    }\n                                    try {\n                                        try {\n                                            try {\n                                                if (!this.dryrun) {\n                                                    out.setValueAt(construct.newInstance((String) tokenizer.sval), currentRow, currentColumn);\n                                                } else if (this.findingTargetValue) {\n                                                    if ((this.targetRow == currentRow) && (this.targetColumn == currentColumn)) {\n                                                        this.targetValue = construct.newInstance((String) tokenizer.sval);\n                                                        r.close();\n                                                        return (null);\n                                                    }\n                                                }\n                                            } catch (java.lang.reflect.InvocationTargetException err) {\n                                                throw new SnifflibDatatypeException(\"Problem constructing 1\" + err.getMessage());\n                                            }\n                                        } catch (java.lang.IllegalAccessException err) {\n                                            throw new SnifflibDatatypeException(\"Problem constructing 2\" + err.getMessage());\n                                        }\n                                    } catch (java.lang.InstantiationException err) {\n                                        throw new SnifflibDatatypeException(\"Problem constructing 3\" + err.getMessage());\n                                    }\n                                } catch (java.lang.NoSuchMethodException err) {\n                                    throw new SnifflibDatatypeException(\"Problem constructing 4\" + err.getMessage());\n                                }\n                            }\n                            break;\n                        }\n                    case StreamTokenizer.TT_NUMBER:\n                        {\n                            advanceField = true;\n                            if (readingHeaders) {\n                                throw new SnifflibDatatypeException(\"Expecting string header at row=\" + currentRow + \", column=\" + currentColumn + \".\");\n                            } else {\n                                if (readingInitialValues) {\n                                    this.types.add(Double.class);\n                                }\n                                if (!this.dryrun) {\n                                    if (out.getColumnCount() <= currentColumn) {\n                                        out.addColumn((String) this.headers.get(currentColumn), (Class) this.types.get(currentColumn));\n                                    }\n                                }\n                                try {\n                                    Constructor construct;\n                                    if (currentColumn < this.constructors.size()) {\n                                        construct = (Constructor) this.constructors.get(currentColumn);\n                                    } else {\n                                        Class targetclass = (Class) this.types.get(currentColumn);\n                                        construct = targetclass.getConstructor(double.class);\n                                        this.constructors.add(construct);\n                                    }\n                                    if (readingScientificNotation) {\n                                        Double val = this.scientificNumber;\n                                        if (!this.dryrun) {\n                                            try {\n                                                out.setValueAt(new Double(val.doubleValue() * tokenizer.nval), currentRow, currentColumn);\n                                            } catch (Exception err) {\n                                                throw new SnifflibDatatypeException(\"Problem constructing \" + construct.getDeclaringClass() + \"at row \" + currentRow + \" column \" + currentColumn + \".\", err);\n                                            }\n                                        } else if (this.findingTargetValue) {\n                                            if ((this.targetRow == currentRow) && (this.targetColumn == currentColumn)) {\n                                                Double NVAL = new Double(tokenizer.nval);\n                                                try {\n                                                    this.targetValue = numformat.parse(val + \"E\" + NVAL);\n                                                } catch (Exception err) {\n                                                    throw new RuntimeException(\"Problem parsing scientific notation at row=\" + currentRow + \" col=\" + currentColumn + \".\");\n                                                }\n                                                tokenizer.nextToken();\n                                                if (tokenizer.ttype != 'e') {\n                                                    r.close();\n                                                    return (null);\n                                                } else {\n                                                    tokenizer.pushBack();\n                                                }\n                                            }\n                                        }\n                                        readingScientificNotation = false;\n                                    } else {\n                                        try {\n                                            this.scientificNumber = new Double(tokenizer.nval);\n                                            if (!this.dryrun) {\n                                                out.setValueAt(this.scientificNumber, currentRow, currentColumn);\n                                            } else if (this.findingTargetValue) {\n                                                if ((this.targetRow == currentRow) && (this.targetColumn == currentColumn)) {\n                                                    this.targetValue = this.scientificNumber;\n                                                    r.close();\n                                                    return (null);\n                                                }\n                                            }\n                                        } catch (Exception err) {\n                                            throw new SnifflibDatatypeException(\"Problem constructing \" + construct.getDeclaringClass() + \"at row \" + currentRow + \" column \" + currentColumn + \".\", err);\n                                        }\n                                    }\n                                } catch (java.lang.NoSuchMethodException err) {\n                                    throw new SnifflibDatatypeException(\"Problem constructing\" + err.getMessage());\n                                }\n                            }\n                            break;\n                        }\n                    case StreamTokenizer.TT_EOL:\n                        {\n                            if (readingHeaders) {\n                                readingHeaders = false;\n                                readingInitialValues = true;\n                            } else {\n                                if (readingInitialValues) {\n                                    readingInitialValues = false;\n                                    readingData = true;\n                                }\n                            }\n                            if (readingData) {\n                                currentRow++;\n                            }\n                            break;\n                        }\n                    case StreamTokenizer.TT_EOF:\n                        {\n                            if (readingHeaders) {\n                                throw new SnifflibDatatypeException(\"End of file reached while reading headers.\");\n                            }\n                            if (readingInitialValues) {\n                                throw new SnifflibDatatypeException(\"End of file reached while reading initial values.\");\n                            }\n                            if (readingData) {\n                                readingData = false;\n                            }\n                            break;\n                        }\n                    default:\n                        {\n                            if (tokenizer.ttype == '\"') {\n                                advanceField = true;\n                                if (readingHeaders) {\n                                    this.headers.add(tokenizer.sval);\n                                } else {\n                                    if (readingInitialValues) {\n                                        this.types.add(String.class);\n                                    }\n                                    if (!this.dryrun) {\n                                        if (out.getColumnCount() <= currentColumn) {\n                                            out.addColumn((String) this.headers.get(currentColumn), (Class) this.types.get(currentColumn));\n                                        }\n                                    }\n                                    try {\n                                        Constructor construct;\n                                        if (currentColumn < this.constructors.size()) {\n                                            construct = (Constructor) this.constructors.get(currentColumn);\n                                        } else {\n                                            Class targetclass = (Class) this.types.get(currentColumn);\n                                            construct = targetclass.getConstructor(String.class);\n                                            this.constructors.add(construct);\n                                        }\n                                        try {\n                                            try {\n                                                try {\n                                                    if (!this.dryrun) {\n                                                        out.setValueAt(construct.newInstance((String) tokenizer.sval), currentRow, currentColumn);\n                                                    } else if (this.findingTargetValue) {\n                                                        if ((this.targetRow == currentRow) && (this.targetColumn == currentColumn)) {\n                                                            this.targetValue = construct.newInstance((String) tokenizer.sval);\n                                                            r.close();\n                                                            return (null);\n                                                        }\n                                                    }\n                                                } catch (java.lang.reflect.InvocationTargetException err) {\n                                                    throw new SnifflibDatatypeException(\"Problem constructing 1 \" + err.getMessage());\n                                                }\n                                            } catch (java.lang.IllegalAccessException err) {\n                                                throw new SnifflibDatatypeException(\"Problem constructing 2 \" + err.getMessage());\n                                            }\n                                        } catch (java.lang.InstantiationException err) {\n                                            throw new SnifflibDatatypeException(\"Problem constructing 3 \" + err.getMessage());\n                                        }\n                                    } catch (java.lang.NoSuchMethodException err) {\n                                        throw new SnifflibDatatypeException(\"Problem constructing 4\" + err.getMessage());\n                                    }\n                                }\n                            } else if (tokenizer.ttype == 'e') {\n                                Class targetclass = (Class) this.types.get(currentColumn);\n                                if (Number.class.isAssignableFrom(targetclass)) {\n                                    currentColumn--;\n                                    readingScientificNotation = true;\n                                    advanceField = false;\n                                }\n                            } else {\n                                advanceField = false;\n                            }\n                            break;\n                        }\n                }\n                if (tokenizer.ttype == StreamTokenizer.TT_EOF) {\n                    break;\n                }\n                if (advanceField) {\n                    currentColumn++;\n                    if (!readingHeaders) {\n                        if (currentColumn >= this.headers.size()) {\n                            currentColumn = 0;\n                        }\n                    }\n                }\n            }\n            if (!readingHeaders) {\n                this.rowcount = currentRow;\n            } else {\n                this.rowcount = 0;\n                readingHeaders = false;\n                if (this.ignorePostHeaderLines > 0) {\n                    String strLine;\n                    int k = 0;\n                    while ((k < this.ignorePostHeaderLines) && ((strLine = r.readLine()) != null)) {\n                        k++;\n                    }\n                }\n            }\n            r.close();\n        } catch (java.io.IOException err) {\n            throw new SnifflibDatatypeException(err.getMessage());\n        }\n        if (!this.dryrun) {\n            for (int j = 0; j < this.headers.size(); j++) {\n                out.setColumnName(j, (String) this.headers.get(j));\n            }\n        }\n        return (out);\n    }\n", "label": 1, "substitutes": {"startScript": ["renderForm", "renderScript", "StartProgram", "StartScript", " startFrame", "startForm", "renderFrame", " startProgram", " startForm", "startProgram", "renderProgram", "startFrame", "StartForm", "StartFrame"], "prop": [" prog", " xp", "op", "p", "pro", "vp", "property", "char", " Prop", "obj", "properties", "msg", "conf", " p", "cp", " props", "claim", "ps", "def", "desc", " report", "comp", "attr", "cap", "cfg", "Pro", "exp", "etc", "spec", "OP", "pr", "att", "report", "pkg", "pos", "rop", "Prop", "info", "xp", "buf", "proc"], "url": ["sl", "path", "address", "gl", "string", "ret", "Url", "log", "abs", "str", "nl", "src", "resource", "mail", "char", "b", "ls", "control", "norm", "href", "dl", "ll", "pl", "res", "host", "location", "uri", "rel", "base", "URL", "web", "loc", "result", "ur", "q", "impl", "http", "source", "rl", "image", "mount", "rect", "l", "xml", "json", "ref", "sql", "ul"], "r": ["err", "sr", "dr", "h", "b", "rx", "rec", "nr", "rb", "vr", "Reader", "repl", "mr", "reader", "re", "rs", "rw", "rg", "ro", "res", "cr", "ar", "f", "rel", "br", "hr", "rd", "ur", "rt", "rr", "rf", "rl", "rc", "fr", "it", "er", "rar", "R"], "buffer": ["text", "where", "sample", "cell", "function", "batch", "string", "binary", "sequence", "variable", "append", "queue", "resource", "print", "face", "b", "char", "length", "position", "history", "row", "device", "phrase", "record", "style", "button", "bo", "null", "block", "check", "quote", "statement", "base", "engine", "iter", "note", "table", "message", "buff", "result", "raw", "database", "input", "read", "frame", "document", "balance", "template", "line", "comment", "data", "source", "value", "password", "response", "cache", "available", "buf", "Buffer", "temp", "stream", "display", "entry", "command"], "dialog": ["Dialive", "lockiz", "callogs", "log", "liz", "dlg", "callag", "directogue", "dlogue", "ylogs", "directog", "logue", "calliz", "callage", "Dialog", "dialogs", "directg", "dialage", "dlive", "callog", "lockag", "ylect", "dialect", "Dialg", "ylage", "directive", "Dialage", "ylog", "lockog", "dialag", "dialive", "Dialogs", "lockogue", "callect", "lag", "Dialect", "dialg", "callogue", "dialogue", "dlog", "dializ", "Dialogue"], "script": ["text", "system", "sequence", "timeout", "style", "control", "javascript", "button", "index", "query", "label", "Script", "code", "summary", "config", "screen", "table", "active", "tree", "template", "error", "source", "image", "region", "exec", "scripts", "cript", "command"]}}
{"id1": "23510383", "id2": "20735941", "code1": "    public boolean saveProject(File file, Set<String> types, Set<String> images, Set<String> trajectories, boolean databasesIncluded, boolean onlyLinks) throws IOException, SQLException {\n        int index = file.getName().lastIndexOf(\".\");\n        String name = file.getName().substring(0, index);\n        DecimalFormat format = new DecimalFormat(\"####\");\n        format.setMinimumIntegerDigits(4);\n        int count = 0;\n        File main = new File(name);\n        if (main.exists()) {\n            throw new IOException(main.getAbsolutePath());\n        }\n        main.mkdir();\n        File version = new File(main, \"version\");\n        version.createNewFile();\n        PrintWriter writer = new PrintWriter(version);\n        writer.write(Videso3D.VERSION);\n        writer.flush();\n        writer.close();\n        File xmlDir = new File(main.getAbsolutePath() + \"/xml\");\n        xmlDir.mkdir();\n        if (types != null && !types.isEmpty()) {\n            File databases = new File(main.getAbsolutePath() + \"/databases\");\n            databases.mkdir();\n            for (String t : types) {\n                Type type = DatabaseManager.stringToType(t);\n                if (type != null) {\n                    if (onlyLinks) {\n                        if (databasesIncluded) {\n                            String currentName = DatabaseManager.getCurrentName(type);\n                            File baseCopy = new File(databases, currentName + \".\" + type);\n                            baseCopy.createNewFile();\n                            FileChannel source = new FileInputStream(new File(currentName)).getChannel();\n                            FileChannel destination = new FileOutputStream(baseCopy).getChannel();\n                            destination.transferFrom(source, 0, source.size());\n                            source.close();\n                            destination.close();\n                            List<String[]> clefs = new ArrayList<String[]>();\n                            Statement st = DatabaseManager.getCurrent(Type.Databases);\n                            ResultSet rs = st.executeQuery(\"select * from clefs where type='\" + currentName + \"'\");\n                            while (rs.next()) {\n                                clefs.add(new String[] { rs.getString(\"name\"), rs.getString(\"value\") });\n                            }\n                            st.close();\n                            if (!clefs.isEmpty()) {\n                                File clefsFile = new File(databases, currentName + \"_clefs\");\n                                clefsFile.createNewFile();\n                                ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(clefsFile));\n                                oos.writeObject(clefs);\n                                oos.close();\n                            }\n                            File filesDir = new File(currentName + \"_files\");\n                            if (filesDir.exists() && filesDir.isDirectory()) {\n                                File baseFiles = new File(databases, currentName + \"_files\");\n                                baseFiles.mkdirs();\n                                for (File f : filesDir.listFiles()) {\n                                    File copy = new File(baseFiles, f.getName());\n                                    copy.createNewFile();\n                                    source = new FileInputStream(f).getChannel();\n                                    destination = new FileOutputStream(copy).getChannel();\n                                    destination.transferFrom(source, 0, source.size());\n                                    source.close();\n                                    destination.close();\n                                }\n                            }\n                        }\n                        File selectedObjects = new File(databases, type.toString());\n                        selectedObjects.createNewFile();\n                        ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(selectedObjects));\n                        oos.writeObject(objects.get(type));\n                        oos.close();\n                    } else {\n                        for (Restorable r : DatasManager.getController(type).getSelectedObjects()) {\n                            this.saveObjectInXml(r, new File(xmlDir, r.getClass().getName() + \"-\" + type + \"-\" + format.format(count++) + \".xml\"));\n                        }\n                    }\n                }\n            }\n        }\n        File imagesDir = new File(main.getAbsolutePath() + \"/images\");\n        imagesDir.mkdir();\n        for (EditableSurfaceImage si : this.getImages()) {\n            if (images.contains(si.getName())) {\n                int idx = si.getName().lastIndexOf(\".\");\n                String newName = si.getName();\n                if (idx != -1) {\n                    newName = si.getName().substring(0, idx);\n                }\n                File img = new File(imagesDir, newName + \".gtif\");\n                ImageUtils.writeImageToFile(si.getSector(), (BufferedImage) si.getImageSource(), img);\n            }\n        }\n        File trajectoDir = new File(main, \"trajectory\");\n        trajectoDir.mkdirs();\n        for (Layer l : wwd.getModel().getLayers()) {\n            if (l instanceof GEOTracksLayer && trajectories.contains(l.getName())) {\n                GEOWriter geoWriter = new GEOWriter(trajectoDir.getAbsolutePath() + \"/\" + l.getName(), true);\n                for (VidesoTrack track : ((GEOTracksLayer) l).getModel().getVisibleTracks()) {\n                    geoWriter.writeTrack((GEOTrack) track);\n                }\n                geoWriter.close();\n            }\n        }\n        if (types != null && types.contains(\"Autres objets affich\u00e9s.\")) {\n            for (Layer l : wwd.getModel().getLayers()) {\n                if (l.getName().equals(AIRSPACE_LAYER_NAME)) {\n                    for (Airspace r : ((AirspaceLayer) l).getAirspaces()) {\n                        this.saveObjectInXml((Restorable) r, new File(xmlDir, r.getClass().getName() + \"-\" + format.format(count++) + \".xml\"));\n                    }\n                } else if (l.getName().equals(RENDERABLE_LAYER_NAME)) {\n                    for (Renderable r : ((RenderableLayer) l).getRenderables()) {\n                        if (r instanceof Restorable) {\n                            this.saveObjectInXml((Restorable) r, new File(xmlDir, r.getClass().getName() + \"-\" + format.format(count++) + \".xml\"));\n                        }\n                    }\n                } else if (l.getName().equals(BALISES2D_LAYER_NAME)) {\n                    for (Balise2D b : ((Balise2DLayer) l).getVisibleBalises()) {\n                        this.saveObjectInXml(b, new File(xmlDir, b.getClass().getName() + \"-\" + format.format(count++) + \".xml\"));\n                    }\n                } else if (l.getName().equals(BALISES3D_LAYER_NAME)) {\n                    for (Balise3D b : ((Balise3DLayer) l).getVisibleBalises()) {\n                        this.saveObjectInXml(b, new File(xmlDir, b.getClass().getName() + \"-\" + format.format(count++) + \".xml\"));\n                    }\n                }\n            }\n        }\n        for (Airspace a : PolygonEditorsManager.getLayer().getAirspaces()) {\n            if (a.isVisible()) this.saveObjectInXml(a, new File(xmlDir, a.getClass().getName() + \"-\" + format.format(count++) + \".xml\"));\n        }\n        this.saveObjectInXml(this.wwd.getView(), new File(main, \"globe.xml\"));\n        FileManager.createZipFile(file, main);\n        FileManager.deleteFile(main);\n        return true;\n    }\n", "code2": "    protected File getFile() throws IOException {\n        File home = new File(System.getProperty(\"user.dir\"));\n        String fileName = String.format(\"%s.txt\", getFilePrefix());\n        File file = new File(home, fileName);\n        if (file.exists()) {\n            return file;\n        } else {\n            URL url = LocalNameGenerator.class.getResource(\"/\" + fileName);\n            if (url == null) {\n                throw new IllegalStateException(String.format(\"Cannot find resource at %s\", fileName));\n            } else {\n                InputStream in = url.openStream();\n                try {\n                    BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(file));\n                    try {\n                        IOUtils.copy(in, out);\n                    } finally {\n                        out.close();\n                    }\n                } finally {\n                    in.close();\n                }\n                return file;\n            }\n        }\n    }\n", "label": 1, "substitutes": {"saveProject": [" SaveFile", " SavePackage", "createFile", " saveApp", " saveFile", " savePackage", " SaveProject", "createApp", "createProject", "savePackage", "createPackage", " SaveApp", "saveFile", "saveApp"], "file": ["local", "path", "dir", "log", "parent", "id", "io", "resource", "FILE", "ile", "e", "ame", "in", "File", "open", "complete", "filename", "real", "port", "link", "base", "table", "files", "get", "project", "db", "create", "foo", "data", "report", "image", "use", "handle", "info", "full"], "types": ["tests", "resources", "assets", "pes", "features", "packages", "objects", "groups", "ids", "strings", "sites", "Types", "ypes", "names", "ts", "packs", "pages", "projects", "options", "ports", "times", "plugins", "models", "parts", "files", "codes", "events", " Types", "versions", "actions", "tags", "services", "posts", "items", "views", "apps", "styles", "keys", "scripts", "issues", "classes", "ties", "otypes", "sets", "thumbnails", "values"], "images": ["assets", "picture", "Image", "icons", "groups", "blocks", "links", "pages", "frames", "models", "files", "events", "videos", "versions", "tags", "media", "Images", "views", "faces", "styles", "image", "scripts", "uploads", "photos", "boxes", "classes", "thumbnails"], "trajectories": ["tractors", "tractables", "Trajectables", "Trajories", "Trajectory", "trajectables", "traceptory", "traceptories", "Trajors", "trajables", "trajectory", "tractory", "Trajables", "tractories", "trajory", "trajors", "trajories", "traceptors", "Trajectories", "Trajory", "trajectors", "traceptables", "Trajectors"], "databasesIncluded": ["databasesedInclusion", "datadesInclusion", "databasesInclusions", "databasesedInlisted", "daturesInlisted", "databasesedInclusions", "databasesedIncluded", "databasesINclusion", "datadesInified", "databasesIngcluded", "databasesINjected", "databasesedInified", "databasesInified", "databasesINcluded", "databasesInglisted", "databasesInclusion", "daturesInslisted", "daturesInsclusions", "datadesInscluded", "datadesIncluded", "databasesedInjected", "datadesInjected", "databasesInsified", "databasesInlisted", "datadesInsclusion", "daturesInclusions", "daturesInscluded", "databasesInsclusions", "databasesInscluded", "databasesInslisted", "datadesInsified", "daturesIncluded", "databasesIngclusions", "databasesInjected", "datadesInsjected", "databasesINified", "databasesInsjected", "databasesInsclusion"], "onlyLinks": ["OnlyLink", "onlyLink", " onlyLink", " onlylinks", "forcelinks", "OnlyLinks", "alsoLinks", " onlyRelations", "onlyRelations", "forceLink", "OnlyRelations", "alsoRelations", "Onlylinks", "onlylinks", "alsoLink", "forceLinks"], "index": ["address", "match", "number", "first", "sequence", "amount", "length", "update", "ion", "position", "num", "nn", "Index", "no", "max", "open", "ex", "n", "inc", "i", "check", " sidx", "initial", "set", "connect", "fail", "end", "loc", "all", "second", "ind", "offset", "zero", "x", "add", "pos", "info", "find", " Index"], "name": ["local", "system", "path", "string", "parent", "id", "ame", "nm", "run", "filename", "names", "NAME", "primary", "named", "n", "title", "m", "about", "base", "prefix", "table", "root", "none", "create", "Name", "data", "me", "image", "man", "default", "full", "word"], "format": ["v", "mt", "term", "print", "printf", "style", "scale", "percent", "pattern", " Format", "language", "base", "Format", "form", "prefix", "set", "table", "get", "init", "parse", "pretty", "color", "util", "data", "MAT", "value", "use", "fm", "list", "default", "it", "layout", "unit", "cal"], "count": ["err", "ount", "mark", "amount", "process", "length", "start", "z", "num", "total", "skip", "c", "code", "set", "table", "counter", "found", "Count", "error", "reset", "add", "flag", "sum", "depth", "order", "size"], "version": ["mint", "build", "v", "description", "java", "number", "parent", "latest", "j", "current", "record", "section", "VERSION", "connection", "release", "summary", "Version", "vers", "about", "server", "result", "root", "page", "database", "journal", "versions", "document", "python", "video", "major", "tree", "alone", "virtual", "header", "xml", "json", "VER", "draft", "ver", "translation", "information"], "writer": ["function", "description", "written", "wrote", "variable", "sw", "handler", "wrapper", "print", "author", "browser", "wright", "creator", "service", "output", "flush", "maker", "reader", "walker", "writ", "external", "access", "to", "editor", "write", "inner", "connection", "console", "language", "builder", "outer", "server", "iterator", "writers", "buffer", "counter", "journal", "document", "client", "caster", "operator", "comment", "data", "Writer", "report", "driver", "writing", "window", "order", "er", "stream", "woman", "entry", "w"], "xmlDir": ["xmlFile", " xmlFile", " xmlFolder", "logDir", "imageDir", "mlFolder", " xmldir", " xmlDirectory", "mlFile", "mlDir", "logFile", "logFolder", "logdir", "mlDirectory", "imageFolder", "xmlDirectory", "imagedir", "imageDirectory", "xmlFolder", "xmldir", "logDirectory"], "databases": ["mutables", "generas", "datases", "mutases", "datelines", "datures", "Databases", " datasha", "Datelines", "notures", "Datas", "notabases", "basabases", "basables", "Datates", "datas", "datates", "notables", " datas", "Datables", "baselines", " database", "generates", "database", "datasha", "basures", "Datures", "datables", " datates", " datases", "Database", "Datasha", "Datases", "mutasha", " datables", "mutabases", "generabases", "notelines", "generabase"], "t": ["v", "typ", "pt", "h", "p", "mt", "txt", "term", "str", "id", "k", "e", "ot", "te", "j", "ts", "c", "n", "i", "o", "tm", "ct", "s", "q", "template", "T", "x", "tr", "it", "tc", "tt", "temp", "y", "w"], "type": ["module", "address", "match", "ping", "typ", "TYPE", "p", "site", "id", "tag", "resource", "test", "tool", "class", "te", "style", "rule", "ype", "other", "time", "to", "null", "relation", "check", "instance", "Type", "title", "link", "language", "kind", "base", "config", "role", "single", "pe", "result", "root", "action", "parse", "ime", "template", "object", "error", "key", "top", "shape", "ty", "info", "unit", "ver", "this", "y"], "currentName": ["currentlyKey", "updatePort", "currentPath", "reportedTime", "currentParent", "currentTime", "currentDir", "currentPort", "CurrentParent", "updateFace", "currentYear", "reportedLock", "baseFace", "updateName", " currentPort", "CurrentDir", " currentFace", "CurrentPath", "reportedName", "thisKey", " currentParent", "reportedDir", "baseName", "completeName", "currentLock", "currentlyName", "currentOrder", "thisName", "CurrentTime", "completeSet", "currentlyYear", "currentlyTime", "reportedParent", "updateOrder", "currentlyLock", "CurrentNames", "thisSet", "currentFace", " currentDir", "currentKey", "currentlyPath", "thisYear", "completeYear", "reportedPath", "CurrentLock", "basePort", "currentSet", "reportedNames", "currentNames", "currentlySet", "CurrentName", "baseOrder", " currentNames", "completeKey", " currentOrder"], "baseCopy": ["basicCop", "BaseStore", "basicStore", "baseCop", "buffercopy", "basecopy", "basiccopy", "bufferCop", " baseCop", "Basecopy", "baseName", "parentCopy", "basicCopy", "BaseCop", "BaseName", " baseStore", " basecopy", "parentName", "bufferCopy", "parentCop", "parentcopy", "baseStore", "BaseCopy", " baseName"], "source": ["master", "local", "space", "search", "scan", "sample", "subject", "system", "sequence", "site", "parent", "src", "resource", "store", "before", "channel", "join", "start", "ources", "service", "SOURCE", "select", "from", "target", "se", "reader", "shell", "original", "owner", "ource", "scope", "connection", "inner", "console", "base", "initial", "iterator", "Source", "init", "create", "input", "data", "origin", "stream", "size"], "destination": ["datinator", "destinated", "Destinated", "datinations", "datination", "destinator", "messination", "messinations", "destructure", "Destinations", "declination", " destinations", " destructure", "Destination", "Destregation", "Destructure", "destuation", "messructure", "declregation", "messinated", "destregation", "Destinator", "messuation", "declinator", "datregation", "declinations", " destuation", " destinated", "Destuation", "destinations"], "clefs": ["CleFs", " Clecs", "Clebs", "CleFS", "CLEfs", "Clefs", " Clefs", " cleFS", "cleFS", "clefits", " Clefits", "clecs", " cleFs", "CLEfits", "clebs", " CleFs", " clebs", " Clebs", "cleFs", "CLEcs", "Clecs", " CleFS", "Clefits", "CLEFs"], "st": ["sl", "St", "pt", "ste", "h", "mt", "str", "sw", "sy", "ost", "bt", "std", "sm", "start", "stra", "ist", "ST", "storage", "bl", "ts", "query", "stat", "cr", "statement", "sth", "ct", "cl", "sc", "irst", "sp", "sb", "dd", "est", "sts", "rest", " ST", "fr", "it", "inst", "tt", "sn", "se"], "rs": [" iss", " cs", "ks", " ins", "RS", " ms", "ls", "mr", "rys", "ts", " pts", "cs", "res", " RS", "as", "ps", "rd", "rt", " sr", "ds", "ris", "ers", "sts", "rc", "ins", "Rs", " ps", "os"]}}
{"id1": "19549489", "id2": "15905041", "code1": "    public static void copy(File sourceFile, File destinationFile) throws IOException {\n        FileChannel sourceFileChannel = (new FileInputStream(sourceFile)).getChannel();\n        FileChannel destinationFileChannel = (new FileOutputStream(destinationFile)).getChannel();\n        sourceFileChannel.transferTo(0, sourceFile.length(), destinationFileChannel);\n        sourceFileChannel.close();\n        destinationFileChannel.close();\n    }\n", "code2": "    public void createPartControl(Composite parent) {\n        viewer = new ScrollingGraphicalViewer();\n        viewer.setRootEditPart(new ScalableRootEditPart());\n        viewer.setEditPartFactory(new BlockEditPartFactory());\n        viewer.setEditDomain(new EditDomain());\n        viewer.createControl(parent);\n        viewer.setKeyHandler(new GraphicalViewerKeyHandler(viewer));\n        ActionRegistry actionRegistry = new ActionRegistry();\n        createActions(actionRegistry);\n        ContextMenuProvider cmProvider = new BlockContextMenuProvider(viewer, actionRegistry);\n        viewer.setContextMenu(cmProvider);\n        Block b = new Block();\n        b.addChild(new ChartItem());\n        viewer.setContents(b);\n        System.err.println(\"!!! \" + viewer.getContents().getChildren().get(0));\n        viewer.select((EditPart) viewer.getContents().getChildren().get(0));\n        PaletteRoot root = new PaletteRoot();\n        PaletteGroup toolGroup = new PaletteGroup(\"Chart Tools\");\n        List toolList = new ArrayList();\n        ToolEntry tool = new SelectionToolEntry();\n        toolList.add(tool);\n        root.setDefaultEntry(tool);\n        tool = new MarqueeToolEntry();\n        toolList.add(tool);\n        toolGroup.addAll(toolList);\n        PaletteGroup templateGroup = new PaletteGroup(\"Templates\");\n        List templateList = new ArrayList();\n        CombinedTemplateCreationEntry entry = new CombinedTemplateCreationEntry(\"Rect\", \"Rect\", new ChartItem(), new SimpleFactory(ChartItem.class), ImageDescriptor.getMissingImageDescriptor(), ImageDescriptor.getMissingImageDescriptor());\n        CombinedTemplateCreationEntry entry1 = new CombinedTemplateCreationEntry(\"Line\", \"Line\", new ChartLine(), new SimpleFactory(ChartLine.class), ImageDescriptor.getMissingImageDescriptor(), ImageDescriptor.getMissingImageDescriptor());\n        templateList.add(entry);\n        templateList.add(entry1);\n        templateGroup.addAll(templateList);\n        List rootList = new ArrayList();\n        rootList.add(toolGroup);\n        rootList.add(templateGroup);\n        root.addAll(rootList);\n        final PaletteViewer v = new PaletteViewer();\n        v.setPaletteRoot(root);\n        v.createControl(parent);\n        v.addSelectionChangedListener(new ISelectionChangedListener() {\n\n            public void selectionChanged(SelectionChangedEvent event) {\n                System.err.println(\"selectionChanged \" + v.getActiveTool());\n            }\n        });\n        deleteAction.setSelectionProvider(viewer);\n        viewer.getEditDomain().setPaletteViewer(v);\n        viewer.addSelectionChangedListener(new ISelectionChangedListener() {\n\n            public void selectionChanged(SelectionChangedEvent event) {\n                System.err.println(event.getSelection());\n                deleteAction.update();\n            }\n        });\n        viewer.getEditDomain().getCommandStack().addCommandStackEventListener(new CommandStackEventListener() {\n\n            public void stackChanged(CommandStackEvent event) {\n                undoAction.setEnabled(viewer.getEditDomain().getCommandStack().canUndo());\n                redoAction.setEnabled(viewer.getEditDomain().getCommandStack().canRedo());\n            }\n        });\n    }\n", "label": 0, "substitutes": {"copy": ["clone", "delete", "Cop", "cat", " cp", "replace", "map", "export", "cp", "write", "csv", "slice", "paste", "rm", "create", "Copy", "upload", "download", "transfer", "read", " mirror", " duplicate", "load", " Copy", "save", "add", "move", "sync"], "sourceFile": ["inputLine", "inputPage", "ourcefile", "ourcePage", "ourceFile", "sourcefile", "inputFile", "ourceFilename", "ourceLine", "SourceFilename", " sourceLine", " sourceFilename", "inputfile", "sourceFilename", "SourceLine", " sourcefile", "SourcePage", " sourcePage", "SourceFile", "sourcePage", "Sourcefile", "sourceLine"], "destinationFile": ["destinationfile", "destinatedPlace", "destinationsfile", "declinatorFile", "destinationPath", "destinatorFile", "destinatedfile", "estinatedFilename", "estinationFile", "destinatePlace", "destrativePlace", "destinatorPath", "estinationPlace", "destinationsPlace", "declinationPlace", "estinatedFile", "declinationFilename", "declinatorPlace", "destinoFilename", "destrativeFile", "destinatedFilename", "declinationPath", "declinatorFilename", "destinatePath", "estinatedPlace", "destinatorPlace", "destinatedFile", "destinationPlace", "destinationFilename", "estinationfile", "declinationFile", "estinationFilename", "destinoFile", "destinationsFilename", "destinatorFilename", "destrativePath", "estinatedfile", "declinatorPath", "destinofile", "destrativeFilename", "destinoPlace", "destinationsFile", "destinateFile", "destinateFilename"], "sourceFileChannel": ["sourceFileApplication", "sourceBaseHandler", "ourceEntrychannel", "sourceBaseChuck", "ourceEntryChan", "sourceBlockConnection", "srcFilechannel", "sourceStreamChan", "sourceFilechannel", "srcFileChannel", "sourceStreamChuck", "sourceEntrychannel", "srcBlockchannel", "sourceEntryChannel", "sourceStreamchannel", "sourceBlockchannel", "sourceFileChuck", "sourceBaseChannel", "sourceEntryConnection", "sourceEntryChan", "ourceFileChannel", "srcBlockConnection", "sourceFileHandler", " sourceFileHandler", "sourceStreamChannel", "sourceByteEntry", "srcBlockEntry", "srcFileEntry", "sourceStreamApplication", "sourceByteConnection", "sourceLineEntry", "ourceFileChan", " sourceFileApplication", "ourceFilechannel", "sourceLineConnection", "ourceFileConnection", "sourceLineChan", "sourceFileChan", "sourceFileConnection", "sourceBytechannel", "sourceBlockEntry", "sourceByteChannel", "sourceBaseApplication", "sourceFileEntry", "sourceLineChannel", "sourceBlockChannel", "srcBlockChannel", "sourceStreamHandler", "ourceEntryChannel", "sourceLinechannel", " sourceFileChuck", "srcFileConnection", "sourceStreamConnection", "ourceEntryConnection"], "destinationFileChannel": ["destinationDirectoryChan", "destinatorFilesChannel", "destinatorFilesCh", "destmentResourceManager", "destmentPageContext", "destmentResourcechannel", "destmentFileContext", "destinationDirectoryChannel", "destinationResourcechannel", "destinationPageChan", "destinationFileConnection", "destinationfileManager", "destinationPageContext", "destinationChannelContext", "destinationFilesChan", "destinationfilechannel", "destinationfileConnection", "destinatorFileCh", "destinationChannelCh", "destinationChannelChannel", "destinationResourceChan", "destmentResourceChan", "destinationPageChannel", "destinatorFileConnection", "destinationFileContext", "destinationFileCh", "destinationResourceChannel", "destmentResourceChannel", "destinationDirectoryManager", "destinationPageEntry", "destinationChannelEntry", "destinatorFilesConnection", "destmentPageEntry", "destinatorFileChannel", "destinationFileManager", "destinatorFilesChan", "destinationDirectorychannel", "destmentFilechannel", "destinationfileChannel", "destinationFileChan", "destinationFileEntry", "destinationFilesChannel", "destmentFileManager", "destmentFileChan", "destmentFileEntry", "destinationResourceManager", "destinationFilechannel", "destinationChannelConnection", "destinatorFileChan", "destmentFileChannel", "destinationfileChan", "destinationfileCh", "destmentPageChan", "destinationFilesConnection", "destinationfileContext", "destinationChannelChan", "destinationFilesCh", "destinationfileEntry", "destmentPageChannel"]}}
{"id1": "6371580", "id2": "494226", "code1": "    public void insertDomain(final List<String> domains) {\n        try {\n            connection.setAutoCommit(false);\n            new ProcessEnvelope().executeNull(new ExecuteProcessAbstractImpl(connection, false, false, true, true) {\n\n                @Override\n                public void executeProcessReturnNull() throws SQLException {\n                    psImpl = connImpl.prepareStatement(sqlCommands.getProperty(\"domain.add\"));\n                    Iterator<String> iter = domains.iterator();\n                    String domain;\n                    while (iter.hasNext()) {\n                        domain = iter.next();\n                        psImpl.setString(1, domain);\n                        psImpl.setString(2, domain.toLowerCase(locale));\n                        psImpl.executeUpdate();\n                    }\n                }\n            });\n            connection.commit();\n            cmDB.updateDomains(null, null);\n        } catch (SQLException sqle) {\n            log.error(sqle);\n            if (connection != null) {\n                try {\n                    connection.rollback();\n                } catch (SQLException ex) {\n                }\n            }\n        } finally {\n            if (connection != null) {\n                try {\n                    connection.setAutoCommit(true);\n                } catch (SQLException ex) {\n                    log.error(ex);\n                }\n            }\n        }\n    }\n", "code2": "    public static void main(String[] args) throws Exception {\n        String linesep = System.getProperty(\"line.separator\");\n        FileOutputStream fos = new FileOutputStream(new File(\"lib-licenses.txt\"));\n        fos.write(new String(\"JCP contains the following libraries. Please read this for comments on copyright etc.\" + linesep + linesep).getBytes());\n        fos.write(new String(\"Chemistry Development Kit, master version as of \" + new Date().toString() + \" (http://cdk.sf.net)\" + linesep).getBytes());\n        fos.write(new String(\"Copyright 1997-2009 The CDK Development Team\" + linesep).getBytes());\n        fos.write(new String(\"License: LGPL v2 (http://www.gnu.org/licenses/old-licenses/gpl-2.0.html)\" + linesep).getBytes());\n        fos.write(new String(\"Download: https://sourceforge.net/projects/cdk/files/\" + linesep).getBytes());\n        fos.write(new String(\"Source available at: http://sourceforge.net/scm/?type=git&group_id=20024\" + linesep + linesep).getBytes());\n        File[] files = new File(args[0]).listFiles(new JarFileFilter());\n        for (int i = 0; i < files.length; i++) {\n            if (new File(files[i].getPath() + \".meta\").exists()) {\n                Map<String, Map<String, String>> metaprops = readProperties(new File(files[i].getPath() + \".meta\"));\n                Iterator<String> itsect = metaprops.keySet().iterator();\n                while (itsect.hasNext()) {\n                    String section = itsect.next();\n                    fos.write(new String(metaprops.get(section).get(\"Library\") + \" \" + metaprops.get(section).get(\"Version\") + \" (\" + metaprops.get(section).get(\"Homepage\") + \")\" + linesep).getBytes());\n                    fos.write(new String(\"Copyright \" + metaprops.get(section).get(\"Copyright\") + linesep).getBytes());\n                    fos.write(new String(\"License: \" + metaprops.get(section).get(\"License\") + \" (\" + metaprops.get(section).get(\"LicenseURL\") + \")\" + linesep).getBytes());\n                    fos.write(new String(\"Download: \" + metaprops.get(section).get(\"Download\") + linesep).getBytes());\n                    fos.write(new String(\"Source available at: \" + metaprops.get(section).get(\"SourceCode\") + linesep + linesep).getBytes());\n                }\n            }\n            if (new File(files[i].getPath() + \".extra\").exists()) {\n                fos.write(new String(\"The author says:\" + linesep).getBytes());\n                FileInputStream in = new FileInputStream(new File(files[i].getPath() + \".extra\"));\n                int len;\n                byte[] buf = new byte[1024];\n                while ((len = in.read(buf)) > 0) {\n                    fos.write(buf, 0, len);\n                }\n            }\n            fos.write(linesep.getBytes());\n        }\n        fos.close();\n    }\n", "label": 0, "substitutes": {"insertDomain": ["defaultHost", "insertHost", "insertCountry", "insertRule", "defaultDomain", "defaultCountry", " InsertHost", " InsertCountry", "defaultRule", " insertCountry", " InsertDomain", " insertHost", " InsertRule", " insertRule"], "domains": ["domsains", "Dominals", "domins", "Domains", "Domies", "dies", " domales", "Domain", "dains", "domsins", "Domins", " domins", " dominals", " domies", "dins", "domsales", "dain", "domales", "Domales", "domsinals", "dominals", "domies"], "psImpl": ["PsImpl", "persBuilder", " psimpl", "ppsImpl", "tsIm", "tsSimple", " psHelper", "psIm", "PsRepl", " psSimple", "tsImpl", "apsImpl", "PSIm", "ppsBuilder", " psBuilder", "psHelper", "Psimpl", "apsIm", "PSRepl", "PSImpl", " psRepl", "persHelper", "ppsHelper", "PsIm", "persimpl", "psimpl", "PSimpl", "psSimple", "psBuilder", "psRepl", "apsimpl", "apsSimple", "persImpl", "tsimpl", "ppsimpl", " psIm"], "iter": ["gener", "li", "ger", "cer", "nr", "ner", "former", "ptr", "maker", "inv", "gen", "walker", "vis", "i", "iner", "upper", "inter", "Iter", "valid", "vers", "outer", "ipper", "iterator", "loop", "loc", "her", "iz", "older", "its", "oper", "ind", "ter", "ator", "iller", "hex", "fer", "list", "ser", "der", "coll", "ir", "it", "ip", "ori", "ver", "er", "iv"], "domain": ["module", "address", "sample", "description", "string", "proxy", "file", "field", "fine", "term", "str", "id", "resource", "property", "plain", "part", "remote", "zone", "dn", "AIN", "grain", "rule", "url", "product", "index", "range", "Domain", "node", "pattern", "label", "host", "title", "bean", "uri", "server", "qualified", "prefix", "net", "table", "message", "example", "result", "name", "country", "die", "dom", "currency", "value", "tip", "fr", "directory", "cmd", "unit", "origin", "display", "command"]}}
{"id1": "4223002", "id2": "8164056", "code1": "    public String getPasswordMD5() {\n        try {\n            MessageDigest algorithm = MessageDigest.getInstance(\"MD5\");\n            algorithm.reset();\n            algorithm.update(password.getBytes());\n            byte messageDigest[] = algorithm.digest();\n            StringBuffer hexString = new StringBuffer();\n            for (int i = 0; i < messageDigest.length; i++) {\n                hexString.append(Integer.toHexString(0xFF & messageDigest[i]));\n            }\n            return hexString.toString();\n        } catch (NoSuchAlgorithmException nsae) {\n        }\n        return null;\n    }\n", "code2": "    private String encode(String str) {\n        StringBuffer buf = new StringBuffer();\n        try {\n            MessageDigest md5 = MessageDigest.getInstance(\"MD5\");\n            md5.update(str.getBytes());\n            byte bytes[] = md5.digest();\n            for (int i = 0; i < bytes.length; i++) {\n                String s = Integer.toHexString(bytes[i] & 0xff);\n                if (s.length() == 1) {\n                    buf.append(\"0\");\n                }\n                buf.append(s);\n            }\n        } catch (Exception ex) {\n        }\n        return buf.toString();\n    }\n", "label": 1, "substitutes": {"getPasswordMD5": ["getPasswordSM6", "getPasswordmd5", "getPasswordSM4", "getTokenSM512", "getPasswordMD512", "getPasswordHS5", "getPasswordmd4", "getPasswordSM512", "getTokenMD4", "getPasswordHS512", "getPasswordHS6", "getPasswordMD4", "getTokenSM5", "getTokenSM4", "getPasswordSM5", "getPasswordmd512", "getTokenSM6", "getTokenMD512", "getTokenMD5", "getPasswordMD6", "getTokenMD6", "getPasswordmd6", "getPasswordHS4"], "algorithm": ["alphgebra", " Almother", "malgorith", "alric", "malgorithm", " already", "malchemist", "eargebra", "approgorith", "halignment", "omalgo", "alphric", "Algo", "Algorithm", "thechemist", "halgorith", "themother", "omalgorith", "eargorithm", "halric", " algo", " aluristic", "alphgorithm", "approready", "earric", "malmother", "halgebra", "algo", "eargorith", "Algorith", " algorith", "Aluristic", "thegorithm", "alignment", "already", " Alchemist", "alphgorith", "halready", "omaluristic", "alchemist", "approignment", " Algorithm", "approgorithm", " Algorith", "aluristic", "almother", "algorith", "halgorithm", "thegorith", "algebra", " alignment", "omalgorithm"], "messageDigest": ["messagedigests", "messageDigist", "messageAndester", "MessagedigEST", "messageDigested", "messagedigested", "Messagedigse", "messageDse", "Messagedigest", "messageMixests", "messageDriist", "messageDests", "messagedigEST", "messageAndse", "messageMixse", "messageDigse", " messagedigester", "messageDriester", "messageDrise", "messageDigitalEST", "MessageDigest", "messageDesignester", "messageDigests", "MessageDigse", "MessageDigests", "messageMixEST", "messageDigester", "messageDigEST", "MessageDigester", "messageAndest", "messageDesignest", "messagedigest", "messageMixest", "messageAndist", " messageDigester", "messageDriest", "messagedigist", "Messagedigests", "messageDigitalested", "messageDigitalest", "messageDEST", "messageDigitalester", " messagedigested", "Messagedigester", " messagedigEST", "messageDesignEST", "messageDest", "messageDesignested", " messagedigest", " messageDigested", " messageDigEST", "MessageDigist", "MessageDigEST", "messagedigse", "Messagedigist", "messagedigester"], "hexString": ["octstring", "hexstring", "octString", "stringBuffer", "httpsString", "hexBuffer", "exScreen", "exstring", "httpsstring", " hexBuffer", "textBuffer", "textStatement", "stringstring", " hexstring", "stringArray", "httpsBuffer", "httpsScreen", "exBuffer", " hexArray", "textString", "exString", "httpsArray", "hexScreen", "stringString", "textArray", " hexStatement", "hexStatement", "octScreen", "exArray", "octArray", "hexArray", "httpsStatement"], "i": ["ti", "ji", "I", "ic", "zi", "li", "gi", "io", "my", "point", "is", "di", "ii", "in", "\u0438", "j", "span", "phi", "ri", "mi", "si", "c", "ex", "n", "a", "pi", "ci", "m", "ski", "cli", "yi", "uri", "o", "set", "loop", "ms", "multi", "q", "init", "xi", "ie", "ind", "ei", "u", "gu", "client", "x", "qi", "im", "key", "chain", "ai", "ix", "sim", "ip", "it", "us", "bi", "ui", "hi", "y"]}}
{"id1": "23296117", "id2": "22035737", "code1": "    public static void extractNativeLib(String sysName, String name, boolean load, boolean warning) throws IOException {\n        String fullname = System.mapLibraryName(name);\n        String path = \"native/\" + sysName + \"/\" + fullname;\n        URL url = Thread.currentThread().getContextClassLoader().getResource(path);\n        if (url == null) {\n            if (!warning) {\n                logger.log(Level.WARNING, \"Cannot locate native library: {0}/{1}\", new String[] { sysName, fullname });\n            }\n            return;\n        }\n        URLConnection conn = url.openConnection();\n        InputStream in = conn.getInputStream();\n        File targetFile = new File(getExtractionDir(), fullname);\n        OutputStream out = null;\n        try {\n            if (targetFile.exists()) {\n                long targetLastModified = targetFile.lastModified();\n                long sourceLastModified = conn.getLastModified();\n                if (targetLastModified + 1000 > sourceLastModified) {\n                    logger.log(Level.FINE, \"Not copying library {0}. Latest already extracted.\", fullname);\n                    return;\n                }\n            }\n            out = new FileOutputStream(targetFile);\n            int len;\n            while ((len = in.read(buf)) > 0) {\n                out.write(buf, 0, len);\n            }\n            in.close();\n            in = null;\n            out.close();\n            out = null;\n            targetFile.setLastModified(conn.getLastModified());\n        } catch (FileNotFoundException ex) {\n            if (ex.getMessage().contains(\"used by another process\")) {\n                return;\n            }\n            throw ex;\n        } finally {\n            if (load) {\n                System.load(targetFile.getAbsolutePath());\n            }\n            if (in != null) {\n                in.close();\n            }\n            if (out != null) {\n                out.close();\n            }\n        }\n        logger.log(Level.FINE, \"Copied {0} to {1}\", new Object[] { fullname, targetFile });\n    }\n", "code2": "    private static void loadMappings(Configuration cfg) {\n        try {\n            Enumeration en = LoadingUtils.getResources(MAPPINGS_FILE);\n            while (en.hasMoreElements()) {\n                URL url = (URL) en.nextElement();\n                logger.info(\"Found mapping module \" + url.toExternalForm());\n                InputStream inputStream = null;\n                try {\n                    inputStream = url.openStream();\n                    HibConfiguration hm = loadModuleMappings(inputStream);\n                    configureModuleMappings(cfg, hm.getSessionFactory());\n                } catch (IOException e) {\n                    logger.warn(\"Could not load mappings file \\\"\" + url.toExternalForm() + \"\\\"\", e);\n                } catch (JAXBException e) {\n                    logger.warn(\"Unable to instantiate JAXBContext \", e);\n                } finally {\n                    try {\n                        if (inputStream != null) inputStream.close();\n                    } catch (IOException e) {\n                        logger.debug(e);\n                    }\n                }\n            }\n        } catch (IOException e) {\n            logger.warn(\"Could not find any mappings file hibernate.mappings.xml\", e);\n        }\n    }\n", "label": 0, "substitutes": {"extractNativeLib": ["extractBaseLibrary", "extractBaselib", "extractnativeLib", "extractedNativeLib", "extractednativeFile", "extractnativelib", "extractednativeLibrary", "extractInternallib", "extractInternalLibrary", "extractedNativeLibrary", "extractednativeLib", "extractBaseLib", "extractedNativelib", "extractInternalFile", "extractInternalLib", "extractNativeLibrary", "extractnativeFile", "extractBaseFile", "extractnativeLibrary", "extractednativelib", "extractedNativeFile", "extractNativeFile", "extractNativelib"], "sysName": ["ysType", "systemN", "sysNames", "ysN", "nsNames", "synMap", "sysHandle", "ysMap", " sysN", " sysname", "sysType", "sysMap", "synType", "systemname", "systemType", "systemNames", "sysname", "synName", " sysNames", " sysHandle", "systemName", "systemMap", "ysName", "systemHandle", "nsHandle", "ysNames", "synname", "ysname", "nsName", "nsname", "sysN"], "name": ["local", "module", "nam", "string", "file", "term", "id", "mod", "resource", "part", "ame", "loader", "nm", "ename", "run", "filename", "names", "NAME", "named", "n", "alias", "a", "title", "about", "base", "s", "unknown", "root", "create", "Name", "brain", "data", "me", "source", "version", "default", "info", "type", "word"], "load": ["local", "force", "lock", "show", "help", "store", "debug", "test", "loader", "update", "loaded", "start", "leaf", "Load", "call", "boot", "check", "library", "write", "label", "oad", "link", "require", "dump", "play", "connect", "fail", "enter", "init", "create", "parse", "read", "download", "util", "register", "loading", "remove", "include", "save", "loads", "use", "LOAD", "warn", "cache", "hold", "sync", "hack", "launch", "install"], "warning": ["starting", "ping", "force", "function", "fw", "WARNING", "flash", "saving", "only", "help", "getting", "debug", "aw", "success", "weak", "we", "speaking", "console", "web", "yellow", "message", "WARN", "Warning", "pretty", "comment", "error", "loading", "war", "ew", "value", "testing", "writing", "very", "warn", "default", "info", "setting", "usage", "wa", "w"], "fullname": ["shortname", "shortName", "fullyame", " fullName", "fullame", "fullyName", "localfilename", "flatname", " fullpath", "shortpath", "localpath", "shortn", "longName", "Fullfilename", "flatpath", "longpath", "fullyvalue", "fullyNAME", "localName", "Fullpath", "fullNAME", "shortNAME", " fullame", "Fullvalue", "FullName", "flatName", "fullvalue", "fullnamed", "fullfilename", "longNAME", "flatfilename", "Fullname", "fullynamed", "longvalue", "longfilename", "fullyname", " fullnamed", "longn", "longnamed", "fulln", "longname", "fullpath", "localname", "fullypath", " fulln", " fullfilename", "longame", "fullName"], "path": ["local", "where", "near", "pt", "dir", "file", "string", "p", "pro", "transform", "test", "up", "php", "route", "w", "filename", "ath", "PATH", "pattern", "link", "uri", "def", "trace", "prefix", "th", "root", "raw", "exp", "spec", "patch", "hex", "Path", "pointer", "image", "key", "chain", "cmd", "ref", "full", "this", "prop", "partial"], "url": ["build", "sl", "gl", "lr", "err", "fl", "ret", "Url", "li", "abs", "str", "nl", "resource", "channel", "loader", "ls", "open", "norm", "r", "dl", "atl", "ll", "res", "host", "https", "ssl", "link", "f", "rel", "URL", "job", "web", "loc", "raw", "ur", "user", "req", "cert", "impl", "client", "bel", "util", "http", "socket", "rl", "addr", "mount", "rect", "l", "xml", "mb", "org", "con", "lb"], "conn": ["mc", "cur", "cmp", "serv", "canon", "ctr", "str", "ws", "conv", "obj", "Conn", "nt", "msg", "ls", "pg", "open", "conf", "comm", "cp", "ctx", "c", "pas", "connection", "res", "ssl", "close", "cc", "col", "cf", "config", "ct", "connect", "iw", "cn", "sql", "ch", "cert", "reg", "client", "cm", "sync", "nc", "socket", "cont", "addr", "exec", "pc", "cb", "enc", "handle", "cmd", "resp", "jp", "con"], "in": ["ln", "mc", "serv", "again", "ic", "en", "io", "is", "inf", "st", "cin", "from", "re", "r", "ini", "IN", "inc", "i", "n", "inner", "inside", "m", "ar", " din", "on", "iter", "net", "din", "init", "oin", "all", "input", "mm", "ind", "read", "ry", "gin", "In", "source", "or", "ai", "el", "ins", "rin", "it", "info", "bin", "nin", "ain", "con", "inn"], "targetFile": ["thisPath", " targetLog", "targetLog", "sourceFile", "topPath", " targetFolder", "saveFile", " targetFilename", " targetFull", "sourcefile", "targetFilename", "thisPage", "sourcePath", "saveEntity", " targetPage", "toPage", " targetFILE", "saveFolder", "TargetPath", "TargetLog", "argetfile", " targetfile", "TargetFile", "argetLog", "argetFilename", "thisFile", "TargetPage", "toFilename", "targetfile", "proxyEntity", "targetEntity", "argetFull", "topfile", "proxyFile", "sourceFilename", "targetFILE", "proxyFILE", "toFile", "targetFull", "topFilename", "TargetFILE", "TargetFilename", "tofile", "targetPath", "argetFILE", "targetFolder", " targetEntity", "Targetfile", "saveFILE", "sourcePage", "topFile", "thisfile", "targetPage", "argetFile", "proxyFolder", " targetPath", "TargetFull"], "out": ["again", "t", "conv", "ot", "aos", "output", "conf", "auto", "ns", "ch", "all", "comment", "con", "ins", "pos", "bin", "pool", "w", "err", "v", "at", "p", "OU", "io", "oe", "up", "ion", "flush", "c", "ex", "check", "write", "o", "net", "cn", "mit", "client", "one", "or", "chain", "sum", "cmd", "ne", "outs", "can", "log", "obj", "other", "to", "n", "null", "inner", "outer", "result", "init", "user", "writer", "OUT", "Out", "cache", "it", "ou", "cos", "nt", "no", "inv", "boot", "end", "oss", "buf", "co", "os", "timeout"], "targetLastModified": ["targetMaxModured", "targetMaxReifier", "targetMaxModify", "targetLastModed", "targetLastmodified", "targetlastModified", "targetLastLoadified", "targetLastLoadify", "targetLastmodured", "targetLastQualmodified", "targetLastQualifier", "targetLastMsed", "targetLastMsified", "targetLastmodifier", "targetlastQualifier", "targetMaxReured", "targetLastReified", "targetLastQualified", "targetMaxReified", "targetLastQualed", "targetLastMsifier", "targetLastReured", "targetlastQualmodified", "targetlastModifier", "targetLastLoadured", "targetlastQualified", "targetLastModmodified", "targetMaxModifier", "targetLastMsmodified", "targetLastModured", "targetLastReifier", "targetLastmodify", "targetlastModed", "targetLastModify", "targetLastReify", "targetLastLoadifier", "targetlastQualed", "targetLastModifier", "targetMaxModified", "targetlastModmodified", "targetMaxReify"], "sourceLastModified": ["sourceLastMsification", "sourceLastModTime", "sourceLastModification", "sourceLastTrify", "sourceLastTrification", "sourceLastmodified", "sourceLastmodification", "sourceLastmodTime", "sourcelastTrified", "sourceLastMsTime", "sourcelastTrification", "sourceLastTimed", "sourceLastModsmodified", "sourcelastTrify", "sourceLastModsified", "sourceLastMsify", "sourceLastTimified", "sourcelastModTime", "sourceLastModsification", "sourcelastModify", "sourceLastMsified", "sourceLastmodify", "sourceLastTimification", "sourcelastModified", "sourceLastModify", "sourceLastModmodified", "sourceLastTrTime", "sourceLastModsed", "sourceLastTrified", "sourceLastTimmodified", "sourceLastModed", "sourcelastModification", "sourcelastTrTime"], "len": ["ln", "val", "bytes", "fl", "elt", "en", "ld", "str", "nl", "length", "fun", "lf", "count", "t", "nt", "num", "ls", "no", "lan", "L", "dl", "n", "ll", "pl", "vec", "fin", "syn", "seq", "end", "cap", "all", "Len", "lim", "hl", "le", "el", "pad", "l", "coll", "pos", "buf", "mat", "size"]}}
{"id1": "22401746", "id2": "3631989", "code1": "    public String sendRequest(java.lang.String servletName, java.lang.String request) {\n        String reqxml = \"\";\n        org.jdom.Document retdoc = null;\n        String myurl = java.util.prefs.Preferences.systemRoot().get(\"serverurl\", \"\");\n        String myport = java.util.prefs.Preferences.systemRoot().get(\"portno\", \"8080\");\n        if (this.serverURL == null) {\n            try {\n                java.net.URL codebase = newgen.presentation.NewGenMain.getAppletInstance().getCodeBase();\n                if (codebase != null) serverURL = codebase.getHost(); else serverURL = \"localhost\";\n            } catch (Exception exp) {\n                exp.printStackTrace();\n                serverURL = \"localhost\";\n            }\n            newgen.presentation.component.IPAddressPortNoDialog ipdig = new newgen.presentation.component.IPAddressPortNoDialog(myurl, myport);\n            ipdig.show();\n            serverURL = myurl = ipdig.getIPAddress();\n            myport = ipdig.getPortNo();\n            java.util.prefs.Preferences.systemRoot().put(\"serverurl\", serverURL);\n            java.util.prefs.Preferences.systemRoot().put(\"portno\", myport);\n            System.out.println(serverURL);\n        }\n        try {\n            System.out.println(\"http://\" + serverURL + \":\" + myport + \"/newgenlibctxt/\" + servletName);\n            java.net.URL url = new java.net.URL(\"http://\" + serverURL + \":\" + myport + \"/newgenlibctxt/\" + servletName);\n            java.net.URLConnection urlconn = (java.net.URLConnection) url.openConnection();\n            urlconn.setDoOutput(true);\n            urlconn.setRequestProperty(\"Content-type\", \"text/xml; charset=UTF-8\");\n            java.io.OutputStream os = urlconn.getOutputStream();\n            String req1xml = request;\n            java.util.zip.CheckedOutputStream cos = new java.util.zip.CheckedOutputStream(os, new java.util.zip.Adler32());\n            java.util.zip.GZIPOutputStream gop = new java.util.zip.GZIPOutputStream(cos);\n            java.io.OutputStreamWriter dos = new java.io.OutputStreamWriter(gop, \"UTF-8\");\n            System.out.println(req1xml);\n            dos.write(req1xml);\n            dos.flush();\n            dos.close();\n            System.out.println(\"url conn: \" + urlconn.getContentEncoding() + \"  \" + urlconn.getContentType());\n            java.io.InputStream ios = urlconn.getInputStream();\n            java.util.zip.CheckedInputStream cis = new java.util.zip.CheckedInputStream(ios, new java.util.zip.Adler32());\n            java.util.zip.GZIPInputStream gip = new java.util.zip.GZIPInputStream(cis);\n            java.io.InputStreamReader br = new java.io.InputStreamReader(gip, \"UTF-8\");\n            retdoc = (new org.jdom.input.SAXBuilder()).build(br);\n        } catch (java.net.ConnectException conexp) {\n            javax.swing.JOptionPane.showMessageDialog(null, newgen.presentation.NewGenMain.getAppletInstance().getMyResource().getString(\"ConnectExceptionMessage\"), \"Critical error\", javax.swing.JOptionPane.ERROR_MESSAGE);\n        } catch (Exception exp) {\n            exp.printStackTrace(System.out);\n        }\n        System.out.println(reqxml);\n        return \"\";\n    }\n", "code2": "    public void run() {\n        URL url;\n        try {\n            url = new URL(\"http://localhost:8080/glowaxes/dailytrend.jsp\");\n            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n            while ((str = in.readLine()) != null) {\n            }\n            in.close();\n        } catch (MalformedURLException e) {\n        } catch (IOException e) {\n        }\n    }\n", "label": 1, "substitutes": {"sendRequest": [" sendCommand", "SendPost", " sendrequest", "submitPost", "SendCommand", "submitRequest", "submitCommand", "sendrequest", "sendCommand", "submitrequest", "SendRequest", "Sendrequest", "sendPost", " sendPost"], "servletName": ["servletsNames", "serviceantName", "servantname", "servletsPath", "servLETName", "serviceletName", "ServletName", "servletNames", "serviceantFamily", "servletsName", "serviceletFamily", "servletNAME", "servidgetname", "servenderNAME", "ServLETName", " servletNames", " servletsNAME", "serviceantNAME", "serviceletname", "servLETFamily", "servantFamily", "servletFamily", "servletePath", "ServLETSimple", " servletsPath", "Servletname", "servletname", "servidgetSimple", "servantSimple", "servenderFamily", "servidgetName", "servenderName", "servletsNAME", "servendername", "servLETNames", "servLETInfo", "servleteName", "ServletInfo", "ServLETname", " servletsNames", "servLETSimple", "servleteNames", " servletPath", "ServLETInfo", "servletSimple", "serviceantname", "ServletSimple", "servletPath", "serviceletNAME", "servidgetInfo", "servletInfo", " servletsName", "servantNAME", "servleteNAME", "servLETPath", "servantName", "servantInfo", " servletNAME", "servLETNAME", "servLETname"], "request": ["text", "send", "address", "submit", "string", "post", "transform", "print", "question", "output", "attribute", "work", "query", "accept", "express", "message", "argument", "result", "get", "raw", "q", "req", "create", "input", "document", "Request", "frame", "application", "report", "value", "password", "QUEST", "hello", "quest", "response", "execute", "xml", "reply", "body", "command"], "reqxml": ["requjson", "requestjson", "questxml", "requxml", "requml", "requestml", "reqml", "questml", "reqjson", "questjson", "requestxml"], "retdoc": [" retdec", " defdec", " defdoc", "Retdec", "retDoc", " defDoc", "Retdoc", "retdec", " retDoc", "RetDoc"], "myurl": ["mineUrl", "MyURL", "serverurl", "Myurl", "mystr", "mistr", "MYurl", "missl", "someuri", "amiURL", "veryuri", "someurl", "amibase", "amigl", "MYURL", "veryport", "mygl", "serverstr", "serverssl", "mineurl", "amiurl", "someUrl", "MYgl", "serverUrl", "mybase", "miUrl", "Mygl", "minessl", "myUrl", "myURL", "veryurl", "someport", "veryUrl", "miurl", "myssl", "myuri", "serverport", "minestr", "MYbase", "Mybase", "serveruri"], "myport": ["myPORT", "miPort", "miphone", "Mypport", "mipod", " myPort", "miPORT", " mypport", "yourPort", "mipport", "MyPORT", "tmpPORT", "yourPORT", " myPORT", " myphone", "yourport", "myports", "mywidth", "mypport", "MyPort", "Mypod", "miwidth", " myports", "myphone", " mywidth", "myPort", "mypod", "Myports", "tmpports", "miport", "Myphone", "Mywidth", "Myport", "yourpod", "tmpport", "miports", "tmppport"], "codebase": ["codeBase", "codease", "codebal", "cybase", "createBase", "createbas", "Codebased", "createbase", "codebas", "cybal", "pagebased", "createase", " codebased", "pagebas", " codease", "pageBase", "cybind", "codebind", " codebal", "codebased", "pagebase", "cyBase", "citybind", " codebind", "citybal", "cityBase", " codebas", "Codease", "Codebas", "citybase", "CodeBase", "Codebase", " codeBase"], "serverURL": [" serverSSL", "serverurl", "ServerUrl", " serverUrl", "erverSSL", "clientURL", "serER", "serverID", "browserER", "erverALL", "Serverurl", "serURL", "erverOUT", " serverCL", "browserALL", "siteURL", "serverRL", "serverALL", "ServerER", "erverER", "erverUrl", "siteUrl", "serALL", " serverHTTP", "erverCL", "serUrl", "browserUR", "erverRL", " serverID", "browserID", "clientHTTP", " serverER", "ServerUR", "erverURI", "ServerRL", "serverUrl", "serUR", " serverALL", " serverRL", "ServerURI", "serverURI", "erverUR", "erverurl", "browserUrl", "serCL", "erverURL", "clientID", "ServerURL", " serverUR", "serverOUT", "erverID", "serverER", "erverHTTP", " serverOUT", "serverSSL", "serverUR", "clientUrl", "siteurl", "serURI", "browserSSL", "serverCL", "browserURL", "serverHTTP", " serverurl", "siteOUT"], "ipdig": ["ippmd", "IPDig", "ippdel", "phpDig", "ippbad", "capDig", " ipDig", "hipdel", "cpDig", " ipbad", "phpbad", "ippcd", "phpdig", "hipDig", "capdel", "hipdig", "ippdig", "capdig", "lipDig", "ipdel", "ipcd", "hipdiv", "ipmd", "IPdig", "phpcd", " ipmd", "ipdb", "ippDig", "ipDig", " ipdd", "capdiv", "lipdb", "ippdd", " ipdb", "lipdig", "cpdd", "ipbad", "ipdiv", "cpdig", " ipcd", "ippdiv", "cpmd", "ipdd", "IPdb"], "url": ["sl", "gl", "proxy", "file", "Url", "log", "str", "nl", "browser", "loader", "ls", "open", "r", "dl", "dll", "ll", "https", "ssl", "link", "f", "uri", "URL", "web", "rawl", "ur", "conn", "un", "deb", "u", "util", "http", "www", "rl", "uu", "mount", "el", "pkg", "l", "ob", "au", "uf", "il", "org", "ul"], "urlconn": ["Urlcmd", "connconn", "urlj", "webcon", "webconn", " urlj", "urlcon", "lconn", "webConn", "llcol", "llConn", "lConn", "lcol", "httplink", "urlcmd", "urllink", "llcon", "urlfin", "httpfin", "connlink", "weblink", " urlcon", "llconn", "urlcol", "httpConn", " urlcmd", "lcon", "Urlcon", "lj", "connConn", " urlfin", " urlcol", " urlConn", "Urlj", "httpconn", "Urlconn", "lcmd", "httpcon", "conncon", "urlConn", "webfin"], "os": ["js", "cms", "et", "des", "io", "is", "ws", "ot", "OS", "ls", " bos", "rs", "cs", "res", "fs", "o", "as", "ms", "osi", "ds", "sys", "soc", "socket", "Os", "pos", "us", "ss"], "req1xml": ["reqxmlhtml", "req2ml", "request1ml", "req1x", "req1ml", "request1x", "req2xml", "request1xml", "request2html", "req01x", "reqxmlx", "req01ml", "request2x", "req1html", "request2xml", "reqxmlml", "req2html", "req01xml", "req01html", "reqxmlxml", "request2ml", "req2x", "request1html"], "cos": ["cms", "oses", "oos", " Os", "oes", "des", " ox", "uts", " om", "oe", "is", "ox", "ous", "aos", " bos", " outs", "oops", "cs", "osi", "oss", " des", " ups", " bout", " los", " cout", " nos"]}}
{"id1": "17724879", "id2": "6987642", "code1": "    public byte[] getDigest(OMAttribute attribute, String digestAlgorithm) throws OMException {\n        byte[] digest = new byte[0];\n        if (!(attribute.getLocalName().equals(\"xmlns\") || attribute.getLocalName().startsWith(\"xmlns:\"))) try {\n            MessageDigest md = MessageDigest.getInstance(digestAlgorithm);\n            md.update((byte) 0);\n            md.update((byte) 0);\n            md.update((byte) 0);\n            md.update((byte) 2);\n            md.update(getExpandedName(attribute).getBytes(\"UnicodeBigUnmarked\"));\n            md.update((byte) 0);\n            md.update((byte) 0);\n            md.update(attribute.getAttributeValue().getBytes(\"UnicodeBigUnmarked\"));\n            digest = md.digest();\n        } catch (NoSuchAlgorithmException e) {\n            throw new OMException(e);\n        } catch (UnsupportedEncodingException e) {\n            throw new OMException(e);\n        }\n        return digest;\n    }\n", "code2": "    public static String encodePassword(String password) {\n        MessageDigest md;\n        try {\n            md = MessageDigest.getInstance(\"SHA\");\n            md.update(password.getBytes());\n            String encodedPassword = new String(md.digest(), new Base64Provider().charsetForName(\"x-base64\"));\n            return encodedPassword;\n        } catch (NoSuchAlgorithmException e) {\n            return null;\n        }\n    }\n", "label": 1, "substitutes": {"getDigest": ["getMDest", "getDigEST", " getMDse", " getDigEST", "getHashest", "getHashEST", " getDigested", "getdigest", "getdigse", "getMDested", "getMDse", "getDigse", " getMDest", " getMDEST", "getdigested", " getDigse", "getDigested", "getHashse", "getMDEST", "getdigEST", " getMDested", "getHashested"], "attribute": ["space", "item", "address", "subject", "description", "at", "operation", "definition", "member", "variable", "missing", "communication", "pair", "property", "event", "position", "al", "Attribute", "relation", "a", "article", "expression", "qualified", "attr", "message", "argument", "information", "element", "each", "command", "ident", "input", "associated", "reference", "document", "name", "object", "att", "data", "application", "value", "report", "password", "and", "metadata", "add", "request", "ribute", "directory", "character", "option", "type", "operator", "management", "policy", "entry", "word"], "digestAlgorithm": ["digestALgo", "digesteralgorithm", "digestAlgebra", "digestSchego", "digestsalgebra", "digestAlgorith", "digestalgebra", "digesterAlgorith", "digestsAlgo", "digestalgorith", "digesteralgebra", "digestALgebra", "digestsalgorithm", "digestPalgorith", "digestsAlgorithm", "digestalgo", "digesterAlgo", "digestPalgorithm", "digesteralgorith", "digestSchegebra", "digesterAlgebra", "digestalgorithm", "digestPalgo", "digestALgorithm", "digestAlgo", "digesterAlgorithm", "digestsalgo", "digestPalgebra", "digesteralgo", "digestSchegorithm", "digestALgorith", "digestsAlgebra"], "digest": ["Digend", "designests", "mdtest", "mdested", "diagnse", "designEST", " digests", "digested", " digEST", "hashEST", "Digested", "Digse", "digitude", "mdest", "DigEST", "Digest", "digests", "designest", "equested", " digested", "digEST", "mditude", "digtest", " digtest", "Digist", "equend", "Digtest", "diagnitude", "diagnest", "equest", "diagnested", " digitude", "hashest", " digist", "Digests", " digse", "digist", "hashend", "digse", "designist", "mdse", "hashested", "equEST", "digend"], "md": ["mac", "mc", "d", "js", "dr", "ud", "pdf", "rpm", "pt", "pd", "mt", "ld", "amd", "mod", "fd", "di", "sm", "nt", "managed", "esm", "nd", "met", "strong", "good", "red", "det", "m", "pm", "ct", "ms", "sd", "dd", "ma", "rm", "hd", "mm", "ds", "mk", "cd", "mind", "ind", "bd", "mg", "mn", "dm", "metadata", "der", "dh", "df", "mb", "cmd", "grad", "MD", "cond", "wd"]}}
{"id1": "14590676", "id2": "9718328", "code1": "    public static void download(String address, String localFileName) {\n        OutputStream out = null;\n        URLConnection conn = null;\n        InputStream in = null;\n        try {\n            URL url = new URL(address);\n            out = new BufferedOutputStream(new FileOutputStream(localFileName));\n            conn = url.openConnection();\n            in = conn.getInputStream();\n            byte[] buffer = new byte[1024];\n            int numRead;\n            long numWritten = 0;\n            while ((numRead = in.read(buffer)) != -1) {\n                out.write(buffer, 0, numRead);\n                numWritten += numRead;\n            }\n            System.out.println(localFileName + \"\\t\" + numWritten);\n        } catch (Exception exception) {\n            exception.printStackTrace();\n        } finally {\n            try {\n                if (in != null) in.close();\n                if (out != null) out.close();\n            } catch (IOException ioe) {\n                ioe.printStackTrace();\n            }\n        }\n    }\n", "code2": "    public void actionPerformed(ActionEvent e) {\n        if (\"register\".equals(e.getActionCommand())) {\n            buttonClicked = \"register\";\n            try {\n                String data = URLEncoder.encode(\"ver\", \"UTF-8\") + \"=\" + URLEncoder.encode(Double.toString(questVer), \"UTF-8\");\n                data += \"&\" + URLEncoder.encode(\"name\", \"UTF-8\") + \"=\" + URLEncoder.encode(name.getText(), \"UTF-8\");\n                data += \"&\" + URLEncoder.encode(\"os\", \"UTF-8\") + \"=\" + URLEncoder.encode(os.getText(), \"UTF-8\");\n                data += \"&\" + URLEncoder.encode(\"jre\", \"UTF-8\") + \"=\" + URLEncoder.encode(jre.getText(), \"UTF-8\");\n                data += \"&\" + URLEncoder.encode(\"email\", \"UTF-8\") + \"=\" + URLEncoder.encode(email.getText(), \"UTF-8\");\n                data += \"&\" + URLEncoder.encode(\"key\", \"UTF-8\") + \"=\" + URLEncoder.encode(\"Qr7SchF\", \"UTF-8\");\n                data += \"&\" + URLEncoder.encode(\"answers\", \"UTF-8\") + \"=\" + URLEncoder.encode(Integer.toString(getAnswers()), \"UTF-8\");\n                URL url = new URL(\"http://ubcdcreator.sourceforge.net/register.php\");\n                URLConnection conn = url.openConnection();\n                conn.setDoInput(true);\n                conn.setDoOutput(true);\n                OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());\n                wr.write(data);\n                wr.flush();\n                BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n                String line;\n                while ((line = rd.readLine()) != null) {\n                }\n                rd.close();\n                wr.close();\n            } catch (Exception ex) {\n            }\n            setVisible(false);\n        } else if (\"cancel\".equals(e.getActionCommand())) {\n            buttonClicked = \"cancel\";\n            setVisible(false);\n        } else if (\"never\".equals(e.getActionCommand())) {\n            buttonClicked = \"never\";\n            setVisible(false);\n        }\n    }\n", "label": 0, "substitutes": {"download": ["pull", "sample", "file", "binary", "process", "archive", "export", "copy", "Download", "zip", "link", "split", "dump", "connect", " Download", "get", "read", "upload", "transfer", "load", "data", "GET", "save", "sync", "stream", "dial", " fetch"], "address": ["search", "Address", "localhost", "place", "description", "resource", "point", "position", "service", "route", "attribute", "network", "email", "connection", "pattern", "port", "host", "location", "uri", "server", "prefix", "enter", "date", "create", "reference", "name", "add", "addr", "password", "lease", "hello", "shape", "ip", "directory", "domain", "order", "ace", "command"], "localFileName": ["localTableSize", "LocalFilenameNames", "localFilePath", "localLocalSize", "localTablePath", "LocalFileName", "localTablename", "LocalFilenamePath", "localFilenameName", "LocalFilePath", " localFilename", "LocalFilenameName", "localTableFilename", "localLogName", " localFilePath", "LocalFileFile", "LocalFilenameFilename", "localFilenameNames", "LocalFileNames", "localFilename", "localLogNames", "localFilenameFilename", "localTableNames", "localLogFilename", "localLogPath", "localFilenameFile", "localPathNames", "localFilenamename", " localPathNames", "LocalFilenameSize", "localPathPath", " localFileNames", " localPathname", "LocalFilenameFile", "localFilenamePath", "localLocalName", "localTableName", "localFilenameSize", "localFileFilename", "localPathname", "localFileSize", "localPathName", "localLocalFile", "localFileNames", "LocalFileFilename", " localPathName", "localTableFile", "localFileFile", "localLocalPath", " localPathPath", "LocalFileSize"], "out": ["again", "by", "print", "t", "std", "conv", "ot", "aos", "msg", "output", "console", "auto", "on", "ns", "screen", "all", "exit", "name", "yes", "pos", "ent", "ln", "err", "v", "at", "p", "OU", "io", "oe", "ion", "flush", "r", "ex", "write", "o", "net", "s", "cn", "client", "sys", "one", "na", "ne", "outs", "can", "d", "log", "obj", "to", "n", "null", "outer", "writer", "OUT", "Out", "it", "ou", "dev", "cos", "nt", "no", "go", "boot", "i", "note", "oss", "println", "cho", "co", "os", "timeout"], "conn": ["cur", "serv", "gate", " con", "po", "conv", "Conn", "nn", "nt", "msg", "ca", "open", "conf", "Connection", "comm", "ctx", "c", "pas", "cp", "connection", "cc", "rel", "ct", "com", "net", "connect", "ann", "ens", "cn", "init", "ch", "yn", "client", "cm", "nc", "enc", "cb", "cmd", "ne", "resp", "org", "jp", "co", "con"], "in": ["mc", "ic", "en", "io", "asin", "sin", "is", "inf", "no", "cin", "conf", "re", "to", "IN", "inc", "i", "n", "inner", "pi", "inside", "m", " din", "on", "iter", "ma", "net", "s", "din", "oin", "raw", "user", "input", "isin", "ind", "mm", "gin", "ain", "In", "one", "or", "and", "el", "image", "ai", "ins", "rin", "it", "bin", "can", "nin", "sql", "il", "inn"], "url": ["sl", "log", "ret", "Url", "li", "str", "nl", "mail", "char", "browser", "service", "ls", "open", "conf", "r", "dl", "pl", "ll", "connection", "https", "ssl", "link", "rel", "base", "URL", "web", "net", "connect", "ur", "q", "ch", "cert", "client", "hl", "bel", "www", "http", "l", "cmd", "il", "org", "con", "ul"], "buffer": ["sample", "cell", "batch", "number", "binary", "sequence", "variable", "append", "bar", "resource", "length", "row", "stack", "phrase", "attribute", "button", "view", "word", "block", "code", "initial", "base", "note", "padding", "table", "message", "buff", "paste", "raw", "database", "parse", "tree", "frame", "template", "document", "comment", "source", "memory", "value", "password", "header", "window", "cache", "hold", "available", "buf", "Buffer", "display", "command"], "numRead": ["monread", "numLoad", "NumLength", "numberread", "namWrite", " NumRead", "numread", "nread", "numberReader", "monWrite", "monRead", "NumRead", " NumREAD", "nLoad", " numReader", "numberREAD", " NumLength", "numberRead", " numREAD", "nRead", "numLength", " numLength", "numReader", " numread", " NumReader", "NumWrite", "NumReader", "numberLength", " numWrite", "namLength", "numberWrite", "numWrite", "namReader", "namRead", " numLoad", "numberLoad", "numREAD"], "numWritten": ["monWrit", "sumWriter", " numWrit", "numberWriter", " numWriter", "monWrite", "numWriter", "monRead", "NumRead", "monWriter", "NumWriter", "numberRead", "NumWritten", "numWrit", "numberWritten", "NumWrite", "sumRead", "sumWritten", " numWrite", "sumWrite", "numberWrite", "numWrite", "NumWrit", "monWritten"]}}
{"id1": "11477906", "id2": "19113613", "code1": "    private static void loadDefaultSettings(final String configFileName) {\n        InputStream in = null;\n        OutputStream out = null;\n        try {\n            in = Thread.currentThread().getContextClassLoader().getResourceAsStream(META_INF_DEFAULT_CONFIG_PROPERTIES);\n            out = new FileOutputStream(configFileName);\n            IOUtils.copy(in, out);\n        } catch (final Exception e) {\n            log.warn(\"Unable to pull out the default.\", e);\n            throw new RuntimeException(e);\n        } finally {\n            IOUtils.closeQuietly(in);\n            IOUtils.closeQuietly(out);\n        }\n    }\n", "code2": "    public static void copy(File in, File out) throws IOException {\n        if (in.exists() && in != null && out != null) {\n            if (!out.exists()) {\n                if (in.isDirectory()) {\n                    out.mkdirs();\n                } else {\n                    out.createNewFile();\n                }\n            }\n            String source = in.isDirectory() ? \"directory\" : \"file\";\n            String target = out.isDirectory() ? \"directory\" : \"file\";\n            if (!source.equals(target)) {\n                throw new IOException(\"Can't duplicate \" + source + \" as \" + target);\n            } else {\n                if (source.equals(\"directory\")) {\n                    File[] files = in.listFiles();\n                    for (File file : files) {\n                        copy(file, new File(out, file.getName()));\n                    }\n                } else {\n                    FileChannel inCh = new FileInputStream(in).getChannel();\n                    FileChannel outCh = new FileOutputStream(out).getChannel();\n                    inCh.transferTo(0, inCh.size(), outCh);\n                }\n            }\n        }\n    }\n", "label": 1, "substitutes": {"loadDefaultSettings": ["readDefaultSettings", "loadFAULTSettings", "loadDefaultSetting", "loaddefaultSettings", "loadFAULTValues", "readDefaultsettings", "loadFAULTSetting", "loaddefaultSetting", "readdefaultsettings", "loadDefaultsettings", "readdefaultSetting", "loaddefaultValues", "loaddefaultsettings", "readDefaultSetting", "readdefaultSettings", "readDefaultValues", "loadDefaultValues", "loadFAULTsettings", "readdefaultValues"], "configFileName": ["configFileLocation", "confFilenamePath", "configFilenameName", "configfileNames", "confFilePath", "configFILEname", "confFilename", "configFILEPath", "confFileNames", "configFilename", "configFilenamePath", "conffilename", "configPageNames", "confFileName", "configStreamLocation", "conffileName", "conffilePath", "configPagename", "confFileLocation", "configfilePath", "configfilename", "configFilenameNames", "configStreamName", "confFilenameLocation", "configFilePath", "configFILELocation", "configFILEName", "configStreamname", "confFilenamename", "configStreamPath", "configPageName", "conffileNames", "configfileName", "configPagePath", "configFileNames", "configFilenamename", "configFilenameLocation", "confFilenameName"], "in": ["mc", "en", "id", "is", "inf", "t", "e", "up", "ls", "al", "cin", "run", "from", "mi", "re", "ini", "IN", "n", "i", "ro", "inner", "ad", "check", "m", "ze", "on", " din", "ar", "o", "ma", "din", "init", "doc", "user", "input", "isin", "ind", "gin", "In", "source", "or", "im", "ai", "ins", "rin", "l", "it", "info", "bin", "ain", "con", "inn"], "out": ["not", "des", "t", "conv", "update", "ot", "po", "aos", "output", "copy", "m", "auto", "all", "ins", "ent", "de", "off", "w", "v", "at", "OU", "io", "ion", "up", "ex", "check", "are", "o", "server", "net", "raw", "cn", "read", "client", "sys", "or", "handle", "ne", "outs", "can", "log", "obj", "null", "n", "to", "port", "res", "ge", "init", "user", "une", "writer", "ind", "over", "OUT", "Out", "cache", "it", "ou", "gc", "os", "file", "en", "store", "nt", "ing", "gt", "oss", "co", "con"]}}
{"id1": "20568568", "id2": "8801436", "code1": "    private String createHTML(PAGE_TYPE requestPage) {\n        String result = \"<html><head>\";\n        URL url = getClass().getClassLoader().getResource(\"org/compiere/images/PAPanel.css\");\n        InputStreamReader ins;\n        try {\n            ins = new InputStreamReader(url.openStream());\n            BufferedReader bufferedReader = new BufferedReader(ins);\n            String cssLine;\n            while ((cssLine = bufferedReader.readLine()) != null) result += cssLine + \"\\n\";\n        } catch (IOException e1) {\n            log.log(Level.SEVERE, e1.getLocalizedMessage(), e1);\n        }\n        switch(requestPage) {\n            case PAGE_LOGO:\n                result += \"</head><body class=\\\"header\\\">\" + \"<table width=\\\"100%\\\"><tr><td>\" + \"<img src=\\\"res:org/compiere/images/logo_ad.png\\\">\" + \"</td><td></td><td width=\\\"290\\\">\" + \"</td></tr></table>\" + \"</body></html>\";\n                break;\n            case PAGE_HOME:\n                result += \"</head><body><div class=\\\"content\\\">\\n\";\n                queryZoom = null;\n                queryZoom = new ArrayList<MQuery>();\n                String appendToHome = null;\n                String sql = \" SELECT x.AD_CLIENT_ID, x.NAME, x.DESCRIPTION, x.AD_WINDOW_ID, x.PA_GOAL_ID, x.LINE, x.HTML, m.AD_MENU_ID\" + \" FROM PA_DASHBOARDCONTENT x\" + \" LEFT OUTER JOIN AD_MENU m ON x.ad_window_id=m.ad_window_id\" + \" WHERE (x.AD_Client_ID=0 OR x.AD_Client_ID=?) AND x.IsActive='Y'\" + \" ORDER BY LINE\";\n                PreparedStatement pstmt = null;\n                ResultSet rs = null;\n                try {\n                    pstmt = DB.prepareStatement(sql, null);\n                    pstmt.setInt(1, Env.getAD_Client_ID(Env.getCtx()));\n                    rs = pstmt.executeQuery();\n                    while (rs.next()) {\n                        appendToHome = rs.getString(\"HTML\");\n                        if (appendToHome != null) {\n                            if (rs.getString(\"DESCRIPTION\") != null) result += \"<H2>\" + rs.getString(\"DESCRIPTION\") + \"</H2>\\n\";\n                            result += stripHtml(appendToHome, false) + \"<br>\\n\";\n                        }\n                        if (rs.getInt(\"AD_MENU_ID\") > 0) {\n                            result += \"<a class=\\\"hrefNode\\\" href=\\\"http:///window/node#\" + String.valueOf(rs.getInt(\"AD_WINDOW_ID\") + \"\\\">\" + rs.getString(\"DESCRIPTION\") + \"</a><br>\\n\");\n                        }\n                        result += \"<br>\\n\";\n                        if (rs.getInt(\"PA_GOAL_ID\") > 0) result += goalsDetail(rs.getInt(\"PA_GOAL_ID\"));\n                    }\n                } catch (SQLException e) {\n                    log.log(Level.SEVERE, sql, e);\n                } finally {\n                    DB.close(rs, pstmt);\n                    rs = null;\n                    pstmt = null;\n                }\n                result += \"<br><br><br>\\n\" + \"</div>\\n</body>\\n</html>\\n\";\n                break;\n            default:\n                log.warning(\"Unknown option - \" + requestPage);\n        }\n        return result;\n    }\n", "code2": "    public static void copy(File from_file, File to_file) throws IOException {\n        if (!from_file.exists()) abort(\"FileCopy: no such source file: \" + from_file.getName());\n        if (!from_file.isFile()) abort(\"FileCopy: can't copy directory: \" + from_file.getName());\n        if (!from_file.canRead()) abort(\"FileCopy: source file is unreadable: \" + from_file.getName());\n        if (to_file.isDirectory()) to_file = new File(to_file, from_file.getName());\n        if (to_file.exists()) {\n            if (!to_file.canWrite()) abort(\"FileCopy: destination file is unwriteable: \" + to_file.getName());\n        } else {\n            String parent = to_file.getParent();\n            if (parent == null) parent = System.getProperty(\"user.dir\");\n            File dir = new File(parent);\n            if (!dir.exists()) abort(\"FileCopy: destination directory doesn't exist: \" + parent);\n            if (dir.isFile()) abort(\"FileCopy: destination is not a directory: \" + parent);\n            if (!dir.canWrite()) abort(\"FileCopy: destination directory is unwriteable: \" + parent);\n        }\n        FileInputStream from = null;\n        FileOutputStream to = null;\n        try {\n            from = new FileInputStream(from_file);\n            to = new FileOutputStream(to_file);\n            byte[] buffer = new byte[4096];\n            int bytes_read;\n            while ((bytes_read = from.read(buffer)) != -1) {\n                to.write(buffer, 0, bytes_read);\n            }\n        } finally {\n            if (from != null) try {\n                from.close();\n            } catch (IOException e) {\n                ;\n            }\n            if (to != null) try {\n                to.close();\n            } catch (IOException e) {\n            }\n        }\n    }\n", "label": 0, "substitutes": {"createHTML": [" createURL", "seeHTML", "seeSQL", "seeHT", "CreateHT", "seeURL", "CreateURL", "createSQL", "createHT", " createSQL", "createURL", "CreateHTML", "CreateSQL", " createHT"], "requestPage": ["requestpage", "referencepage", "referenceApp", "referencePage", "RequestPage", "responseLine", "RequestFrame", "RequestType", "questionPage", "responseFrame", "questionpage", " requestType", " requestFrame", "referenceType", "requestApp", "questionApp", "requestLine", "questionType", "requestFrame", "Requestpage", "RequestLine", "responseType", "requestType", " requestLine", "responsePage", "RequestApp"], "result": ["search", "match", "function", "description", "results", "sequence", "term", "render", "join", "success", "detail", "output", "work", "complete", "buffer", "section", "r", "product", "relation", "res", "format", "summary", "html", "reason", "trace", "prefix", "params", "feature", "message", "date", "page", "root", "command", "out", "Result", "figure", "all", "document", "comment", "error", "line", "answer", "source", "report", "memory", "value", "response", "request", "cache", "json", "this", "cup", "true", "word"], "url": ["sl", "gl", "lr", "Url", "abs", "str", "nl", "resource", "char", "browser", "loader", "ws", "in", "ls", "ol", "open", "re", "r", "dl", "ll", "res", "ssl", "link", "html", "fs", "uri", "f", "rel", "URL", "base", "web", "sb", "get", "ur", "http", "rl", "l", "xml", "il", "ref"], "ins": ["ln", "ks", "eds", "vs", "ars", "ics", "ats", "asin", "kins", "is", "ws", "in", "ls", "cin", "mr", "reader", "gs", "INS", "lins", "ts", "uds", "rys", "rates", "inner", "cs", "res", "als", " din", "ils", "fs", "pers", "pins", "bs", "din", "its", "isin", "input", "ds", "ips", "ris", "gin", "ains", "sts", " in", "Ins", "ints", "includes", "rus", "qs", "con"], "bufferedReader": [" buffererBuilder", "buffiledReader", "buffaredWriter", " buffedReader", " bufferedreader", "buffiledreader", " buffererReader", "bufferedBuilder", "bufferingContainer", "bufferedLoader", "buffaredBuilder", " bufferedBuilder", "buffererLoader", "buffiledWriter", " buffedContainer", " buffedWriter", "buffedreader", " buffererLoader", "buffedContainer", "buffedLoader", " bufferedWriter", " bufferedLoader", "buffedWriter", "bufferedContainer", "buffaredReader", "buffererWriter", "buffaredLoader", "bufferedreader", "bufferingReader", " bufferedContainer", "buffererBuilder", "bufferedWriter", "buffedBuilder", "buffedReader", " buffererWriter", "bufferingreader", " buffedreader", "bufferingWriter", "buffererReader", "buffiledContainer"], "cssLine": ["cssBlock", "styleline", "javascriptBlock", "csLine", "ssBlock", "CSSLin", "cosBlock", "javascriptLin", "cosLine", "cosRow", "csData", "ssline", "csRow", "csline", "javascriptLine", "styleRow", "rssLine", "CSSLine", "cssData", "CSSRow", "ssBody", "ssLin", "cssline", "javascriptRow", "styleData", "cssLin", "ssLine", "cosBody", "rssBody", "cssRow", "CSSBlock", "ssRow", "rssRow", "ssData", "rssBlock", "cssBody", "styleLine"], "e1": ["o5", "e5", "ee0", "o0", "E1", "ee1", "ee2", "o2", "e2", "e3", "ee3", "e01", " e5", "e0", "E2", "ee5", "E0", " e0", " e3", " e01", "ee01", " e2", "o1", "o01", "E3"], "queryZoom": ["queryzome", "queryzolution", "viewZoo", "queryzoom", "queryDom", "queryZome", "queryDoom", "queryDome", " queryZooming", "queryDoo", "viewzome", "viewZome", " queryZom", "queryZXooming", "queryXom", " queryzoom", "viewzom", "queryZoo", "viewZoom", "viewZom", "queryZoneooming", "queryZXoom", "queryZolution", "queryZoneolution", "queryZom", "queryZoneoom", "viewzoom", " queryzom", "queryXoo", "queryzoo", " queryzolution", "queryZoneom", "viewzoo", " queryZolution", "queryXoom", "queryzooming", "queryZXolution", "queryXome", "queryZooming", "queryZXom", "queryzom", " queryzooming"], "appendToHome": ["appendTOHome", "addtoHome", "appendTOMenu", "addToQuery", "addtoUrl", "appendToQuery", "appendtoHome", "appendToMenu", "appendetoHome", "appendetoQuery", "addToUrl", "appendToUrl", "appendtoMenu", "appendetoUrl", "appendTOUrl", "appendtoUrl", "appendtoQuery", "addToHome", "addtoQuery", "appendTOQuery", "appendetoMenu", "addToMenu", "addtoMenu"], "sql": ["where", "sq", "spr", "scl", "string", "mt", "nl", "qu", "imp", "ls", "select", "inv", "dl", "query", "sol", "condition", "statement", "QL", "quote", "SQL", "csv", "rel", "expression", "sd", "params", "sp", "series", "sel", "ma", "q", "ms", "expr", "table", "db", "setup", "fn", "spec", "sys", "sv", "xml", "json", "cmd", "ql", "sn"], "pstmt": [" pstst", "pStms", "prstmt", "pfrm", "pSTms", " pStMT", "pmtpr", "pstartMT", "pSTst", "pstrm", "pSTMT", " pstMT", "psemr", "pstatm", " pstrmt", "pstrsql", "psthst", "pmtStatement", "pstartmt", "postmt", "prstStatement", "pstsql", " pStmt", "pstrmt", "pmtmt", " pstsql", "postsql", "pstMT", "pstmr", "pstrbl", "psebl", " pstrm", "pstbl", " pstbl", "pmtst", "psthStatement", "pstrpr", "pfrmt", " pStst", " pfrpr", "prsthpr", "pstms", "prstst", "pSTpr", " pstrbl", "pfrpr", "pstrmr", "psthpr", "prstpr", "pfrsql", "pSTStatement", "postpr", " pstrmr", " pstm", "pstatmr", "postm", " pstms", "pstst", "pstatmt", "pstStatement", "pstartst", "pStmt", "pstartms", "pStMT", "psemt", " pfrmt", "pStst", " pStms", " pfrsql", "psthmt", " pstmr", "pSTmt", " pfrm", "pstm", "prsthStatement", "pstpr", " pstpr", "prsthst", "prsthmt", "pstatbl", "psem"], "rs": ["ks", "ars", "ats", "ws", "RS", "xs", "ows", "ls", "mr", "gs", "rys", "ts", "rates", "cs", "res", "ims", "ues", "fs", "ps", "ms", "bs", "rd", "rt", "its", "ds", "ris", "sts", "rc", "rows", "Rs", "ras", "ss", "os", "ys"]}}
{"id1": "5744493", "id2": "18696387", "code1": "    protected void onlyFileCopy(File in, File out) throws IOException {\n        FileChannel inChannel = new FileInputStream(in).getChannel();\n        FileChannel outChannel = new FileOutputStream(out).getChannel();\n        try {\n            int maxCount = (1024 * 1024 * 64) - (1024 * 32);\n            long size = inChannel.size();\n            long pos = 0;\n            while (pos < size) {\n                pos += inChannel.transferTo(pos, maxCount, outChannel);\n            }\n        } catch (IOException e) {\n            throw e;\n        } finally {\n            if (inChannel != null) inChannel.close();\n            if (outChannel != null) outChannel.close();\n        }\n    }\n", "code2": "    public Converter(String input, String output) {\n        try {\n            FileInputStream fis = new FileInputStream(new File(input));\n            BufferedReader in = new BufferedReader(new InputStreamReader(fis, \"SJIS\"));\n            FileOutputStream fos = new FileOutputStream(new File(output));\n            BufferedWriter out = new BufferedWriter(new OutputStreamWriter(fos, \"UTF8\"));\n            int len = 80;\n            char buf[] = new char[len];\n            int numRead;\n            while ((numRead = in.read(buf, 0, len)) != -1) out.write(buf, 0, numRead);\n            out.close();\n            in.close();\n        } catch (IOException e) {\n            System.out.println(\"An I/O Exception Occurred: \" + e);\n        }\n    }\n", "label": 1, "substitutes": {"onlyFileCopy": [" doFileCopy", " doFileDownload", " synchronizedFullMove", " doFileMove", " synchronizedFullCopy", " synchronizedFileDownload", " synchronizedFileCopy", " doStreamMove", " doPageMove", " doStreamDownload", " doPageCopy", " synchronizedFullDownload", " synchronizedFileMove", " doFullMove", " doPageDownload", " doFullCopy", " doStreamCopy", " doFullDownload"], "in": ["ic", "file", "en", "b", "old", "inf", "up", "cin", "from", "r", "ex", "IN", "inc", "i", "n", "o", "as", "din", "ck", "init", " input", "isin", "input", "ind", "mm", "gin", "source", "In", "or", "el", "ac", "ins", "rin", "l", "it", "ain", "inn"], "out": ["v", "serv", "op", "at", "log", "file", "p", "io", "help", "t", "po", "up", "nt", "ot", "output", "c", "null", "n", "ex", "check", "to", "write", "res", "gt", "o", "as", "net", "s", "ch", "OUT", "Out", "l", "it", "ou", "outs", "ne", "os", "w"], "inChannel": ["inConnection", "outChan", "InChan", " inConnection", " inButton", " inCase", " inCategory", "innCommand", "InCh", "innChannel", "innerStream", "inCommand", "INChan", " inchannel", " inCh", "outCh", "dinChan", "inCategory", "dinButton", "inCase", "dinConnection", "inButton", "inStream", "INchannel", "cinCommand", "inCh", "isinConnection", " inChan", "outStream", "INChannel", "isinChan", "innCategory", "INStream", "innerChannel", "dinCommand", "vinCase", "outchannel", "innButton", "inChan", "inchannel", "isinButton", "cinButton", "dinChannel", "dinCase", "InChannel", " inCommand", "cinChannel", "vinConnection", "innerChan", "Inchannel", "innerchannel", "vinCommand", "isinChannel", "cinCategory", "vinChannel"], "outChannel": ["aosMachine", "outChan", "upSection", "outerChannel", " outRoom", "outputChannel", "onChan", "upChannel", "OutStream", "outConnection", "OutChan", "cosMachine", "aosDisk", "outerChan", "outCh", "outerStream", " outStream", "onchannel", "onChannel", "newChannel", "upDisk", "inRoom", "outDisk", "inStream", " outChan", "onConnection", "OutChannel", "outputStream", "upMachine", "aosSection", "outSection", "cosSection", "outStream", "cosChannel", "newchannel", " outCh", "outchannel", "outMachine", "inChan", "OutCh", "outRoom", "outputCh", "outputChan", "newConnection", " outchannel", "cosDisk", " outConnection", "outerRoom", "newChan", "aosChannel"], "maxCount": ["minFlag", "maxLength", "MAXLength", " maxSize", "MaxCount", " maxFlag", "minSize", "minCount", "minCast", "minLength", "maxFlag", "maxSize", "MAXCount", "MaxCast", "maxCast", "MaxLength", " maxLength", "MAXFlag", "MaxSize", " maxCast"], "size": ["send", "sample", "bytes", "height", "show", "any", "ose", "speed", "Size", "fee", "length", "is", "count", "start", "position", "resolution", "total", "export", "scale", "si", "len", "range", "ize", "south", "write", "scroll", "duration", "area", "m", "close", "ze", "notice", "small", "set", "sd", "message", "ms", "sent", "capacity", "read", "seek", "name", "score", "readable", "shift", "keys", "shape", "sum", "SIZE", "empty", "equal", "body", "space", "gets"], "pos": ["pose", "cos", "pt", "p", "Pos", "pro", "point", "part", "length", "po", "start", "position", "row", "slot", "no", "pg", "limit", "left", "len", "index", "to", "n", "i", "pl", "port", "pi", "o", "rel", "ps", "def", "seq", "loc", "Position", "sp", "coord", "page", "pass", "pid", "doc", "exp", "offset", "POS", "spec", "zero", "pr", "x", "pointer", "l", "it", "resp", "pc", "off", "os"]}}
{"id1": "16378239", "id2": "16673769", "code1": "    public static DigitalObjectContent byReference(final InputStream inputStream) {\n        try {\n            File tempFile = File.createTempFile(\"tempContent\", \"tmp\");\n            tempFile.deleteOnExit();\n            FileOutputStream out = new FileOutputStream(tempFile);\n            IOUtils.copyLarge(inputStream, out);\n            out.close();\n            return new ImmutableContent(tempFile);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        throw new IllegalStateException(\"Could not create content for input stream: \" + inputStream);\n    }\n", "code2": "    @Override\n    public void Start() {\n        try {\n            Enumeration<URL> resources = Configurator.class.getClassLoader().getResources(IOCContainer.GetApplicationName() + \".config\");\n            while (resources.hasMoreElements()) {\n                URL url = resources.nextElement();\n                if (Logger.logger.isDebugEnabled()) {\n                    Logger.logger.debug(\"Loading '\" + url + \"'\");\n                }\n                JSONValue configFileContents = JSONValue.Decode(url.openStream(), url.toString());\n                if (configFileContents instanceof JSONObjectValue) {\n                    for (Configurable configurable : IOCContainer.LookupAll(Configurable.class)) {\n                        JSONValue jsonData = ((JSONObjectValue) configFileContents).GetProperty(configurable.GetConfigSectionName());\n                        if (jsonData != null) {\n                            if (Logger.logger.isDebugEnabled()) {\n                                Logger.logger.debug(\"Configurging \" + configurable.getClass() + \" with '\" + jsonData.Encode());\n                            }\n                            try {\n                                configurable.Configure(jsonData);\n                            } catch (Throwable th1) {\n                                Logger.logger.error(\"Caught throwable while configuring \" + configurable.getClass() + \":\" + th1.getMessage() + \". IGNORED.\", th1);\n                                Logger.logger.error(\"[Continued]. Config Data was:\" + jsonData.Encode());\n                            }\n                        }\n                    }\n                } else {\n                    Logger.logger.error(\"'\" + url + \"' does not contain a json object. Skipping and looking for other applciation.config files in classpath ...\");\n                }\n            }\n        } catch (Throwable th) {\n            throw new RuntimeException(\"Exception while attempting to load application.config:'\" + th.getMessage() + \"'\", th);\n        }\n    }\n", "label": 0, "substitutes": {"byReference": ["Byreference", "ByResource", "byResource", " byResource", "ByRef", "forReference", "ByReference", "byRef", "byreference", " byreference", " byRef", "forRef", "forreference", "forResource"], "inputStream": [" inputReader", "inputstream", " inputstream", "Inputstream", "inputFile", "InputFile", "inputReader", "instream", "inStream", "readablestream", "InputReader", "readableSteam", "inputSteam", " inputSteam", "inFile", "inSteam", "readableReader", "readableStream", "InputStream", " inputFile", "InputSteam"], "tempFile": ["tempPath", "empDirectory", "tmpName", "empName", "tempDir", "Tempfile", "poraryfile", "poraryPlace", "empFile", " tempfile", "empPlace", "tmpFile", "tempChain", " tempDir", "TempFile", "poraryFile", "tmpDirectory", "tempName", "empfile", "poraryUrl", "TempDirectory", " tempUrl", " temporaryFiles", " tempChain", "TempDir", "TempPath", "tempfile", " tempFiles", "tempUrl", "TempFiles", "tmpPath", "TempChain", " temporaryFile", "tempPlace", "tempDirectory", "tmpfile", "tmpPlace", "empPath", "poraryDir", " temporaryfile", "poraryName", "TempUrl", " temporaryChain", "tempFiles"], "out": ["os", "v", "cos", "serv", "again", "file", "OU", "io", "t", "conv", "up", "in", "aos", "msg", "output", "lay", "to", "ex", "n", "null", "auto", "dis", "o", "as", "net", "s", "oss", "user", "all", "writer", "gr", "sys", "source", "OUT", "one", "ao", "Out", "ins", "l", "sum", "us", "ent", "ou", "outs", "co", "con"]}}
{"id1": "255765", "id2": "18782385", "code1": "    private static void main(String[] args) {\n        try {\n            File f = new File(\"test.txt\");\n            if (f.exists()) {\n                throw new IOException(f + \" already exists.  I don't want to overwrite it.\");\n            }\n            StraightStreamReader in;\n            char[] cbuf = new char[0x1000];\n            int read;\n            int totRead;\n            FileOutputStream out = new FileOutputStream(f);\n            for (int i = 0x00; i < 0x100; i++) {\n                out.write(i);\n            }\n            out.close();\n            in = new StraightStreamReader(new FileInputStream(f));\n            for (int i = 0x00; i < 0x100; i++) {\n                read = in.read();\n                if (read != i) {\n                    System.err.println(\"Error: \" + i + \" read as \" + read);\n                }\n            }\n            in.close();\n            in = new StraightStreamReader(new FileInputStream(f));\n            totRead = in.read(cbuf);\n            if (totRead != 0x100) {\n                System.err.println(\"Simple buffered read did not read the full amount: 0x\" + Integer.toHexString(totRead));\n            }\n            for (int i = 0x00; i < totRead; i++) {\n                if (cbuf[i] != i) {\n                    System.err.println(\"Error: 0x\" + i + \" read as 0x\" + cbuf[i]);\n                }\n            }\n            in.close();\n            in = new StraightStreamReader(new FileInputStream(f));\n            totRead = 0;\n            while (totRead <= 0x100 && (read = in.read(cbuf, totRead, 0x100 - totRead)) > 0) {\n                totRead += read;\n            }\n            if (totRead != 0x100) {\n                System.err.println(\"Not enough read. Bytes read: \" + Integer.toHexString(totRead));\n            }\n            for (int i = 0x00; i < totRead; i++) {\n                if (cbuf[i] != i) {\n                    System.err.println(\"Error: 0x\" + i + \" read as 0x\" + cbuf[i]);\n                }\n            }\n            in.close();\n            in = new StraightStreamReader(new FileInputStream(f));\n            totRead = 0;\n            while (totRead <= 0x100 && (read = in.read(cbuf, totRead + 0x123, 0x100 - totRead)) > 0) {\n                totRead += read;\n            }\n            if (totRead != 0x100) {\n                System.err.println(\"Not enough read. Bytes read: \" + Integer.toHexString(totRead));\n            }\n            for (int i = 0x00; i < totRead; i++) {\n                if (cbuf[i + 0x123] != i) {\n                    System.err.println(\"Error: 0x\" + i + \" read as 0x\" + cbuf[i + 0x123]);\n                }\n            }\n            in.close();\n            in = new StraightStreamReader(new FileInputStream(f));\n            totRead = 0;\n            while (totRead <= 0x100 && (read = in.read(cbuf, totRead + 0x123, 7)) > 0) {\n                totRead += read;\n            }\n            if (totRead != 0x100) {\n                System.err.println(\"Not enough read. Bytes read: \" + Integer.toHexString(totRead));\n            }\n            for (int i = 0x00; i < totRead; i++) {\n                if (cbuf[i + 0x123] != i) {\n                    System.err.println(\"Error: 0x\" + i + \" read as 0x\" + cbuf[i + 0x123]);\n                }\n            }\n            in.close();\n            f.delete();\n        } catch (IOException x) {\n            System.err.println(x.getMessage());\n        }\n    }\n", "code2": "    public void saveFile(MainWindow window) {\n        FileOutputStream stream = null;\n        try {\n            Document outputDoc = new Document();\n            DocType dtd = new DocType(UI, DIRECTORY + File.separator + FILE_NAME_DTD);\n            Element uiElement = new Element(UI);\n            outputDoc.setDocType(dtd);\n            outputDoc.addContent(uiElement);\n            outputDoc.setRootElement(uiElement);\n            uiElement.setAttribute(USE_DEFAULT, \"false\");\n            uiElement.setAttribute(SHOW_TOOL_BAR, Boolean.toString(window.getToolToolBar().isVisible()));\n            uiElement.setAttribute(SHOW_UNIT_BAR, Boolean.toString(window.getUnitToolBar().isVisible()));\n            String currentLFClassName = UIManager.getLookAndFeel().getClass().getName();\n            String systemLFClassName = UIManager.getSystemLookAndFeelClassName();\n            if (currentLFClassName.equals(systemLFClassName)) uiElement.setAttribute(LOOK_AND_FEEL, \"native\"); else uiElement.setAttribute(LOOK_AND_FEEL, \"default\");\n            Element mainWindowElement = new Element(MAIN_WINDOW);\n            uiElement.addContent(mainWindowElement);\n            mainWindowElement.setAttribute(LOCATION_X, Integer.toString(window.getFrame().getX()));\n            mainWindowElement.setAttribute(LOCATION_Y, Integer.toString(window.getFrame().getY()));\n            mainWindowElement.setAttribute(WIDTH, Integer.toString(window.getFrame().getWidth()));\n            mainWindowElement.setAttribute(HEIGHT, Integer.toString(window.getFrame().getHeight()));\n            Element volumeElement = new Element(VOLUME);\n            uiElement.addContent(volumeElement);\n            AudioPlayer player = window.getDesktop().getSoundPlayer();\n            volumeElement.setAttribute(SOUND, Float.toString(player.getVolume()));\n            volumeElement.setAttribute(MUTE, Boolean.toString(player.isMute()));\n            Element internalWindowsElement = new Element(INTERNAL_WINDOWS);\n            uiElement.addContent(internalWindowsElement);\n            MainDesktopPane desktop = window.getDesktop();\n            JInternalFrame[] windows = desktop.getAllFrames();\n            for (JInternalFrame window1 : windows) {\n                Element windowElement = new Element(WINDOW);\n                internalWindowsElement.addContent(windowElement);\n                windowElement.setAttribute(Z_ORDER, Integer.toString(desktop.getComponentZOrder(window1)));\n                windowElement.setAttribute(LOCATION_X, Integer.toString(window1.getX()));\n                windowElement.setAttribute(LOCATION_Y, Integer.toString(window1.getY()));\n                windowElement.setAttribute(WIDTH, Integer.toString(window1.getWidth()));\n                windowElement.setAttribute(HEIGHT, Integer.toString(window1.getHeight()));\n                windowElement.setAttribute(DISPLAY, Boolean.toString(!window1.isClosed()));\n                if (window1 instanceof ToolWindow) {\n                    windowElement.setAttribute(TYPE, TOOL);\n                    windowElement.setAttribute(NAME, ((ToolWindow) window1).getToolName());\n                } else if (window1 instanceof UnitWindow) {\n                    windowElement.setAttribute(TYPE, UNIT);\n                    windowElement.setAttribute(NAME, ((UnitWindow) window1).getUnit().getName());\n                } else {\n                    windowElement.setAttribute(TYPE, \"other\");\n                    windowElement.setAttribute(NAME, \"other\");\n                }\n            }\n            Unit[] toolBarUnits = window.getUnitToolBar().getUnitsInToolBar();\n            for (Unit toolBarUnit : toolBarUnits) {\n                UnitWindow unitWindow = desktop.findUnitWindow(toolBarUnit);\n                if ((unitWindow == null) || unitWindow.isIcon()) {\n                    Element windowElement = new Element(WINDOW);\n                    internalWindowsElement.addContent(windowElement);\n                    windowElement.setAttribute(TYPE, UNIT);\n                    windowElement.setAttribute(NAME, toolBarUnit.getName());\n                    windowElement.setAttribute(DISPLAY, \"false\");\n                }\n            }\n            File configFile = new File(DIRECTORY, FILE_NAME);\n            if (!configFile.getParentFile().exists()) {\n                configFile.getParentFile().mkdirs();\n            }\n            InputStream in = getClass().getResourceAsStream(\"/dtd/ui_settings.dtd\");\n            IOUtils.copy(in, new FileOutputStream(new File(DIRECTORY, \"ui_settings.dtd\")));\n            XMLOutputter fmt = new XMLOutputter();\n            fmt.setFormat(Format.getPrettyFormat());\n            stream = new FileOutputStream(configFile);\n            OutputStreamWriter writer = new OutputStreamWriter(stream, \"UTF-8\");\n            fmt.output(outputDoc, writer);\n        } catch (Exception e) {\n            logger.log(Level.SEVERE, e.getMessage());\n        } finally {\n            IOUtils.closeQuietly(stream);\n        }\n    }\n", "label": 1, "substitutes": {"f": ["elf", "F", "d", "fax", "path", "v", "fc", "fw", "file", "h", "p", "dir", "fed", "ret", "b", "test", "lf", "t", "e", "fd", "fab", "fac", "fx", "j", "filename", "r", "c", "n", "tf", "m", "sf", "fs", "cf", "o", "fb", "form", "def", "base", "q", "ft", "fp", "exp", "rf", "fn", "name", "fo", "bf", "fm", "fi", "l", "df", "it", "g", "fr", "info", "fa", "y", "w"], "in": ["local", "thin", "again", "at", "ic", "h", "en", "log", "make", "by", "io", "is", "inf", "t", "up", "al", "cin", "from", "reader", "re", "r", " IN", "ex", "IN", "n", "inc", "inner", "pi", "m", " din", "o", "on", "iter", "ma", "din", "get", "oin", "init", "all", "input", "isin", "ind", "mm", "lo", "gin", "In", "add", "im", "ai", "ac", "ins", "rin", "l", "it", "info", "bin", "nin", "er", "con", "inn"], "cbuf": ["CBuffy", "CBuf", "cbbf", "cfuff", "bcuf", "cduff", "nbfg", "rbuf", "cbdf", "rbfg", "rbuffy", "rbbuf", "bcdf", "sbuff", "cbfg", "rbdf", "cbbuf", "gbuf", "cfbf", "rbather", "gbf", "abbuf", "CBuff", "abbfg", "cfuf", "sbbuf", "abbbuf", "nbuff", "bcuff", "gbbf", "rboff", "cduffy", "bcbuf", "nbuf", "CBf", "cboff", "CBbf", "cdbuf", "bcfg", "CBbuf", "cff", "cbf", "gbuff", "rbuff", "sbather", "sbuf", "cbather", "nbbuf", "cduf", "abbdf", "cbuff", "cdoff", "bcather", "cbuffy", "bcoff"], "read": ["allow", "print", "test", "ink", "re", "pack", "trust", "rate", "close", "poll", "READ", "est", "core", "parse", "slow", "input", "load", "give", "key", "hello", "find", "ret", "height", "io", "orig", "Reader", "open", "run", "r", "ignore", "check", "query", "write", "ext", "iter", "set", "play", "fail", "think", "get", "raw", "reads", "seek", "ank", "data", "chain", "Read", "ready", "handle", "ip", " Read", "stream", "log", "old", "is", "start", "ed", "current", "record", "skip", "roll", "view", "range", "burst", "n", "wait", "pre", "buffer", "pe", "connect", "ind", "readable", "error", "x", "value", "report", "ai", "need", "default", "it", "depth", "dev", "sync", "text", "send", "scan", "length", "k", "count", "bind", "reach", "ead", "row", "mix", "select", "fill", "ke", "reader", "index", "mem", "rank", "ok", "feed", "clear", "link", "end", "q", "saw", "shift", "miss", "reading", "add", "hold", "ly", "se"], "totRead": ["totaConnect", "totReader", "totAdd", "trotFind", " totalRead", "toteLoad", "toteFill", "tiotRead", "retotWrit", "tokRead", "notaReader", "tOTWrite", "toteBuild", " totBuild", "tokWrite", "totHave", "retotReader", "tcotDisplay", "toiotRead", "totaHave", "ttotRead", "tOTFind", "tobyWrite", "tiatFill", "toteNeed", "ptOTRead", "letrotRead", "tiatRead", "tcotRead", "tootBreak", " totRun", "toiotSend", "notNeed", "notalNeed", "totaReader", "tootSend", "atotaHave", "tcotBreak", "tottedPrint", "totRun", "totDisplay", " toteRun", "totBuild", "tiotWrit", "totConnect", "notaWrite", "tottAdd", "toteAdd", "tootRead", "tfatRead", "ttotAdd", "retottReader", "totaAdd", "totaSee", "retottWrit", "atotFill", "tfatLoad", "tootDisplay", "tiotBreak", "totNeed", "notPrint", "retottRead", "taotDisplay", "toticFind", "tOTLoad", "totVal", "ptotWrite", "toiotVal", "ttottAdd", "toticWrite", "totaFill", "ltotLoad", "tootConnect", "tottFind", "totalSee", " toteWrite", "atotPrint", "notalRead", "totaCheck", "totaWrite", "ptotRead", "taotConnect", "tiotVal", "totaRead", "tiatBuild", "retotRead", "toteLength", "toticRead", "ptOTWrite", "tOTRead", "totWrit", "letotRead", "notWrite", "toteWrite", "totalWrite", "tiatBreak", "totalLoad", "totWrite", "letrotWrite", "tiotPrint", "totalPrint", " toteRead", "tobyLoad", "notLoad", "atotaPrint", " totFind", "tottRun", "toiotBreak", "tobyNeed", "tcotSend", "tacotDisplay", "totaFind", "tiatVal", "ptOTLoad", " totalWrite", "totedPrint", "notalWrite", "trotRead", "totBreak", "totCheck", "tcotCheck", "totalLength", "taotCheck", "ltotaRead", "totedHave", "retottPrint", "letrotFind", "taotRead", "totFill", "totaBuild", "tiotHave", "totFind", "ptotLoad", "letotSee", "ptotFind", "toticRun", "tottRead", "totLength", "trotSee", "toteFind", "tcotVal", "tottNeed", "notalPrint", "totedRead", "tokFind", "tobyCheck", "ltotBuild", "tiotSend", "tottedRead", "tOTNeed", "toteRead", "tiotReader", " totalBuild", "ttottNeed", "totaNeed", "totaDisplay", "atotRead", "totSend", "toteRun", "notalLoad", "ttottRead", "totaLength", " totalLength", "totLoad", "totaLoad", "retotPrint", "notaLoad", "ltotaLoad", "letotWrite", "tacotConnect", "tobyRead", "tottedReader", "tiotFill", "tfatReader", "tobyPrint", " toteFind", "atotaRead", "totSee", "ltotRead", "tottReader", "tfatWrite", "notCheck", "tiatLoad", "notRead", "totalFind", "tottWrite", "tiatSend", "tootVal", "letotFind", "ttotWrite", "totedFill", "tottPrint", "tottWrit", "letrotSee", " totWrite", "totalRead", "trotWrite", "ltotFill", "tcotConnect", " totLength", "toteReader", "notaRead", "ptOTFind", "tottedWrit", "ttotNeed", "notReader", "atotHave", "notalCheck", "totaPrint", "totPrint", "tacotCheck", "totalBuild", "ltotaFill", "atotaFill", "ltotaBuild", "tacotRead", "tokLoad", "totalNeed", "totalCheck", "tootCheck", "ttottWrite"], "out": ["os", "v", "at", "log", "OU", "io", "b", "t", "obj", "conv", "up", "aos", "output", "we", "r", "c", "to", "n", "ex", "write", "res", "auto", "o", "net", "s", "end", "oss", "ch", "writer", "sys", "OUT", "or", "Out", "g", "ou", "outs", "co", "con", "w"], "i": ["dr", "ico", "I", "iq", "point", "print", "t", "e", "ini", "iy", "ci", "m", "mm", "qi", "ix", "ui", "this", "php", "iii", "y", "ia", "PI", "v", "zi", "ic", "p", "gi", "io", "ion", "\u0438", "you", "phi", "oi", "ri", "mi", "r", "c", "iu", "ice", "status", "cli", "ims", "o", "set", "s", "client", "me", "chain", "ip", "um", "ti", "li", "id", "my", "is", "ity", "si", "to", "pi", "multi", "init", "ind", "ei", "ij", "x", "im", "ai", "sim", "l", "it", "bi", "hi", "ami", "ji", "any", "b", "di", "ki", "ii", "j", "index", "ski", "uri", "q", "xi", "ie", "us", "g", "info", " I", "integer"]}}
{"id1": "810342", "id2": "8973505", "code1": "    public static void doVersionCheck(View view) {\n        view.showWaitCursor();\n        try {\n            URL url = new URL(jEdit.getProperty(\"version-check.url\"));\n            InputStream in = url.openStream();\n            BufferedReader bin = new BufferedReader(new InputStreamReader(in));\n            String line;\n            String version = null;\n            String build = null;\n            while ((line = bin.readLine()) != null) {\n                if (line.startsWith(\".version\")) version = line.substring(8).trim(); else if (line.startsWith(\".build\")) build = line.substring(6).trim();\n            }\n            bin.close();\n            if (version != null && build != null) {\n                if (jEdit.getBuild().compareTo(build) < 0) newVersionAvailable(view, version, url); else {\n                    GUIUtilities.message(view, \"version-check\" + \".up-to-date\", new String[0]);\n                }\n            }\n        } catch (IOException e) {\n            String[] args = { jEdit.getProperty(\"version-check.url\"), e.toString() };\n            GUIUtilities.error(view, \"read-error\", args);\n        }\n        view.hideWaitCursor();\n    }\n", "code2": "    public static void writeFileType(String uriFile, String outputfile, int num) {\n        BufferedWriter writer = null;\n        String uri = null;\n        try {\n            int counter = 1;\n            writer = new BufferedWriter(new FileWriter(outputfile));\n            BufferedReader reader = new BufferedReader(new FileReader(uriFile));\n            uri = null;\n            while (counter < num) {\n                uri = reader.readLine();\n                counter++;\n            }\n            while ((uri = reader.readLine()) != null) {\n                try {\n                    System.err.println(\"working on the [\" + counter + \"]th document.\");\n                    counter++;\n                    URL url = new URL(uri);\n                    URLConnection myConnection = url.openConnection();\n                    BufferedReader myReader = new BufferedReader(new InputStreamReader(myConnection.getInputStream()));\n                    String line = null;\n                    boolean hasOWL = false;\n                    boolean hasRDFS = false;\n                    boolean hasRDF = false;\n                    int linecount = 0;\n                    while ((line = myReader.readLine()) != null) {\n                        if (line.indexOf(\"http://www.w3.org/2002/07/owl\") != -1) hasOWL = true; else if (line.indexOf(\"http://www.w3.org/2000/01/rdf-schema\") != -1) hasRDFS = true; else if (line.indexOf(\"http://www.w3.org/1999/02/22-rdf-syntax-ns\") != -1) hasRDF = true;\n                        linecount++;\n                        if (linecount > 100) break;\n                    }\n                    if (hasOWL) writer.write(uri + \"\\t\" + OWL); else if (hasRDFS) writer.write(uri + \"\\t\" + RDFS); else if (hasRDF) writer.write(uri + \"\\t\" + RDF); else writer.write(uri + \"\\t\" + UNKNOWN);\n                    writer.newLine();\n                    writer.flush();\n                } catch (Exception e) {\n                    e.printStackTrace();\n                    try {\n                        writer.write(uri + \"\\t\" + BROKEN);\n                        writer.newLine();\n                        writer.flush();\n                    } catch (Exception ex) {\n                        ex.printStackTrace();\n                    }\n                }\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n", "label": 1, "substitutes": {"doVersionCheck": ["DoDatecheck", "doDateCheck", "DoVersionCheck", "DoVersioncheck", "doLicenseFix", "doLicenseUpdate", "doLicenseCheck", "doVersionsUpdate", "doVersionsCheck", "doVersionscheck", "DoDateFix", "DoDateUpdate", "doDatecheck", "doVersioncheck", "doVersionUpdate", "DoVersionFix", "DoVersionUpdate", "DoDateCheck", "doDateFix", "doVersionsFix", "doDateUpdate", "doVersionFix", "doLicensecheck"], "view": ["cv", "subject", "v", "cell", "file", "show", "help", "VIEW", "print", "wrapper", "component", "browser", "blade", "update", "context", "row", "View", "review", "manager", "eye", "open", "call", "widget", "index", "model", "check", "query", "block", "host", "html", "console", "server", "engine", "form", "web", "buffer", "table", "iew", "out", "get", "q", "page", "doc", "input", "see", "tree", "document", "client", "hl", "util", "http", "views", "report", "image", "self", "window", "layout", "tv", "controller", "this", "display"], "url": ["sl", "gl", "address", "lr", "v", "path", "string", "file", "Url", "log", "str", "nl", "id", "b", "char", "oul", "browser", "ls", "r", "dl", "null", "ll", "pl", "host", "ssl", "link", "html", "language", "f", "uri", "rel", "location", "URL", "web", "loc", "date", "ur", "github", "client", "hl", "bel", "http", "socket", "rl", "mount", "l", "json", "org", "lb", "ul"], "in": ["ln", "kin", "file", "sin", "asin", "b", "is", "inf", "cin", "reader", " IN", "IN", "n", "i", "inc", "inner", " din", "f", "out", "din", "init", "vin", "input", "isin", "gin", "In", "source", "mn", "ins", "rin", "l", "info", "body", "ain", "stream", "mat", "inn"], "bin": ["local", "ln", "win", "bed", "cos", "binary", "lib", "file", "by", "sin", "nb", "b", "bg", "loader", "rb", "mon", "cin", "abin", "pipe", "reader", "thin", "len", "bl", "sam", "inner", "mem", "bur", " din", " Bin", "stock", "buffer", "buff", "out", "din", "conn", "gin", "obin", "ran", "bn", "rin", "cache", "bi", " bins", "spin", "ebin", "con", "inn"], "line": ["text", "ln", "err", "path", "sample", "cell", "string", "file", "log", "field", "cat", "inline", "point", "channel", "print", "part", "char", "level", "store", "row", "ls", "no", "record", "style", "section", "range", "word", "ice", "block", " Line", "port", "code", "link", "col", "base", "job", "iter", "trace", "page", "lin", "column", "ide", "lo", "frame", "liner", "comment", "load", "lines", "ine", "lane", "le", "eline", "one", "chain", "el", "Line", "l", "LINE", "cmd", "state", "body", "entry", "se"], "version": ["river", "v", "match", "description", "number", "string", "sequence", "tag", "resource", "test", "browser", "latest", "update", "vision", "hash", "ion", "position", "scale", "index", "VERSION", "title", "release", "status", "volume", "Version", "vers", "license", "language", "form", "feature", "serial", "format", "date", "software", "project", "versions", "video", "client", "spec", "python", "major", "name", "value", "image", "key", "virtual", "VER", "info", "ver", "type", "translation", "usage", "iso", "command"], "build": ["where", "bor", "uild", "match", "log", "binary", "lib", "make", "tag", "print", "b", "test", "old", "be", "struct", "update", "ward", "hash", "latest", "bug", "style", "work", "other", "release", "built", "link", "builder", "round", "building", "Build", "fail", "th", "date", "project", "db", "last", "ship", "develop", "util", "load", "dist", "add", "boost", "use", "ble", "install", "hold", "ver", "unit", "dev", "full", "arch"]}}
{"id1": "947406", "id2": "18693224", "code1": "    static void copy(String src, String dest) throws IOException {\n        InputStream in = null;\n        OutputStream out = null;\n        try {\n            in = new FileInputStream(src);\n            out = new FileOutputStream(dest);\n            byte[] buf = new byte[1024];\n            int n;\n            while ((n = in.read(buf)) > 0) out.write(buf, 0, n);\n        } finally {\n            if (in != null) in.close();\n            if (out != null) out.close();\n        }\n    }\n", "code2": "    public void runDynusT(final boolean cleanUp) {\n        final String[] exeFiles = new String[] { \"DynusT.exe\", \"DLL_ramp.dll\", \"Ramp_Meter_Fixed_CDLL.dll\", \"Ramp_Meter_Feedback_CDLL.dll\", \"Ramp_Meter_Feedback_FDLL.dll\", \"libifcoremd.dll\", \"libmmd.dll\", \"Ramp_Meter_Fixed_FDLL.dll\", \"libiomp5md.dll\" };\n        final String[] modelFiles = new String[] { \"network.dat\", \"scenario.dat\", \"control.dat\", \"ramp.dat\", \"incident.dat\", \"movement.dat\", \"vms.dat\", \"origin.dat\", \"destination.dat\", \"StopCap4Way.dat\", \"StopCap2Way.dat\", \"YieldCap.dat\", \"WorkZone.dat\", \"GradeLengthPCE.dat\", \"leftcap.dat\", \"system.dat\", \"output_option.dat\", \"bg_demand_adjust.dat\", \"xy.dat\", \"TrafficFlowModel.dat\", \"parameter.dat\" };\n        log.info(\"Creating iteration-directory...\");\n        File iterDir = new File(this.tmpDir);\n        if (!iterDir.exists()) {\n            iterDir.mkdir();\n        }\n        log.info(\"Copying application files to iteration-directory...\");\n        for (String filename : exeFiles) {\n            log.info(\"  Copying \" + filename);\n            IOUtils.copyFile(new File(this.dynusTDir + \"/\" + filename), new File(this.tmpDir + \"/\" + filename));\n        }\n        log.info(\"Copying model files to iteration-directory...\");\n        for (String filename : modelFiles) {\n            log.info(\"  Copying \" + filename);\n            IOUtils.copyFile(new File(this.modelDir + \"/\" + filename), new File(this.tmpDir + \"/\" + filename));\n        }\n        for (File f : new File(this.modelDir).listFiles()) {\n            if (f.getName().toLowerCase(Locale.ROOT).endsWith(\".dws\")) {\n                log.info(\"  Copying \" + f.getName());\n                IOUtils.copyFile(f, new File(this.tmpDir + \"/\" + f.getName()));\n            }\n        }\n        String logfileName = this.tmpDir + \"/dynus-t.log\";\n        String cmd = this.tmpDir + \"/DynusT.exe\";\n        log.info(\"running command: \" + cmd + \" in directory \" + this.tmpDir);\n        int timeout = 7200;\n        int exitcode = ExeRunner.run(cmd, logfileName, timeout, this.tmpDir);\n        if (exitcode != 0) {\n            throw new RuntimeException(\"There was a problem running Dynus-T. exit code: \" + exitcode);\n        }\n        if (cleanUp) {\n            for (String filename : exeFiles) {\n                log.info(\"  Deleting \" + filename);\n                new File(this.tmpDir + \"/\" + filename).delete();\n            }\n        }\n    }\n", "label": 1, "substitutes": {"copy": ["clone", "delete", "Cop", "cat", " cp", " cop", "map", "printf", "ls", "cp", "gc", "link", "csv", "slice", "paste", "init", "create", "Copy", "download", "transfer", "println", "upload", "load", " Copy", "save", " replicate", "move", "sync"], "src": ["sec", "sr", "sq", "cur", "subject", "ctr", "orig", "rx", "st", "start", "fx", "ls", "from", "url", "rs", "img", "obs", "sit", "sf", "rel", "config", "sc", "Source", "sb", "bs", "tmp", "init", "usr", "req", "input", "sys", "dist", "source", "rl", "rc", "ser", "pkg", "ins", "inst", "iv"], "dest": ["master", "d", "trans", "decl", "dir", "des", "id", "orig", "mod", "test", "st", "Dest", "temp", "target", "deg", "pas", "nom", "good", "https", "desc", "loc", "end", "est", "tmp", "usr", "req", "nw", "mm", "dist", "source", "rest", "cont", "home", "pub", "del", "origin"], "in": ["local", "win", "mc", "ln", "pin", "file", "en", "sin", "is", "inf", "st", "up", "al", "cin", "from", "mi", "r", "act", "ini", "IN", "inc", "i", "inner", "inside", "m", "ar", "on", "o", "iter", "ma", "net", "din", "ck", "init", "conn", "doc", "user", "oin", "raw", "input", "isin", "ind", "min", "mm", "read", "gin", "ie", "all", "In", "or", "ai", "ac", "ins", "rin", "l", "it", "info", "bin", "ain", "co", "con", "inn"], "out": ["cos", "at", "outs", "file", "en", "not", "io", "oe", "t", "obj", "conv", "ot", "nt", "up", "aos", "no", "output", "flush", "rem", "ex", "to", "null", "write", "inner", "res", "gt", "on", "outer", "o", "note", "ns", "net", "oss", "conn", "cn", "user", "writer", "mit", "client", "sys", "con", "OUT", "one", "Out", "list", "sum", "it", "nin", "cmd", "bin", "ou", "ne", "can", "co", "os"], "buf": ["aka", "cv", "cur", "bytes", "batch", "log", "bag", "bar", "cat", "queue", "b", "conv", "rb", "font", "msg", "len", "gen", "bl", "good", "mu", "block", "box", "mem", "vec", "img", "bh", "bus", "col", "cf", "fb", "br", "seq", "buffer", "buff", "bs", "cap", "db", "tab", "Buff", "cam", "pad", "cb", "pkg", "uf", "mb", "cmd", "ref", "Buffer", "prop", "bc"], "n": ["ln", "d", "v", "number", "en", "nl", "nb", "b", "k", "t", "nn", "nt", "num", "z", "no", "an", "j", "N", "nm", "span", "ren", "max", "len", "names", "ni", "i", "ll", "m", "on", "ns", "syn", "nor", "cn", "acc", "un", "yn", "nan", "nc", " l", "mn", "nos", "gn", "l", "na", "ne", "nu", "y", "sn"]}}
{"id1": "5607440", "id2": "22752444", "code1": "    public void updateShoppingBean(String userId) {\n        Connection connection = null;\n        PreparedStatement preparedStatement1 = null;\n        PreparedStatement preparedStatement2 = null;\n        try {\n            Class.forName(\"com.mysql.jdbc.Driver\");\n            connection = DriverManager.getConnection(this.jdbcURL);\n            connection.setAutoCommit(false);\n            String preparedQuery = \"INSERT INTO dbComputerShopping.order(name,product_id,quantity,date,status)VALUES(?,?,?,?,?)\";\n            preparedStatement1 = connection.prepareStatement(preparedQuery);\n            Date date = new Date();\n            SimpleDateFormat format = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n            String orderDate = format.format(date);\n            Iterator iterator = this.cart.iterator();\n            Object[] shoppingInfo = null;\n            while (iterator.hasNext()) {\n                shoppingInfo = (Object[]) iterator.next();\n                ProductBean product = (ProductBean) shoppingInfo[0];\n                int quantity = (Integer) shoppingInfo[1];\n                preparedStatement1.setString(1, userId);\n                preparedStatement1.setInt(2, product.getId());\n                preparedStatement1.setInt(3, quantity);\n                preparedStatement1.setString(4, orderDate);\n                preparedStatement1.setString(5, \"confirmed\");\n                preparedStatement1.executeUpdate();\n            }\n            Object[] cartInfo = null;\n            preparedQuery = \"UPDATE components SET quantity=quantity-? WHERE comp_id=?\";\n            preparedStatement2 = connection.prepareStatement(preparedQuery);\n            for (Iterator i = this.cart.iterator(); i.hasNext(); ) {\n                cartInfo = (Object[]) i.next();\n                ProductBean product = (ProductBean) cartInfo[0];\n                int quantity = (Integer) cartInfo[1];\n                ProductListBean productList = new ProductListBean(jdbcURL);\n                ArrayList components = productList.getComponents(product.getId());\n                for (Iterator j = components.iterator(); j.hasNext(); ) {\n                    ComponentBean component = (ComponentBean) j.next();\n                    preparedStatement2.setInt(1, quantity);\n                    preparedStatement2.setInt(2, component.getId());\n                    preparedStatement2.executeUpdate();\n                }\n            }\n            connection.commit();\n        } catch (Exception ex) {\n            try {\n                connection.rollback();\n            } catch (SQLException e) {\n            }\n        } finally {\n            try {\n                connection.close();\n            } catch (SQLException ex) {\n            }\n            try {\n                preparedStatement1.close();\n            } catch (SQLException ex) {\n            }\n            try {\n                preparedStatement2.close();\n            } catch (SQLException ex) {\n            }\n        }\n    }\n", "code2": "    public synchronized String encrypt(String plainText) {\n        String hash = null;\n        try {\n            MessageDigest md = null;\n            try {\n                md = MessageDigest.getInstance(\"SHA\");\n            } catch (NoSuchAlgorithmException e) {\n                throw new NoSuchAlgorithmException();\n            }\n            try {\n                if (plainText != null) md.update(plainText.getBytes(\"UTF-8\"));\n            } catch (UnsupportedEncodingException e) {\n                throw new UnsupportedEncodingException();\n            }\n            byte raw[] = md.digest();\n            hash = (new BASE64Encoder()).encode(raw);\n        } catch (NoSuchAlgorithmException e) {\n            MessageLog.writeErrorMessage(e, this);\n        } catch (UnsupportedEncodingException e) {\n            MessageLog.writeErrorMessage(e, this);\n        }\n        return Util.stripChars(hash);\n    }\n", "label": 0, "substitutes": {"updateShoppingBean": ["updateShowshipSpans", "updateShoppingBeans", "updateShoppingSpaning", "updateShoppingBaning", "updateShowshipSpan", "updateShowshipBean", "updateShoppingSpans", "updateShowshipSpaning", "updateShoppingSpan", "updateShoppingSpin", "updateShowshipBeans", "updateShoppingBans", "updateShoppingBeaning", "updateShoppingMean", "updateShowshipSpin", "updateShoppingBan", "updateShoppingMeaning", "updateShowshipBeaning", "updateShoppingMeans", "updateShoppingMein", "updateShowshipBein", "updateShoppingBin", "updateShoppingBein"], "userId": [" userName", "USERName", "USERLog", "clientName", "userReference", "UserLog", " userid", "USERId", "USERReference", "clientId", "UserReference", "userName", "userid", "userPath", " userPath", " userReference", "clientPath", "clientid", "UserName", "UserId", "Userid", "UserPath", " userLog", "userLog"], "connection": ["settings", "subject", "function", "operation", "communication", "resource", "ion", "creator", "context", "open", "manager", " Connection", "output", "Connection", "network", "bo", "c", "entry", "library", "relation", "session", "query", "condition", "office", "statement", "computer", "close", "link", "license", "city", "server", "engine", "config", "table", "connect", "information", "container", "conn", "database", "writer", "reference", "client", "document", "generation", "application", "pointer", "socket", "driver", "response", "directory", "character", "sql", "management", "usage", "con", "collection", "command"], "preparedStatement1": ["prearedQuery2", "preparedStatementn", "prearedQuery5", "preparedQuery8", "preparedCommentOne", "preparedMessage7", "preparedTransaction9", "preparedTransaction2", "prearedStatement2", "preparedRequest4", "preparedTemplate11", "prearedQuery10", "preprotectedStatement11", "prearedStatement5", "preparedStatementOne", "preparedQuery5", "preparedStat10", "prequalifiedStatementOne", "prequalifiedStatement2", "preparedTransaction11", "preparedStatement6", "preparedStatement9", "preparedQueryn", "preparedMessage8", "preculatedComment8", "preparedstatement5", "prearedStatementn", "prearedStatementOne", "prearedQuery4", "preculatedStatement7", "preculatedCommentOne", "preparedStatOne", "preparedStatement10", "preparedQueryONE", "preparedComment7", "preprotectedStatement9", "preculatedComment7", "preparedTransaction1", "preparedStatement8", "preparedQuery4", "preparedQuery10", "prequalifiedStat1", "prequalifiedStatement1", "preparedComment2", "preparedTemplate12", "preprotectedTemplate11", "preparedStatementONE", "prearedStatement1", "prearedStatement4", "preprotectedTemplate1", "preprotectedTemplate12", "preparedComment4", "preparedStatement5", "preparedStat1", "preparedstatement2", "prearedQuery1", "preprotectedStatement12", "prequalifiedStat6", "preparedPolicy10", "preparedQuery1", "preparedTransaction10", "preparedComment1", "preparedMessageOne", "preparedRequest1", "preparedStatn", "preparedRequest2", "preculatedStatement1", "preculatedComment1", "preprotectedTemplate9", "preparedTemplate1", "preparedStatus1", "preparedstatement1", "preculatedStatement8", "preparedStatONE", "preparedstatement4", "preparedStatus9", "preprotectedStatement1", "preparedRequestOne", "preparedstatementOne", "preparedStatus11", "prequalifiedStatOne", "prearedQueryn", "preparedStatement7", "preparedQueryOne", "prearedQueryOne", "preparedStatement4", "preparedComment8", "preparedQuery7", "prearedStatement10", "preparedComment5", "preparedQuery2", "preculatedStatementOne", "preparedStatus12", "preparedPolicyn", "prequalifiedStatement6", "preparedPolicy1", "preparedStat6", "preparedStatement11", "preparedMessage1", "preparedPolicyOne", "preparedTemplate9", "preparedStat2", "prequalifiedStat2", "preparedStatement12", "preparedTransactionOne", "preparedTransaction12"], "preparedStatement2": ["preparedTransactionSecond", "preparedstatement4", "prearedStatement1", "preededTransactionTwo", "preparedList2", "preparedTransaction4", "preparedTransactionTwo", "preededTransaction4", "preededStatementSecond", "prearedStatementTwo", "preededStatement2", "preparedListTwo", "preparedSessionSecond", "preededTransaction2", "preparedStatementTwo", "preparedTransaction2", "prearedStatement2", "preparedSession2", "preparedstatement2", "preparedStatement4", "preparedListSecond", "preparedSessionTwo", "preededTransactionSecond", "preparedList1", "preparedStatementSecond", "preparedSession4", "preparedTransaction1", "preededStatement4", "preparedstatementSecond", "prearedStatementSecond", "preparedstatementTwo", "preededStatementTwo"], "preparedQuery": ["prearedStatement", "premediatedStatement", "preparedStatement", "PrearedQuery", "PreparedSpec", "prefixedQu", "preparedSpec", "PrearedQu", "PreparedQ", "PrearedStatement", "premediatedQ", "preutedQu", "PrearedQ", "preferredQu", "premediatedQuery", "prefixedSpec", "PreparedQu", "prearedQu", "postparedStatement", "prearedQ", "preparedQL", "preparedQ", "PrearedString", "prearedQL", "preferredQL", "preparedQu", "PreparedQuery", "postparedQuery", "prearedSpec", "PrearedSpec", "prelatedQuery", "postaredQuery", "prelatedQ", "prearedQuery", "PreparedStatement", "PreparedString", "prearedString", "preutedQuery", "preutedString", "prefixedStatement", "precedStatement", "precedQuery", "preutedStatement", "preferredStatement", "postaredQL", "premittedQuery", "premediatedQu", "premittedQL", "postparedQL", "preferredString", "prelatedQu", "postaredStatement", "prefixedQuery", "precedQu", "prelatedStatement", "precedSpec", "preparedString", "premittedStatement", "preferredQuery"], "date": ["late", "address", "number", "when", "dat", "tag", "render", "event", "start", "zone", "month", "age", "time", " day", "query", "day", "grade", "office", "status", "duration", "note", "dt", "message", "result", "get", "draw", "diff", "user", "document", "today", "dated", "data", "ate", "Date", "value", "year", "order", "state", "now"], "format": ["late", "function", "filter", "at", "atter", "string", "file", "apply", "mt", "fix", "append", "cat", "tag", "print", "render", "process", "transform", "sche", "join", "printf", "after", "service", "style", "scale", "output", "export", "call", "act", "write", "pattern", " Format", "html", "license", "f", "pre", "api", "Format", "form", "set", "prefix", "dt", "sort", "get", "writer", "parse", "template", "pretty", "fn", "spec", "data", "value", "add", "use", "it", "layout", "unit", "type", "handler"], "orderDate": ["orderedNow", "gradeDate", "OrderYear", " orderYear", " orderDay", "gradedate", "OrderDay", "orderedYear", "gradeDay", "Orderdate", "orderedDay", "OrderDeliveryDate", "OrderNow", " orderNow", "orderedDate", "gradeDeliveryDate", " orderdate", "orderdate", "orderDeliveryDate", "orderDay", "OrderDate", "orderYear", "orderNow", " orderDeliveryDate"], "iterator": ["river", "later", "sample", "race", "sequence", "pee", "wrapper", "processor", "loader", "history", "former", "creator", "udder", "rounder", "consider", "storage", "walker", "reader", "chest", "network", "Iterator", "filename", "inner", "instance", "ater", "upper", "ippy", "outer", "runner", "internet", "dump", "iter", "trace", "pie", "set", "vector", "counter", "information", "loop", "older", "database", "writer", "starter", "versions", "video", "ter", "ator", "liner", "sequ", "data", "pointer", "finder", "chain", "era", "list", "cache", "directory", "info", "next", "values", "operator", "stream", "integer", "collection", "size"], "shoppingInfo": ["shillingData", "ShippingInfo", "ShippingData", "shppingData", "shppingInfo", "shootingInf", "shillingDetails", "ShoppingInfo", "shppingINFO", "ShippingInformation", "choppingINFO", "shippingInformation", "shoutingDetails", "ShippingDetails", "shitchingData", "shootingInfo", "shippingINFO", "shoutingData", "shoutingInfo", "shoppingData", "shippingData", "shippingInfo", "ShoppingInformation", "shootingData", "sharingInf", "shootingINFO", "shoppingINFO", "shillingInf", "shoutingInf", "shppingInformation", "chootingData", "shillingInfo", "choppingInf", "choppingData", "ShippingInf", "chootingInf", "shoppingInformation", "shitchingInf", "ShoppingDetails", "shppingInf", "shitchingInfo", "ShoppingData", "sharingData", "shippingInf", "shippingDetails", "choppingInfo", "shoppingInf", "sharingInfo", "chootingINFO", "shoppingDetails", "ShoppingInf", "chootingInfo", "sharingInformation"], "product": ["system", "Product", "module", "contact", "material", "id", "pixel", "shop", "resource", "print", "cart", "per", "processor", "process", "property", "position", "program", "device", "service", "attribute", "production", "relation", "node", "category", "pi", "brand", "article", "base", "qualified", "products", "result", "project", "document", "client", "media", "object", "template", "common", "name", "application", "source", "image", "top", "division", "prototype", "order", "translation", "operator", "collection", "command"], "quantity": ["quality", "parularity", "parify", " quanti", "qualitude", "qualularity", "pari", "percentitude", "percentify", "severicity", "materialication", "parity", "materialularity", "severitude", "severication", "quantify", "qualicity", "quantitude", "Quantication", "percenti", "severity", "materialency", "percentity", "quantency", "severency", "quantularity", "Quantity", "materiality", "percentularity", "quantication", "percenticity", "Quantularity", "Quantency", " quantify", " quantularity", "quanti", "quanticity", "severularity"], "cartInfo": ["CartInfo", "CartINFO", "cotData", "chipCheck", "armData", " cartNote", " cartData", " cartInf", "cartNote", "cartInformation", "cartINFO", "chantNotice", "cartCheck", "commerceData", " cartInformation", "chipNote", "cotInfo", "commerceInfo", "cotNote", "CartInf", "cotCheck", "artData", "artInf", "CartData", "commerceNotice", " cartNotice", "cartInf", "artInfo", "chantInfo", "cartData", "chipInfo", "commerceINFO", "chipData", " cartCheck", "chantINFO", "armInf", "cartNotice", " cartINFO", "CartInformation", "artInformation", "chantData", "armINFO", "armInfo"], "i": ["ti", "v", "I", "ic", "h", "p", "li", "gi", "io", "is", "di", "t", "ii", "phi", "mi", "si", "ini", "ice", "iu", "pi", "ci", "m", "cli", "ims", "o", "s", "multi", "init", "xi", "ite", "u", "ij", "me", "im", "ai", "ix", "fi", "l", "ip", "it", "hi", "bi", "info", "ui", "ori", "ami", "y"], "productList": [" productLibrary", "productLibrary", "currentLIST", "cartList", "cartlist", "productlist", "processlist", "processOrder", "cartLIST", "productLIST", "cartLibrary", "cartOrder", "currentlist", "currentLibrary", " productOrder", "productOrder", " productlist", "processList", "currentList", " productLIST"], "components": ["proositories", " Compcomponent", "condonents", "supputes", "commorts", "compducers", "condositories", "supponents", "compositories", " compcomponent", "commutes", "commonent", "condresses", "Compcomponent", "commonents", "Compositories", "coponents", "ompresses", "ompducers", "coputes", "ompositories", "condducers", "comports", " Compresses", "coports", " Compositories", "Components", "coponent", "proresses", "supports", "proonents", "supponent", " compresses", " compositories", "Compresses", "computes", "compcomponent", "compresses", "omponents", " Components", "producers"], "j": ["js", "item", "ji", "v", "p", "jj", "aj", "k", "J", "obj", "z", "ja", "select", "n", "kj", "query", "jo", "m", "Insert", "oj", "insert", "Connect", "connect", "q", "jc", " ii", "ij", "Database", "jl", "l", "json", "g", "SELECT", "this", "sql", "jp"]}}
{"id1": "19912848", "id2": "17729554", "code1": "    public static boolean decodeFileToFile(String infile, String outfile) {\n        boolean success = false;\n        java.io.InputStream in = null;\n        java.io.OutputStream out = null;\n        try {\n            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.DECODE);\n            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n            byte[] buffer = new byte[65536];\n            int read = -1;\n            while ((read = in.read(buffer)) >= 0) {\n                out.write(buffer, 0, read);\n            }\n            success = true;\n        } catch (java.io.IOException exc) {\n            exc.printStackTrace();\n        } finally {\n            try {\n                in.close();\n            } catch (Exception exc) {\n            }\n            try {\n                out.close();\n            } catch (Exception exc) {\n            }\n        }\n        return success;\n    }\n", "code2": "    public boolean clonarFichero(FileInputStream rutaFicheroOrigen, String rutaFicheroDestino) {\n        System.out.println(\"\");\n        boolean estado = false;\n        try {\n            FileOutputStream salida = new FileOutputStream(rutaFicheroDestino);\n            FileChannel canalOrigen = rutaFicheroOrigen.getChannel();\n            FileChannel canalDestino = salida.getChannel();\n            canalOrigen.transferTo(0, canalOrigen.size(), canalDestino);\n            rutaFicheroOrigen.close();\n            salida.close();\n            estado = true;\n        } catch (IOException e) {\n            System.out.println(\"No se encontro el archivo\");\n            e.printStackTrace();\n            estado = false;\n        }\n        return estado;\n    }\n", "label": 1, "substitutes": {"decodeFileToFile": ["decodeString2Files", "decodeFileToFiles", "decodeFileFilefile", "decodeFileFileString", "decodeString2String", "decodeString2file", "decodeFile2Files", "decodeStringToFile", "decodeFileTofile", "decodeFileFileFile", "decodeFileAsString", "decodeFile2File", "decodeStringTofile", "decodeFile2String", "decodeFileAsFiles", "decodeFileToString", "decodeFileFileFiles", "decodeString2File", "decodeFile2file", "decodeFileAsFile", "decodeFileAsfile", "decodeStringToString", "decodeStringToFiles"], "infile": ["Inbase", "fromfilename", "outfolder", "Infile", "inputFile", "outbase", "InFile", "isinname", "fromFile", "inputname", "inputfile", "inFile", "inname", "outfilename", "infolder", "isinfile", "infilename", "isinfolder", "frombase", "Infilename", "inputfolder", "isinFile", "fromfile", "outFile", "outname", "inbase"], "outfile": ["outFILE", "inFILE", "outdir", "todir", " outFILE", "otname", "tofilename", " outname", "Outdir", "otFILE", "otfile", "inFile", "inname", "outfilename", "otFile", "tofile", "indir", "Outfilename", "outFile", "outname", "Outfile", "OutFile", " outFile", "toFile", "infilename"], "in": ["pin", "en", "by", "id", "is", "inf", "t", "per", "up", "al", "cin", "from", "re", "ini", "IN", "inc", "i", "inner", "inside", "ar", "on", " din", "amin", "iter", "form", "din", "conn", "get", "oin", "init", "input", "isin", "ind", "gin", "source", "In", "or", "im", "ins", "rin", "it", "info", "bin", "nin", "ain", "con", "inn"], "out": ["os", "outs", "at", "file", "en", "OU", "io", "print", "b", "t", "ot", "nt", "ion", "aos", "output", "flush", "ex", "n", "to", "null", "write", "inner", "res", "auto", "gt", "on", "outer", "o", "opt", "net", "end", "oss", "cn", "writer", "fn", "sys", "OUT", "Out", "it", "g", "ou", "ne", "can", "co", "con"], "buffer": ["black", "sample", "batch", "number", "binary", "sequence", "variable", "append", "bar", "print", "history", "row", "stack", "phrase", "total", "attribute", "button", "view", "library", "block", "mem", "bone", "base", "note", "initial", "padding", "table", "message", "buff", "paste", "column", "frame", "template", "document", "comment", "memory", "password", "header", "pad", "shape", "window", "cache", "character", "info", "available", "buf", "Buffer", "temp", "display", "command"], "read": ["text", "allow", "send", "first", "print", "before", "length", "count", "start", "select", "skip", "run", "open", "reader", "len", "index", "range", "n", "check", "query", "write", "i", "ok", "close", "wait", "through", "iter", "set", "connect", "end", "each", "get", "READ", "reads", "raw", "req", "push", "input", "ind", "seek", "shift", "readable", "load", "reading", "give", "add", "Read", "ready", "need", "hold", " Read", "stream", "find", "size"], "success": ["submit", "first", "please", " failure", "ratulations", "crit", " succeeds", "unity", "exist", "growth", "complete", "town", "Success", "primary", "good", "successfully", "snap", "safe", "scope", "condition", "cess", "ok", "status", "release", "summary", "valid", "city", "accept", "sufficient", "positive", " successful", "result", "fail", "ccess", "danger", "commit", "second", "support", "setup", "successful", " successes", " okay", "error", "ceed", "photo", " succ", "same", "democracy", "done", "value", "response", " succeed", "continue", "surv"]}}
{"id1": "18374598", "id2": "11952735", "code1": "    private synchronized File download() throws AMSpacksException {\n        String a = addr.url.toExternalForm();\n        int p = a.lastIndexOf('/');\n        if (p < 0) {\n            p = a.lastIndexOf('\\\\');\n        }\n        if (p < 0) {\n            a = \"\" + Math.random();\n        } else {\n            a = a.substring(p + 1);\n        }\n        File td = null;\n        try {\n            td = File.createTempFile(a, \"\").getParentFile();\n        } catch (IOException ex) {\n            td = new File(\".\");\n        }\n        File f = new File(td, a);\n        td.delete();\n        long total = addr.update.getSize();\n        int progress = 0;\n        try {\n            InputStream in = new BufferedInputStream(addr.url.openStream());\n            FileOutputStream out = new FileOutputStream(f);\n            byte[] buf = new byte[500];\n            int n;\n            long percentage = 0;\n            callback.updateProgress(percentage);\n            do {\n                n = in.read(buf);\n                if (n > 0) {\n                    out.write(buf, 0, n);\n                    progress += n;\n                    long tmpPercentage = progress * 100 / total;\n                    if (percentage != tmpPercentage) {\n                        percentage = tmpPercentage;\n                        callback.updateProgress(percentage);\n                    }\n                }\n            } while (n > 0);\n            in.close();\n            out.flush();\n            out.close();\n        } catch (Exception ex) {\n            f.delete();\n            throw new DownloadFailedException(\"Error downloading update.\", ex);\n        }\n        long size = f.length();\n        String checksum = CheckSumFinder.checkSum(f);\n        if (size == addr.update.getSize() && checksum.equalsIgnoreCase(addr.update.getChecksum())) return f; else {\n            f.delete();\n            throw new CheckSumMismathchException(\"Checksum mismatch: \" + addr.update.getChecksum() + \" expected but was \" + checksum);\n        }\n    }\n", "code2": "    public static boolean copyFile(String sourceName, String destName) {\n        FileChannel sourceChannel = null;\n        FileChannel destChannel = null;\n        boolean wasOk = false;\n        try {\n            sourceChannel = new FileInputStream(sourceName).getChannel();\n            destChannel = new FileOutputStream(destName).getChannel();\n            destChannel.transferFrom(sourceChannel, 0, sourceChannel.size());\n            wasOk = true;\n        } catch (Throwable exception) {\n            logger.log(Level.SEVERE, \"Exception in copyFile\", exception);\n        } finally {\n            try {\n                if (sourceChannel != null) sourceChannel.close();\n            } catch (Throwable tt) {\n            }\n            try {\n                if (destChannel != null) destChannel.close();\n            } catch (Throwable tt) {\n            }\n        }\n        return wasOk;\n    }\n", "label": 0, "substitutes": {"download": [" downloads", "pull", "sample", "submit", "file", "delete", "loader", "update", "open", "filename", "url", "Download", "check", "link", "poll", " downloaded", "connect", " Download", "get", "create", "read", "upload", "load", "data", "GET", "save", "dial", "install"], "a": ["d", "path", "address", "v", "ae", "at", "ata", "h", "ia", "any", "ga", "part", "b", "aaa", "t", "alpha", "aw", "aa", "aos", "ca", "an", "al", "ab", "from", "attribute", "go", "url", "r", "c", "i", "apa", "title", "area", "sa", "html", "arg", "ar", "sta", "o", "as", "base", "va", "ma", "s", "ta", "app", "all", "la", "eta", "u", "name", "att", "data", "ap", "am", "ao", "ac", "el", "era", "array", "pa", "ai", "l", "na", "au", "A", "oa"], "p": ["d", "ping", "perm", "op", "pb", "P", "h", "tp", "lp", "pt", "pro", "np", "vp", "part", "b", "t", "j", "pg", "prop", "cp", "c", "i", "pl", "pi", "pat", "wp", "m", "pre", "ps", "pers", " pe", "pe", "q", "pid", "power", "pr", "x", "ap", "pa", "pp", "pad", "rep", "bp", "pkg", "l", "pos", "ip", "g", "pard", "pc", "jp", "par"], "td": ["d", "pb", "pt", "fc", "pd", "dial", "tp", "ld", "fd", "lf", "t", "ot", "nt", "ptr", "nd", " sd", "tif", "dl", "ts", "tf", "ad", "det", "cz", "md", "TD", "ct", "dt", "sd", "dd", "th", "tmp", " TD", "hd", "db", "ds", "cd", "deb", "od", "bd", "tap", "tr", "dh", "cot", "df", "tc", "pc", "div", "dc"], "f": ["F", "d", "v", "fl", "fw", "fc", "file", "h", "fd", "b", "lf", "t", "e", "fx", "j", "c", "fe", "tf", "i", "ff", "fin", "sf", "o", "cf", "fs", "fb", "form", "alf", "ft", "xf", "fp", "rf", "fn", "fo", "func", "bf", "fm", "fi", "l", "uf", "df", "g", "fr", "fa", "af", "w"], "total": ["trans", "number", "sequence", "length", "t", "count", "stable", "nt", "start", "num", "current", "max", "open", "scale", "complete", "percent", "len", "to", "otal", "meta", "valid", "initial", "base", "note", "normal", "table", "buffer", "net", "ta", "active", "all", "eta", "template", "sys", "le", "done", "equal", "sum", "available", "info", "full", "none", "unique", "last", "Total"], "progress": ["address", "pdf", "finished", "step", "pro", "bar", "speed", "resource", "print", "process", "debug", "length", "count", "t", "update", "history", "success", "ptr", "portion", "scale", "complete", "current", "percent", "age", "performance", "grade", "scroll", "status", "summary", "wait", "poll", "result", "payment", "offset", "priority", "dist", "Progress", "done", "memory", "distance", "report", "depth", "state", "important", "continue", "usage", "display"], "in": ["win", "ic", "en", "by", "io", "is", "inf", "cin", "from", "to", "IN", "inc", "i", "ini", "inner", "inside", "ze", "on", "ar", "o", "iter", "din", "get", "init", "oin", "input", "mm", "ind", "In", "im", "and", "ai", "ins", "l", "rin", "it", "bin", "con", "inn"], "out": ["os", "err", "v", "outs", "put", "at", "lock", "OU", "log", "by", "io", "b", "t", "obj", "nt", "aos", "output", "c", "to", "ex", "null", "write", "vol", "res", "auto", "outer", "on", "o", "net", "s", "end", "oss", "conn", "cn", "ch", "writer", "client", "sys", "OUT", "Out", "cb", "list", "ins", "l", "pos", "it", "g", "cache", "pool", "ou", "can", "ne", "co", "con", "w"], "buf": ["cv", "aka", "bed", "bytes", "batch", "pb", "bag", "cat", "bar", "orig", "b", "conv", "arr", "rb", "row", "msg", "norm", "cp", "bl", "box", "block", "mu", "vec", "img", "obs", "br", "seq", "buffer", "buff", "cap", "db", "wb", "tab", "data", "Buff", "cb", "pkg", "window", "uf", "ob", "cmd", "bin", "Buffer", "next"], "n": ["ln", "d", "v", "number", "en", "wn", "np", "nl", "nb", "b", "count", "t", "nr", "nt", "num", "z", "nn", "j", "no", "an", "N", "max", "nm", "ren", "dn", "norm", "len", "names", "c", "ng", "i", "m", "on", "ns", "o", "note", "nor", "cn", "nw", "min", "yn", "fn", "nan", "x", "nc", "gn", "l", "na", "g", "ne", "none", "y", "sn", "w"], "percentage": ["percentant", "scaleility", "parage", "centAGE", "scaleager", "percentile", "scaleage", "propile", "centade", "percentager", "CENTade", "taxance", "oppage", "Percentade", "parager", "percentume", "taxage", "centategy", "Percentume", "percentategy", "percentity", "CENTategy", "percentAGE", "percentension", "parAGE", "Percentant", "oppility", "Percentility", "quantage", "Percentategy", "centager", "Percentity", "quantility", "parility", "centile", "parension", "percentility", "scaleAGE", "quantance", "taxility", "oppant", "Percentage", "taxension", "Percentile", "percentance", "propity", "percentade", "centity", "centility", "centume", "propage", "propade", "CENTage", "parance", "CENTume", "quantension", "centage", "oppade"], "tmpPercentage": ["tmpPercentages", "tmpPropage", "tmpIntade", " tmppercentate", "tmpPlusane", "tmpMagnate", " tmpIntance", "tmppercentate", "tmpMagnade", "tmpPercentency", "tmpPropade", "tmpIntage", "tmpMagnages", "tmpPropency", "tmpPlusage", " tmpPercenture", " tmpPercentade", "tmpPercentate", "tmppercentane", " tmppercentage", "tmpPropance", "tmppercentade", "tmpPercentance", "tmppercentage", " tmpIntency", "tmpIntency", " tmppercentane", " tmpPercentance", " tmpPercentency", "tmppercenture", " tmpIntage", " tmpPercentate", " tmpPercentages", "tmpMagnage", "tmpPercentade", "tmpIntance", " tmppercentages", " tmppercentade", " tmppercenture", "tmpPlusade", "tmpPercentane", "tmpPlusure", "tmpPercenture", " tmpPercentane", "tmppercentages", " tmpIntade"], "size": ["send", "bytes", "sw", "ose", "used", "Size", "length", "e", "count", "position", "num", "needed", "max", "scale", "storage", "len", "c", "ize", "code", "area", "ze", "notice", "small", "set", "sd", "sp", "s", "loss", "loc", "capacity", "see", "name", "l", "empty", "SIZE", "sum", "g", "body", "space", "sn", "now"], "checksum": ["cksum", "hascan", "timesum", "hsul", "ckssum", "cksave", "timesul", "checksam", "readsave", "hsumm", "kssum", " checkssum", "ckscan", "hasam", "actionsum", "readssum", "ksam", "checkssum", "checksul", "kscan", "timesave", "hsum", "timessum", "cksul", "hassum", "checksumm", "ksum", "hssum", " checksumm", "readsul", "actionsumm", "checkscan", "readsum", "actionssum", "hasum", "actionsul", " checksul", "cksam", "checksave"]}}
{"id1": "11616716", "id2": "14473711", "code1": "    private static InputStream getCMSResultAsStream(String rqlQuery) throws RQLException {\n        OutputStreamWriter osr = null;\n        try {\n            URL url = new URL(\"http\", HOST, FILE);\n            URLConnection conn = url.openConnection();\n            conn.setDoOutput(true);\n            osr = new OutputStreamWriter(conn.getOutputStream());\n            osr.write(rqlQuery);\n            osr.flush();\n            return conn.getInputStream();\n        } catch (IOException ioe) {\n            throw new RQLException(\"IO Exception reading result from server\", ioe);\n        } finally {\n            if (osr != null) {\n                try {\n                    osr.close();\n                } catch (IOException ioe) {\n                }\n            }\n        }\n    }\n", "code2": "    public static String str2md5(String str) {\n        try {\n            MessageDigest alga = MessageDigest.getInstance(MESSAGE_DIGEST_TYPE);\n            alga.update(str.getBytes());\n            byte[] digesta = alga.digest();\n            return byte2hex(digesta);\n        } catch (NoSuchAlgorithmException ex) {\n            return str;\n        }\n    }\n", "label": 0, "substitutes": {"getCMSResultAsStream": ["getCMSResultAsView", "getCMSResultsAsSteam", "getCMSResultsasString", "getCMSResultasSteam", "getCMSResultsasSteam", "getCMSResultasView", "getCMSResultsasStream", "getCMSResultAsString", "getCMSResultsAsView", "getCMSResultasStream", "getCMSResultsAsString", "getCMSResultsAsStream", "getCMSResultsasView", "getCMSResultasString", "getCMSResultAsSteam"], "rqlQuery": ["RQLQuery", "rqlquery", "rviewCommand", "RQLCommand", " rqlStatement", "rQLQuery", "rsqlString", "rumbleQuery", "rqlCommand", "rviewQuery", "rqQuery", "rQLCommand", "rQLquery", "rqquery", "RqlQuery", "rqStatement", "rsqlStatement", "rqString", " rsqlString", "rumbleStatement", "Rqlquery", "RQLquery", " rsqlQuery", "rumbleString", " rsqlStatement", "rviewquery", "RqlCommand", " rqlString", "rsqlQuery", "rqCommand", "rqlString", "rqlStatement"], "osr": ["osq", "osvr", "ossd", "oesrator", " osvr", "oscr", "osesmr", "oser", " oscr", "iosrg", "osrar", "oesrw", " osrar", "ossvr", "ooscr", "osmr", "iosrator", "iosd", "iosq", "iosmr", "osser", "ossr", "oesr", "oessr", "ioscr", " ossr", " osrg", "oeser", "ooser", "osssr", "osesr", "iosh", "osscr", "ossrg", "posr", "osesrw", "iossr", " osmr", "osd", "osrg", "oseser", "ossrar", "ovr", "osh", "oosd", "ossmr", "ioser", "ossh", "oesmr", "ossq", "or", "oosr", "iosvr", "ossrw", " osh", "orar", "osrw", "posrator", "osrator", "possr", " osq", "iosr"], "url": ["build", "sl", "gl", "ret", "Url", "ld", "abs", "str", "nl", "mail", "char", "ls", "ol", "open", "dl", "ll", "host", "https", "ssl", "link", "uri", "rel", "URL", "web", "net", "loc", "ur", "cert", "client", "bel", "hl", "http", "mount", "el", "pkg", "l", "mb", "il", "lb", "ul"], "conn": ["win", "os", "cur", "canon", "obj", "Conn", "nt", "conv", "j", "pg", "open", "conf", "comm", "cp", "ctx", "c", "pas", "n", "act", "proc", "connection", "res", "close", "link", "ns", "col", "rel", "syn", "ct", "connect", "loc", "resp", "out", "cn", "init", "ch", "req", "nw", "cert", "client", "nc", "sys", "cont", "socket", "addr", "exec", "enc", "cb", "l", "connected", "cmd", "sync", "org", "jp", "con"]}}
{"id1": "14168494", "id2": "22441244", "code1": "    public static void copyFile(File dest, File src) throws IOException {\n        FileChannel srcChannel = new FileInputStream(src).getChannel();\n        FileChannel dstChannel = new FileOutputStream(dest).getChannel();\n        dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n        srcChannel.close();\n        dstChannel.close();\n    }\n", "code2": "    public void send(org.hibernate.Session hsession, Session session, String repositoryName, int ideIdint, String to, String cc, String bcc, String subject, String body, Vector attachments, boolean isHtml, String charset, InternetHeaders headers, String priority) throws MailException {\n        try {\n            if (charset == null) {\n                charset = MimeUtility.javaCharset(Charset.defaultCharset().displayName());\n            }\n            if ((body == null) || body.trim().equals(\"\")) {\n                body = \" \";\n            }\n            Email email = null;\n            if (isHtml) {\n                email = new HtmlEmail();\n            } else {\n                email = new MultiPartEmail();\n            }\n            email.setCharset(charset);\n            Users user = getUser(hsession, repositoryName);\n            Identity identity = getIdentity(hsession, ideIdint, user);\n            InternetAddress _returnPath = new InternetAddress(identity.getIdeEmail(), identity.getIdeName());\n            InternetAddress _from = new InternetAddress(identity.getIdeEmail(), identity.getIdeName());\n            InternetAddress _replyTo = new InternetAddress(identity.getIdeReplyTo(), identity.getIdeName());\n            InternetAddress[] _to = MessageUtilities.encodeAddresses(to, null);\n            InternetAddress[] _cc = MessageUtilities.encodeAddresses(cc, null);\n            InternetAddress[] _bcc = MessageUtilities.encodeAddresses(bcc, null);\n            if (_from != null) {\n                email.setFrom(_from.getAddress(), _from.getPersonal());\n            }\n            if (_returnPath != null) {\n                email.addHeader(\"Return-Path\", _returnPath.getAddress());\n                email.addHeader(\"Errors-To\", _returnPath.getAddress());\n                email.addHeader(\"X-Errors-To\", _returnPath.getAddress());\n            }\n            if (_replyTo != null) {\n                email.addReplyTo(_replyTo.getAddress(), _replyTo.getPersonal());\n            }\n            if ((_to != null) && (_to.length > 0)) {\n                HashSet aux = new HashSet(_to.length);\n                Collections.addAll(aux, _to);\n                email.setTo(aux);\n            }\n            if ((_cc != null) && (_cc.length > 0)) {\n                HashSet aux = new HashSet(_cc.length);\n                Collections.addAll(aux, _cc);\n                email.setCc(aux);\n            }\n            if ((_bcc != null) && (_bcc.length > 0)) {\n                HashSet aux = new HashSet(_bcc.length);\n                Collections.addAll(aux, _bcc);\n                email.setBcc(aux);\n            }\n            email.setSubject(subject);\n            Date now = new Date();\n            email.setSentDate(now);\n            File dir = new File(System.getProperty(\"user.home\") + File.separator + \"tmp\");\n            if (!dir.exists()) {\n                dir.mkdir();\n            }\n            if ((attachments != null) && (attachments.size() > 0)) {\n                for (int i = 0; i < attachments.size(); i++) {\n                    ByteArrayInputStream bais = null;\n                    FileOutputStream fos = null;\n                    try {\n                        MailPartObj obj = (MailPartObj) attachments.get(i);\n                        File file = new File(dir, obj.getName());\n                        bais = new ByteArrayInputStream(obj.getAttachent());\n                        fos = new FileOutputStream(file);\n                        IOUtils.copy(bais, fos);\n                        EmailAttachment attachment = new EmailAttachment();\n                        attachment.setPath(file.getPath());\n                        attachment.setDisposition(EmailAttachment.ATTACHMENT);\n                        attachment.setDescription(\"File Attachment: \" + file.getName());\n                        attachment.setName(file.getName());\n                        if (email instanceof MultiPartEmail) {\n                            ((MultiPartEmail) email).attach(attachment);\n                        }\n                    } catch (Exception ex) {\n                    } finally {\n                        IOUtils.closeQuietly(bais);\n                        IOUtils.closeQuietly(fos);\n                    }\n                }\n            }\n            String mid = getId();\n            if (headers != null) {\n                Header xheader;\n                Enumeration xe = headers.getAllHeaders();\n                for (; xe.hasMoreElements(); ) {\n                    xheader = (Header) xe.nextElement();\n                    if (xheader.getName().equals(RFC2822Headers.IN_REPLY_TO)) {\n                        email.addHeader(xheader.getName(), xheader.getValue());\n                    } else if (xheader.getName().equals(RFC2822Headers.REFERENCES)) {\n                        email.addHeader(xheader.getName(), xheader.getValue());\n                    }\n                }\n            } else {\n                email.addHeader(RFC2822Headers.IN_REPLY_TO, \"<\" + mid + \".JavaMail.duroty@duroty\" + \">\");\n                email.addHeader(RFC2822Headers.REFERENCES, \"<\" + mid + \".JavaMail.duroty@duroty\" + \">\");\n            }\n            if (priority != null) {\n                if (priority.equals(\"high\")) {\n                    email.addHeader(\"Importance\", priority);\n                    email.addHeader(\"X-priority\", \"1\");\n                } else if (priority.equals(\"low\")) {\n                    email.addHeader(\"Importance\", priority);\n                    email.addHeader(\"X-priority\", \"5\");\n                }\n            }\n            if (email instanceof HtmlEmail) {\n                ((HtmlEmail) email).setHtmlMsg(body);\n            } else {\n                email.setMsg(body);\n            }\n            email.setMailSession(session);\n            email.buildMimeMessage();\n            MimeMessage mime = email.getMimeMessage();\n            int size = MessageUtilities.getMessageSize(mime);\n            if (!controlQuota(hsession, user, size)) {\n                throw new MailException(\"ErrorMessages.mail.quota.exceded\");\n            }\n            messageable.saveSentMessage(mid, mime, user);\n            Thread thread = new Thread(new SendMessageThread(email));\n            thread.start();\n        } catch (MailException e) {\n            throw e;\n        } catch (Exception e) {\n            throw new MailException(e);\n        } catch (java.lang.OutOfMemoryError ex) {\n            System.gc();\n            throw new MailException(ex);\n        } catch (Throwable e) {\n            throw new MailException(e);\n        } finally {\n            GeneralOperations.closeHibernateSession(hsession);\n        }\n    }\n", "label": 1, "substitutes": {"copyFile": [" cpByte", " copyStream", " cpStream", " copyByte", " Copyfile", "CopyByte", " cpfile", " CopyStream", " copyfile", " CopyFile", "CopyFile", " CopyByte", "Copyfile", " cpFile", "CopyStream"], "dest": ["master", "d", "v", "trans", "them", "dir", "des", "np", "orig", "st", "Dest", "nt", "target", "nom", "way", "to", "good", "img", "gt", "origin", "result", "loc", "out", "tmp", "doc", "usr", "nw", "etc", "www", "dist", "source", "rest", "cont", "pub", "del", "temp", "w"], "src": ["sec", "sr", "sl", "sq", "cur", "file", "rx", "st", "start", "ls", "from", "rs", "img", "rel", "desc", "sc", "Source", "sb", "loc", "sel", "init", "usr", "req", "input", "upload", "sys", "source", "cont", "rc", "ser", "ins", "sub", "inst", "iv"], "srcChannel": ["instCan", "destChan", " srcMessage", "rcCommand", "sqCan", "srcchannel", "destMessage", "bgCan", " srcChan", "rcChain", "srcCh", "sourceChan", "sqPanel", "rcChannel", "srcCan", "rcChan", " srcChain", "sourceCh", "instPanel", "srcCommand", "bgPanel", "destChannel", "srcMessage", " srcchannel", "rcMessage", "instChannel", "instCh", "rcchannel", "destChain", "srcChan", "instChain", "srcPanel", " srcCh", " srcCommand", "sqChain", "instChan", "sysCommand", "srcChain", "bgChain", "sourceChannel", "sysChan", "sysChannel", "sqChannel", "bgChannel", "syschannel"], "dstChannel": ["ddestCommand", "dbrChannel", " dstHandler", "destClient", "pdestCommand", " dstButton", "dstClient", "pstCommand", "pdestChannel", " dotChannel", "dndCommand", "dndChannel", " dstCh", " dotHandler", "dstButton", "destChannel", "ddestChannel", "ddestChan", "ddestCh", " dstChan", "dotChannel", "dstCommand", "pdestButton", "dotButton", "dstCh", "destButton", "destCommand", "dndChan", "dbrChan", "ddestClient", "dndCh", "dstChan", " dotCh", "dndButton", "pstChannel", "dbrCh", "pdestClient", " dotChan", "ddestHandler", "dotChan", "ddestButton", "dndClient", "pstClient", "pstButton", "dotHandler", "dstHandler", " dotButton", "dbrHandler", "dotCh"]}}
{"id1": "19934218", "id2": "5723876", "code1": "    public static String doCrypt(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n        MessageDigest md;\n        md = MessageDigest.getInstance(\"SHA-1\");\n        byte[] sha1hash = new byte[40];\n        md.update(text.getBytes(\"UTF-8\"), 0, text.length());\n        sha1hash = md.digest();\n        return convertToHex(sha1hash);\n    }\n", "code2": "    public static final String calculate(File f) {\n        MessageDigest md;\n        BufferedReader rd;\n        StringBuffer buffer = new StringBuffer(\"\");\n        try {\n            rd = new BufferedReader(new FileReader(f));\n            md = MessageDigest.getInstance(\"SHA\");\n            String line = \"\";\n            while ((line = rd.readLine()) != null) buffer.append(line);\n            md.update(buffer.toString().getBytes());\n            byte[] digest = md.digest();\n            String result = \"\";\n            for (byte b : digest) result += String.format(\"%h\", b & 0xFF);\n            return result;\n        } catch (Exception ex) {\n            ex.printStackTrace();\n            return \"\";\n        }\n    }\n", "label": 1, "substitutes": {"doCrypt": [" doescrypt", " doesDec", "doDec", "docrypt", " doesHash", "DoDec", "DoHash", "doHash", "DoCrypt", " doHash", "Docrypt", " docrypt", " doesCrypt", " doDec"], "text": ["path", "subject", "pt", "string", "binary", "log", "txt", "Text", "str", "term", "print", "test", "t", "event", "nt", "context", "msg", "select", "output", "aut", "url", "content", "act", "ext", "pattern", "code", "title", "config", "form", "ct", "buffer", "message", "format", "command", "input", "read", "document", "name", "template", "comment", "data", "x", "source", "cont", "value", "key", "password", "TEXT", "tx", "translation", "body", "now", "w", "word"], "UnsupportedEncodingException": ["UnsupportedEncodingEx", "UnsupportedEncgorithmException", "UnsupportedChoderException", "UnsupportedEncoderExit", "UnsupportedChoderEx", "UnsupportedChoderExit", "UnsupportedEncoderException", "UnsupportedChodingEx", "UnsupportedEncryptionError", "UnsupportedChoderError", "UnsupportedEncgorithmEx", "UnsupportedChodingException", "UnsupportedChodingExit", "UnsupportedEncryptionEx", "UnsupportedEncryptionException", "UnsupportedEncgorithmError", "UnsupportedEncryptionExit", "UnsupportedEncgorithmExit", "UnsupportedEncodingExit", "UnsupportedEncodingError", "UnsupportedEncoderEx", "UnsupportedEncoderError", "UnsupportedChodingError"], "md": ["mc", "d", " man", " od", "pd", "dir", "mt", "ld", "di", "sm", " ms", " maj", " mo", "nd", " cd", "red", "det", "ad", "m", " dd", " rm", "ms", "sd", "dd", "mand", "rm", "td", "hd", " mp", "mm", " mac", "ind", "cd", "mk", "od", "bd", " exec", "mg", " cmd", "mn", "dm", "add", "mp", "sha", "der", "df", "ent", "mb", "cmd", "grad", "MD", "gm", " Md", " df"], "sha1hash": ["sha2sum", " SHA1cache", " SHAOnecache", "sha512sum", "shaOnesum", "sha4hash", "shaonesum", "sha3hash", "SHA2Hash", "sha3key", "SHA1key", "sha512cache", " SHA1hash", "shaOnehash", "sha512Hash", "shaonekey", "sha3hex", "sha1cache", "haonehash", "SHA1hash", "sha2hash", "haonecache", "shaOnecache", "SHA2key", "sha1key", "ha1cache", "ha1sum", "sha1sum", "shaonehex", "sha2cache", "ha1hash", "sha1Hash", "SHA2hash", " SHAOneheader", "sha2hex", "sha3Hash", "shaoneHash", "sha4cache", "SHA1hex", "sha512hash", "sha1header", " SHA1header", "SHA2hex", "shaonehash", "shaonecache", "sha2Hash", " SHAOnesum", "sha4header", "sha4sum", "ha1Hash", "SHA1Hash", "sha2key", " SHAOnehash", "shaOneheader", "sha2header", "sha1hex", " SHA1sum", "haoneHash", "haonesum"]}}
{"id1": "841724", "id2": "9236363", "code1": "    private static void readAndRewrite(File inFile, File outFile) throws IOException {\n        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n        Dataset ds = DcmObjectFactory.getInstance().newDataset();\n        dcmParser.setDcmHandler(ds.getDcmHandler());\n        dcmParser.parseDcmFile(null, Tags.PixelData);\n        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        System.out.println(\"reading \" + inFile + \"...\");\n        pdReader.readPixelData(false);\n        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n        ds.writeDataset(out, dcmEncParam);\n        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n        System.out.println(\"writing \" + outFile + \"...\");\n        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        pdWriter.writePixelData();\n        out.flush();\n        out.close();\n        System.out.println(\"done!\");\n    }\n", "code2": "    private void unJarStart(String jarPath, String jarEntryStart) {\n        String path;\n        if (jarPath.lastIndexOf(\"lib/\") >= 0) path = jarPath.substring(0, jarPath.lastIndexOf(\"lib/\")); else path = jarPath.substring(0, jarPath.lastIndexOf(\"/\"));\n        String relPath = jarEntryStart.substring(0, jarEntryStart.lastIndexOf(\"/\"));\n        try {\n            new File(path + \"/\" + relPath).mkdirs();\n            JarFile jar = new JarFile(jarPath);\n            Enumeration<JarEntry> entries = jar.entries();\n            while (entries.hasMoreElements()) {\n                JarEntry entry = entries.nextElement();\n                String jarEntry = entry.getName();\n                if (jarEntry.startsWith(jarEntryStart)) {\n                    ZipEntry ze = jar.getEntry(jarEntry);\n                    File bin = new File(path + \"/\" + jarEntry);\n                    IOUtils.copy(jar.getInputStream(ze), new FileOutputStream(bin));\n                }\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n", "label": 1, "substitutes": {"readAndRewrite": ["readAndrewWrite", "readAndResrite", "readAndResend", "readAndReprites", "readAndRewWrite", "readAndrewrites", "readAndRewend", "readAndResrites", "readAndrewend", "readAndReprite", "readAndResWrite", "readAndRepWrite", "readAndRewrites", "readAndRepend", "readAndrewrite"], "inFile": ["docFile", "InFilename", "inFILE", "docFILE", "initFilename", "docFilename", "Infile", "inputFile", "iTime", "inputFilename", "iFilename", "INPlace", " inFilename", "outfile", " infile", "inputFace", "InFile", "infile", "INFILE", "INFilename", "INFace", "inPlace", "inFace", "initFile", "initFace", "iFile", "initPlace", "INFile", "iFILE", "inputPlace", "inTime", "outFilename", "INTime", "inFilename", "docTime"], "outFile": ["outFILE", "checkFile", "inFILE", "checkFilename", " outFilename", "checkfile", " outfile", "nameFILE", " outFILE", "reportFILE", "outfile", "reportFile", "toFilename", "infile", "nameFile", "reportFilename", "tofile", "checkFILE", "namefile", "outFilename", "nameFilename", "inFilename", "toFILE", "reportfile", "toFile"], "iis": ["liisc", "eIS", " iIS", "eis", "iiss", "iisc", "ii", "liIs", "iIS", "Iiss", " iisc", "liris", "iiis", "Iis", "diIs", "aiis", "iris", "iiris", "diiss", "IIs", "iIs", " iiss", "diis", "aiIS", "iiisc", "dii", " ii", " iIs", "liis", "Ii", "iiIs", " iris", "aiIs", "eIs"], "dcmParser": ["dcfStatement", "dmodulePrivate", " dpmPar", " dpmLoader", "dmmAdapter", "dmoduleParser", " dpmReader", "dpmLoader", "dfmLoader", "dromAssistant", "dmmmAdapter", "dcmAssistant", "DpmAdapter", "dpmparser", "dcfReader", "dmmparser", "dcfParser", "DpmReader", "DcmAdapter", "dcomParser", "dmmmParser", "dmoduleReader", " dcmarser", " dcmLoader", "dcommReader", "dcrParser", "deromarser", "dcrBuilder", "dcmBuilder", "dmparser", "dpcParser", "dpmParser", "dpmarser", "dmmarser", "dfmParser", "dromListener", "dcomLoader", "dcomBuilder", "dcomReader", " dcmListener", "decmReader", "drumBuilder", "dpmAssistant", "dpcPrivate", "drumReader", "dmmmReader", "dpmReader", "dpmBuilder", "dromparser", "decmParser", "dpmPar", "DcmBuilder", "dmmmparser", "dcmLoader", " dpmParser", "decmarser", " dcmparser", "dcrReader", " dpmPrivate", "dpmListener", "deromReader", "drumParser", " dpmBuilder", "dromarser", "decmparser", "dcommParser", "dmParser", " dcmPar", "Dpmparser", "dmmParser", "dfmBuilder", "deromparser", "dpcAssistant", "dmmReader", "DpmParser", "dromParser", "dgrPar", "dgrStatement", " dcmAssistant", "dcfPar", "dcmarser", " dcmBuilder", "DcmReader", " dcmReader", " dpmStatement", "dmoduleAssistant", "dpcReader", "dcommAssistant", "dromReader", " dpmarser", "dcmparser", "dcrparser", "DcmPar", "dmarser", "dpmAdapter", " dpmAssistant", "dcmReader", "dfmReader", "dgrReader", "dcmPrivate", "DpmPar", "dmReader", " dpmparser", "DpmBuilder", "dcmStatement", "dcmListener", "dpmPrivate", " dcmPrivate", " dpmListener", "dcmPar", "dpmStatement", "drumPar", "dgrParser", "dcmAdapter", "Dcmparser", "deromParser", "dcommListener", " dcmStatement", "DcmParser"], "ds": ["d", "js", "ks", "eds", "outs", "pd", "des", "vs", "dat", "da", "dds", "gd", "qs", "dq", "eps", "ws", "xs", "in", "aos", "ls", "hs", "gs", "rs", "tes", "dl", "dx", "uds", "DS", "cs", "obs", "ims", "fs", "ns", "as", "ps", "ads", "sets", "ils", "sd", "dt", "dd", "s", "bs", "pers", "hd", " des", "its", "db", " DS", "services", "Ds", "sys", "data", "bd", "drivers", "sv", "details", "dos", "dh", "der", "ins", "df", "es", "ss", "ods", "os", "ys"], "pdReader": ["dpReader", "tdParser", "dpCar", "pdHelper", "hdReader", "pedReader", "tdWriter", "hdParser", "ddCar", "ddRunner", "hdWriter", "vdReader", "vdHelper", "pdCar", "dpLoader", "pdParser", "pdRead", "xdWriter", "xdReader", "ddRead", "pdLoader", "ddParser", "ddHelper", "vdWriter", "ddLoader", "xdLoader", "pedRunner", "tdReader", "hdRead", "ddReader", "vdLoader", "pdRunner", "tdRead", "pedLoader", "pedCar", "ddWriter", "xdHelper", "dpRunner"], "out": ["serv", "sw", "t", "conv", "msg", "aos", "output", "gen", "auto", "on", "opt", "screen", "ch", "all", "cfg", "name", "con", "list", "ins", "pos", "ent", "pool", "full", "w", "err", "v", "at", "p", "txt", "io", "up", "in", "flush", "c", "ex", " err", "inter", "status", "o", "net", "s", "raw", "tmp", "conn", "cn", "gr", "client", "sys", "data", "one", "sum", "cmd", "outs", "js", "log", "str", "id", "obj", "we", "to", "n", "null", "inner", "res", "outer", "desc", "writer", "over", "OUT", "Out", "cache", "it", "ou", "en", "nr", "nt", "inv", "go", "gt", "end", "oss", "cb", "co", "os"], "dcmEncParam": ["dmmencCmd", "dcmDecNum", "dmmEnPar", "dcmencPar", "dcmEscParam", "dmmencMsg", "dmmEncMsg", "dmmencParam", "dcmEncVal", "dcmEscVal", "dmmEnParam", "dmmEncVal", "dmmEncPar", "dcmEnNum", "dcmEnPar", "dcmDecCmd", "dcmencMsg", "dcmencCmd", "dmmEncNum", "dcmEnVal", "dcmEncMsg", "dcmEncCmd", "dcmDecParam", "dmmEncParam", "dcmencNum", "dcmEscNum", "dcmDecMsg", "dmmEncCmd", "dmmEnNum", "dcmEncNum", "dmmencNum", "dcmencParam", "dcmEscPar", "dcmEnParam", "dcmEncPar"], "pdWriter": ["dpReader", "PDWrite", "dpWrite", "dpEditor", "tdWriter", "pcwriter", "pidWrite", "dpWriter", "PDWriter", "tdWrite", "tdEditor", "PDEditor", "pdEditor", "pdwriter", "pidWriter", "pidWriting", "tdwriter", "pidwriter", "tdReader", "pdWrite", "pcWriter", "PDReader", "pcWrite", "pcWriting", "pdWriting", "tdWriting"]}}
{"id1": "6908537", "id2": "18570190", "code1": "    public String login() {\n        System.out.println(\"Logging in to LOLA\");\n        try {\n            String data = URLEncoder.encode(\"email\", \"UTF-8\") + \"=\" + URLEncoder.encode(get_email(), \"UTF-8\");\n            data += \"&\" + URLEncoder.encode(\"pw\", \"UTF-8\") + \"=\" + URLEncoder.encode(get_pw(), \"UTF-8\");\n            URL url = new URL(URL_LOLA + FILE_LOGIN);\n            URLConnection conn = url.openConnection();\n            conn.setDoOutput(true);\n            OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());\n            wr.write(data);\n            wr.flush();\n            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n            String line, sessid;\n            line = rd.readLine();\n            sessid = get_sessid(line);\n            this.set_session(sessid);\n            wr.close();\n            rd.close();\n            return sessid;\n        } catch (Exception e) {\n            System.out.println(\"Login Error\");\n            return \"\";\n        }\n    }\n", "code2": "    public Processing getProcess(long processId) throws BookKeeprCommunicationException {\n        try {\n            synchronized (httpClient) {\n                HttpGet req = new HttpGet(remoteHost.getUrl() + \"/id/\" + Long.toHexString(processId));\n                HttpResponse resp = httpClient.execute(req);\n                if (resp.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\n                    try {\n                        XMLAble xmlable = XMLReader.read(resp.getEntity().getContent());\n                        if (xmlable instanceof Processing) {\n                            Processing p = (Processing) xmlable;\n                            return p;\n                        } else {\n                            throw new BookKeeprCommunicationException(\"BookKeepr returned the wrong thing for pointingID\");\n                        }\n                    } catch (SAXException ex) {\n                        Logger.getLogger(BookKeeprConnection.class.getName()).log(Level.WARNING, \"Got a malformed message from the bookkeepr\", ex);\n                        throw new BookKeeprCommunicationException(ex);\n                    }\n                } else {\n                    resp.getEntity().consumeContent();\n                    throw new BookKeeprCommunicationException(\"Got a \" + resp.getStatusLine().getStatusCode() + \" from the BookKeepr\");\n                }\n            }\n        } catch (HttpException ex) {\n            throw new BookKeeprCommunicationException(ex);\n        } catch (IOException ex) {\n            throw new BookKeeprCommunicationException(ex);\n        } catch (URISyntaxException ex) {\n            throw new BookKeeprCommunicationException(ex);\n        }\n    }\n", "label": 0, "substitutes": {"login": [" Login", "Login", "submit", "log", "update", "in", "auth", "open", "username", "session", "write", "connection", "console", "close", "config", "connect", "user", "setup", "download", "register", "save", "password", "hello", "request", "layout", "account", "dial"], "data": ["text", "d", "ata", "dat", "string", "p", "post", "str", "id", "debug", "part", "test", "join", "success", "no", "output", "content", "dl", "red", "connection", "session", "feed", "html", "rel", "reason", "def", " DATA", "api", "message", "result", "format", "out", "action", "db", "input", "name", "error", "reset", "value", "password", "done", "key", "response", "DATA", "window", "default", "json", "div", "info", "next", "this", "body", "ment", "command"], "url": ["build", "sl", "gl", "log", "ret", "Url", "ld", "abs", "str", "nl", "mail", "conv", "ls", "open", "re", "r", "call", "dl", "atl", "ll", "pl", "ssl", "link", "uri", "rel", "URL", "web", "net", "loc", "get", "ur", "cert", "hl", "bel", "http", "www", "el", "pkg", "l", "xml", "il", "gc", "lb", "ul"], "conn": ["win", "cur", "canon", "dat", "nl", "obj", "Conn", "nt", "conv", "ls", "ctrl", "open", "inv", "comm", "cp", "call", "c", "pas", "n", "act", "connection", "ll", "res", "fin", "close", "ns", "rel", "syn", "ct", "ann", "net", "connect", "loc", "cn", "ch", "nw", "cert", "yn", "nc", "cont", "socket", "addr", "exec", "cb", "enc", "pkg", "cmd", "nec", "resp", "jp", "co", "con"], "wr": ["tw", "ln", "dr", "lr", "spr", "fw", "wrote", "wn", "sw", "nl", "kl", "vr", "RW", "mr", "WR", "writ", "r", "rw", "wx", "write", "wm", "wer", "hr", "wy", "iw", "writer", "nw", "vet", "wt", "pr", "mn", "wo", "wk", "wid", "tn", "kr", "fr", "wb", "hw", "wa", "w", "rew"], "rd": ["sr", "dr", "lr", "rid", "ld", "rex", "rx", "rend", "rb", "erd", "ptr", "rob", "mr", "ri", "rod", "nd", "r", "rs", "rw", "rh", "red", "ro", "rar", "cr", "dd", "hr", "rt", "RD", "ry", "rr", "ris", "rad", "nder", "rand", "rl", "rer", "rog", "rc", "ra", "fr", "ird", "rn"], "line": ["text", "ln", "cell", "log", "ste", "file", "string", "str", "nl", "id", "inline", "part", "char", "lf", "e", "row", "no", "len", "word", "block", "code", "link", "ode", "stay", "iter", "buffer", "pe", "page", "lin", "out", "column", "ide", "lo", "frame", "liner", "comment", "ine", "le", "eline", "chain", "el", "header", "Line", "l", "LINE", "fr", "ne", "entry", "se"], "sessid": [" ssessionid", "descessid", "secessname", "sESSid", "Sessionkey", "Sessionname", "descessuid", " ssessionname", "scessuid", "Sessname", "scessid", " sesskey", "sessionuid", "scessoid", " ssessionkey", "desessid", "ssessionuid", "sessinfo", "descesskey", "scessinfo", "seessid", "desessuid", "Sessid", "seessinfo", "sESSoid", "sessionname", " ssessioninfo", "ssessioninfo", "sesskey", "ssessionname", "sessioninfo", "seessoid", "sessionoid", "Sesskey", "Sessionid", "sESSkey", "Sessionuid", "sESSuid", "sessionkey", " sessname", "desessoid", "secessid", "sessuid", "Sessuid", "seessname", "ssessionid", "descessoid", "secessoid", "sessionid", "secessinfo", "desesskey", " sessinfo", "sessoid", "ssessionkey", "ssessionoid", "scessname", "sessname", "scesskey", "sESSname"]}}
{"id1": "20939940", "id2": "2668634", "code1": "    private IProject createJavaProject() {\n        IProject proj = ResourcesPlugin.getWorkspace().getRoot().getProject(\"DefaultFolderPropertiesTest\");\n        if (!proj.exists()) {\n            try {\n                proj.create(null);\n                proj.open(null);\n                IProjectDescription desc = proj.getDescription();\n                desc.setNatureIds(new String[] { JavaCore.NATURE_ID });\n                proj.setDescription(desc, null);\n                IJavaProject javaProject = JavaCore.create(proj);\n                javaProject.open(null);\n                IFolder srcFolder1 = proj.getFolder(new Path(\"src\"));\n                srcFolder1.create(true, true, null);\n                IFolder srcFolder2 = proj.getFolder(new Path(\"custom_src\"));\n                srcFolder2.create(true, true, null);\n                IClasspathEntry[] classpathEntries = new IClasspathEntry[] { JavaCore.newSourceEntry(srcFolder1.getFullPath()), JavaCore.newSourceEntry(srcFolder2.getFullPath()), JavaRuntime.getDefaultJREContainerEntry() };\n                javaProject.setRawClasspath(classpathEntries, null);\n                IFolder binFolder = proj.getFolder(new Path(\"bin\"));\n                if (!binFolder.exists()) {\n                    binFolder.create(true, true, null);\n                }\n                javaProject.setOutputLocation(binFolder.getFullPath(), null);\n                IFolder testFolder = proj.getFolder(new Path(\"test\"));\n                testFolder.create(true, true, null);\n                IFolder resultFolder = proj.getFolder(new Path(\"result\"));\n                resultFolder.create(true, true, null);\n            } catch (CoreException e) {\n                fail(e.getMessage());\n            }\n        }\n        return proj;\n    }\n", "code2": "    public WebmillDeploy(String inputName, String outputName, boolean stripLoggers) throws Exception {\n        File tempFile = null;\n        JarFile jin = null;\n        JarOutputStream jout = null;\n        FileChannel srcChannel = null;\n        FileChannel dstChannel = null;\n        try {\n            String portletApplicationName = getPortletApplicationName(outputName);\n            System.out.println(\"portletApplicationName = \" + portletApplicationName);\n            tempFile = File.createTempFile(\"webmill-delpoy-\", \"\");\n            tempFile.deleteOnExit();\n            jin = new JarFile(inputName);\n            jout = new JarOutputStream(new FileOutputStream(tempFile));\n            Document webXml = null;\n            Document portletXml = null;\n            Document contextXml = null;\n            ZipEntry src;\n            InputStream source;\n            Enumeration zipEntries = jin.entries();\n            while (zipEntries.hasMoreElements()) {\n                src = (ZipEntry) zipEntries.nextElement();\n                source = jin.getInputStream(src);\n                try {\n                    String target = src.getName();\n                    if (WEB_INF_WEB_XML.equals(target)) {\n                        System.out.println(\"Found web.xml\");\n                        webXml = parseXml(source);\n                    } else if (WEB_INF_PORTLET_XML.equals(target)) {\n                        System.out.println(\"Found WEB-INF/portlet.xml\");\n                        portletXml = parseXml(source);\n                    } else if (META_INF_CONTEXT_XML.equals(target)) {\n                        System.out.println(\"Found META-INF/context.xml\");\n                        contextXml = parseXml(source);\n                    }\n                } finally {\n                    source.close();\n                }\n            }\n            if (webXml == null) {\n                throw new IllegalArgumentException(\"WEB-INF/web.xml not found\");\n            }\n            if (portletXml == null) {\n                throw new IllegalArgumentException(\"WEB-INF/portlet.xml not found\");\n            }\n            WebmillWebApplicationRewriter webRewriter = new WebmillWebApplicationRewriter(webXml);\n            webRewriter.processWebXML();\n            WebmillContextRewriter contextRewriter = new WebmillContextRewriter(contextXml, portletApplicationName);\n            contextRewriter.processContextXML();\n            jin = new JarFile(inputName);\n            zipEntries = jin.entries();\n            while (zipEntries.hasMoreElements()) {\n                src = (ZipEntry) zipEntries.nextElement();\n                source = jin.getInputStream(src);\n                try {\n                    String target = src.getName();\n                    String fullTarget = '/' + target;\n                    if (stripLoggers && target.endsWith(\".jar\") && (target.startsWith(\"WEB-INF/lib/commons-logging\") || target.startsWith(\"WEB-INF/lib/log4j\"))) {\n                        System.out.println(\"Skip logger \" + target);\n                        continue;\n                    } else {\n                        if (webRewriter.getRealPortletTldFile() != null && fullTarget.equals(webRewriter.getRealPortletTldFile())) {\n                            System.out.println(\"Skip portlet tld file \" + fullTarget);\n                            continue;\n                        } else if (target.equals(WEB_INF_WEB_XML)) {\n                            System.out.println(\"Skip web.xml file \" + target);\n                            continue;\n                        } else if (target.equals(WEB_INF_PORTLET_XML)) {\n                            System.out.println(\"Skip portlet.xml file \" + target);\n                            continue;\n                        } else if (target.equals(META_INF_CONTEXT_XML)) {\n                            System.out.println(\"Skip context.xml file \" + target);\n                            continue;\n                        }\n                        System.out.println(\"Add file \" + target);\n                    }\n                    addFile(target, source, jout);\n                } finally {\n                    source.close();\n                }\n            }\n            addFile(WEB_INF_WEB_XML, webXml, jout);\n            addFile(WEB_INF_PORTLET_XML, portletXml, jout);\n            addFile(META_INF_CONTEXT_XML, contextXml, jout);\n            System.out.println(\"Attempting to add portlet.tld to war...\");\n            InputStream is = this.getClass().getResourceAsStream(\"/org/riverock/webmill/container/tags/portlet.tld\");\n            if (is == null) {\n                System.out.println(\"Failed to find portlet.tld in classpath\");\n            } else {\n                String portletTldFile = webRewriter.getRealPortletTldFile();\n                if (portletTldFile.charAt(0) == '/') {\n                    portletTldFile = portletTldFile.substring(1);\n                }\n                System.out.println(\"Adding file \" + portletTldFile);\n                try {\n                    addFile(portletTldFile, is, jout);\n                } finally {\n                    is.close();\n                }\n            }\n            jout.close();\n            jin.close();\n            jin = null;\n            jout = null;\n            System.out.println(\"Creating war \" + outputName + \" ...\");\n            System.out.flush();\n            srcChannel = new FileInputStream(tempFile).getChannel();\n            dstChannel = new FileOutputStream(outputName).getChannel();\n            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n            srcChannel.close();\n            srcChannel = null;\n            dstChannel.close();\n            dstChannel = null;\n            tempFile.delete();\n            tempFile = null;\n            System.out.println(\"War \" + outputName + \" created\");\n            System.out.flush();\n        } finally {\n            if (srcChannel != null && srcChannel.isOpen()) {\n                try {\n                    srcChannel.close();\n                } catch (IOException e1) {\n                }\n            }\n            if (dstChannel != null && dstChannel.isOpen()) {\n                try {\n                    dstChannel.close();\n                } catch (IOException e1) {\n                }\n            }\n            if (jin != null) {\n                try {\n                    jin.close();\n                    jin = null;\n                } catch (IOException e1) {\n                }\n            }\n            if (jout != null) {\n                try {\n                    jout.close();\n                    jout = null;\n                } catch (IOException e1) {\n                }\n            }\n            if (tempFile != null && tempFile.exists()) {\n                tempFile.delete();\n            }\n        }\n    }\n", "label": 0, "substitutes": {"createJavaProject": ["newPythonProject", "createSpringProject", "createSpringBuild", "createSpringApplication", "createJavaApplication", "newPythonBuild", "createjavaProject", "newPythonFile", "newJavaBuild", "createPythonBuild", "createPythonProject", "createSpringFile", "createjavaApplication", "newJavaFile", "createPythonFile", "createjavaBuild", "createJavaFile", "createjavaFile", "createJavaBuild", "createPythonApplication", "newPythonApplication", "newJavaApplication", "newJavaProject"], "proj": [" prog", "prob", "ProJ", "projp", "superjs", "superbj", " projp", " proJ", " projs", "disz", "drog", "disbj", "pribj", "PROjs", "droph", "prj", "prij", "Proz", "projs", "probe", "prof", "drojp", " prodj", "surjp", "prjs", "disph", "preg", "Probj", " prov", " prof", "prf", "prov", "prog", "Prof", " probj", "superg", "proz", "surbj", "superj", "PROj", " proz", "PROg", "Projp", "predj", "Proj", "proJ", "Prov", "surbe", "PROz", "prg", "Prog", "Proph", "Prob", "Projs", "prv", "proph", "probj", " probe", "disjp", "prig", "surj", "PROJ", "priz", " prob", "disjs", "disg", "prz", "prodj", "droj", "prejs", "prej", "prb", "disbe", "disj", "Prodj"], "desc": ["Desc", "sec", "dec", "dr", "cmp", "description", "des", "dj", "txt", "pro", "str", "nl", "disc", "rec", "obj", "nt", "dep", "esc", "msg", "phrase", "pres", "asc", "meta", "summary", "title", "md", "rel", "note", "def", "sc", "resp", "Description", "comp", "doc", "diff", "req", "ds", "comment", "dist", "bd", "cont", "details", "sub", "dev", "de", "div", "dc"], "javaProject": ["gaPort", " javaApp", "joPort", "javaFile", "googleApplication", "javaPort", " javaApplication", "joproject", "javaApp", "javascriptProject", " javaConstruct", "pythonPort", "javascriptApplication", "javaConstruct", "googleFile", "gaConstruct", "pythonConstruct", "jcproject", "mxproject", " javaproject", " javaPort", "joProject", "javascriptFile", "joFeature", "gaServer", "gaProject", "jcProject", " javaFile", "javaApplication", "jcFeature", " javaFeature", "pythonproject", "javaServer", "mxPort", "mxApp", "googleProject", "mxProject", "javaproject", " javaServer", "googlePort", "jcPort", "pythonApp", "javascriptPort", "pythonServer", "javaFeature", "pythonProject"], "srcFolder1": ["sysfolder2", "srcFolder9", "srcDir3", "stockLoader1", "srcDirectory1", "srcfolder3", "srcFile9", "stockFolder1", "stockFolder30", "srcDirOne", "sysfolder1", "rcDir3", "rcFolder1", "srcFile30", "srcFile1", "stockFolder9", "srcFolderOne", "srcFolder30", "sysfolderOne", "srcfolderOne", "srcfolder1", "rcDirOne", "sysFolderOne", "srcfolder2", "srcLoader2", "stockFolder2", "rcDir1", "srcDir0", "rcFolderOne", "srcLoader30", "srcfolder9", "sysFolder0", "sysfolder0", "srcFile2", "srcfolder0", "srcLoader9", "sysFolder2", "srcDir1", "stockLoader9", "sysFolder1", "srcfolder30", "srcLoader1", "srcDirectory0", "srcDirectoryOne", "rcFolder0", "stockLoader2", "srcFolder0", "srcDirectory3", "srcFolder3", "stockLoader30", "rcDir0", "rcFolder3", "srcDir2"], "srcFolder2": [" srcLoaderTwo", "serFolderTwo", "srcDir3", "srcFiltertwo", "srcLoader0", "srcFilter0", " srcLoader0", "rcFolderTwo", "srcIteratorTwo", " srcFolder0", "srcIterator3", "srcThemetwo", "rcDir3", "serFolder2", "srcDirectory2", "srcVolume2", "srcIterator2", "srcLoader2", "srcVolumeTwo", "rcDirTwo", "srcDir0", "srcFile2", "srcTheme0", "srcFilter2", "srcThemeTwo", "srcFiletwo", " srcLoader2", "serDirectory2", "rcDir2", "srcDirectoryTwo", " srcFoldertwo", "srcFoldertwo", "srcLoadertwo", "serDirectorytwo", "srcTheme3", "rcFolder2", "srcFolderTwo", "srcVolumetwo", "srcIterator0", " srcFolderTwo", "srcDirectorytwo", "rcFolder0", " srcLoadertwo", "srcFileTwo", "srcFolder0", "serFoldertwo", "srcLoaderTwo", "srcTheme2", "serDirectoryTwo", "srcFolder3", "srcDirTwo", "rcDir0", "rcFolder3", "srcFilterTwo", "srcDir2"], "classpathEntries": ["classmoduleContrie", "classmoduleContries", "classpathEntryresses", "classpathEnrys", "classnameEntryries", "classmoduleContlements", "classpathEnrie", "classpathEnries", "classpathEnlements", "classmoduleEntrie", "classnameEntrie", "classpathEntrys", "classnameEntryresses", "classpathContries", "classnameEntryrys", "classnameEntries", "classpathEntrie", "classmoduleEntlements", "classpathEntryrie", "classmoduleEntrys", "classnameEntryrie", "classmoduleContrys", "classpathEntlements", "classpathContlements", "classnameEntrys", "classpathContrie", "classpathEntryries", "classpathEntryrys", "classpathEntresses", "classnameEntresses", "classpathContrys", "classmoduleEntries"], "binFolder": ["consoleRoom", "binaryDir", "boxFolder", " binEntry", "binaryfolder", " binFile", "libFolder", "binServer", " binDirectory", "browserThread", "boxDir", "binFile", "binCenter", " binRoom", "binThread", "boxfolder", "browserRoom", "binEntry", "binDirectory", "binRoom", " binDir", "binaryEntry", "boxEntry", " binThread", "libfolder", "libDirectory", "browserFolder", "libDir", " binServer", "boxVolume", "binaryVolume", "libServer", "binaryDirectory", "boxFile", "consoleFolder", "binaryFolder", "libVolume", "consoleCenter", "consoleThread", "browserCenter", "binaryServer", "binVolume", "binaryFile", " binfolder", "binDir", "binfolder", " binCenter"], "testFolder": ["scriptRoom", "trainRoom", "scriptLoop", "testfolder", "scriptFolder", "testDirectory", " testfolder", " testDir", "failRoom", "TestDirectory", "failLoop", "failFolder", "testingFolder", " testDirectory", "scriptVolume", "trainLoop", "failVolume", "testingDir", "trainFolder", "testVolume", "Testfolder", "TestFolder", "testRoom", "testDir", "testLoop", "testingDirectory", "TestDir", "trainVolume", "testingfolder"], "resultFolder": ["returnDir", "returnLoop", "ResultDir", "returnDirectory", "ResultDirectory", "resultDirectory", "testDirectory", "ResultFolder", "resultLoop", " resultLoop", " resultDir", "returnFolder", "ResultLoop", "testDir", "resultDir", " resultDirectory"]}}
{"id1": "4618237", "id2": "8216539", "code1": "    public static void writeFileToFile(File fin, File fout, boolean append) throws IOException {\n        FileChannel inChannel = new FileInputStream(fin).getChannel();\n        FileChannel outChannel = new FileOutputStream(fout, append).getChannel();\n        try {\n            inChannel.transferTo(0, inChannel.size(), outChannel);\n        } finally {\n            if (inChannel != null) try {\n                inChannel.close();\n            } catch (IOException ex) {\n            }\n            if (outChannel != null) try {\n                outChannel.close();\n            } catch (IOException ex) {\n            }\n        }\n    }\n", "code2": "    protected String getFileContentAsString(String filePath, String encoding) throws IOException {\n        URL testURL = Thread.currentThread().getContextClassLoader().getResource(filePath);\n        InputStream input = null;\n        StringWriter sw = new StringWriter();\n        try {\n            if (testURL != null) {\n                input = testURL.openStream();\n            } else {\n                input = new FileInputStream(filePath);\n            }\n            IOUtils.copy(input, sw, encoding);\n        } finally {\n            if (input != null) {\n                input.close();\n            }\n        }\n        return sw.toString();\n    }\n", "label": 1, "substitutes": {"writeFileToFile": ["writeFilesToStream", "writeFiles2Disk", "writeFilesToDisk", "writeFileToFiles", "writeFiles2Files", "writeFile2Disk", "writeFiles2File", "writeFileAsDisk", "writeFilesToFiles", "writeFileToStream", "writeFile2File", "writeFile2Files", "writeFileToDisk", "writeFileAndDisk", "writeFiles2Stream", "writeFileAndFiles", "writeFileAndStream", "writeFileAsFile", "writeFile2Stream", "writeFileAndFile", "writeFileAsStream", "writeFilesToFile", "writeFileAsFiles"], "fin": ["ln", "irm", "kin", "fl", "fw", "fc", "ic", "fil", "en", "fre", "mil", "fd", "mid", "lf", "Fin", "in", "inv", "raf", "ini", "n", "f", "syn", "normal", "FIN", "han", "lin", "fur", "din", "init", "fp", "lo", "rf", "fn", "ran", "mn", "details", "focus", "fi", "rin", "fr", "jen", "fa"], "fout": ["kpo", "tin", "Fou", "foutput", "tout", "ffin", "ffou", "Fin", "koutput", "Fout", "tOut", "fboutput", "fou", "ffout", " foutput", "fbOut", "fOut", "fbpo", "ffOut", "fbout", "kout", " fpo", "kOut", " fOut", "tou", "fpo", "FOut"], "append": ["allow", "send", "seed", "force", "batch", "apply", "string", "pend", "replace", "join", "update", "printf", "grow", "ended", "ext", "vert", "csv", "absolute", "insert", "bold", "note", "express", "fail", "end", "app", "flat", "buff", "push", "ind", "include", "folder", "ends", "add", "equal", "animate", "command"], "inChannel": ["inConnection", "outChan", " inConnection", "rinListener", "insideChannel", "iStream", "iChannel", " inCategory", "rinChannel", "pinMachine", "insideClient", "innChannel", "inCommand", "outCommand", "outConnection", " inchannel", "sinMachine", " inStream", "inListener", "rinChan", "inCategory", "sinChannel", "sinButton", "inputChan", "insideChan", "pinButton", "InConnection", "intClient", "iChan", "inButton", "inStream", "InStream", "inputChannel", " inChan", "inputListener", " inSession", "outStream", "iCommand", "inSession", " inListener", "innCategory", "inClient", "inputCategory", "intChannel", "outchannel", "innButton", "inChan", "inchannel", "inMachine", "InChannel", " inCommand", "sinCategory", "intSession", "pinChannel", "Inchannel", "intChan", "insideSession", "innMachine", "pinCategory", "rinCategory", " inClient"], "outChannel": ["OUTChannel", "outChan", "invMember", "outputChannel", " outController", "nameChan", "outConnection", "OUTchannel", "userChannel", "userCh", "outCh", "userMember", "OUTChan", "outputScope", "netChan", "netChannel", "outMember", " outChan", "OUTController", "invCh", "inCh", "netCh", "outputchannel", "nameConnection", " outCh", "netMember", "netchannel", "outchannel", "inChan", "inchannel", "nameScope", "outputCh", "nameChannel", " outScope", "invChannel", "outputChan", "outScope", "outputConnection", " outchannel", "netController", " outConnection", "outController"]}}
{"id1": "17475530", "id2": "1180878", "code1": "    @TestProperties(name = \"Simple test for adding different image files to report as link\")\n    public void testAddLinkToImage() throws Exception {\n        InputStream in = this.getClass().getClassLoader().getResourceAsStream(\"regression/generic/images/splash.jpg\");\n        report.report(report.getCurrentTestFolder() + System.getProperty(\"file.separator\") + \"splash.jpg\");\n        IOUtils.copy(in, new FileOutputStream(new File(report.getCurrentTestFolder() + System.getProperty(\"file.separator\") + \"splash.jpg\")));\n        in = this.getClass().getClassLoader().getResourceAsStream(\"regression/generic/images/blue.png\");\n        IOUtils.copy(in, new FileOutputStream(new File(report.getCurrentTestFolder() + System.getProperty(\"file.separator\") + \"blue.png\")));\n        in = this.getClass().getClassLoader().getResourceAsStream(\"regression/generic/images/classDir.gif\");\n        IOUtils.copy(in, new FileOutputStream(new File(report.getCurrentTestFolder() + System.getProperty(\"file.separator\") + \"classDir.gif\")));\n        report.addLink(\"Link to JPG\", \"splash.jpg\");\n        report.addLink(\"Link to PNG\", \"blue.png\");\n        report.addLink(\"Link to GIF\", \"classDir.gif\");\n    }\n", "code2": "    public static byte[] fetchURLData(String url, String proxyHost, int proxyPort) throws IOException {\n        HttpURLConnection con = null;\n        InputStream is = null;\n        try {\n            URL u = new URL(url);\n            if (url.startsWith(\"file://\")) {\n                is = new BufferedInputStream(u.openStream());\n            } else {\n                Proxy proxy;\n                if (proxyHost != null) {\n                    proxy = new Proxy(Type.HTTP, new InetSocketAddress(proxyHost, proxyPort));\n                } else {\n                    proxy = Proxy.NO_PROXY;\n                }\n                con = (HttpURLConnection) u.openConnection(proxy);\n                con.addRequestProperty(\"User-Agent\", \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.6 (KHTML, like Gecko) Chrome/20.0.1092.0 Safari/536.6\");\n                con.addRequestProperty(\"Accept-Charset\", \"UTF-8\");\n                con.addRequestProperty(\"Accept-Language\", \"en-US,en\");\n                con.addRequestProperty(\"Accept\", \"text/html,image/*\");\n                con.setDoInput(true);\n                con.setDoOutput(false);\n                con.connect();\n                is = new BufferedInputStream(con.getInputStream());\n            }\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n            IOUtils.copy(is, baos);\n            return baos.toByteArray();\n        } finally {\n            IOUtils.closeQuietly(is);\n            if (con != null) {\n                con.disconnect();\n            }\n        }\n    }\n", "label": 1, "substitutes": {"testAddLinkToImage": ["testAddLinktoImage", "testAddLinkForImage", "testAddLinkFromImages", "testAddLinksToImage", "testAddLinkstoImage", "testAddLinkstoImages", "testAddLinktoPicture", "testAddLinktoimage", "testAddLinkForPicture", "testAddLinkFromimage", "testAddLinkstoimage", "testAddLinkToimage", "testAddLinktoImages", "testAddLinkstoPicture", "testAddLinkFromImage", "testAddLinksToImages", "testAddLinkToPicture", "testAddLinkToImages", "testAddLinkFromPicture", "testAddLinksToPicture", "testAddLinkForimage", "testAddLinksToimage", "testAddLinkForImages"], "in": ["mc", "v", "at", "file", "en", "show", "by", "is", "k", "up", "al", "ed", "cin", "from", "re", "r", "ini", "IN", "inc", "i", "check", "inner", "ex", "pi", "inside", "sein", "m", " din", "on", "o", "set", "ma", "out", "din", "get", "init", "doc", "all", "vin", "isin", "input", "ind", "gin", "include", "source", "In", "add", "and", "password", "one", "or", "ins", "rin", "sum", "it", "info", "bin", "nin", "er", "inn"]}}
{"id1": "1954410", "id2": "23532405", "code1": "    protected ActionForward doExecute(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws Exception {\n        ActionMessages errors = new ActionMessages();\n        try {\n            boolean isMultipart = FileUpload.isMultipartContent(request);\n            Mail mailInstance = getMailInstance(request);\n            if (isMultipart) {\n                Map fields = new HashMap();\n                Vector attachments = new Vector();\n                List items = diskFileUpload.parseRequest(request);\n                Iterator iter = items.iterator();\n                while (iter.hasNext()) {\n                    FileItem item = (FileItem) iter.next();\n                    if (item.isFormField()) {\n                        if (item.getFieldName().equals(\"forwardAttachments\")) {\n                            String[] aux = item.getString().split(\":\");\n                            MailPartObj part = mailInstance.getAttachment(aux[0], aux[1]);\n                            attachments.addElement(part);\n                        } else {\n                            fields.put(item.getFieldName(), item.getString());\n                        }\n                    } else {\n                        if (!StringUtils.isBlank(item.getName())) {\n                            ByteArrayOutputStream baos = null;\n                            try {\n                                baos = new ByteArrayOutputStream();\n                                IOUtils.copy(item.getInputStream(), baos);\n                                MailPartObj part = new MailPartObj();\n                                part.setAttachent(baos.toByteArray());\n                                part.setContentType(item.getContentType());\n                                part.setName(item.getName());\n                                part.setSize(item.getSize());\n                                attachments.addElement(part);\n                            } catch (Exception ex) {\n                            } finally {\n                                IOUtils.closeQuietly(baos);\n                            }\n                        }\n                    }\n                }\n                String body = \"\";\n                if (fields.get(\"taBody\") != null) {\n                    body = (String) fields.get(\"taBody\");\n                } else if (fields.get(\"taReplyBody\") != null) {\n                    body = (String) fields.get(\"taReplyBody\");\n                }\n                Preferences preferencesInstance = getPreferencesInstance(request);\n                Send sendInstance = getSendInstance(request);\n                String mid = (String) fields.get(\"mid\");\n                if (StringUtils.isBlank(mid)) {\n                    request.setAttribute(\"action\", \"compose\");\n                } else {\n                    request.setAttribute(\"action\", \"reply\");\n                }\n                Boolean isHtml = null;\n                if (StringUtils.isBlank((String) fields.get(\"isHtml\"))) {\n                    isHtml = new Boolean(preferencesInstance.getPreferences().isHtmlMessage());\n                } else {\n                    isHtml = Boolean.valueOf((String) fields.get(\"isHtml\"));\n                }\n                sendInstance.send(mid, Integer.parseInt((String) fields.get(\"identity\")), (String) fields.get(\"to\"), (String) fields.get(\"cc\"), (String) fields.get(\"bcc\"), (String) fields.get(\"subject\"), body, attachments, isHtml.booleanValue(), Charset.defaultCharset().displayName(), (String) fields.get(\"priority\"));\n            } else {\n                errors.add(\"general\", new ActionMessage(ExceptionCode.ERROR_MESSAGES_PREFIX + \"mail.send\", \"The form is null\"));\n                request.setAttribute(\"exception\", \"The form is null\");\n                request.setAttribute(\"newLocation\", null);\n                doTrace(request, DLog.ERROR, getClass(), \"The form is null\");\n            }\n        } catch (Exception ex) {\n            String errorMessage = ExceptionUtilities.parseMessage(ex);\n            if (errorMessage == null) {\n                errorMessage = \"NullPointerException\";\n            }\n            errors.add(\"general\", new ActionMessage(ExceptionCode.ERROR_MESSAGES_PREFIX + \"general\", errorMessage));\n            request.setAttribute(\"exception\", errorMessage);\n            doTrace(request, DLog.ERROR, getClass(), errorMessage);\n        } finally {\n        }\n        if (errors.isEmpty()) {\n            doTrace(request, DLog.INFO, getClass(), \"OK\");\n            return mapping.findForward(Constants.ACTION_SUCCESS_FORWARD);\n        } else {\n            saveErrors(request, errors);\n            return mapping.findForward(Constants.ACTION_FAIL_FORWARD);\n        }\n    }\n", "code2": "    public void persist(FreeFormConfigurable ffConfigurable, String relativePath) {\n        File file = getConfigFile(ffConfigurable, relativePath, PROPERTIES_CONFIG_EXT);\n        InputStream is = ffConfigurable.getInputConfigStream();\n        try {\n            OutputStream os = new FileOutputStream(file);\n            IOUtils.copy(is, os);\n        } catch (Exception e) {\n            throw new ConfigurationException(\"Failed to store free from config for class \" + ffConfigurable.getClass().getName() + \" into file \" + file.getAbsolutePath());\n        }\n    }\n", "label": 1, "substitutes": {"doExecute": ["doCommutes", "doCommExec", "DoExecutes", "doExecit", "doEditit", "doEditExec", "doExecExec", "DoExecExec", "DoExecute", "doCommit", "DoExecit", "doCommute", "doExecutes", "doEditute", "doEditutes"], "mapping": ["smapped", "mapped", "Mapped", "Mapper", " mappings", "mappings", "Mapping", " mapped", "mapper", "smapping", "Mappings", "smapper", " mapper", "smappings"], "form": [" forms", "path", "subject", "forms", "fc", "orm", "parent", "map", "FORM", "owner", "view", "formed", "sam", "session", "m", "f", "config", "format", "app", "raw", " Form", "template", " FORM", "self", "Form", "type", "command"], "request": ["allow", "sw", "model", "session", "container", "project", "req", "input", "document", "reset", "window", "order", "this", "w", "command", "open", "query", "instance", "host", "server", "create", "reference", "frame", "client", "template", "http", "QUEST", "quest", "address", "first", "parent", "question", "current", "url", "view", "def", "message", "user", "impl", "upload", "Upload", "application", "cont", "report", "xml", "Exception", "post", "resource", "store", "remote", "context", "_", "initial", "Request", "version", "true", "se"], "response": ["send", "respond", "ce", "print", "success", "Response", "output", "re", "view", "content", "session", "connection", "res", "write", "status", "server", "message", "sp", "result", "document", "frame", "application", "report", "xml", "reply", "resp"], "errors": [" updates", " elements", " flashes", " storage", "ages", " manager", " state", " mess", " states", " status", " Messages", " error", " success", " moves", " sessions", " changes", " messages", " logs", " fails", " problems", " warnings", " flash", " statements", " steps", " messenger", " requests", " managers", "Mess"], "isMultipart": ["isMultifare", "isMultipade", "isMultiart", "isMultifart", "isMultiIPart", "isMultiIPade", "isMultipare", "isMultIParts", "isMultIPare", "isMultiipod", "isMultiipade", "isMultipain", "isMultiarts", "isMultiplarts", "isMultifarts", "isMultiIPod", "isMultiIParts", "isMultiIPare", "isMultiade", "isMultIPade", "isMultiipain", "isMultosparts", "isMultospain", "isMultiIPain", "isMultIPain", "isMultiplart", "isMultospart", "isMultiparts", "isMultifain", "isMultiipart", "isMultiod", "isMultospare", "isMultIPod", "isMultipod", "isMultiipare", "isMultiplade", "isMultIPart", "isMultiplod", "isMultiiparts"], "mailInstance": [" mailance", " mailinstance", "mailinstance", "mailInst", "flexInst", "emailinstance", " MailInstance", "emailBuilder", "emailance", " mailBuilder", "emailInst", " Mailinstance", "flexInstance", " MailBuilder", " MailInst", " mailInst", "mailBuilder", "mailance", "flexinstance", "emailInstance", "flexance"], "fields": ["tests", "flags", "forms", "features", "members", "packages", "field", "lists", "balls", "prints", "terms", "objects", "modules", "groups", "properties", "phones", "boxes", "lights", "sections", "strings", "comments", "orders", "links", "bits", "reports", "names", "users", "headers", "packs", "images", "states", "pages", "dates", "workers", "ports", "plugins", "frames", "parts", "models", "locks", "files", "holders", "tags", "relations", "services", "posts", "lines", "rules", "drivers", "faces", "atts", "keys", "details", "days", "views", "rows", "checks", "levels", "types", "classes", "qs"], "attachments": ["achements", "achments", "attachements", "attachitions", "attachensions", "payements", "achions", "attachions", "payitions", "acheances", "attachresses", "Attachresses", "acheements", " attachances", "payments", "attachances", "Attachitions", "Attachments", " attachitions", "acheitions", "Attachions", "AttachMENTS", "attitions", "attments", " attachements", "achresses", "attachMENTS", "payances", "attensions", "Attachensions", "achitions", "attMENTS", "achMENTS", " attachions", " attachresses", "achensions"], "items": ["tests", "resources", " images", "members", " Items", "results", "packages", "objects", "groups", "ids", "orders", "reports", "names", "cases", "links", "images", "pages", " results", " files", "parts", "files", "its", "events", "actions", "ips", "services", "lines", "apps", "keys", "photos", "rows", "Items", "issues", " samples", "phones", "qs", " inputs", "archives"], "iter": ["gener", "cmp", "dir", "li", "store", "test", "ner", "former", "maker", "walker", "re", "tif", "reader", "Iterator", "i", "orient", "inner", "iner", "upper", "inter", "Iter", "altern", "outer", "ipper", "iterator", "loop", "set", "loc", "result", "each", "older", "init", "its", "writer", "oper", "read", "ite", "ind", "ter", "ait", "ator", "el", "list", "ser", "tr", "coll", "it", "order", "er"], "item": ["local", "module", "attribute", "area", "on", "job", "app", "mm", "name", "object", "key", "addr", "details", "ix", "json", "order", "atom", "er", "entry", "related", "member", "up", "rule", "ex", "instance", "status", "claim", "single", "attr", "raw", "change", "template", "spec", "att", "data", "one", "image", "or", "el", "ip", "word", "layer", "cell", "match", "obj", "event", "internal", "detail", "record", "other", "url", "inner", "zip", "entity", "page", "element", "xml", "it", "type", "file", "step", "resource", "store", "row", "stat", "link", "initial", "Item", "anything", "add", "group", "info", "unit"], "aux": ["fax", "du", "pet", "ups", "abs", "ax", "used", "cu", "aw", "fu", "fx", "ox", "imp", "aos", "extra", "max", "ex", "uds", "mu", "uff", "area", "auto", "vers", "aff", "fuck", "net", "airs", "buff", "fam", "fat", "aus", "av", "etc", "foo", "lim", "eu", "ux", "pad", "ix", "ras", "au", "uf", "us", "tx", "af", "off", "aim", "AU"], "part": ["local", "half", "sample", "pt", "pet", "pair", "point", "print", "wrapper", "join", "PART", "admin", "base", "job", "object", "photo", "top", "list", "pos", "peer", "p", "member", "mod", "worker", "html", "prefix", "parts", "tmp", "art", "patch", "tab", "and", "tx", "partial", "word", " Part", "layer", "card", "parent", "component", "start", "zone", "detail", "work", "section", "primary", "relation", "inner", "piece", "person", "pre", "api", "message", "pad", "par", "pod", "bound", "step", "block", "split", "sp", "format", "comp", "party", " parts", "Part", "add", "group", "version", "pkg", "temp"], "baos": ["biOS", "boos", "caOS", "booses", "waoss", "tais", "kaos", "bios", "booss", "tao", "bioses", "waols", "kaops", "pois", "vaoss", "boo", "taoss", "bio", "boOS", "taos", "vaOs", "caOs", "poOS", "taOs", "pooses", "baoses", "baOS", "kaoss", "caols", "waos", "pooss", "baols", "caoss", "boOs", "waOs", "vaos", "taops", "bao", "poos", "kais", "baOs", "baops", "cao", "bais", "poops", "vaols", "poo", "caos", "baoss"], "body": ["text", "send", "subject", "head", "description", "tail", "foot", "binary", "log", "file", "post", "mail", "plain", "t", "ODY", "ody", "detail", "output", "shell", "content", "null", "port", "scroll", "title", "summary", "html", "Body", "base", "note", "rel", "loop", "buffer", "message", "format", "pass", "tree", "name", "template", "comment", "bill", "data", "report", "header", "default", "json", "layout", "business", "display", "size"], "preferencesInstance": ["prefancesImpl", "preffiesInstance", "prefiesInstance", "prefutesImpl", "prefiesObj", "prefferencesObj", "preffiesImpl", "prefiesinstance", "prefferencesImpl", "prefancesinstance", "prefancesObj", "preffiesinstance", "prefancesInstance", "prefutesObj", "preferencesObj", "prefutesinstance", "prefiesImpl", "preferencesinstance", "prefutesInstance", "prefferencesinstance", "preffiesObj", "preferencesImpl", "prefferencesInstance"]}}
{"id1": "19784131", "id2": "21999120", "code1": "    public static String getMD5Hash(String original) {\n        StringBuffer sb = new StringBuffer();\n        try {\n            StringReader sr = null;\n            int crypt_byte = 0;\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            md.reset();\n            md.update(original.getBytes());\n            byte[] digest = md.digest();\n            sr = new StringReader(new String(digest, \"ISO8859_1\"));\n            while ((crypt_byte = sr.read()) != -1) {\n                String hexString = Integer.toHexString(crypt_byte);\n                if (crypt_byte < 16) {\n                    hexString = \"0\" + hexString;\n                }\n                sb.append(hexString);\n            }\n        } catch (NoSuchAlgorithmException nsae) {\n        } catch (IOException ioe) {\n        }\n        return sb.toString();\n    }\n", "code2": "    public String encrypt(String password) throws Exception {\n        MessageDigest md5 = MessageDigest.getInstance(\"MD5\");\n        md5.update(password.getBytes());\n        BigInteger hash = new BigInteger(1, md5.digest());\n        String hashword = hash.toString(16);\n        return hashword;\n    }\n", "label": 1, "substitutes": {"getMD5Hash": ["getMD4Key", "getMD2Sum", "getMD3Hash", "getMD5Sum", "getMD4Hash", "getMD2Key", "getMD5Key", "getMD4Sum", "getMD3Sum", "getMD3hash", "getMD2Hash", "getMD5hash", "getMD3Key", "getMD2hash", "getMD4hash"], "original": ["created", "sample", "string", " orig", "orig", "before", "old", "was", "hash", "filename", "content", "custom", "Original", "instance", "actual", "code", "initial", "modified", "o", "base", "vector", "message", "raw", "input", "name", "template", "data", " originals", "source", "reset", "image", "metadata", "regular", "origin", " Original"], "sb": ["sq", "pb", "lp", "abs", "src", "nb", "bt", "b", "bg", "sm", "rb", "kb", "sg", "rob", "bb", "ab", "obs", "sa", "ssl", "xb", "bh", "ib", "gc", "sf", "sk", "fb", "sp", "bs", "erb", "eb", "bsp", "ub", "bd", "sv", "bn", "bf", "zb", "cb", "bp", "ob", "mb", "bj", "wb", "gb", "SB", "lb"], "sr": ["SR", "sl", "dr", "lr", "spr", "yr", "rx", "sur", "nr", "rb", "vr", "mr", "ri", "r", "rs", "rys", "rg", "sol", "cr", "ssl", "adr", "ear", "hr", "rd", "rm", "rt", "usr", "gr", "rr", "pr", "sv", "rl", "rc", "ser", "tr", "kr", "fr", "asper", "rar", "her", "rn"], "crypt_byte": ["cryptitybyte", "hex_pair", "crypt2source", "cryptolychar", "cryptYframe", "four_byte", "hex_char", "hex_byte", "Crypt_char", "cryptolyframe", "cryptitybuffer", " cryptitybyte", "crypt_coin", "crypt2byte", "cryptYbyte", " cryptitychar", "crypt_char", "four_char", "Crypt_source", "crypt2char", " cryptitybuffer", "cryptYpair", "four_coin", "crypt68char", " crypt_buffer", "cryptitychar", "crypt68byte", "cryptolybyte", "crypt68bytes", "crypt_pair", "crypt_source", "crypt_buffer", " cryptitybytes", "four_bytes", "cryptitybytes", "hex_frame", " crypt_char", "crypt68source", "Crypt_bytes", "crypt_bytes", "Crypt_byte", "cryptolypair", "cryptYchar", "crypt2bytes", " crypt_bytes", "crypt_frame"], "md": ["d", "mc", "dr", "pdf", "pd", "ld", "mt", "amd", "mod", " MD", "sm", "method", "msg", "de", "met", "red", "det", "m", "pm", "ct", "sd", "ms", "dd", "comp", "hd", "dig", "mm", "ind", "mk", "cd", "od", "bd", "mg", " cmd", "mn", "dm", "der", "dh", "df", "mb", "cmd", "grad", "MD", " Md"], "digest": ["mdested", "mdate", "digested", " digEST", "Digested", "hashEST", "mdest", "defests", "DigEST", "dest", "digate", "mdEST", "Digest", "digests", "mdester", "ddest", "diger", "Digate", "mdet", "Diger", "defer", "Digester", "digEST", " digester", "dested", "hashest", "Digests", "ddested", "defested", "hashet", "dests", "ddet", "ddEST", "der", "diget", "digester", "defest", "hashested", " digate"], "hexString": ["hexstring", "hexChain", "hexNumber", " hexStr", "exstring", " HexNumber", " sexString", " sexStr", " HexString", "hashstring", " hexSummary", " HexStr", "hashChain", "exSummary", " hexstring", "exNumber", "hashStr", " Hexstring", " sexSummary", " HexChain", " hexNumber", "hexStr", "exChain", "exString", "exStr", "hashString", " hexChain", "hexSummary"]}}
{"id1": "6304373", "id2": "11645260", "code1": "    public static String uploadOrDeleteMediaOrTemplates(String action, String object, String numElements, HttpServletRequest req, HttpSession session) {\n        FTPClient ftp = new FTPClient();\n        CofaxToolsUser user = (CofaxToolsUser) session.getAttribute(\"user\");\n        StringBuffer links = new StringBuffer();\n        StringBuffer folders = new StringBuffer();\n        String folder = \"\";\n        String server = \"\";\n        String login = \"\";\n        String password = \"\";\n        String fileTransferFolder = CofaxToolsServlet.fileTransferFolder;\n        String liveFolder = \"\";\n        ArrayList servers = new ArrayList();\n        StringBuffer message = new StringBuffer();\n        message.append(\"Status:<BR>\");\n        if (action.equals(\"Upload\")) {\n            server = (String) user.workingPubConfigElementsHash.get(\"TESTFTPSERVER\");\n            login = (String) user.workingPubConfigElementsHash.get(\"TESTFTPLOGIN\");\n            password = (String) user.workingPubConfigElementsHash.get(\"TESTFTPPASSWORD\");\n            if (object.equals(\"Media\")) {\n                folder = (String) user.workingPubConfigElementsHash.get(\"TESTIMAGESFOLDER\");\n            }\n            if (object.equals(\"Templates\")) {\n                folder = (String) user.workingPubConfigElementsHash.get(\"TESTTEMPLATEFOLDER\");\n            }\n        }\n        if (action.equals(\"Delete\")) {\n            login = (String) user.workingPubConfigElementsHash.get(\"LIVEFTPLOGIN\");\n            password = (String) user.workingPubConfigElementsHash.get(\"LIVEFTPPASSWORD\");\n            if (object.equals(\"Media\")) {\n                server = (String) user.workingPubConfigElementsHash.get(\"LIVEIMAGESSERVER\");\n                folder = (String) user.workingPubConfigElementsHash.get(\"LIVEIMAGESFOLDER\");\n            }\n            if (object.equals(\"Templates\")) {\n                server = (String) user.workingPubConfigElementsHash.get(\"LIVEFTPSERVER\");\n                folder = (String) user.workingPubConfigElementsHash.get(\"LIVETEMPLATEFOLDER\");\n            }\n        }\n        ArrayList al = new ArrayList();\n        int numElement = Integer.parseInt(numElements);\n        for (int i = 0; i < numElement; i++) {\n            String key = String.valueOf(i);\n            String file = req.getParameter(key);\n            if (file != null) {\n                al.add(file);\n            }\n        }\n        if (action.equals(\"Upload\")) {\n            try {\n                int reply;\n                ftp.connect(server);\n                CofaxToolsUtil.log(ftp.getReplyString());\n                reply = ftp.getReplyCode();\n                if (!FTPReply.isPositiveCompletion(reply)) {\n                    ftp.disconnect();\n                    return (\"FTP server refused connection.\");\n                } else {\n                    ftp.login(login, password);\n                }\n                for (int ii = 0; ii < al.size(); ii++) {\n                    String fileName = (String) al.get(ii);\n                    String folderName = stripName(fileName);\n                    fileName = stripPath(fileName);\n                    try {\n                        ftp.changeWorkingDirectory(folderName);\n                        OutputStream output;\n                        output = new FileOutputStream(fileTransferFolder + fileName);\n                        ftp.retrieveFile(fileName, output);\n                        CofaxToolsUtil.log(\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates retrieving file: \" + ftp.getReplyString());\n                        message.append(\"Retrieving file \" + fileName + \" to local disk.<BR>\");\n                        output.close();\n                    } catch (java.io.IOException e) {\n                        return (\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: cannot write file\" + e);\n                    }\n                }\n                ftp.logout();\n                ftp.disconnect();\n            } catch (IOException e) {\n                CofaxToolsUtil.log(\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: Could not connect to server: \" + e);\n                return (\"Could not connect to server: \" + e);\n            }\n            login = (String) user.workingPubConfigElementsHash.get(\"LIVEFTPLOGIN\");\n            password = (String) user.workingPubConfigElementsHash.get(\"LIVEFTPPASSWORD\");\n            if (object.equals(\"Media\")) {\n                server = (String) user.workingPubConfigElementsHash.get(\"LIVEIMAGESSERVER\");\n                liveFolder = (String) user.workingPubConfigElementsHash.get(\"LIVEIMAGESFOLDER\");\n            }\n            if (object.equals(\"Templates\")) {\n                server = (String) user.workingPubConfigElementsHash.get(\"LIVEFTPSERVER\");\n                liveFolder = (String) user.workingPubConfigElementsHash.get(\"LIVETEMPLATEFOLDER\");\n            }\n            servers = splitServers(server);\n            for (int iii = 0; iii < servers.size(); iii++) {\n                try {\n                    int reply;\n                    String connectServer = (String) servers.get(iii);\n                    ftp.connect(connectServer);\n                    CofaxToolsUtil.log(ftp.getReplyString());\n                    reply = ftp.getReplyCode();\n                    if (!FTPReply.isPositiveCompletion(reply)) {\n                        ftp.disconnect();\n                        CofaxToolsUtil.log(\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: server refused connection: \" + connectServer);\n                        return (\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates FTP server refused connection.\");\n                    } else {\n                        ftp.login(login, password);\n                    }\n                    for (int ii = 0; ii < al.size(); ii++) {\n                        String fileName = (String) al.get(ii);\n                        CofaxToolsUtil.log(\"Original String \" + fileName);\n                        CofaxToolsUtil.log(\"Search for \" + folder);\n                        CofaxToolsUtil.log(\"Replace \" + liveFolder);\n                        String folderName = CofaxToolsUtil.replace(fileName, folder, liveFolder);\n                        CofaxToolsUtil.log(\"Results: \" + folderName);\n                        folderName = stripName(folderName);\n                        fileName = stripPath(fileName);\n                        try {\n                            InputStream io;\n                            io = new FileInputStream(fileTransferFolder + fileName);\n                            CofaxToolsUtil.log(\"Reading file : \" + fileTransferFolder + fileName);\n                            boolean directoryExists = ftp.changeWorkingDirectory(folderName);\n                            if (directoryExists == false) {\n                                CofaxToolsUtil.log(\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates directory: \" + folderName + \" does not exist. Attempting to create.\");\n                                message.append(\"Directory: \" + folderName + \" does not exist. Attempting to create.<BR>\");\n                                boolean canCreatDir = ftp.makeDirectory(folderName);\n                                CofaxToolsUtil.log(\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates results: \" + canCreatDir);\n                                message.append(\"Results: \" + canCreatDir + \"<BR>\");\n                            }\n                            boolean isStored = ftp.storeFile(fileName, io);\n                            CofaxToolsUtil.log(\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates storing file: \" + fileName + \" in directory: \" + folderName);\n                            CofaxToolsUtil.log(\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates on server : \" + connectServer);\n                            CofaxToolsUtil.log(\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates results: \" + isStored + \" : \" + ftp.getReplyString());\n                            message.append(\"Storing file \" + fileName + \"<BR> to location \" + folderName + \"<BR> on server \" + connectServer + \".<BR>\");\n                        } catch (java.io.IOException e) {\n                            CofaxToolsUtil.log(\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates cannot upload file\" + fileName + \"<BR>To path: \" + folderName + \"<BR>On server \" + connectServer);\n                            return (\"Cannot upload file\" + fileName + \"<BR>To path: \" + folderName + \"<BR>On server \" + connectServer);\n                        }\n                    }\n                    ftp.logout();\n                    ftp.disconnect();\n                    message.append(\"Success<BR><BR>\");\n                } catch (IOException e) {\n                    CofaxToolsUtil.log(\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates could not connect to server: \" + e);\n                    return (\"Could not connect to server: \" + e);\n                }\n            }\n            if (object.equals(\"Templates\")) {\n                String cSServers = (String) user.workingPubConfigElementsHash.get(\"CACHESERVERS\");\n                System.out.println(\"getting cache servers: \" + cSServers);\n                ArrayList cServers = splitServers(cSServers);\n                for (int iiii = 0; iiii < cServers.size(); iiii++) {\n                    String thisClearCacheServer = (String) cServers.get(iiii);\n                    try {\n                        String connectServer = (String) cServers.get(iiii);\n                        for (int iiiii = 0; iiiii < al.size(); iiiii++) {\n                            String thisFilePath = (String) al.get(iiiii);\n                            String folderNameFileName = CofaxToolsUtil.replace(thisFilePath, folder, liveFolder);\n                            String URLToClear = CofaxToolsServlet.removeTemplateCache + folderNameFileName;\n                            CofaxToolsClearCache clear = new CofaxToolsClearCache(\"HTTP://\" + thisClearCacheServer + URLToClear);\n                            clear.start();\n                            message.append(\"Clearing Cache for \" + folderNameFileName + \"<BR>\");\n                            message.append(\"on server \" + thisClearCacheServer + \"<BR>Success<BR><BR>\");\n                        }\n                    } catch (Exception e) {\n                        CofaxToolsUtil.log(\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: could not connect to server clearing cache \" + e);\n                    }\n                }\n            }\n            for (int i = 0; i < al.size(); i++) {\n                String fileName = (String) al.get(i);\n                String folderName = stripName(fileName);\n                fileName = stripPath(fileName);\n                File file = new File(fileTransferFolder + fileName);\n                boolean delete = file.delete();\n                CofaxToolsUtil.log(\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates deleting file from local drive: \" + fileTransferFolder + fileName);\n                CofaxToolsUtil.log(\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates results: \" + delete);\n            }\n        }\n        servers = splitServers(server);\n        if (action.equals(\"Delete\")) {\n            for (int iii = 0; iii < servers.size(); iii++) {\n                try {\n                    int reply;\n                    String connectServer = (String) servers.get(iii);\n                    ftp.connect(connectServer);\n                    CofaxToolsUtil.log(ftp.getReplyString());\n                    reply = ftp.getReplyCode();\n                    if (!FTPReply.isPositiveCompletion(reply)) {\n                        ftp.disconnect();\n                        CofaxToolsUtil.log(\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: FTP server refused connection: \" + connectServer);\n                        return (\"FTP server refused connection.\");\n                    } else {\n                        ftp.login(login, password);\n                    }\n                    for (int ii = 0; ii < al.size(); ii++) {\n                        String fileName = (String) al.get(ii);\n                        String folderName = stripName(fileName);\n                        fileName = stripPath(fileName);\n                        try {\n                            ftp.changeWorkingDirectory(folderName);\n                            ftp.deleteFile(fileName);\n                            CofaxToolsUtil.log(\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates deleting file: \" + fileName + \" from directory: \" + folderName);\n                            CofaxToolsUtil.log(\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates on server : \" + connectServer);\n                            CofaxToolsUtil.log(\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates results: \" + ftp.getReplyString());\n                            message.append(\"Deleting file \" + fileName + \"<BR>\");\n                            message.append(\"from folder \" + folderName + \"<BR>\");\n                            message.append(\"on server \" + connectServer + \"<BR>\");\n                        } catch (java.io.IOException e) {\n                            return (\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: cannot delete file\" + fileName);\n                        }\n                    }\n                    message.append(\"Success<BR><BR>\");\n                    ftp.logout();\n                    ftp.disconnect();\n                } catch (IOException e) {\n                    CofaxToolsUtil.log(\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR: Could not connect to server: \" + e);\n                    return (\"Could not connect to server: \" + e);\n                }\n            }\n            if (object.equals(\"Templates\")) {\n                String cISServers = (String) user.workingPubConfigElementsHash.get(\"CACHESERVERS\");\n                ArrayList cIServers = splitServers(cISServers);\n                for (int iiiiii = 0; iiiiii < cIServers.size(); iiiiii++) {\n                    String thisClearCacheIServer = (String) cIServers.get(iiiiii);\n                    try {\n                        String connectServer = (String) cIServers.get(iiiiii);\n                        for (int iiiiiii = 0; iiiiiii < al.size(); iiiiiii++) {\n                            String thisFilePathI = (String) al.get(iiiiiii);\n                            String URLToClearI = CofaxToolsServlet.removeTemplateCache + thisFilePathI;\n                            CofaxToolsClearCache clearI = new CofaxToolsClearCache(\"HTTP://\" + thisClearCacheIServer + URLToClearI);\n                            clearI.start();\n                            message.append(\"Clearing Cache for \" + thisFilePathI + \"<BR>\");\n                            message.append(\"on server \" + thisClearCacheIServer + \"<BR>Success<BR><BR>\");\n                        }\n                    } catch (Exception e) {\n                        CofaxToolsUtil.log(\"CofaxToolsFTP uploadOrDeleteMediaOrTemplates ERROR clearing cache \" + e);\n                    }\n                }\n            }\n        }\n        return (message.toString());\n    }\n", "code2": "    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        String target = null;\n        boolean allowedToAccess = false;\n        try {\n            URL requestUrl = new URL(\"http:/\" + request.getPathInfo());\n            for (Enumeration en = allowedUrls.elements(); en.hasMoreElements(); ) {\n                URL nextUrl = (URL) en.nextElement();\n                if ((nextUrl).getHost().equalsIgnoreCase(requestUrl.getHost())) {\n                    allowedToAccess = true;\n                }\n            }\n        } catch (MalformedURLException ex) {\n            System.err.println(\"Error in url: \" + \"http:/\" + request.getPathInfo());\n            return;\n        }\n        if (!allowedToAccess) {\n            response.setStatus(407);\n            return;\n        }\n        if (request.getPathInfo() != null && !request.getPathInfo().equals(\"\")) {\n            target = \"http:/\" + request.getPathInfo() + \"?\" + request.getQueryString();\n        } else {\n            response.setStatus(404);\n            return;\n        }\n        InputStream is = null;\n        ServletOutputStream out = null;\n        try {\n            URL url = new URL(target);\n            URLConnection uc = url.openConnection();\n            response.setContentType(uc.getContentType());\n            is = uc.getInputStream();\n            out = response.getOutputStream();\n            byte[] buf = new byte[4096];\n            int bytesRead;\n            while ((bytesRead = is.read(buf)) != -1) {\n                out.write(buf, 0, bytesRead);\n            }\n        } catch (MalformedURLException e) {\n            response.setStatus(404);\n        } catch (IOException e) {\n            response.setStatus(404);\n        } finally {\n            if (is != null) {\n                is.close();\n            }\n            if (out != null) {\n                out.close();\n            }\n        }\n    }\n", "label": 0, "substitutes": {"uploadOrDeleteMediaOrTemplates": ["uploadOrDeleteMediaAndTemTemplate", "uploadOrDeleteMediaAndTempl", "uploadOrDeleteMediaOrTplates", "uploadOrDeleteMediaOrTempl", "uploadOrDeleteMediaOrTemics", "uploadOrDeleteMediaAndTemics", "uploadOrDeleteMediaOrTempplates", "uploadOrDeleteMediaAndTics", "uploadOrDeleteMediaOrTempics", "uploadOrDeleteMediaOrTpl", "uploadOrDeleteMediaAndTpl", "uploadOrDeleteMediaOrTTemplate", "uploadOrDeleteMediaOrTempTemplate", "uploadOrDeleteMediaAndTemplates", "uploadOrDeleteMediaAndTplates", "uploadOrDeleteMediaOrTics", "uploadOrDeleteMediaOrTemppl", "uploadOrDeleteMediaOrTemTemplate", "uploadOrDeleteMediaAndTTemplate"], "action": ["address", "function", "op", "wrong", "operation", "activation", "step", "process", "mode", "fun", "event", "update", "method", "ase", "ACTION", "go", "call", "view", "admin", "act", "instance", "on", "article", "what", "expression", "feature", "format", "now", "active", "exclusive", "change", "commit", "actions", "scene", "acl", "error", "behavior", "actor", "verb", "version", "ACT", "controller", "type", "operator", "edit", "Action", "policy", "ction"], "object": ["item", "subject", "address", "module", "function", "number", "operation", "not", "objects", "resource", "property", "obj", "event", "hash", "class", "detail", "no", "attribute", "model", "act", "relation", "office", "instance", "node", "volume", "article", "what", "o", "job", "format", "entity", "unknown", "element", "project", "document", "oid", "one", "image", "actor", "version", "thing", "information", "integer", "entry"], "numElements": ["numElelem", "numNlement", "numNlem", " numelem", " numElem", "numelements", " numeles", "numelement", " numelement", "numelem", "numeles", "numElelements", "numEles", " numelements", "numElelement", "numElem", "numEleles", " numEles", "numNlements", "numNles"], "req": ["txt", " msg", " cred", " request", "obj", "Resp", "msg", "conf", "Requ", "Msg", " requ", "res", " serv", "requ", " conf", "q", " std", "Request", " resp", " cir", " cmd", "Cmd", "quest", "request", "qt", " fr", "tx", " res"], "session": ["local", "system", "search", "subject", "ess", "parent", "store", "browser", "event", "context", "stack", "manager", "sid", "thread", "connection", "status", "ssl", "config", "ses", "conn", "client", "http", "socket", "use", "group", "response", "ession", "request", "cache", "task", "Session", "window", "essions", "tx", "state"], "ftp": [" ftps", "FTp", "FTps", "ftps", " ftP", "afps", "FTtp", "afp", "afP", "FTP", "aftp", "fttp", " fttp", "ftP"], "user": ["system", "human", "by", "parent", "used", "part", "store", "per", "browser", "event", "basic", "device", "current", "record", "auth", "open", "username", "rule", "other", "owner", "users", "view", "USER", "manager", "to", "query", "mem", "instance", "person", "config", "job", "plugin", "form", "result", "er", "usr", "db", "student", "client", "ter", "util", "User", "sys", "me", "self", "use", "group", "ser", "info", "order", "account", "dev", "ver", "usage", "usa", "display", "author", "word"], "links": ["flags", "js", "packages", "dir", "groups", "properties", "owners", "ls", "network", "href", "pages", "projects", "html", "link", "rel", "blogs", "tags", "Links", "relations", "actions", "lines", "items", "details", "self", "scripts", "mails", "types", "Link"], "folders": ["contors", "contories", "conters", "foldories", "dires", "dirers", "dirories", "temes", "temors", "temories", "foldes", "dirors", "temers", "contes", "foldors"], "folder": ["system", "path", "topic", "card", "module", "dir", "sequence", "sheet", "resource", "old", "gallery", "zone", "context", "device", "family", "filename", "email", "fold", "center", "box", "zip", "area", "volume", "feed", "location", "host", "room", "base", "loop", "letter", "buffer", "enter", "root", "files", "container", "project", "lower", "database", "older", "upload", "stage", "region", "division", "Folder", "directory", "controller", "layout", "collection", "size"], "server": ["system", "localhost", "seed", "site", "resource", "store", "test", "remote", "browser", "service", "device", "slave", "manager", "scale", "url", "owner", "email", "center", "computer", "port", "instance", "erver", "host", "area", "console", "connection", "engine", "buffer", "enter", "root", "mobile", "database", "client", "stage", "socket", "serving", "version", "ser", "directory", "Server", "peer", "domain", "ver", "er", "handler"], "login": ["search", "pin", "secret", "ping", "blog", "cell", "match", "Login", "submit", "log", "number", "lock", "nic", "id", "mail", "print", "join", "bridge", "in", "basic", "auth", "phone", "username", "filename", "owner", "email", "skin", "admin", "connection", "computer", "profile", "ername", "license", "insert", "note", "nick", "net", "cookie", "fail", "pass", "database", "ident", "name", "fn", "john", "token", "ip", "account", "author"], "password": ["path", "secret", "picture", "PASS", "description", "resource", "restricted", "hash", "device", "stroke", "phrase", "ssh", "auth", "username", "attribute", "email", "performance", "productive", "worker", "pattern", "profile", "crypt", "confirmed", "wordpress", "encrypted", "prefix", "padding", "paste", "sudo", "command", "database", "pass", "power", "exclusive", "parser", "python", "pretty", "sword", "comment", "photo", "value", "escape", "hello", "another", "token", "pool", "strip", "Password", "policy", "word"], "fileTransferFolder": ["FileUploadFile", "fileUploadArea", "fileDownloadfolder", "fileUploadFile", "FileTransferDirectory", "fileTransferArea", "FileUploadDirectory", "FileTransferArea", "FileUploadfolder", "FileUploadArea", "fileTransferDirectory", "fileUploadLocation", "FileTransferFile", "fileMoveFile", "fileImportLocation", "fileDownloadDirectory", "fileUploadfolder", "fileUploadFolder", "FileTransferfolder", "fileMoveDirectory", "fileImportfolder", "FileUploadLocation", "fileMovefolder", "fileUploadDirectory", "FileTransferFolder", "FileTransferLocation", "FileUploadFolder", "fileTransferFile", "fileMoveFolder", "fileTransferfolder", "fileDownloadArea", "fileDownloadLocation", "fileImportFolder", "fileDownloadFile", "fileTransferLocation", "fileDownloadFolder", "fileImportArea"], "liveFolder": [" liveDir", "embedDirectory", "LiveDir", "liveDirectory", "LiveDirectory", "embedFolder", "Livefolder", "livefolder", " liveDirectory", "embedfolder", "LiveFolder", "embedDir", " livefolder", "liveDir"], "servers": ["servctors", "tevers", "teers", "tectors", "servvers", "Serers", "Serors", "serors", "teors", "Serctors", "serers", "serctors", "Servers", "servors"], "message": ["contact", "description", "number", "log", "string", "say", "sequence", "show", "Message", "mail", "browser", "mess", "msg", "content", "essage", "status", "summary", "m", "language", "reason", "trace", "buffer", "result", "document", "template", "media", "comment", "application", "data", "alert", "memory", "report", "warning", "response", "window", "body", "management", "flash", "command"]}}
{"id1": "8490710", "id2": "8164056", "code1": "    public void actualizar() throws SQLException, ClassNotFoundException, Exception {\n        Connection conn = null;\n        PreparedStatement ms = null;\n        registroActualizado = false;\n        try {\n            conn = ToolsBD.getConn();\n            conn.setAutoCommit(false);\n            Date fechaSystem = new Date();\n            DateFormat aaaammdd = new SimpleDateFormat(\"yyyyMMdd\");\n            int fzafsis = Integer.parseInt(aaaammdd.format(fechaSystem));\n            DateFormat hhmmss = new SimpleDateFormat(\"HHmmss\");\n            DateFormat sss = new SimpleDateFormat(\"S\");\n            String ss = sss.format(fechaSystem);\n            if (ss.length() > 2) {\n                ss = ss.substring(0, 2);\n            }\n            int fzahsis = Integer.parseInt(hhmmss.format(fechaSystem) + ss);\n            ms = conn.prepareStatement(SENTENCIA_UPDATE);\n            ms.setString(1, descartadoEntrada);\n            ms.setString(2, usuarioEntrada);\n            ms.setString(3, motivosDescarteEntrada);\n            ms.setInt(4, Integer.parseInt(anoOficio));\n            ms.setInt(5, Integer.parseInt(oficinaOficio));\n            ms.setInt(6, Integer.parseInt(numeroOficio));\n            ms.setInt(7, anoEntrada != null ? Integer.parseInt(anoEntrada) : 0);\n            ms.setInt(8, oficinaEntrada != null ? Integer.parseInt(oficinaEntrada) : 0);\n            ms.setInt(9, numeroEntrada != null ? Integer.parseInt(numeroEntrada) : 0);\n            int afectados = ms.executeUpdate();\n            if (afectados > 0) {\n                registroActualizado = true;\n            } else {\n                registroActualizado = false;\n            }\n            conn.commit();\n        } catch (Exception ex) {\n            System.out.println(\"Error inesperat, no s'ha desat el registre: \" + ex.getMessage());\n            ex.printStackTrace();\n            registroActualizado = false;\n            errores.put(\"\", \"Error inesperat, no s'ha desat el registre\" + \": \" + ex.getClass() + \"->\" + ex.getMessage());\n            try {\n                if (conn != null) conn.rollback();\n            } catch (SQLException sqle) {\n                throw new RemoteException(\"S'ha produ\u00eft un error i no s'han pogut tornar enrere els canvis efectuats\", sqle);\n            }\n            throw new RemoteException(\"Error inesperat, no s'ha modifcat el registre\", ex);\n        } finally {\n            ToolsBD.closeConn(conn, ms, null);\n        }\n    }\n", "code2": "    private String encode(String str) {\n        StringBuffer buf = new StringBuffer();\n        try {\n            MessageDigest md5 = MessageDigest.getInstance(\"MD5\");\n            md5.update(str.getBytes());\n            byte bytes[] = md5.digest();\n            for (int i = 0; i < bytes.length; i++) {\n                String s = Integer.toHexString(bytes[i] & 0xff);\n                if (s.length() == 1) {\n                    buf.append(\"0\");\n                }\n                buf.append(s);\n            }\n        } catch (Exception ex) {\n        }\n        return buf.toString();\n    }\n", "label": 0, "substitutes": {"actualizar": [" actualizear", " actualizeiar", " actualisAR", " actualiser", " actualisar", "ualizaAR", " actualizaiar", "ualizaar", "ualizaer", "ualiziar", " actualiziar", " actualisiar", " actualizeAR", " actualizaar", "ualizAR", "ualizer", " actualizer", " actualizaer", " actualizeer", " actualizaAR", " actualizAR", "ualizar", "ualizaiar"], "ClassNotFoundException": ["ClassNotfoundError", "ClassNotFoundError", "ClassNotPresentException", "ClassNotfoundException", "ClassNotPresentError"], "Exception": ["ION", "Class", "Ex", "I", "ception", "Operation", "EX", "Message", "E", "End", "Index", "File", " exception", "Response", "Connection", "Transaction", "Handler", "Un", "Example", "Exc", "Type", "Error", "Option", "Event", "Warning", "Application", "Result", "Configuration", "Time", "Context", "T", "None", "Exit", "Interface", "Throw", "Status", "Instance", "Null"], "conn": ["ln", "mc", "Con", "js", "ks", "en", "mt", "gate", " con", "ws", "obj", "Conn", "nt", "pg", "ctrl", "open", "conf", "Connection", "comm", "cp", "ctx", "c", "act", "n", "rs", "pas", "connection", "session", "cc", "close", "ns", "config", "Connect", "ct", "ann", "sc", "connect", "ens", "oss", "cn", "sql", "ch", "init", "db", "cert", "yn", "client", "die", "nc", "sys", "socket", "exec", "pen", "enc", "ont", "yes", "rc", "cb", "ec", "cmd", "pool", "org", "jp", "con"], "ms": ["windows", "mc", "cms", "js", "mic", "ks", "arms", "eds", "mys", "vs", "mt", "uts", "ats", "mx", "terms", "ants", "mod", "is", "eps", "ws", "sm", "xs", "ems", "mi", "ocks", "inv", "mos", "rs", "ts", "ents", "cs", "res", "ims", "m", "ces", "md", "fs", "ns", "ps", "pm", "pers", "ma", "s", "bs", "Ms", "MS", "mm", "cus", "ml", "mes", "posts", "uns", "sys", "mn", "mp", "ins", "ies", "mill", "qs", "os", "ys"], "fechaSystem": ["fechoaSystem", "fechoaSys", "fechlaSys", "fechaSys", "fetaeSystem", "fochaServer", "feshaSystem", "fechtaServer", "fechosystem", "fechoaServer", "fetiSys", "fechaesystem", "fetasystem", "fetaSystem", "fetiSystem", "feshoServer", "feshoSystem", "fechaeServer", "fechasystem", "fechoSTEM", "fechaeSys", "fechtaSTEM", "fetisystem", "fechaeSystem", "fechlaSystem", "fechoasystem", "fechaeSTEM", "fechoServer", "fechaSTEM", "fechlasystem", "fechtaSystem", "fochtaSTEM", "fechaServer", "fechiSys", "fetaeSys", "fechoSystem", "fochtaSystem", "fechiSystem", "feshosystem", "fochtaServer", "fochaSystem", "fetaSys", "fechoSys", "feshaServer", "fechisystem", "fochaSTEM", "feshasystem", "fetaesystem"], "aaaammdd": ["aaaaammm", "aaaaummd", "aaaammmm", "aaaamldd", "aaaammm", "aammmd", "aaaamds", "aaaamdd", "aaaaamd", "aaammmd", "aaammdd", "aaaaammmm", "aaaaumdd", "aaaammds", "aaaammmd", "aaaaumd", "aammd", "aaaamlmm", "aaaaammdd", "aaaaamdd", "aammdd", "aaaaammd", "aaaamld", "aammds", "aaammmm", "aaammds", "aaaaumds", "aaaammd", "aaammd", "aaaamd"], "fzafsis": ["fzeajsi", "fzeajsis", "fzajsis", "fzeafsi", "fzamesi", "fzamsis", "fzafesi", "fzahsi", "fzeajses", "fzeafsis", "fzeajesi", "fzahesi", "fzajses", "fzamsi", "fzamses", "fzeafses", "fzahses", "fzeafesi", "fzafsi", "fzajsi", "fzajesi", "fzafses"], "hhmmss": ["hmmbess", "hhMMss", "hhMMse", "hhmbss", "hhmbs", "hmmbss", "hhmmmps", "hhmmess", "hhmbse", "hhmmse", "hhmmps", "hhmmmms", "HHMMms", "HHMMss", "HHMMs", "hhmmms", "hmmmse", "HHMMps", "HHmms", "hmmmess", "hmmbse", "hmmms", "hhMMps", "hhmmmse", "hhMMess", "hhmmmess", "hhmmmss", "HHmmps", "hhMMms", "hmmbs", "hhmss", "hhmps", "hhMMs", "hhms", "HHmmss", "HHmmms", "hhmbess", "hhmms", "hmmmss"], "sss": ["rsss", "rsses", "ossjs", "essl", "ossn", "isses", "esses", "isss", " ssn", "rssl", "rssss", "ssl", "esss", "ssjs", "ossss", " ssjs", "essn", "issl", "essss", "sses", "ssn", "essjs", "osss", "ssss", " ssss", "issss"], "ss": ["sl", "sq", "js", "ess", "xx", "iss", "string", "txt", "str", "SS", "pps", "ws", "ius", "tz", "hs", "pres", "tt", "ress", "si", "rs", "\u00df", "ts", "good", "rss", "stats", "cs", "https", "ssl", "ns", "sf", "ps", "ses", "sd", "s", "su", "sb", "oss", "bs", "lower", "pass", "ds", "hess", "ys", "sys", "ass", "sv", "styles", "pse", "css", "tx", "less", "sql", "sh", "se"], "fzahsis": ["fizafsis", "fzabsis", "fzaqorus", "fizahses", "fizahorus", "fizahsis", "fzaborus", "fzaqsi", "fizahsi", "fzahsi", "fizafsi", "fizafses", "fizaforus", "fzabsi", "fzabses", "fzaqsis", "fzahorus", "fzaqses", "fzahses", "fzafsi", "fzaforus", "fzafses"], "afectados": ["afECTados", "afelectadas", "affECTados", "afitecturated", "afitectarians", "affettados", "affettulas", "afelectators", "affECTado", "afectionarians", "afitectado", "afittulas", "affecturated", "afECTurated", "afECTarians", "afECTado", "affectulas", "afectators", "afectadas", "affettadas", "afectionado", "affectarians", "afettados", "afittators", "afelectados", "afectarians", "affectados", "affectado", "afitectados", "afettators", "afectionados", "afettadas", "afittadas", "afectado", "affECTarians", "affectators", "affettators", "afettulas", "afelectulas", "afecturated", "affECTurated", "affectadas", "afectionurated", "afittados", "afectulas"]}}
{"id1": "2668634", "id2": "16719805", "code1": "    public WebmillDeploy(String inputName, String outputName, boolean stripLoggers) throws Exception {\n        File tempFile = null;\n        JarFile jin = null;\n        JarOutputStream jout = null;\n        FileChannel srcChannel = null;\n        FileChannel dstChannel = null;\n        try {\n            String portletApplicationName = getPortletApplicationName(outputName);\n            System.out.println(\"portletApplicationName = \" + portletApplicationName);\n            tempFile = File.createTempFile(\"webmill-delpoy-\", \"\");\n            tempFile.deleteOnExit();\n            jin = new JarFile(inputName);\n            jout = new JarOutputStream(new FileOutputStream(tempFile));\n            Document webXml = null;\n            Document portletXml = null;\n            Document contextXml = null;\n            ZipEntry src;\n            InputStream source;\n            Enumeration zipEntries = jin.entries();\n            while (zipEntries.hasMoreElements()) {\n                src = (ZipEntry) zipEntries.nextElement();\n                source = jin.getInputStream(src);\n                try {\n                    String target = src.getName();\n                    if (WEB_INF_WEB_XML.equals(target)) {\n                        System.out.println(\"Found web.xml\");\n                        webXml = parseXml(source);\n                    } else if (WEB_INF_PORTLET_XML.equals(target)) {\n                        System.out.println(\"Found WEB-INF/portlet.xml\");\n                        portletXml = parseXml(source);\n                    } else if (META_INF_CONTEXT_XML.equals(target)) {\n                        System.out.println(\"Found META-INF/context.xml\");\n                        contextXml = parseXml(source);\n                    }\n                } finally {\n                    source.close();\n                }\n            }\n            if (webXml == null) {\n                throw new IllegalArgumentException(\"WEB-INF/web.xml not found\");\n            }\n            if (portletXml == null) {\n                throw new IllegalArgumentException(\"WEB-INF/portlet.xml not found\");\n            }\n            WebmillWebApplicationRewriter webRewriter = new WebmillWebApplicationRewriter(webXml);\n            webRewriter.processWebXML();\n            WebmillContextRewriter contextRewriter = new WebmillContextRewriter(contextXml, portletApplicationName);\n            contextRewriter.processContextXML();\n            jin = new JarFile(inputName);\n            zipEntries = jin.entries();\n            while (zipEntries.hasMoreElements()) {\n                src = (ZipEntry) zipEntries.nextElement();\n                source = jin.getInputStream(src);\n                try {\n                    String target = src.getName();\n                    String fullTarget = '/' + target;\n                    if (stripLoggers && target.endsWith(\".jar\") && (target.startsWith(\"WEB-INF/lib/commons-logging\") || target.startsWith(\"WEB-INF/lib/log4j\"))) {\n                        System.out.println(\"Skip logger \" + target);\n                        continue;\n                    } else {\n                        if (webRewriter.getRealPortletTldFile() != null && fullTarget.equals(webRewriter.getRealPortletTldFile())) {\n                            System.out.println(\"Skip portlet tld file \" + fullTarget);\n                            continue;\n                        } else if (target.equals(WEB_INF_WEB_XML)) {\n                            System.out.println(\"Skip web.xml file \" + target);\n                            continue;\n                        } else if (target.equals(WEB_INF_PORTLET_XML)) {\n                            System.out.println(\"Skip portlet.xml file \" + target);\n                            continue;\n                        } else if (target.equals(META_INF_CONTEXT_XML)) {\n                            System.out.println(\"Skip context.xml file \" + target);\n                            continue;\n                        }\n                        System.out.println(\"Add file \" + target);\n                    }\n                    addFile(target, source, jout);\n                } finally {\n                    source.close();\n                }\n            }\n            addFile(WEB_INF_WEB_XML, webXml, jout);\n            addFile(WEB_INF_PORTLET_XML, portletXml, jout);\n            addFile(META_INF_CONTEXT_XML, contextXml, jout);\n            System.out.println(\"Attempting to add portlet.tld to war...\");\n            InputStream is = this.getClass().getResourceAsStream(\"/org/riverock/webmill/container/tags/portlet.tld\");\n            if (is == null) {\n                System.out.println(\"Failed to find portlet.tld in classpath\");\n            } else {\n                String portletTldFile = webRewriter.getRealPortletTldFile();\n                if (portletTldFile.charAt(0) == '/') {\n                    portletTldFile = portletTldFile.substring(1);\n                }\n                System.out.println(\"Adding file \" + portletTldFile);\n                try {\n                    addFile(portletTldFile, is, jout);\n                } finally {\n                    is.close();\n                }\n            }\n            jout.close();\n            jin.close();\n            jin = null;\n            jout = null;\n            System.out.println(\"Creating war \" + outputName + \" ...\");\n            System.out.flush();\n            srcChannel = new FileInputStream(tempFile).getChannel();\n            dstChannel = new FileOutputStream(outputName).getChannel();\n            dstChannel.transferFrom(srcChannel, 0, srcChannel.size());\n            srcChannel.close();\n            srcChannel = null;\n            dstChannel.close();\n            dstChannel = null;\n            tempFile.delete();\n            tempFile = null;\n            System.out.println(\"War \" + outputName + \" created\");\n            System.out.flush();\n        } finally {\n            if (srcChannel != null && srcChannel.isOpen()) {\n                try {\n                    srcChannel.close();\n                } catch (IOException e1) {\n                }\n            }\n            if (dstChannel != null && dstChannel.isOpen()) {\n                try {\n                    dstChannel.close();\n                } catch (IOException e1) {\n                }\n            }\n            if (jin != null) {\n                try {\n                    jin.close();\n                    jin = null;\n                } catch (IOException e1) {\n                }\n            }\n            if (jout != null) {\n                try {\n                    jout.close();\n                    jout = null;\n                } catch (IOException e1) {\n                }\n            }\n            if (tempFile != null && tempFile.exists()) {\n                tempFile.delete();\n            }\n        }\n    }\n", "code2": "    public static void copyFile(File from, File to) throws IOException {\n        if (from.isDirectory()) {\n            if (!to.exists()) {\n                to.mkdir();\n            }\n            File[] children = from.listFiles();\n            for (int i = 0; i < children.length; i++) {\n                if (children[i].getName().equals(\".\") || children[i].getName().equals(\"..\")) {\n                    continue;\n                }\n                if (children[i].isDirectory()) {\n                    File f = new File(to, children[i].getName());\n                    copyFile(children[i], f);\n                } else {\n                    copyFile(children[i], to);\n                }\n            }\n        } else if (from.isFile() && (to.isDirectory() || to.isFile())) {\n            if (to.isDirectory()) {\n                to = new File(to, from.getName());\n            }\n            FileInputStream in = new FileInputStream(from);\n            FileOutputStream out = new FileOutputStream(to);\n            byte[] buf = new byte[32678];\n            int read;\n            while ((read = in.read(buf)) > -1) {\n                out.write(buf, 0, read);\n            }\n            closeStream(in);\n            closeStream(out);\n        }\n    }\n", "label": 1, "substitutes": {"inputName": ["interfaceFilename", "InputFilename", "outputNames", "InputName", " inputNames", "interfaceFile", "inputFile", "InputPath", "outputFile", "inputFilename", "InputFile", "outputPath", "interfacePath", "outputFilename", " inputPath", "interfaceName", "inputPath", "InputNames", "inputNames", " inputFile"], "outputName": ["outputType", "OutputNames", "outputNames", "OutputName", "inputPort", " outputDir", " outputNames", "OutputDir", "outputPath", " outputType", "inputDir", " outputPort", "outputDir", " outputPath", "inputPath", "inputType", "OutputType", "inputNames", "OutputPath", "outputPort", "OutputPort"], "stripLoggers": ["stripDebuggers", "skiplogger", "stripDebugReferences", "stripLogger", "stripPathging", "skipLoggers", "stripLogReferences", "stripPathger", "skiplogReferences", "skipLogging", "skipLogReferences", "stripDebugger", "skipLogger", "striplogging", "skiploggers", "striploggers", "striplogReferences", "striplogger", "stripDebugging", "skiplogging", "stripLogging", "stripPathReferences", "stripPathgers"], "tempFile": ["tempPath", " temporaryDir", "temFile", " temporaryField", "tempDir", "Tempfile", "empFile", " tempfile", "empLock", "tmpFile", " tempDir", "TempFile", "tmpLock", "tempLock", "TempPlace", "empfile", "TempDirectory", "temfile", "tempField", "TempDir", "TempPath", "tempfile", "tmpPath", " temporaryFile", "tempPlace", "tempDirectory", "tmpfile", "tmpPlace", " tempDirectory", " tempPlace", "temDir", " temporaryfile", " tempPath", " temporaryDirectory", "temPath", "empField", " temporaryLock", "tmpField", "tmpDir"], "jin": ["ln", "kin", "pin", "tin", "pak", "yang", "quin", "ju", "txt", "rake", "jon", "JR", "nik", "jiang", "jet", "tan", "zon", "ja", "cin", "rison", "ini", "jing", "jo", "jad", "zip", "inx", "nu", " inj", "lin", "erb", "din", "lu", "xi", "vin", "via", "zin", "jc", "jac", "gin", "ran", " Jin", "rir", "john", "jl", "alin", "lah", "rin", "von", "json", "lig", "nin", "pai", "bin", "jen", "thin", "spin", "olin", "jp"], "jout": ["qout", " jou", "jpOut", " jio", "jsout", "zio", "zou", "jaos", "qaos", "zout", "jsin", "jpout", "qou", "qio", "jou", " jOut", "jpin", "jOut", " jaos", "zaos", "jio", "jsOut"], "srcChannel": ["srcChan", " srcchannel", "srcchannel", "sourcechannel", " srcChan", " srcCh", "sourceChannel", "rcCh", "rcchannel", "srcCh", "sourceChan", "rcChannel", "rcChan", "sourceCh"], "dstChannel": ["doutCh", "dgtFile", " ddestChan", " dstCh", "dstFile", "dgtCh", "ddestChan", "dgtChannel", "ddestChannel", "ddestCh", " dstFile", "doutFile", " dstChan", "dstCh", " ddestChannel", "dgtChan", " ddestCh", " ddestFile", "dstChan", "doutChannel", "ddestFile", "doutChan"], "portletApplicationName": ["portletAppType", "portableApplicationName", "portletAppValue", "portletapplicationKey", "portletAppCode", "portableApplicationValue", "portletServiceName", "portletApplicationValue", "portletServiceType", "portletCollectionName", "portableAppName", "portletapplicationType", "portletAppKey", "portletCollectionValue", "portletCollectionCode", "portletapplicationOrder", "portletAppOrder", "portableApplicationOrder", "portableApplicationKey", "portletApplicationType", "portletCollectionType", "portletapplicationName", "portletApplicationCode", "portableApplicationType", "portletApplicationKey", "portableApplicationCode", "portableAppOrder", "portableAppType", "portletServiceKey", "portletAppName", "portletApplicationOrder", "portletServiceOrder", "portableAppKey"], "webXml": ["webXMom", "webYxml", " webXML", "webTxml", "webMom", "WebXpl", "WebXml", "WebTxpl", "webTxML", "WebXm", "webWorklim", " webXxml", "webXpl", "webXm", "WebXML", "WebTxml", "webXMm", "webYml", "WebTxxml", "webWorkxml", " webTxxml", " webTxlim", "webYpl", "WebTxm", " webXaml", "webTxm", "webExm", "webXlim", "webYom", "webTxpl", "webXxml", "webXMxml", "webXaml", "WebTxML", "webMML", "webYML", " webYaml", "webExxml", "webExml", "webWorkml", "webYaml", " webYml", "webXML", "webTxlim", " webYML", "WebXxml", "webXMaml", " webTxML", " webYom", "webXMlim", "webXMml", " webXom", "webExML", "webXMpl", "webXom", "webTxxml", "webMaml", "webMml", " webXlim", "webXMML", " webTxml", "webWorkML"], "portletXml": ["portletTxxml", "portantXML", "portvetXxml", "portantTxng", "portableXml", "portletTxml", "portletTxql", "portableYxml", "portvetXng", "portletHeML", "portletXMql", "portletXxml", "portletYng", "portantXng", "portletHeng", "portletHexml", "portletEml", "portableXxml", "portletXng", "portletTxng", "portletEng", "portantTxML", "portletYml", "portvetXml", "portletEbl", "portantTxxml", "portantTxml", "portvetXMng", "portletXql", "portletYxml", "portvetXbl", "portletXML", "portableYML", "portletYql", "portableXML", "portableXql", "portletXMML", "portletExml", "portableYql", "portvetXMml", "portvetXMxml", "portantXxml", "portletXMxml", "portantXml", "portletTxML", "portableYml", "portletXMbl", "portletYbl", "portletHeml", "portletXMml", "portvetXMbl", "portletXMng", "portletYML", "portletXbl"], "contextXml": ["componentXml", "contextXaml", "componentXmx", "ctxXML", "contextCtml", "ctxXitml", "contextXtml", "contextEmx", "ctxXiML", "ctxXml", "contextXitml", "ctxXaml", "contextYmx", "contextYmm", "ctxXiaml", "contextXmm", "componentYmm", "componentYml", "contextAxmx", "contextAxml", "contextAxML", "ctxXiml", "ctxXtml", "contextXiml", "contextXmx", "contextYml", "contextEML", "componentYmx", "componentYML", "contextXiaml", "contextCml", "contextEml", "contextXiML", "contextYtml", "componentXmm", "contextAxmm", "contextEmm", "contextYaml", "contextXML", "componentXML", "contextCaml", "contextYML", "contextCML"], "src": ["sec", " sou", "ln", "sr", "sq", "cur", "sl", "Source", "ctr", "txt", "zh", "str", "crit", "resource", "obj", "st", "dest", "SOURCE", "rob", "from", "filename", "url", "skin", "sup", "sol", "scope", "secure", "https", "bh", "sing", "buster", "sit", "supp", "rel", "syn", "desc", "sel", "sc", "sb", "loc", "su", "sp", "tmp", "comp", "ident", "slice", "usr", "via", "ie", "ind", "sys", "cont", "addr", "rc", "ser", "kk", "inst", "proc", "sn", "entry"], "source": ["seed", "sample", "file", "sequence", "site", "parent", "resource", "store", "channel", "start", "in", "context", "dest", "service", "SOURCE", "style", "from", "se", "reader", "shell", "copy", "null", "query", "ource", "scope", "inner", "session", "check", "status", "zip", "instance", "console", "secure", "base", "iterator", "iter", "single", "set", "table", "Source", "format", "buffer", "series", "get", "raw", "sp", "feature", "result", "sql", "input", "ie", "tree", "template", "spec", "image", "ser", "sum", "it", "unit", "state", "origin", "stream", "entry", "size"], "zipEntries": ["ipEries", "ZipEntriers", "zipEntryries", "zipEnies", "zipEntrys", "zipentries", "zipEntriers", "zipEntarts", "zoneEntables", "Zipentrs", "zipEities", "zipInties", "zipEntryarts", "Zipentriers", "ZipEntries", "zipEnables", "zipEnts", "zipIntrs", "zipEntables", "ipEntires", "ZipEntrs", "zoneEnies", "ipEires", "zipIntriers", "ipEs", "zipIntries", "zoneEnables", "zipentables", "zoneEnties", "zipEies", "zipEs", "zipEntities", "ipEnts", "ipEntries", "zipentities", "zipEriers", "zipErs", "zipEntrs", "zipentrs", "ZipEnties", "zipEnties", "zoneEntities", "zipEns", "zipEntryires", "Zipenties", "zipEables", "ipEarts", "zipEnarts", "zipentriers", "zipEnities", "zoneEnries", "zipEnries", "ipEntarts", "zipEntires", "zipenties", "zipEarts", "zoneEntries", "zipEries", "zoneEnities", "Zipentries", "zipEnires", "zipEires"], "target": ["text", "local", "module", "match", "term", "Target", "tag", "parent", "resource", "test", "t", "tool", "class", "family", "route", "filename", "url", "owner", "tif", "primary", "goal", "scope", "alias", "pattern", "label", "title", "host", "arg", "gt", "location", "rel", "base", "compatible", "table", "buffer", "format", "result", "project", "name", "template", "arget", "top", "chain", "version", "pkg", "handle", "task", "peer", "layout", "controller", "type", "prop", "bolt"], "webRewriter": ["Supp", "webRebler", "log", "webRepriter", "webWrite", "webRebrite", "Entry", "Input", "aos", "File", "webWactor", "webRebriter", "webRepler", "_", "WebRewler", "webRewrite", "WebWriter", "WebWler", "WebWactor", "webRewactor", "Log", "New", "WebWrite", "get", "impl", "WebRewriter", "println", "WebRewrite", "webRepactor", "cont", "webRewler", "webReprite", "webWriter", "WebRewactor", "webWler", "json", "webRebactor", "entry"]}}
{"id1": "596993", "id2": "18631594", "code1": "    private String makeLoginRequest(URL url) throws IOException {\n        HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();\n        urlConnection.setRequestMethod(\"POST\");\n        urlConnection.setDoInput(true);\n        urlConnection.setDoOutput(true);\n        urlConnection.setUseCaches(false);\n        urlConnection.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\n        StringBuilder content = new StringBuilder();\n        content.append(\"Email=\").append(URLEncoder.encode(EMAIL, \"UTF-8\"));\n        content.append(\"&Passwd=\").append(URLEncoder.encode(PASSWORD, \"UTF-8\"));\n        content.append(\"&service=\").append(URLEncoder.encode(SERVICE, \"UTF-8\"));\n        content.append(\"&source=\").append(URLEncoder.encode(\"Google Base data API\", \"UTF-8\"));\n        OutputStream outputStream = urlConnection.getOutputStream();\n        outputStream.write(content.toString().getBytes(\"UTF-8\"));\n        outputStream.close();\n        int responseCode = urlConnection.getResponseCode();\n        InputStream inputStream;\n        if (responseCode == HttpURLConnection.HTTP_OK) {\n            inputStream = urlConnection.getInputStream();\n        } else {\n            inputStream = urlConnection.getErrorStream();\n        }\n        return toString(inputStream);\n    }\n", "code2": "    public static synchronized String getMD5_Base64(String input) {\n        MessageDigest msgDigest = null;\n        try {\n            msgDigest = MessageDigest.getInstance(\"MD5\");\n        } catch (NoSuchAlgorithmException e) {\n            throw new IllegalStateException(\"System doesn't support MD5 algorithm.\");\n        }\n        try {\n            msgDigest.update(input.getBytes(\"UTF-8\"));\n        } catch (java.io.UnsupportedEncodingException ex) {\n            throw new IllegalStateException(\"System doesn't support your  EncodingException.\");\n        }\n        byte[] rawData = msgDigest.digest();\n        byte[] encoded = Base64.encode(rawData);\n        String retValue = new String(encoded);\n        return retValue;\n    }\n", "label": 0, "substitutes": {"makeLoginRequest": ["makeloginResponse", " makeLoginResponse", "makeloginRequest", "makeSubmitRequest", "makeFacebookRequest", " makeFacebookResponse", "makeSubmitResponse", "makeloginMessage", "makeloginPost", " makeFacebookRequest", "makeSubmitPost", "makeLoginResponse", "makeFacebookResponse", " makeFacebookPost", "makeFacebookMessage", " makeLoginPost", " makeLoginMessage", "makeFacebookPost", " makeFacebookMessage", "makeLoginPost", "makeLoginMessage", "makeSubmitMessage"], "url": ["build", "sl", "path", "address", "string", "file", "Url", "abs", "str", "nl", "b", "char", "k", "browser", "ls", "open", "call", "r", "re", "dl", "ll", "https", "ssl", "location", "uri", "base", "URL", "job", "web", "cl", "ur", "un", "name", "bel", "http", "el", "l", "ref", "ul"], "urlConnection": ["UrlConn", "logConnect", "logConn", "logLink", "mountconnection", "consoleConnection", "sslConnection", "httpStream", " urlSession", "urlTree", "httpConnection", "browserConnect", "httpSession", "loadInstance", "xmlConnection", " urlConnect", "fileConnect", "httpLink", "browserConnection", "mountSession", "nlLink", "urlStream", "xmlConnector", "browserconnection", "urlConnector", " urlInstance", "loadConn", "urlconnection", "httpConn", "sslConn", "fileconnection", "loadConnect", "logConnection", "urlConnect", "urlLink", "xmlPort", "sslConnector", "urlPort", "sslSession", "consoleConnect", " urlClient", "fileConnection", "browserConn", "browserInstance", "mountConnection", "handleConn", "sslconnection", "browserClient", " urlconnection", "urlClient", "nlConnect", "httpconnection", "consoleConn", "handleStream", "nlconnection", "nlConnection", "sslPort", "handleConnect", "sslConnect", "UrlInstance", "loadConnection", "httpConnect", "UrlSession", "sslTree", "xmlTree", "handleConnection", "UrlConnect", " urlPort", "urlSession", "mountConn", "Urlconnection", "sslStream", "mountClient", "UrlConnection", "consoleSession", "fileSession", "mountConnect", " urlConnector", " urlConn", " urlTree", "UrlLink", "urlInstance", "urlConn"], "content": ["settings", "text", "search", "address", "contact", "subject", "description", "function", "filter", "sequence", "any", "ontent", "Content", "properties", "context", "current", "const", "control", "comments", "output", "network", "names", "trust", "node", "pattern", "label", "code", "summary", "title", "language", "license", "expression", "reason", "config", "size", "form", "example", "message", "format", "raw", "command", "lead", "conn", "activity", "action", "create", "core", "document", "template", "media", "cm", "comment", "object", "data", "cont", "value", "image", "report", "metadata", "version", "handle", "mask", "xml", "json", "script", "layout", "cache", "cmd", "body", "continue", "values"], "outputStream": ["inputBlock", "inputView", "OutputStreamer", "networkStreamer", "outputForm", "OutputStyle", "outputSteam", " outputView", "networkstream", "OutputForm", "outputBlock", " outputstream", "Outputstream", "outputStreamer", " outputSteam", "outputView", "OutputBlock", "inputSteam", "OutputSteam", "OutputView", "networkSteam", "inputForm", "outputstream", " outputForm", "OutputStream", "networkStream", "inputStyle", " outputBlock", "outputStyle", " outputStyle", " outputStreamer"], "responseCode": ["responseCategory", "ResponseType", "statusCode", "statusType", "sequenceStatus", "sequenceType", "responseStatus", "sequenceCode", "responseChoice", "statusCount", "responseCount", "usageCount", "ResponseCount", "usageChoice", "usageCode", " responseCount", " responseChoice", "ResponseChoice", "responseType", "sequenceCount", "ResponseStatus", "ResponseCategory", "ResponseCode", "statusStatus", "usageCategory", " responseCategory"], "inputStream": ["actStyle", "inputView", "InputForm", " inputStyle", "inputStreamer", "outputForm", "outputSteam", "thisStreamer", "fileQueue", "inputThread", "errorSteam", "viewSteam", "actSteam", "thisSteam", "fileSteam", "fileStreamer", "viewThread", "viewView", "InputView", "errorView", "outputView", "inputSteam", "viewStream", "actStream", "actView", " inputView", " inputThread", "inputQueue", " inputSteam", "fileStream", "errorStream", "inputForm", " inputStreamer", "thisStream", "thisQueue", "errorForm", "inputStyle", "outputStyle", "InputStream", "outputThread", " inputQueue", "InputSteam"]}}
{"id1": "9647576", "id2": "4938100", "code1": "    private void Reserve() throws SQLException {\n        Statement stbookings, stchartwl;\n        String sp = \"\";\n        if (useragent) sp = \"agent\"; else sp = \"user\";\n        String userbooksql = \"\";\n        String agentbooksql = \"\";\n        String bookingid = String.valueOf(System.currentTimeMillis());\n        String currentcoach;\n        String currentseat;\n        try {\n            if (useragent) {\n                agentbooksql = \"update hp_administrator.agent_bookings set BOOKINGS = xmlquery('copy $new := $BOOKINGS modify do insert \";\n                agentbooksql += \" <detail booking_id=\\\"\" + booking_details.getTicketno() + \"\\\" status=\\\"open\\\" train_no=\\\"\" + booking_details.getTrain_no() + \"\\\" source=\\\"\" + booking_details.getSource() + \"\\\" dest=\\\"\" + booking_details.getDestination() + \"\\\" dep_date=\\\"\" + booking_details.getDate() + \"\\\" > \";\n            } else if (!useragent) {\n                userbooksql = \"update hp_administrator.user_bookings set BOOKINGS = xmlquery('copy $new := $BOOKINGS modify do insert \";\n                userbooksql += \" <detail booking_id=\\\"\" + booking_details.getTicketno() + \"\\\" status=\\\"open\\\" train_no=\\\"\" + booking_details.getTrain_no() + \"\\\" source=\\\"\" + booking_details.getSource() + \"\\\" dest=\\\"\" + booking_details.getDestination() + \"\\\" dep_date=\\\"\" + booking_details.getDate() + \"\\\" > \";\n            }\n            for (int tickpos = 0; tickpos < booking_details.getNoOfPersons(); tickpos++) {\n                currentcoach = coach.get(tickpos);\n                currentseat = seatno.get(tickpos);\n                if (!currentcoach.equals(\"WL\")) {\n                    String chartavailupdsql = \"update hp_administrator.chart_wl_order set AVAILABLE_BOOKED = xmlquery('copy $new := $AVAILABLE_BOOKED   modify do insert \";\n                    chartavailupdsql += \"<seat number=\\\"\" + currentseat + \"\\\"><details user_id=\\\"\" + booking_details.getUserId() + \"\\\" usertype=\\\"\" + sp + \"\\\" ticket_no=\\\"\" + booking_details.getTicketno() + \"\\\" name=\\\"\" + booking_details.getNameAt(tickpos) + \"\\\" age=\\\"\" + booking_details.getAgeAt(tickpos) + \"\\\" sex=\\\"\" + booking_details.getSexAt(tickpos) + \"\\\" type=\\\"primary\\\"  /></seat>\";\n                    chartavailupdsql += \" into $new/status/class[@name=\\\"\" + booking_details.getTclass() + \"\\\"]/coach[@number=\\\"\" + currentcoach + \"\\\"] \";\n                    chartavailupdsql += \" return  $new' ) where train_no like '\" + booking_details.getTrain_no() + \"' and date = '\" + booking_details.getDate() + \"' \";\n                    System.out.println(chartavailupdsql);\n                    stchartwl = conn.createStatement();\n                    int updstat = stchartwl.executeUpdate(chartavailupdsql);\n                    if (updstat > 0) System.out.println(\"chart_wl  availability  updated\");\n                } else if (currentcoach.equals(\"WL\")) {\n                    String chartwlupdsql = \"update hp_administrator.chart_wl_order set WAITLISTING = xmlquery('copy $new := $WAITLISTING modify do insert \";\n                    chartwlupdsql += \"<details user_id=\\\"\" + booking_details.getUserId() + \"\\\" usertype=\\\"\" + sp + \"\\\" ticket_no=\\\"\" + booking_details.getTicketno() + \"\\\" name=\\\"\" + booking_details.getNameAt(tickpos) + \"\\\" age=\\\"\" + booking_details.getAgeAt(tickpos) + \"\\\" sex=\\\"\" + booking_details.getSexAt(tickpos) + \"\\\" type=\\\"primary\\\" /></seat>\";\n                    chartwlupdsql += \" into $new/status/class[@name=\\\"\" + booking_details.getTclass() + \"\\\"] \";\n                    chartwlupdsql += \" return  $new' ) where train_no like '\" + booking_details.getTrain_no() + \"' and date = '\" + booking_details.getDate() + \"' \";\n                    System.out.println(chartwlupdsql);\n                    stchartwl = conn.createStatement();\n                    int updstat = stchartwl.executeUpdate(chartwlupdsql);\n                    if (updstat > 0) System.out.println(\"chart_wl  waitlisting  updated\");\n                }\n                if (useragent) agentbooksql += \"<person><coach>\" + currentcoach + \"</coach><seat>\" + currentseat + \"</seat></person>\"; else userbooksql += \"<person><coach>\" + currentcoach + \"</coach><seat>\" + currentseat + \"</seat></person>\";\n            }\n            if (useragent) {\n                agentbooksql += \"</detail>   as first into $new/book return  $new' ) where agent_id like '\" + booking_details.getUserId() + \"'\";\n                System.out.println(agentbooksql);\n                stbookings = conn.createStatement();\n                int updstat = stbookings.executeUpdate(agentbooksql);\n                if (updstat > 0) System.out.println(\"agent bookings updated\");\n            } else {\n                userbooksql += \"</detail>   as first into $new/book return  $new' ) where user_id like '\" + booking_details.getUserId() + \"'\";\n                System.out.println(userbooksql);\n                stbookings = conn.createStatement();\n                int updstat = stbookings.executeUpdate(userbooksql);\n                if (updstat > 0) System.out.println(\"user bookings  updated\");\n            }\n        } catch (SQLException e) {\n            conn.rollback();\n            e.printStackTrace();\n        }\n    }\n", "code2": "    public static String sha1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n        MessageDigest md;\n        md = MessageDigest.getInstance(\"SHA-1\");\n        byte[] sha1hash = new byte[40];\n        md.update(text.getBytes(\"iso-8859-1\"), 0, text.length());\n        sha1hash = md.digest();\n        return convertToHex(sha1hash);\n    }\n", "label": 0, "substitutes": {"Reserve": ["Consolve", "Reserved", "Conserved", "Servation", "Reservation", "Conserve", "resolve", "reserve", "reservation", "Resolve", "Conservation", "Solve", "reserved", "Served", "Serve"], "stbookings": ["stbooksing", "Stbooksies", "stBookies", "stbinders", "Stbookers", "stbindies", "Stbookings", "stbindings", "stbooking", "stBookings", "stBookers", "stbinding", "stbookers", "stbooksers", "stBooking", "Stbooksings", "Stbooking", "stbooksies", "Stbooksing", "Stbookies", "Stbooksers", "stbookies", "stbooksings"], "stchartwl": ["stplotwl", "stchartml", "STchartwl", "STchartbook", "STchartml", "STChartwl", "stChartbook", "stchartbook", "stchartwal", "STChartbook", "stChartwal", "stpagewal", "stChartml", "STChartwal", "stChartwl", "stplotbook", "stplotml", "stplotwal", "stpagebook", "stpagewl", "stpageml", "STchartwal", "STChartml"], "sp": ["esp", "spr", "pb", "pt", "so", "tp", "lp", "p", "sw", "sy", "osp", "SP", "st", "sm", " SP", "asp", "service", "policy", "si", "cp", "scope", "vol", "pol", "sf", "sk", "ps", "sc", "pe", "sb", "isp", "bsp", " esp", "spe", "sil", "ap", "sv", "pp", "Sp", "yp", "ss", "space", "sh", "jp", "se"], "userbooksql": ["agentbookssql", "userbookql", "userbookQL", "userreadsql", "userpagesQL", "userpagesqs", " userbookssql", " userbooksSQL", "userbooksQL", " userbindql", "clientbooksql", "userreadsels", "usertypesqs", "userscriptselly", "userookselly", "userbooksels", "agentpagesqs", "usertypesql", "userooksql", "userooksqs", "userreadsqs", "clientbooksqs", "userbindquer", "userBookssql", "userbooksquer", "userBooksSQL", "agentbooksqs", "userscriptsqs", "userbysquer", "userbindql", "agentbooksQL", " userbindquer", "userbyssql", "userBooksql", "clientreadsql", "userbooksSQL", "usertypessql", "userbindsql", "userooksels", "userpagesql", "userbookssql", "userscriptsels", "clientbooksels", "clientreadsels", " userbindsql", "agentpagesql", "usertypesQL", "userbookqs", "agentpagessql", "clientreadselly", "userreadselly", "userbysql", " userbooksquer", "userbysSQL", "clientbookselly", " userbindSQL", "agentpagesQL", "userscriptsql", "userpagessql", "userbindSQL", "userbooksqs", "clientreadsqs", "userbookselly", "userBooksquer"], "agentbooksql": ["ownerbooksQL", " agentbooksQL", "agentiquesili", "agentbooksquer", "agentbookssql", "agentBookssql", "agentletsql", " agentBooksqu", "agentbeansql", "agentletsquer", "agentbookQL", "agentbookquer", "ownerbeansili", "agentBooksili", "agentbooksqu", "agentbookql", "agentbookili", "agentbeansili", "ownerbooksql", "agentbeansQL", "agentpagesili", "agentBooksQL", "agentBooksql", "agentiquesQL", " agentbooksqu", "agentiquesql", "agentbooksQL", " agentbookili", " agentBookssql", "ownerbooksili", " agentbookssql", "ownerbeansql", "agentBooksqu", "agentbooksili", "agentBooksquer", " agentBooksql", " agentBooksquer", " agentbookql", "agentbeansquer", "ownerbeansQL", " agentbooksquer", "agentletssql", "agentiquesqu", "ownerbooksquer", "agentletsqu", "ownerbeansquer", "agentpagesql", "agentpagessql", "agentiquesquer", "agentiquessql", "agentpagesQL", " agentbookQL", " agentbooksili"], "bookingid": ["bookillingID", "Bookingids", "bookingingids", "BookingID", "bookingsID", "bookingID", "BookingsID", "bookingids", "bookingingID", "Bookingsids", "Bookingsid", "bookingsid", "Bookingid", "bookillingids", "bookingingid", "bookingsids", "bookillingid"], "currentcoach": ["currentCoch", "currentCoACH", "currentCOac", "currentlycoat", "currentconac", "currentlycat", "currentcoac", "currentlycoch", "currentcoat", " currentcoACH", "currentcalech", "currentlycoasp", "currentcoarch", "currentcoachable", "currentlycoac", "currentlycoech", "currentconasp", "currentcoeACH", " currentfoarch", "currentcasp", "currentfoachable", "currentlyCoachable", "currentcoACH", "currentfoACH", "currentfoch", "currentlycasp", "currentconach", "currentcac", "currentcat", "currentlyCoech", "currentcoasp", "currentCOach", "currentcalach", "currentlyCoach", "currentcalachable", " currentcoch", "currentCoech", "currentfoarch", " currentfoACH", "currentfoach", "currentCoarch", "currentcoech", " currentcoarch", "currentCoachable", "currentCOasp", "currentlycoachable", "currentcach", "currentlycoach", " currentfoch", "currentlyCoch", "currentcoeach", "currentcoearch", "currentCoach", "currentlycac", "currentcalch", "currentCOat", "currentconat", "currentcoch", "currentfoech", "currentlycach", " currentfoach"], "currentseat": ["currentroute", " currentsen", "currentslot", " currentsel", "currentsen", "currentlyseat", "reportedsel", "curroute", "currentport", "currentlyslot", "reportedroute", "currentsel", " currentroute", "cursel", "curseat", "currentlysen", "currentlysel", "Currentsel", "curport", "reportedport", "Currentsen", "Currentseat", " currentport", " currentslot", "reportedseat", "Currentslot"], "tickpos": ["testposition", "rickpo", "snappo", "rickprop", " tickPos", "poppo", "popposition", "testpo", "tickposition", "stickpos", "checkposition", "checkpos", "quoteno", "snapposition", "snapPos", "quotepos", "checkPos", "snappos", "rickPos", "ickpo", "testpos", "rickpos", "tickpo", " tickno", " tickposition", "stickno", "popPos", "tickprop", "quoteposition", "tickPos", "testPos", "stickprop", "ickPos", " tickpo", "poppos", "quotePos", "ickpos", "checkpo", "tickno", "ickposition", " tickprop", "stickposition", "stickPos", "stickpo"], "chartavailupdsql": ["chartavailupdsQL", "chartavailupdatesq", "chartavailupdatessql", "chartavailupdatesQL", "chartavailupsdssql", "chartavailupdql", "chartavailupdQL", "chartavailupsdatessql", "chartavailupdatesql", "chartavailupsdsQL", "chartavailupsdsql", "chartavailupsdatesql", "chartavailupsdsq", "chartavailupdq", "chartavailupsdatesq", "chartavailupdssql", "chartavailupdsq", "chartavailupysql", "chartavailupysQL", "chartavailupsdatesQL", "chartavailupyssql", "chartavailupysq"]}}
{"id1": "9275622", "id2": "3958807", "code1": "    private boolean copyFile(File _file1, File _file2) {\n        FileInputStream fis;\n        FileOutputStream fos;\n        try {\n            fis = new FileInputStream(_file1);\n            fos = new FileOutputStream(_file2);\n            FileChannel canalFuente = fis.getChannel();\n            canalFuente.transferTo(0, canalFuente.size(), fos.getChannel());\n            fis.close();\n            fos.close();\n            return true;\n        } catch (FileNotFoundException e) {\n        } catch (IOException e) {\n        }\n        return false;\n    }\n", "code2": "        private void loadBinaryStream(String streamName, InputStream streamToLoad, long sz, HttpServletRequest req, HttpServletResponse resp) throws IOException {\n            resp.setContentType(getContentType(req, streamName));\n            resp.setHeader(\"Content-Disposition\", \"inline;filename=\" + streamName);\n            resp.setContentLength((int) sz);\n            OutputStream out = resp.getOutputStream();\n            BufferedOutputStream bos = new BufferedOutputStream(out, 2048);\n            try {\n                IOUtils.copy(streamToLoad, bos);\n            } finally {\n                IOUtils.closeQuietly(streamToLoad);\n                IOUtils.closeQuietly(bos);\n            }\n            getCargo().put(GWT_ENTRY_POINT_PAGE_PARAM, null);\n        }\n", "label": 1, "substitutes": {"copyFile": ["copyfile", " copyStream", "copyStream", " cpStream", " cpFiles", " duplicateFile", " cpfile", "copyFiles", " duplicateStream", " copyfile", " cpFile", " duplicateFiles", " duplicatefile", " copyFiles"], "_file1": ["_linkInit", "_filesOne", "_fileInit", "_File1", "_linkOne", "_FileInit", "_ileInit", "_files1", "_ile2", "_ileFirst", "_link1", "_fileFirst", "_files2", "_ile1", "_filesFirst", "_fileOne", "_FileFirst", "_ileOne", "_link2", "_File2", "_FileOne"], "_file2": [" _File2", "_FILE1", "_File1", " _filetwo", " _File1", " _fileb", " _file02", " _FILEb", "_FILE2", " _fileTwo", "_link1", "_image1", "_imageb", "_Filetwo", "_File02", " _FILE1", "_FILEb", " _Filetwo", "_fileb", "_linkTwo", " _FILE02", "_file02", "_filetwo", "_image2", " _FILE2", " _FileTwo", "_linktwo", "_link2", "_FILE02", "_File2", "_FileTwo", "_image02", "_Fileb", "_fileTwo"], "fis": ["cfris", "Fos", "cos", "fios", "flis", "kis", "qis", "qos", "ufis", "qios", "fais", "fris", "fli", "cios", " fios", "kios", "flios", "kos", " fiss", "cfis", "Fois", " fi", "fois", "fiss", "Fis", " fris", "cais", "fliss", "ufi", "ufios", " fais", "Fios", "qiss", "Fiss", "cfiss", "fi", "Fris", "ufiss", "cfois", "cis", "kais", " fois"], "fos": ["mows", "sfose", "sfos", "woss", "ffos", "flis", "faos", "woes", " foes", " fows", "ffoss", "foss", "hose", "mos", "foes", "flos", "wows", " faos", "sfoes", " fose", "hoss", "maos", "waos", "ffoes", "floss", "fose", "floes", "fows", "wis", "hos", "sfoss", "ffis", "moes", "wos", " foss", "hoes"], "canalFuente": ["canallFuestro", "canalUtent", "canallfuenza", "canallfuestro", "canalFalente", "canalFiperor", "canalTenperor", "canalfuje", "canalUteree", "canalTenente", "canalfuperor", "canalFuent", "canalUtente", "canalFalent", "canalTenent", "canalFuperor", "canalfuent", "canalTenenza", "canalKuent", "canalUtestro", "canalFuestro", "canalfuente", "canalfuestro", "canalFiente", "canalfuenza", "canallFuente", "canalFuenza", "canallFuperor", "canalfueree", "canalFalperor", "canalFueree", "canallFueree", "canallfuente", "canalFalje", "canallfuperor", "canalFaleree", "canalKuperor", "canallfuje", "canalFalestro", "canallFuent", "canalKuje", "canallfueree", "canalFient", "canalKuente", "canallFuenza", "canalFuje", "canallFuje", "canalFienza", "canallfuent"]}}
{"id1": "3495460", "id2": "16308040", "code1": "    public boolean actEstadoEnBD(int idRonda) {\n        int intResult = 0;\n        String sql = \"UPDATE ronda \" + \" SET estado = 1\" + \" WHERE numeroRonda = \" + idRonda;\n        try {\n            connection = conexionBD.getConnection();\n            connection.setAutoCommit(false);\n            ps = connection.prepareStatement(sql);\n            intResult = ps.executeUpdate();\n            connection.commit();\n        } catch (SQLException ex) {\n            ex.printStackTrace();\n            try {\n                connection.rollback();\n            } catch (SQLException exe) {\n                exe.printStackTrace();\n            }\n        } finally {\n            conexionBD.close(ps);\n            conexionBD.close(connection);\n        }\n        return (intResult > 0);\n    }\n", "code2": "    public boolean update(String dbName, Query[] queries) throws ServiceException {\n        Connection con = null;\n        PreparedStatement pstmt = null;\n        int rows = 0;\n        try {\n            con = getDbConnection().getConnection(dbName);\n            con.setAutoCommit(false);\n            for (int i = 0; i < queries.length; i++) {\n                Query query = queries[i];\n                System.out.println(query.getSql());\n                pstmt = con.prepareStatement(query.getSql());\n                addParametersToQuery(query, pstmt);\n                rows += pstmt.executeUpdate();\n            }\n            con.commit();\n            return rows > 0;\n        } catch (DbException e) {\n            log.error(\"[DAOService::update]  \" + e.getMessage(), e);\n            log.error(\"[DAOService::update] Execute rollback \" + e.getMessage(), e);\n            try {\n                con.rollback();\n            } catch (SQLException e1) {\n                log.error(\"[DAOService::update] Errore durante il rollback \" + e.getMessage(), e);\n                throw new ServiceException(e.getMessage());\n            }\n            throw new ServiceException(e.getMessage());\n        } catch (SQLException e) {\n            log.error(\"[DAOService::update]  \" + e.getMessage(), e);\n            try {\n                con.rollback();\n            } catch (SQLException e1) {\n                log.error(\"[DAOService::update] Errore durante il rollback \" + e.getMessage(), e);\n                throw new ServiceException(e.getMessage());\n            }\n            throw new ServiceException(e.getMessage());\n        } finally {\n            closeConnection(con, pstmt, null);\n        }\n    }\n", "label": 1, "substitutes": {"actEstadoEnBD": [" updateEstadaEnDB", " updateEstadaConDD", " updateEstadoEnbd", " updateEstadoVersDB", " updateEstadaEnDD", " updateEstadaEnBD", " updateEstadoENDD", " updateEstadoConBD", " updateEstadaConDB", " updateEstadoVersBD", " updateEstadaConBD", " updateEstadaConbd", " updateEstadoEnBD", " updateEstadoEnDB", " updateEstadoEnDD", " updateEstadoConbd", " updateEstadoVersbd", " updateEstadoENDB", " updateEstadoVersDD", " updateEstadoConDD", " updateEstadoConDB", " updateEstadoENBD", " updateEstadaEnbd", " updateEstadoENbd"], "idRonda": [" idGrona", "idGrabo", "idORoda", "idrora", " idGrabo", "idORora", "idCabo", "idrabo", " idRona", "idRana", "idCona", "idRhana", "idRoda", " idGrora", " idRabo", "idRora", "idRabo", "idRona", "idCora", "idGronda", " idRana", "idConda", "idRhonda", "idRhora", "idRhoda", "idGrora", "idronda", " idRoda", "idrona", " idRora", "idORonda", " idGronda", "idGrona", "idORana"], "intResult": ["pretRes", "floatResult", "IntResult", " intReturn", "intReturn", "IntRes", "pretReturn", "floatResults", "pretResult", "IntReturn", "pretResults", "intresult", "INTResult", "INTresult", "IntResults", "floatRes", " intResults", "interresult", "interRes", "intResults", "interResult", "INTRes", " intRes", "intRes", " intresult", "floatReturn", "INTReturn", "interReturn"], "sql": ["ln", "seed", "sq", "scl", "spr", "description", "string", "log", "pel", "nl", "mail", "eps", "ls", "select", "inv", "url", "view", "dl", "n", "query", "sol", "status", "SQL", "csv", "sf", "sel", "sb", "sp", "s", "q", "db", "template", "fn", "spec", "sv", "login", "cmd", "qs", "ql", "sn"], "connection": ["created", "system", "subject", "function", "number", "communication", "collection", "resource", "channel", "po", "ion", "position", "context", "ticket", "current", "open", " Connection", "Connection", "network", "bo", "to", "c", "entry", "relation", "session", "condition", "computer", "port", "statement", "close", "link", "server", "engine", "table", "connect", "conn", "database", "db", "writer", "reference", "tree", "client", "document", "nc", "application", "socket", "pointer", "response", "connected", "directory", "character", "pool", "handler", "con", "creator", "command"], "ps": ["js", "Ps", "ping", "pt", "pd", "tp", "p", "process", "eps", "pps", "po", "processor", "pg", "ptr", "pres", "pas", "cp", "rs", "ts", "cs", "pi", "res", "aps", "statement", "pers", "pm", "ports", "fps", "sp", "s", "conn", "fp", "ds", "ips", "pr", "posts", "pa", "pp", "mp", "pos", "pse", "proc", "prep", "jp", "PS", "gres"]}}
{"id1": "5399593", "id2": "18238468", "code1": "    public synchronized String encrypt(String plaintext) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n        MessageDigest md = null;\n        md = MessageDigest.getInstance(\"SHA\");\n        md.update(plaintext.getBytes(\"UTF-8\"));\n        byte raw[] = md.digest();\n        String hash = (new BASE64Encoder()).encode(raw);\n        return hash;\n    }\n", "code2": "    @Test\n    public void testLoadSource() throws IOException {\n        ArticleMetadata metadata = new ArticleMetadata();\n        metadata.setId(\"http://arxiv.org/abs/math/0205003v1\");\n        InputStream inputStream = arxivDAOFacade.loadSource(metadata);\n        Assert.assertNotNull(inputStream);\n        StringWriter writer = new StringWriter();\n        IOUtils.copy(inputStream, writer, \"utf8\");\n        String contents = writer.toString();\n        Assert.assertTrue(contents.contains(\"A strengthening of the Nyman\"));\n        inputStream.close();\n    }\n", "label": 0, "substitutes": {"encrypt": ["deccode", "ecode", "encrypted", "enrypt", "enrypted", "decode", "decrypted", "ecrypted", "enode", "encode", "ecrypt", "eccode", "decrypt", "enccode"], "plaintext": [" plaininput", "maincontext", "preText", " plainpassword", "plainth", " Plainth", "preword", " plaincontext", "precontext", "plaininput", "mainword", " plainth", "plainText", " Plaininput", " plainText", "ainth", "maintext", "plainword", "aintext", "plainpassword", "aininput", "pretext", " plainword", " Plaintext", "ainpassword", " Plainpassword", "mainText", "plaincontext"], "UnsupportedEncodingException": ["UnsupportedEncodingEx", "UnsupportedEncodedEx", "UnsupportedCompoderError", "UnsupportedEncodedException", "UnsupportedEncoderException", "UnsupportedEncodedError", "UnsupportedEncryptionError", "UnsupportedEncryptionEx", "UnsupportedEncryptionException", "UnsupportedCompoderEx", "UnsupportedCompodingError", "UnsupportedEncodingError", "UnsupportedEncoderEx", "UnsupportedCompodingEx", "UnsupportedCompoderException", "UnsupportedEncoderError", "UnsupportedCompodingException"], "md": ["d", "mc", "dr", "pd", "mt", "ld", "mod", "mo", " MD", "sm", "med", "nt", " ma", " mm", " mo", "nd", " mc", "red", "det", "ad", "m", " m", " dd", "pm", "def", "ms", "sd", "dd", "mand", "hd", "mm", "ind", "mk", "cd", "od", "bd", "mg", " cmd", "sha", "dm", "mn", "mp", "add", "der", "exec", "df", "mb", "cmd", "gm", "MD", "del", " Md", "grad"], "raw": ["bytes", "bare", "strip", " Raw", "des", "orig", "clean", "was", "aw", "row", "rendered", "pack", "n", "custom", "unsigned", "mem", "clear", "valid", "serial", "message", "Raw", "out", "draw", "core", "all", "input", "known", "read", "hook", "hex", "data", "load", " RAW", "RAW", "empty", "json", "available", "buf", "full", "cooked", "sh"], "hash": ["mac", "search", "ASH", "h", "height", "hat", "zh", "id", "ash", "tag", "component", "cloth", "shadow", "total", "ssh", "check", "has", "code", "html", "bh", "hidden", "dump", "message", "result", "unknown", "ashes", "name", "proof", "hex", "key", "sha", "password", "Hash", "tr", "sum", "mask", "hed", "sh", "ashed"]}}
{"id1": "11716816", "id2": "3266833", "code1": "    private void updateFile(File file) throws FileNotFoundException, IOException {\n        File destFile = new File(file.getPath().replace(URL_UNZIPPED_PREFIX + latestVersion, \"\"));\n        FileChannel in = null;\n        FileChannel out = null;\n        try {\n            if (!destFile.exists()) {\n                destFile.getParentFile().mkdirs();\n                destFile.createNewFile();\n            }\n            in = new FileInputStream(file).getChannel();\n            out = new FileOutputStream(destFile).getChannel();\n            in.transferTo(0, in.size(), out);\n        } finally {\n            if (out != null) out.close();\n            if (in != null) in.close();\n        }\n    }\n", "code2": "    public MotixFileItem(final InputStream is, final String name, final String contentType, final int index) throws IOException {\n        this.name = name;\n        this.contentType = contentType;\n        this.index = index;\n        this.extension = FilenameUtils.getExtension(this.name);\n        this.isImage = ImageUtils.isImage(name);\n        ArrayInputStream isAux = null;\n        final ByteArrayOutputStream out = new ByteArrayOutputStream();\n        try {\n            IOUtils.copy(is, out);\n            isAux = new ArrayInputStream(out.toByteArray());\n            if (this.isImage) {\n                this.bufferedImage = imaging.read(isAux);\n            }\n        } finally {\n            IOUtils.closeQuietly(out);\n            IOUtils.closeQuietly(isAux);\n        }\n        this.inputStream = new ArrayInputStream(out.toByteArray());\n    }\n", "label": 1, "substitutes": {"updateFile": ["archiveFile", "UpdateFile", "archivePage", "UpdateSourceFile", "downloadPage", "updateSourceFile", "UpdatePage", "downloadContent", "archiveSourceFile", "downloadSourceFile", "updateContent", "updatePage", "downloadFile", "UpdateContent", "archiveContent"], "file": ["local", "path", "h", "log", "p", "io", "resource", "FILE", "channel", "ile", "e", "t", "File", "output", "attribute", "filename", "url", "issue", "content", "rule", "null", "port", "title", "link", "f", "base", "table", "format", "page", "get", "message", "fp", "db", "input", "name", "document", "line", "data", "source", "le", "report", "image", "use", "handle", "info", "type", "full", "entry"], "IOException": [" IOError", " IOProblem", "IOError", "OperationException", "IOProblem", "SecurityProblem", "OperationError", "SecurityException", "SecurityError", "OperationProblem"], "destFile": [" destinationDir", "tempPath", " DestDir", "tempFile", " DestEmail", "tempDir", "destPath", "destSourceFile", " DestFile", "targetFile", " destDo", "DestSourceFile", "declSourceFile", "sourceFile", "sourcePath", " destPage", " destFolder", "declFolder", "sourceDir", "destPlace", "destEmail", "Destile", "declile", " destPlace", "optPlace", "Destfile", " destDir", " destinationFile", "DestFile", "DestFolder", "destFolder", "optFolder", " DestDo", " destEmail", "destfile", "optPage", "tempfile", "destDir", " destinationDo", "optFile", " destPath", " destile", "targetDir", "DestPath", " destinationEmail", "DestPage", "targetPath", " destfile", "targetFolder", "sourceFolder", " destSourceFile", "destDo", "declFile", "DestDir", "DestPlace", "destPage", "destile"], "in": ["local", "ln", "ic", "en", "io", "sin", "is", "inf", "up", "al", "cin", "from", "mi", "edIn", "re", "r", " IN", "act", "ini", "IN", "n", "i", "inc", "inner", "inside", "m", " din", "f", "on", "iter", "net", "s", "din", "oin", "init", "pass", "raw", "all", "input", "isin", "ind", "mm", "read", "ie", "gin", "In", "im", "ai", "ins", "rin", "l", "it", "info", "bin", "ne", "ain", "con", "inn"], "out": ["v", "cos", "again", "at", "log", "en", "OU", "io", "oe", "channel", "b", "t", "conv", "obj", "ot", "nt", "ion", "aos", "up", "no", "msg", "output", "flush", "ex", "n", "to", "null", "write", "gt", "outer", "o", "note", "net", "s", "result", "oss", "conn", "cn", "ch", "client", "fn", "sys", "con", "OUT", "one", " OUT", "or", "chain", "Out", "cache", "it", "g", "cmd", "ou", "outs", "ne", "can", "jp", "co", "os"]}}
{"id1": "937612", "id2": "6517139", "code1": "    public String new2Password(String passwd) {\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n            String clearPassword = passwd;\n            md.update(clearPassword.getBytes());\n            byte[] digestedPassword = md.digest();\n            return new String(digestedPassword);\n        } catch (java.security.NoSuchAlgorithmException e) {\n            System.out.println(\"MD5 doesn't exist\");\n            System.out.println(e.toString());\n            return null;\n        }\n    }\n", "code2": "    private String getPrefsKey(String key) {\n        try {\n            if (MD5 == null) MD5 = MessageDigest.getInstance(\"MD5\");\n            MD5.reset();\n            MD5.update(key.getBytes(\"UTF-8\"));\n            byte[] resultBytes = MD5.digest();\n            return toHexString(resultBytes);\n        } catch (Exception nsae) {\n            return key;\n        }\n    }\n", "label": 1, "substitutes": {"new2Password": ["password2String", "password2Text", "password256Pass", "password5Text", "password256Text", "new2String", "password2Password", "password2Pass", "new1Text", "new2Text", "new2Pass", "password256String", "new1Password", "password1Pass", "password5Password", "new1Pass", "password5String", "new1String", "password1String", "password1Text", "password5Pass", "password1Password", "password256Password"], "passwd": ["Passwd", "Passw", "passw", "psword", "Passphrase", "pasw", "passsword", "pasphrase", "assphrase", "asssword", "Passsword", " passw", " password", "passphrase", "password", "pwd", "assw", "asswd", " passsword", "pw", "Password", "pword", "paswd"], "md": ["d", "mc", "dr", "pd", "mt", "ld", "mod", "mo", "di", " MD", "sm", "managed", "nd", "sam", "red", "det", "ad", "m", "pm", "sd", "ms", "dd", "mand", "rm", "hd", "mm", "ind", "mk", "cd", "cm", "od", "me", "bd", "mg", "mn", "and", "dm", "metadata", "sha", "mp", "der", "dh", "df", "mb", "cmd", "MD", " Md", "sh"], "clearPassword": ["cleanpassword", "ClearDescription", "clearpassword", "Clearpassword", "ClearWord", "resetPassword", "ClearUser", "ClearString", "clearDescription", " clearUser", "clearUser", "cleanPassword", " clearString", "ClearPassword", "cleanUser", "clearString", " clearpassword", "resetWord", "resetString", "clearWord", " clearDescription", "cleanDescription", "resetpassword", " clearWord"], "digestedPassword": ["destedPassword", "digifiedPassword", "dashedToken", "diguredText", "digestToken", "digifiedResponse", "diguredPassword", "digashedWord", "digifiedpassword", "digestPassword", "digestWord", "digestedpassword", "diguredWord", " digestedResponse", "digashedText", " digestedString", "digashedToken", "digifiedString", "digestedToken", "diguredResponse", "diguredToken", "digashedPassword", "digestResponse", " digestString", " digestpassword", "dashedWord", "destedToken", "digestString", "digestedText", "destedText", "diguredpassword", "digestText", "diguredString", " digestedpassword", "dashedText", "digestedWord", "digestpassword", " digestPassword", "dashedPassword", "digestedResponse", "destedWord", " digestResponse", "digestedString"]}}
{"id1": "8135072", "id2": "8320469", "code1": "    public void setImg() {\n        JFileChooser jFileChooser1 = new JFileChooser();\n        String separator = \"\";\n        if (JFileChooser.APPROVE_OPTION == jFileChooser1.showOpenDialog(this.getFatherFrame())) {\n            setPath(jFileChooser1.getSelectedFile().getPath());\n            separator = jFileChooser1.getSelectedFile().separator;\n            File dirImg = new File(\".\" + separator + \"images\");\n            if (!dirImg.exists()) {\n                dirImg.mkdir();\n            }\n            int index = getPath().lastIndexOf(separator);\n            String imgName = getPath().substring(index);\n            String newPath = dirImg + imgName;\n            try {\n                File inputFile = new File(getPath());\n                File outputFile = new File(newPath);\n                if (!inputFile.getCanonicalPath().equals(outputFile.getCanonicalPath())) {\n                    FileInputStream in = new FileInputStream(inputFile);\n                    FileOutputStream out = new FileOutputStream(outputFile);\n                    int c;\n                    while ((c = in.read()) != -1) out.write(c);\n                    in.close();\n                    out.close();\n                }\n            } catch (Exception ex) {\n                ex.printStackTrace();\n                LogHandler.log(ex.getMessage(), Level.INFO, \"LOG_MSG\", isLoggingEnabled());\n                JOptionPane.showMessageDialog(null, ex.getMessage().substring(0, Math.min(ex.getMessage().length(), getFatherPanel().MAX_DIALOG_MSG_SZ)) + \"-\" + getClass(), \"Set image\", JOptionPane.ERROR_MESSAGE);\n            }\n            setPath(newPath);\n            bckImg = new ImageIcon(getPath());\n        }\n    }\n", "code2": "    public static String md5(String text) {\n        String encrypted = \"\";\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            md.update(text.getBytes());\n            encrypted = hex(md.digest());\n        } catch (NoSuchAlgorithmException nsaEx) {\n        }\n        return encrypted;\n    }\n", "label": 0, "substitutes": {"setImg": ["getIMg", "setimG", "getIMG", "setIMgs", "setimg", "getImgn", "getImG", "getImg", "setImagegn", "setImageg", "setImageG", "setIMG", "getIMgs", "setImG", "setIMg", "setImagegs", "getIMgn", "setimgn", "getImgs", "setImgn", "setIMgn", "setImgs", "setimgs"], "jFileChooser1": ["jFileChoikerControl", "jFileChickerOne", "jFileChoister2", "jFileComposer2", "jFileChoicerOnce", "jFileChoester1", "jFileChopter1", "jFileChoikerOne", "jFileChoicer1", "jFileCompicker1", "jFileChoose2", "jFileChopterOne", "jFileChoiker1", "jFileChickerOnce", "jFileChooserControl", "jFileChooseOne", "jFileChoister1", "jFileChoose4", "jFileChoser1", "jFileChoester2", "jFileChoer1", "jFileChooserOnce", "jFileChicker1", "jFileChoickerOne", "jFileChoickerFirst", "jFileSeoser0", "jFileCompickerFirst", "jFileChooseOnce", "jFileChoserOnce", "jFileChooserFirst", "jFileChooser4", "jFileChopterControl", "jFileSeose0", "jFileComperOne", "jFileChoser2", "jFileComposerOne", "jFileChoer2", "jFileChoickerControl", "jFileChicker2", "jFileChooserOne", "jFileSeoser1", "jFileCompickerOne", "jFileComper1", "jFileChoister0", "jFileChoicerOne", "jFileSeose1", "jFileComper4", "jFileChoicker1", "jFileChooser2", "jFileChoester0", "jFileChopterFirst", "jFileCompickerControl", "jFileChoerOne", "jFileComper2", "jFileChoicer4", "jFileChooser0", "jFileComposer4", "jFileSeose2", "jFileChoer4", "jFileComposerFirst", "jFileChoose0", "jFileChoikerFirst", "jFileChoose1", "jFileChoickerOnce", "jFileChoicer2", "jFileChoserOne", "jFileComposer1", "jFileChoicker2", "jFileComposerControl", "jFileSeoser2"], "separator": ["separate", " separitter", "seitter", "seigator", " separigator", "seate", "collator", "collate", "termininator", "splater", "seator", "separitter", "separacer", "terminigator", "seinator", "terminATOR", "collativity", "variate", "generate", "generator", "semator", "terminoder", "separigator", "variator", "seATOR", " separativity", " separater", "terminator", "splator", "separinator", " separATOR", "generoder", "variater", " separate", "separoder", " separacer", "terminater", "generacer", "generater", "varioder", "semATOR", "terminate", "collATOR", "separater", "separATOR", " separinator", "splATOR", "separativity", "semitter", "semate", "generATOR", "splacer", "terminativity"], "dirImg": ["dirimig", "folderIMG", "DirImm", "DirIMic", "dirIMig", "dirImig", "dirImm", "folderImgs", "DirIMG", "DirImgs", "dirimm", "dirIfm", "folderImvg", "folderImg", "dirImge", "dirIMvg", "folderIMgs", "dirIg", "dirImic", "dirImG", "DirIMm", "dirimgs", "dirIMG", "dirIvg", "DirIMig", "DirIMg", "dirIG", "folderIMg", "dirIMgs", "dirimg", "dirIfig", "dirImvg", "dirIMge", "dirIMm", "dirIfgs", "DirImic", "dirimG", "dirIMg", "dirIgs", "dirIMic", "dirImgs", "dirimge", "DirImig", "folderImge", "folderIMge", "folderIMvg", "DirImg", "folderImG", "dirIfG", "DirIMgs", "dirIfg", "dirIfic", "DirImG"], "index": ["seed", "address", "IND", "match", "number", "height", "point", "length", "test", "level", "count", "start", "num", "position", "success", "ion", "Index", "max", "open", "axis", "ex", "n", "i", "sol", "condition", "set", "connect", "draw", "diff", "all", "second", "ind", "exit", "exp", "zero", "sign", "value", "key", "add", "pos", "info", "find", "timeout"], "imgName": ["animName", "animname", "animId", "imgId", " imgname", " imgPath", "jpgname", "jpgPath", " imgId", "htmlName", "jpgId", "animPath", "htmlNo", "imgType", " imgType", "jpgNo", " imgNo", "imgname", "jpgName", "jpgType", "imgPath", "htmlPath", "htmlType", "imgNo"], "newPath": [" newUrl", "newsPassword", " newTime", "validPath", "oldTh", "NEWTime", "uniquePath", "oldDir", "NewUrl", "NEWFormat", " newName", "oldPart", "NewName", "newPassword", "newpath", "newsTh", " newDir", "newUrl", "validpath", "uniqueTh", " newFormat", "newName", "validUrl", "newDir", "newsPath", "newPart", "oldPath", "newFormat", "oldTime", "validName", "Newpath", "newTh", "uniquePassword", "NewPath", "newsPart", "oldFormat", "NEWDir", "uniquePart", "NEWPath", "oldPassword", " newpath", "newTime"], "inputFile": [" inputBe", "inputStream", "inFILE", " inputStream", "inputFILE", "acceptBe", "saveFile", " inputfile", " inputPlace", "acceptfile", "inStream", "outputStream", "createBe", "inputfile", "inPath", " inputPath", "inPlace", "createfile", "inFile", "acceptFile", "importPath", "acceptPlace", "inputBe", "inputPath", "importFile", "createFile", "saveStream", "importStream", "outputFILE", "inputPlace", "saveFILE", "createPlace", "importPlace"], "outputFile": ["displayBe", "inputPage", "outputfile", "inputModel", "outputModel", "OutputDir", "displayFile", " outputStream", "newBe", "outputDisk", "outFormat", "outDir", "outfile", "outModel", "displayStream", "inputFormat", "outDisk", " outputBe", "inputDir", " outputfile", "outputStream", "outputFormat", "newfile", "inputfile", "outputBe", "putModel", "inputDisk", "newStream", "outputDir", "Outputfile", "displayfile", "putDisk", "putPage", "outputPage", "outFile", "newFile", "outPage", "putFile", "OutputFile", "OutputFormat"], "in": ["ic", "en", "by", "io", "sin", "is", "per", "up", "al", "from", "cin", "ini", "IN", "inc", "i", "ex", "inner", "inside", "ar", " din", "iter", "din", "init", "isin", "input", "ind", "read", "source", "In", "el", "ins", "rin", "it", "bin", "ain", "con", "inn"], "out": ["v", "cos", "at", "put", "log", "en", "OU", "io", "help", "t", "nt", "aos", "output", "ex", "to", "n", "inner", "write", "auto", "on", "outer", "o", "dis", "net", "screen", "end", "cn", "writer", "gr", "sys", "con", "OUT", "Out", "list", "sum", "cache", "it", "cmd", "ou", "outs", "can", "ne", "co", "os"], "c": ["d", "mc", "v", "cat", "unc", "ce", "cu", "char", "k", "t", "count", "e", "z", "arc", "max", "cut", "go", "lc", "cp", "cod", "ex", "n", "r", "i", "a", "cs", "code", "cr", "m", "cc", "col", "f", "ct", "com", "sc", "cl", "q", "ch", "cd", "u", "cm", "uc", "nc", "cont", "ac", "chain", "C", "rc", "l", "ec", "gc", "bc", "dc"], "bckImg": ["bckimgs", "bckImn", "bckIMge", "bckImgs", "bckIMgs", "bkgImge", "bckImge", "bckIMn", "bkgIMgs", "bkgIMg", "bkgIMge", "bkgIMn", "bckimg", "bckIfn", "bckimge", "bckIfg", "bckIfge", "bckIfgs", "bckimn", "bkgImg", "bkgImn", "bkgImgs", "bckIMg"]}}
{"id1": "20011285", "id2": "3731077", "code1": "    public static void copy(File sourceFile, File destinationFile) {\n        try {\n            if (((sourceFile == null) && (destinationFile == null)) || ((sourceFile == null) || (destinationFile == null))) {\n                System.out.println(\"sourceFile & destinationFile is null\");\n                System.exit(-1);\n            }\n            if (sourceFile.isDirectory()) {\n                File[] tmp = sourceFile.listFiles();\n                File f;\n                for (int i = 0; i < tmp.length; i++) {\n                    f = new File(destinationFile.getAbsolutePath() + File.separator + tmp[i].getName());\n                    f.getParentFile().mkdirs();\n                    copy(tmp[i], f);\n                }\n            } else {\n                System.out.println(\"\\nCopy from: \" + sourceFile + \"\\n\\n     to: \" + destinationFile);\n                FileChannel source = new FileInputStream(sourceFile).getChannel();\n                FileChannel destination = new FileOutputStream(destinationFile).getChannel();\n                destination.transferFrom(source, 0, source.size());\n                source.close();\n                destination.close();\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n", "code2": "    public static void copyFile(File from, File to) throws IOException {\n        assert (from != null);\n        assert (to != null);\n        if (!to.exists()) {\n            File parentDir = to.getParentFile();\n            if (!parentDir.exists()) parentDir.mkdirs();\n            to.createNewFile();\n        }\n        FileInputStream in = null;\n        FileOutputStream out = null;\n        try {\n            in = new FileInputStream(from);\n            try {\n                out = new FileOutputStream(to);\n                FileChannel ic = in.getChannel();\n                try {\n                    FileChannel oc = out.getChannel();\n                    try {\n                        oc.transferFrom(ic, 0, from.length());\n                    } finally {\n                        if (oc != null) {\n                            oc.close();\n                        }\n                    }\n                } finally {\n                    if (ic != null) {\n                        ic.close();\n                    }\n                }\n            } finally {\n                if (out != null) {\n                    out.close();\n                }\n            }\n        } finally {\n            if (in != null) {\n                in.close();\n            }\n        }\n    }\n", "label": 1, "substitutes": {"copy": ["proxy", "file", "clone", "delete", "py", "p", "Cop", "cat", "pixel", "clip", "remote", "cop", "cut", "php", "export", "cp", "c", "to", "write", "zip", "close", "link", "split", "gc", "crop", "slice", "paste", "create", "Copy", "download", "transfer", "save", "move", "sync", "share", "co", "opy"], "sourceFile": ["acePlace", " sourceLocal", "sourcefile", "originWeb", "sourceDate", "SourceFiles", "identDate", "sampleFILE", "aceFile", "identPlace", " sourceFiles", "sourceLog", "SourceLog", "initfile", "sourcePlace", "packageFILE", "Sourcefile", "ourceDirectory", " sourceDate", "srcFiles", "sourceDir", "originLine", "sourceHeader", "ourcePath", "sourceUnit", "identFiles", "sourceDirectory", "SourcePath", " sourcePath", "sampleFile", "SourceDir", "ourceFILE", "sourceFILE", "packageDirectory", "SourceLine", "sampleLocal", "packageUser", "ourceUser", " sourceLog", "aceDate", "sourceLine", "sourceLocal", "srcFile", "sourceUser", " sourceUnit", "ourcefile", "sourcePath", "ourceFile", "srcDirectory", "aceFiles", "srcLocal", " sourcePlace", "ourceLog", " sourceLine", "srcFILE", "SourceWeb", "srcHeader", "srcfile", "initFILE", "SourceUnit", "srcUser", "initHeader", " sourceFILE", "initFile", " sourcefile", "samplefile", "sourceWeb", "srcUnit", " sourceWeb", "originDir", " sourceHeader", "sourceFiles", "identFile", "packageFile", "SourceFile", "originFile", " sourceDir"], "destinationFile": ["destificationPath", "parentinateFILE", "destinatorFile", "destinatedfile", "destinatedFILE", "destmentationFile", "transinationDir", "destinationLocation", "estinatorPath", "destinatorPath", "destinationDisk", "catinationKey", "destationfile", "destructionFILE", "catinatefile", "identinationFILE", "destinoFile", "destumentFile", "transinationFILE", "destificationDir", "identinatedFile", "destructionLine", "destinatorfile", "destensionDisk", "destinofile", "identinationMail", "catinateKey", "parentinationEmail", "destensionFile", "identinatedLine", "destinationfile", "resultinationFile", "destinoKey", "destentionLine", "estinationFile", "destructionFile", "resultinateFile", "transinationDisk", "identinationLine", "identinationFile", "destinatorDir", "destinationEmail", "destinationKey", "transinateDisk", "identinatedFILE", "parentinationFILE", "resultinationLocation", "parentinateEmail", "destinatorFILE", "destinationDir", "destmentationFILE", "destinateDisk", "destinatedLocation", "transinateDir", "destinatedLine", "estinatorFile", "destmentationDir", "resultinationfile", "destructionMail", "resultinateLocation", "estinationPath", "catinationFile", "estinationDir", "destinatefile", "destensionFILE", "destinateDir", "transinationFile", "destinatedDisk", "estinationfile", "destinationFILE", "destinateKey", "destinationLine", "estinatorDir", "destumentFILE", "identinatedMail", "destmentationDisk", "destinateLocation", "destinatorEmail", "catinateFile", "parentinationFile", "estinatorfile", "destinatedMail", "destinationPath", "destumentEmail", "destinatorLocation", "destificationFile", "destationPath", "destinationMail", "resultinateDisk", "destificationfile", "destationKey", "destationFile", "transinateFILE", "destinateEmail", "destentionFile", "destentionMail", "destinatorDisk", "destinatedFile", "destentionFILE", "parentinateFile", "destinateFILE", "catinationfile", "resultinatefile", "destensionDir", "resultinationDisk", "transinateFile", "destinateFile", "destationDir"], "tmp": ["aux", "tar", "cmp", "cur", "perm", "stuff", "qq", "dir", "shots", "p", "txt", "np", "abs", "my", "src", "emp", "nb", "bt", "aaa", "t", "obj", "nt", "xs", "managed", "msg", "tt", "pres", "tf", "xxx", "img", "obs", "m", "split", "yy", "ms", "sp", "buff", "parts", "files", "multi", "mm", "etc", "mk", "tab", "data", "mp", "cb", "pkg", "mb", "buf", "apps", "temp"], "f": ["F", "d", "v", "fl", "fc", "h", "file", "fw", "p", "field", "flo", "fd", "b", "k", "e", "t", "obj", "fab", "lf", "fac", "z", "c", "fe", "tf", "ff", "a", "m", "fs", "o", "cf", "sf", "fb", "xf", "q", "fp", "u", "fo", "func", "bf", "fm", "fi", "l", "df", "fr", "g", "uf", "full", "fa", "af", "w"], "i": ["ti", "ji", "v", "I", "batch", "ic", "iq", "zi", "p", "li", "id", "gi", "my", "point", "is", "di", "e", "k", "ii", "ki", "in", "j", "phi", "ri", "mi", "si", "index", "ini", "iu", "pi", "ci", "m", "ims", "o", "iter", "ms", "ma", "multi", "q", "init", "xi", "ie", "ind", "ei", "u", "major", "ij", "x", "me", "im", "qi", "eu", "key", "ai", "ix", "sim", "ip", "us", "bi", "it", "ui", "hi", "ori", "ami", "y"], "source": ["local", "system", "search", "seed", "sample", "scan", "subject", "file", "sequence", "site", "show", "missing", "parent", "ce", "resource", "src", "store", "before", "start", "in", "service", "SOURCE", "from", "style", "se", "storage", "shell", "owner", "index", "query", "ource", "session", "scope", "inner", "zip", "console", "base", "iterator", "iter", "Source", "result", "series", "init", "none", "input", "ie", "tree", "template", "score", "spec", "comment", "zero", "image", "use", "info", "body", "origin", "stream", "archive", "size"], "destination": [" destinate", "destinated", "declaration", "declinated", "combension", "destinator", " destation", "coordinated", "destaration", "destension", "declination", "coordation", "Destination", "Destation", " destaration", "coordination", " destension", " destinator", "Destinate", "declinate", "coordinate", "Destinator", "destinate", "Destaration", "Destension", "declinator", "combation", "combinate", "declation", " destinated", "destation", "combination"]}}
{"id1": "3994258", "id2": "1986417", "code1": "    public boolean connectServer(String server, String user, String password) {\n        boolean result = true;\n        try {\n            if (user.equals(\"\")) {\n                user = \"anonymous\";\n                password = \"anonymous\";\n            }\n            this.server = server;\n            this.user = user;\n            this.password = password;\n            ftpClient = new FTPClient();\n            ftpClient.setControlEncoding(encode);\n            ftpClient.connect(server);\n            ftpClient.setSoTimeout(1000 * 30);\n            ftpClient.setDefaultTimeout(1000 * 30);\n            ftpClient.setConnectTimeout(1000 * 30);\n            ftpClient.enterLocalPassiveMode();\n            ftpClient.login(user, password);\n            if (!FTPReply.isPositiveCompletion(ftpClient.getReplyCode())) {\n                ftpClient.disconnect();\n                return false;\n            }\n            queFilePath = \"data\\\\\" + this.server + \".que\";\n            bufFilePath = \"data\\\\\" + this.server + \".buf\";\n            startGetList();\n        } catch (java.net.SocketTimeoutException e1) {\n            errMsg = ftpClient.getReplyString();\n            errCode = ftpClient.getReplyCode();\n            result = false;\n            setArrToFile(dirQueue, queFilePath);\n            setArrToFile(fileList, bufFilePath);\n            cn.imgdpu.util.CatException.getMethod().catException(e1, \"\u8fde\u63a5\u8d85\u65f6\");\n        } catch (Exception e) {\n            errMsg = ftpClient.getReplyString();\n            errCode = ftpClient.getReplyCode();\n            result = false;\n            setArrToFile(dirQueue, queFilePath);\n            setArrToFile(fileList, bufFilePath);\n            cn.imgdpu.util.CatException.getMethod().catException(e, \"\u672a\u77e5\u5f02\u5e38\");\n        } finally {\n            if (ftpClient.isConnected()) {\n                try {\n                    ftpClient.disconnect();\n                } catch (IOException ioe) {\n                    cn.imgdpu.util.CatException.getMethod().catException(ioe, \"IO\u5f02\u5e38\");\n                }\n            }\n        }\n        return result;\n    }\n", "code2": "    @Override\n    public void export(final Library lib) throws PluginException {\n        try {\n            new Thread(new Runnable() {\n\n                public void run() {\n                    formatter.format(lib, writer);\n                    writer.flush();\n                    writer.close();\n                }\n            }).start();\n            ftp.connect(host);\n            if (!FTPReply.isPositiveCompletion(ftp.getReplyCode())) {\n                ftp.disconnect();\n                throw new PluginException(\"Unable to connect to FTP\");\n            }\n            ftp.login(user, pass);\n            ftp.pasv();\n            ftp.changeWorkingDirectory(dir);\n            ftp.storeFile(file, inStream);\n            ftp.logout();\n        } catch (SocketException e) {\n            throw new PluginException(e);\n        } catch (IOException e) {\n            throw new PluginException(e);\n        } finally {\n            if (ftp.isConnected()) {\n                try {\n                    ftp.disconnect();\n                } catch (IOException e) {\n                }\n            }\n        }\n    }\n", "label": 1, "substitutes": {"connectServer": ["connectionSite", "connectSer", "selectServer", "connectionServer", "openSite", "openDatabase", "selectSite", "selectSer", "openServer", "connectionDatabase", "selectDatabase", "openSer", "connectionSer", "connectSite", "connectDatabase"], "server": ["master", "system", "localhost", "seed", "address", "search", "serv", "description", "sample", "site", "parent", "store", "test", "remote", "browser", "service", "row", "device", "total", "slave", "manager", "scale", "model", "url", "email", "center", "query", "node", "computer", "port", "connection", "erver", "host", "code", "console", "free", "instance", "uri", "engine", "base", "cookie", "table", "page", "enter", "mobile", "database", "project", "column", "client", "name", "template", "ter", "http", "socket", "source", "folder", "value", "hello", "version", "ser", "ip", "directory", "Server", "peer", "domain", "controller", "ver", "er", "entry", "ve"], "user": ["path", "human", "file", "string", "field", "post", "term", "any", "by", "used", "store", "char", "uid", "per", "basic", "device", "auth", "you", "username", "manager", "rule", "attribute", "owner", "issue", "admin", "USER", "from", "query", "port", "profile", "host", "person", "ername", "note", "form", "nick", "er", "root", "command", "database", "usr", "consumer", "student", "name", "client", "u", "util", "User", "error", "data", "me", "key", "use", "or", "login", "token", "info", "order", "account", "type", "ver", "usage", "usa", "author", "creator", "word"], "password": ["secret", "PASS", "picture", "description", "number", "wd", "p", "remember", "hash", "device", "phrase", "shadow", "auth", "username", "attribute", "session", "worker", "pattern", "port", "code", "profile", "wp", "crypt", "language", "security", "wordpress", "padding", "prefix", "paste", "sudo", "command", "database", "pass", "power", "pty", "parser", "client", "sword", "comment", "application", "data", "chain", "hello", "login", "token", "directory", "mask", "words", "pool", "account", "Password", "policy", "word"], "ftpClient": ["ftppCan", "aftpMethod", "ctcpclient", "fttpclient", "aftpBuilder", "ftcConnection", "aftcHandler", " fttStore", "ftpaclient", "aftcclient", "ftcclient", "ftppControl", "ftcClient", " ftpContent", "ftwpclient", "aftpHandler", "aftcControl", "ftcContent", "aftcpConnection", " ftcpBody", "ftPStore", "aftpclient", "aftpControl", "ftpclient", "ftpatDo", "ftpStore", "ctcpContent", "ftPDo", "fftControl", "ftwpClient", "ftPClient", "factpatNode", "aftPBuilder", "factpatDo", "ffpclient", "ctpClient", "fttpClient", "ftpDo", " ftPclient", "ftpNode", "fttpStore", "ftpaMethod", "ftwpDo", "ftcNode", "fftpclient", "ftPclient", "factpatClient", "ftcDo", "fttConnection", "ctpContent", "aftcpClient", "factpDo", "ftcCan", "ftcpContent", "factpclient", " ftpclient", "aftPDo", "ftcpClient", "ftcpBody", " ftPStore", "ftcpMethod", "fttAdmin", "aftcpclient", " ftcpContent", "ftpaClient", "ftfConnection", "ftwpNode", "ftphpclient", "fttMethod", "ftpatControl", "aftpDo", "ftpBody", "aftcpMethod", " ftpStore", " fttConnection", "fftClient", "ftfControl", "fttpControl", "fttHandler", "factpNode", "aftcClient", "aftPConnection", "ftfclient", "fftCan", " fttclient", "fttStore", "aftpClient", "aftPClient", "fttclient", "aftcpControl", "ftcControl", "ftfClient", "ffpCan", "fttControl", "ftcpConnection", "ftcBuilder", "ftpMethod", "factpatclient", "ftPBuilder", "ftpContent", "aftpConnection", "ftpAdmin", " ftpConnection", "ffpClient", "ffpControl", "ftpatNode", "ftcStore", " ftPConnection", "ftpBuilder", "ftlpDo", " ftPClient", "ffpConnection", "ftpiClient", "fttClient", "ftpControl", " fttClient", "fftAdmin", "ftpatclient", "ftppClient", "ftpiBody", "ctpclient", "fftpConnection", "fftclient", "ftcpHandler", "ffpAdmin", "ftcpControl", "ftcAdmin", "ftcpStore", "fttpBuilder", "ftphpClient", "ftlpBody", "fftpClient", "ftpiContent", "ftcHandler", "ftPConnection", "ftppclient", "ftpHandler", "ftpConnection", "fttpConnection", "ftpatAdmin", "ftcpclient", "ctcpClient", "ftlpContent", "ftphpContent", " ftpBody", " ftcpClient", "fttCan", "ftlpClient", "ftpatClient", "factpClient", "ftpCan", "fttpDo"], "queFilePath": ["quItemStep", "queFilepath", "queDirPath", " queFileId", "quItemInfo", "queItemStep", "queStoreInfo", "queStorePath", "queFileInfo", "queTableDir", "queLinepath", " queFileDir", " queTableName", " queTablePath", "bufFilepath", "queFilePos", "queFileDir", " queTableId", "queTimeInfo", "queItemInfo", "quItemPath", "queLineFormat", "quefileName", "queItemPart", "queDirDir", "queFileName", "quFileInfo", " queTableDir", "bufFilePos", "queLinePath", "queDirName", "queItemPath", "queFileStep", "queTableName", "queTablePath", "queFPath", "queTableId", "quFilePath", "queFPos", "queFileId", "queFileFormat", "queTimeStep", "queStoreStep", "queLinePos", "queDirId", "quefileDir", "quefilePath", "quefileId", "queTimePart", "quFilePart", "queFFormat", "queStorePart", "queFilePart", "queTimePath", "quFileStep", "bufFileFormat", "quItemPart", " queFileName", "queFpath"], "bufFilePath": ["buffileLocation", "vecQueuePath", "bufferFileName", "bufBytePath", "bufferFilePath", " bufFileName", "bufferFileTime", "bufferfilepath", "bufRelTime", "vecFileStr", " bufByteLocation", "bufByteLocation", "bufFilepath", "vecFileName", "bufQueueStr", "bufByteData", "bufQueuePath", "bufferfilePath", "bufFileStr", "bufTableData", "buffileDef", "bufRelpath", "bufFilenameName", "bufRelPath", " bufFileLocation", "bufQueueDef", "bufFileLocation", "bufTablePath", "buffileData", "buffilePath", "bufFileData", "bufLinepath", "bufTableLocation", "bufferFilepath", "buffileStr", "vecFilePath", "vecQueueDef", "bufferfileTime", "bufferfileName", " bufFileData", "bufLineTime", "bufFileDef", "buffilepath", "vecFileDef", " bufBytePath", " bufByteName", "vecQueueName", "bufByteName", "vecQueueStr", " bufByteData", "buffileName", "bufLinePath", "bufFilenameDef", "buffileTime", "bufRelName", "bufFileTime", "bufFilenameStr", "bufLineName", "bufFileName", "bufTableName", "bufFilenamePath", "bufQueueName"], "errMsg": [" errSm", "cfgLog", "errMessage", " errMessage", "errStr", "cfgMsg", "errSm", "errLog", "erMessage", "cfgMessage", "failSm", "failStr", " errStr", "errMess", "erMess", "cfgMess", "sprMsg", "sprSm", "sprMess", "erMsg", " errLog", "sprStr", "failMess", " errMess", "erLog", "failMsg"], "errCode": [" errCheck", " errSc", "sprDef", "errCount", " errCon", "eorDef", "rrCon", " errNo", " errDef", "sprCode", "errNo", "eorCount", "rrCode", "errCheck", "urgNo", "eorSc", "urgCon", "rrCheck", "sprSc", "errCon", " errCount", "sprCount", "eorCode", "urgCheck", "errDef", "errSc", "urgCode", "rrNo"], "result": ["match", "description", "perm", "results", "ret", "sequence", "show", "make", "false", "were", "process", "fac", "event", "success", "msg", " Result", "run", "r", "goal", "relation", "res", "profile", "status", "know", "duration", "valid", "feature", "su", "table", "out", "date", "global", "draw", "Result", "journal", "cert", "data", "answer", "report", "value", "chain", "flag", "details", "mask", "cache", "continue", " res"]}}
{"id1": "13439950", "id2": "12128591", "code1": "    public String readRemoteFile() throws IOException {\n        String response = \"\";\n        boolean eof = false;\n        URL url = new URL(StaticData.remoteFile);\n        InputStream is = url.openStream();\n        BufferedReader br = new BufferedReader(new InputStreamReader(is));\n        String s;\n        s = br.readLine();\n        response = s;\n        while (!eof) {\n            try {\n                s = br.readLine();\n                if (s == null) {\n                    eof = true;\n                    br.close();\n                } else response += s;\n            } catch (EOFException eo) {\n                eof = true;\n            } catch (IOException e) {\n                System.out.println(\"IO Error : \" + e.getMessage());\n            }\n        }\n        return response;\n    }\n", "code2": "    public static final synchronized String hash(String data) {\n        if (digest == null) {\n            try {\n                digest = MessageDigest.getInstance(\"MD5\");\n            } catch (NoSuchAlgorithmException nsae) {\n                log.error(\"Failed to load the MD5 MessageDigest. \" + \"Jive will be unable to function normally.\", nsae);\n            }\n        }\n        try {\n            digest.update(data.getBytes(\"utf-8\"));\n        } catch (UnsupportedEncodingException e) {\n            log.error(e);\n        }\n        return encodeHex(digest.digest());\n    }\n", "label": 0, "substitutes": {"readRemoteFile": ["readremoteFilename", "readLocalFilename", "downloadStaticRemote", "readStaticRemote", "readLocalFrom", "readRemoteFilename", "readremoteRemote", "downloadStaticFrom", "readRemoteFrom", "downloadStaticFilename", "readremoteFile", "readLocalRemote", "readLocalFile", "downloadRemoteRemote", "downloadStaticFile", "readRemoteRemote", "readStaticFile", "downloadRemoteFile", "readStaticFilename", "downloadRemoteFilename", "readremoteFrom", "downloadRemoteFrom", "readStaticFrom"], "response": ["settings", "send", "sample", "secret", "address", "description", "string", "sequence", "str", "print", "onse", "service", "resolution", "Response", "output", "network", "view", "block", "relation", "connection", "res", "status", "summary", "server", "vector", "example", "result", "message", "body", "format", "respons", "line", "data", "answer", "source", "application", "value", "report", "image", "reset", "version", "request", "cache", "json", "next", "reply", "resp", "continue", "command"], "url": ["build", "sl", "gl", "lr", "fl", "ret", "Url", "abs", "str", "nl", "resource", "mail", "b", "char", "browser", "r", "dl", "ll", "pl", "https", "ssl", "link", "uri", "rel", "base", "URL", "web", "loc", "ur", "name", "bel", "hl", "http", "rl", "mount", "el", "l", "cmd", "ref", "lb", "ul"], "is": ["ates", "does", "serv", "iss", "ic", "isl", "isa", "ists", "sis", "in", "ais", "ri", "iris", "rs", "i", "ios", " Is", "bis", "fs", "es", "as", "IS", "ms", "bs", "lis", "its", "\u00eds", "ris", "sys", "isf", "Is", "ins", "nis", "ir", "it", "ip", "sels", "isi", "isc", "os", "iso"], "br": ["lr", "dr", "BR", "str", "bt", "b", "be", "nr", "browser", "bridge", "rb", "vr", "repl", "rob", "mr", "r", "bl", "ro", "bro", "res", "cr", "bh", "adr", "rel", "ber", "sp", "hr", "bs", "wr", "bm", "bc", "gr", "pr", "bd", "bn", "bf", "bp", "tr", "shr", "fr", "bi", "buf", "ver", "jp", "Br"], "s": ["js", "v", "sq", "sample", "string", "h", "p", "txt", "str", "ats", "b", "e", "t", "z", "still", "S", "ls", "j", "strings", "gs", "rs", "r", "ts", "n", "sym", "i", "stats", "tes", "a", "res", "m", "csv", "ns", "es", "o", "ps", "y", "sports", "single", "ms", "ves", "bs", "sb", "sql", "series", " ts", "its", "sts", "sv", "value", "ins", "ies", "l", "g", "less", " gets", " samples", "ss", "qs", " inputs", "sn", "gets", "os", "w", "se"], "eof": ["geif", "Eof", "eeol", "eeef", " eef", "eOf", "eeof", "eov", " eomp", "eos", "eOF", "eif", "eeOf", "eeot", "seof", "Eol", "eeomp", " eow", "sef", "EOf", " eOf", "geof", "geOF", "eow", "eol", "Eef", " eif", "eeOF", "eeov", "eot", " eOF", "Eov", " ef", "eomp", "eeow", "Eos", "Eomp", " eov", " eot", "eeif", "eef", "seot", " eos", " eol", "ef", "eeos", "seef", "geow"]}}
{"id1": "18504192", "id2": "8430178", "code1": "    static void copyFile(File in, File out) throws IOException {\n        FileChannel source = new FileInputStream(in).getChannel();\n        FileChannel destination = new FileOutputStream(out).getChannel();\n        source.transferTo(0, source.size(), destination);\n        source.close();\n        destination.close();\n    }\n", "code2": "    public static void copyFile(String source_name, String dest_name) throws IOException {\n        source_name = Shell.getUtils().constructPath(source_name);\n        File source_file = new File(source_name);\n        dest_name = Shell.getUtils().constructPath(dest_name);\n        File destination_file = new File(dest_name);\n        FileInputStream source = null;\n        FileOutputStream destination = null;\n        byte[] buffer;\n        int bytes_read;\n        try {\n            if (!source_file.exists() || !source_file.isFile()) throw new FileCopyException(\"cp: no such source file: \" + source_name);\n            if (!source_file.canRead()) throw new FileCopyException(\"cp: source file \" + \"is unreadable: \" + source_name);\n            if (destination_file.exists()) {\n                if (destination_file.isFile()) {\n                    BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n                    String response;\n                    if (!destination_file.canWrite()) throw new FileCopyException(\"cp: destination \" + \"file is unwriteable: \" + dest_name);\n                    System.out.print(\"cp: file \" + dest_name + \" already exists. Overwrite it ? (Y/N): \");\n                    System.out.flush();\n                    response = in.readLine();\n                    if (!response.equals(\"Y\") && !response.equals(\"y\")) throw new FileCopyException(\"cp: copy cancelled.\");\n                } else throw new FileCopyException(\"cp: destination \" + \"is not a file: \" + dest_name);\n            } else {\n                File parentdir = parent(destination_file);\n                if (!parentdir.exists()) throw new FileCopyException(\"cp: destination \" + \"directory doesn't exist: \" + dest_name);\n                if (!parentdir.canWrite()) throw new FileCopyException(\"cp: destination \" + \"directory is unwriteable: \" + dest_name);\n            }\n            source = new FileInputStream(source_file);\n            destination = new FileOutputStream(destination_file);\n            buffer = new byte[1024];\n            int size = (new Long((source_file.length() / 1024) / 50)).intValue();\n            int c = 1;\n            int written = 0;\n            System.out.print(\"cp: \");\n            while (true) {\n                if (written < 50) {\n                    if ((c - 1) == size && size != 0) {\n                        System.out.print(\"#\");\n                        c = 1;\n                        written++;\n                    } else if (size == 0) {\n                        int j = 1;\n                        if (c > 1) j = (50 / c) - 50; else j = 50 / c;\n                        for (int i = 0; i < j; i++) System.out.print(\"#\");\n                        written += j;\n                    }\n                }\n                bytes_read = source.read(buffer);\n                if (bytes_read == -1) break;\n                destination.write(buffer, 0, bytes_read);\n                c++;\n            }\n            System.out.println();\n        } finally {\n            if (source != null) try {\n                source.close();\n            } catch (IOException e) {\n            }\n            if (destination != null) try {\n                destination.close();\n            } catch (IOException e) {\n            }\n        }\n    }\n", "label": 1, "substitutes": {"copyFile": ["copyfile", "copyStream", "CopyFiles", " Copyfile", "copyFiles", " CopyStream", " CopyFile", "CopyFile", " transferFiles", " transferfile", "Copyfile", " transferFile", " CopyFiles", " transferStream", "CopyStream"], "in": ["ic", "en", "id", "old", "is", "inf", "b", "up", "cin", "from", "edIn", "IN", "inc", "i", "n", "on", "as", "o", "din", "vin", "input", "isin", "ind", "mm", "gin", "In", "or", "el", "ins", "rin", "l", "it", "inn"], "out": ["err", "v", "serv", "at", "log", "io", "help", "b", "k", "t", "po", "nt", "ot", "output", "ex", "n", "to", "i", "gt", "o", "net", "s", "oss", "OUT", "Out", "l", "it", "g", "ou", "outs", "ne", "os", "w"], "source": ["local", "system", "search", "seed", "sample", "scan", "match", "secret", "subject", "force", "file", "sequence", "back", "sin", "src", "resource", "before", "store", "start", "ources", "position", "service", "SOURCE", "from", "style", "open", "copy", "shell", "reader", "access", "query", "ource", "scope", "inner", "instance", "inside", "volume", "iterator", "Source", "init", "parse", "create", "input", "ie", "template", "spec", "comment", "me", "use", "pse", "info", "origin", "space", "se"], "destination": ["comification", "destinated", " destregation", "Destinated", "coordification", "destinator", "restination", " destation", "restinated", "seeinated", "comination", "seeinator", "destension", "seeination", "destification", "Destination", "Destation", "coordination", " destension", " destinator", "coordregation", "comato", "destregation", "seeension", "Destinator", " destato", "Destension", "restinator", "restation", " destinated", "destation", "comregation", "coordato", "destato", " destification"]}}
{"id1": "16063533", "id2": "15166511", "code1": "    public static byte[] encrypt(String x) throws Exception {\n        java.security.MessageDigest d = null;\n        d = java.security.MessageDigest.getInstance(\"SHA-1\");\n        d.reset();\n        d.update(x.getBytes());\n        return d.digest();\n    }\n", "code2": "    private void getRandomGUID(boolean secure) {\n        MessageDigest md5 = null;\n        StringBuffer sbValueBeforeMD5 = new StringBuffer();\n        try {\n            md5 = MessageDigest.getInstance(\"MD5\");\n        } catch (NoSuchAlgorithmException e) {\n            System.out.println(\"Error: \" + e);\n        }\n        try {\n            long time = System.currentTimeMillis();\n            long rand = 0;\n            if (secure) {\n                rand = mySecureRand.nextLong();\n            } else {\n                rand = myRand.nextLong();\n            }\n            sbValueBeforeMD5.append(s_id);\n            sbValueBeforeMD5.append(\":\");\n            sbValueBeforeMD5.append(Long.toString(time));\n            sbValueBeforeMD5.append(\":\");\n            sbValueBeforeMD5.append(Long.toString(rand));\n            valueBeforeMD5 = sbValueBeforeMD5.toString();\n            md5.update(valueBeforeMD5.getBytes());\n            byte[] array = md5.digest();\n            StringBuffer sb = new StringBuffer();\n            for (int j = 0; j < array.length; ++j) {\n                int b = array[j] & 0xFF;\n                if (b < 0x10) sb.append('0');\n                sb.append(Integer.toHexString(b));\n            }\n            valueAfterMD5 = sb.toString();\n        } catch (Exception e) {\n            System.out.println(\"Error:\" + e);\n        }\n    }\n", "label": 1, "substitutes": {"encrypt": ["decryption", "ecode", "encrypted", "enrypt", "decode", "decrypted", "ecrypted", "encryption", "enode", "enryption", "encode", "ecrypt", "ecryption", "enrypted", "decrypt"], "x": [" xx", "xx", "v", "p", "xe", "px", "rx", "e", "z", "xs", "fx", "xa", "xxxx", "ctx", "ex", "xxx", "wx", "xxxxxxxx", "xd", "xb", "f", "X", "example", "s", "xt", "xf", "xi", "xy", "xc", "ix", "l", "xml", "xp", "tx", "y"], "d": ["du", "dec", "dr", "da", "pd", "h", "dat", "ld", "mod", "gd", "fd", "di", "t", "did", "nd", " sd", "D", "r", "dx", "c", "n", "dl", "red", "ad", "m", "md", "ord", "f", "sd", "dd", "dal", "rd", "td", "dig", "db", "ds", "cd", "ind", "od", "bd", "done", "dm", "dh", "with", "df", "de", "dc"]}}
{"id1": "20247400", "id2": "8815137", "code1": "    public static void main(String[] args) throws Exception {\n        if (args.length != 2) {\n            System.out.println(\"arguments: sourcefile destfile\");\n            System.exit(1);\n        }\n        FileChannel in = new FileInputStream(args[0]).getChannel(), out = new FileOutputStream(args[1]).getChannel();\n        ByteBuffer buffer = ByteBuffer.allocate(BSIZE);\n        while (in.read(buffer) != -1) {\n            buffer.flip();\n            out.write(buffer);\n            buffer.clear();\n        }\n    }\n", "code2": "    public void copyToDir(File dir) {\n        if (!dir.exists()) {\n            dir.mkdirs();\n        } else if (this.file.getParentFile() != null && this.file.getParentFile().equals(dir)) {\n            return;\n        }\n        File file = getEstimatedFileName(dir);\n        try {\n            file.createNewFile();\n            FileOutputStream fileOutputStream = new FileOutputStream(file);\n            FileInputStream fileInputStream = new FileInputStream(this.file);\n            int read = 0;\n            byte[] buffer = new byte[1024];\n            while (read != -1) {\n                fileOutputStream.write(buffer, 0, read);\n                read = fileInputStream.read(buffer);\n            }\n            fileInputStream.close();\n            fileOutputStream.close();\n            this.file = file;\n        } catch (IOException e) {\n            Logger.log(e);\n        }\n    }\n", "label": 1, "substitutes": {"in": ["file", "io", "is", "inf", "up", "cin", "from", "IN", "inc", "i", "check", "inner", "ze", " din", "on", "net", "din", "init", "input", "isin", "ind", "gin", "In", "source", "and", "ai", "ins", "rin", "it", "info", "bin", "con", "inn"], "out": ["ln", "err", "at", "log", "dir", "OU", "str", "io", "print", "b", "t", "obj", "ot", "msg", "output", "we", "other", "r", "null", "n", "ex", "to", "check", "write", "auto", "gt", "outer", "o", "screen", "net", "oss", "writer", "exit", "name", "println", "client", "line", "sys", "con", "OUT", "report", "or", "Out", "list", "ins", "it", "cmd", "ou", "outs", "ne", "os", "w"], "buffer": ["address", "sample", "match", "function", "batch", "filter", "binary", "sequence", "variable", "append", "queue", "bar", "pause", "channel", "b", "length", "component", "processor", "event", "bridge", "history", "position", "stack", "phrase", "total", "limit", "output", "attribute", "flush", "view", "index", "library", "block", "clear", "iter", "trace", "size", "table", "result", "buff", "message", "command", "database", "db", "document", "template", "comment", "data", "source", "memory", "key", "header", "shape", "window", "cache", "available", "buf", "Buffer", "temp", "display", "se"]}}
{"id1": "17580775", "id2": "17874479", "code1": "        public void runInternal() {\n            connection = null;\n            boolean itemsLoadedPartially = false;\n            boolean loadNext = false;\n            HashSet<String> visited = new HashSet<String>();\n            do {\n                try {\n                    setProgressMessage(url.toString(), -1);\n                    visited.add(url.toString());\n                    long startTimeStamp = System.currentTimeMillis();\n                    delayedProgress = coolReader.getEngine().showProgressDelayed(0, progressMessage, PROGRESS_DELAY_MILLIS);\n                    URLConnection conn = url.openConnection();\n                    if (conn instanceof HttpsURLConnection) {\n                        onError(\"HTTPs is not supported yet\");\n                        return;\n                    }\n                    if (!(conn instanceof HttpURLConnection)) {\n                        onError(\"Only HTTP supported\");\n                        return;\n                    }\n                    connection = (HttpURLConnection) conn;\n                    connection.setRequestProperty(\"User-Agent\", \"CoolReader/3(Android)\");\n                    if (referer != null) connection.setRequestProperty(\"Referer\", referer);\n                    connection.setInstanceFollowRedirects(true);\n                    connection.setAllowUserInteraction(false);\n                    connection.setConnectTimeout(CONNECT_TIMEOUT);\n                    connection.setReadTimeout(READ_TIMEOUT);\n                    connection.setDoInput(true);\n                    String fileName = null;\n                    String disp = connection.getHeaderField(\"Content-Disposition\");\n                    if (disp != null) {\n                        int p = disp.indexOf(\"filename=\");\n                        if (p > 0) {\n                            fileName = disp.substring(p + 9);\n                        }\n                    }\n                    int response = -1;\n                    response = connection.getResponseCode();\n                    L.d(\"Response: \" + response);\n                    if (response != 200) {\n                        onError(\"Error \" + response);\n                        return;\n                    }\n                    String contentType = connection.getContentType();\n                    String contentEncoding = connection.getContentEncoding();\n                    int contentLen = connection.getContentLength();\n                    L.d(\"Entity content length: \" + contentLen);\n                    L.d(\"Entity content type: \" + contentType);\n                    L.d(\"Entity content encoding: \" + contentEncoding);\n                    setProgressMessage(url.toString(), contentLen);\n                    InputStream is = connection.getInputStream();\n                    delayedProgress.cancel();\n                    is = new ProgressInputStream(is, startTimeStamp, progressMessage, contentLen, 80);\n                    final int MAX_CONTENT_LEN_TO_BUFFER = 256 * 1024;\n                    boolean isZip = contentType != null && contentType.equals(\"application/zip\");\n                    if (expectedType != null) contentType = expectedType; else if (contentLen > 0 && contentLen < MAX_CONTENT_LEN_TO_BUFFER) {\n                        byte[] buf = new byte[contentLen];\n                        if (is.read(buf) != contentLen) {\n                            onError(\"Wrong content length\");\n                            return;\n                        }\n                        is.close();\n                        is = null;\n                        is = new ByteArrayInputStream(buf);\n                        if (findSubstring(buf, \"<?xml version=\") >= 0 && findSubstring(buf, \"<feed\") >= 0) contentType = \"application/atom+xml\";\n                    }\n                    if (contentType.startsWith(\"application/atom+xml\")) {\n                        L.d(\"Parsing feed\");\n                        parseFeed(is);\n                        itemsLoadedPartially = true;\n                        if (handler.docInfo.nextLink != null && handler.docInfo.nextLink.type.startsWith(\"application/atom+xml;profile=opds-catalog\")) {\n                            if (handler.entries.size() < MAX_OPDS_ITEMS) {\n                                url = new URL(handler.docInfo.nextLink.href);\n                                loadNext = !visited.contains(url.toString());\n                                L.d(\"continue with next part: \" + url);\n                            } else {\n                                L.d(\"max item count reached: \" + handler.entries.size());\n                                loadNext = false;\n                            }\n                        } else {\n                            loadNext = false;\n                        }\n                    } else {\n                        if (fileName == null) fileName = defaultFileName;\n                        L.d(\"Downloading book: \" + contentEncoding);\n                        downloadBook(contentType, url.toString(), is, contentLen, fileName, isZip);\n                        if (progressShown) coolReader.getEngine().hideProgress();\n                        loadNext = false;\n                        itemsLoadedPartially = false;\n                    }\n                } catch (Exception e) {\n                    L.e(\"Exception while trying to open URI \" + url.toString(), e);\n                    if (progressShown) coolReader.getEngine().hideProgress();\n                    onError(\"Error occured while reading OPDS catalog\");\n                    break;\n                } finally {\n                    if (connection != null) try {\n                        connection.disconnect();\n                    } catch (Exception e) {\n                    }\n                }\n            } while (loadNext);\n            if (progressShown) coolReader.getEngine().hideProgress();\n            if (itemsLoadedPartially) BackgroundThread.guiExecutor.execute(new Runnable() {\n\n                @Override\n                public void run() {\n                    L.d(\"Parsing is finished successfully. \" + handler.entries.size() + \" entries found\");\n                    callback.onFinish(handler.docInfo, handler.entries);\n                }\n            });\n        }\n", "code2": "    public static final void main(String[] args) throws Exception {\n        HttpClient httpclient = new DefaultHttpClient();\n        HttpGet httpget = new HttpGet(\"http://www.apache.org/\");\n        System.out.println(\"executing request \" + httpget.getURI());\n        HttpResponse response = httpclient.execute(httpget);\n        HttpEntity entity = response.getEntity();\n        System.out.println(\"----------------------------------------\");\n        System.out.println(response.getStatusLine());\n        if (entity != null) {\n            System.out.println(\"Response content length: \" + entity.getContentLength());\n        }\n        System.out.println(\"----------------------------------------\");\n        httpget.abort();\n    }\n", "label": 0, "substitutes": {"runInternal": ["runIntern", "processinternal", "runinternal", "mainImpl", "processImpl", "mainIntern", "loadImpl", "mainInternal", "loadIntern", "processInternal", "loadInternal", "runImpl", "processIntern", "loadinternal", "maininternal"], "connection": ["function", "description", "device", "network", "session", "computer", "statement", "console", "close", "engine", "generation", "document", "pointer", "reset", "pool", "machine", "government", "information", "entry", "command", "created", "ion", "method", "open", "creation", "c", "server", "create", "reference", "client", "socket", "subject", "address", "operation", "channel", "component", "event", "position", "current", "Connection", "bo", "to", "relation", "language", "encrypted", "connect", "page", "message", "writer", "setup", "application", "general", "default", "translation", "creator", "number", "communication", "resource", "context", "no", "condition", "link", "initial", "table", "database", "associated", "version", "connected", "directory", "character", "controller", "established", "con", "collection"], "visited": ["Visitted", "Visitialized", "vited", "Visiting", "comitted", "visitialized", "visitted", "comitialized", "vised", "vitted", "vITED", "VISited", "viting", "visITED", "VISitialized", "comited", "VisITED", "Visited", "comed", "Vised", "showniting", "shownitted", "visiting", "shownITED", "VISitted", "shownited", "VISed"], "startTimeStamp": ["startTimeMillAMP", "startTimeStamps", "startTimStAMP", "startTimeStis", "startTimStamps", "startTimeStAMP", "startTimeStris", "startTimeMillamp", "startTimeStramps", "startTimestAMP", "startTimeStrAMP", "startTimStis", "startTimstis", "startTimeStramp", "startTimeMillamps", "startTimestamp", "startTimstamps", "startTimestamps", "startTimStamp", "startTimstamp", "startTimestis", "startTimstAMP", "startTimeMillis"], "delayedProgress": ["delayingContent", "delayingprogress", "deliverprogress", "deliverContent", "dayContent", "dayprogress", "deliverProgress", "delayProgress", "dayedprogress", "delayingProgress", "dayProgress", "dayedProgress", "delayprogress", "dayedContent", "delayedprogress", "delayedContent", "delayContent"], "conn": ["err", "mc", "js", "cur", "cmp", "cell", "txt", "conv", "obj", "nt", "Conn", "j", "pg", "adj", "open", "conf", "Connection", "cp", "ctx", "c", "comm", "n", "dl", "act", "alloc", "res", "hw", "cc", "col", "ct", "connect", "loc", "cn", "ch", "bc", "cfg", "nw", "cert", "client", "att", "nc", "cont", "addr", "ht", "exec", "cb", "enc", "l", "cmd", "resp", "org", "jp", "con"], "fileName": [" filePath", "displayPath", " filename", "fileValue", " fileType", "filename", "resourceName", "displayValue", "Filename", "resourcePath", "FilePath", "displayname", "displayName", "FileName", "resourceType", "FileType", "resourcename", "fileType", " fileValue", "FileValue", "filePath"], "disp": ["serp", "layp", " dispa", "nlpo", "dispol", "dispo", "nlP", "sern", "wordpat", "defp", "wordp", "despi", " dispi", "lypa", " disn", "DISpend", "discp", "desr", "disP", "laypend", "desp", "nlp", "Dispat", "defpi", "lypi", "laypol", "DisP", "wordpo", "desP", "DIScp", "nlpat", "disr", "wordP", "discpend", "dispend", "defP", "laycp", "serpi", "disn", "DISpol", "Dispo", "Dispi", "defr", "disccp", "lyn", "Disr", "DISp", "Disp", "dispa", "discpol", "dispi", "dispat", "lyp", "serpa"], "p": ["d", "v", "ping", "perm", "op", "P", "h", "tp", "lp", "pro", "np", "vp", "point", "part", "t", "conv", "dp", "j", "pg", "r", "primary", "c", "cp", "n", "i", "pi", "pat", "ph", "m", "wp", "pre", "f", "ps", "pers", "padding", "sp", "pid", "change", "pointer", "pa", "pp", "pad", "bp", "pkg", "pos", "php", "pc", "jp", "par"], "response": ["bytes", "description", "function", "number", "sequence", "amount", "length", "remote", "escription", "onse", "position", "success", "no", "more", "total", "relative", "Response", "roads", "network", "time", "index", "block", "relation", "res", "code", "status", "duration", "server", "example", "message", "result", "page", "environment", "none", "tree", "frame", "exit", "respons", "error", "zero", "application", "reset", "value", "image", "version", "yes", "request", "pos", "json", "next", "reply", "resp", "continue", "type", "ne", "entry", "timeout"], "contentType": ["commandType", "cellType", " contentTypes", " contentTy", "ContentTypes", "contentLength", "documentTYPE", "messageLength", "contentTypes", "messageTYPE", "contentTy", "documentLength", "messageType", " contentLength", "cellLen", "commandTypes", "ContentLength", "cellLength", "documentType", "ContentType", "cellTYPE", "commandLength", "contentTYPE", "ContentTy", "documentLen", "commandTy", "messageLen"], "contentEncoding": ["contentencoder", " contentEncLength", "contentEnoring", " contentEncoded", "contentEncoder", "contentEnoding", "contentencoding", " contentEnryption", "contentEvoded", "contentEnoded", " contentEncryption", " contentEnoring", " contentEncoring", "contentEnLength", " contentEnoder", "contentEncryption", "contentDecLength", "contentEnryption", "contentEncLength", "contentEvoding", "contentDecoding", "contentEncoring", " contentEncoder", "contentEnoder", "contentDecoring", "contentEncoded", "contentDecoded", " contentEnoded", "contentencoring", "contentencryption", " contentEnLength", " contentEnoding", "contentEvLength", "contentEvoder", "contentDecryption", "contentDecoder"], "contentLen": ["componentLen", "ContentLen", "contentLength", "componentColl", "messagelen", "ontentNet", "ontentSize", " contentlen", "ontentLen", "contentSize", " contentColl", "contentColl", " contentLength", " contentSize", "ContentLength", "messageColl", "ontentLength", "ContentSize", "messageSize", "componentlen", "componentSize", " contentNet", "ContentNet", "contentlen", "contentNet", "messageLen"], "is": ["does", "iss", "id", "ism", "ists", "ii", "ist", "network", "ize", "ice", "i", "isc", "are", "pi", "ims", "IS", "iz", "its", "ie", "http", "im", "isd", "version", "Is", "ip", "es", "ss", "ih"], "url": ["build", "path", "address", "git", "string", "Url", "site", "str", "id", "channel", "char", "browser", "ls", "dl", "ll", "pattern", "host", "https", "html", "ssl", "link", "location", "uri", "server", "base", "URL", "web", "page", "ur", "client", "name", "bel", "http", "www", "mount", "version", "l", "xml", "domain", "ref", "org"], "loadNext": [" loadMore", "loadMore", " loadedMore", "loadedFirst", " loadedNext", "loadednext", "loadedMore", " loadednext", " loadedFirst", "loadFirst", "loadnext", "loadedNext", " loadFirst", " loadnext"], "itemsLoadedPartially": ["itemsLoadedpartfully", "itemsLoadsPosfully", "itemsLoadedOnlyfully", "itemsLoadedOnlyial", "itemsLoadedpartial", "itemsLoadsPartial", "itemsLoadedpartully", "itemsLoadsPartially", "itemsLoadsPosially", "itemsLoadedPosially", "itemsLoadsPosully", "itemsLoadedOnlyully", "itemsLoadedOnlyially", "itemsLoadedPartfully", "itemsLoadsPartully", "itemsLoadedPosfully", "itemsLoadedPartial", "itemsLoadedPosial", "itemsLoadedPosully", "itemsLoadsPartfully", "itemsLoadedPartully", "itemsLoadedpartially", "itemsLoadsPosial"]}}
{"id1": "1698200", "id2": "14464131", "code1": "    public static void loginBitShare() throws Exception {\n        HttpParams params = new BasicHttpParams();\n        params.setParameter(\"http.useragent\", \"Mozilla/5.0 (Windows; U; Windows NT 6.1; en-GB; rv:1.9.2) Gecko/20100115 Firefox/3.6\");\n        DefaultHttpClient httpclient = new DefaultHttpClient(params);\n        System.out.println(\"Trying to log in to bitshare.com\");\n        HttpPost httppost = new HttpPost(\"http://bitshare.com/login.html\");\n        List<NameValuePair> formparams = new ArrayList<NameValuePair>();\n        formparams.add(new BasicNameValuePair(\"user\", \"007007dinesh\"));\n        formparams.add(new BasicNameValuePair(\"password\", \"\"));\n        formparams.add(new BasicNameValuePair(\"submit\", \"Login\"));\n        UrlEncodedFormEntity entity = new UrlEncodedFormEntity(formparams, \"UTF-8\");\n        httppost.setEntity(entity);\n        HttpResponse httpresponse = httpclient.execute(httppost);\n        Iterator<Cookie> it = httpclient.getCookieStore().getCookies().iterator();\n        Cookie escookie = null;\n        while (it.hasNext()) {\n            escookie = it.next();\n            System.out.println(escookie.getName() + \" = \" + escookie.getValue());\n        }\n        System.out.println(EntityUtils.toString(httpresponse.getEntity()));\n    }\n", "code2": "    public static void main(String[] args) {\n        try {\n            URL url = new URL(\"http://hostname:80\");\n            URLConnection conn = url.openConnection();\n            for (int i = 0; ; i++) {\n                String headerName = conn.getHeaderFieldKey(i);\n                String headerValue = conn.getHeaderField(i);\n                if (headerName == null && headerValue == null) {\n                    break;\n                }\n                if (headerName == null) {\n                }\n            }\n        } catch (Exception e) {\n        }\n    }\n", "label": 0, "substitutes": {"loginBitShare": ["loginByteShare", "loginBitshare", " loginBitshare", " loginbitShare", " loginbitshare", "loginBitStock", "loginByteshare", "loginbitShare", "loginbitStock", " loginbitStock", " loginBitStock", "loginByteStock", "loginbitshare"], "params": ["settings", "cms", "Par", "members", "points", "p", "terms", "pps", "hash", "properties", "auth", "pres", "comments", "pas", "names", "rs", "cp", "gs", "headers", "stats", "pi", "caps", "chains", "Parameters", "options", "config", "ps", "ports", "pins", "parts", "changes", "mm", "parser", "tags", "requires", "acl", "services", "pretty", "http", "posts", "keys", "details", "metadata", "photos", "json", "param", "ams", "types"], "httpclient": [" http2", "httclient", "httpsrequest", "httpsclient", "http2", "httpsClient", "hyperclient", "httpconnection", "ttpClient", "Httpconnection", "httprequest", " httpcli", "httClient", "ttpco", "ttpclient", " httprequest", "httpsco", "httco", " httpClient", "hyperconnection", "httpscontroller", "httpco", "Httpclient", "httpsconnection", "httpcli", "Httprequest", "hyper2", "ttpcontroller", "httpcontroller", "https2", "httcontroller", " httpconnection", "httpClient", "httpscli", "HttpClient", "hypercli"], "httppost": ["httppposter", "httpoint", "httpart", "httmpop", "httpom", "httpplost", "httpperom", "httpposter", "httppop", "httpppop", "httpperost", " httppop", "httplop", "httppoint", "httpperop", "httplpost", " httpom", "httplart", " httpop", "httppom", "httmpost", "httmppost", "httphoint", "httmpart", " httppom", "httpppost", "httploster", "httphost", "httpploint", "httplom", "httpppoint", " httpost", "httpop", "httpplpost", "httppart", "httplost", "httphpost", "httppppost", "httploint", "httpplart", "httpost", "httphoster", "httpppart", "httpplop", "httpperpost", " httpppost", "httposter", "httpploster"], "formparams": ["functionparams", "inputparam", "feedparam", " formmembers", " formdetails", "formproperties", " formsettings", " formauthors", "formedparams", "feedparams", "formnames", "inputParameters", " formParameters", "feedParameters", "functionmembers", "foreproperties", "formargs", "foredetails", "functionauthors", "formerrors", "formParameters", "batcherrors", " formchanges", "inputtags", "condnames", "formmembers", "condproperties", "inputnames", "feeddetails", " formargs", "condparams", "formsettings", "foresettings", "batchtags", " formnames", "formdetails", "formtags", "functionproperties", "inputdetails", "condsettings", " formparam", "functionchanges", "foreauthors", "batchnames", "forenames", "functionargs", "foreargs", " formproperties", "inputparams", "formchanges", "functiondetails", "formedtags", "batchparams", "foreparams", "inputerrors", "formauthors", "formederrors", "formparam", "foremembers", "forechanges", "formednames"], "entity": ["ell", "orm", "ce", "fee", "component", "event", "ity", "ee", "inv", "content", "Entity", "eme", "profile", "quote", "html", "person", "security", "note", "form", "buffer", "out", "activity", "ENT", "create", "user", "document", "template", "comment", "line", "object", "data", "ew", "metadata", "ITY", "em", "enc", "el", "empty", "xml", "json", "ent", "body", "entry"], "httpresponse": [" httpresp", "ttpresp", "httpresult", "httpconnection", "procresponse", "ttpresponse", "HTTPresp", "HTTPconnection", "httpresp", "procreply", "procResponse", " httpreply", "HTTPResponse", "ttpconnection", "httpreply", "HTTPresponse", " httpresult", "HTTPreply", "httpResponse", "HTTPresult", " httpconnection", "procresult", " httpResponse", "ttpResponse"], "it": ["v", "ic", "at", "et", "li", "It", "ert", "rit", "is", "t", "st", "ot", "MIT", "itter", "ed", "ect", "al", "you", "ist", "he", "act", "ex", "i", "sit", "iter", "IT", "ut", "iz", "est", "init", "its", "ite", "ind", "mit", "im", "ate", "el", "l", "ip", "ent", "itted", "il", "lit", "ul"], "escookie": ["escace", "escue", "isecoder", "occoder", "descookie", "escoder", "occookie", "esctrl", "esccookie", "httpsog", "espcookie", "eyace", "occog", "ectrl", "ecotton", "ecancel", "httpsookie", "espancel", "espookie", "esccake", "ecace", "httpsotton", "espace", "Esccookie", "occcake", "occcookie", "ecookie", "eyookie", "ecue", "httpscookie", "Esctrl", "desctrl", "escog", "eycookie", "iseccookie", "escotton", "occotton", "eyancel", "eccookie", "descue", "iseccake", "ecog", "desccookie", "isecookie", "Escue", "Escookie", "escancel", "eccake", "ecoder"]}}
{"id1": "15445861", "id2": "2199604", "code1": "    public static void copyFile(File srcFile, File destFile) throws IOException {\n        if (!(srcFile.exists() && srcFile.isFile())) throw new IllegalArgumentException(\"Source file doesn't exist: \" + srcFile.getAbsolutePath());\n        if (destFile.exists() && destFile.isDirectory()) throw new IllegalArgumentException(\"Destination file is directory: \" + destFile.getAbsolutePath());\n        FileInputStream in = new FileInputStream(srcFile);\n        FileOutputStream out = new FileOutputStream(destFile);\n        byte[] buffer = new byte[4096];\n        int no = 0;\n        try {\n            while ((no = in.read(buffer)) != -1) out.write(buffer, 0, no);\n        } finally {\n            in.close();\n            out.close();\n        }\n    }\n", "code2": "    private static void unzipEntry(ZipFile zipfile, ZipEntry entry, File outputDir) throws IOException {\n        if (entry.isDirectory()) {\n            createDir(new File(outputDir, entry.getName()));\n            return;\n        }\n        File outputFile = new File(outputDir, entry.getName());\n        if (!outputFile.getParentFile().exists()) {\n            createDir(outputFile.getParentFile());\n        }\n        BufferedInputStream inputStream = new BufferedInputStream(zipfile.getInputStream(entry));\n        BufferedOutputStream outputStream = new BufferedOutputStream(new FileOutputStream(outputFile));\n        try {\n            IOUtils.copy(inputStream, outputStream);\n        } finally {\n            outputStream.close();\n            inputStream.close();\n        }\n    }\n", "label": 1, "substitutes": {"copyFile": ["copyfile", "cpDir", "cpFiles", " cpFiles", " cpfile", "copyFiles", " cpDir", " copyfile", " copyDir", "cpFile", " cpFile", "cpfile", "copyDir", " copyFiles"], "srcFile": ["rcfile", "srcWeb", "srcPath", "synfile", "sourceFile", "sourcePath", " srcPage", "sourcefile", "sysLine", "rcTime", "sourceModel", "destModel", " srcWeb", "rcFile", "srcDir", "srcfile", "rcPage", "srcPage", " srcDir", "destfile", "rcDir", "sqFile", "sysFile", " srcPath", " srcLine", "rcLine", "sqLine", "srcModel", "sqPage", "rcPath", "synLine", "sysWeb", "synFile", "srcTime", " srcTime", "sqTime", "synWeb", "srcLine", "sourcePage", " srcfile", " srcModel", "sysfile", "sourceDir", "destPage", "sourceLine"], "destFile": ["imgfile", "expPlace", "DestTable", "destLine", "estEmail", "portLine", "gtPort", "tomEmail", "portFile", "estFILE", "sourceFile", "tomFILE", " destTable", "expLine", "sourcefile", " destFolder", "destPlace", "destEmail", "DestFolder", "destPort", "DestFine", "Destfile", "sourceFine", "destFine", "DestPort", "DestFile", " destPort", " destDir", "potDir", "portPage", "gtPage", "estFile", "expFile", "gtEmail", "destfile", "optFolder", "gtFILE", "imgFile", "destDir", "potPort", "imgDir", "optFile", "destTable", "imgFine", "estPort", "gtFile", "tomPort", "expPage", "optDir", " destfile", "portPlace", "tomFile", "optTable", "DestDir", "destFolder", "potFile", "gtLine", "sourceDir", "destPage", "gtPlace", "potfile", "destFILE"], "in": ["irm", "ic", "en", "by", "io", "old", "is", "inf", "up", "al", "cin", "from", "act", "ini", "IN", "inc", "i", "inner", "inside", "ze", "on", "ar", "iter", "din", "init", "isin", "input", "ind", "mm", "gin", "im", "source", "In", "el", "ins", "rin", "it", "info", "ain", "con", "inn"], "out": ["err", "v", "at", "log", "outs", "by", "io", "t", "obj", "nt", "up", "aos", "output", "c", "to", "n", "null", "ex", "write", "inner", "res", "auto", "gc", "on", "outer", "o", "dis", "net", "end", "cn", "user", "ch", "writer", "client", "sys", "one", "OUT", "and", "Out", "sum", "cache", "it", "ou", "can", "ne", "co", "con"], "buffer": ["sample", "batch", "binary", "sequence", "variable", "append", "bar", "queue", "print", "length", "history", "bridge", "row", "stack", "phrase", "total", "attribute", "word", "library", "block", "Buffer", "mem", "bone", "initial", "base", "reason", "iter", "table", "message", "buff", "paste", "raw", "frame", "template", "document", "comment", "bank", "memory", "pad", "window", "cache", "character", "buf", "body", "temp", "display", "command"], "no": ["NO", "number", "orno", "not", "io", "who", "mo", "ko", "po", "nr", "start", "num", "nn", "total", "go", "ni", "index", "bo", "to", "n", "i", "node", "a", " NO", "how", "o", "vo", "No", "eno", "ano", " No", "never", "lo", "un", "read", "zero", "nos", "sha", "yes", "na", "pos", "ne", "none", "sn", "os"]}}
{"id1": "8093133", "id2": "15757836", "code1": "    public static Object loadXmlFromUrl(URL url, int timeout, XML_TYPE xmlType) throws IOException {\n        URLConnection connection = url.openConnection();\n        connection.setConnectTimeout(timeout);\n        connection.setReadTimeout(timeout);\n        BufferedInputStream buffInputStream = new BufferedInputStream(connection.getInputStream());\n        return loadXml(buffInputStream, xmlType);\n    }\n", "code2": "    private int[] sort(int n) {\n        int[] mas = new int[n];\n        Random rand = new Random();\n        for (int i = 0; i < n; i++) {\n            mas[i] = rand.nextInt(10) + 1;\n        }\n        boolean t = true;\n        int tmp = 0;\n        while (t) {\n            t = false;\n            for (int i = 0; i < mas.length - 1; i++) {\n                if (mas[i] > mas[i + 1]) {\n                    tmp = mas[i];\n                    mas[i] = mas[i + 1];\n                    mas[i + 1] = tmp;\n                    t = true;\n                }\n            }\n        }\n        return mas;\n    }\n", "label": 0, "substitutes": {"loadXmlFromUrl": ["loadXMLFromUrl", "loadXmlWithURL", "loadXmlFormWeb", "loadXMLFormURL", "loadXmlFormFile", "loadXmlWithUrl", "loadXmlFromWeb", "loadXmlAsURL", "loadXmlFromURL", "loadXmlAsFile", "loadXmlWithFile", "loadXmlFormURL", "loadXMLFromWeb", "loadXMLFromFile", "loadXMLFormWeb", "loadXmlFormUrl", "loadXmlAsUrl", "loadXMLFromURL", "loadXmlAsWeb", "loadXMLFormUrl", "loadXMLFormFile", "loadXmlWithWeb", "loadXmlFromFile"], "url": ["build", "sl", "path", "address", "log", "file", "Url", "abs", "str", "nl", "id", "b", "char", "in", "open", "n", "ll", "res", "host", "ssl", "html", "location", "link", "uri", "base", "URL", "job", "web", "page", "loc", "get", "ur", "user", "input", "document", "name", "u", "bel", "http", "l", "request", "xml", "domain"], "timeout": ["course", "until", "period", "number", "monitor", "height", "term", "amount", "io", "length", "mode", "t", "latest", "sleep", "resolution", "blocking", "max", "total", "limit", "network", "frequency", "time", "to", "duration", "wait", "delay", "server", "padding", "buffer", "out", "exclusive", "capacity", "client", "OUT", "password", "seconds", "version", "window", "directory", "it", "Timeout", "unit", "type", "policy", "size"], "xmlType": ["imageType", "imageStyle", " xmlTypes", "xmltype", "xmlStyle", "xmlUnit", "xmlTyp", "fileStyle", "complexUnit", "mlType", " xmlUnit", " xmltype", "mlTyp", "complexTyp", "imageTypes", "fileTypes", "imageBlock", "mlUnit", " xmlStyle", "fileBlock", "complexType", "fileType", "xmlTypes", "xmlBlock", " xmlTyp", "complextype", "mltype", " xmlBlock"], "connection": ["system", "subject", "description", "number", "communication", "io", "resource", "channel", "cone", "ion", "opening", "position", "still", "current", "open", "manager", "Connection", "network", "creation", "c", "to", "entry", "relation", "session", "condition", "computer", "statement", "close", "link", "city", "internet", "builder", "uri", "config", "connect", "conn", "database", "user", "reference", "client", "generation", "nc", "application", "socket", "pointer", "response", "connected", "directory", "established", "character", "usage", "con", "creator", "command"], "buffInputStream": ["BuffInputChannel", "BuffInputForm", "buffOutputStream", "buffOutputSteam", "buffInputChannel", "buffIOForm", "buffEarSteam", "BuffOutputField", "BuffOutputForm", "buffIOField", "buffEntityForm", "buffInputForm", "BuffOutputChannel", "buffEntityChannel", "BuffOutputStream", "buffInputSteam", "BuffInputField", "BuffOutputSteam", "buffEarForm", "buffOutputChannel", "buffOutputForm", "buffEntityStream", "buffInputField", "buffEarField", "buffIOSteam", "BuffInputStream", "buffIOStream", "buffEarStream", "BuffInputSteam", "buffOutputField"]}}
{"id1": "17630906", "id2": "14691829", "code1": "    public static int[] sortAscending(float input[]) {\n        int[] order = new int[input.length];\n        for (int i = 0; i < order.length; i++) order[i] = i;\n        for (int i = input.length; --i >= 0; ) {\n            for (int j = 0; j < i; j++) {\n                if (input[j] > input[j + 1]) {\n                    float mem = input[j];\n                    input[j] = input[j + 1];\n                    input[j + 1] = mem;\n                    int id = order[j];\n                    order[j] = order[j + 1];\n                    order[j + 1] = id;\n                }\n            }\n        }\n        return order;\n    }\n", "code2": "    public static String getMD5Hash(String in) {\n        StringBuffer result = new StringBuffer(32);\n        try {\n            MessageDigest md5 = MessageDigest.getInstance(\"MD5\");\n            md5.update(in.getBytes());\n            Formatter f = new Formatter(result);\n            for (byte b : md5.digest()) {\n                f.format(\"%02x\", b);\n            }\n        } catch (NoSuchAlgorithmException ex) {\n            ex.printStackTrace();\n        }\n        return result.toString();\n    }\n", "label": 0, "substitutes": {"sortAscending": ["sortAsscend", "sortASCended", "sortAucended", "sortAsScend", "sortAucender", "sortAsscender", "sortAsScender", "sortASCender", "sortAsScended", "sortAucending", "sortAucend", "sortAScended", "sortAScend", "sortAscender", "sortAsscending", "sortAsscended", "sortAscended", "sortASCending", "sortAScending", "sortASCend", "sortAsScending", "sortAscend", "sortAScender"], "input": ["local", "sample", "alpha", "output", "content", "pattern", "base", "parse", "document", "comment", "source", "list", " inputs", "command", "cur", "filter", "p", "Input", "up", "in", "open", "bit", "query", "check", "img", "valid", "out", "raw", "get", "read", "data", "image", "ip", "um", "stream", "batch", "before", "start", "internal", "history", "current", "from", "view", "qa", "inner", "hidden", "accept", "form", "buffer", "error", "exec", "need", "xml", "it", "cache", "quick", "text", "file", "sequence", " Input", "context", "select", "inc", "feed", "initial", "config", "table", "q", "active", "focus", "array", "request"], "order": ["allow", "where", "search", "master", "address", "v", "force", "dir", "sequence", "show", "only", "store", "before", "test", "ordering", "count", "position", "after", "arr", "record", "rule", "orders", "here", "r", "index", "good", "ice", "Order", "rank", "are", "grade", "condition", "code", "ord", "ordered", "iter", "trace", "sort", "result", "page", "message", "q", "core", "create", "priority", "comment", "error", "over", "random", "direction", "memory", "or", "and", "use", "group", "array", "move", "der", "list", "cache", "info", "unit", "er", "cycle", "graph", "command"], "i": ["eni", "ti", "g", "v", "I", "zi", "ic", "at", "iq", "MI", "li", "p", "gi", "io", "is", "di", "ki", "t", "ii", "iat", "ity", "phi", "ri", "mi", "si", "iti", "index", "ini", "iu", "pi", "ci", "m", "ims", "cli", "f", "multi", "q", "init", "xi", "mm", "ie", "ind", "ij", "qi", "im", "ai", "ix", "sim", "l", "ip", "it", "bi", "hi", "ui", "info", "ori", " I", "ir", "ami", "y", "integer"], "j": ["js", "ji", "v", "pt", "at", "ret", "jj", "dj", "aj", "str", "by", "my", "b", "J", "obj", "z", "ion", "jet", "ja", "adj", "other", "r", "kid", "kj", "jo", "res", "opt", "je", "o", "oj", "job", "br", "jack", "note", "jump", "server", "bs", "out", "q", "rel", "og", "req", "user", "jit", "ind", "jc", "jac", "ij", "pr", "uj", "key", "jl", "el", "ix", "tr", "l", "window", "json", "g", "fr", "bj", "it", "next", "state", "er", "last", "y", "jp", "bot"], "mem": ["js", "mop", "mt", "my", "ame", "sm", "med", "slot", "mi", "met", "cpu", "mu", "sam", "alloc", "dim", "m", "ib", "md", "Mem", "ms", "buff", "req", "reg", "mm", " Mem", "lim", "tim", "memory", "dem", "use", "em", "sim", "sum", "mb", "cmd", "pool", "ram", "temp", "mat", "size"], "id": ["d", "rid", "bid", "ld", " fid", "tag", "orig", "fd", "mid", "uid", "med", "ids", "aid", "sid", "mi", "index", "kid", "red", "ad", " tid", "ID", "link", "md", "sd", "vid", "ident", "pid", "hd", "Id", "ide", "ind", "name", "oid", "rand", "key", "and", "use", "wid", "info", "tx", "jp"]}}
{"id1": "8132219", "id2": "15645004", "code1": "    public static void copyFile(String inFile, String outFile) {\n        File in = new File(inFile);\n        File out = new File(outFile);\n        try {\n            FileChannel inChannel = new FileInputStream(in).getChannel();\n            FileChannel outChannel = new FileOutputStream(out).getChannel();\n            try {\n                inChannel.transferTo(0, inChannel.size(), outChannel);\n            } finally {\n                if (inChannel != null) inChannel.close();\n                if (outChannel != null) outChannel.close();\n            }\n        } catch (IOException e) {\n            throw new RuntimeException(e);\n        }\n    }\n", "code2": "    private void unzip(File filename) throws ZipException, IOException {\n        ZipInputStream in = new ZipInputStream(new BufferedInputStream(new FileInputStream(filename)));\n        ZipEntry entry = null;\n        boolean first_entry = true;\n        while ((entry = in.getNextEntry()) != null) {\n            if (first_entry) {\n                if (!entry.isDirectory()) {\n                    File subdir = new File(dir + File.separator + filename.getName().substring(0, filename.getName().length() - SUFFIX_ZIP.length()));\n                    if (!subdir.exists()) {\n                        subdir.mkdir();\n                        dir = subdir;\n                    }\n                }\n                first_entry = false;\n            }\n            if (entry.isDirectory()) {\n                FileUtils.forceMkdir(new File(dir + File.separator + entry.getName()));\n            } else {\n                File outfile = new File(dir + File.separator + entry.getName());\n                File outdir = new File(outfile.getAbsolutePath().substring(0, outfile.getAbsolutePath().length() - outfile.getName().length()));\n                if (!outdir.exists()) FileUtils.forceMkdir(outdir);\n                FileOutputStream fo = new FileOutputStream(outfile);\n                BufferedOutputStream bos = new BufferedOutputStream(fo, BUFFER);\n                int read;\n                byte data[] = new byte[BUFFER];\n                while ((read = in.read(data, 0, BUFFER)) != -1) {\n                    read_position++;\n                    bos.write(data, 0, read);\n                }\n                bos.flush();\n                bos.close();\n            }\n        }\n        in.close();\n    }\n", "label": 1, "substitutes": {"copyFile": ["copyfile", " copyStream", "copyStream", " copyFiles", "CopyFiles", " Copyfile", "copyFiles", " CopyStream", " copyfile", " CopyFile", "CopyFile", "Copyfile", " CopyFiles", "CopyStream"], "inFile": ["dinPath", "inputName", "dinFile", "ninFilename", "inName", "inputFile", "inTemplate", "inputFilename", "outTemplate", "inRow", " inRow", "innRow", "ninTemplate", "dinEmail", "inPath", "innFile", "dinRow", "inEmail", "ninName", "ninFile", " inEmail", "inputTemplate", "innEmail", "innPath", "outFilename", " inPath", "inFilename", "outName"], "outFile": ["outFILE", "outputfile", "inFILE", "ouFilename", " outfile", "outputFile", "outFormat", " outFILE", "outfile", "ouTable", "destfile", "outputFilename", "outputFormat", "outTable", "destFormat", "ouFILE", "ouFile", " outFormat", "destFile", "outputFILE", "inTable", "outputTable", "outFilename", "inFilename", "destFILE"], "in": ["irm", "ic", "en", "id", "sin", "old", "is", "inf", "up", "cin", "from", "ini", "IN", "inc", "i", "inner", "ze", " din", "on", "o", "s", "din", "init", " input", "input", "isin", "ind", "gin", "In", "source", "ai", "el", "ins", "rin", "ir", "it", "info", "bin", "ain", "inn"], "out": ["v", "at", "file", "en", "p", "by", "io", "b", "t", "e", "ot", "aos", "output", "c", "to", "n", "ex", "res", "gt", "o", "net", "all", "name", "client", "OUT", "one", "Out", "it", "g", "ou", "outs", "ne", "can", "co", "os", "w"], "inChannel": ["inConnection", "outChan", " inButton", " inConnection", "insideChannel", "ginCase", "inBlock", "sinSlot", "innCase", "insideButton", "cinHandler", "innChannel", "innerConnection", "outConnection", " inchannel", "inCategory", "sinChannel", " inHandler", "insideComponent", "newChannel", "inCase", "innSlot", "isinCategory", " inComponent", "inButton", "inColumn", "sinStream", "inStream", "ginCategory", "inComponent", "cinStream", "cinComponent", "ginChannel", "vinPanel", "sinColumn", "outStream", " inChan", "inSlot", "innCategory", "inHandler", "ginPanel", "cinColumn", "innerChannel", "vinCategory", "vinCase", "outBlock", "outColumn", "sinBlock", "inchannel", "outchannel", "cinBlock", "inChan", "newCase", "newCategory", "newPanel", "sinCase", "cinButton", "cinChannel", "isinSlot", "sinCategory", "innerChan", "innerchannel", "inPanel", "isinCase", "insideHandler", "isinChannel", "vinChannel"], "outChannel": ["outChan", "outputChannel", "nChannel", "outConnection", "oChan", "OutChan", " outClient", "nchannel", " outPassword", "outCh", "nChan", "nStream", " outStream", " outBlock", "OutConnection", "outChain", "inStream", " outChan", "OutChannel", "outStream", "inClient", "exChannel", " outChain", " outCh", "outClient", "outchannel", "outBlock", "inChan", "inchannel", "oPassword", "exChain", "OutCh", "inPassword", "outputCh", "outputChan", "oClient", "outputConnection", "outPassword", "exChan", "oChannel", " outchannel", " outConnection", "exBlock"]}}
{"id1": "12246545", "id2": "14450108", "code1": "    public void load(String url) throws IOException {\n        this.url = url;\n        int col = url.indexOf(':');\n        if (col > 1 && col < 5) {\n            load(new URL(url).openStream());\n        } else {\n            if (new File(url).exists()) {\n                System.out.println(\"Loading JAD from file : \" + url);\n                FileInputStream fin = new FileInputStream(url);\n                try {\n                    load(fin);\n                } finally {\n                    fin.close();\n                }\n            } else {\n                InputStream in = getClass().getResourceAsStream(url);\n                if (in != null) {\n                    System.out.println(\"Loading JAD from classpath : \" + url);\n                    load(in);\n                } else {\n                    throw new IOException(\"\\\"\" + url + \"\\\" was found in file system or classpath\");\n                }\n            }\n        }\n    }\n", "code2": "    public FTPFile[] connect() {\n        if (ftpe == null) {\n            ftpe = new FTPEvent(this);\n        }\n        if (ftp == null) {\n            ftp = new FTPClient();\n        } else if (ftp.isConnected()) {\n            path = \"\";\n            try {\n                ftp.disconnect();\n            } catch (IOException e1) {\n                log.error(\"could not disconnect -\" + e1.getMessage());\n            }\n        }\n        currentDir = new FTPFile[0];\n        log.debug(\"try to connect\");\n        try {\n            int reply;\n            ftp.connect(ftpsite);\n            reply = ftp.getReplyCode();\n            if (!FTPReply.isPositiveCompletion(reply)) {\n                ftp.disconnect();\n                log.error(\"FTP server refused connection.\");\n            }\n        } catch (IOException e) {\n            log.error(\"FTPConnection error: \" + e.getMessage());\n            if (ftp.isConnected()) {\n                try {\n                    ftp.disconnect();\n                } catch (IOException f) {\n                }\n            }\n        }\n        try {\n            if (!ftp.login(user, password)) {\n                log.error(\"could not login with: \" + user);\n                ftp.logout();\n            }\n            log.debug(\"Remote system is \" + ftp.getSystemName());\n            ftp.enterLocalPassiveMode();\n            currentDir = ftp.listFiles();\n        } catch (FTPConnectionClosedException e) {\n            log.error(\"FTPConnectionClosedException: \" + e.getMessage());\n        } catch (IOException e) {\n            log.error(\"IOException: \" + e.getMessage());\n        }\n        ftpe.setType(FTPEvent.CONNECT);\n        fireFTPEvent(ftpe);\n        return currentDir;\n    }\n", "label": 0, "substitutes": {"load": ["build", "lock", "print", "process", "debug", "test", "construct", "loader", "update", "fill", "open", "complete", "Load", "call", "pack", "ignore", "library", "check", "boot", "define", "close", "link", "require", "dump", "config", "iter", "set", "get", "init", "parse", "create", "read", "download", "include", "loading", "save", "loads", "LOAD", "use", "l", "cache", "sync", "launch", "find"], "url": ["build", "path", "nl", "print", "external", "pattern", "ssl", "location", "f", "base", "URL", "web", "gif", "req", "db", "name", "source", "key", "au", "json", "full", "err", "ret", "filename", "ext", "host", "status", "html", "rel", "loc", "fail", "ur", "http", "el", "sql", "org", "sl", "item", "address", "log", "term", "str", "id", "mail", "browser", "dl", "null", "ll", "res", "https", "page", "impl", "cert", "l", "xml", "ref", "gc", "ul", "gl", "string", "file", "Url", "resource", "b", "char", "row", "ls", "link", "uri", "q", "util", "mount", "domain"], "col": ["val", "serv", "fl", "cell", "fc", "pt", "dial", "ell", "aj", "var", "char", "count", "num", "mot", "row", "no", "ol", "mon", "Col", "const", "COL", "ctx", "c", " Col", "rot", "def", "ct", "seq", "sel", "loc", "column", "icol", "cor", "soc", "cont", "rect", "coll", "pos", "cmd", "cond", "cal", "il", "pc", "coord", "bc", "co", "con"], "fin": ["ln", "irm", "kin", "eric", "fl", "fw", "fc", "fil", "fre", "fd", "conv", "Fin", "ien", "lan", "inv", "raf", "len", "Finish", "ini", " fi", "mu", "f", "syn", "FIN", "lin", "oin", "din", "init", "fat", "fp", "fn", "ran", "fa", "mn", "san", "pen", "fi", "wid", "fr", "thin", "inn", "sn", "jin", "rn"], "in": ["local", "mc", "irm", "val", "scan", "search", "serv", "system", "ic", "at", "en", "any", "str", "by", "is", "inf", "k", "the", "al", "no", "cin", "from", "inv", "re", "act", "to", "IN", "inc", "i", "n", "inner", "a", "ilo", "m", "within", " din", "on", "o", "form", "ma", "out", "oin", "din", "init", "found", "all", "isin", "input", "ind", "mm", "gin", "In", "add", "el", "pic", "ins", "rin", "it", "ent", "nin", "bin", "thin", "ain", "find", "con", "inn"]}}
{"id1": "15737836", "id2": "16931472", "code1": "    public void delete(Site site) throws Exception {\n        DBOperation dbo = null;\n        Connection connection = null;\n        PreparedStatement preparedStatement = null;\n        ResultSet resultSet = null;\n        try {\n            String chkSql = \"select id from t_ip_doc where channel_path=?\";\n            dbo = createDBOperation();\n            connection = dbo.getConnection();\n            connection.setAutoCommit(false);\n            String[] selfDefinePath = getSelfDefinePath(site.getPath(), \"1\", connection, preparedStatement, resultSet);\n            selfDefineDelete(selfDefinePath, connection, preparedStatement);\n            preparedStatement = connection.prepareStatement(chkSql);\n            preparedStatement.setString(1, site.getPath());\n            resultSet = preparedStatement.executeQuery();\n            if (resultSet.next()) {\n                throw new Exception(\"\u027e\ufffd\ufffd\u02a7\ufffd\u0723\ufffd\" + site.getName() + \"\ufffd\ufffd\ufffd\u047e\ufffd\ufffd\ufffd\ufffd\u0135\ufffd\ufffd\ufffd\ufffd\u06a3\ufffd\");\n            } else {\n                String sqlStr = \"delete from t_ip_site where site_path=?\";\n                dbo = createDBOperation();\n                connection = dbo.getConnection();\n                preparedStatement = connection.prepareStatement(sqlStr);\n                preparedStatement.setString(1, site.getPath());\n                preparedStatement.executeUpdate();\n            }\n            connection.commit();\n        } catch (SQLException ex) {\n            connection.rollback();\n            throw ex;\n        } finally {\n            close(resultSet, null, preparedStatement, connection, dbo);\n        }\n    }\n", "code2": "    public void handler(Map<String, String> result, TargetPage target) {\n        try {\n            URL url = new URL(target.getUrl());\n            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));\n            String line = null;\n            while ((line = reader.readLine()) != null) {\n                for (Map.Entry<String, String> entry : result.entrySet()) {\n                    if (line.indexOf(target.getInclude()) != -1) {\n                        int fromIndex = line.indexOf(target.getFromStr());\n                        String r = line.substring(fromIndex + target.getFromStr().length(), line.indexOf(target.getToStr(), fromIndex));\n                        entry.setValue(r);\n                        line = line.substring(line.indexOf(target.getToStr()) + target.getToStr().length());\n                    }\n                }\n            }\n            reader.close();\n        } catch (MalformedURLException e) {\n        } catch (IOException e) {\n        }\n    }\n", "label": 0, "substitutes": {"delete": ["clean", "update", "select", "disable", "write", "clear", "link", "dump", "insert", "set", "Delete", "lete", "get", "touch", "database", "create", "download", "load", "remove", "save", "drop", "add", "move", "execute", "destroy", "del", "de", "quit"], "site": ["settings", "course", "localhost", "item", "path", "scan", "sample", "at", "ste", "file", "store", "test", "remote", "e", "service", "sites", "rule", "network", "index", "node", "isite", "session", "theme", "link", "sit", "ze", "server", "config", "base", "set", "page", "station", "software", "environment", "ite", "name", "template", "http", "sys", "data", "source", "Site", "chain", "group", "pse", "info", "unit", "domain", "se"], "dbo": ["drabo", "dambo", "ddBo", "delbo", " dambo", "gbo", "Dpo", "pbo", "dbon", " dbon", "lambo", " dado", "sdBO", "ddBO", "DBo", "delbu", "DBO", "ddpo", "Dbon", "delpo", " dpo", "gbu", " dbu", "debugambo", "draBo", "odBo", "pbu", "dBO", "dBo", "odbu", "Dbu", "dmu", "Dmu", "lBo", "delmu", "drapo", "debugpo", "dado", "lpo", "dpo", "ddbo", "gBO", "Dado", "Dbo", "odbo", " dBo", "drabon", "pmu", "ppo", "sdbo", "debugBo", "ddbu", "debugbo", "ddado", "lbo", "odpo", "dbu", "sdbu", " dBO"], "connection": ["settings", "created", "system", "subject", "function", "operation", "communication", "collection", "resource", "handler", "binding", "cone", "po", "closure", "ion", "position", "context", "current", "open", "output", "manager", " Connection", "Connection", "network", "c", "bo", "intention", "library", "relation", "session", "condition", "office", "computer", "statement", "auto", "link", "location", "city", "console", "server", "config", "engine", "net", "connect", "table", "information", "container", "conn", "database", "db", "writer", "reference", "associated", "document", "client", "generation", "application", "socket", "pointer", "chain", "response", "connected", "directory", "character", "established", "controller", "pool", "government", "management", "usage", "con", "creator", "command"], "preparedStatement": ["prearedStatement", "preinitializedAdapter", "preppedCall", "preparedstatement", " preachedCall", "postparedstatement", "prearedCall", " preparedQuery", "premittedComment", "prepparedSQL", "preculatedStatement", "preparedAdapter", "prelatedDevice", "prearedstatement", "postppedCall", " preparedCall", "preachedstatement", "prearedStat", "prepferredSQL", "preachedAdapter", "preachedStatement", "prepparedCall", "prepletedDevice", "pretparableStatement", "preparedStatus", "preparedCopy", "prepletedComment", "preformedStatement", "prepparedQuery", "PreppedQuery", " preparedstatement", "prepparedStatement", "prefixedstatement", "postppedstatement", "premedStatus", "preferredSQL", "perachedStyle", "prefixedQuery", "premedListener", "preformedCall", "prejectedCopy", "perachedStatement", " preparedStat", "prefixedCopy", "preformedGrant", "preachedComment", "prepferredQuery", "pparedStat", "paredQuery", "prearedListener", "perparedAdapter", "Prearedstatement", "perparedStyle", "preachedCall", "PreparedQuery", "preparableStatus", "preferredstatement", "PreppedStatement", "prearedDevice", "preparedSQL", "PrearedComment", "pretparableListener", "preppedStatement", "premittedStyle", "preferredStatement", "preparedGrant", " preachedStatement", "preparedQuery", "preparedStat", "previsedQuery", "preferredCall", "preppedStatus", "prearedCopy", "preparedComment", "prejectedstatement", "Preparedstatement", "premittedStatement", "preferredQuery", "prepletedStat", "prearedSQL", "prepletedStatement", "perachedComment", " preparedCopy", "premedStatement", "preparedStyle", "prefixedCall", "preinitializedStyle", "prelatedstatement", "preachedStat", " preachedStat", " preachedGrant", "prepletedCall", "preparedListener", "preparableStatement", "pretparedStatus", "PrearedDevice", "prearedQuery", "premittedAdapter", "PreparedStatement", " prefixedstatement", "prearedComment", "preppedQuery", "perparedStatement", "PreparedComment", "prefixedStatement", "preachedStyle", "preparedDevice", "perparedComment", "prearedStatus", "preparableListener", "previsedStatus", "prejectedQuery", "preculatedstatement", "previsedStatement", "preformedStat", "postppedStatement", "preendedstatement", "preendedQuery", "previsedStat", "prepferredstatement", "preculatedQuery", "prelatedStatement", "prejectedStatement", "paredStat", "postparedCall", "pparedStatement", " prefixedCopy", "perachedAdapter", "PrearedStatement", "prepferredStatement", "preinitializedStatement", "paredStatus", "prepletedstatement", "pparedStatus", "postparedStatement", "preparedCall", "Preppedstatement", " preparedGrant", "PreparedDevice", "pretparableStatus", "preculatedSQL", "preppedStat", "prepparedstatement", "pretparedListener", "preendedStatement", "pparedQuery", "pretparedStatement", "preinitializedComment", "prelatedComment", "paredStatement", "preachedGrant", "preppedstatement", "prepletedGrant", " prefixedQuery", " prefixedStatement"], "resultSet": ["resultSession", "rowHandle", "ResultSum", "ResultSource", " resultSource", "resultUn", "resultSum", "responseSet", "dataSet", "resultSource", " resultHandle", "ResultStream", "ResultPath", " resultPath", "resultStream", "ResultUn", "characterSum", " resultTime", "responseUn", "resultsPath", " resultSum", " resultStream", "dataStream", "dataTime", "rowSet", "ResultHandle", "resultHandle", "characterStream", " resultList", " resultSession", "resultList", "characterSet", "ResultList", "resultPath", "rowSource", "ResultSet", "resultsStream", "resultsUn", "responseStream", "ResultTime", "resultsList", "resultTime", "ResultSession", "resultsSet", "rowSession"], "chkSql": ["chkDyl", "chKDk", "chkRSk", "chkSq", "chKSk", "chkStrQL", "chKSyl", "chkRSyl", "chKSq", "chkSQL", "chKInsq", "chkDql", "chkDk", "chkInsql", "chkRSQL", "chkSyl", "chkStrql", "chKSQL", "chkInsQL", "chkSk", "chkInsq", "chKInsQL", "chKInsql", "chkDq", "chKSql", "chkRSql", "chkDQL", "chKDyl", "chKDQL", "chKDql", "chkStrq"], "selfDefinePath": ["selfDefinesPath", "selfDefineSet", "selfDefiningPath", "selfDeliningKey", "selfDefiningKey", "selfDeliningpath", "selfDefiningDir", "selfDefiningSet", "selfdefinepath", "selfDefINEKey", "selfDefinesPattern", "selfDefineDir", "selfdefinePath", "selfDelineKey", "selfdefinesPattern", "selfdefinespath", "selfDefidepath", "selfDefideDir", "selfDefinedPath", "selfDefiningPattern", "selfdefinePattern", "selfDeliningPath", "selfDefiningpath", "selfDelinepath", "selfDefINEPath", "selfDefinedpath", "selfDefineKey", "selfDefinePattern", "selfDefINEpath", "selfDelinePath", "selfDefinesDir", "selfDefinespath", "selfDelineSet", "selfDefinedKey", "selfdefineDir", "selfDeliningSet", "selfDefidePattern", "selfDefINESet", "selfdefinesPath", "selfdefinesDir", "selfDefinedSet", "selfDefidePath", "selfDefinepath"], "sqlStr": [" sqlString", "SQLWr", " sqlName", "SQLStr", "sqlString", "SQLstr", "sqWr", " sqlstr", "qlName", "SQLSt", "sqStr", "sqlstr", "qlstr", "sqString", "sqstr", "qlStr", "sqlSt", "sqlName", "sqlWr", " sqlSt", " sqlWr", "sqName", "sqSt", "qlString"]}}
{"id1": "9796161", "id2": "22479286", "code1": "    public static String getMD5(String s) {\n        try {\n            MessageDigest m = MessageDigest.getInstance(\"MD5\");\n            m.update(s.getBytes(), 0, s.length());\n            return \"\" + new BigInteger(1, m.digest()).toString(16);\n        } catch (NoSuchAlgorithmException e) {\n            logger.error(\"MD5 is not supported !!!\");\n        }\n        return s;\n    }\n", "code2": "    public String md5(String plainText) throws NoSuchAlgorithmException {\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(plainText.getBytes());\n        byte[] digest = md.digest();\n        StringBuffer hexString = new StringBuffer();\n        for (int i = 0; i < digest.length; i++) {\n            plainText = Integer.toHexString(0xFF & digest[i]);\n            if (plainText.length() < 2) {\n                plainText = \"0\" + plainText;\n            }\n            hexString.append(plainText);\n        }\n        return hexString.toString();\n    }\n", "label": 1, "substitutes": {"getMD5": ["getMD4", "toSHA4", "getmd5", "toMD4", "getSHA7", "getMD2", "toMD2", "toSHA2", "toMD7", "getSHA2", "toMD5", "toSHA7", "getmd4", "getSHA5", "getmd7", "getSHA4", "getMD7", "toSHA5", "getmd2"], "s": ["text", "js", "sq", "v", "bytes", "aws", "h", "string", "p", "abs", "str", "ats", "src", "b", "is", "t", "ws", "xs", "S", "ls", "strings", "gs", "rs", "ts", "n", "i", "c", "ns", "f", "fs", "ps", "ses", "ms", "sb", "bs", "sql", "its", "data", "sts", "sv", "source", "ends", "ins", "l", "ies", "g", " gets", "es", "ss", "space", "y", "gets", "os"], "m": ["mac", "mc", "v", "perm", "h", "mt", "mod", "mo", "e", "sm", "managed", "nm", "mr", "manager", "mi", "rem", "mu", "vm", "md", "tm", "pm", "ms", "rm", "hm", "bm", "M", "mm", "om", "mk", "mut", "cm", "me", "am", "made", "dm", "fm", "em", "man", "l", "mask", "g", "gm", "y"]}}
{"id1": "6988216", "id2": "841724", "code1": "    public void testSimpleQuery() throws Exception {\n        JCRNodeSource dummySource = (JCRNodeSource) resolveSource(BASE_URL + \"users/alexander.klimetschek\");\n        assertNotNull(dummySource);\n        OutputStream os = ((ModifiableSource) dummySource).getOutputStream();\n        assertNotNull(os);\n        String dummyContent = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><user><id>alexander</id><teamspace>cyclr</teamspace><teamspace>mindquarryTooLong</teamspace></user>\";\n        os.write(dummyContent.getBytes());\n        os.flush();\n        os.close();\n        JCRNodeSource source = (JCRNodeSource) resolveSource(BASE_URL + \"users/bastian\");\n        assertNotNull(source);\n        os = ((ModifiableSource) source).getOutputStream();\n        assertNotNull(os);\n        String content = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?><user><id>bastian</id><teamspace>mindquarry</teamspace></user>\";\n        os.write(content.getBytes());\n        os.flush();\n        os.close();\n        QueryResultSource qResult = (QueryResultSource) resolveSource(BASE_URL + \"users?/*[.//user/teamspace='mindquarry']\");\n        assertNotNull(qResult);\n        Collection results = qResult.getChildren();\n        assertEquals(1, results.size());\n        Iterator it = results.iterator();\n        JCRNodeSource rSrc = (JCRNodeSource) it.next();\n        InputStream rSrcIn = rSrc.getInputStream();\n        ByteArrayOutputStream actualOut = new ByteArrayOutputStream();\n        IOUtils.copy(rSrcIn, actualOut);\n        rSrcIn.close();\n        assertEquals(content, actualOut.toString());\n        actualOut.close();\n        rSrc.delete();\n    }\n", "code2": "    private static void readAndRewrite(File inFile, File outFile) throws IOException {\n        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n        Dataset ds = DcmObjectFactory.getInstance().newDataset();\n        dcmParser.setDcmHandler(ds.getDcmHandler());\n        dcmParser.parseDcmFile(null, Tags.PixelData);\n        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        System.out.println(\"reading \" + inFile + \"...\");\n        pdReader.readPixelData(false);\n        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n        ds.writeDataset(out, dcmEncParam);\n        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n        System.out.println(\"writing \" + outFile + \"...\");\n        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        pdWriter.writePixelData();\n        out.flush();\n        out.close();\n        System.out.println(\"done!\");\n    }\n", "label": 1, "substitutes": {"testSimpleQuery": [" executeSimpleContent", " testSimpleQ", " testBasicContent", " testRawContent", " testQueryContent", " testRawQuery", " executeSimpleQuery", " testSimpleContent", " executeBasicContent", " testQueryQuery", " executeBasicQ", " executeBasicQuestion", " executeSimpleQuestion", " testBasicQ", " testBasicQuery", " executeBasicQuery", " testQueryQ", " testQueryQuestion", " testBasicQuestion", " testSimpleQuestion", " executeSimpleQ", " testRawQ", " testRawQuestion"], "dummySource": ["dummyInput", "duffyContent", "datalFile", "dumpInput", "determinedContent", "dummySourceFile", " duffyInput", "daummyStore", "udeterminedFile", "daummyInput", "duffySource", "dumpStore", "dummContent", "datumResource", "determinedSource", "datalContent", "dummyParent", "dancyContent", "daatumInput", "udeterminedContent", "daummyResource", "dancySource", "datalSource", "datumStore", "udummyParent", "dummiesSource", "datalParent", "dummiesInput", "udummyFile", "dummSource", "dummyStore", " duffyContent", " dummySourceFile", "daatumSource", "duffyInput", "daatumStore", "dummInput", "dummyFile", "determinedParent", "dumpSource", "determinedFile", "dumpResource", "dummiesResource", "dummyResource", "udummyContent", " duffySource", "udummySource", "daatumResource", "datumSource", "dancyInput", "dummSourceFile", "dummiesStore", " dummyInput", "datumInput", " duffySourceFile", "daummySource", "dancyFile", "udeterminedSource", "duffySourceFile", "udeterminedParent", "dancySourceFile", "dancyParent"], "os": ["windows", "js", "cos", "oos", "bos", "oses", "et", "oes", "des", "uts", "ats", "io", "ost", "ose", "ants", "ors", "is", "ot", "ows", "ox", "aos", "OS", "si", "mos", "ts", "ols", "ios", "obs", "ims", "fs", "dis", "o", "ros", "ens", "ms", "osi", "bs", "los", "oss", "out", "oS", "oids", "s", "ops", "conn", "om", "asis", "ds", "sys", "socket", "or", "Os", "dos", "pos", "ui", "css", "ori", "es", "oa", "ys"], "dummyContent": [" dummiesContent", "dumpingCode", "determinedContent", "dynamicContent", " dummyCode", "dummiesContent", "deltaInt", " dummiesTemplate", "dumpInt", "DummyContent", "DumpInt", "determinedText", "determinedMedia", "DumpText", "dummyText", "dummiesTemplate", " dummiesContents", "DummyText", "dynamicCode", "DummyMedia", "DumpContent", "dynamicTemplate", "determinedInt", "dumpingTemplate", "deltaText", "DumpMedia", "dumpText", "DummyInt", "deltaMedia", "dummyContents", "dumpingContent", "dummiesContents", "dumpingContents", "dummyMedia", "dumpContent", "dummyTemplate", " dummyTemplate", "dummyInt", "dynamicContents", "dummiesCode", " dummiesCode", "dummyCode", " dummyContents", "dumpMedia", "deltaContent"], "source": ["sr", "search", "sample", "seed", "proxy", "site", "sin", "resource", "src", "store", "join", "in", "service", "SOURCE", "from", "ace", "ource", "scope", "instance", "inner", "relation", "status", "sf", "server", "google", "uri", "table", "Source", "result", "series", "sp", "s", "user", "core", "ie", "template", "spec", "sys", "image", "use", "ser", "pse", "sql", "space", "se"], "content": ["text", "path", "description", "sequence", "txt", "resource", "ontent", "Content", "context", "current", "output", "section", "ext", "editor", "node", "code", "title", "summary", "status", "html", "license", "article", "expression", "config", "example", "result", "message", "format", " contents", "activity", "action", "tree", "document", "template", "comment", "data", "application", "cont", "value", "key", "header", "version", "quest", "response", "xml", "json", "cache", "layout", "script", "tx", "body", "command"], "qResult": ["qResults", "queryReport", " qResults", " qRes", "qresult", "dqView", "qReport", "Qresult", "iqResult", " qresult", "QResult", "queryResults", "qView", "queryRes", "iqResults", "queryResult", " qResponse", "dqRes", "qRes", " qView", " qReport", "iqRes", "dqResult", "qResponse", "QRes", "queryResponse", "dqresult", "QView", "iqReport", "iqResponse"], "results": ["tests", "resources", "assets", "settings", "forms", "features", "members", "Contents", "objects", "terms", "ULTS", "ults", "missions", "children", "blocks", "roads", "orders", "reports", "users", "olds", "RESULTS", "res", "pages", "chains", "lections", "times", "products", "Results", "ms", "result", "s", "ries", " Results", "its", "xes", "events", "versions", "actions", "relations", "ands", "posts", "data", "items", "views", "hips", "details", "rows", "photos", "runs", "archives", "thumbnails", "values"], "it": ["v", "op", "ic", "h", "at", "et", "p", "li", "id", "It", "rit", "is", "t", "st", "in", "MIT", "he", "i", "stat", "ci", "m", "iter", "IT", "iz", "out", "init", "its", "ite", "read", "mit", "ait", "pit", "exec", "ip", "they", "info", "hit", "lit", "ul"], "rSrc": ["rSeRC", "rDesRC", "crDesRC", " rSsrc", "crDesrs", "rSlcs", "crSrc", " rSRC", "rSyssrc", "rDessrc", "rSecs", "rSourcesrc", "rSRC", "crDessrc", "rScs", "crSsrc", "rDesrs", "rDesrc", "rSlrs", "rSrs", " rSrs", " rSource", "rSourcers", "crDesrc", "crSrs", "rSourceRC", "rSerc", "rSysource", "rSourcerc", "rSysrc", "rSysRC", "crSRC", "rSlRC", " rScs", "rSers", "rSlrc", "rSource", "rSsrc"], "rSrcIn": ["rSRCCon", "rSldin", "rSsrcIn", "rSldIN", "rSrcIN", "rSrcInput", "rSetsrcin", "rSetsrcOut", "rSrcCon", "rSrsInput", "rSncin", "rSetrcOut", "rSsrcInput", "rSRCOut", "rSsrcin", "rSldIn", "rSetrcIn", "rSldOut", "rSrcin", "rSncIn", "rSRCIn", "rSetrcin", "rSldCon", "rSetrcIN", "rSncOut", "rSrcOut", "rSRCin", "rSrsIn", "rSRCIN", "rSsrcIN", "rSldInput", "rSetsrcIn", "rSetsrcIN", "rSsrcOut", "rSrsOut", "rSncCon", "rSrsIN"], "actualOut": ["realIs", "actualBytes", "actualCopy", "ualout", "realOut", "ualIn", " actualEnd", "finalIn", "ualOut", " actualout", " actualIs", "actualEnd", "actuallyOut", "actuallyIn", "ualBytes", " actualBytes", "actualIn", "actualout", "actuallyIs", "UALBytes", "UALIn", "realCopy", "actualIs", "actuallyCopy", "UALOut", "virtualIn", "finalOut", " actualCopy", "finalout", " actualIn", "realIn", "virtualOut", "UALEnd", "ualEnd"]}}
{"id1": "22135199", "id2": "5808579", "code1": "    public void testCodingEmptyFile() throws Exception {\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        WritableByteChannel channel = newChannel(baos);\n        HttpParams params = new BasicHttpParams();\n        SessionOutputBuffer outbuf = new SessionOutputBufferImpl(1024, 128, params);\n        HttpTransportMetricsImpl metrics = new HttpTransportMetricsImpl();\n        LengthDelimitedEncoder encoder = new LengthDelimitedEncoder(channel, outbuf, metrics, 16);\n        encoder.write(wrap(\"stuff;\"));\n        File tmpFile = File.createTempFile(\"testFile\", \"txt\");\n        FileOutputStream fout = new FileOutputStream(tmpFile);\n        OutputStreamWriter wrtout = new OutputStreamWriter(fout);\n        wrtout.flush();\n        wrtout.close();\n        FileChannel fchannel = new FileInputStream(tmpFile).getChannel();\n        encoder.transfer(fchannel, 0, 20);\n        encoder.write(wrap(\"more stuff\"));\n        String s = baos.toString(\"US-ASCII\");\n        assertTrue(encoder.isCompleted());\n        assertEquals(\"stuff;more stuff\", s);\n        tmpFile.delete();\n    }\n", "code2": "    public static final String encryptPassword(String loginName, String password) {\n        try {\n            MessageDigest md5 = MessageDigest.getInstance(\"MD5\");\n            md5.update(loginName.toUpperCase().getBytes(\"UTF-8\"));\n            md5.update(password.getBytes(\"UTF-8\"));\n            byte[] ba = md5.digest();\n            return byte2hex(ba);\n        } catch (Exception e) {\n            return password;\n        }\n    }\n", "label": 0, "substitutes": {"testCodingEmptyFile": [" testCachingemptyStream", " testCachingEmptyFiles", " testCodingEmptyFiles", " testCodingFullfile", " testCodingFullStream", " testCachingemptyfile", " testCodingemptyFiles", " testCachingemptyFiles", " testCodingEmptyfile", " testCodingSizefile", " testCodingFullFiles", " testCodingEmptyStream", " testCodingSizeFile", " testCachingEmptyFile", " testCodingemptyfile", " testCodingemptyFile", " testCodingSizeFiles", " testCachingemptyFile", " testCachingEmptyStream", " testCodingSizeStream", " testCodingemptyStream", " testCodingFullFile", " testCachingEmptyfile"], "baos": ["boos", " bao", " baoss", "taoS", "booss", "tao", "Bao", " baOs", "boo", "BaOs", "boOS", "taos", "Baos", "baoS", "caOs", "aoOs", "aoos", "taOs", "baOS", " baoS", "Baoss", "boOs", "caoS", "bao", "aoo", " baOS", "aoOS", "baOs", "cao", "caos", "baoss"], "channel": ["system", "batch", "file", "queue", "io", "resource", "component", "context", "service", "Channel", "network", "c", "block", "session", "connection", "console", "chan", "room", "server", "buffer", "message", "out", "container", "ch", "input", "client", "caster", "cm", "application", "socket", "password", "chain", "window", "cache", "controller", "can", "stream", "handler", "con", "command"], "params": ["settings", " parameters", "cms", "cmp", "Par", "radius", "p", "pps", "limits", "properties", "conf", "names", "rs", "ctx", "headers", "proc", "pi", "caps", "units", "Parameters", "options", "config", "ps", "phys", "pins", "parts", "fps", "ops", "mm", "tags", "name", "spec", "services", "pretty", "sys", "data", "AMS", "details", "password", "json", "param", "ams", "types", "pool", "par"], "outbuf": ["outputrb", " outbuffer", "outbuff", "Outbuff", " outbuff", "inrb", "outputbuff", "Outbuffer", "Outbuf", "inBuffer", " outBuffer", "outrb", "outputbuffer", "inbuff", "outBuffer", " outrb", "inbuffer", "outbuffer", "inbuf", "outputbuf", "OutBuffer"], "metrics": ["metths", "monrics", "mutrices", "metrors", "mutrics", "Metrix", " metrices", "monrix", " metths", " metcs", "mtrics", "metric", "monrors", "matrics", "metcs", "metrices", "mtcs", "Metrors", "matrix", "matric", "metrix", "mutths", "mtrices", "mtths", "matrors", "monric", "mutcs", "Metric", "Metrics"], "encoder": ["enciever", "Encrier", "enrier", "execoder", "execrier", "Encuter", "ecoding", "Enciever", "ecramer", "executer", "ecrier", "enressor", "encramer", "encrier", "Encoding", "enoding", "encuter", "encoding", "Encramer", " encressor", " encoding", " encuter", " encrier", "enoder", "enramer", " encoded", " encramer", "eniever", "enoded", "execoding", "encoded", "eciever", "Encoder", "encressor", "ecoder", "ecressor", "ecoded"], "tmpFile": ["tempPath", "imgfile", "testFilename", "tempFile", "tmpName", "tmpFiles", "txtfile", "fakeFiles", "mpFile", "tmpFilename", "fakefile", " tmpfile", "imgKey", " tmpKey", "fakeFilename", " tmpFilename", "testfile", "tempKey", "txtPath", "imgFile", "tmpKey", "tempfile", "tempFILE", " tmpPath", "testFile", "tmpPath", "mpfile", " tmpFiles", "mpName", "tmpFILE", "tmpfile", " tmpFILE", "tempFilename", "mpFilename", " tmpName", "fakeFile", "imgFILE", "testName", "txtFile", "tempFiles"], "fout": ["vao", "foutput", "dfbal", "dfOUT", "sfOut", "fOUT", "fbal", "lOUT", "fullout", "fullOUT", "sfouts", "wouts", "fullbal", "sfout", "vouts", "dfoutput", "sfao", "fao", "wao", "loutput", "fOut", "wOut", "vout", "dfout", "vOut", "lout", "lbal", "wout", "fouts", "fulloutput"], "wrtout": ["wgtwriter", "hwrcw", "wltwriter", "wRTwriter", "hwrtout", "wwtout", "hwrtwriter", "wrdio", "wgtout", "wttio", "hwrtw", "Wrtn", "wrdout", "hwrcex", "wrtin", "wltgen", "ewrtgen", "wltin", "wrdgen", "wrtw", "wwtwriter", "wrdn", "wRTn", "wttout", "wrtn", "Wrdn", "wgtw", "wrcex", "ewltwriter", "ewltgen", "wttwriter", "hwrcout", "ewltin", "wrcwriter", "ewrtout", "hwrtex", "wrcw", "wrtio", "Wrdio", "Wrdout", "wwtw", "wrtgen", "Wrtwriter", "hwrcwriter", "ewltout", "Wrtio", "wdrwriter", "ewrtwriter", "wdrout", "ewrtin", "wrtex", "wttn", "wgtex", "wdrgen", "wdrin", "wltout", "wrtwriter", "Wrdwriter", "wrdin", "Wrtout", "wRTio", "wRTout", "wrdwriter", "wwtex", "wrcout"], "fchannel": ["fchan", " fconsole", "wchannel", "fconnection", "fChannel", "fcconnection", "FChannel", " fnet", "fconsole", " fChannel", "wconnection", "wcontroller", "fcontroller", "flnet", "flconsole", "fccontroller", " fcontroller", " fconnection", " fchan", "Fnet", "Fchannel", "fcchan", "fcchannel", "flchannel", "Fconsole", "fnet", "wchan", "flChannel"], "s": ["js", "sq", "v", "string", "h", "p", "str", "b", "is", "t", "ws", "e", "S", "ls", "j", "sg", "gs", "r", "rs", "c", "ts", "n", "i", "a", "m", "csv", "f", "ns", "ds", "sv", "g", "ss", "qs", "gets", "w"]}}
{"id1": "19494842", "id2": "4458076", "code1": "    private void callService() {\n        try {\n            URL url = new URL(baseUrl + servicePath + attributes);\n            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));\n            String inputLine;\n            StringBuffer buf = new StringBuffer();\n            while ((inputLine = in.readLine()) != null) {\n                buf.append(inputLine);\n            }\n            in.close();\n            answer = buf.toString();\n        } catch (MalformedURLException e) {\n            answer = \"Malformed Url:\" + e.getMessage();\n            return;\n        } catch (IOException e) {\n            answer = \"I/O exception: \" + e.getMessage();\n            return;\n        }\n    }\n", "code2": "    public InputStream getInputStream() throws TGBrowserException {\n        try {\n            if (!this.isFolder()) {\n                URL url = new URL(this.url);\n                InputStream stream = url.openStream();\n                return stream;\n            }\n        } catch (Throwable throwable) {\n            throw new TGBrowserException(throwable);\n        }\n        return null;\n    }\n", "label": 0, "substitutes": {"callService": ["useServices", "callQuery", " callservice", "runservice", " callQuery", "useService", "runService", "callservice", " callServices", "callServices", "runServices", "useQuery", "runQuery", "useservice"], "url": ["sl", "gl", "address", "file", "Url", "str", "nl", "resource", "channel", "char", "b", "oul", "browser", "service", "ls", "r", "dl", "ll", "pl", "ssl", "link", "uri", "base", "google", "URL", "web", "sb", "get", "ur", "conn", "client", "acl", "hl", "bel", "http", "l", "ul"], "in": ["mc", "again", "ic", "en", "io", "b", "is", "inf", "cin", "from", "ill", "conf", "reader", "r", "ri", "IN", "inc", "i", "check", "inner", " din", "on", "iter", "out", "din", "oin", "all", "input", "read", "isin", "gin", "In", "mn", "and", "el", "ins", "rin", "sum", "l", "it", "bin", "er", "con", "inn"], "inputLine": [" inputRow", "contextRow", "Inputline", "helloRow", "helloLINE", " inputline", "parseLINE", "helloFile", "InputRow", "inputFile", "inputline", "responseLINE", "parseFile", "responseLine", "inputRow", "contextLine", "inputLINE", "responseRow", "parseLine", "outputLine", "outputL", "inputL", "parseRow", "outputRow", "helloLine", "InputLINE", "outputline", "InputLine", "contextline", " inputLINE", " inputL", "responseline", " inputFile", "contextL"], "buf": ["cv", "aux", "bed", "cur", "pb", "alph", "bag", "bar", "queue", "gor", "bu", "bg", "conv", "hung", "rb", "msg", "nm", "raf", "inv", "comm", "nom", "mu", "block", "mem", "vec", "img", "area", "bh", "cf", "br", "buffer", "buff", "fam", "cap", "db", "vet", "mk", "tab", "Buff", "cam", "cb", "pkg", "uf", "ob", "cmd", "Buffer"], "answer": ["search", "send", "address", "Answer", "answered", "place", "again", "sequence", "say", "replace", "print", "channel", "remember", "question", "onse", "archive", "review", "username", "interpret", "offer", "continue", "accept", "about", "poll", "form", "result", "message", "equ", "command", "argument", "ask", "exit", "report", "value", "image", "version", "array", "response", "install", "cache", "option", "reply", "ver", "sn", "entry", "ve"]}}
{"id1": "6470716", "id2": "11032546", "code1": "    public static void main(String[] args) throws Exception {\n        String st = \"http://www.kmzlinks.com/redirect.asp?id=113&file=HeartShapedIsland.kmz\";\n        URL url = new URL(st);\n        InputStream fis = null;\n        if (\"file\".equals(url.getProtocol())) fis = new FileInputStream(url.getFile()); else if (\"http\".equals(url.getProtocol())) fis = url.openStream();\n        ZipInputStream zis = new ZipInputStream(fis);\n        ZipEntry entry;\n        while ((entry = zis.getNextEntry()) != null) {\n            System.out.println(\"Extracting: \" + entry);\n            int count;\n            byte data[] = new byte[BUFFER];\n            FileOutputStream fos = new FileOutputStream(entry.getName());\n            BufferedOutputStream dest = new BufferedOutputStream(fos, BUFFER);\n            while ((count = zis.read(data, 0, BUFFER)) != -1) dest.write(data, 0, count);\n            dest.flush();\n            dest.close();\n        }\n        zis.close();\n    }\n", "code2": "    @Test\n    public void testCopyUnknownSize() throws IOException {\n        final InputStream in = new ByteArrayInputStream(TEST_DATA);\n        final ByteArrayOutputStream out = new ByteArrayOutputStream(TEST_DATA.length);\n        final int cpySize = ExtraIOUtils.copy(in, out, (-1));\n        assertEquals(\"Mismatched copy size\", TEST_DATA.length, cpySize);\n        final byte[] outArray = out.toByteArray();\n        assertArrayEquals(\"Mismatched data\", TEST_DATA, outArray);\n    }\n", "label": 1, "substitutes": {"st": ["ast", "d", "ust", "St", "ste", "step", "ld", "str", "sw", "ost", "store", "std", "start", "stable", "sm", "t", "service", "stra", "ist", "nd", "ST", "sth", "sta", "set", "sp", "sty", "est", "th", "ft", "rt", "www", "sts", "rest", "inst", "tt", "stri", "stream", "sh", "sn", "se"], "url": ["build", "sl", "gl", "address", "fl", "string", "ret", "Url", "file", "li", "abs", "str", "nl", "mail", "char", "browser", "ls", "shell", "r", "dl", "null", "pl", "ll", "host", "ssl", "html", "location", "link", "f", "uri", "rel", "base", "URL", "cl", "web", "loc", "ur", "ch", "github", "cert", "impl", "client", "bel", "hl", "http", "www", "rest", "addr", "mount", "el", "rect", "l", "domain", "ref", "il", "ul"], "fis": ["feois", "Fos", "Fais", "tais", " fisl", "efis", "flis", " f\u00eds", "xfois", "ufis", "xfis", "fais", "ufisl", "fli", "xfi", "feier", " fiss", "feis", "Fois", " fi", "tos", "tiss", "fois", "fiss", "Fis", "fisl", "fei", "f\u00eds", "efi", "fliss", "ufi", " fais", "ef\u00eds", "Fiss", "efiss", "flisl", "fier", "tis", "fi", "uf\u00eds", "xfier", "ufiss", "Fier", "Fi"], "zis": ["zhIs", "czisa", "zisa", "zhes", "zhis", "zeniss", "zipisin", " zits", "zisin", "ozisa", "zhisin", "fris", "fits", "ozes", "zenris", "ziss", "zos", "zipos", "zisi", " zris", " zos", "zIs", " zisa", "zits", "ozits", "fiss", "ozis", "czis", "zipIs", "zipes", "zris", " zisi", " ziss", "ozIs", "czIs", "ozisin", "fisi", "zipis", "zenis", "czits", "zipits", "zes", " zIs", "zenisi"], "entry": ["system", "jar", "item", "card", "cell", "match", "log", "field", "member", "ce", "Entry", "char", "e", "obj", "event", "nt", "be", "row", "record", "attribute", "index", "way", "null", "word", "office", "pattern", "jo", "zip", "inter", "link", "valid", "def", "form", "result", "zo", "out", "enter", "tmp", "entity", "element", "sp", "ie", "ry", "name", "comment", "line", "source", "key", "or", "chain", "list", "fr", "ent", "info", "existent", "de", "se"], "count": ["err", "force", "cell", "batch", "number", "match", "ctr", "ount", "amount", "nb", "length", "char", "t", "start", "nt", "num", "child", "max", "current", "total", "len", "call", "index", "c", "n", "check", "code", "cc", "base", "iter", "ct", "buffer", "page", "counter", "end", "found", "acc", "ch", "core", "read", "ind", "name", "Count", "comment", "cont", "add", "sum", "depth", "last", "size"], "data": ["text", "d", "sample", "bytes", "batch", "number", "ata", "dat", "string", "step", "part", "length", "output", "good", "n", "mu", "block", "mem", "area", "reason", "def", " DATA", "buffer", "table", "message", "result", "format", "raw", "out", "all", "name", "zero", "source", "value", "image", "chain", "done", "DATA", "cache", "json", "next", "buf", "bin", "size"], "fos": ["Fos", "fooss", "fios", "woss", " fOS", "fol", "Fops", "foss", "wOS", "fiol", "fioss", "his", "fops", "hoss", "Fol", "foops", "foos", "wis", "hos", "fOS", "fiops", "hOS", "fool", "wos", " foss", "Foss"], "dest": ["master", "send", "foreign", "trans", "them", "decl", "dat", "des", "member", "parent", "gate", "crit", "src", "cat", "test", "std", "Dest", "nt", "gest", "ptr", "temp", "nd", "output", "target", "pipe", "pas", "nom", "way", "mem", "det", "desc", "comp", "loc", "out", "est", "result", "usr", "writer", "exp", "transfer", "dist", "source", "cont", "rest", "done", "comb", "sum", "bin", "origin", "coord", "dc"]}}
{"id1": "15580610", "id2": "14464131", "code1": "    @Override\n    public void trainClassifier(File dir, String... args) throws Exception {\n        String[] command = new String[args.length + 3];\n        command[0] = this.getCommand();\n        System.arraycopy(args, 0, command, 1, args.length);\n        command[command.length - 2] = new File(dir, \"training-data.libsvm\").getPath();\n        command[command.length - 1] = new File(dir, this.getModelName()).getPath();\n        Process process = Runtime.getRuntime().exec(command);\n        IOUtils.copy(process.getInputStream(), System.out);\n        IOUtils.copy(process.getErrorStream(), System.err);\n        process.waitFor();\n    }\n", "code2": "    public static void main(String[] args) {\n        try {\n            URL url = new URL(\"http://hostname:80\");\n            URLConnection conn = url.openConnection();\n            for (int i = 0; ; i++) {\n                String headerName = conn.getHeaderFieldKey(i);\n                String headerValue = conn.getHeaderField(i);\n                if (headerName == null && headerValue == null) {\n                    break;\n                }\n                if (headerName == null) {\n                }\n            }\n        } catch (Exception e) {\n        }\n    }\n", "label": 0, "substitutes": {"trainClassifier": [" trainObjectizer", " trainObjectifer", " runclassifer", " trainClassizer", " runClassifier", " trainModifer", " trainObjectification", " trainClassifer", " trainclassification", " runClassifer", " trainclassizer", " runclassifier", " trainObjectifier", " trainClassification", " runclassizer", " trainclassifer", " trainModifier", " trainModizer", " trainModification", " runClassification", " trainclassifier", " runClassizer", " runclassification"], "dir": ["direct", "local", "d", "path", "module", "dr", "lib", "log", "io", "src", "disk", "output", "url", "dl", "null", "md", "base", "config", "prefix", "dd", "loc", "root", "files", "tmp", "doc", "Dir", "db", " directory", "rad", "dist", "data", "folder", "report", "done", "addr", "dm", "pkg", "ir", "directory", "pos", "grad", "DIR", "this", "wd", "div"], "command": ["text", "mac", "search", "send", "force", "function", "description", "operation", "binary", "sequence", "string", "delete", "multiple", "component", "program", "three", "event", "position", "method", "history", "relative", "control", "attribute", "button", "shell", "content", "call", "menu", "query", "connection", "pattern", "condition", "statement", "clear", "link", "volume", "initial", "base", "expression", "config", "form", "buffer", "paste", "message", "argument", "set", "sudo", "column", "Command", "power", "document", "template", "pretty", "shift", "comment", "application", "requisite", "key", "password", "chain", "and", "group", "execute", "response", "mpeg", "request", "directory", "script", "cmd", "option", "display", "archive"], "length": ["space", "build", "pieces", "factor", "number", "Length", "height", "given", "sequence", "append", "transform", "level", "count", "ength", "position", "creator", "needs", "max", "total", "limit", "ENGTH", "deep", "len", "upper", "duration", "bus", "volume", "dump", "form", "loc", "end", "diff", "power", "capacity", "last", "shift", "fleet", "load", "value", "distance", "shape", "pad", "prototype", "SIZE", "depth", "character", "available", "full", "strip", "now", "ctors", "collection", "size"], "process": ["system", "search", "function", "p", "post", "term", "channel", "complex", "component", "program", "processor", "event", "start", "method", "class", "position", "service", "in", "record", "run", "output", "network", "call", "cp", "view", "thread", "check", "node", "session", "worker", "status", "console", "link", "connect", "result", "message", "pid", "flow", "Process", "parse", "object", "processing", "load", "exec", "use", "mpeg", "pp", "handle", "request", "task", "script", "cmd", "proc", "display"]}}
{"id1": "3046085", "id2": "22442270", "code1": "    public Song(String s) {\n        StringTokenizer tokenizer = new StringTokenizer(s, \";\");\n        free = false;\n        title = tokenizer.nextToken();\n        artist = tokenizer.nextToken();\n        location = tokenizer.nextToken();\n        rating = Integer.parseInt(tokenizer.nextToken());\n        overplay = Integer.parseInt(tokenizer.nextToken());\n        String temp = tokenizer.nextToken();\n        tokenizer = new StringTokenizer(temp, \",[] \");\n        tags = new ArrayList<String>();\n        while (tokenizer.hasMoreTokens()) {\n            tags.add(tokenizer.nextToken());\n        }\n        byte[] bytes = new byte[40];\n        try {\n            MessageDigest hasher = MessageDigest.getInstance(\"SHA-1\");\n            hasher.update(title.getBytes());\n            hasher.update(artist.getBytes());\n            bytes = hasher.digest();\n        } catch (Exception e) {\n            System.out.println(e);\n        }\n    }\n", "code2": "            @Override\n            public void handledRun() throws Throwable {\n                try {\n                    URL url = new URL(ONLINE_CLIENT_DATA + \"gamedata.xml\");\n                    BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream()));\n                    int lastversion = 0;\n                    String readHeader1 = br.readLine();\n                    String readHeader2 = br.readLine();\n                    String[] parts = readHeader2.split(\" \");\n                    lastversion = new Integer(parts[1]);\n                    GameDatabase.loadVersion();\n                    if (GameDatabase.version < lastversion) {\n                        Logger.log(LogTypes.LOG, \"Downloading new gamedata\");\n                        BufferedOutputStream bo = null;\n                        File destfile = new File(GameDatabase.dataFilePath);\n                        if (!destfile.createNewFile()) {\n                            destfile.delete();\n                            destfile.createNewFile();\n                        }\n                        bo = new BufferedOutputStream(new FileOutputStream(destfile));\n                        bo.write((readHeader1 + \"\\n\").getBytes());\n                        bo.write((readHeader2 + \"\\n\").getBytes());\n                        int readedbyte;\n                        while ((readedbyte = br.read()) != -1) {\n                            bo.write(readedbyte);\n                        }\n                        bo.flush();\n                        try {\n                            br.close();\n                            bo.close();\n                        } catch (Exception ex) {\n                            Logger.log(ex);\n                        }\n                    }\n                } catch (java.net.UnknownHostException unknownHost) {\n                    Logger.log(\"Sourceforge is down, cannot update gamedata\");\n                } catch (Exception e) {\n                    JOptionPane.showMessageDialog(FrameOrganizer.getClientFrame(), \"The gamedata is outdated, but Coopnet couldn't update it!\", \"Gamedata outdated\", JOptionPane.INFORMATION_MESSAGE);\n                    throw e;\n                } finally {\n                    GameDatabase.loadVersion();\n                    GameDatabase.load(\"\", GameDatabase.dataFilePath);\n                    GameDatabase.detectGames();\n                }\n            }\n", "label": 0, "substitutes": {"s": ["text", "js", "v", "string", "h", "p", "str", "b", "is", "t", "e", "S", "ls", "strings", "gs", "r", "rs", "c", "n", "i", "a", "m", "f", "ns", "ps", "q", " ts", "its", "name", "data", "g", "es", "ss", "os", "w"], "tokenizer": ["templateization", "okenizable", "operatorisher", "nodeizer", "Tokenized", "operatorizer", " tokener", "dateizer", "tokenization", "toolizers", "toolzer", "nodeized", " tokenner", "tokenazer", "Tokenzer", "operatorized", "tokenize", "okenazer", "operatorazer", "terminize", "tokener", "okenitor", "okeniser", "templateer", "webizable", "tokenzie", "kinize", " tokenizable", "templateizer", "okenizer", "Tokenization", "okenzie", "kinizer", "tokeniser", "webizer", "webization", "okenzer", "tokenitor", "okenner", "terminazer", "operatoriter", "terminizable", "kinizers", "templateisher", "dateizable", "Tokenize", "nodeisher", " tokenization", "okeniner", "serialzer", "webize", "tokenisher", " tokenzer", "terminizer", "tokenener", "okeniter", "Tokenizers", " tokenoser", "Tokenener", "okenifier", "tokenizable", "Tokenizer", "tokenner", "templateizable", "operatorzie", "Tokener", "tokeniter", "webisher", "datezer", "valueisher", "toolizer", "valueizer", "okenoser", "operatoriser", "valueoser", "okenener", "tokenzer", "valueizable", " tokenifier", "operatoriner", "toolize", "webitor", "tokeniner", "terminiser", "serializer", "tokenoser", " tokeniner", "nodeization", "okenisher", " tokenener", "dateize", "tokenizers", "serializable", "Tokenisher", "Tokenner", "kinzer", "terminisher", "tokenized", "terminization", "Tokenifier", "terminitor", " tokenzie", " tokenisher", "okenize", "serialize", "operatorization", "tokenifier", "terminiter", "templatezer"], "title": ["text", "description", "holiday", "term", "id", "tag", "part", "t", "position", "Title", "phrase", "total", "itled", "filename", "primary", "label", "profile", "summary", "meta", "article", "note", "prefix", "table", "lead", "art", "horse", "name", "template", "story", "source", "important", "metadata", "version", "tip", "type", "displayText", "itle", "author"], "artist": ["item", "picture", "player", "Artist", "adult", "tag", "part", "component", "gallery", "author", "position", "audio", "username", "music", "attribute", "rank", "person", "assisted", "volume", "album", "track", "voice", "project", "user", "art", "chapter", "associated", "object", "photo", "source", "folder", "image", "metadata", "directory", "archive", "creator", "song"], "location": ["local", "address", "place", "description", "near", "gallery", "position", "zone", "phone", "time", "area", "language", "Location", "feature", "loc", "activity", "reference", "media", "direction", "comment", "folder", "source", "shape", "directory", "layout", "translation", "origin", "country"], "rating": ["race", "erate", "weight", "genre", "credit", "Rating", "scoring", "ranking", "movie", "scale", "music", "frequency", "library", "rates", "rank", "rate", "profile", "meta", "boarding", "fps", "rated", "score", "media", "confidence", "playing", "metadata", "training", "average"], "overplay": ["Overplay", "overgrade", " overgrade", "appcast", "Overcast", "Override", "overcast", " override", "appride", "appgrade", " overcast", "appplay", "Overgrade", "override"], "temp": ["fake", "local", "created", "term", "generated", "orig", "test", "tem", "current", "output", "time", "null", "Temperature", "Temp", "mem", " Temp", "partial", "stem", "base", "tm", "set", "prefix", "buffer", "encrypted", "loc", "tmp", "name", "template", "source", "texture", "key", "memory", "empty", "cache", " temporary", "porary", "type", "unit", "emp", "now", "flash", " tmp"], "tags": ["assets", "flags", "packages", "lists", "balls", "terms", "groups", "weights", "Tags", "strings", "lights", "fields", "comments", "links", "names", "nets", "reports", "stats", "images", "pages", "dates", "options", "parts", "files", "relations", "ags", "lines", "styles", "atts", "keys", "details", "stars", "marks", "tracks", "words", "types", "thumbnails"], "bytes": ["terms", "groups", "ids", "fields", "comments", "blocks", "bits", "gs", "tes", "Bytes", "len", "images", "pages", "bps", "frames", "parts", "bs", "files", "videos", "vals", "ips", "services", "lines", "loads", "keys", "seconds", "uploads", "rows", "words", "mb", "es", "classes", "gb", "gets", "values"], "hasher": ["hasDR", "hashers", "hydcher", "HasDR", "hydger", "hasHer", "hadhed", " haster", "Hasher", " hader", "hydHer", "hasger", "hadher", "Hashed", "haveter", "Haspher", " haser", "hater", "haveest", "hadHer", "hascher", " hasDR", "hahers", " hasger", " hascher", " haspher", "Haster", " hadDR", "hashed", "haser", "haest", "hadger", " hashed", "hadter", " hasest", "havehers", "haspher", "haveher", "hadcher", " hasHer", "hadpher", " hadher", " hadter", "Haser", "hasest", " hashers", "haster", "haher", "hydher"]}}
{"id1": "18370075", "id2": "2807585", "code1": "    public static byte[] createPasswordDigest(String password, byte[] salt) throws Exception {\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(salt);\n        md.update(password.getBytes(\"UTF8\"));\n        byte[] digest = md.digest();\n        return digest;\n    }\n", "code2": "    private static String encodeMd5(String key) {\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            md.reset();\n            md.update(key.getBytes());\n            byte[] bytes = md.digest();\n            String result = toHexString(bytes);\n            return result;\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n", "label": 1, "substitutes": {"createPasswordDigest": ["createPasswordDests", "createPasswordDigum", "createPasswordDum", "createPasswordDester", "createPassworddigest", "createPasswordDest", "createPassworddigum", "createPassworddigests", "createPasswordDigests", "createPassworddigester", "createPasswordDigester"], "password": ["secret", "address", "description", "string", "hash", "phrase", "Password", "shadow", "auth", "username", "attribute", "email", "word", "session", "pattern", "present", "padding", "message", "database", "pass", "user", "name", "sword", "data", "reset", "value", "key", "hello", "response", "login", "token", "words", "wd", "entry", "command"], "salt": [" sig", "Saint", "Save", "sesave", "sesALT", "sesalt", "tALT", "talt", "Salt", "sig", "taint", "sesig", "palt", "Sol", "pALT", "sol", "pol", "Sig", "saint", "tol", "sALT", "paint", "save", " save", "SALT", " sALT"], "md": ["d", "mc", "js", "dr", "pdf", "pd", "ld", "mt", "amd", "mod", "mode", "di", "sm", "nt", "nd", "strong", "sam", "red", "det", "ad", "m", "pm", "desc", "def", "sd", "ms", "dd", "ct", "mand", "rm", "td", "hd", "mm", "ind", "mk", "cd", "od", "bd", "add", "mn", "and", "dm", "metadata", "mp", "mg", "der", "df", "mb", "cmd", "MD"], "digest": ["digute", "mdested", "digested", " digEST", "mdest", "DigEST", "mdEST", "Digest", "digum", "mdester", "mdum", "designest", "degesting", "digEST", "Digute", "mdesting", " digidate", "signidate", "signute", "mdist", "Digist", "degester", "digidate", "designesting", "designested", " digist", " digum", "Digum", "digist", "signum", "degest", "designester", "digesting", "signest", "digester", " digute", "degested", "Digidate"]}}
{"id1": "5977352", "id2": "10451698", "code1": "    public static void copyFile(File src, File dest, int bufSize, boolean force) throws IOException {\n        if (dest.exists()) if (force) dest.delete(); else throw new IOException(\"Cannot overwrite existing file: \" + dest.getName());\n        byte[] buffer = new byte[bufSize];\n        int read = 0;\n        InputStream in = null;\n        OutputStream out = null;\n        try {\n            in = new FileInputStream(src);\n            out = new FileOutputStream(dest);\n            while (true) {\n                read = in.read(buffer);\n                if (read == -1) break;\n                out.write(buffer, 0, read);\n            }\n        } finally {\n            if (in != null) try {\n                in.close();\n            } finally {\n                if (out != null) out.close();\n            }\n        }\n    }\n", "code2": "    private void copy(File source, File destinationDirectory) throws IOException {\n        if (source.isDirectory()) {\n            File newDir = new File(destinationDirectory, source.getName());\n            newDir.mkdir();\n            File[] children = source.listFiles();\n            for (int i = 0; i < children.length; i++) {\n                if (children[i].getName().equals(\".svn\")) {\n                    continue;\n                }\n                copy(children[i], newDir);\n            }\n        } else {\n            File newFile = new File(destinationDirectory, source.getName());\n            if (newFile.exists() && source.lastModified() == newFile.lastModified()) {\n                return;\n            }\n            FileOutputStream output = new FileOutputStream(newFile);\n            FileInputStream input = new FileInputStream(source);\n            byte[] buff = new byte[2048];\n            int read = 0;\n            while ((read = input.read(buff)) > 0) {\n                output.write(buff, 0, read);\n            }\n            output.flush();\n            output.close();\n            input.close();\n        }\n    }\n", "label": 1, "substitutes": {"copyFile": ["copyfile", "cpFiles", " cpFiles", "cpFolder", " cpFolder", " cpfile", "copyFiles", " copyfile", " copyFolder", "cpFile", " cpFile", "cpfile", "copyFolder", " copyFiles"], "src": ["sec", "sr", "sq", "cur", "ctr", "orig", "st", "start", "SOURCE", "from", "rs", "img", "sit", "sf", "rel", "sc", "Source", "sb", "loc", "ipl", "init", "usr", "req", "via", "input", "sys", "source", "rest", "rl", "cont", "rc", "ser", "ins", "pkg", "inst"], "dest": ["master", "foreign", "trans", "them", "decl", "dir", "dat", "txt", "cat", "parent", "orig", "test", "st", "Dest", "nt", "de", "target", "copy", "tif", "nom", "cp", "null", "good", "port", "gt", "sit", "origin", "opt", "desc", "result", "th", "est", "sp", "tmp", "loc", "comp", "usr", " dst", "nw", "mk", "name", "spec", "etc", "end", "dist", "rest", "source", "cont", "self", "comb", "tom", "del", "none", "temp", "coord", "lit"], "bufSize": ["bufSIZE", "bufNum", "ufSIZE", " bufLen", "bcLen", " bufferSize", "fontNum", " bufNum", "ufNum", "bcSize", "fontSIZE", "bcSIZE", "fontSize", "ufLen", "bcNum", " bufferNum", "ufSize", " bufferSIZE", "bufLen", " bufSIZE"], "force": ["allow", "send", "apply", "forge", "always", "ce", "replace", "print", "only", "remote", "fill", "rule", "forcing", " Force", "forces", "safe", "check", "write", "quote", "auto", "kill", "require", "close", "f", "base", "form", "stall", "fast", "draw", "forced", "Force", "frame", "error", "reset", "use", "flag", "raise", "enable", "default", "cmd", "co", "command"], "buffer": ["text", "sample", "batch", "number", "binary", "sequence", "variable", "queue", "print", "length", "history", "row", "stack", "phrase", "device", "total", "limit", "attribute", "view", "word", "library", "block", "mem", "quote", "base", "table", "paste", "buff", "message", "tree", "document", "frame", "template", "comment", "memory", "shape", "window", "cache", "buf", "Buffer", "temp", "display", "command"], "read": ["text", "allow", "send", "scan", "height", "str", "print", "before", "length", "t", "count", "start", "bind", "row", "record", "fill", "run", "open", "reader", "len", "r", "index", "range", "word", "check", "query", "write", "i", "feed", "wait", "valid", "through", "iter", "set", "pe", "connect", "end", "READ", "get", "raw", "reads", "pass", "q", "req", "parse", "push", "input", "ind", "readable", "load", "im", "give", "add", "reading", "Read", "hello", "need", "shape", "request", "hold", " Read", "next", "stream", "find", "w", "size"], "in": ["local", "ln", "irm", "ic", "en", "sin", "is", "inf", "t", "per", "up", "internal", "al", "cin", "from", "mi", "ini", "IN", "inc", "i", "check", "inner", "n", "inside", "m", "ar", "on", "o", "iter", "ma", "din", "get", "init", "cn", "doc", "all", "input", "isin", "ind", "ie", "mm", "gin", "include", "im", "In", "source", "or", "ins", "rin", "l", "it", "info", "bin", "ain", "co", "con", "inn"], "out": ["ln", "v", "cos", "op", "again", "at", "outs", "file", "not", "io", "oe", "b", "t", "obj", "conv", "ot", "nt", "up", "aos", "output", "flush", "to", "n", "ex", "write", "inner", "gt", "on", "outer", "o", "ns", "br", "net", "end", "oss", "conn", "cn", "ch", "all", "writer", "om", "mit", "client", "sys", "con", "OUT", "one", "or", "Out", "list", "l", "sum", "cache", "it", "g", "ent", "cmd", "ou", "ne", "can", "co", "os"]}}
{"id1": "9096314", "id2": "21979714", "code1": "    private void handleNodeLostService(long eventID, long nodeID, String ipAddr, long serviceID, String eventTime) {\n        Category log = ThreadCategory.getInstance(OutageWriter.class);\n        if (eventID == -1 || nodeID == -1 || ipAddr == null || serviceID == -1) {\n            log.warn(EventConstants.NODE_REGAINED_SERVICE_EVENT_UEI + \" ignored - info incomplete - eventid/nodeid/ip/svc: \" + eventID + \"/\" + nodeID + \"/\" + ipAddr + \"/\" + serviceID);\n            return;\n        }\n        Connection dbConn = null;\n        try {\n            dbConn = DatabaseConnectionFactory.getInstance().getConnection();\n            if (openOutageExists(dbConn, nodeID, ipAddr, serviceID)) {\n                log.warn(\"\\'\" + EventConstants.NODE_LOST_SERVICE_EVENT_UEI + \"\\' for \" + nodeID + \"/\" + ipAddr + \"/\" + serviceID + \" ignored - table already  has an open record \");\n            } else {\n                PreparedStatement getNextOutageIdStmt = dbConn.prepareStatement(OutageManagerConfigFactory.getInstance().getGetNextOutageID());\n                long outageID = -1;\n                ResultSet seqRS = getNextOutageIdStmt.executeQuery();\n                if (seqRS.next()) {\n                    outageID = seqRS.getLong(1);\n                }\n                seqRS.close();\n                try {\n                    dbConn.setAutoCommit(false);\n                } catch (SQLException sqle) {\n                    log.error(\"Unable to change database AutoCommit to FALSE\", sqle);\n                    return;\n                }\n                PreparedStatement newOutageWriter = null;\n                if (log.isDebugEnabled()) log.debug(\"handleNodeLostService: creating new outage entry...\");\n                newOutageWriter = dbConn.prepareStatement(OutageConstants.DB_INS_NEW_OUTAGE);\n                newOutageWriter.setLong(1, outageID);\n                newOutageWriter.setLong(2, eventID);\n                newOutageWriter.setLong(3, nodeID);\n                newOutageWriter.setString(4, ipAddr);\n                newOutageWriter.setLong(5, serviceID);\n                newOutageWriter.setTimestamp(6, convertEventTimeIntoTimestamp(eventTime));\n                newOutageWriter.executeUpdate();\n                newOutageWriter.close();\n                try {\n                    dbConn.commit();\n                    if (log.isDebugEnabled()) log.debug(\"nodeLostService : \" + nodeID + \"/\" + ipAddr + \"/\" + serviceID + \" recorded in DB\");\n                } catch (SQLException se) {\n                    log.warn(\"Rolling back transaction, nodeLostService could not be recorded  for nodeid/ipAddr/service: \" + nodeID + \"/\" + ipAddr + \"/\" + serviceID, se);\n                    try {\n                        dbConn.rollback();\n                    } catch (SQLException sqle) {\n                        log.warn(\"SQL exception during rollback, reason\", sqle);\n                    }\n                }\n            }\n        } catch (SQLException sqle) {\n            log.warn(\"SQL exception while handling \\'nodeLostService\\'\", sqle);\n        } finally {\n            try {\n                if (dbConn != null) dbConn.close();\n            } catch (SQLException e) {\n                log.warn(\"Exception closing JDBC connection\", e);\n            }\n        }\n    }\n", "code2": "    @ActionMethod\n    public void list() throws IOException {\n        final URL url = new URL(\"http://127.0.0.1:\" + testPort + \"/list?version=1000\");\n        final HttpURLConnection con = (HttpURLConnection) url.openConnection();\n        con.setRequestProperty(Http11Header.AUTHORIZATION, \"Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==\");\n        con.setRequestProperty(Http11Header.WWW_AUTHENTICATE, \"Basic realm=\\\"karatasi\\\"\");\n        final InputStream in = con.getInputStream();\n        final byte[] buf = new byte[4096];\n        textArea.setText(\"\");\n        for (int bytesRead; (bytesRead = in.read(buf)) != -1; ) {\n            textArea.append(new String(buf, 0, bytesRead));\n        }\n    }\n", "label": 0, "substitutes": {"handleNodeLostService": ["handleNodeChangedEvent", "handleServiceMissingService", "handleServiceMissingEvent", "handleNodeMissingEvent", "handleNodelostServices", "handleServiceLostEvent", "handleNodeMissingServices", "handleNodeChangedServices", "handleNodelostService", "handleServiceLostServices", "handleServiceLostService", "handleNodeMissingService", "handleNodeChangedService", "handleServiceMissingServices", "handleNodeLostEvent", "handleNodeLostServices", "handleNodelostEvent"], "eventID": ["ventId", "serviceDate", "EventTime", "nodeId", "eventDate", "nodeType", "EventId", "ventType", "eventData", "nodeData", "eventJS", "serviceType", " eventData", "EventName", " eventName", "EventJS", "eventId", "EventUID", "eventUID", " eventDate", "nodeUID", "ventID", "EventID", "ventJS", " eventUID", "serviceTime", "eventType", "eventName", "ventData", " eventType", "EventType", "ventName", " eventJS", "EventDate", " eventId"], "nodeID": ["processName", "NodeId", "nodeId", "nodeName", " nodeIDs", "serviceIDs", "nodeType", " nodeName", "serviceid", "stationType", "stationIP", "odeId", " nodeType", "NodeName", "nodeIDs", "processId", "stationId", "eventId", "nodeIP", "odeIP", "stationName", "componentid", "componentId", "NodeID", "componentID", "connectionId", "stationID", "serviceId", " nodeIP", "eventType", "NodeIDs", " nodeId", "processID", "nodeid", "connectionID", "odeID", "connectionid"], "ipAddr": [" ipAdder", " ipAddn", "ipAddressrs", "ipaddru", "ipADr", "ipADri", "ipAddressr", " ipAddressr", "ipaddn", "ipAddru", " ipaddr", "ipAttacher", "ipConnectr", " ipAddri", "ipadder", "ipaddAddress", "ipaddrs", "ipAttachr", "ipStartru", "ipConnectAddress", "ipADn", " ipAddrs", "ipAttr", "ipAtter", "ipAddressn", "ipStartrs", " ipAddressrs", " ipAddressru", " ipaddp", " ipAttr", "ipAddressru", " ipAddru", "ipAdder", "ipAttrs", " ipaddAddress", "ipConnectrs", "ipAddAddress", "ipAddressp", "ipaddr", "ipAddrs", "ipConnectp", "ipaddri", "ipAttachrs", "ipAddn", " ipAttrs", " ipAddressp", "ipAttachru", " ipAddAddress", "ipAttn", "ipADrs", "ipStartp", "ipAddri", "ipStartr", "ipAddp", " ipAttn", "ipaddp", " ipAddp", "ipAddresser", " ipAtter", " ipaddrs"], "serviceID": ["resourceLAN", "ServiceName", "moduleID", "moduleNAME", "ServiceNAME", "serviceURL", "ServiceType", "servId", " serviceName", "serviceType", "ServiceID", "servID", "serviceLAN", "moduleType", "resourceId", "serviceName", "eventId", "ServiceId", "interfaceNAME", " serviceNAME", "servURL", "serviceNAME", "serviceId", "servNAME", "resourceURL", "interfaceURL", "eventType", " serviceType", "eventName", "moduleName", " serviceURL", "resourceID", " serviceId", "servLAN", "interfaceLAN", "interfaceID", " serviceLAN"], "eventTime": [" eventType", "EventTime", "ventTime", "EventType", "eventTS", "ventID", "ventTS", "EventID", "ventType", " eventTS", "eventType", "EventTS"], "log": ["blog", "at", "lock", "en", "pel", "cat", "tag", "crit", "ger", "mail", "debug", "print", "prot", "t", "be", "event", "msg", "row", "bug", "al", "scale", "conf", "url", "email", "c", "ex", "ext", "category", "pl", "zip", "link", "LOG", "ar", "ge", "Log", "base", "config", "cf", "ct", "set", "net", "note", "low", "enter", "out", "iam", "og", "db", "lo", "util", "tab", "error", "cont", "le", "report", "alert", "and", "use", "or", "l", "default", "xml", " logger", "it", "json", "cache", "cal", "sql", "org", "entry", "w", "gob"], "dbConn": ["bCon", "cbConnect", "dbconn", "gbConnection", " dbObj", "bbConn", "gbCon", "gbConn", "DBCon", "webCon", "dbConnect", " dbSys", "DbObj", "dbConnection", "dbObj", "webConn", " dbConnect", "DbConnection", " dbTx", "bbCon", "cbCon", "gbconn", "DbCon", "DBConn", " dbConnection", "DbConn", "webConnection", "DbSys", "sbConnect", "DBSys", "bConnect", "DBObj", "sbCon", " dbconn", "DBTx", "bConn", "cbConnection", "sbConnection", "dbSys", "bbConnection", "bbConnect", "DbTx", "webObj", " dbCon", "cbConn", "sbconn", "dbCon", "dbTx", "sbConn", "bConnection"], "getNextOutageIdStmt": ["getNextOutageIDstMT", "getNextOutageIdstMT", "getNextOutageIdStmm", "getNextOutageIdStMT", "getNextOutageIdStm", "getNextOutageIdStmb", "getNextOutageIdstmm", "getNextOutageIDstm", "getNextOutageIDStmt", "getNextOutageIdSTMT", "getNextOutageIDStmb", "getNextOutageIDstmb", "getNextOutageIdSTm", "getNextOutageIDstmt", "getNextOutageIDstmm", "getNextOutageIdstmb", "getNextOutageIdSTmb", "getNextOutageIdstm", "getNextOutageIDStmm", "getNextOutageIdstmt", "getNextOutageIDStm", "getNextOutageIDStMT", "getNextOutageIdSTmm", "getNextOutageIdSTmt"], "outageID": ["OutagementWriter", "OutagementIT", "OutageET", "outagementET", "outageid", "outagateId", "outagementIT", "outAGEId", "outancyIndex", "outagementWriter", "outagerID", "OutageIndex", "outancyId", "OutagementET", "outageET", "outagIndex", "outAGEID", "OutagementID", "outagementIndex", "outrageUID", "outagId", "OutagementId", "outancyET", "outagerId", "outageId", "Outageid", "outagET", "outagementId", "outageUID", "outagateID", "outAGEid", "OutageUID", "OutageID", "outagementid", "OutageWriter", "outrageId", "outagementID", "outagID", "outagateWriter", "Outagementid", "OutagementIndex", "outrageid", "outagerIT", "OutagementUID", "outancyID", "OutageId", "OutageIT", "outAGEUID", "outageIndex", "outageIT", "outagementUID", "outageWriter", "outagateIT", "outagerWriter", "outrageID"], "seqRS": ["nextRS", "sequencers", "sequenceRS", "sequencePS", "nextDS", "nextRs", "reqRS", "descRES", "descrs", " seqSR", "descRS", "reqSR", " seqrs", "sequenceRs", "descRs", " seqDS", "sqRS", " seqPS", "sequRS", "seqrs", "sequenceDS", "sqSR", "eqRs", "reqrs", "sqRs", "seqRES", "eqrs", "seqDS", "nextPS", "reqRES", "sequenceRES", "eqRS", "seqRs", "sequenceSR", "seqSR", "sqWS", " seqRs", " seqWS", "sequWS", " seqRES", "seqPS", "seqWS", "sequSR", "sequRs", "eqRES"], "newOutageWriter": ["newOutaceWriting", "newOutancyWriting", "newOutagaReader", "newOutagementEntry", "newoutagementwriter", "newOutagerReader", "newOutagaWriter", "newoutagewriter", "newIntageReader", "newIntageWR", "newoutageWriter", "newoutagWriter", "newOutaceWriter", "newOutagementReader", "newIntagementEntry", "newoutanceWrite", "newoutageEditor", "newoutagEntry", "newOutrueWriter", "newOutagwriter", "newOutageWrite", "newIntagementWriting", "newOutagesEntry", "newoutagementWriter", "newIntageWriter", "newoutancewriter", "newIntagementWriter", "newOutagementWriting", "newOutagesEditor", "newoutageEntry", "newoutanceEditor", "newOutaceEntry", "newOutancyWrite", "newOutagesWrite", "newOutagerWrite", "newOutancyWriter", "newOutagEntry", "newOutagaWR", "newIntageEntry", "newOutagesWriter", "newOutanceEditor", "newoutagementEntry", "newIntagementWrite", "newOutagementWrite", "newoutageWrite", "newOutageswriter", "newIntageWrite", "newoutagWrite", "newoutanceWriter", "newOutagementWR", "newoutagementWrite", "newIntagementReader", "newOutrueWrite", "newOutagewriter", "newoutagwriter", "newOutagerWR", "newOutancyEntry", "newOutanceWriter", "newOutaceWrite", "newOutageEntry", "newOutageEditor", "newOutageWriting", "newOutrueEditor", "newOutagementWriter", "newOutageReader", "newOutruewriter", "newOutagWriter", "newOutagementwriter", "newOutacewriter", "newIntagementWR", "newOutagaWrite", "newOutagWrite", "newOutancewriter", "newOutagerWriter", "newIntageWriting", "newOutageWR", "newOutanceWrite"]}}
{"id1": "9805906", "id2": "15262411", "code1": "    public static boolean dump(File source, File target) {\n        boolean done = false;\n        try {\n            InputStream is = new BufferedInputStream(new FileInputStream(source));\n            OutputStream os = new BufferedOutputStream(new FileOutputStream(target));\n            while (is.available() > 0) {\n                os.write(is.read());\n            }\n            os.flush();\n            os.close();\n            is.close();\n            return true;\n        } catch (IOException e) {\n        }\n        return done;\n    }\n", "code2": "    String fetch_pls(String pls) {\n        InputStream pstream = null;\n        if (pls.startsWith(\"http://\")) {\n            try {\n                URL url = null;\n                if (running_as_applet) {\n                    url = new URL(getCodeBase(), pls);\n                } else {\n                    url = new URL(pls);\n                }\n                URLConnection urlc = url.openConnection();\n                pstream = urlc.getInputStream();\n            } catch (Exception ee) {\n                System.err.println(ee);\n                return null;\n            }\n        }\n        if (pstream == null && !running_as_applet) {\n            try {\n                pstream = new FileInputStream(System.getProperty(\"user.dir\") + System.getProperty(\"file.separator\") + pls);\n            } catch (Exception ee) {\n                System.err.println(ee);\n                return null;\n            }\n        }\n        String line = null;\n        while (true) {\n            try {\n                line = readline(pstream);\n            } catch (Exception e) {\n            }\n            if (line == null) {\n                break;\n            }\n            if (line.startsWith(\"File1=\")) {\n                byte[] foo = line.getBytes();\n                int i = 6;\n                for (; i < foo.length; i++) {\n                    if (foo[i] == 0x0d) {\n                        break;\n                    }\n                }\n                return line.substring(6, i);\n            }\n        }\n        return null;\n    }\n", "label": 0, "substitutes": {"dump": ["send", "show", " describe", "print", "debug", " show", "store", "update", " debug", " dumped", "export", "flush", "copy", " dumps", "write", "stat", "zip", "link", "init", "diff", "read", "download", "println", "load", "save", " println", "info", "display"], "source": ["local", "text", "search", "sample", "java", "file", "sequence", "site", "parent", "src", "resource", "store", "remote", "start", "service", "SOURCE", "ink", "select", "from", "style", "copy", "shell", "view", "check", "ource", "scope", "origin", "config", "iter", "form", "Source", "init", "input", "ie", "template", "spec", "sys", "image", "script", "info", "sql", "se"], "target": ["local", "mac", "match", "proxy", "file", "delete", "term", "that", "Target", "replace", "test", "t", "dest", "current", "style", "output", "copy", "tif", "null", "goal", "to", "pattern", "host", "arg", "gt", "link", "base", "compatible", "table", "project", "template", "arget", "top", "it", "next", "bolt"], "is": ["iss", "ic", "isl", "abs", "ics", "isa", "ists", "ii", "sis", "xs", "in", "ist", "ls", "ais", "iris", "ri", "si", "bits", "mos", "act", "i", "ios", "are", "has", "ims", "ib", "bis", "ar", "es", "IS", "ms", "s", "lis", "ois", "init", "its", "oss", "isin", "ris", "sys", "im", "isf", "tis", "ai", "ins", "Is", "nis", "ip", "it", "ir", "isi", "isc", "iso", "ys"], "os": ["js", "cos", "oses", "bos", "oos", "outs", "oes", "uts", "ost", "ose", "io", "ants", "ot", "ox", "ows", "aos", "OS", "ls", "mos", "ts", "ols", "ios", "cs", "obs", "fs", "ns", "o", "ps", "ros", "osi", "bs", "los", "oss", "oS", "s", "ds", "sys", "or", "Os", "nos", "dos", "pos", "css", "es", "ss"], "done": ["later", "created", "d", "du", "started", "filled", "des", "given", "finished", "only", "dirty", "di", "loaded", "Done", "did", "led", "needed", "progress", "complete", "disabled", "pleted", "seen", "ded", "gone", "expected", "valid", "ished", "failed", "desc", "set", "enabled", "found", "die", "made", " Done", "flag", "de", "continue", "checked", " continued", "shown"]}}
{"id1": "15409512", "id2": "21827619", "code1": "    public static void main(String args[]) throws IOException {\n        String inFileName = args[0];\n        String outFileName = args[1];\n        long position = 0L;\n        try {\n            position = Long.parseLong(args[2]);\n        } catch (NumberFormatException nfex1) {\n            try {\n                position = Long.parseLong(args[2], 16);\n            } catch (NumberFormatException nfex2) {\n                System.err.println(\"Wrong offset\");\n                System.exit(0);\n            }\n        }\n        if (position < 1L) {\n            System.err.println(\"Wrong offset. Must be more than 0\");\n            System.exit(0);\n        }\n        System.out.println(\"Copying  input: \" + inFileName);\n        System.out.println(\"        output: \" + outFileName);\n        System.out.println(\"          from: \" + position);\n        BufferedInputStream bis = new BufferedInputStream(new FileInputStream(inFileName));\n        BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(outFileName));\n        bis.skip(position);\n        for (byte[] b = new byte[1]; bis.read(b) > 0; bos.write(b)) ;\n        bis.close();\n        bos.close();\n    }\n", "code2": "    public static String SHA1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n        MessageDigest md;\n        md = MessageDigest.getInstance(\"SHA-1\");\n        byte[] sha1hash = new byte[40];\n        md.update(text.getBytes(\"iso-8859-1\"), 0, text.length());\n        sha1hash = md.digest();\n        return convertToHex(sha1hash);\n    }\n", "label": 0, "substitutes": {"inFileName": ["intModelNames", "infileSource", "inFileSource", " infileSource", " inFileSource", "infileNames", "infileSize", " inFilePath", "inModelName", "inModelNames", "inStreamSize", "inFilenameSize", "inFILEName", "inFilenameNames", "inStreamNames", "intFileNames", "inFilenameSource", "infileName", "inPageName", " infileSize", "inFileFace", " infileNames", " inFileFace", " infileFace", "inFILEFace", "intModelname", "inFILEPath", "inPageSource", "inFilePath", "inPageNames", " inFileNames", "intFileSource", "inFilenameFace", " inFileSize", "inFilenameName", "inModelSource", "inStreamName", "inFileSize", "infilePath", " infileName", "inStreamPath", "intModelSource", "intFilename", "inPagename", "inModelname", "intModelName", " infilePath", "intFileName", "inFileNames", "inFilename", "infileFace", "inFilenamePath", "inFILESource", "infilename"], "outFileName": ["outFilenameFile", "inFilenameDir", " outFilenameName", "outFilenameDef", " outFileParent", "infileNames", "inFileFile", "outfilePath", "outfileNames", "infileDef", "outFileNames", " outFilenamePath", "inFilenameNames", " outFilePath", "outfileParent", "outfileDef", "outfileName", "outFileParent", "infileName", "outFILEParent", " outFileNames", "outPathPath", "outTileDef", "inFilePath", "outFilenameName", "outFilenameParent", "outfileFile", "outPathName", "inFileDef", "outFilePath", "outFilenameNames", "infileFile", "inFilenameName", "outFileFile", " outFilenameNames", "outPathNames", "inFileDir", "outfileDir", " outFilenameParent", "outFileDir", "outPathDir", "outFilenamePath", "outTileNames", "outTileName", "inFileNames", "outFILEPath", "outTileFile", "outFileDef", "outFILENames", "inFilenamePath", "outFILEName", "outFilenameDir"], "position": ["address", "description", "number", "operation", "sequence", "p", "amount", "point", "length", "start", "ion", "slot", "resolution", "no", "portion", "from", "limit", "osition", "total", "index", "to", "block", "relation", "connection", "condition", "port", "present", "volume", "location", "initial", "expression", "size", "padding", "buffer", "Position", "now", "journal", "capacity", "minimum", "reference", "see", "document", "offset", "POS", "seek", "direction", "zero", "application", "source", "pointer", "memory", "value", "move", "request", "pos", "character", "layout", "option", "order", "type", "usage", "ment", "command"], "bis": ["js", "bid", "ubs", "rots", "idis", "is", "conv", "onis", "ls", "rison", "iris", "oi", "ais", "bits", "abin", "irs", "bb", "opus", "uds", "cgi", "obb", "ios", "obs", "bh", "bps", "ads", "fps", "pins", "bs", "los", "lis", "oss", "bil", "its", "lbs", "isin", "avi", "ris", "oris", "bes", "BS", "bat", "phis", "ints", "dos", "obos", "nis", "bi", "ubis"], "bos": ["asket", "cos", "oos", "ubs", "rots", "ats", "bys", "ows", "aos", "ths", "fits", "ots", "bits", "tes", "bo", "ts", "uds", "ols", "oops", "bones", "ios", "obs", "jas", "bh", "fs", "ns", "pins", "bs", "los", "oss", "oids", "aus", "ippers", "eros", "bes", "BS", "nos", "tis", "dos", "oks", "bi", "ubis", "boards", "ods", "os", "webkit"], "b": ["d", "v", "batch", "pb", "h", "p", "bar", "back", "nb", "bg", "t", "be", "rb", "j", "ab", "bb", "c", "bit", "i", "a", "m", "ib", "bh", "f", "B", "base", "fb", "br", "sb", "bs", "q", "ch", "db", "eb", "bp", "cb", "l", "ob", "g", "mb", "bin", "buf", "body", "gb", "bc"]}}
{"id1": "17773263", "id2": "5632808", "code1": "    public boolean visar() throws SQLException, ClassNotFoundException, Exception {\n        Connection conn = null;\n        PreparedStatement ps = null;\n        Date fechaSystem = new Date();\n        DateFormat aaaammdd = new SimpleDateFormat(\"yyyyMMdd\");\n        DateFormat hhmmss = new SimpleDateFormat(\"HHmmss\");\n        DateFormat sss = new SimpleDateFormat(\"S\");\n        String ss = sss.format(fechaSystem);\n        if (ss.length() > 2) {\n            ss = ss.substring(0, 2);\n        }\n        boolean visado = false;\n        try {\n            conn = ToolsBD.getConn();\n            conn.setAutoCommit(false);\n            String sentenciaSql = \"UPDATE BZMODIF SET FZJCUSVI=?, FZJFVISA=?, FZJHVISA=?\" + ((hayVisadoExtracto) ? \", FZJIEXTR=?\" : \"\") + ((hayVisadoRemitente) ? \", FZJIREMI=?\" : \"\") + \" WHERE FZJCENSA='S' AND FZJCAGCO=? AND FZJNUMEN=? AND FZJANOEN=? AND FZJFMODI=? AND FZJHMODI=?\";\n            ps = conn.prepareStatement(sentenciaSql);\n            ps.setString(1, usuarioVisado);\n            ps.setInt(2, Integer.parseInt(aaaammdd.format(fechaSystem)));\n            ps.setInt(3, Integer.parseInt(hhmmss.format(fechaSystem) + ss));\n            int contador = 4;\n            if (hayVisadoExtracto) {\n                ps.setString(contador++, \"X\");\n            }\n            if (hayVisadoRemitente) {\n                ps.setString(contador++, \"X\");\n            }\n            ps.setInt(contador++, oficina);\n            ps.setInt(contador++, numeroRegistro);\n            ps.setInt(contador++, anoSalida);\n            ps.setString(contador++, fechaModificacion);\n            ps.setString(contador++, horaModificacion);\n            int registrosAfectados = ps.executeUpdate();\n            if (registrosAfectados > 0 && !hayVisadoExtracto && !hayVisadoRemitente) {\n                visado = true;\n            }\n            if (registrosAfectados > 0 && (hayVisadoExtracto || hayVisadoRemitente)) {\n                boolean generado = generarBZVISAD(conn, Integer.parseInt(aaaammdd.format(fechaSystem)), Integer.parseInt(hhmmss.format(fechaSystem) + ss));\n                if (generado) {\n                    visado = actualizarBZSALIDA(conn);\n                }\n                String rem = \"\";\n                String com = \"\";\n                if (hayVisadoRemitente) {\n                    if (!remitente.trim().equals(\"\")) {\n                        rem = remitente;\n                    } else {\n                        javax.naming.InitialContext contexto = new javax.naming.InitialContext();\n                        Object ref = contexto.lookup(\"es.caib.regweb.ValoresHome\");\n                        ValoresHome home = (ValoresHome) javax.rmi.PortableRemoteObject.narrow(ref, ValoresHome.class);\n                        Valores valor = home.create();\n                        rem = valor.recuperaRemitenteCastellano(entidad1, entidad2 + \"\");\n                        valor.remove();\n                    }\n                } else {\n                    if (!altres.trim().equals(\"\")) {\n                        rem = remitente;\n                    } else {\n                        javax.naming.InitialContext contexto = new javax.naming.InitialContext();\n                        Object ref = contexto.lookup(\"es.caib.regweb.ValoresHome\");\n                        ValoresHome home = (ValoresHome) javax.rmi.PortableRemoteObject.narrow(ref, ValoresHome.class);\n                        Valores valor = home.create();\n                        rem = valor.recuperaRemitenteCastellano(entidad1Old, entidad2Old + \"\");\n                        valor.remove();\n                    }\n                }\n                if (hayVisadoExtracto) {\n                    com = extracto;\n                } else {\n                    com = comentario;\n                }\n                try {\n                    Class t = Class.forName(\"es.caib.regweb.module.PluginHook\");\n                    Class[] partypes = { String.class, Integer.class, Integer.class, Integer.class, Integer.class, String.class, String.class, String.class, Integer.class, Integer.class, String.class, Integer.class, String.class };\n                    Object[] params = { \"V\", new Integer(anoSalida), new Integer(numeroRegistro), new Integer(oficina), new Integer(fechaDocumento), rem, com, tipoDocumento, new Integer(fechaRegistro), new Integer(fzacagge), fora, new Integer(destinatario), idioma };\n                    java.lang.reflect.Method metodo = t.getMethod(\"salida\", partypes);\n                    metodo.invoke(null, params);\n                } catch (IllegalAccessException iae) {\n                } catch (IllegalArgumentException iae) {\n                } catch (InvocationTargetException ite) {\n                } catch (NullPointerException npe) {\n                } catch (ExceptionInInitializerError eiie) {\n                } catch (NoSuchMethodException nsme) {\n                } catch (SecurityException se) {\n                } catch (LinkageError le) {\n                } catch (ClassNotFoundException le) {\n                }\n            }\n            conn.commit();\n            int fzahsis = Integer.parseInt(hhmmss.format(fechaSystem) + ss);\n            String Stringsss = sss.format(fechaSystem);\n            switch(Stringsss.length()) {\n                case (1):\n                    Stringsss = \"00\" + Stringsss;\n                    break;\n                case (2):\n                    Stringsss = \"0\" + Stringsss;\n                    break;\n            }\n            int horamili = Integer.parseInt(hhmmss.format(fechaSystem) + Stringsss);\n            int fzafsis = Integer.parseInt(aaaammdd.format(fechaSystem));\n            logLopdBZMODIF(\"UPDATE\", sessioEjb.getCallerPrincipal().getName().toUpperCase(), fzafsis, horamili, 'S', numeroRegistro, anoSalida, oficina, Integer.parseInt(fechaModificacion), Integer.parseInt(horaModificacion));\n        } catch (Exception e) {\n            System.out.println(\"Error: \" + e.getMessage());\n            e.printStackTrace();\n            visado = false;\n            try {\n                if (conn != null) conn.rollback(); else System.out.println(\"ERROR: No es pot fer rollback sense connexi\u00f3!\");\n            } catch (Exception ex) {\n                System.out.println(\"Error: \" + e.getMessage());\n                ex.printStackTrace();\n            }\n        } finally {\n            ToolsBD.closeConn(conn, ps, null);\n        }\n        return visado;\n    }\n", "code2": "        @Override\n        public void respondGet(HttpServletResponse resp) throws IOException {\n            setHeaders(resp);\n            final OutputStream os;\n            if (willDeflate()) {\n                resp.setHeader(\"Content-Encoding\", \"gzip\");\n                os = new GZIPOutputStream(resp.getOutputStream(), bufferSize);\n            } else os = resp.getOutputStream();\n            transferStreams(url.openStream(), os);\n        }\n", "label": 0, "substitutes": {"visar": [" visa", "visatar", "Visado", "Visitar", " visatar", "Visitatar", "visa", "Visitado", "Visa", "Visita", "Visatar", "Visar"], "ClassNotFoundException": ["ClassNotfoundError", "ClassDefPresentError", "ClassNotFoundError", "ClassDefFoundException", "ClassDefPresentException", "ClassNotSupportedError", "ClassNotPresentException", "ClassNotSupportedException", "ClassNotfoundException", "ClassNotPresentError", "ClassDefFoundError"], "Exception": ["Class", "ception", "Operation", "Message", "E", "Record", "Index", "File", " exception", "Connection", "Handler", "Example", "Error", "Event", "Array", "Warning", "Application", "Result", "Configuration", "Context", "None", "Exit", "Throw", "Status", "Instance", "Document"], "conn": ["Con", "irm", "js", "cur", "en", "p", "txt", "gate", " con", "conv", "Conn", "nt", "obj", "pg", "open", "cons", "conf", "Connection", "comm", "cp", "ctx", "c", "rs", "n", "connection", "res", "cc", "fin", "close", "wp", "ns", "rel", "config", "ct", "ann", "connect", "sp", "oss", "cn", "wr", "ch", "db", "cert", "yn", "client", "nc", "ran", "socket", "gn", "exec", "pen", "enc", "ont", "coll", "ec", "cmd", "pool", "can", "sql", "org", "jp", "co", "con"], "ps": ["plays", "js", "Ps", "ping", "ples", "pt", "pd", "vs", "p", "ups", "points", "uts", "ats", "pps", "eps", "ls", "pg", "pres", "ress", "pas", "gs", "cp", "rs", "ts", "stats", "pl", "cs", "itions", "res", "aps", " pp", "wp", "ims", "als", "fs", "pers", "ports", "fps", "ms", "pe", "sp", "s", "bs", "pins", "its", "ops", "fp", "ips", "ys", "pr", "posts", "sts", "ends", "pa", "pp", "mp", "pc", "ins", "ies", "amps", "pos", "pse", "css", "proc", "qs", "jp", "PS", "gres"], "fechaSystem": ["fechoaSystem", "fechoaSys", "fechaSys", "fechasSys", "fechABase", "fachaSys", "fechsaProcess", "fetchoSystem", "fechasSystem", "fespoaSystem", "fechoaServer", "fachoaSys", "fespoaSTEM", "fechaBase", "fetchaBase", "fechsaSystem", "fechaeServer", "fachaServer", "fechoSTEM", "fachaSystem", "fechasServer", "fechaeSys", "fespaProcess", "fespoaProcess", "fechaeSystem", "fetchaSystem", "fachoaServer", "fechoaProcess", "fechoServer", "fechaSTEM", "fechASys", "fetchoServer", "fechaServer", "fechaProcess", "fetchaServer", "fechoSystem", "fechoaSTEM", "fespaSystem", "fechoProcess", "fetchoBase", "fachoaSystem", "fechASystem", "fetchaSys", "fechoSys", "fechoBase", "fespaSTEM", "fechsaSTEM", "fechasBase", "fetchoSys"], "aaaammdd": ["aaaaammm", "aaaammss", " baammss", "aaapmd", "aaaaummm", "aaaamss", " baammd", "aaaammmm", "aaaammm", "aaalammd", "aaaammde", "aaaamds", "aaaamdd", "aaaaamd", "aaaambds", " baammdd", " baambss", "aaaamde", "aaaaammmm", "aaaaamde", "aaaaumdd", "aaaammds", " baambdd", "aaalammde", "aaaaumd", "aaaambd", "aaaaammde", "aaaaammdd", " baambd", "aaaaamdd", "aaaambss", "aaaaammd", "aaapmss", "aaalammmm", "aaaambdd", "aaapmds", " baambds", " baammds", "aaaaumde", "aaapmdd", "aaalammdd", "aaaammd", "aaaamd"], "hhmmss": ["hhMMss", "ohmmess", "hhmbss", "ohtmcss", "hhtmcss", "HHmmrss", "hhmmmcss", "hhmmmrss", "hhmmmps", "hhMMrss", "hhmmrss", "hhmmess", "hhmmmms", "ohmmms", "hhmmps", "hhmyps", "HHMMss", "HHMMs", "hhmmms", "hhmmcss", "hhtmss", "HHMMps", "HHmms", "ohmmss", "hhmyrss", "hhMMps", "hhmbcss", "ohtmms", "hhmyss", "hhtmess", "ohtmess", "hhmmmess", "hhmmmss", "HHmmps", "hhtmms", "hhmys", "hhmbms", "ohtmss", "ohmmcss", "hhMMs", "HHmmss", "hhmbess", "hhmms", "HHMMrss"], "sss": ["rssis", "essys", "ssis", "yssls", "\u00dfs", "ssd", "ssy", "rsss", "ssls", " ssls", "essls", "ssys", "\u00dfh", "ysss", "ssh", "csss", "cssd", "yssys", "esss", "rssh", " ssys", "\u00dfis", " ssy", "cssis", "rssd", "cssh", "essy", "yssy", "\u00dfd"], "ss": ["course", "js", "sq", "ess", "ping", "iss", "aws", "bytes", "string", "sy", "SS", "pps", "ws", "ls", "ssh", "tz", "pres", "tt", "rs", "\u00df", "ts", "ews", "good", "rss", "sol", "stats", "cs", "https", "ssl", "html", "ns", "sf", "es", "ses", "sd", "ms", "s", "bs", "sb", "oss", "dd", "ds", "hess", "ys", "sys", "ass", "sv", "esi", "styles", "tis", "css", "less", "sql", "os", "se"], "sentenciaSql": ["sentenciaDel", "sentenciaSourceql", "sentenzaSq", "sentenciaStringsql", "sentenciaInssql", "sentenciaSsql", "sentenciaSQL", "sentenceSQL", "sentenciaInseed", "sentenceSql", "sentenciaInsel", "sentenzaSeed", "sentenzaInseed", "sentenciaInsQL", "sentenciaInsql", "sentenciaSourceeed", "sentenzaInsq", "sentenciaDql", "sentenciaSq", "sentenciaStringql", "sentenciaSeed", "sentenzaSql", "sentenceSsql", "sentenciaSel", "sentenzaInsql", "sentenciaSourceel", "sentenciaInsq", "sentenciaStringQL", "sentenciaSourceq", "sentenciaDeed", "sentenciaDq", "sentenzaInsel", "sentenceSq", "sentenciaStringq", "sentenzaSel"], "contador": ["contactator", "constator", "controlator", "montadr", " Contamina", "\u00e7orno", "contabo", "contactarer", " contadr", " contator", "frontamo", "constainer", "constano", "controlarer", "contamo", "constoffer", " contpointer", "container", "ontdoor", "contarer", "contarter", "ontarter", "constorno", "ontador", "portador", " container", "constdoor", " Contator", "controlarter", " contamina", "portator", "contrane", "montamo", "contactador", "contano", "constadr", "contdoor", "contamina", "constpointer", "constrane", "ontadr", " contabo", "\u00e7ador", "ontarer", "\u00e7offer", "intador", " Contador", "intadr", "CONTator", "CONTamina", "colainer", "ontrane", "montator", " Contpointer", "constador", "frontarter", "contorno", "CONTpointer", "portainer", " contorno", "contpointer", " contarter", "CONTador", "intainer", "portabo", "\u00e7ano", "controlador", "colador", "colabo", "montador", "frontator", " contano", "contoffer", "contactarter", " contrane", "contator", " contdoor", "ontator", " contoffer", " contamo", "ontamo", "frontador", "intpointer", "contadr", "colator"], "visado": ["Visado", " visando", "Visados", " visitados", " visados", " visitando", "Visando", " visitada", "visados", " visada", "visada", "visando", " visitado", "Visada"]}}
{"id1": "7872659", "id2": "21491791", "code1": "    private static boolean genCustRatingFileAndMovieIndexFile(String completePath, String masterFile, String CustRatingFileName, String MovieIndexFileName) {\n        try {\n            File inFile = new File(completePath + fSep + \"SmartGRAPE\" + fSep + masterFile);\n            FileChannel inC = new FileInputStream(inFile).getChannel();\n            File outFile1 = new File(completePath + fSep + \"SmartGRAPE\" + fSep + MovieIndexFileName);\n            FileChannel outC1 = new FileOutputStream(outFile1, true).getChannel();\n            File outFile2 = new File(completePath + fSep + \"SmartGRAPE\" + fSep + CustRatingFileName);\n            FileChannel outC2 = new FileOutputStream(outFile2, true).getChannel();\n            int fileSize = (int) inC.size();\n            int totalNoDataRows = fileSize / 7;\n            ByteBuffer mappedBuffer = inC.map(FileChannel.MapMode.READ_ONLY, 0, fileSize);\n            int startIndex = 1, count = 0;\n            short currentMovie = 1;\n            while (mappedBuffer.hasRemaining()) {\n                count++;\n                short movieName = mappedBuffer.getShort();\n                int customer = mappedBuffer.getInt();\n                byte rating = mappedBuffer.get();\n                if (movieName != currentMovie) {\n                    ByteBuffer outBuf1 = ByteBuffer.allocate(10);\n                    outBuf1.putShort(currentMovie);\n                    outBuf1.putInt(startIndex);\n                    outBuf1.putInt(count - 1);\n                    outBuf1.flip();\n                    outC1.write(outBuf1);\n                    currentMovie = movieName;\n                    startIndex = count;\n                }\n                ByteBuffer outBuf2 = ByteBuffer.allocate(5);\n                outBuf2.putInt(customer);\n                outBuf2.put(rating);\n                outBuf2.flip();\n                outC2.write(outBuf2);\n            }\n            ByteBuffer endOfIndexFile = ByteBuffer.allocate(10);\n            endOfIndexFile.putShort(currentMovie);\n            endOfIndexFile.putInt(startIndex);\n            endOfIndexFile.putInt(100480506);\n            endOfIndexFile.flip();\n            outC1.write(endOfIndexFile);\n            outC1.close();\n            outC2.close();\n            return true;\n        } catch (IOException e) {\n            System.err.println(e);\n            return false;\n        }\n    }\n", "code2": "    public void run(String[] args) throws Throwable {\n        FileInputStream input = new FileInputStream(args[0]);\n        FileOutputStream output = new FileOutputStream(args[0] + \".out\");\n        Reader reader = $(Reader.class, $declass(input));\n        Writer writer = $(Writer.class, $declass(output));\n        Pump pump;\n        if (args.length > 1 && \"diag\".equals(args[1])) {\n            pump = $(new Reader() {\n\n                int counter;\n\n                @ToContext(mode = InvocationMode.sideEffect)\n                public int read(byte[] buffer, int off, int len) throws Exception {\n                    Integer rd = (Integer) $next();\n                    if (rd > 0) {\n                        counter += rd;\n                    }\n                    return 0;\n                }\n\n                @ToContext(mode = InvocationMode.sideEffect)\n                public void close() throws Exception {\n                    System.out.println(\"Read from input \" + counter + \" bytes.\");\n                }\n            }, reader, writer, new Writer() {\n\n                int counter;\n\n                @ToContext(mode = InvocationMode.sideEffect)\n                public void write(byte[] buffer, int off, int len) throws Exception {\n                    counter += len;\n                }\n\n                @ToContext(mode = InvocationMode.sideEffect)\n                public void close() throws Exception {\n                    System.out.println(\"Written to output \" + counter + \" bytes.\");\n                }\n            });\n        } else {\n            pump = $(reader, writer);\n        }\n        pump.pump();\n    }\n", "label": 1, "substitutes": {"genCustRatingFileAndMovieIndexFile": [" genCustRatingFileAndMovieVersionfile", " genCustRatingFileAndVideoindexFiles", " genCustRatingFileAndVideoIndexFile", " genCustRatingFileAndMovieVersionFile", " genCustRatingFileAndMovieIndexfile", " genCustRatingFileAndVideoIndexfile", " genCustRatingFileAndVideoindexFile", " genCustRatingFileAndMovieVersionFiles", " genCustRatingFileAndMovieindexTable", " genCustRatingFileAndVideoindexfile", " genCustRatingFileAndMovieIndexFiles", " genCustRatingFileAndVideoIndexTable", " genCustRatingFileAndMovieIndexTable", " genCustRatingFileAndMovieindexFile", " genCustRatingFileAndVideoindexTable", " genCustRatingFileAndVideoIndexFiles", " genCustRatingFileAndMovieindexfile", " genCustRatingFileAndMovieVersionTable", " genCustRatingFileAndMovieindexFiles"], "completePath": ["CompleteLocation", " completeLocation", "CompleteNow", "pleteLocation", "CompleteDirectory", "completeRoot", "pleteScript", " completeDir", "CompletePath", "COMPLEPath", "totalRoot", "CompleteDir", "totalPod", "completeNow", "completeProject", " completesPath", "COMPLEDir", " completesLocation", "completeLog", "pletionProject", "totalLocation", "CompleteProject", "pletePath", "pleteProject", "pleteDir", "pletionDir", " completeDirectory", "completeLocation", "completePod", "COMPLELog", "fullLocation", " completesDirectory", " completesDir", "completeScript", "completeDir", "fullPod", "fullPath", "pletePod", "pletionPath", "CompleteLog", "pleteRoot", "pleteLog", "CompleteScript", "pletionNow", "pleteNow", "completeDirectory", "COMPLEScript", "totalPath", "fullRoot"], "masterFile": ["MasterFilename", " masterFilename", "currentPath", "masterfile", "MasterName", "managerFilename", "Masterfile", "completeName", "masterName", "MasterFile", "managerfile", "managerPath", " masterPath", "managerFile", "MasterPath", " masterfile", "currentName", "masterPath", "currentFile", "completefile", "masterFilename", "currentfile", "completeFile"], "CustRatingFileName": ["CustRankFileType", "CustRatingFieldInfo", "CustRatingFilesname", "CustRatingTableSet", "CustRatingFilenameNames", "CustRatingFieldType", "CustRatingTableType", "CustRatingTableInfo", "CustRatingfileType", "CustRatingFileInfo", "CustRatingFilesType", "CustRatingfileNames", "CustRankFilesType", "CustRatingFilesName", "CustRatingFilesInfo", "CustRatedfileSet", "CustRatingfileName", "CustRankFileInfo", "CustRatingFilenameType", "CustRatedFileNames", "CustRatingFilename", "CustRatedFileType", "CustRatingTablename", "CustRatingFilenameName", "CustRatedfileName", "CustRankFileName", "CustRankFilesName", "CustRatingFilenameSet", "CustRatingFileNames", "CustRankFilesname", "CustRatingFieldName", "CustRatingFieldname", "CustRatingTableNames", "CustRatingfileSet", "CustRatedFileName", "CustRankFilename", "CustRatedfileType", "CustRatedfileNames", "CustRatedFileSet", "CustRankFilesInfo", "CustRatingTableName", "CustRatingFileSet", "CustRatingFileType"], "MovieIndexFileName": ["MovieIndexFieldName", "MovieIndexFieldNames", "MovieIndexFILENumber", "MovieindexfileKey", "MovieIndexfileName", "MovieIndexTableKey", "MovieindexfileType", "MovieIndexfileNames", "MovieindexFileNames", "MovieIndexFileNames", "MovieIndexFILEName", "MovieindexFileKey", "MovieIndexFileNumber", "MovieindexFileName", "MovieindexfileNumber", "MovieIndexTableType", "MovieindexfileNames", "MovieIndexfileNumber", "MovieIndexFILENames", "MovieIndexFileKey", "MovieIndexFieldKey", "MovieIndexFILEType", "MovieIndexTableName", "MovieindexFileType", "MovieIndexfileType", "MovieIndexFieldType", "MovieIndexFileType", "MovieIndexTableNames", "MovieindexfileName", "MovieindexFileNumber", "MovieIndexfileKey"], "inFile": ["inFILE", "outC", "localFILE", "outF", "localfile", " infile", "outfile", " inFILE", "inF", "infile", "INFILE", "INC", "INF", "INFile", "INfile", "localFile", " inF", "outFile", "localC"], "inC": ["inCS", "intR", " inL", "inG", "outC", "inCL", " outC", "inCI", "inputFile", "iCS", " inR", "iCI", "outF", " inCS", "inputG", "intCS", " inG", "iR", "iC", "outG", "outL", "inF", " outL", " inCL", "inputC", "intC", " inCI", "intCI", "inR", "inL", " inF", "outFile", " outCL", "outCL", " outF", "inputF"], "outFile1": ["outFILE2", "outputPage9", "outputFile9", "outputFileOne", "outFile0", "outPage0", "outputPage1", "outfile1", "outPageOnce", "outPage1", "outFile6", "outfile2", "outFileOnce", "outChannelOne", "outFILE6", " outfile2", " outfile1", "outputPageOnce", " outfile6", " outfile0", "outputFileOnce", " outFile6", "outFileOne", "outChannel9", "outFILE0", "outputFile1", "outPage2", " outFile0", "outPageOne", "outChannel1", "outFILE1", "outFile9", "outPage6", "outputPageOne", "outChannelOnce", "outfile0", "outfile6", "outPage9"], "outC1": ["outROne", "outC0", "inFile2", "inC2", "outP2", "outR3", "inC3", "outP3", "outR1", "outC3", "inCOne", "outFileOne", "outCB2", "outR2", "inC1", "outCOne", "outPOne", "outc2", "outCB1", "outCB0", "outP1", "outc3", "outFile3", "outc0", "outCB3", "inFile1", "outc1", "inFile3", "inFileOne", "inC0"], "outFile2": ["outFile0", "outfile3", "outfile1", "exFile3", " outFile02", "outfile2", "outTableTwo", "outF3", "exChannel2", "outF1", "exChannel3", "outF2", "outfile02", "outTable3", "outChannel2", " outFile3", "outF0", "outChannel1", "outTable02", "outTable2", "outFile3", "outChannel3", "exChannel0", "exFile2", "outFileTwo", "exFile0", "outChannel0", "outFile02", "exChannel1", "outfile0", "exFile1", " outFileTwo", "outfileTwo"], "outC2": ["outB2", "outCTwo", "OutC4", "outC22", "outM22", "outS22", "outE1", "outBTwo", "allCTwo", "outR3", "outMTwo", "outB3", "outR4", "allB3", "OutC1", "allC2", "outSTwo", "outR1", "outC3", "OutR3", "outS3", "outM2", "OutR1", "OutR4", "allB22", "outM3", "allBTwo", "outC4", "outR2", "OutC2", "allC22", "outE4", "allC3", "allB2", "outE2", "OutR2", "outS2", "outE3", "outB22", "OutC3"], "fileSize": ["byteLength", "issueSIZE", " fileLength", "byteSize", "issueName", "baseCount", " fileCount", "baseSIZE", "FileCount", "fileLength", "fileSIZE", "baseName", "FileLength", "byteName", "byteSIZE", " fileSIZE", "FileName", " fileName", "fileName", "FileSIZE", "baseSize", "fileCount", "FileSize", "issueSize", "issueLength"], "totalNoDataRows": ["totalNoDataBoles", "totalNoDataSloles", "totalNodataRecoles", "totalNoDataRecoles", "totalNodataRows", "totalNodataRocks", "totalNoDataBues", "totalNodataRecocks", "totalNoDataBocks", "totalNodataRues", "totalNodataRecows", "totalNodataRoles", "totalNoDataSlues", "totalNodataRecues", "totalNoDataRecows", "totalNoDataRocks", "totalNoDataSlows", "totalNoDataBows", "totalNoDataRues", "totalNoDataRecues", "totalNoDataRoles", "totalNoDataSlocks", "totalNoDataRecocks"], "mappedBuffer": [" mappedQueue", "mapedBuffer", "mappedFB", "mmappedQueue", "mressedCallback", "MappedData", "mattedBB", " mapedFB", "mapedData", "mappedData", "mmappingbuffer", "mmappingBuff", " mapperCounter", " mapperBuffer", "mapperBB", "matchedBuff", "maphBuff", "MapperBuff", "MapedBB", "mappedCallback", " mapperQueue", "maphBuffer", " mapedCallback", "mressedFB", "MapedBuffer", "MappedBuff", "mappedCounter", "mappedQueue", "mappingBuff", "mapperBuff", "mappingBuffer", "mapperQueue", "mapBuffer", "MappedBB", " mappedCounter", "mressedBuff", "mappedbuffer", "mattedBuffer", "maphFB", "mapBB", "mapedbuffer", "mapedBuff", "mmappingQueue", "mappingQueue", "mattedBuff", "mappingData", "mapedBB", " mapedBuff", " mapedBuffer", "mappedBuff", " mapperBuff", "mapedQueue", "mmappedBuffer", "MapedBuff", "mapperBuffer", "mattedData", "mappingbuffer", "matchedQueue", "mapedFB", "MappedBuffer", " mappedCallback", " mappedFB", "mmappedBuff", "mapperbuffer", "matchedCounter", " mappedBuff", "mmappingBuffer", "MapperBB", "mappingCounter", "matchedBuffer", "maphCallback", "mapBuff", "mappingBB", "MapperBuffer", "mappedBB", "mressedBuffer", "mapedCallback", "MapedData", "mapperCounter", "mmappedbuffer"], "startIndex": [" startPoint", "Startindex", "startPoint", "endIndex", "currentPoint", "endIter", " startPage", " startPosition", " startindex", "endPage", "StartIndex", "startInd", "StartPos", "firstInd", "firstPosition", "currentIndex", "StartPosition", "firstindex", "initIndex", "StartIter", "StartPoint", "startPosition", "StartInd", "startPos", "firstIndex", "initPosition", "startPage", "currentPos", " startInd", " startPos", "initindex", "currentPosition", "startindex", " startIter", "startIter", "endPosition", "StartPage"], "count": ["created", "force", "batch", "number", "ctr", "first", "ount", "amount", "id", "process", "length", "start", "num", "cast", "current", "total", "limit", "more", "conf", "max", "call", "index", "c", "act", "n", "i", "check", "category", "code", "status", "counter", "result", "page", "found", "user", "core", "ind", "name", "Count", "last", "add", "mount", "list", "coll", "sum", "depth", "cloud", "order", "state", "next", "continue", "info", "find", "type", "now", "con", "size"], "currentMovie": ["primaryVideo", "reportedMovie", " currentImage", "currentlyMonster", " currentMouse", "currentImage", "currentDate", "currentMedia", "presentImage", "firstHero", "presentMovie", "activeVideo", " currentMonster", "primaryDate", " currentPlayer", "currentMouse", " currentMusic", "reportedMedia", "currentVideo", " currentSpider", "firstMonster", "reportedHero", "firstVideo", "presentMusic", "currentHero", "firstDate", "currentlyDate", "currentlySpider", "activePlayer", "reportedImage", "reportedMouse", "firstMedia", "firstMouse", "firstMovie", "currentlyMovie", "currentSpider", "activeMovie", "presentHero", "primaryMovie", "activeSpider", "reportedMusic", "currentMusic", "currentPlayer", " currentVideo", "currentMonster", "currentlyPlayer", " currentMedia", "primaryHero", "currentlyHero", "currentlyVideo", " currentHero"], "movieName": ["movieType", "filmname", "httpName", " movieType", "movieNAME", "ovieName", "httpname", "mpegname", "oviename", "ovieNAME", "mpegName", "MovieName", "monsterNAME", "movieTitle", "filmGroup", "monsterName", "filmName", "moviename", " moviename", "filmType", "ovieGroup", "httpNAME", "filmNAME", "Moviename", "movieGroup", "MovieType", "mpegGroup", " movieNAME", "monstername", "mpegNAME", "MovieTitle", " movieTitle", "filmTitle"], "customer": ["customizer", "customator", "Customity", "CustomER", "developER", "customity", "stickizer", " customator", "ustomorder", "customER", "Customer", "developizer", "sticker", "developity", "stickity", "developator", " customER", "ustomER", "customorder", "developorder", "ustomator", "stickER", "Customizer", "ustomer", "developer", " customorder"], "rating": ["ping", "card", "weight", " Rating", "term", "rage", "saving", "tag", "credit", "Rating", "scoring", "review", "ranking", "ating", "attribute", "scale", "rank", "rate", "rat", "boarding", "reporting", "format", "rated", "user", "core", "having", "heading", "score", "error", "reading", "strength", "testing", "playing", "setting", "option", "translation", "type", "average"], "outBuf1": ["outBbuf0", "outBuffyl", "outBbuf1", "outBdf3", "outBBuff0", "outBufl", "outBulp64", "outDbuf3", "outBBuff1", "outDuf0", "outBool1", "outBuff1", "outBbufOne", "outBbuf3", "outBlf1", "outDbuf0", "outBbufone", "outBurg18", "outDuf11", "outBBuff3", "outRuf18", "outBuf3", "outBulp3", "outRuf5", "outBulp1", "outRuf3", "outRbuf0", "outBucOne", "outBdfOnce", "outDbuf1", "outRbuf1", "outBlf0", "outDuf3", "outRbuf5", "outBbufl", "outBulpOnce", "outBuffy3", "outBuc5", "outBooll", "outDbuf11", "outBdf64", "outBurg1", "outRuf1", "outBuf18", "outBurg3", "outBuffyone", "outBbuf11", "outBuf64", "outBuff0", "outBuf11", "outBuffy1", "outBlf3", "outBuc0", "outBBuff11", "outBbuf5", "outBbuf18", "outBoolone", "outBuffy0", "outRufOne", "outRbufOne", "outBurg0", "outRbuf18", "outDuf1", "outBbuf64", "outBuf5", "outBufOnce", "outBfx11", "outBdf1", "outBuf0", "outBfx1", "outBuff2", "outBlf2", "outBfx0", "outRuf0", "outBuc1", "outBuff3", "outRbuf3", "outBfx3", "outBuffy18", "outBufone", "outBufOne", "outBbufOnce", "outBool3"], "outBuf2": ["outBuf4", "outFbufTwo", "outBuf42", "outBuffy3", "outBuffy2", "outBfg4", "outBfgTwo", "outMuf15", "outMbuf2", "outBbuf42", "outBbufj", "outMbuf15", "outBbuf1", "outBbuff4", "outMuf1", "outBfx1", "outBuf3", "outBbuff42", "outBuff2", "outBuffTwo", "outBuffy4", "outBuf02", "outFuf2", "outFbuf02", "outMbuf3", "outFbuf2", "outBfx2", "outBbuff3", "outBuffyTwo", "outFbuf4", "outBfx15", "outBufj", "outBbuff2", "outBfg2", "outBuf15", "outBuff42", "outBbuffj", "outMbuf1", "outBfg02", "outBuff4", "outBbuf4", "outBuff3", "outMuf3", "outBuff1", "outBbuff1", "outBfx3", "outBbuf3", "outBbuf02", "outBufTwo", "outBbuf15", "outBuffy02", "outFufTwo", "outBuffj", "outBbufTwo", "outFuf4", "outBbuf2", "outBbuff15", "outFuf02", "outMuf2"], "endOfIndexFile": ["endOfErrorfile", "endOfindexFile", "endOfIndexF", "endOfindexTable", "endofIndexFiles", "endOfindexfile", "endOfIndfile", "endofIndexfile", "endOFindexFile", "endOfIndexTable", "endOfIndFile", " endFile", "endOfErrorF", "endOfIndLine", "EndFile", "endofindexFile", "endOfPositionFile", "endOfindexLine", "endofindexFiles", "endedFile", "endofindexfile", "endOFIndexfile", "endOFindexLine", "endofIndexFile", "endOfIndexfile", "endofindexF", "endOfErrorFile", "endOfindexF", "endOfindexFiles", "endOfPositionFiles", "endOFindexfile", "endOfPositionTable", "endFile", "endOfIndexFiles", "endOfIndexLine", "endofIndexTable", "endOfErrorFiles", "endOFIndexLine", "endOfPositionfile", "endofindexTable", "endofIndexF", "endOFIndexFile"]}}
{"id1": "14324112", "id2": "22560224", "code1": "    protected void innerProcess(CrawlURI curi) throws InterruptedException {\n        if (!curi.isHttpTransaction()) {\n            return;\n        }\n        if (!TextUtils.matches(\"^text.*$\", curi.getContentType())) {\n            return;\n        }\n        long maxsize = DEFAULT_MAX_SIZE_BYTES.longValue();\n        try {\n            maxsize = ((Long) getAttribute(curi, ATTR_MAX_SIZE_BYTES)).longValue();\n        } catch (AttributeNotFoundException e) {\n            logger.severe(\"Missing max-size-bytes attribute when processing \" + curi.getURIString());\n        }\n        if (maxsize < curi.getContentSize() && maxsize > -1) {\n            return;\n        }\n        String regexpr = \"\";\n        try {\n            regexpr = (String) getAttribute(curi, ATTR_STRIP_REG_EXPR);\n        } catch (AttributeNotFoundException e2) {\n            logger.severe(\"Missing strip-reg-exp when processing \" + curi.getURIString());\n            return;\n        }\n        ReplayCharSequence cs = null;\n        try {\n            cs = curi.getHttpRecorder().getReplayCharSequence();\n        } catch (Exception e) {\n            curi.addLocalizedError(this.getName(), e, \"Failed get of replay char sequence \" + curi.toString() + \" \" + e.getMessage());\n            logger.warning(\"Failed get of replay char sequence \" + curi.toString() + \" \" + e.getMessage() + \" \" + Thread.currentThread().getName());\n            return;\n        }\n        MessageDigest digest = null;\n        try {\n            digest = MessageDigest.getInstance(\"SHA1\");\n        } catch (NoSuchAlgorithmException e1) {\n            e1.printStackTrace();\n            return;\n        }\n        digest.reset();\n        String s = null;\n        if (regexpr.length() == 0) {\n            s = cs.toString();\n        } else {\n            Matcher m = TextUtils.getMatcher(regexpr, cs);\n            s = m.replaceAll(\" \");\n        }\n        digest.update(s.getBytes());\n        byte[] newDigestValue = digest.digest();\n        if (logger.isLoggable(Level.FINEST)) {\n            logger.finest(\"Recalculated content digest for \" + curi.getURIString() + \" old: \" + Base32.encode((byte[]) curi.getContentDigest()) + \", new: \" + Base32.encode(newDigestValue));\n        }\n        curi.setContentDigest(newDigestValue);\n    }\n", "code2": "    public static String hashStringMD5(String string) throws NoSuchAlgorithmException {\n        MessageDigest md = MessageDigest.getInstance(\"MD5\");\n        md.update(string.getBytes());\n        byte byteData[] = md.digest();\n        StringBuffer sb = new StringBuffer();\n        for (int i = 0; i < byteData.length; i++) {\n            sb.append(Integer.toString((byteData[i] & 0xff) + 0x100, 16).substring(1));\n        }\n        StringBuffer hexString = new StringBuffer();\n        for (int i = 0; i < byteData.length; i++) {\n            String hex = Integer.toHexString(0xff & byteData[i]);\n            if (hex.length() == 1) hexString.append('0');\n            hexString.append(hex);\n        }\n        return hexString.toString();\n    }\n", "label": 1, "substitutes": {"innerProcess": ["inlineprocess", "inlineProcess", " innerSelect", "originalProcess", "inlineSelect", " innerRender", "originalRender", "innerprocess", "innerSelect", "inlineRender", " innerprocess", "originalprocess", "innerRender", "originalSelect"], "curi": ["couri", "mciri", " ciri", "mcurl", "acumi", " cudi", "rcui", "cri", "catumi", "caturi", "luri", "cui", "ctri", "achtml", "uncaddress", "caddress", "cury", "catury", "cathtml", "chtml", "Cumi", "cdurl", "duri", "ciri", " couri", "wdu", "acuri", "Curi", "ctiri", "cdri", "wiri", "crui", "wri", " cui", "durl", "mchtml", "rcuri", "Cri", "cphi", "lcuri", "coury", "acri", "lcui", "crdu", "Ciri", "crudi", "uncri", "lcdu", " cumi", "cdumi", "Curl", "cduri", " curl", "acuni", "Couri", "lcury", "catuni", "rcri", "curl", "mcumi", " cdu", " citi", "cdui", "coumi", "lui", " cri", "mcuni", "diri", "uncdu", "cuni", "cumi", "couni", "Cui", "liri", "rcouri", "catphi", " caddress", "lcri", "uncuri", "Cdu", "mcuri", "Cuni", "ctui", "cvoid", "covoid", "cturi", "lcvoid", "cori", "ctdu", "lcphi", "wuri", "cruri", "Caddress", "lcudi", "cophi", "lciti", "cdu", "ctiti", "ctumi", "citi", "dumi", "catvoid", "cudi", "lri"], "maxsize": ["maxSIZE", "MAXsize", "mxspace", " MAXSize", "axize", "maxlen", " MAXlength", " maxSize", "mxsize", " maxnumber", " maxize", "minSIZE", "minSize", "maxnumber", "mxSize", "axSIZE", "Maxbytes", "MaxSIZE", "minsize", "MAXlength", " maxSIZE", "MAXnumber", " MAXnumber", "maxSize", "axsize", "maxlength", " maxspace", "Maxsize", "Maxize", " maxbytes", "MAXSize", "Maxlen", "maxbytes", "minspace", "mxSIZE", " maxlen", "MaxSize", "maxize", "axbytes", "axlen", " maxlength", "maxspace", " MAXsize", "axSize"], "regexpr": ["brecreer", "reewpr", "regexps", "repexexpr", "reqer", "regdpr", "regexPR", "reexper", "regexvr", "replexexpr", "repexpr", "fregexvr", "resexprop", "reexvr", "repatternpt", "fregdpt", "reexexpr", "replexpr", "repexPR", "regexprop", "regexpt", "bregexps", "repatternpr", "relypr", "reqexpr", "relyexpr", "regexexpr", "rexexpr", "recreer", "reqps", "reqpr", "recreexpr", "fregdpr", "repexpro", "congexpr", "resexpr", "frepexpro", "bregexer", "consexexpr", "resexexpr", "reexer", "regexper", "consexprop", "consexrepl", "reewrepl", "reexpr", "brecrepr", "fregexpt", "rexpro", "regexrepl", "reewprop", "consexpr", "fregdper", "fregexPR", "regexpro", "fregexpr", "repatternper", "replexPR", "brecreps", "regdvr", "fregexexpr", "bregexexpr", "repatternvr", "congexprop", "relyprop", "fregexper", "relyrepl", "congexrepl", "regdpt", "frepexexpr", "fregexpro", "rexpr", "resexrepl", "rexPR", "frepexPR", "regexer", "brecreexpr", "reewexpr", "frepexpr", "recrepr", "regdper", "congexexpr", "bregexpr", "fregdvr", "reexpt", "recreps", "reexps", "replexpro"], "cs": ["cms", "js", "Cs", "ks", "ctr", "ars", "ics", "ats", "ours", "ws", "acts", "wcs", "ls", "mr", "cks", "gs", "rs", "cp", "c", "ts", "ctx", "caps", "cc", "ims", "ces", "csv", "fs", "ns", "es", "cf", "ps", "unes", "sc", "ms", "bs", "acs", "icks", "cn", "its", "cus", "ds", "CS", "nc", "sts", "sels", "css", "gc", "ss", "qs", "cas"], "digest": ["digested", "Digse", "Digested", "hashse", "ddester", "shaest", "dester", "dest", "shaum", "Digest", "hashester", "digum", "ddest", "diger", "Diger", "Digester", " diger", "Digist", " digester", "hasher", "shase", "hashest", "signested", "ddist", "dist", "Digum", " digse", "digist", "dder", "digse", "signum", "der", "shaested", "signest", "digester", "signse"], "s": ["text", "js", "sq", "v", "h", "string", "des", "p", "str", "ats", "b", "is", "ws", "t", "conv", "S", "ls", "j", "strings", "gs", "r", "c", "ts", "n", "i", "stats", "a", "ims", "ns", "f", "o", "es", "ps", "fs", "ms", "sb", "simple", "ds", "x", "sts", "l", "less", "ss", "qs", "y", "gets", "os", "w"], "m": ["d", "v", "match", "h", "p", "mt", "ym", "mod", "mo", "b", "t", "sm", "span", "nm", "mr", "mi", "model", "r", "mol", "c", "n", "i", "vm", "md", "f", "tm", "ms", "message", "rm", "M", "mm", "cm", "arm", "dm", "fm", "em", "l", "g", "gm", "mat", "w"]}}
{"id1": "20991673", "id2": "3801655", "code1": "    public NodeId generateTopicId(String topicName) {\n        MessageDigest md = null;\n        try {\n            md = MessageDigest.getInstance(\"SHA\");\n        } catch (NoSuchAlgorithmException e) {\n            System.err.println(\"No SHA support!\");\n        }\n        if (m_ready) System.out.println(\"Scribe is ready at\" + getNodeId() + \" , topic is \" + topicName);\n        md.update(topicName.getBytes());\n        byte[] digest = md.digest();\n        NodeId newId = new NodeId(digest);\n        return newId;\n    }\n", "code2": "    @SuppressWarnings(\"unchecked\")\n    public static void main(String[] args) throws Exception {\n        if (args.length != 2) {\n            System.out.println(\"usage: \" + EvaluatorHelper.class.getName() + \" <output> <data set file>\");\n            System.exit(1);\n        }\n        Helper helper = Helper.getHelper(args[1]);\n        Dataset dataset = helper.read(args[1]);\n        ZipFile zip = new ZipFile(new File(args[0]), ZipFile.OPEN_READ);\n        Enumeration entries = zip.entries();\n        Unit<?>[] performance = new Unit<?>[LIMIT];\n        int index = 0;\n        while (entries.hasMoreElements()) {\n            ZipEntry entry = (ZipEntry) entries.nextElement();\n            if (entry.getName().endsWith(\".out\")) {\n                File temp = File.createTempFile(\"PARSER\", \".zip\");\n                temp.deleteOnExit();\n                PrintStream writer = new PrintStream(new FileOutputStream(temp));\n                BufferedInputStream reader = new BufferedInputStream(zip.getInputStream(entry));\n                byte[] buffer = new byte[4096];\n                int read = -1;\n                while ((read = reader.read(buffer)) != -1) {\n                    writer.write(buffer, 0, read);\n                }\n                writer.close();\n                reader.close();\n                BufferedReader outfile = new BufferedReader(new FileReader(temp));\n                String line = null;\n                RuleParser parser = new RuleParser();\n                ProbabilisticRuleList list = new ProbabilisticRuleList();\n                while ((line = outfile.readLine()) != null) {\n                    if (line.startsWith(\"IF\")) {\n                        ProbabilisticRule rule = new ProbabilisticRule(dataset.getMetadata());\n                        list.add(fill(dataset.getMetadata(), rule, parser.parse(line)));\n                    }\n                }\n                outfile.close();\n                PooledPRCurveMeasure measure = new PooledPRCurveMeasure();\n                performance[index] = measure.evaluate(dataset, list);\n                System.out.println(entry.getName() + \": \" + performance[index]);\n                index++;\n                if (index >= LIMIT) {\n                    break;\n                }\n            }\n        }\n        System.out.println(UnitAveragingMode.get(Double.class).average(performance));\n    }\n", "label": 0, "substitutes": {"generateTopicId": ["generatesTopicDir", "generateNodeID", "generateNodeDir", "generateThreadName", "generateTransactionId", "generateTransactionID", "generateTopicID", "generatesNodeId", "generateThreadDir", "generateThreadID", "generateTransactionDir", "generateNodeId", "generatesTopicId", "generatesNodeName", "generatesTopicName", "generateTopicName", "generateNodeName", "generateThreadId", "generatesNodeID", "generateTopicDir", "generatesTopicID", "generatesNodeDir", "generateTransactionName"], "topicName": ["TopicData", "Topicname", "opicInfo", " topicFamily", "topicData", "topicKey", "topicname", "threadKey", "messageInfo", "opicFamily", "threadname", "opicData", "threadData", "threadName", "messageNames", "opicName", " topicKey", "messageName", "topicNames", " topicname", " topicData", " topicInfo", "topicInfo", "TopicNames", "TopicName", "TopicInfo", "TopicKey", " topicNames", "messagename", "topicFamily", "TopicFamily"], "md": ["mac", "mc", "d", "dr", "pdf", "pd", "mt", "ld", "mod", "di", "hash", "med", "sm", "msg", "de", " mc", "ng", "red", "det", "m", "ms", "ma", "dd", "sd", "mand", "rm", "alg", "hd", "dig", "M", "mm", "ind", "cd", "mk", "od", "me", "bd", "mg", "mn", "sha", "dm", "metadata", "mp", "bf", "der", "dh", "df", "mb", "cmd", "grad", "MD", " Md", "ME"], "digest": ["Digressed", "designEST", "candested", "digested", " digEST", "Diggest", "Digested", "hashEST", "DigEST", "digressed", "Digest", "digests", "designest", "candressed", " digested", "digEST", "signidate", "diggest", "decidate", "decest", "digidate", "decests", "designested", "hashest", "signested", " digressed", "Digests", "signests", "candest", "candEST", "hashgest", "signest", "decested", "hashested", "designgest", "Digidate"], "newId": ["nodeId", " newid", "newid", "nextId", "newsById", "Newid", "nodeMid", "nextById", "newsId", " newMid", "NewMid", "nodeById", "nextid", "newsid", "newsMid", "nextMid", "newMid", "NewId", "nodeid", " newById", "NewById", "newById"]}}
{"id1": "9826240", "id2": "14691829", "code1": "    private boolean checkHashBack(Facade facade, HttpServletRequest req) {\n        String txtTransactionID = req.getParameter(\"txtTransactionID\");\n        String txtOrderTotal = req.getParameter(\"txtOrderTotal\");\n        String txtShopId = facade.getSystemParameter(GlobalParameter.yellowPayMDMasterShopID);\n        String txtArtCurrency = facade.getSystemParameter(GlobalParameter.yellowPayMDCurrency);\n        String txtHashBack = req.getParameter(\"txtHashBack\");\n        String hashSeed = facade.getSystemParameter(GlobalParameter.yellowPayMDHashSeed);\n        String securityValue = txtShopId + txtArtCurrency + txtOrderTotal + hashSeed + txtTransactionID;\n        MessageDigest digest;\n        try {\n            digest = java.security.MessageDigest.getInstance(\"MD5\");\n            digest.update(securityValue.getBytes());\n            byte[] array = digest.digest();\n            StringBuffer sb = new StringBuffer();\n            for (int j = 0; j < array.length; ++j) {\n                int b = array[j] & 0xFF;\n                if (b < 0x10) sb.append('0');\n                sb.append(Integer.toHexString(b));\n            }\n            String hash = sb.toString();\n            System.out.println(\"com.eshop.http.servlets.PaymentController.checkHashBack: \" + hash + \" \" + txtHashBack);\n            if (txtHashBack.equals(hash)) {\n                return true;\n            }\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        }\n        return false;\n    }\n", "code2": "    public static String getMD5Hash(String in) {\n        StringBuffer result = new StringBuffer(32);\n        try {\n            MessageDigest md5 = MessageDigest.getInstance(\"MD5\");\n            md5.update(in.getBytes());\n            Formatter f = new Formatter(result);\n            for (byte b : md5.digest()) {\n                f.format(\"%02x\", b);\n            }\n        } catch (NoSuchAlgorithmException ex) {\n            ex.printStackTrace();\n        }\n        return result.toString();\n    }\n", "label": 1, "substitutes": {"checkHashBack": ["checkHashDown", " checkhashback", " checkhashDown", "checkhashBack", "checkClearDown", "checkClearUp", " checkHashUp", "checkhashDown", "checkLockDown", "checkLockBack", "checkLockUp", "checkLockback", "checkClearback", "checkhashUp", " checkhashUp", "checkClearBack", " checkhashBack", "checkhashback", "checkHashback", " checkHashDown", "checkHashUp", " checkHashback"], "facade": ["formificate", "facaded", "Facace", "latace", "funcade", "latader", " facage", "formade", "faclegate", "Facader", "famificate", "glade", "servades", "facificate", "facader", "glace", "servaded", "Facage", "servage", "Facacet", "formacet", "Facaded", "latade", "funcace", "Faclegate", "formace", "Facificate", "glage", "latlegate", "Facades", "funclegate", "famacet", "famade", " facaded", "Facade", "servade", "facace", "facage", "facades", "funcage", "funcader", " facades", "glader", "famace", "facacet"], "req": ["err", "aux", "sq", "cur", "qq", "rpm", "urg", "forge", "ctr", "p", "queue", "rec", "e", "obj", "rb", "Resp", "msg", "wcs", "compl", "needed", "mr", "Requ", "work", "r", "ctx", "required", "good", "rh", "proc", "wx", "res", "require", "requ", "desc", "params", "body", "attr", "out", "q", "reg", "gr", "forced", "Request", "etc", "http", "data", "uj", "quest", "request", "pkg", "cmd", "qt", "tx", "resp", "qs", "org", "jp"], "txtTransactionID": ["txtTransID", "txtTransKey", "txtTXId", "xtTransactionId", "txtOrderId", "txtTransactionName", "xtTxKey", "txtTransId", "xtTxName", "xtTransactionName", "txtTransName", "txtTXID", "txtOrderName", "txtOrderID", "textTransactionId", "textTransactionName", "txtTransactionKey", "txtTxID", "txtTxId", "txtOrderKey", "textTransactionID", "txtTxName", "textTxId", "xtTxID", "xtTransactionID", "xtTransactionKey", "textTxName", "txtTransactionId", "txtTXName", "xtTxId", "textTxID", "txtTxKey"], "txtOrderTotal": ["txtOrderComplete", "strTransactionBase", "txtOrderInfo", "xtOrderInfo", "xtOrdId", "txtOrdComplete", "xtOrdInfo", "txtOrderId", "txtJobSum", "txtTradeBase", "strTransactionComplete", "txtArticleInfo", "strTransactionTotal", "xtOrderId", "txtTransactionComplete", "txtArticleTotal", "txtJobId", "txtOrdBase", "txtTransactionTotal", "xtOrdTotal", "xtOrdSum", "txtOrdSum", "txtTradeComplete", "txtJobInfo", "txtOrdInfo", "txtJobTotal", "xtOrderSum", "txtOrdTotal", "strOrderTotal", "txtArticleId", "txtTradeTotal", "txtTransactionBase", "strOrderBase", "txtOrderBase", "strOrderComplete", "txtOrderSum", "txtArticleSum", "xtOrderTotal", "txtOrdId"], "txtShopId": ["txtServerid", "textStoreid", "txtForgeAid", "txtStoreID", "txtServerAid", "txtSiteAid", "xtSiteID", "txtServerID", "textStoreId", "txtSiteById", "textStoreID", "txtShopid", "txtSiteID", "txtStreetById", "xtSiteAid", "txtStreetID", "txtStreetid", "textShopId", "textShopID", "txtForgeID", "textShopid", "txtStoreid", "txtSiteId", "txtStoreId", "xtShopId", "txtShopAid", "txtServerId", "txtStreetId", "xtShopAid", "txtShopById", "txtForgeid", "xtSiteid", "txtSiteid", "textShopById", "txtForgeId", "xtSiteId", "xtShopid", "xtShopID", "txtShopID", "textStoreById", "txtStoreById"], "txtArtCurrency": ["txtArtConulture", "txtArticleCcurrency", "txtArtConcurrency", "txtArtCulture", "txtArticleCurrency", "txtArticleConcurrency", "txtArticleCocurrency", "txtArtCourrency", "txtArtConurrencies", "txtArtColurrency", "txtArticleConurrency", "txtArtCcurrency", "txtArticleCoulture", "txtArticleCourrency", "txtArtCocurrency", "txtArticleCategories", "txtArtColcurrency", "txtArticleCulture", "txtArtCourrencies", "txtArticleCourrencies", "txtArtCategories", "txtArtColategories", "txtArtConurrency", "txtArtCoategories", "txtArtConategories", "txtArticleConategories", "txtArtCoulture", "txtArticleCurrencies", "txtArtCurrencies"], "txtHashBack": ["txtClearFront", "txtStockback", "txtStockBACK", "txtLockFront", "txtLockBACK", "txtHelpFront", "xtHashback", "xtStockFront", "txtHashFront", "txtFilterback", "txtHelpBack", "texthashValue", "txtHashValue", "txtFilterBack", "texthashFront", "txtHelpBACK", "xtHashFront", "txthashBACK", "txtFilterBACK", "txthashback", "txtStockFront", "xtStockback", "txtRawBACK", "txtClearBACK", "textHashback", "texthashBACK", "txtStockBack", "texthashback", "txtLockBack", "txtHashBACK", "txtFilterFront", "textHashBack", "txtLockback", "xtStockBack", "xtStockBACK", "txthashFront", "txtRawBack", "txthashValue", "texthashBack", "xtHashBack", "txtClearBack", "txtHashback", "txthashBack", "textHashValue", "textHashBACK", "txtHelpback", "txtClearback", "txtRawback", "xtHashBACK", "textHashFront", "txtRawValue"], "hashSeed": ["hashSourceeder", "hashSleeds", " hashSee", "hashSeee", "hashSetter", "hashSeeed", "hashSeeds", "hashSlee", "hashAsetter", "hashSliper", "hashSeder", "hashFetter", "hoAsep", "hashSee", "hashSourceep", "hashSeeeds", "hashAseder", " hashSeiper", "hashSiper", "hashSeiper", "hashAseed", "hoSetter", "hoSeed", "hoSep", "hashFep", "hashSleed", " hashSeeds", "hashFeder", "hashAsep", "hoAseder", "hoAseed", " hashSeeed", "hashSourceeed", " hashSeee", "hoSeder", " hashSeeeds", "hoAsetter", "hashSep", "hashFeed", " hashSiper", "hashSourceetter"], "securityValue": ["SecurityData", "secValue", "securityValues", " securityVal", "SecurityVal", "secValues", "SecurityValue", "securityVal", "secData", "securityData", " securityValues", "secVal", " securityData", "SecurityValues"], "digest": [" digests", "digested", "contse", " digEST", "Diggest", "Digse", "Digested", "dependester", "macester", "dester", "dest", "DigEST", "contested", "Digest", "macest", "digests", "diger", "Diger", "macgest", "dependested", " digested", "dependgest", "Digester", " diger", "digEST", " digester", "diggest", "macested", "dse", "equest", "equet", "dested", "Diget", "dEST", "Digests", " digse", "equse", "dependest", "digse", "der", " diget", "diget", "digester", "contests", "contest", "equester"], "array": ["v", "batch", "number", "string", "binary", "iq", "pair", "ash", "angle", "bar", "length", "map", "angular", "arr", "audio", "row", "arrow", "record", "max", "export", "attribute", "view", "range", "a", " Array", "instance", "area", "ar", "ray", "buffer", "vector", "Array", "raw", "RAY", "av", "ashes", "object", "stage", "our", "sha", "list", "shape", "response", "rays", "share", "now", "archive", "collection"], "sb": ["stab", "sq", "pb", "lp", "abs", "sbm", "nb", "bt", "bg", "rb", "esm", "orb", "ls", "kb", "ctrl", "sg", "rob", "bb", "shell", "obb", "sam", "obs", "bh", "sa", "bis", "ssl", "ib", "gc", "sf", "bps", "erb", "bs", "abb", "eb", "bsp", "soc", "sv", "rub", "bf", "zb", "cb", "ob", "bj", "wb", "gb", "sn", "SB", "lb", "gob"], "j": ["js", "ji", "v", "jj", "aj", "dj", "J", "k", "obj", "z", "jet", "ody", "msg", "ja", "_", "from", "n", "i", "kj", "jo", "oj", "job", "br", "yy", "jp", "jump", "q", "gr", "jit", "ind", "jc", "att", "ij", "x", "uj", "key", "jl", "el", "ix", "json", "g", "it", "bj", "state", "bot"], "b": ["ba", "v", "h", "bound", "binary", "bar", "nb", "bt", "bg", "be", "k", "bu", "rb", "ab", "bb", "bit", "ib", "bis", "B", "base", "fb", "br", "BB", "bs", "db", "eb", "bd", "bf", "bp", "cb", "bi", "mb", "beta", "gb", "bc"], "hash": ["where", "search", "sample", "address", "filter", "ASH", "h", "string", "height", "ash", "tag", "ah", "test", "total", "hz", "uh", "url", "href", "rh", "check", "block", "title", "html", "ssl", "buster", "crypt", "bh", "message", "result", "format", "oh", "ashes", "hex", "data", "report", "value", "sha", "password", "key", "version", "Hash", "response", "header", "handle", "sum", "cache", "json", "flash"]}}
{"id1": "18782385", "id2": "15645004", "code1": "    public void saveFile(MainWindow window) {\n        FileOutputStream stream = null;\n        try {\n            Document outputDoc = new Document();\n            DocType dtd = new DocType(UI, DIRECTORY + File.separator + FILE_NAME_DTD);\n            Element uiElement = new Element(UI);\n            outputDoc.setDocType(dtd);\n            outputDoc.addContent(uiElement);\n            outputDoc.setRootElement(uiElement);\n            uiElement.setAttribute(USE_DEFAULT, \"false\");\n            uiElement.setAttribute(SHOW_TOOL_BAR, Boolean.toString(window.getToolToolBar().isVisible()));\n            uiElement.setAttribute(SHOW_UNIT_BAR, Boolean.toString(window.getUnitToolBar().isVisible()));\n            String currentLFClassName = UIManager.getLookAndFeel().getClass().getName();\n            String systemLFClassName = UIManager.getSystemLookAndFeelClassName();\n            if (currentLFClassName.equals(systemLFClassName)) uiElement.setAttribute(LOOK_AND_FEEL, \"native\"); else uiElement.setAttribute(LOOK_AND_FEEL, \"default\");\n            Element mainWindowElement = new Element(MAIN_WINDOW);\n            uiElement.addContent(mainWindowElement);\n            mainWindowElement.setAttribute(LOCATION_X, Integer.toString(window.getFrame().getX()));\n            mainWindowElement.setAttribute(LOCATION_Y, Integer.toString(window.getFrame().getY()));\n            mainWindowElement.setAttribute(WIDTH, Integer.toString(window.getFrame().getWidth()));\n            mainWindowElement.setAttribute(HEIGHT, Integer.toString(window.getFrame().getHeight()));\n            Element volumeElement = new Element(VOLUME);\n            uiElement.addContent(volumeElement);\n            AudioPlayer player = window.getDesktop().getSoundPlayer();\n            volumeElement.setAttribute(SOUND, Float.toString(player.getVolume()));\n            volumeElement.setAttribute(MUTE, Boolean.toString(player.isMute()));\n            Element internalWindowsElement = new Element(INTERNAL_WINDOWS);\n            uiElement.addContent(internalWindowsElement);\n            MainDesktopPane desktop = window.getDesktop();\n            JInternalFrame[] windows = desktop.getAllFrames();\n            for (JInternalFrame window1 : windows) {\n                Element windowElement = new Element(WINDOW);\n                internalWindowsElement.addContent(windowElement);\n                windowElement.setAttribute(Z_ORDER, Integer.toString(desktop.getComponentZOrder(window1)));\n                windowElement.setAttribute(LOCATION_X, Integer.toString(window1.getX()));\n                windowElement.setAttribute(LOCATION_Y, Integer.toString(window1.getY()));\n                windowElement.setAttribute(WIDTH, Integer.toString(window1.getWidth()));\n                windowElement.setAttribute(HEIGHT, Integer.toString(window1.getHeight()));\n                windowElement.setAttribute(DISPLAY, Boolean.toString(!window1.isClosed()));\n                if (window1 instanceof ToolWindow) {\n                    windowElement.setAttribute(TYPE, TOOL);\n                    windowElement.setAttribute(NAME, ((ToolWindow) window1).getToolName());\n                } else if (window1 instanceof UnitWindow) {\n                    windowElement.setAttribute(TYPE, UNIT);\n                    windowElement.setAttribute(NAME, ((UnitWindow) window1).getUnit().getName());\n                } else {\n                    windowElement.setAttribute(TYPE, \"other\");\n                    windowElement.setAttribute(NAME, \"other\");\n                }\n            }\n            Unit[] toolBarUnits = window.getUnitToolBar().getUnitsInToolBar();\n            for (Unit toolBarUnit : toolBarUnits) {\n                UnitWindow unitWindow = desktop.findUnitWindow(toolBarUnit);\n                if ((unitWindow == null) || unitWindow.isIcon()) {\n                    Element windowElement = new Element(WINDOW);\n                    internalWindowsElement.addContent(windowElement);\n                    windowElement.setAttribute(TYPE, UNIT);\n                    windowElement.setAttribute(NAME, toolBarUnit.getName());\n                    windowElement.setAttribute(DISPLAY, \"false\");\n                }\n            }\n            File configFile = new File(DIRECTORY, FILE_NAME);\n            if (!configFile.getParentFile().exists()) {\n                configFile.getParentFile().mkdirs();\n            }\n            InputStream in = getClass().getResourceAsStream(\"/dtd/ui_settings.dtd\");\n            IOUtils.copy(in, new FileOutputStream(new File(DIRECTORY, \"ui_settings.dtd\")));\n            XMLOutputter fmt = new XMLOutputter();\n            fmt.setFormat(Format.getPrettyFormat());\n            stream = new FileOutputStream(configFile);\n            OutputStreamWriter writer = new OutputStreamWriter(stream, \"UTF-8\");\n            fmt.output(outputDoc, writer);\n        } catch (Exception e) {\n            logger.log(Level.SEVERE, e.getMessage());\n        } finally {\n            IOUtils.closeQuietly(stream);\n        }\n    }\n", "code2": "    private void unzip(File filename) throws ZipException, IOException {\n        ZipInputStream in = new ZipInputStream(new BufferedInputStream(new FileInputStream(filename)));\n        ZipEntry entry = null;\n        boolean first_entry = true;\n        while ((entry = in.getNextEntry()) != null) {\n            if (first_entry) {\n                if (!entry.isDirectory()) {\n                    File subdir = new File(dir + File.separator + filename.getName().substring(0, filename.getName().length() - SUFFIX_ZIP.length()));\n                    if (!subdir.exists()) {\n                        subdir.mkdir();\n                        dir = subdir;\n                    }\n                }\n                first_entry = false;\n            }\n            if (entry.isDirectory()) {\n                FileUtils.forceMkdir(new File(dir + File.separator + entry.getName()));\n            } else {\n                File outfile = new File(dir + File.separator + entry.getName());\n                File outdir = new File(outfile.getAbsolutePath().substring(0, outfile.getAbsolutePath().length() - outfile.getName().length()));\n                if (!outdir.exists()) FileUtils.forceMkdir(outdir);\n                FileOutputStream fo = new FileOutputStream(outfile);\n                BufferedOutputStream bos = new BufferedOutputStream(fo, BUFFER);\n                int read;\n                byte data[] = new byte[BUFFER];\n                while ((read = in.read(data, 0, BUFFER)) != -1) {\n                    read_position++;\n                    bos.write(data, 0, read);\n                }\n                bos.flush();\n                bos.close();\n            }\n        }\n        in.close();\n    }\n", "label": 1, "substitutes": {"saveFile": ["outputPage", "storeFiles", "outputfile", "storeFile", "saveFiles", "outputFiles", " saveFiles", "savefile", " savefile", " savePage", "storePage", "storefile", "savePage", "outputFile"], "window": ["win", "where", "system", "fw", "lock", "file", "height", "before", "remote", "ws", "browser", "event", "history", "context", "device", "stack", "manager", "we", "button", "go", "view", "widget", "box", "query", "scope", "session", "wx", "port", "hw", "console", "env", "html", "Window", "Win", "wait", "server", "volume", "form", " Window", "buffer", "screen", "message", "page", "th", "draw", "doc", "flow", "frame", "document", "client", "stage", "http", "wa", "focus", "driver", "gui", "WIND", "this", "wd", "now", "w", "wall"], "stream": [" fin", "REAM", "Stream", " upload", "is", " con", " is", " steam", "aos", " console", " streams", " din", " status", " session", " sock", " error", " form", " response", " enc", " dos", " resp", "ream", " screen", " zip", " im", " context", " upstream", "os"], "outputDoc": [" outputdoc", "putDoc", "OutputDec", "documentDocument", "displaydoc", "toDec", "documentdoc", "exportDocument", "putMat", "outputMat", "putDec", "OutputDocument", "documentDoc", "displayDoc", "OutputCode", "OutputDoc", "outputDec", "putDocument", "OutputMat", " outputDocument", "toDocument", " outputCode", "toDoc", "outputCode", "displayDocument", "outputDocument", "Outputdoc", "exportCode", "outputdoc", "exportDoc", "toMat"], "dtd": ["dpd", "DTD", "sdpd", "dtif", "sdTD", " dtm", "dhtd", "dhTD", "dhtm", "sdtd", "ttm", "tTD", "Dtd", " dtif", "dtm", "Dpd", "dhtif", " dpd", "dTD", " dTD", "ttd", "ttif"], "uiElement": ["tiObject", "uMember", "tiEntry", "iuBlock", "ulement", "iuEntity", "uMotion", "uelement", "UIEngine", "tielement", "clielement", "zuSecret", "umiSecret", "uiItem", "uiFunction", "uEmail", "uE", "uiEntry", "guiFrame", "iuElement", "iuE", "uciElement", "iuEvent", "UILink", "uEvent", "iielement", "guielement", "iuMotion", "guiEvent", "ucilement", "uiTag", "zuLink", "iuFrame", "wuEmail", "uiBlock", "UIelement", "iuComponent", "tiItem", "uiEvent", "guiEntity", "umiEngine", "guiTag", "iuelement", "uFrame", "umiEntry", "zuEmail", "iulement", "tiEngine", "wuLink", "uiMember", "wuElement", "cuSecret", "uItem", "UIlement", "uiObject", "cuElement", "UIEmail", "cliElement", "iuItem", "uciE", "umiComponent", "UIEntry", "uielement", "cuEntry", "cuToken", "UITag", "UIEvent", "uiToken", "uiEmail", "umiElement", "tiElement", "guiElement", "uObject", "uiFrame", "wuSecret", "uiComponent", "UIEntity", "tilement", "iuObject", "UISecret", "iuTag", "UIE", "uiMotion", "cliEmail", "uFunction", "uiSecret", "umiToken", "uciBlock", "cliMember", "UIBlock", "uiEngine", "uilement", "iiElement", "UIElement", "iiMember", "uciFunction", "iiEmail", "culement", "uElement", "uiLink", "uiEntity", "iuToken", "umilement", "uciEvent", "cuComponent", "iuFunction", "guiE", "uciMotion", "uiE", "zuElement"], "currentLFClassName": ["currentLWClassConfig", "currentLEFClassClass", "currentLEFclassName", "currentLWStyleConfig", "currentLEFclassNames", "currentLFSystemPath", "currentLEFclassPath", "currentLFStyleSet", "currentLEFclassClass", "currentLFclassNames", "currentLWClassName", "currentLFclassPath", "currentLFDisplayClass", "currentLFClassNames", "currentLFClassPath", "currentLWStyleNames", "currentLFStyleName", "currentLFClassClass", "currentLEFClassName", "currentLFFullSet", "currentLWStyleName", "currentLFDisplayPath", "currentLEFClassNames", "currentLFSystemNames", "currentLFclassClass", "currentLFFullConfig", "currentLFDisplayName", "currentLFClassConfig", "currentLFSystemClass", "currentLFclassSet", "currentLFSystemName", "currentLFStyleNames", "currentLFFullName", "currentLWClassSet", "currentLEFClassPath", "currentLFDisplayNames", "currentLWClassNames", "currentLWStyleSet", "currentLFStyleConfig", "currentLFclassName", "currentLFclassConfig", "currentLFFullNames", "currentLFClassSet"], "systemLFClassName": ["systemLFFFilePath", "systemLFFClassPath", "systemLFclassname", "systemLFFFileString", "systemLEFClassname", "systemLFSystemString", "systemLFclassNames", "systemLFclassString", "systemLFFileNames", "systemLFFClassName", "systemLFScreenNames", "systemLFScreenName", "systemLFClassPath", "systemLEFclassName", "systemLFFileName", "systemLFFFileNames", "systemLFSystemNames", "systemLFclassPath", "systemLFFFileName", "systemLFSystemName", "systemLFFilename", "systemLFScreenname", "systemLEFclassname", "systemLFclassName", "systemLFSystemPath", "systemLFFileString", "systemLEFClassName", "systemLFFClassNames", "systemLEFclassPath", "systemLFFClassString", "systemLEFClassNames", "systemLFScreenPath", "systemLEFClassPath", "systemLEFclassNames", "systemLFClassname", "systemLFFilePath", "systemLFClassNames", "systemLFClassString"], "mainWindowElement": ["mainFrameElement", "mainSectionEntry", " mainWinLE", "mainwindowEntry", "mainWindowMENT", "mainScreenElement", " mainWinElement", "mainWinlement", " mainWindowlement", "mainwindowElement", "mainSectionE", " mainFramelement", "mainSectionlement", "mainFramePort", "mainwindowE", "mainSessionE", "mainWindowlement", "MainWindowelement", " mainWindowMENT", "mainWinElement", "MainWindowE", " mainFrameElement", "mainwindowMENT", "mainWindowLE", "MainWindowEntry", "mainSessionElement", "MainWinPort", "MainWinElement", "mainFrameE", "mainWinE", "mainWindowPort", "mainWindowelement", " mainFrameMENT", "mainWinMENT", "mainFrameMENT", "MainWinUser", "mainScreenEntry", " mainWinE", "mainScreenE", "mainWinLE", "MainWindowPort", "MainWinE", "mainWinelement", "mainFrameUser", " mainWinEntry", "mainFrameEntry", "mainFramelement", "mainWinEntry", "mainFrameelement", "mainFrameLE", "mainScreenLE", " mainFrameE", "mainWinPort", "MainWinelement", "mainwindowUser", " mainWindowEntry", " mainFrameEntry", " mainWindowLE", "MainWindowUser", "MainWindowElement", "mainwindowPort", "mainWindowUser", "mainSectionElement", "mainSessionelement", "mainWindowEntry", "mainWinUser", "MainWinEntry", " mainWindowE", "mainWindowE", "mainSessionEntry"], "volumeElement": ["voicelement", "audioElement", " volumeelement", " volumeMember", "volumeEmail", "VolumeEntity", "volumelement", "vineelement", "musicE", "audioE", " volumelement", "voiceelement", "volumeelement", "voiceElement", "vineElement", "musicEntry", "VolumeE", "musicElement", "voiceE", "voiceEntry", " volumeEntity", "VolumeEmail", "volumeE", "VolumeElement", "vinelement", "audioEntry", " volumeEmail", "vineE", " volumeEntry", "uiEntity", "voiceMember", "volumeEntry", "musicMember", "uiEmail", "audioEntity", "volumeMember", "voiceEntity", "volumeEntity", "uiE", " volumeE"], "player": ["sample", "layer", "file", "pro", "program", "loader", "position", "played", "audio", "live", "service", "PLAY", "youtube", "movie", "pipe", "lay", "worker", "profile", "speaking", "volume", "Player", "console", "play", "table", "user", "taker", "video", "score", "radio", "source", "driver", " playing", "playing", "ser", "aster", "peer", "controller", "pool", "er", "game", "uner", "display", " Player"]}}
{"id1": "20660203", "id2": "4750967", "code1": "    public static void main(String args[]) {\n        int temp;\n        int[] a1 = { 6, 2, -3, 7, -1, 8, 9, 0 };\n        for (int j = 0; j < (a1.length * a1.length); j++) {\n            for (int i = 0; i < a1.length - 1; i++) {\n                if (a1[i] > a1[i + 1]) {\n                    temp = a1[i];\n                    a1[i] = a1[i + 1];\n                    a1[i + 1] = temp;\n                }\n            }\n        }\n        for (int i = 0; i < a1.length; i++) {\n            System.out.print(\" \" + a1[i]);\n        }\n    }\n", "code2": "    public void patch() throws IOException {\n        if (mods.isEmpty()) {\n            return;\n        }\n        IOUtils.copy(new FileInputStream(Paths.getMinecraftJarPath()), new FileOutputStream(new File(Paths.getMinecraftBackupPath())));\n        JarFile mcjar = new JarFile(Paths.getMinecraftJarPath());\n    }\n", "label": 0, "substitutes": {"temp": ["fake", "mint", "late", "v", "pt", "dat", "unt", "p", "cum", "txt", "str", "term", "variable", "perature", "mod", "cu", "length", "t", "tem", "count", "fac", "current", "total", "ptr", "deg", "cp", "null", "c", "Temperature", "Temp", "m", "pre", "prime", "iter", "buffer", "result", "tmp", "template", "T", "alt", "mp", "tr", "tc", "emp", "cel", "partial"], "a1": ["xa2", "ao01", "xa0", "aa8", "anache", "wa6", "aa4", "aa1", "areaache", "anOne", "a9", "aa256", "aa10", "aaone", "xa591", "ca1", "aaa8", "pa001", "aone", "aka1", "aeache", "ae1", "A2", "a256", " a0", "pa01", "aa6", "A512", " a256", "alpha9", "aa9", " a4", "era256", "a5", "i512", "aka61", "saone", " a2", "aaa3", "A8", "aache", "aaa6", "area5", "area61", "area1", "aaaOne", "aaa9", "A6", "i1", "aOne", "aa2", "a591", "era591", "aaOne", "a001", "aa3", "a01", " a10", "xa512", "aeOne", "alphaOne", "aa0", "a512", "a61", "ao10", "a6", " a9", "alpha3", "i2", " a591", "i256", "pa1", "a8", "era1", "pa256", "aa512", "a2", "aaa2", "xa1", "a10", "aaa1", "A0", "ao0", "wa0", "era01", "ca256", "a3", "ao256", "xa01", "sa1", "aa5", "wa5", "sa4", "an1", "sa2", "akaache", " a8", " aone", " a61", " a5", "xa256", "ao001", "wa1", "a4", "A1", "ao1", "ca01", "a0", "ca001", " aOne", "alpha1", " a01", " a6", " aache", "aka5"], "j": ["js", "ji", "v", "at", "jj", "dj", "aj", "Ja", "b", "J", "k", "obj", "z", "ja", "adj", "ort", "other", "n", "kj", "jo", "ge", "rel", "job", "jump", "q", "ie", "ind", "jc", "ij", "x", "im", "pr", "uj", "key", "jl", "ix", "tr", "fr", "json", "g", "bj", "ne", "y", "jp"], "i": ["I", "iq", "point", "fire", "ini", "iy", "ci", "gu", "iri", "qi", "key", "list", "ix", "fi", "json", "ui", "this", "php", "iii", "y", "ia", "zi", "ic", "gi", "io", "in", "\u0438", "phi", "oi", "ri", "mi", "iu", "a", "status", "cli", "ims", "iter", "me", "chain", "ip", "ori", "ti", "batch", "li", "id", "my", "is", "si", "ni", "inner", "port", "pi", "yi", "multi", "init", "ind", "ei", "ij", "im", "ai", "sim", "asi", "it", "bi", "hi", "ami", "ji", "di", "ki", "ii", "span", "index", "wi", "uri", "xi", "ie", "ish", "us", "g", "info"]}}
{"id1": "10361370", "id2": "17683082", "code1": "    public static byte[] hash(final byte[] saltBefore, final String content, final byte[] saltAfter, final int repeatedHashingCount) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n        if (content == null) return null;\n        final MessageDigest digest = MessageDigest.getInstance(DIGEST);\n        if (digestLength == -1) digestLength = digest.getDigestLength();\n        for (int i = 0; i < repeatedHashingCount; i++) {\n            if (i > 0) digest.update(digest.digest());\n            digest.update(saltBefore);\n            digest.update(content.getBytes(WebCastellumFilter.DEFAULT_CHARACTER_ENCODING));\n            digest.update(saltAfter);\n        }\n        return digest.digest();\n    }\n", "code2": "    HttpRepository(Path path) throws IOException {\n        super(path);\n        this.url = new URL(path.toURLString());\n        HttpURLConnection.setFollowRedirects(true);\n        this.connection = (HttpURLConnection) url.openConnection();\n        this.ns = Names.getNamespace(path);\n    }\n", "label": 0, "substitutes": {"hash": ["match", "filter", "h", "ash", "tag", "print", "render", "test", "update", "attribute", "index", "check", "profile", "code", "html", "crypt", "message", "ashes", "sign", "key", "password", "header", "version", "Hash", "array", "handle", "sum"], "saltBefore": ["sALTAfter", "saltStart", " saltStart", "sadePrevious", "sashStart", "SaltBefore", " sALTAfter", "saltPrevious", "sALTPrevious", "SALTBefore", "sadeBefore", "saveBefore", "SALTPrevious", " sALTStart", "SaltAfter", "sALTBefore", "saveAfter", "SALTAfter", "SaltPrevious", " sALTBefore", "sashAfter", "sadeAfter", "savePrevious", "sashBefore", "sALTStart", "sadeStart"], "content": ["text", "path", "subject", "description", "string", "file", "sequence", "txt", "any", "str", "Content", "current", "record", "output", "url", "time", "c", "null", "title", "code", "present", "html", "license", "initial", "reason", "config", "expression", "example", "message", "entity", "format", "raw", "input", "document", "media", "object", "comment", "data", "cont", "source", "value", "image", "password", "xml", "json", "translation", "body", "word"], "saltAfter": ["sALTAfter", "vintAfter", "saltResult", "saveBody", "sintBody", "sadeResult", "soltResult", "SaltBefore", "sintBefore", "vintBody", "valtBody", "soltAfter", "vintafter", "sadePost", "sALTafter", "SALTBefore", "soltPost", "SALTResult", "saltPost", "SALTPost", "saltafter", "sALTBody", "SaltPost", "saltBody", "sadeBefore", "saveBefore", "SaltResult", "sALTResult", "SaltAfter", "sALTBefore", "saveAfter", "saveafter", "SALTAfter", "vintBefore", "sALTPost", "valtafter", "sintAfter", "sadeAfter", "valtAfter", "soltBefore", "sintafter", "valtBefore"], "repeatedHashingCount": ["repeatedRashescount", "repeatedHashcount", "repeatedRashingcount", "repeatedHASHCounter", "repeatedRashingCounter", "repeatedHashCount", "repeatedHashesCounter", "repeatedHachingLength", "repeatedRashingLength", "repeatedHashCC", "repeatedHashingCounter", "repeatedHashesLength", "repeatedRashesCounter", "repeatedHASHCount", "repeatedRashCC", "repeatedHashCode", "repeatedHashingCC", "repeatedHashesCount", "repeatedHASHcount", "repeatedHashesCC", "repeatedHachingCount", "repeatedRashesCount", "repeatedRashingCount", "repeatedHashingCode", "repeatedHachingCC", "repeatedHachingCode", "repeatedHASHLength", "repeatedHashingLength", "repeatedHashingcount", "repeatedHashesCode", "repeatedRashCode", "repeatedRashesLength", "repeatedHashescount", "repeatedHashLength", "repeatedRashingCC", "repeatedRashingCode", "repeatedRashCount", "repeatedHashCounter", "repeatedRashLength"], "digest": ["algest", " digEST", "printEST", "descested", "mdest", "dester", "dest", "commested", "Digest", "digum", "argester", "compEST", "digests", "comphash", " Digest", "digEST", "printesting", "digity", "dested", "designested", " digist", " digum", "digist", "hashhash", "mdse", "commity", " digency", "mdested", " digests", "digency", "argEST", "descest", "diagnum", "dighest", "fifEST", " Digested", "Digester", "diagnests", "argest", "fifitude", "hashest", "Digests", "Digum", " digse", "algested", " dighest", "diagnist", " digity", " Digester", "fifest", "dighash", "Digse", "Digested", "debugest", " digesting", "commse", "DigEST", "digert", "mdester", "designest", " digested", "Digute", "algester", "algEST", "dfester", " Digert", " digert", "extse", "descse", "fingerhest", "printest", "digester", "debugitude", "fifency", "dfested", "digute", "digested", "dfest", "compute", "Dighash", "compest", "dfesting", "hashEST", "digitude", "debugency", "descity", "printhest", "extester", "debugEST", " digester", "Digist", "hashute", "fingerEST", "dse", "diagnest", "commest", "dert", "extested", "designesting", " digitude", "extest", "argested", "digse", "fingerest", "fingeresting", "designester", "digesting"], "digestLength": ["digistData", "digesterlength", "digestedOffset", "descestLength", " digestType", "digistLength", "digestedLen", "digestData", "descesterlength", "digestedData", " digestData", "digseOffset", "digesterLen", "digseLen", "descestOffset", " digestLen", "descesterOffset", "digestType", "digselength", "digestOffset", "descestlength", "digesterLength", "digestLen", " digesterType", "descesterLen", " digesterLen", "digesterOffset", " digesterData", "digseLength", "digesterType", "digesterData", "digistLen", "descestLen", "descesterLength", "digestedlength", "digestlength", "digistType", " digesterLength", "digestedType", "digestedLength"], "i": ["err", "ti", "v", "I", "batch", "ic", "iq", "li", "gi", "my", "print", "is", "di", "ii", "z", "in", "j", "phi", "mi", "si", "index", "ini", "n", "ex", "iu", "pi", "ci", "m", "ski", "cli", "uri", "iter", "ms", "multi", "q", "init", "xi", "ind", "gu", "u", "client", "ei", "qi", "me", "im", "x", "uu", "ai", "ix", "sim", "ip", "it", "bi", "mill", "ui", "sql", "y"]}}
{"id1": "17724879", "id2": "8588992", "code1": "    public byte[] getDigest(OMAttribute attribute, String digestAlgorithm) throws OMException {\n        byte[] digest = new byte[0];\n        if (!(attribute.getLocalName().equals(\"xmlns\") || attribute.getLocalName().startsWith(\"xmlns:\"))) try {\n            MessageDigest md = MessageDigest.getInstance(digestAlgorithm);\n            md.update((byte) 0);\n            md.update((byte) 0);\n            md.update((byte) 0);\n            md.update((byte) 2);\n            md.update(getExpandedName(attribute).getBytes(\"UnicodeBigUnmarked\"));\n            md.update((byte) 0);\n            md.update((byte) 0);\n            md.update(attribute.getAttributeValue().getBytes(\"UnicodeBigUnmarked\"));\n            digest = md.digest();\n        } catch (NoSuchAlgorithmException e) {\n            throw new OMException(e);\n        } catch (UnsupportedEncodingException e) {\n            throw new OMException(e);\n        }\n        return digest;\n    }\n", "code2": "    public ActionForward perform(ActionMapping mapping, ActionForm form, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {\n        String status = null;\n        HttpSession session = request.getSession();\n        ReportingBean reportingBean = null;\n        NewConceptBean conceptBean = null;\n        String conceptName = null;\n        String primitive = null;\n        MessageResources errorMessages = MessageResources.getMessageResources(\"com.apelon.apps.dts.treebrowser.resources.error_messages\");\n        LogonUtilities logonUtilities = new LogonUtilities();\n        if (logonUtilities.checkSession(session, status, reportingBean, errorMessages)) {\n            reportingBean = (ReportingBean) session.getAttribute(\"reportingBean\");\n            if ((reportingBean.getMessageHtml().indexOf(\"Classify\")) == -1) {\n                reportingBean.setReportingHtml(\"\");\n            }\n            conceptBean = (NewConceptBean) session.getAttribute(\"newConceptEntity\");\n            conceptName = request.getParameter(\"conceptName\");\n            primitive = request.getParameter(\"primitive\");\n            if (primitive == null) {\n                primitive = \"false\";\n            }\n            conceptBean.setConceptName(conceptName);\n            conceptBean.setPrimitive(primitive);\n            String namespace = conceptBean.getConceptNamespace();\n            if (namespace == null) {\n                reportingBean.setReportingHtml(errorMessages.getMessage(\"classify_3\"));\n                session.setAttribute(\"reportingBean\", reportingBean);\n                status = \"classify_fail\";\n                return (mapping.findForward(status));\n            }\n            String[] roleMods = request.getParameterValues(\"some_or_all\");\n            String[] roleGrps = request.getParameterValues(\"role_group\");\n            Vector roles = conceptBean.getRoles();\n            RoleBean[] roleCons = new RoleBean[roles.size()];\n            roles.copyInto(roleCons);\n            if (roleMods != null && roleGrps != null && roleCons != null) {\n                if (roleCons.length == roleMods.length && roleCons.length == roleGrps.length) {\n                    for (int i = 0; i < roleCons.length; i++) {\n                        roleCons[i].setSomeOrAll(roleMods[i]);\n                        roleCons[i].setRoleGroup(roleGrps[i]);\n                    }\n                }\n            }\n            session.setAttribute(\"newConceptEntity\", conceptBean);\n            NewConceptXMLDisplayBean xmlBean = new NewConceptXMLDisplayBean();\n            xmlBean.setNewConceptXml(conceptBean);\n            String data = BrowserUtilities.encodeUrl(\"conceptXml\") + \"=\" + BrowserUtilities.encodeUrl(xmlBean.getNewConceptXml()) + \"&\" + BrowserUtilities.encodeUrl(\"nameSpace\") + \"=\" + BrowserUtilities.encodeUrl(namespace);\n            XMLPropertyHandler configPh = new XMLPropertyHandler(\"dtsbrowserclassify.xml\");\n            Properties configProps = configPh.getProps();\n            String urlString = configProps.getProperty(\"url\");\n            URL url = new URL(urlString);\n            URLConnection conn = url.openConnection();\n            conn.setDoOutput(true);\n            OutputStreamWriter wr = new OutputStreamWriter(conn.getOutputStream());\n            wr.write(data);\n            wr.flush();\n            BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n            String line;\n            StringBuffer buf = new StringBuffer();\n            while ((line = rd.readLine()) != null) {\n                buf.append(line);\n            }\n            String resultXml = buf.toString();\n            wr.close();\n            rd.close();\n            ClassifiedConceptBean ccBean = new ClassifiedConceptBean();\n            ClassifyResultParser parser = new ClassifyResultParser(resultXml);\n            ResultBuilder rbuilder = new ResultBuilder();\n            rbuilder.setConceptBean(ccBean);\n            rbuilder.setParser(parser);\n            rbuilder.setNamespace(namespace);\n            try {\n                rbuilder.buildResult();\n                ccBean = rbuilder.getConceptBean();\n                ClassifiedConceptDisplayBean displayBean = new ClassifiedConceptDisplayBean();\n                displayBean.setNewConceptHtml(ccBean);\n                session.setAttribute(\"classifyResult\", ccBean);\n                session.setAttribute(\"classifyDisplayResult\", displayBean);\n                status = \"success\";\n            } catch (Exception e) {\n                Categories.dataServer().error(StackTracePrinter.getStackTrace(e));\n                reportingBean.setReportingHtml(errorMessages.getMessage(\"classify_1\") + e.getMessage());\n                session.setAttribute(\"reportingBean\", reportingBean);\n                status = \"classify_fail\";\n            }\n        }\n        return (mapping.findForward(status));\n    }\n", "label": 0, "substitutes": {"getDigest": ["getMDest", "getDigEST", " getMDse", " getDigEST", "getHashest", "getHashEST", " getDigested", "getdigest", "getdigse", "getMDested", "getMDse", "getDigse", " getMDest", " getMDEST", "getdigested", " getDigse", "getDigested", "getHashse", "getMDEST", "getdigEST", " getMDested", "getHashested"], "attribute": ["space", "item", "address", "subject", "description", "at", "operation", "definition", "member", "variable", "missing", "communication", "pair", "property", "event", "position", "al", "Attribute", "relation", "a", "article", "expression", "qualified", "attr", "message", "argument", "information", "element", "each", "command", "ident", "input", "associated", "reference", "document", "name", "object", "att", "data", "application", "value", "report", "password", "and", "metadata", "add", "request", "ribute", "directory", "character", "option", "type", "operator", "management", "policy", "entry", "word"], "digestAlgorithm": ["digestALgo", "digesteralgorithm", "digestAlgebra", "digestSchego", "digestsalgebra", "digestAlgorith", "digestalgebra", "digesterAlgorith", "digestsAlgo", "digestalgorith", "digesteralgebra", "digestALgebra", "digestsalgorithm", "digestPalgorith", "digestsAlgorithm", "digestalgo", "digesterAlgo", "digestPalgorithm", "digesteralgorith", "digestSchegebra", "digesterAlgebra", "digestalgorithm", "digestPalgo", "digestALgorithm", "digestAlgo", "digesterAlgorithm", "digestsalgo", "digestPalgebra", "digesteralgo", "digestSchegorithm", "digestALgorith", "digestsAlgebra"], "digest": ["Digend", "designests", "mdtest", "mdested", "diagnse", "designEST", " digests", "digested", " digEST", "hashEST", "Digested", "Digse", "digitude", "mdest", "DigEST", "Digest", "digests", "designest", "equested", " digested", "digEST", "mditude", "digtest", " digtest", "Digist", "equend", "Digtest", "diagnitude", "diagnest", "equest", "diagnested", " digitude", "hashest", " digist", "Digests", " digse", "digist", "hashend", "digse", "designist", "mdse", "hashested", "equEST", "digend"], "md": ["mac", "mc", "d", "js", "dr", "ud", "pdf", "rpm", "pt", "pd", "mt", "ld", "amd", "mod", "fd", "di", "sm", "nt", "managed", "esm", "nd", "met", "strong", "good", "red", "det", "m", "pm", "ct", "ms", "sd", "dd", "ma", "rm", "hd", "mm", "ds", "mk", "cd", "mind", "ind", "bd", "mg", "mn", "dm", "metadata", "der", "dh", "df", "mb", "cmd", "grad", "MD", "cond", "wd"]}}
{"id1": "17901739", "id2": "4599372", "code1": "    private static void setMembers() {\n        try {\n            URL url = new URL(getTracUrl() + \"newticket\");\n            BufferedReader reader = new BufferedReader(new InputStreamReader(url.openStream()));\n            String buffer = reader.readLine();\n            while (buffer != null) {\n                if (buffer.contains(\"<select id=\\\"component\\\" name=\\\"component\\\">\")) {\n                    Pattern pattern = Pattern.compile(\">[^<]+?<\");\n                    Matcher matcher = pattern.matcher(buffer);\n                    Vector<String> erg = new Vector<String>();\n                    int start = 0;\n                    while (matcher.find(start)) {\n                        int von = matcher.start() + 1;\n                        int bis = matcher.end() - 1;\n                        erg.add(Recoder.recode(buffer.substring(von, bis), \"UTF-8\", Recoder.getDefaultEncoding()));\n                        start = bis;\n                    }\n                    m_strComponents = new String[erg.size()];\n                    erg.toArray(m_strComponents);\n                }\n                if (buffer.contains(\"<select id=\\\"priority\\\" name=\\\"priority\\\">\")) {\n                    Pattern pattern = Pattern.compile(\">[^<]+?<\");\n                    Matcher matcher = pattern.matcher(buffer);\n                    Vector<String> erg = new Vector<String>();\n                    int start = 0;\n                    while (matcher.find(start)) {\n                        int von = matcher.start() + 1;\n                        int bis = matcher.end() - 1;\n                        erg.add(Recoder.recode(buffer.substring(von, bis), \"UTF-8\", Recoder.getDefaultEncoding()));\n                        start = bis;\n                    }\n                    m_strPriorities = new String[erg.size()];\n                    erg.toArray(m_strPriorities);\n                }\n                buffer = reader.readLine();\n            }\n        } catch (MalformedURLException e) {\n            System.out.println(\"e1\");\n        } catch (IOException e) {\n            System.out.println(e);\n        }\n    }\n", "code2": "    @Override\n    public String readFixString(final int len) {\n        if (len < 1) {\n            return StringUtils.EMPTY;\n        }\n        final StringWriter sw = new StringWriter();\n        try {\n            IOUtils.copy(createLimitedInputStream(len), sw, null);\n        } catch (IOException e) {\n            throw createRuntimeException(e);\n        }\n        return sw.toString();\n    }\n", "label": 0, "substitutes": {"setMembers": [" setmembers", "setmembers", " setMember", "getmembers", "initMember", "initmembers", "getMembers", "getMethods", "setMember", "initMembers", "initMethods", "getMember", " setMethods", "setMethods"], "url": ["sl", "gl", "address", "lr", "file", "Url", "nl", "resource", "browser", "loader", "ls", "open", "r", "dl", "ll", "pl", "connection", "ssl", "link", "f", "uri", "base", "URL", "web", "loc", "ur", "conn", "github", "impl", "client", "acl", "hl", "http", "socket", "rl", "l", "ref", "lb", "ul"], "reader": ["file", "io", "redo", "resource", "roller", "loader", "ner", "in", "row", "Reader", "r", "range", "ro", "inner", "rar", "upper", "console", "runner", "rot", "uri", "iterator", "iter", "older", "writer", "anger", "parser", "read", "client", "rr", "ator", "http", "load", "reading", "rl", "driver", "er", "stream", "handler"], "buffer": ["sample", "bytes", "function", "queue", "print", "bridge", "stack", "output", "bb", "profile", "base", "trace", "input", "document", "comment", "line", "source", "memory", "window", "Buffer", "display", "entry", "command", "background", "filter", "back", "button", "summary", "html", "iter", "raw", "frame", "template", "data", "chain", "available", "body", "stream", "word", "batch", "channel", "pause", "history", "position", "phrase", "detail", "null", "vector", "message", "buff", "page", "report", "prototype", "ob", "cache", "text", "string", "binary", "sequence", "append", "b", "length", "program", "row", "thread", "block", "initial", "reason", "note", "expression", "table", "format", "database", "password", "buf"], "pattern": ["system", "path", "sample", "ping", "match", "period", "function", "pdf", "quant", "operation", "field", "problem", "step", "variable", "p", "print", "process", "prot", "map", "sharp", "service", "phrase", "style", "model", "network", "rule", "pat", "expression", "def", "pal", "prefix", "net", " Pattern", "format", "expr", "column", "lead", "parser", "png", "client", "template", "pretty", "patch", "Pattern", "password", "TERN", "group", "shape", "xml", "operator", "find", "policy", "graph", "entry", "command"], "matcher": ["catter", "patternched", "mather", "Matcher", "patatcher", "patifier", "metporter", "matchched", "catcher", " matporter", "compcher", "tagter", "metver", " matatcher", "catver", "tagcher", "mitter", "matchifier", "compchers", "compatcher", "mitcher", "patternatcher", "selectcher", "matatcher", " matifier", "Matifier", "selectherer", "Matter", "patterncher", " mather", " matter", "tagacher", " matver", "Matatcher", "matchcher", "mither", "matchatcher", "patter", "matherer", "matchher", "mitifier", "metatcher", "patacher", "mutifier", "mutger", "matchener", "compter", "metcher", "Mather", "reger", "matger", "cather", "repatch", "matporter", "patchers", "mutcher", "Matchers", "patver", "patener", "matifier", "matter", "reherer", "matchacher", "tagener", "matchter", "selectpatch", "Matver", "mutpatch", "patcher", "mutchers", "matpatch", "matver", "matacher", "patternher", "patporter", "matener", "matchchers", "matched", "pather", " matched", "muther", "recher", "mutherer", "selectger", "matchers"], "erg": ["jer", "eric", "auc", "clus", "ENG", "urg", "ero", "ert", "ger", "arag", "eg", "ERG", "igor", "hung", "eur", "erd", "iac", "erm", "ager", "sg", "peror", "agogue", "mont", "agog", "agame", "gae", "staff", "inal", "enger", "ric", "eng", "gent", "ere", "enz", "\u00e9r", "rah", "her", "olog", "alg", "og", "erc", "erick", "reg", "eh", "roc", "ather", "omer", "ivic", "era", "rog", "der", "uber", "ocr", "kr", "er", "org", "eret", "ung", "igator"], "start": ["started", "seed", "show", "point", "part", "max", "Start", "middle", "close", "base", "starter", "offset", "name", "source", "reset", "key", "top", "addr", "enable", "window", "this", "find", "entry", "starting", "back", "open", "target", "check", "valid", "delay", "iter", "set", "play", "get", "diff", "art", "seek", "client", "rest", "handle", "sum", "next", "state", "head", "match", "first", "before", "pause", "st", "position", "style", "from", "range", "like", "kind", "result", "init", "ind", "error", "pad", "it", "origin", "size", "send", "step", "make", "store", "fill", "begin", "index", " Start", "end", "ify", "draw", "shift", "ish", "add", "wind", "stop"], "von": ["mint", "ln", "ston", "oni", "viol", "innie", "leen", "avan", "bott", "onder", "ideon", "zon", "tan", "onis", "vil", "mon", "rison", "mont", "vard", "bra", "den", "son", "vette", "ley", "nie", "mond", "ldon", "van", "mun", "irin", "umen", "vid", "ano", "won", "hon", "vin", "ton", "melon", "vati", "iann", "ivan", "john", "don", "ben", "san", "vi", "vine", "endon", "aven", "lon", "jen", "ona"], "bis": ["eni", "js", "cos", "bos", "ennis", "bid", "antis", "vs", "rots", "idis", "is", "alli", "zon", "vy", "onis", "ls", " bos", "mis", "rison", "oi", "cin", "ni", "mos", "bits", "bra", "south", "inter", "obs", "fin", "jin", "ldon", "fs", "iter", "fps", "non", "pins", "prefix", "bs", "los", "lis", "oss", "bil", "its", "zo", "xy", "isin", "bles", "ris", "bat", "bes", "mes", "nes", "phis", "ends", "ben", "tis", "lie", "dos", "nis", "pos", "fr", "bi", "lon", "beta", "udi"], "m_strComponents": ["m_intCompors", "m_strChorts", "m_strCommonents", "m_strChors", "m_brComports", "m_strCompors", "m_strcompages", "m_strcompors", "m_strChances", "m_strMessors", "m_strPackances", "m_intCompages", "m_strCommorts", "m_brChances", "m_brChorts", "m_strCompances", "m_strCommances", "m_strMessorts", "m_intcomports", "m_strCommors", "m_intComports", "m_strCompages", "m_brChonents", "m_intcomponents", "m_strContorts", "m_strcomports", "m_strMessonents", "m_brComponents", "m_strContonents", "m_strMessages", "m_brChors", "m_brCompors", "m_brCompances", "m_strPackonents", "m_intcompages", "m_strContages", "m_strPackors", "m_intComponents", "m_strComports", "m_intcompors", "m_strContors", "m_strChonents", "m_strPackorts", "m_strcomponents"], "m_strPriorities": ["m_strPrefifiers", "m_strSpecificitives", "m_strPosings", "m_stringPosites", "m_strPrefies", "m_strPosies", "m_strPerity", "m_stringPosies", "m_stringPriority", "m_stringPosings", "m_strPositives", "m_stringPriories", "m_strRankities", "m_stringPositives", "m_strPriorites", "m_strPriorifiers", "m_strRankings", "m_strPosities", "m_strPosifiers", "m_strPriorings", "m_strPerities", "m_stringPrioritives", "m_strPosity", "m_stringPosifiers", "m_strPosites", "m_strRankifiers", "m_strPriories", "m_strSpecificities", "m_stringPriorifiers", "m_strPriority", "m_strRankies", "m_strPerites", "m_strPrioritives", "m_strPeritives", "m_stringPriorings", "m_stringPriorities", "m_strSpecificites", "m_stringPosity", "m_strPrefings", "m_stringPosities", "m_strPrefities", "m_strSpecificity", "m_stringPriorites"]}}
{"id1": "17111859", "id2": "7761195", "code1": "    private String getHash(String string) {\n        Monitor hashTime = JamonMonitorLogger.getTimeMonitor(Cache.class, \"HashTime\").start();\n        MessageDigest md5 = null;\n        try {\n            md5 = MessageDigest.getInstance(\"MD5\");\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        }\n        md5.reset();\n        md5.update(string.getBytes());\n        byte[] result = md5.digest();\n        StringBuffer hexString = new StringBuffer();\n        for (int i = 0; i < result.length; i++) {\n            hexString.append(Integer.toHexString(0xFF & result[i]));\n        }\n        String str = hexString.toString();\n        hashTime.stop();\n        return str;\n    }\n", "code2": "    public synchronized String encrypt(String plaintext) throws Exception {\n        StringBuffer sb = new StringBuffer();\n        MessageDigest md = null;\n        try {\n            md = MessageDigest.getInstance(\"SHA-512\");\n        } catch (NoSuchAlgorithmException e) {\n            throw new Exception(e.getMessage());\n        }\n        try {\n            md.update(plaintext.getBytes(\"UTF-8\"));\n        } catch (UnsupportedEncodingException e) {\n            throw new Exception(e.getMessage());\n        }\n        byte raw[] = md.digest();\n        String hash = (new BASE64Encoder()).encode(raw);\n        return hash;\n    }\n", "label": 1, "substitutes": {"getHash": ["GetKey", "Gethash", "getKey", "getSum", "GetHash", " gethash", "createHash", "GetSum", "createKey", " getKey", "createhash", "gethash", "createSum", " getSum"], "string": ["text", "sample", "address", "v", "function", "pair", "char", "test", "hash", "strings", "attribute", "filename", "content", "null", "ring", "instance", "pattern", "status", "dump", "prefix", "buffer", "message", "format", "s", "ident", "input", "name", "object", "comment", "data", "source", "value", "key", "password", "chain", "list", "array", "cache", "type", "sql", "space", "word"], "hashTime": ["hashLength", " hashLock", " hashTimer", "clockTime", "clockTimeout", "messageLength", "HashTimes", "HashLock", " hashLength", " hashTimeout", "messageLock", "HashTimer", "messageTimes", "hashLock", "clockTimer", "messageTimer", "messageTime", "HashTime", "hashTimer", " hashTimes", "clockLength", "hashTimes", "hashTimeout", "messageTimeout"], "md5": [" md55", " mdock", "hash5", "MD2", "MD512", " md512", "MD1", " Md3", "md45", "dig45", "det3", " Md5", "hash3", "hash512", " MD5", " MD55", "dig1", " md10", " md3", "dig5", "MD5", " MD3", "det2", " md2", "md55", " MDock", "hash2", "MD45", "MD3", "md1", "MD10", " md1", "md2", " md45", "mdock", "md512", " MD2", " Md55", "det5", " Mdock", "dig2", " MD10", "md10", "md3"], "result": ["search", "cur", "card", "match", "correct", "results", "ret", "sequence", "reverse", "pair", "test", "success", "row", "current", "total", "output", "complete", "work", "product", "r", "RESULTS", "res", "valid", "mate", "table", "params", "su", "comp", "buffer", "Result", "diff", "comment", "hex", "answer", "currency", "report", "done", "comb", "chain", "list", "array", "response", "cache", "cup"], "hexString": ["hexResult", " HexResult", "charArray", "hexChain", " hexStr", "hexBuffer", "charResult", " hexBuffer", " HexString", " HexStr", "alphCharacter", "charString", " hexCharacter", "exBuffer", " hexArray", "hexStr", "charBuffer", "alphString", "exChain", "exString", "exStr", " hexChain", "exArray", " HexArray", "exCharacter", "alphArray", "hexCharacter", "exResult", "alphChain", "hexArray", " hexResult"], "i": ["ti", "v", "ji", "I", "ic", "sequence", "li", "gi", "id", "io", "my", "is", "di", "e", "k", "ii", "ki", "in", "z", "\u0438", "j", "phi", "mi", "si", "index", "ini", "n", "to", "a", "pi", "ci", "m", "cli", "uri", "o", "multi", "q", "xi", "ind", "ei", "u", "gu", "x", "qi", "me", "chain", "ai", "ix", "sim", "l", "ip", "it", "us", "bi", "ui", "hi", "y"], "str": ["text", "dr", "ctr", "ret", "sequence", "p", "txt", "sw", "char", "t", "st", "stable", "hash", "obj", "arr", "msg", "output", "r", "n", "res", "cr", "status", "Str", "br", "buffer", "sp", "out", "STR", "name", "hex", "data", "key", "chain", "enc", "tr", "cache", "fr"]}}
{"id1": "1769771", "id2": "13362846", "code1": "    private void copyFile(File in, File out) throws IOException {\n        FileChannel inChannel = new FileInputStream(in).getChannel();\n        FileChannel outChannel = new FileOutputStream(out).getChannel();\n        try {\n            inChannel.transferTo(0, inChannel.size(), outChannel);\n        } catch (IOException e) {\n            throw e;\n        } finally {\n            if (inChannel != null) inChannel.close();\n            if (outChannel != null) outChannel.close();\n        }\n    }\n", "code2": "    public static void setContenu(ContenuFichierElectronique contenuFichier, FichierElectronique fichierElectronique, UtilisateurIFGD utilisateurCourant) throws IOException, DocumentVideException {\n        if (contenuFichier != null) {\n            SupportDocument support = fichierElectronique.getSupport();\n            support.setFichierElectronique(fichierElectronique);\n            FicheDocument ficheDocument = support.getFicheDocument();\n            String nomFichier = contenuFichier.getNomFichier();\n            String extension = FilenameUtils.getExtension(nomFichier);\n            if (ficheDocument.getFichierElectronique(nomFichier) != null) {\n                FichierElectronique fichierElectroniqueExistant = ficheDocument.getFichierElectronique(nomFichier);\n                if (fichierElectroniqueExistant.getId() != null && !fichierElectroniqueExistant.getId().equals(fichierElectronique.getId())) {\n                    throw new FichierElectroniqueExistantException(nomFichier, ficheDocument);\n                }\n            }\n            if (fichierElectronique.getId() == null) {\n                if (OfficeDocumentPropertiesUtil.canWriteIdIGID(extension)) {\n                    Long idIgid = OfficeDocumentPropertiesUtil.getIdIGID(contenuFichier);\n                    if (idIgid != null) {\n                        throw new FichierElectroniqueExistantException(nomFichier, idIgid, ficheDocument);\n                    }\n                }\n            }\n            InputStream inputStream = contenuFichier.getInputStream();\n            OutputStream outputStream = fichierElectronique.getOutputStream();\n            try {\n                IOUtils.copy(inputStream, outputStream);\n            } finally {\n                try {\n                    inputStream.close();\n                } finally {\n                    outputStream.close();\n                }\n            }\n            String typeMime = contenuFichier.getContentType();\n            long tailleFichier = contenuFichier.getTailleFichier();\n            Date dateDerniereModification = new Date();\n            fichierElectronique.setNom(nomFichier);\n            fichierElectronique.setTypeMime(extension);\n            creerFormatSiNecessaire(typeMime, extension);\n            fichierElectronique.setTaille(tailleFichier);\n            fichierElectronique.setDateDerniereModification(dateDerniereModification);\n            fichierElectronique.setSoumetteur(utilisateurCourant);\n            if (extension.endsWith(\"msg\")) {\n                CourrielUtils.peuplerMetadonneesCourriel(fichierElectronique.getNom(), ficheDocument, contenuFichier.getInputStream(), utilisateurCourant);\n            } else if (extension.endsWith(\"eml\")) {\n                Map<String, Object> properties = new GestionnaireProprietesMimeMessageParser().parseMsg(contenuFichier.getInputStream());\n                CourrielUtils.peuplerMetadonneesCourriel(fichierElectronique.getNom(), ficheDocument, properties, utilisateurCourant);\n            } else {\n                FGDProprietesDocumentUtils.copierMetadonneesProprietes(fichierElectronique, ficheDocument);\n            }\n        }\n    }\n", "label": 1, "substitutes": {"copyFile": [" copyStream", "copyStream", " copyFiles", "CopyFiles", "copyLine", " CopyLine", "CopyLine", " copyLine", " CopyFile", "copyFiles", "CopyFile", " CopyStream", " CopyFiles", "CopyStream"], "in": ["ic", "en", "io", "b", "old", "inf", "is", "up", "cin", "from", "r", "ini", "IN", "inc", "i", "inner", "on", "din", "init", " input", "input", "isin", "ind", "mm", "gin", "source", "In", "el", "ins", "rin", "l", "bin", "inn"], "out": ["err", "v", "serv", "op", "at", "log", "file", "p", "io", "help", "b", "t", "po", "update", "up", "nt", "ot", "msg", "output", "c", "ex", "n", "to", "res", "gt", "o", "net", "s", "OUT", "Out", "l", "it", "ou", "outs", "os", "w"], "inChannel": ["inConnection", " inButton", "InChan", " inConnection", "outChan", "insideChannel", " inCase", "dinchannel", "innCase", "ainChannel", "ainCategory", "insideScope", "insideClient", "innChannel", "inCommand", "outConnection", " inchannel", "dinChan", "sinChannel", "sinButton", "inCategory", "inRoom", " inScope", "inCase", "dinConnection", "innClient", "inButton", " inRoom", "cinRoom", "cinCommand", "sinClient", " inChan", "sinCommand", "insideCategory", "inClient", "intchannel", "intChannel", "ainScope", "outchannel", "innButton", "inChan", "inchannel", "inScope", "ainClient", "intCommand", "sinCase", "InChannel", " inCommand", "dinChannel", "cinChannel", "Inchannel", "InCommand", "intChan", " inCategory", " inClient", "sinRoom"], "outChannel": ["blockChan", "outChan", " outMany", "outputChannel", "neMember", "inMember", "neChan", " outGate", "neSection", "neChannel", "parentChan", "blockGate", "outCh", "cnChan", "cnChannel", "cnManager", "outMember", " outChan", "outGate", "inCh", "outputchannel", "blockChannel", "aosSection", "outSection", "aosMember", "outMany", " outCh", "outchannel", "parentChannel", "inChan", "inchannel", "outputCh", " outManager", "outputChan", "inSection", "blockMany", "aosChan", "outputManager", "parentMany", " outchannel", "parentGate", "outManager", "aosChannel"]}}
{"id1": "12128591", "id2": "14794404", "code1": "    public static final synchronized String hash(String data) {\n        if (digest == null) {\n            try {\n                digest = MessageDigest.getInstance(\"MD5\");\n            } catch (NoSuchAlgorithmException nsae) {\n                log.error(\"Failed to load the MD5 MessageDigest. \" + \"Jive will be unable to function normally.\", nsae);\n            }\n        }\n        try {\n            digest.update(data.getBytes(\"utf-8\"));\n        } catch (UnsupportedEncodingException e) {\n            log.error(e);\n        }\n        return encodeHex(digest.digest());\n    }\n", "code2": "    private String encryptPassword(String password) throws NoSuchAlgorithmException {\n        StringBuffer encryptedPassword = new StringBuffer();\n        MessageDigest md5 = MessageDigest.getInstance(\"MD5\");\n        md5.reset();\n        md5.update(password.getBytes());\n        byte digest[] = md5.digest();\n        for (int i = 0; i < digest.length; i++) {\n            String hex = Integer.toHexString(0xFF & digest[i]);\n            if (hex.length() == 1) {\n                encryptedPassword.append('0');\n            }\n            encryptedPassword.append(hex);\n        }\n        return encryptedPassword.toString();\n    }\n", "label": 1, "substitutes": {"hash": [" address", "h", " code", "id", " check", "print", " text", " id", "update", " message", "code", " equals", "dump", " h", " version", " fingerprint", " salt", " mac", " Hash", "hex", "Hash", " key", " hashing", " body", " signature", " sum"], "data": ["text", "secret", "bytes", "batch", "ata", "dat", "string", "sequence", "any", "output", "content", "mu", "block", "a", "html", "accept", "what", "rel", "padding", "buffer", "table", "message", "result", "out", "raw", "action", "input", "value", "image", "password", "hello", "DATA", "window", "json", "info", "this", "command"], "digest": ["mdested", "mailly", "digly", "mdit", "dese", "digested", " digEST", "initested", "mailest", "Digse", "Digested", "mdest", "DigEST", "deest", "initEST", "Digest", " digave", "initest", "mdester", "digests", "initester", " digested", "mdgest", "Digester", "digEST", "equave", "displayse", " digit", "Digist", "diggest", " digester", "digave", "equest", "mailester", "mailgest", "redly", "mdests", " digist", "redgest", "displayests", "Digests", "mdave", "redest", "deist", " digse", "equse", "digist", "digse", "deested", "displayest", "equit", "mdly", "displayested", "redester", "digit", "mdse", "digester"]}}
{"id1": "23310397", "id2": "2465747", "code1": "    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.main);\n        mButton1 = (Button) findViewById(R.id.myButton1);\n        mButton2 = (Button) findViewById(R.id.myButton2);\n        mTextView1 = (TextView) findViewById(R.id.myTextView1);\n        mButton1.setOnClickListener(new Button.OnClickListener() {\n\n            public void onClick(View v) {\n                String uriAPI = \"http://www.sina.com\";\n                HttpPost httpRequest = new HttpPost(uriAPI);\n                List<NameValuePair> params = new ArrayList<NameValuePair>();\n                params.add(new BasicNameValuePair(\"str\", \"post string\"));\n                try {\n                    httpRequest.setEntity(new UrlEncodedFormEntity(params, HTTP.UTF_8));\n                    HttpResponse httpResponse = new DefaultHttpClient().execute(httpRequest);\n                    if (httpResponse.getStatusLine().getStatusCode() == 200) {\n                        String strResult = EntityUtils.toString(httpResponse.getEntity());\n                        mTextView1.setText(strResult);\n                    } else {\n                        mTextView1.setText(\"Error Response: \" + httpResponse.getStatusLine().toString());\n                    }\n                } catch (ClientProtocolException e) {\n                    mTextView1.setText(e.getMessage().toString());\n                    e.printStackTrace();\n                } catch (IOException e) {\n                    mTextView1.setText(e.getMessage().toString());\n                    e.printStackTrace();\n                } catch (Exception e) {\n                    mTextView1.setText(e.getMessage().toString());\n                    e.printStackTrace();\n                }\n            }\n        });\n        mButton2.setOnClickListener(new Button.OnClickListener() {\n\n            public void onClick(View v) {\n                String uriAPI = \"http://www.sina.com\";\n                HttpGet httpRequest = new HttpGet(uriAPI);\n                try {\n                    HttpResponse httpResponse = new DefaultHttpClient().execute(httpRequest);\n                    if (httpResponse.getStatusLine().getStatusCode() == 200) {\n                        String strResult = EntityUtils.toString(httpResponse.getEntity());\n                        strResult = eregi_replace(\"(\\r\\n|\\r|\\n|\\n\\r)\", \"\", strResult);\n                        mTextView1.setText(strResult);\n                    } else {\n                        mTextView1.setText(\"Error Response: \" + httpResponse.getStatusLine().toString());\n                    }\n                } catch (ClientProtocolException e) {\n                    mTextView1.setText(e.getMessage().toString());\n                    e.printStackTrace();\n                } catch (IOException e) {\n                    mTextView1.setText(e.getMessage().toString());\n                    e.printStackTrace();\n                } catch (Exception e) {\n                    mTextView1.setText(e.getMessage().toString());\n                    e.printStackTrace();\n                }\n            }\n        });\n    }\n", "code2": "    public static String postRequest(String urlString, HashMap data) {\n        String returnData = \"\";\n        try {\n            URL url = new URL(urlString);\n            URLConnection connection = url.openConnection();\n            connection.setDoOutput(true);\n            connection.setDoInput(true);\n            PrintWriter out = new PrintWriter(connection.getOutputStream());\n            Object[] keySet = data.keySet().toArray();\n            Object[] values = data.values().toArray();\n            for (int count = 0; count < keySet.length; count++) {\n                out.print(URLEncoder.encode((String) keySet[count]) + \"=\" + URLEncoder.encode((String) values[count]));\n                if ((count + 1) < keySet.length) out.print(\"&\");\n            }\n            out.close();\n            BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));\n            String inputLine;\n            while ((inputLine = in.readLine()) != null) {\n                returnData += inputLine;\n            }\n            in.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n            returnData = null;\n        }\n        return (returnData);\n    }\n", "label": 0, "substitutes": {"onCreate": ["onNew", "OnCreated", "onsCreate", "onsCre", "onCreated", " onCre", "onCre", "OnNew", " onCreated", "onsNew", "whenCre", " onCreat", "onsCreat", "whenCreate", "onsCreated", "onCreat", "whenCreat", "OnCreate", " onNew", "whenCreated"], "savedInstanceState": ["saveinstanceState", "savedInstantstate", "savedInstEx", "saveInstance_", "savingInstInfo", "savedInstIn", "savingInstEx", "savedinstanceInfo", "saveinstancestate", "savedInstanceEx", "saveinstanceIn", "savedInstance_", "savedInststate", "saveInstanceState", "savedinstanceEx", "savedinstance_", "savedInstantIn", "saveinstance_", "savingInstanceState", "savedanceState", "savedinstancestate", "saveInstanceIn", "savedanceInfo", "savingInstState", "savingInstanceInfo", "savedInstState", "savedInstancestate", "savedinstanceState", "savedInstInfo", "saveInstancestate", "savedInstantState", "savedInst_", "savedInstanceInfo", "savedinstanceIn", "savingInstanceEx", "savedanceEx", "savedInstanceIn", "savedInstant_"], "mButton1": ["mButtonOne", "MButtonOne", "mLabel1", "MLabelOne", "MButton1", "mDialog0", "mActionOne", "mLabel11", "mButton0", "mDialogA", "mButton11", "mAction2", "mSwitch11", "mSwitch1", "MButton2", " mButtonA", "mAction11", "mLabelOne", "MButton11", "mActionA", "mAction1", " mAction0", " mActionA", "mSwitchOne", " mButtonOne", "mLabelA", "mSwitch2", "mButtonA", " mButton0", " mActionOne", " mAction1", "MLabel11", "mLabel0", "mDialogOne", "mAction0", "MLabel2", "mDialog1", "mLabel2", "MLabel1"], "mButton2": ["mLabel3", "mButtonTwo", "mConnector0", "pButton0", "mBut0", "mButton0", "pBut3", " mAction3", "mAction2", " mAction6", "mConnector3", "mQueue2", "mBut2", "mConnector2", "mQueue6", "mAction6", " mButton6", "mConnector6", "pButtonTwo", "mBut3", "mButton3", "mAction3", "pBut0", "mConnectorTwo", "mLabel0", "pBut2", " mButton3", "pButTwo", "pButton2", "pButton3", "mButton6", "mLabel2", "mLabelTwo", " mAction2", "mQueue3", "mButTwo"], "mTextView1": ["mTEXTModel1", "mTextView2", "mTextVName", "mTextModelOne", "mTextStream1", "mTextview4", "mTextView0", "mTEXTModelOne", "mTextviewTab", "mTextViewOnce", "mTextview2", "mTEXTStream4", "mTextBox2", "mTextView8", "mTEXTViewTab", "mTEXTModel3", "mTextRow2", "mTextBoxTab", "mTextModel2", "mTextView4", "mTextBoxOne", "mTextviewOne", "mTextModelTab", "mTextviewName", "mTextViewName", "mTEXTViewOne", "mTEXTviewOne", "mTextModel3", "mTEXTStreamOne", "mTEXTView1", "mTEXTView8", "mTextview8", "mTEXTModelName", "mTEXTviewTab", "mTextModel8", "mTEXTViewOnce", "mTextStreamOne", "mTextRow0", "mTextV3", "mTextModelOnce", "mTextModelName", "mTextBox1", "mTEXTview1", "mTextviewOnce", "mTextview3", "mTEXTViewName", "mTEXTView3", "mTEXTModel2", "mTextRowOne", "mTextStream2", "mTEXTView4", "mTextV1", "mTextview0", "mTEXTModelOnce", "mTEXTview0", "mTextModel1", "mTEXTView0", "mTextStream4", "mTextModel0", "mTextViewOne", "mTextRow1", "mTEXTView2", "mTEXTStream1", "mTEXTview2", "mTEXTview8", "mTextModel4", "mTextBox8", "mTEXTStream2", "mTextV2", "mTextViewTab", "mTextView3", "mTextview1"], "v": ["d", "h", "p", "id", "vp", "V", "b", "t", "e", "lv", "z", "j", "view", "c", "n", "i", "a", "uv", "m", "vm", "f", "o", "q", "u", "x", "sv", "ov", "l", "g", "y", "w"], "uriAPI": ["uriPI", "uriII", "databaseNP", "doiAPI", "databaseAPI", "pictureCI", "folderAPI", "directoryII", "originII", "folderII", "directoryapi", "URIURI", "URIII", "databasePI", "directionAPI", "directionII", "paralleNP", "doiPI", "directionID", "surfacePLE", "surfaceNP", "directionURI", "originAPI", "doiCI", "databasePLE", "uriNP", "databaseCI", "uriVM", "uiURI", "parallePLE", "uriPLE", "uriURI", "databaseVM", "uriID", "originapi", "paralleAPI", "surfacePI", "folderapi", "pictureVM", "URIID", "uiID", "uriapi", "folderURI", "directoryAPI", "surfaceAPI", "URIAPI", "directoryURI", "picturePI", "pictureAPI", "uiII", "uiAPI", "parallePI", "originURI", "uriCI", "doiVM"], "httpRequest": ["facebookRequest", " httpUpon", "ttpQuery", "httpsRequest", "HttpQuery", "httpsCommand", "httpQuery", "httpUpon", "facebookResponse", "httprequest", "facebookrequest", "HttpRequest", " httpQuery", "httQUEST", "HttpUpon", "HttpCommand", " httpCommand", " httprequest", " httpQUEST", "ttpQUEST", "ttpRequest", "httpQUEST", "facebookUpon", "httpCommand", "httpsResponse", "httpsQuery", "httRequest", "ttpCommand", "Httprequest", "httResponse", "HttpResponse", "ttpResponse"], "params": ["settings", "forms", "members", "packages", "p", "np", "objects", "terms", "pps", "groups", "properties", "mas", "fields", "pres", "conf", "pas", "gs", "rs", "names", "pi", "caps", "Parameters", "options", "api", "ps", "times", "phys", "pins", "parts", "padding", "multi", "changes", "pass", "requires", "actions", "tags", "vals", "posts", "lines", "data", "AMS", "details", "keys", "marks", "photos", "pos", "json", "request", "param", "ams", "sql", "values"], "httpResponse": ["HTTPRequest", "httpsRequest", " httpReturn", "HttpReturn", "HttpRes", "httpsResults", "httpResp", "htmlresponse", " httpResp", "htmlResults", "Httpresponse", "httpsresponse", "ttpresponse", "HttpResult", "httpsReturn", "httpReturn", "httpsResult", " httpResult", "htmlResponse", "httpresponse", "ttpResp", "httpRes", "httpsRes", " httpResults", " httpRes", "HTTPResponse", "htmlRequest", "htmlResult", "HTTPResult", "ttpRequest", "ttpResult", "httpsResponse", "HTTPresponse", "httpResults", " httpresponse", "httpResult", "httpsResp", "HttpResponse", "HttpRequest", "ttpResponse"], "strResult": ["STRResult", " strresult", "stringResult", "strResults", " strRes", "STRresult", "stringResults", "STRResponse", "StrResults", "STRResults", "strResponse", "strRes", "StrResult", "strresult", "stringRes", "StrRes", "Strresult", "stringResponse", " strResults", "stringresult", "StrResponse"]}}
{"id1": "18793482", "id2": "9109613", "code1": "    public void modifyApplicationMessage(String locale, String messageName, String messageValue) {\n        Properties properties = new Properties();\n        try {\n            String i18nPath = ServerUtil.removelastResourceURL(ConfigurationServiceImpl.class.getResource(\"/es/ua/tranube/prototype/main/client/TranubeConstants_en.properties\").getPath()).toString();\n            File englishFile = new File(i18nPath + \"TranubeConstants_en.properties\");\n            if (!englishFile.exists()) throw new Exception(\"English file not found\");\n            String propertiesFilePath = i18nPath + \"TranubeConstants_\" + locale + \".properties\";\n            File file = new File(propertiesFilePath);\n            if (!file.exists()) {\n                FileReader in = new FileReader(englishFile);\n                FileWriter out = new FileWriter(file);\n                int c;\n                while ((c = in.read()) != -1) out.write(c);\n                in.close();\n                out.close();\n            }\n            InputStream is = ConfigurationServiceImpl.class.getResourceAsStream(\"/es/ua/tranube/prototype/main/client/TranubeConstants_\" + locale + \".properties\");\n            BufferedReader breader = new BufferedReader(new InputStreamReader(is));\n            String line = null;\n            StringBuilder strBuilder = new StringBuilder();\n            boolean found = false;\n            while ((line = breader.readLine()) != null) {\n                if (line.startsWith(\"#\")) strBuilder.append(line).append(\"\\n\"); else {\n                    String[] pieces = line.split(\"=\");\n                    if (pieces.length == 2) {\n                        if (pieces[0].trim().equals(messageName)) {\n                            strBuilder.append(pieces[0].trim() + \" = \" + messageValue + \"\\n\");\n                            found = true;\n                        } else strBuilder.append(line).append(\"\\n\");\n                    } else strBuilder.append(line).append(\"\\n\");\n                }\n            }\n            if (!found) strBuilder.append(messageName).append(\" = \").append(messageValue).append(\"\\n\");\n            breader.close();\n            is.close();\n            FileWriter writer = new FileWriter(file);\n            writer.write(strBuilder.toString());\n            writer.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n", "code2": "    public static void fileCopy(String from_name, String to_name) throws IOException {\n        File fromFile = new File(from_name);\n        File toFile = new File(to_name);\n        if (fromFile.equals(toFile)) abort(\"cannot copy on itself: \" + from_name);\n        if (!fromFile.exists()) abort(\"no such currentSourcepartName file: \" + from_name);\n        if (!fromFile.isFile()) abort(\"can't copy directory: \" + from_name);\n        if (!fromFile.canRead()) abort(\"currentSourcepartName file is unreadable: \" + from_name);\n        if (toFile.isDirectory()) toFile = new File(toFile, fromFile.getName());\n        if (toFile.exists()) {\n            if (!toFile.canWrite()) abort(\"destination file is unwriteable: \" + to_name);\n        } else {\n            String parent = toFile.getParent();\n            if (parent == null) abort(\"destination directory doesn't exist: \" + parent);\n            File dir = new File(parent);\n            if (!dir.exists()) abort(\"destination directory doesn't exist: \" + parent);\n            if (dir.isFile()) abort(\"destination is not a directory: \" + parent);\n            if (!dir.canWrite()) abort(\"destination directory is unwriteable: \" + parent);\n        }\n        FileInputStream from = null;\n        FileOutputStream to = null;\n        try {\n            from = new FileInputStream(fromFile);\n            to = new FileOutputStream(toFile);\n            byte[] buffer = new byte[4096];\n            int bytes_read;\n            while ((bytes_read = from.read(buffer)) != -1) to.write(buffer, 0, bytes_read);\n        } finally {\n            if (from != null) try {\n                from.close();\n            } catch (IOException e) {\n                ;\n            }\n            if (to != null) try {\n                to.close();\n            } catch (IOException e) {\n                ;\n            }\n        }\n    }\n", "label": 1, "substitutes": {"modifyApplicationMessage": ["modifyapplicationMsg", "modifyServermessage", "modifyServerMessage", "modifyAppmessage", "modureApplicationMsg", "modureAppMessage", "modureApplicationData", "modifyAppData", "modifyapplicationMessage", "modureAppMsg", "modureApplicationMessage", "modifyAppMsg", "modifyapplicationmessage", "modifyApplicationMsg", "modifyapplicationData", "modifyAppMessage", "modifyServerData", "modureApplicationmessage", "modureAppData", "modifyServerMsg", "modifyApplicationmessage", "modifyApplicationData", "modureAppmessage"], "locale": ["locational", "localey", " locales", " localey", "localales", " locALE", "Locale", "Locational", "regale", "regales", "locales", "regALE", " locational", "Localey", "regational", "localaley", "Locales", "localale", "localALE", "LocALE", "locALE", "localational"], "messageName": ["mediaKey", "MessageKey", " messageType", "messageKey", "msgKey", "msgValue", "mediaNAME", "mediaName", "messageType", " messageNames", "messageNAME", "messageNames", " messageNAME", "MessageValue", " messageKey", "MessageName", "msgType", "MessageType", "MessageNames", "MessageNAME", "msgName", "mediaNames"], "messageValue": ["languageName", "languageValue", " messageType", "messageVal", "msgValue", "messageVALUE", "msgvalue", "messageType", "messagevalue", "essageVal", "MessageValue", "MessageName", "languagevalue", "Messagevalue", "essageName", "msgVALUE", "MessageVALUE", "MessageType", "essageValue", " messageVal", "msgName", "MessageVal", "essageType", "languageVALUE"], "properties": ["settings", "pdf", "utils", "results", "pro", "property", "policy", "perties", "profile", " props", "options", "config", "ps", "params", "message", "parts", "files", "project", "pid", "data", "report", "details", "metadata", "json", "types", "prop", " Properties"], "i18nPath": ["i18nePoints", "i18anPoints", "i18lPath", "i18nP", "i18natDriver", "i18neStr", "i18lUrl", "i18bPath", "i8nStr", "i18lStr", "i18bDir", "i18anP", "i18nyDir", "i18lDir", "i18anDir", "i18rPath", "i18nyPath", "i18natP", "i8nUrl", "i18bStr", "i18nePath", "i18nyDriver", "i18neDriver", "i18bUrl", "i18nDir", "i18nDriver", "i18anIf", "i18nPoints", "i18nUrl", "i8lPath", "i8nPath", "i18neUrl", "i18nStr", "i18anPath", "i18rDriver", "i18natPoints", "i18nyIf", "i18neDir", "i18natPath", "i18nIf", "i18rDir", "i8lStr", "i18anDriver", "i18neP", "i18rIf", "i8nDir", "i8lUrl", "i8lDir"], "englishFile": ["englishfile", "languageFiles", "wikiPath", "ianaTable", "enFilename", "Englishfile", "EnglishFilename", "ianafile", "wikifile", "EnglishFiles", " englishDirectory", "EnglishFile", " englishTable", " englishPath", "ianaDirectory", "languagefile", "wikiTable", "ianaPath", "englishPath", "englishTable", "electricFile", "languageFile", "enFile", "enfile", "englishDirectory", "electricDir", "englishPort", "englishDir", "wikiFile", "ianaDir", " englishPort", "ianaPort", "englishFiles", "electricPort", " englishfile", "electricDirectory", "languageFilename", "ianaFile", "enFiles", "englishFilename", " englishDir"], "propertiesFilePath": ["settingsFilePath", "pertiesfilepath", "propertiesfilePath", "propertiesFilenamepath", "propertiesFilenameType", "pertiesFilePath", "propertiesFilesLocation", "propertiesFilenameLocation", "propertiesFileName", "pertiesfilePath", "propertiesFilesType", "pertiesfileType", "pertiesFilepath", "settingsFilenameLocation", "pertiesfileName", "pertiesFileName", "propertiesfileType", "pertiesFileType", "propertiesFilespath", "propertiesFilenameName", "propertiesFileLocation", "propertiesFilenamePath", "settingsFilenamepath", "propertiesFileType", "propertiesFilepath", "settingsFileLocation", "settingsFilenamePath", "propertiesfileName", "propertiesFilesPath", "settingsFilenameName", "propertiesfilepath", "propertiesfileLocation", "settingsFileName", "propertiesFilesName", "settingsFilepath"], "file": ["local", "os", "path", "module", "string", "parent", "io", "resource", "FILE", "print", "channel", "ile", "be", "class", "current", "File", "record", "run", "output", "complete", "filename", "model", "rule", "content", "style", "attribute", "null", "library", "connection", "port", "write", "console", "language", "f", "base", "table", "buffer", "page", "format", "message", "files", "result", "fp", "create", "name", "document", "object", "comment", "application", "data", "source", "report", "key", "image", "use", "fi", "handle", "xml", "domain", "pool", "type", "info", "entry"], "in": ["ic", "en", "sin", "io", "asin", "inf", "al", "cin", "from", "ri", "reader", "ini", "IN", "inc", "i", "inner", "inside", "ar", " din", "iter", "din", "get", "init", "oin", "isin", "input", "ind", "read", "gin", "In", "ai", "ins", "rin", "ir", "it", "bin", "ain", "inn"], "out": ["os", "cos", "again", "at", "log", "put", "sw", "io", "print", "conv", "nt", "aos", "output", "we", "conf", "external", "ex", "to", "n", "check", "write", "inner", "outer", "csv", "o", "set", "net", "screen", "end", "OUT", "Out", "cache", "it", "can", "outs", "ou", "co", "con", "w"], "c": ["d", "mc", "v", "cos", "fc", "unc", "ce", "cu", "char", "k", "t", "count", "ca", "arc", "conf", "lc", "r", "cp", "call", "n", "cod", "i", "cs", "code", "cr", "cc", "col", "cf", "ct", "cl", "\u00e7", "cap", "ch", "cd", "etc", "u", "cm", "nc", "x", "con", "cont", "ac", "chain", "C", "rc", "cb", "l", "cache", "character", "ec", "gc", "pc", "bc", "co", "dc"], "is": ["iss", "ic", "isl", "isa", "sis", "ais", "ri", "iris", "i", "ios", "bis", "sit", "es", "as", "IS", "lis", "its", "\u00eds", "isin", "ris", "sys", "isf", "tis", "Is", "ins", "nis", "it", "isi", "isc", "os", "iso"], "breader": ["browe", " breade", " breadar", "brewer", "bleder", " breadr", "bber", " breadber", "bbr", "browger", "bler", "brewger", "brewber", "bbar", "breadger", "breadber", " breadger", "breadder", "brewe", "brower", "bbder", "bleer", "breade", "breadr", "browber", "breadar", " breadder", "blear"], "line": ["text", "ln", "sample", "cell", "log", "sequence", "string", "nl", "queue", "inline", "point", "mail", "part", "char", "row", "stroke", "phrase", "no", "detail", "record", "left", "rule", "shell", "section", "email", "edge", "range", "word", "ice", "block", "node", "query", "label", "port", "code", "side", "link", "stay", "note", "iter", "trace", "normal", "slice", "message", "lin", "entity", "page", "column", "parse", "lo", "frame", "liner", "comment", "lines", "lane", "ine", "online", "le", "eline", "chain", "header", "Line", "l", "LINE", "ip", "handle", "cmd", "next", "body", "continue", "entry", "se"], "strBuilder": [" strBuffer", "frBuilt", "stringBuild", "strBuilt", " strBuild", "Strbuilder", "stringBuffer", "StrBuffer", "StrBuilder", "strBu", "strBuffer", "frBuild", "StrBuilt", "frParser", " strBu", "objBuilder", "arrParser", "arrBuilder", "strParser", "arrBuffer", "stringParser", "stringBuilder", "stringBuilt", " strbuilder", "StrBuild", "arrbuilder", "StrParser", "objBuild", "arrBu", "frBuilder", "StrBu", "arrBuild", "strbuilder", "objbuilder", " strParser", "strBuild", "objBuffer", "stringbuilder"], "pieces": ["places", "bytes", "terms", "groups", "eps", "Parts", "tips", "sections", "rings", "strings", "fits", "plates", "blocks", "knife", "finals", "bits", "steps", "links", "feet", "caps", "piece", "fixes", "units", "ces", "maps", "pointers", "ps", "times", "letters", "pins", "parts", "its", "ops", "xes", "tools", "services", "lines", "sts", "powers", "items", "keys", "cars", "checks", "words", "players", "cuts", "types", "ties", "ctors"], "found": ["created", "err", "started", "search", "changed", " Found", "printed", "first", "bool", "given", "filled", "sold", "finished", "supported", "used", "old", "count", "loaded", "success", " founded", "identified", "needed", "ed", "compl", "index", "good", "opened", "built", "expected", "valid", "confirmed", "failed", "fixed", "released", "tested", " caught", "sent", "focused", "read", "forced", "Found", "successful", "mounted", " detected", "done", "finder", "empty", "installed", "available", "defined", "find"]}}
{"id1": "6966398", "id2": "13563706", "code1": "    public static void main(String[] args) {\n        System.out.println(\"Chapter 16: example SignedPdf\");\n        System.out.println(\"-> Creates a signed PDF;\");\n        System.out.println(\"-> jars needed: iText.jar\");\n        System.out.println(\"-> files generated in /results subdirectory:\");\n        System.out.println(\"   Resource needed: .keystore\");\n        System.out.println(\"-> Resulting PDFs: unsigned_message.pdf, signed_message.pdf,\");\n        System.out.println(\"   corrupted_message.pdf, signed_message_invisible.pdf,\");\n        System.out.println(\"   double_signed_message.pdf, revision_1.pdf and revision_2.pdf\");\n        createPdf();\n        PdfReader reader;\n        try {\n            KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n            ks.load(new FileInputStream(\"resources/in_action/chapter16/.keystore\"), \"f00b4r\".toCharArray());\n            PrivateKey key = (PrivateKey) ks.getKey(\"foobar\", \"r4b00f\".toCharArray());\n            Certificate[] chain = ks.getCertificateChain(\"foobar\");\n            reader = new PdfReader(\"results/in_action/chapter16/unsigned_message.pdf\");\n            FileOutputStream os = new FileOutputStream(\"results/in_action/chapter16/signed_message.pdf\");\n            PdfStamper stamper = PdfStamper.createSignature(reader, os, '\\0');\n            PdfSignatureAppearance appearance = stamper.getSignatureAppearance();\n            appearance.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);\n            appearance.setCertificationLevel(PdfSignatureAppearance.CERTIFIED_FORM_FILLING);\n            appearance.setReason(\"It's personal.\");\n            appearance.setLocation(\"Foobar\");\n            appearance.setVisibleSignature(new Rectangle(30, 750, 500, 565), 1, null);\n            stamper.close();\n        } catch (KeyStoreException e) {\n            e.printStackTrace();\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        } catch (CertificateException e) {\n            e.printStackTrace();\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        } catch (UnrecoverableKeyException e) {\n            e.printStackTrace();\n        } catch (DocumentException e) {\n            e.printStackTrace();\n        }\n        try {\n            reader = new PdfReader(\"results/in_action/chapter16/signed_message.pdf\");\n            Document document = new Document(reader.getPageSizeWithRotation(1));\n            PdfCopy copy = new PdfCopy(document, new FileOutputStream(\"results/in_action/chapter16/corrupted_message.pdf\"));\n            document.open();\n            copy.addPage(copy.getImportedPage(reader, 1));\n            document.close();\n        } catch (IOException ioe) {\n            ioe.printStackTrace();\n        } catch (DocumentException de) {\n            de.printStackTrace();\n        }\n        try {\n            KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n            ks.load(new FileInputStream(\"resources/in_action/chapter16/.keystore\"), \"f00b4r\".toCharArray());\n            PrivateKey key = (PrivateKey) ks.getKey(\"foobar\", \"r4b00f\".toCharArray());\n            Certificate[] chain = ks.getCertificateChain(\"foobar\");\n            reader = new PdfReader(\"results/in_action/chapter16/unsigned_message.pdf\");\n            FileOutputStream os = new FileOutputStream(\"results/in_action/chapter16/signed_message_invisible.pdf\");\n            PdfStamper stamper = PdfStamper.createSignature(reader, os, '\\0');\n            PdfSignatureAppearance appearance = stamper.getSignatureAppearance();\n            appearance.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);\n            appearance.setReason(\"It's personal.\");\n            appearance.setLocation(\"Foobar\");\n            stamper.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        try {\n            reader = new PdfReader(\"results/in_action/chapter16/signed_message.pdf\");\n            KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n            ks.load(new FileInputStream(\"resources/in_action/chapter16/.keystore\"), \"f00b4r\".toCharArray());\n            PrivateKey key = (PrivateKey) ks.getKey(\"foobar\", \"r4b00f\".toCharArray());\n            Certificate[] chain = ks.getCertificateChain(\"foobar\");\n            FileOutputStream os = new FileOutputStream(\"results/in_action/chapter16/double_signed_message.pdf\");\n            PdfStamper stamper = PdfStamper.createSignature(reader, os, '\\0', null, true);\n            PdfSignatureAppearance appearance = stamper.getSignatureAppearance();\n            appearance.setCrypto(key, chain, null, PdfSignatureAppearance.SELF_SIGNED);\n            appearance.setReason(\"Double signed.\");\n            appearance.setLocation(\"Foobar\");\n            appearance.setVisibleSignature(new Rectangle(300, 750, 500, 800), 1, \"secondsig\");\n            stamper.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        try {\n            CertificateFactory cf = CertificateFactory.getInstance(\"X509\");\n            Collection col = cf.generateCertificates(new FileInputStream(\"resources/in_action/chapter16/foobar.cer\"));\n            KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n            ks.load(null, null);\n            for (Iterator it = col.iterator(); it.hasNext(); ) {\n                X509Certificate cert = (X509Certificate) it.next();\n                System.out.println(cert.getIssuerDN().getName());\n                ks.setCertificateEntry(cert.getSerialNumber().toString(Character.MAX_RADIX), cert);\n            }\n            reader = new PdfReader(\"results/in_action/chapter16/double_signed_message.pdf\");\n            AcroFields af = reader.getAcroFields();\n            ArrayList names = af.getSignatureNames();\n            String name;\n            for (Iterator it = names.iterator(); it.hasNext(); ) {\n                name = (String) it.next();\n                System.out.println(\"Signature name: \" + name);\n                System.out.println(\"Signature covers whole document: \" + af.signatureCoversWholeDocument(name));\n                System.out.println(\"Document revision: \" + af.getRevision(name) + \" of \" + af.getTotalRevisions());\n                FileOutputStream os = new FileOutputStream(\"results/in_action/chapter16/revision_\" + af.getRevision(name) + \".pdf\");\n                byte bb[] = new byte[8192];\n                InputStream ip = af.extractRevision(name);\n                int n = 0;\n                while ((n = ip.read(bb)) > 0) os.write(bb, 0, n);\n                os.close();\n                ip.close();\n                PdfPKCS7 pk = af.verifySignature(name);\n                Calendar cal = pk.getSignDate();\n                Certificate pkc[] = pk.getCertificates();\n                System.out.println(\"Subject: \" + PdfPKCS7.getSubjectFields(pk.getSigningCertificate()));\n                System.out.println(\"Document modified: \" + !pk.verify());\n                Object fails[] = PdfPKCS7.verifyCertificates(pkc, ks, null, cal);\n                if (fails == null) System.out.println(\"Certificates verified against the KeyStore\"); else System.out.println(\"Certificate failed: \" + fails[1]);\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n", "code2": "    public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n        String selectedPage = request.getParameter(\"SelectedPage\");\n        Page page = null;\n        PortalRequest portalRequest = PortalRequest.getCurrentRequest();\n        if (selectedPage == null) {\n            try {\n                Property pageProp = Property.getProperty(\"HomePage\");\n                selectedPage = pageProp.getValue();\n            } catch (PersistentModelException e) {\n                myLogger.info(\"Page could not be found due to an exception\");\n                response.sendError(response.SC_NOT_FOUND);\n                return;\n            }\n        }\n        myLogger.info(\"Handling Page Request for Page \" + selectedPage);\n        try {\n            if (page == null) {\n                try {\n                    page = Page.getPage(Long.parseLong(selectedPage));\n                } catch (NumberFormatException e) {\n                    List<Page> possiblePage = Page.findByName(selectedPage);\n                    if (possiblePage.size() > 0) {\n                        page = possiblePage.get(0);\n                    } else {\n                        response.sendError(response.SC_NOT_FOUND);\n                        return;\n                    }\n                }\n            }\n            if (!page.isVisibleTo(portalRequest.getCurrentUser())) {\n                Property pageProp = Property.getProperty(\"HomePage\");\n                selectedPage = pageProp.getValue();\n                page = Page.getPage(Long.parseLong(selectedPage));\n            }\n            try {\n                Property property = Property.getProperty(\"LogPageRequests\");\n                if (property.getValue().toLowerCase().equals(\"true\")) {\n                    String referer = request.getHeader(\"Referer\");\n                    if (referer == null || referer.indexOf(portalRequest.getRequest().getServerName()) > 0) {\n                        referer = \" \";\n                    } else {\n                        if (referer.length() >= 200) {\n                            referer = referer.substring(0, 198);\n                        }\n                    }\n                    PageRequest.createRequest(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), portalRequest.getRequest().getRemoteAddr(), referer);\n                }\n            } catch (PersistentModelException e) {\n                myLogger.log(Level.WARNING, \"Log Page Requests property was not found.\", e);\n            }\n            if (page.isVisibleTo(portalRequest.getCurrentUser())) {\n                HttpSession session = request.getSession();\n                if (session != null) {\n                    RecentlyViewedManager rvm = (RecentlyViewedManager) session.getAttribute(\"ipoint.RecentlyViewedManager\");\n                    if (rvm == null) {\n                        rvm = new RecentlyViewedManager();\n                    }\n                    rvm.add(page);\n                    session.setAttribute(\"ipoint.RecentlyViewedManager\", rvm);\n                }\n                PageCacheEntry entry = null;\n                if (!portalRequest.isPost() && !page.isEditableBy(portalRequest.getCurrentUser())) {\n                    try {\n                        int pageCacheTime = 60000;\n                        try {\n                            Property pageCacheTimeProperty = Property.getProperty(\"PageCacheTime\");\n                            pageCacheTime = Integer.parseInt(pageCacheTimeProperty.getValue());\n                            pageCacheTime *= 1000;\n                        } catch (PersistentModelException pme) {\n                            myLogger.warning(\"Ignoring Exception when retrieving PageCacheTime property\");\n                        } catch (NumberFormatException nfe) {\n                        }\n                        entry = PageCacheEntry.find(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), pageCacheTime);\n                    } catch (PersistentModelException e) {\n                        myLogger.log(Level.WARNING, \"An error occurred finding a page cache entry\", e);\n                    }\n                }\n                response.setContentType(\"text/html\");\n                response.setHeader(\"Cache-Control\", \"no-cache\");\n                boolean processed = false;\n                if (entry != null) {\n                    String tempFile = entry.getTempFile();\n                    File file = new File(tempFile);\n                    if (file.exists() && file.isFile() && file.canRead()) {\n                        FileReader reader = new FileReader(file);\n                        BufferedReader br = new BufferedReader(reader);\n                        PrintWriter out = response.getWriter();\n                        out.write(\"<!-- Starting to output cached page in \" + portalRequest.elapsedTime() + \" ms -->\\n\");\n                        while (br.ready()) {\n                            out.write(br.readLine() + \"\\n\");\n                        }\n                        out.write(\"<!-- Cached output produced in \" + portalRequest.elapsedTime() + \" ms -->\\n\");\n                        reader.close();\n                        processed = true;\n                        portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageTotal, page.getName() + \"-\" + page.getID(), portalRequest.elapsedTime(), true);\n                    } else {\n                        entry.delete();\n                    }\n                }\n                if (!processed) {\n                    PrintWriter out = response.getWriter();\n                    out.write(\"<!-- Output produced by iPoint Portal -->\\n\");\n                    PageRenderer renderer = new PageRenderer(page);\n                    long startTime = System.currentTimeMillis();\n                    request.setAttribute(ELConstants.IPOINT_USER, portalRequest.getCurrentUser());\n                    request.setAttribute(ELConstants.IPOINT_PAGE, page);\n                    request.setAttribute(ELConstants.IPOINT_TEMPLATE, page.getTemplate());\n                    request.setAttribute(ELConstants.IPOINT_PORTAL_PROPERTIES, Property.getPropertiesMap());\n                    request.setAttribute(ELConstants.IPOINT_USER_PROPERTIES, portalRequest.getCurrentUser().getProperties());\n                    renderer.preProcess();\n                    portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PagePreProcess, page.getName() + \"-\" + page.getID(), System.currentTimeMillis() - startTime, false);\n                    long renderStart = System.currentTimeMillis();\n                    renderer.render();\n                    portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageRender, page.getName() + \"-\" + page.getID(), System.currentTimeMillis() - renderStart, false);\n                    portalRequest.getMBeans().incrementStatistics(ManagementMBeans.StatisticsType.PageTotal, page.getName() + \"-\" + page.getID(), System.currentTimeMillis() - startTime, false);\n                    out.write(\"<!-- output produced in \" + PortalRequest.getCurrentRequest().elapsedTime() + \" ms -->\\n\");\n                    if (!page.isEditableBy(portalRequest.getCurrentUser())) {\n                        if (response instanceof CachingResponseWrapper) {\n                            CachingResponseWrapper crw = (CachingResponseWrapper) response;\n                            crw.flushBuffer();\n                            Property tempProperty = Property.getProperty(\"UploadLocation\");\n                            File tempDirectory = new File(tempProperty.getValue());\n                            if (tempDirectory.exists() && tempDirectory.canWrite()) {\n                                File file = File.createTempFile(\"iPointPage\", \".html\", tempDirectory);\n                                try {\n                                    FileWriter fw = new FileWriter(file);\n                                    fw.write(crw.getOutput());\n                                    fw.flush();\n                                    fw.close();\n                                    PageCacheEntry.create(portalRequest.getCurrentHREF(), page, portalRequest.getCurrentUser(), file.getAbsolutePath());\n                                } catch (IOException e) {\n                                }\n                            } else {\n                                myLogger.warning(\"Can not write to directory \" + tempProperty.getValue());\n                            }\n                        }\n                    }\n                }\n            } else {\n                myLogger.info(\"Current User is Forbidden from seeing this Page\");\n                response.sendError(response.SC_FORBIDDEN);\n            }\n        } catch (PersistentModelException e) {\n            myLogger.log(Level.INFO, \"Unable to find page \" + selectedPage, e);\n            response.sendError(response.SC_NOT_FOUND);\n        } catch (PresentationException pe) {\n            pe.printStackTrace();\n            throw new ServletException(\"Error processing the page\", pe);\n        }\n    }\n", "label": 1, "substitutes": {"reader": ["sr", "dr", "lr", " readers", "file", "io", "handler", "cer", "redo", "roller", " read", "rx", "wrapper", "loader", "ner", "row", "Reader", "mr", "ri", "r", "rs", "query", "ro", "inner", "builder", "runner", "rot", "iter", "buffer", "older", "writer", "read", "parser", "input", "rr", "rer", "rl", "driver", "rc", "ocr", "this", "er", "stream", "rar"], "ks": ["ates", "uk", "agles", "vs", "ars", "ups", "k", "ki", "eps", "ls", "kb", "akes", "hs", "ke", "cks", "nets", "uds", "kies", "ols", "cs", "kens", "obs", "ces", "fs", "sk", "ans", "ros", "ses", "ms", "bs", "icks", "ck", "oss", "KS", "eks", "kes", "kas", "sky", "ds", "mk", "ips", "keys", "kk", "checks", "kr", "km", "ss", "qs", "ys"], "key": ["Key", "file", "by", "pair", "my", "cer", "char", "k", "hash", "obj", "ox", "service", "ca", "ssh", "ke", "owner", "null", "trust", "KEY", "link", "base", "sk", "root", "ek", "user", "core", "sky", "power", "mk", "client", "object", "sign", "x", "tk", "password", "keys", "ey", "info", "type", "er", "y", "entry"], "chain": ["path", "batch", "number", "string", "file", "sequence", "binary", "Chain", "pair", "ce", "channel", "component", "test", "sche", "hash", "stack", "family", "ca", "c", "range", "box", "block", "check", "code", "piece", "chains", "base", "trace", "form", "table", "result", "root", "frame", "sign", "bank", "data", "password", "group", "list", "cache", "pool", "can", "type", "ver", "stream"], "os": ["js", "cos", "oses", "bos", "oos", "oes", "uts", "io", "ose", "is", "ot", "ox", "OS", "aos", "ls", "ts", "ols", "ios", "cs", "obs", "fs", "o", "ps", "ms", "osi", "bs", "los", "oss", "oS", "oids", "out", "ops", "oso", "ds", "sys", "Os", "pos", "us", "css", "ys"], "stamper": [" stcammer", " strammer", "stammer", "stimper", " stramPER", " strampler", "stampler", "strampler", " stumter", "stamter", " stcampler", "stamPER", " stammer", "font", "stummer", " stcamter", " stimper", "_", " stimter", " stamPER", "stAmpler", "good", "stAmmer", "Print", "stumpler", "annot", "stumper", "stumter", "The", "valid", "stramper", " stummer", "def", " stampler", " stcamper", "stAmper", " stumpler", " stimmer", " stramper", "stAmPER", "stimPER", "println", "read", " stumper", "strammer", "stimmer", " stamter", "stimpler", " stimpler", "this", "important", "stramPER", "New"], "appearance": ["apearances", "apearance", "accearance", "appreciation", "displayears", "attearances", "Appearances", "patternearances", "suppeared", "Appeared", " appearances", "patternearing", "accears", "appearing", "suppearance", "apearing", "displayendix", "displayearing", "appendix", "appearances", "displayreciation", "ascearance", "accearances", "apears", " appearing", "displayearance", "attlies", "attearance", "Applies", "atteared", "ascearing", "acreciation", "appeared", "patternearance", " appeared", "acclies", "ascears", "appears", "applies", "displaylies", "patternendix", "acearances", "aceared", "apreciation", "displayeared", "acearance", "Appearance", "displayearances", "aplies", "ascearances", "suppearances", " appendix", "apeared"]}}
{"id1": "7908169", "id2": "823074", "code1": "    public String execute() {\n        String dir = \"E:\\\\ganymede_workspace\\\\training01\\\\web\\\\user_imgs\\\\\";\n        HomeMap map = new HomeMap();\n        map.setDescription(description);\n        Integer id = homeMapDao.saveHomeMap(map);\n        FileOutputStream fos;\n        try {\n            fos = new FileOutputStream(dir + id);\n            IOUtils.copy(new FileInputStream(imageFile), fos);\n            IOUtils.closeQuietly(fos);\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n        return list();\n    }\n", "code2": "    public void convert(File src, File dest) throws IOException {\n        InputStream in = new BufferedInputStream(new FileInputStream(src));\n        DcmParser p = pfact.newDcmParser(in);\n        Dataset ds = fact.newDataset();\n        p.setDcmHandler(ds.getDcmHandler());\n        try {\n            FileFormat format = p.detectFileFormat();\n            if (format != FileFormat.ACRNEMA_STREAM) {\n                System.out.println(\"\\n\" + src + \": not an ACRNEMA stream!\");\n                return;\n            }\n            p.parseDcmFile(format, Tags.PixelData);\n            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n                System.out.println(\"\\n\" + src + \": contains UIDs!\" + \" => probable already DICOM - do not convert\");\n                return;\n            }\n            boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n            int pxlen = p.getReadLength();\n            if (hasPixelData) {\n                if (inflate) {\n                    ds.putUS(Tags.BitsAllocated, 16);\n                    pxlen = pxlen * 4 / 3;\n                }\n                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n                    System.out.println(\"\\n\" + src + \": mismatch pixel data length!\" + \" => do not convert\");\n                    return;\n                }\n            }\n            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n            ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n            ds.putUI(Tags.SOPClassUID, classUID);\n            if (!ds.contains(Tags.NumberOfSamples)) {\n                ds.putUS(Tags.NumberOfSamples, 1);\n            }\n            if (!ds.contains(Tags.PhotometricInterpretation)) {\n                ds.putCS(Tags.PhotometricInterpretation, \"MONOCHROME2\");\n            }\n            if (fmi) {\n                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n            }\n            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n            try {\n            } finally {\n                ds.writeFile(out, encodeParam());\n                if (hasPixelData) {\n                    if (!skipGroupLen) {\n                        out.write(PXDATA_GROUPLEN);\n                        int grlen = pxlen + 8;\n                        out.write((byte) grlen);\n                        out.write((byte) (grlen >> 8));\n                        out.write((byte) (grlen >> 16));\n                        out.write((byte) (grlen >> 24));\n                    }\n                    out.write(PXDATA_TAG);\n                    out.write((byte) pxlen);\n                    out.write((byte) (pxlen >> 8));\n                    out.write((byte) (pxlen >> 16));\n                    out.write((byte) (pxlen >> 24));\n                }\n                if (inflate) {\n                    int b2, b3;\n                    for (; pxlen > 0; pxlen -= 3) {\n                        out.write(in.read());\n                        b2 = in.read();\n                        b3 = in.read();\n                        out.write(b2 & 0x0f);\n                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n                        out.write(b3 >> 4);\n                    }\n                } else {\n                    for (; pxlen > 0; --pxlen) {\n                        out.write(in.read());\n                    }\n                }\n                out.close();\n            }\n            System.out.print('.');\n        } finally {\n            in.close();\n        }\n    }\n", "label": 1, "substitutes": {"execute": ["Exec", "sample", "submit", "apply", "results", "invoke", "delete", "show", "render", "process", "store", "test", "update", "exist", "select", "edit", "write", "insert", "result", "command", "diff", "create", " exec", "save", "exec", "sql", "launch", "install"], "dir": ["direct", "d", "path", "file", "lib", " Dir", "parent", "io", "mod", "manager", "url", "dl", "ext", "uri", "base", "rel", "desc", "def", "prefix", "dis", "loc", "root", "tmp", "project", "Directory", "Dir", "db", "ind", "name", "lim", " directory", "www", "dist", "folder", "home", "addr", "pkg", "ir", "directory", "pos", "DIR", "wd", "dial"], "map": ["master", "build", "module", "address", "op", "lock", "file", "forge", "mt", "make", "mod", "tool", "hash", "sm", "open", "view", "pack", "cp", "block", "mem", "pl", "define", "meta", "m", "maps", "def", "set", "form", "app", "raw", "project", "collect", "create", "parse", "mm", "ml", "mk", "apt", "load", "data", "ap", "save", "add", "image", "use", "metadata", "mp", "shape", "key", "ape", "xml", "cache", "MAP", "apper"], "id": ["d", "path", "rid", "part", "fd", "uid", "k", "mid", "hash", "count", "num", "ids", "aid", "sid", "url", "index", "kid", "a", "ad", "ID", "m", "link", "s", "ident", "pid", "Id", "ide", "name", "oid", "add", "key", "and", "with", "ip", "it", "info", "order", "ref"], "fos": ["Fos", "eOS", "fooss", "bos", "woss", "floser", "Fres", " fres", "eos", " fo", "woes", "bOS", "foss", "bOs", "wOS", "foes", "fOs", "flos", "eoes", "boss", "fres", " fOs", "loss", "boes", "los", " foss", "floss", "lo", "foos", "Fo", "foo", "eo", "foser", "fo", "flOs", " foser", "lres", "wo", "boser", "fOS", "wos", "foOS", "Foss", "eoss"]}}
{"id1": "17716716", "id2": "12782570", "code1": "    public static String plainToMD(LoggerCollection loggerCol, String input) {\n        byte[] byteHash = null;\n        MessageDigest md = null;\n        StringBuilder md5result = new StringBuilder();\n        try {\n            md = MessageDigest.getInstance(\"MD5\");\n            md.reset();\n            md.update(input.getBytes());\n            byteHash = md.digest();\n            for (int i = 0; i < byteHash.length; i++) {\n                md5result.append(Integer.toHexString(0xFF & byteHash[i]));\n            }\n        } catch (NoSuchAlgorithmException ex) {\n            loggerCol.logException(CLASSDEBUG, \"de.searchworkorange.lib.misc.hash.MD5Hash\", Level.FATAL, ex);\n        }\n        return (md5result.toString());\n    }\n", "code2": "    public void logging() throws Fault {\n        final InterceptorWrapper wrap = new InterceptorWrapper(message);\n        final LoggingMessage buffer = new LoggingMessage(\"Inbound Message\\n----------------------------\");\n        String encoding = (String) wrap.getEncoding();\n        if (encoding != null) {\n            buffer.getEncoding().append(encoding);\n        }\n        Object headers = wrap.getProtocolHeaders();\n        if (headers != null) {\n            buffer.getHeader().append(headers);\n        }\n        InputStream is = (InputStream) wrap.getContent(InputStream.class);\n        if (is != null) {\n            CachedOutputStream bos = new CachedOutputStream();\n            try {\n                IOUtils.copy(is, bos);\n                bos.flush();\n                is.close();\n                this.message.setContent(InputStream.class, bos.getInputStream());\n                if (bos.getTempFile() != null) {\n                    logger.error(\"\\nMessage (saved to tmp file):\\n\");\n                    logger.error(\"Filename: \" + bos.getTempFile().getAbsolutePath() + \"\\n\");\n                }\n                if (bos.size() > limit) {\n                    logger.error(\"(message truncated to \" + limit + \" bytes)\\n\");\n                }\n                bos.writeCacheTo(buffer.getPayload(), limit);\n                bos.close();\n            } catch (IOException e) {\n                throw new Fault(e);\n            }\n        }\n        logger.debug(\"Message received :\\n\" + buffer.getPayload().toString());\n    }\n", "label": 0, "substitutes": {"plainToMD": [" stringAsmd", " stringFrommd", " stringTomd", " stringAsDM", " convertAsMD", " stringFromDM", " stringToMD", " stringAsMC", " convertToMC", " convertToDM", " stringToMC", " convertToMD", " convertAsMC", " stringFromMD", " convertAsmd", " convertTomd", " stringFromMC", " convertAsDM", " stringAsMD", " stringToDM"], "loggerCol": ["logGERColumn", "logggerCl", "logggerCol", "logggerCOL", "badinatorColl", "badgerCl", "loginatorCOL", "loginatorCl", " logggerCol", "badgerColl", " logggerColumn", "loggeCOL", " logggerCOL", "logGERCOL", "loggeColl", "logiderCol", "logGERCol", "loggeCol", "loggerCOL", "logiderColumn", "logggerColl", "loggeCl", "badinatorCl", " loggerCOL", "logggerColumn", "badinatorCOL", "badinatorCol", "loggerColl", "loginatorColl", "loginatorCol", "loggerColumn", "loggerCl", "badgerCol", " loggerColumn", "logiderCOL", "badgerCOL"], "input": ["text", "background", "subject", "string", "file", "str", " Input", "char", "hash", "Input", "up", "in", "context", "from", "output", "url", "pattern", "initial", "base", "config", "form", "prefix", "buffer", "example", "result", "out", "raw", "q", "active", "document", "data", "source", "value", "image", "hello", "request", "it", "this", " inputs", "command"], "byteHash": ["byteHas", "byteLength", "binaryHas", "ByteHas", "bytehash", "ByteMap", "byteMap", "byteshash", "ByteHash", "binaryhash", " byteMap", "binaryHash", " byteLength", " bytehash", "Bytehash", "ueLength", " byteHas", "bytesHash", "byteTr", "ByteTr", " byteTr", "ueHash", "uehash", "bytesMap", "bytesHas", "ueTr", "ByteLength"], "md": ["mac", "mc", "d", "dr", "pd", "material", "ld", "mt", "mod", "mo", "di", " MD", "hash", "sm", "med", "msg", "de", "nd", "met", " mc", "sam", "ng", "red", "ded", "det", "m", "def", "ct", "pm", "sd", "ms", "dd", "comp", "rm", "hd", "doc", "dig", "gr", "mm", "ds", "mk", "cd", "ind", "od", "bd", "mg", "mn", "add", "dm", "mp", "der", "df", "mb", "cmd", "gm", "MD", "grad", " Md", "cond"], "md5result": ["md64response", "md7string", "MD2string", "md65message", "md7result", "md64comment", "md3result", "md7results", " md5message", "md45result", "md2Result", "md5proc", " md5proc", "md5response", "MD2result", "md45response", "md3Result", "MD5comment", "md5message", "md5results", "md3string", "md5comment", "md64results", "MD2comment", " md5Result", "MD5result", "md8result", "md2result", "md2string", "md45comment", "MD2response", "MD5response", "MD2results", " md8proc", "md2comment", "md2response", "md8proc", "MD2Result", "md3message", "md65proc", "md8message", "md64result", "md7Result", "md5Result", "md8Result", " md8message", "md3results", "md5string", "md2results", "md65result", "md65Result", "md45results", "md3proc", "MD5Result", " md8Result", "MD5results", " md8result", "MD5string"], "i": ["ti", "v", "ji", "I", "ic", "li", "id", "io", "gi", "my", "b", "is", "di", "ii", "z", "in", "\u0438", "j", "span", "phi", "mi", "si", "index", "c", "n", "a", "pi", "ci", "m", "cli", "ims", "uri", "o", "iter", "multi", "q", "init", "xi", "ie", "ind", "gu", "u", "ei", "x", "qi", "im", "me", "key", "ai", "ix", "fi", "sim", "l", "ip", "us", "it", "bi", "ui", "y"]}}
{"id1": "21488868", "id2": "7927042", "code1": "    public static boolean encodeFileToFile(String infile, String outfile) {\n        boolean success = false;\n        java.io.InputStream in = null;\n        java.io.OutputStream out = null;\n        try {\n            in = new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(infile)), Base64.ENCODE);\n            out = new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));\n            byte[] buffer = new byte[65536];\n            int read = -1;\n            while ((read = in.read(buffer)) >= 0) {\n                out.write(buffer, 0, read);\n            }\n            success = true;\n        } catch (java.io.IOException exc) {\n            exc.printStackTrace();\n        } finally {\n            try {\n                in.close();\n            } catch (Exception exc) {\n            }\n            try {\n                out.close();\n            } catch (Exception exc) {\n            }\n        }\n        return success;\n    }\n", "code2": "    private void loadDynamically(File result, String extraPath) {\n        URL url = null;\n        InputStream is = null;\n        FileOutputStream fos = null;\n        try {\n            url = new URL(homeServerUrl + extraPath);\n            is = url.openStream();\n            fos = new FileOutputStream(result);\n            byte[] buff = new byte[8192];\n            int nbRead;\n            while ((nbRead = is.read(buff)) > 0) fos.write(buff, 0, nbRead);\n        } catch (IOException e) {\n            throw new StellariumException(\"Cannot dynamically load \" + result + \" from \" + url);\n        } finally {\n            if (is != null) {\n                try {\n                    is.close();\n                } catch (IOException e) {\n                    e.printStackTrace(System.out);\n                }\n            }\n            if (fos != null) {\n                try {\n                    fos.close();\n                } catch (IOException e) {\n                    e.printStackTrace(System.out);\n                }\n            }\n        }\n    }\n", "label": 0, "substitutes": {"encodeFileToFile": ["encodeFileToStream", "encodeStringToDisk", "encodeFiletoStream", "encodeFileAsStream", "encodeFiletoFiles", "encodeFileToFiles", "encodeStringAsFiles", "encodeFileFromFile", "encodeStringAsFile", "encodeFileAsFile", "encodeStringToStream", "encodeStringToFile", "encodeStringAsDisk", "encodeFileAsDisk", "encodeFiletoDisk", "encodeStringToFiles", "encodeFileFromFiles", "encodeStringAsStream", "encodeFileToDisk", "encodeFiletoFile", "encodeFileFromStream", "encodeFileAsFiles", "encodeFileFromDisk"], "infile": ["Inbase", "Infile", "inputFile", "outpath", "inpath", "outbase", " inbase", " inFile", "inbase", "InFile", " infilename", " inpath", "inputfile", "inFile", "inputpath", "outfilename", "Inpath", "outFile", "inputfilename", "infilename"], "outfile": ["tofp", "newname", "outdir", "todir", "newfilename", "fromFile", " outname", "newfile", "fromfp", "inFile", "inname", "fromdir", "outfilename", "tofile", "indir", "outfp", "fromfile", "outFile", "newFile", "outname", "infp", " outFile", "toFile", "infilename", " outfilename"], "in": ["pin", "en", "by", "id", "is", "inf", "t", "per", "up", "al", "cin", "from", "re", "ini", "IN", "inc", "i", "ro", "inner", "inside", "ar", "on", " din", "amin", "iter", "form", "din", "conn", "get", "oin", "init", "input", "isin", "ind", "gin", "source", "In", "or", "im", "image", "ins", "rin", "it", "info", "bin", "nin", "ain", "con", "inn"], "out": ["os", "outs", "at", "file", "en", "OU", "io", "print", "b", "t", "ot", "nt", "ion", "aos", "up", "output", "flush", "ex", "n", "to", "null", "write", "inner", "res", "gt", "on", "outer", "o", "opt", "net", "end", "oss", "cn", "writer", "fn", "sys", "OUT", "Out", "it", "g", "ou", "ne", "can", "co", "con"], "buffer": ["black", "sample", "batch", "number", "binary", "sequence", "variable", "append", "bar", "queue", "print", "length", "history", "row", "stack", "phrase", "total", "attribute", "button", "view", "library", "block", "mem", "bone", "base", "note", "initial", "padding", "table", "message", "buff", "paste", "column", "frame", "template", "document", "comment", "memory", "password", "header", "pad", "window", "cache", "character", "info", "available", "buf", "Buffer", "temp", "display", "command"], "read": ["text", "allow", "send", "first", "print", "before", "length", "count", "start", "select", "skip", "run", "open", "reader", "len", "index", "range", "n", "check", "query", "write", "i", "ok", "close", "wait", "through", "iter", "set", "connect", "end", "each", "get", "READ", "reads", "raw", "req", "push", "input", "ind", "seek", "readable", "load", "reading", "give", "add", "Read", "ready", "need", "hold", " Read", "stream", "find", "size"], "success": [" Success", "submit", "first", "please", " failure", "ratulations", "crit", "unity", "growth", "complete", "town", "Success", "ith", "primary", "good", "successfully", "snap", "safe", "condition", "cess", "ok", "status", "release", "summary", "valid", "city", "accept", "sufficient", "positive", " successful", "result", "fail", "ccess", "danger", "commit", "second", "support", "setup", "successful", " successes", " okay", "error", "ceed", "photo", " succ", "warning", "value", "democracy", "same", "done", "response", "continue", "surv"]}}
{"id1": "23008590", "id2": "16353490", "code1": "            public void run() {\n                URL url;\n                try {\n                    url = new URL(Config.UPDATE_SITE_URL);\n                    InputStream is = url.openStream();\n                    Writer writer = new StringWriter();\n                    char[] buffer = new char[1024];\n                    Reader reader = new BufferedReader(new InputStreamReader(is, \"UTF-8\"));\n                    int n;\n                    while ((n = reader.read(buffer)) != -1) {\n                        writer.write(buffer, 0, n);\n                    }\n                    String updatePage = writer.toString();\n                    is.close();\n                    writer.close();\n                    System.out.println(\"DOWNLOAD PAGE :\\n\" + updatePage);\n                    int pos1 = updatePage.indexOf(\"[ANA-CABV]\") + 10;\n                    int pos2 = updatePage.indexOf(\"[/ANA-CABV]\");\n                    int pos3 = updatePage.indexOf(\"[ANA-CABVURL]\") + 13;\n                    int pos4 = updatePage.indexOf(\"[/ANA-CABVURL]\");\n                    String currentVersion = updatePage.substring(pos1, pos2);\n                    currentVersionLabel.setText(currentVersionLabel.getText() + currentVersion);\n                    if (Double.valueOf(Config.VERSION) < Double.valueOf(currentVersion)) {\n                        downloadButton.setEnabled(true);\n                        label0.setText(mw.getLangMap().get(\"Update_Avalaible\"));\n                    } else label0.setText(mw.getLangMap().get(\"Update_NonAvalaible\"));\n                    downloadURL = updatePage.substring(pos3, pos4);\n                } catch (MalformedURLException e) {\n                    e.printStackTrace();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n", "code2": "    private String executePost(String targetURL, String urlParameters) {\n        URL url;\n        HttpURLConnection connection = null;\n        try {\n            url = new URL(targetURL);\n            connection = (HttpURLConnection) url.openConnection();\n            connection.setRequestMethod(\"POST\");\n            connection.setRequestProperty(\"Content-Type\", \"application/x-www-form-urlencoded\");\n            connection.setRequestProperty(\"Content-Length\", \"\" + Integer.toString(urlParameters.getBytes().length));\n            connection.setRequestProperty(\"Content-Language\", \"en-US\");\n            connection.setUseCaches(false);\n            connection.setDoInput(true);\n            connection.setDoOutput(true);\n            DataOutputStream wr = new DataOutputStream(connection.getOutputStream());\n            wr.writeBytes(urlParameters);\n            wr.flush();\n            wr.close();\n            InputStream is = connection.getInputStream();\n            BufferedReader rd = new BufferedReader(new InputStreamReader(is));\n            String line;\n            StringBuffer response = new StringBuffer();\n            while ((line = rd.readLine()) != null) {\n                response.append(line);\n                response.append('\\r');\n            }\n            rd.close();\n            return response.toString();\n        } catch (Exception e) {\n            e.printStackTrace();\n            return null;\n        } finally {\n            if (connection != null) {\n                connection.disconnect();\n            }\n        }\n    }\n", "label": 0, "substitutes": {"run": ["background", "sample", "submit", "render", "process", "test", "start", " Run", "work", "go", "call", "thread", "block", "status", "runner", "loop", "web", "UN", "un", "Run", "func", "exec", "execute", "running", "unit", "launch", "dial"], "url": ["sl", "path", "address", "lr", "gl", "file", "Url", "ret", "p", "hub", "str", "resource", "print", "mail", "b", "remote", "browser", "ls", "external", "r", "email", "dl", "ll", "pl", "host", "https", "ssl", "link", "location", "uri", "base", "rel", "URL", "web", "page", "loc", "ur", "github", "name", "bel", "hl", "http", "mount", "l", "xml", "il", "ref", "ul"], "is": ["serv", "iss", "ic", "isl", "isa", "ists", "sis", "in", "ls", "ais", "ri", "iris", "rs", "i", "ios", "ib", "bis", "ar", "fs", "es", "as", "iter", "IS", "ms", "sb", "bs", "s", "lis", "oss", "its", "isin", "ris", "sys", "im", "Is", "ins", "ip", "us", "ir", "ui", "info", "isi", "isc", "il", "os", "iso"], "writer": ["layer", "player", "written", "string", "file", "wrote", "riter", "variable", "print", "oder", "processor", "loader", "wright", "ner", "row", "service", "Reader", "output", "storage", "maker", "network", "null", "editor", "node", "write", "worker", "console", "builder", "runner", "outer", "server", "writers", "table", "format", "message", "page", "out", "counter", "document", "fn", "caster", "liner", "line", "client", "data", "Writer", "key", "driver", "writing", "window", "order", "wire", "white", "er", "handler", "entry", "word"], "buffer": ["seed", "sample", "function", "batch", "number", "string", "binary", "sequence", "variable", "append", "bar", "print", "length", "char", "row", "phrase", "total", "word", "library", "block", "base", "note", "padding", "table", "message", "buff", "paste", "column", "document", "template", "frame", "line", "comment", "source", "reset", "memory", "value", "password", "window", "cache", "character", "available", "buf", "Buffer", "display", "command"], "reader": ["ener", "dr", "iper", "file", "io", "handler", "resource", "oder", "rx", "per", "loader", "ner", "row", "Reader", "mr", "r", "ro", "inner", "builder", "runner", "rot", "iterator", "iter", "parser", "read", "rl", "driver", "ser", "handle", "er", "stream", "rar", "her"], "n": ["ln", "d", "v", "number", "en", "p", "nl", "nb", "k", "e", "nr", "num", "nt", "nn", "no", "an", "j", "N", "max", "ren", "len", "r", "c", "i", "m", "on", "ns", "o", "syn", "note", "out", "cn", "nor", "yn", "fn", "nan", "nc", "gn", "l", "na", "ne", "nu", "y", "sn", "w"], "updatePage": ["uploadPage", "indexPoint", "showPage", " updateClass", "UPDATEPage", "addLog", "updatedNow", "uploadPages", "updatedLink", " updateNow", "makeSection", "downloadPage", "UPDATELog", "createPage", "currentURL", "updatePoint", "uploadLink", "updateLog", "updatePages", "updateLink", " updatepage", "showLine", "indexTime", "uploadFile", "updateURL", "currentpage", "showClass", "updatedTime", " updatePages", " updateLine", "addPage", "updateLine", "downloadFile", "updateNow", "downloadLine", "currentPage", "updatedLine", "createTime", "updatedFile", "makeClass", "updateFile", "UPDATEPoint", "UpdateLink", "downloadPath", "uploadPath", "UpdatePages", "downloadNow", "updateClass", " updateLink", "downloadLink", " updateURL", "updatedURL", "updatedPage", "indexLog", "updateSection", "UpdatePage", "updateTime", "makeLine", " updateSection", "makePage", "addPoint", "updatedpage", "updatedPath", "updatepage", "showSection", "updatePath", "indexPage", "uploadLine"], "pos1": ["position81", " posOne", "Pos3", "po2", " pos0", "position0", "posOne", "Pos1", "positionOne", "pose81", "poseOne", "position1", "po4", "pose0", " pos81", "po3", "Pos4", "position2", "pos0", "position3", "pos81", "position4", "po1", "pose1", "Pos2"], "pos2": ["prop4", "pos6", "prop3", "Pos3", "po2", "pro3", "po6", "po4", "pro2", "po3", "Pos4", " pos6", "prop6", "pro02", "pos02", "Pos02", "pro4", "prop2", " pos02", "Pos2"], "pos3": ["Posthirds", "Pos3", "po2", "point03", "indexthirds", "indexIII", "PosIII", "posIII", "Pos03", "pointthirds", "Pos1", "pos03", "po4", "position1", "point3", "posthirds", "po3", "Pos4", "position2", "index3", "position3", "pointIII", "position4", "index03", "po1", "Pos2"], "pos4": ["position24", " posFour", "op24", "positionFour", "Pos3", "posFour", "po2", "po1", " posr", "Pos1", "opr", "posr", "opFour", "po4", "pos24", "po3", "Pos4", "op4", "position4", " pos24", "positionr", "Pos2"], "currentVersion": ["currentVer", "currentPage", "newPage", "CurrentFilter", "CurrentVersion", "CurrentKey", "currentlyVer", " currentPage", " currentFilter", "newVer", "recentUpdate", "recentPage", "updateVer", "recentVersion", " currentKey", "CurrentVer", "currentlyPage", "currentlyVersion", " currentUpdate", "updateFilter", "newVersion", "updateKey", "currentKey", "currentUpdate", "currentVers", "updateVersion", " currentVer", "currentlyVers", "updateVers", "newVers", "currentFilter", "newUpdate", "recentVer"], "downloadURL": ["downloadUrl", "updateLink", " downloadLink", "DownloadLink", "DownloadPDF", "updateURL", "DownloadUrl", "updateUrl", "downloadLink", "downloadPDF", "DownloadURL", " downloadPDF", "updatePDF", " downloadUrl"]}}
{"id1": "2521141", "id2": "6009527", "code1": "    public static void copy(String from_name, String to_name) throws IOException {\n        File from_file = new File(from_name);\n        File to_file = new File(to_name);\n        if (!from_file.exists()) abort(\"FileCopy: no such source file: \" + from_name);\n        if (!from_file.isFile()) abort(\"FileCopy: can't copy directory: \" + from_name);\n        if (!from_file.canRead()) abort(\"FileCopy: source file is unreadable: \" + from_name);\n        if (to_file.isDirectory()) to_file = new File(to_file, from_file.getName());\n        if (to_file.exists()) {\n            if (!to_file.canWrite()) abort(\"FileCopy: destination file is unwriteable: \" + to_name);\n        } else {\n            String parent = to_file.getParent();\n            if (parent == null) parent = System.getProperty(\"user.dir\");\n            File dir = new File(parent);\n            if (!dir.exists()) abort(\"FileCopy: destination directory doesn't exist: \" + parent);\n            if (dir.isFile()) abort(\"FileCopy: destination is not a directory: \" + parent);\n            if (!dir.canWrite()) abort(\"FileCopy: destination directory is unwriteable: \" + parent);\n        }\n        FileInputStream from = null;\n        FileOutputStream to = null;\n        try {\n            from = new FileInputStream(from_file);\n            to = new FileOutputStream(to_file);\n            byte[] buffer = new byte[4096];\n            int bytes_read;\n            while ((bytes_read = from.read(buffer)) != -1) {\n                to.write(buffer, 0, bytes_read);\n            }\n        } finally {\n            if (from != null) {\n                try {\n                    from.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n            if (to != null) {\n                try {\n                    to.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n    }\n", "code2": "    private void doFinishLoadAttachment(long attachmentId) {\n        if (attachmentId != mLoadAttachmentId) {\n            return;\n        }\n        Attachment attachment = Attachment.restoreAttachmentWithId(MessageView.this, attachmentId);\n        Uri attachmentUri = AttachmentProvider.getAttachmentUri(mAccountId, attachment.mId);\n        Uri contentUri = AttachmentProvider.resolveAttachmentIdToContentUri(getContentResolver(), attachmentUri);\n        if (mLoadAttachmentSave) {\n            try {\n                File file = createUniqueFile(Environment.getExternalStorageDirectory(), attachment.mFileName);\n                InputStream in = getContentResolver().openInputStream(contentUri);\n                OutputStream out = new FileOutputStream(file);\n                IOUtils.copy(in, out);\n                out.flush();\n                out.close();\n                in.close();\n                Toast.makeText(MessageView.this, String.format(getString(R.string.message_view_status_attachment_saved), file.getName()), Toast.LENGTH_LONG).show();\n                new MediaScannerNotifier(this, file, mHandler);\n            } catch (IOException ioe) {\n                Toast.makeText(MessageView.this, getString(R.string.message_view_status_attachment_not_saved), Toast.LENGTH_LONG).show();\n            }\n        } else {\n            try {\n                Intent intent = new Intent(Intent.ACTION_VIEW);\n                intent.setData(contentUri);\n                intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);\n                startActivity(intent);\n            } catch (ActivityNotFoundException e) {\n                mHandler.attachmentViewError();\n            }\n        }\n    }\n", "label": 1, "substitutes": {"copy": ["file", "clone", "delete", "io", "replace", "clip", "cop", "cut", "select", "export", "cp", "write", "zip", "close", "link", "insert", "crop", "set", "slice", "paste", "get", "create", "Copy", "download", "transfer", "upload", "load", "remove", "source", "save", "drop", "ate", "move", "sync", "share", "edit", "archive", "opy"], "from_name": [" from_names", "fromamefilename", " from_filename", "fromkname", "from_filename", " from_no", "from_names", "fromamekey", "from_resource", "from_Name", "fromkcase", "fromamename", " from_part", "from_no", " from_key", " from_case", "from_info", "from_key", "fromkpart", "fromameName", " from_resource", " from_Name", " from_info", "fromkName", "from_case", "from_part"], "to_name": ["to7new", "to_get", "to7file", "tolynm", "to_new", "to7get", "toNamename", " to_number", "to_Name", "from_new", "toNamenew", "from_get", "tolyfile", "to_nm", "eto_Name", "tolyname", "to_number", "tolynumber", "eto_word", "eto_name", "to_word", "toNamefile", "toNameget", " to_nm", "to7name"], "from_file": ["fromsfile", "fromlyFile", "or_File", "from_File", "from_resource", "from_node", " from_node", " from_type", "fromlyfile", "from_time", "or_file", "fromlyresource", " from_File", " from_time", "from_type", "to_dir", "from_port", " from_do", "or_run", "from_dir", "from_run", " from_resource", " from_port", "or_name", "fromlynode", "fromsdir", "fromsname", "from_do"], "to_file": ["to_tree", "TO_element", "TO_port", "to_local", "to_create", "to_block", "to_port", " to_create", " to_base", "to_link", "toJdrop", "to_File", "TO_name", "to_base", "to_FILE", " to_dir", " to_local", "toJblock", " to_File", "from_type", "toJfile", "to_dir", " to_block", "that_file", "that_link", "to_files", " to_run", "TO_FILE", "to_type", "to_run", "to_drop", "TO_files", "toJFile", "TO_file", "from_dir", "that_tree", "to_element", "that_File", " to_drop"], "parent": ["master", "where", "path", "tar", "cmp", "file", "p", "paren", "mother", "id", "my", "point", "pixel", "part", "test", "remote", "per", "event", "position", "child", "up", "family", "relative", "prop", "holder", "rule", "percent", "owner", "parents", "null", "block", "port", "instance", "base", "server", "desc", "def", "prefix", "params", "ma", "sp", "page", "root", "global", "form", "pid", "user", "tree", "name", "client", "spec", "comment", "folder", "source", "home", "top", "shape", "pa", "man", "chain", "default", "ip", "directory", "Parent", "peer", "pool", "unit", "temp", "par", "timeout"], "dir": ["local", "d", "path", "module", "dr", "cur", "file", "str", "mod", "part", "fd", "di", "rec", "dep", "good", "red", "vol", "det", "dim", "md", "rel", "iter", "def", "dd", "sp", "loc", "init", "Dir", "db", "ind", "cd", "dist", "folder", "cont", "addr", "self", "tr", "coll", "ir", "directory", "del", "cmd", "cond", "DIR", "dict", "wd", "div"], "from": ["local", "so", "bound", "file", "en", "term", "by", "back", "io", "orig", "before", "From", "old", "fun", "store", "false", "st", "start", "in", "no", "style", "left", "re", "query", "check", "vol", "inner", "entry", "link", "on", "normal", "base", "form", "com", "set", "out", "init", "user", "ie", "client", "error", "source", "reset", "func", "or", "and", "ra", "window", "empty", "fr", "ent", "pos", "with", "stream", "con", "se"], "to": ["so", "op", "tty", "please", "that", "by", "must", "into", "b", "t", "po", "toc", "nt", "stable", "te", "e", "no", "total", "output", "go", "target", "null", "eto", "ts", "pi", "tto", "auto", "on", "o", "base", "table", "two", "ma", "ta", "out", "will", "client", "pretty", "too", "TO", "sys", "or", "top", "ato", "token", "ne", "tt", "can", "To", "co"], "buffer": ["sample", "function", "batch", "binary", "sequence", "variable", "append", "queue", "bar", "char", "event", "row", "stack", "phrase", "stroke", "attribute", "button", "word", "block", "base", "iter", "table", "page", "message", "buff", "paste", "database", "frame", "template", "document", "memory", "password", "window", "cache", "character", "available", "buf", "Buffer", "temp", "entry", "command"], "bytes_read": ["bytesyncwrite", "bytes_Read", "bytes__range", " bytes_range", "wordsyncread", "bytes2range", " bytes2write", "bytes_run", " bytes_Read", "bytes_write", "wordsynclen", "bytesyncread", "bytes_range", "wordsyncwrite", "bytesynclen", "words_write", "bytes2read", "bytes_len", " bytes2read", "words_report", "words_read", " bytes2range", "Bytes_write", "bytes2Read", "bytes2write", "Bytes_read", " bytes2Read", "bytes__write", "bytes_report", "bytesyncreport", "Bytes_run", "bytes__read", "words_len", " bytes_write", "bytes__Read", "wordsyncreport"]}}
{"id1": "23035537", "id2": "1005108", "code1": "    public boolean getContent(String userId, String latestMsgId) {\n        try {\n            String targetUrl = \"http://api.fanfou.com/statuses/user_timeline.xml?id=\" + userId + \"&since_id=\" + latestMsgId;\n            URL url = new URL(targetUrl);\n            InputStream in = url.openStream();\n            ArrayList<MessageObj> list;\n            if (in != null) {\n                MessageListDOMParser parser = new MessageListDOMParser();\n                list = (ArrayList<MessageObj>) parser.parseXML(in);\n                TransactionDAO dao = new TransactionDAO();\n                dao.insert(list);\n            }\n            return true;\n        } catch (Exception e) {\n            e.printStackTrace();\n            return false;\n        }\n    }\n", "code2": "    public void googleImageSearch(String search, String start) {\n        try {\n            String u = \"http://images.google.com/images?q=\" + search + start;\n            if (u.contains(\" \")) {\n                u = u.replace(\" \", \"+\");\n            }\n            URL url = new URL(u);\n            HttpURLConnection httpcon = (HttpURLConnection) url.openConnection();\n            httpcon.addRequestProperty(\"User-Agent\", \"Mozilla/4.76\");\n            BufferedReader readIn = new BufferedReader(new InputStreamReader(httpcon.getInputStream()));\n            googleImages.clear();\n            String text = \"\";\n            String lin = \"\";\n            while ((lin = readIn.readLine()) != null) {\n                text += lin;\n            }\n            readIn.close();\n            if (text.contains(\"\\n\")) {\n                text = text.replace(\"\\n\", \"\");\n            }\n            String[] array = text.split(\"\\\\Qhref=\\\"/imgres?imgurl=\\\\E\");\n            for (String s : array) {\n                if (s.startsWith(\"http://\") || s.startsWith(\"https://\") && s.contains(\"&amp;\")) {\n                    String s1 = s.substring(0, s.indexOf(\"&amp;\"));\n                    googleImages.add(s1);\n                }\n            }\n        } catch (Exception ex4) {\n            MusicBoxView.showErrorDialog(ex4);\n        }\n        MusicBoxView.jButton7.setEnabled(true);\n        ImageIcon icon;\n        try {\n            icon = new ImageIcon(new URL(googleImages.elementAt(MusicBoxView.googleImageLocation)));\n            ImageIcon ico = new ImageIcon(icon.getImage().getScaledInstance(100, 100, Image.SCALE_SMOOTH));\n            MusicBoxView.albumArtLabel.setIcon(ico);\n        } catch (MalformedURLException ex1) {\n            MusicBoxView.showErrorDialog(ex1);\n        }\n    }\n", "label": 0, "substitutes": {"getContent": ["checkcontent", " getcontent", "getMedia", " getContents", "updateContents", " getMedia", "getContents", "updatecontent", "checkContents", "updateContent", "checkContent", "checkMedia", "updateMedia", "getcontent"], "userId": ["jobID", "authorID", " userName", "USERName", "jobId", "USERById", "humanID", "UserById", " userById", "authorId", "humanById", "USERId", "userID", "jobById", "humanName", "userName", "humanId", "authorName", "jobName", "USERID", "userById", "UserName", "UserId", "UserID", " userID", "authorById"], "latestMsgId": ["lastmsgid", "LatestMessageID", "latestStrId", "latestmsgById", "LatestMessageIn", "latestStrById", "lastmsgById", "LatestMsgById", "latestMsgIn", "LatestMessageById", "latestMsgid", "latestMsgID", "lastmsgID", "lastMsgById", "lastMsgid", "latestMsgById", "latestStrIn", "LatestMsgId", "lastmsgId", "latestmsgIn", "latestMessageID", "LatestMessageId", "lastMsgId", "latestmsgid", "latestmsgID", "LatestMsgIn", "latestmsgId", "latestMessageById", "latestStrID", "latestMessageid", "latestMessageId", "lastMsgID", "LatestMsgID", "latestMessageIn"], "targetUrl": ["TargetStr", "argetDest", "argetUrl", "targetUr", "sourceUr", "TargetURL", "templateURL", "baseUr", " targetURL", " targetDest", "templateDest", "baseURL", "argetName", "argetURL", "TargetUrl", " targetName", "targetURL", "TargetUr", "targetName", "baseStr", "templateName", "baseUrl", "templateUrl", "targetStr", "targetDest", "sourceStr", "sourceURL", "sourceUrl"], "url": ["err", "sl", "gl", "file", "Url", "p", "str", "nl", "id", "resource", "b", "char", "t", "browser", "ls", "ol", "open", "call", "r", "dl", "null", "ll", "pl", "ssl", "link", "location", "uri", "rel", "URL", "base", "web", "ur", "name", "u", "bel", "http", "key", "mount", "el", "l", "xml", "ref", "ul"], "in": ["mc", "serv", "file", "en", "p", "str", "io", "is", "inf", "t", "st", "al", "cin", "from", "null", "n", "IN", "i", "inner", "inside", "o", "s", "er", "out", "din", "all", "isin", "input", "gin", "data", "In", "source", "or", "el", "ins", "rin", "l", "xml", "it", "bin", "body", "sql", "stream", "con", "inn"], "list": ["item", "v", "batch", "filter", "log", "sequence", "alist", "li", "lp", "p", "lists", "queue", "lat", "listed", "count", "t", "st", "ist", "detail", "record", "ls", "dl", "null", "block", "lt", "status", "summary", "LIST", "base", "set", "single", "table", "format", "result", "out", "all", "ml", "tree", "load", "data", "add", "top", "chain", "group", "array", "l", "layout", "info", "pool", "dict", "collection", "ul"], "parser": ["system", "layer", "asser", "lp", "ars", "magic", "processor", "per", "loader", "basic", "service", "mr", "music", "maker", "reader", "walker", "proc", "worker", "language", "penter", "format", "arser", "parse", "student", "document", "name", "bank", "password", "driver", "Parser", "xml", "peer", "pool", "php", "er", "handler", "policy", "now"], "dao": [" dosa", "oao", "ota", "dta", "ddai", "dowa", " dpo", "dosa", "datowa", "dnao", " daos", "oai", "dnpo", "dnowa", "dataos", "datao", "dpo", "ddosa", "oosa", " dai", " dta", "datpo", "ddao", "daos", "ddta", "dnaos", "dai", " dowa"]}}
{"id1": "5441579", "id2": "7044685", "code1": "    public static String createPseudoUUID() {\n        try {\n            MessageDigest messageDigest = MessageDigest.getInstance(\"MD5\");\n            messageDigest.update(new UID().toString().getBytes());\n            try {\n                String localHost = InetAddress.getLocalHost().toString();\n                messageDigest.update(localHost.getBytes());\n            } catch (UnknownHostException e) {\n                throw new OXFException(e);\n            }\n            byte[] digestBytes = messageDigest.digest();\n            StringBuffer sb = new StringBuffer();\n            sb.append(toHexString(NumberUtils.readIntBigEndian(digestBytes, 0)));\n            sb.append('-');\n            sb.append(toHexString(NumberUtils.readShortBigEndian(digestBytes, 4)));\n            sb.append('-');\n            sb.append(toHexString(NumberUtils.readShortBigEndian(digestBytes, 6)));\n            sb.append('-');\n            sb.append(toHexString(NumberUtils.readShortBigEndian(digestBytes, 8)));\n            sb.append('-');\n            sb.append(toHexString(NumberUtils.readShortBigEndian(digestBytes, 10)));\n            sb.append(toHexString(NumberUtils.readIntBigEndian(digestBytes, 12)));\n            return sb.toString();\n        } catch (NoSuchAlgorithmException e) {\n            throw new OXFException(e);\n        }\n    }\n", "code2": "    static String encrypt(String plaintext) {\n        MessageDigest d = null;\n        try {\n            d = MessageDigest.getInstance(\"SHA-1\");\n            d.update(plaintext.getBytes(\"UTF-8\"));\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return new String(Base64.encodeBase64(d.digest()));\n    }\n", "label": 1, "substitutes": {"createPseudoUUID": ["createPseanRandomId", "createPseudoUniqueId", "createPseanUId", "createPseanUuid", "createPseudoRandomuid", "createPseudoUUuid", "createPseanRandomID", "createPseudoRandomID", "createPseudoUniqueID", "createPseudoRandomId", "createPseudoUuid", "createPseudoUId", "createPseanUID", "createPseudoUniqueUID", "createPseudoRandomUID", "createPseanUUID", "createPseudoUUId", "createPseanRandomUID", "createPseudoUID", "createPseudoUUUID", "createPseudoUniqueuid", "createPseanRandomuid"], "messageDigest": [" messageDigment", "messageDigist", "messageLocifier", "numberDesignest", "messageDriester", " messageDiger", " messageDigifier", "numberDesignester", "messageDigests", " messagedigse", "messageMacested", "messageMacest", "messageDriest", "messageMacer", "numberDesignests", "messageDesignist", "messageLocse", "messageDesignests", "messageHasest", "messageDrise", "messageLocment", "messageDesignse", "messageDigester", "messagedigest", " messageDigist", "messagediger", " messagedigifier", "messageMacse", " messageDigester", "messagedigist", "messageDiger", "messageDest", "numberDigester", " messagedigest", " messageDigested", " messageDigse", " messageDesignse", "messagedigifier", "messageDester", "messageHasist", "messageDist", "messageHasests", "messageDigifier", "messageDesignester", "messagedigment", "numberDigests", "messagedigse", "numberDigist", "messageDigested", "messagedigested", "messageDigment", "messageDriist", "messageDests", " messagedigment", "messageDigse", "messageHasester", "messageDesignest", "numberDigest", "numberDesignist", " messageDesignester", "messageLocest", " messageDesignist", " messageDesignest", "messagedigester"], "localHost": ["localhost", "remotePort", "localhostHost", "localPort", "localServer", "localAddress", "localhosthost", "remoteHost", " localhost", "remoteAddress", " localPort", " localAddress", "LocalServer", "LocalHost", "LocalPort", "localhostPort", "Localhost", "localhostServer", " localServer", "remotehost", "LocalAddress"], "digestBytes": ["mixestParts", "digestedAttributes", " digestedbytes", "DigestServices", "digestKeys", "digestParts", "diggestExamples", "drivenesterBs", "DiggestParts", "digestAttributes", "digestArgs", "digestedValues", "digesterArgs", "mixestedServices", " digestExamples", " digestKeys", "digESTArgs", "DiggestBytes", "digestedLinks", "mixestedBytes", "digetParts", "diggestbytes", "diggestBytes", "diggestServices", "mixestArgs", "diggestKeys", "digstServices", "digesterbytes", "DigestParts", "mixestLinks", "DigestBytes", "mixestBytes", "mixestAttributes", "diggeAttributes", "diggeBytes", "digestValues", "digestedBs", "digesterParts", "drivenesterBytes", "drivenestValues", "Digestbytes", "digesterBytes", "drivenesterValues", "mixestedArgs", "digstParts", "digistanceKeys", "Diggestbytes", "digestBs", "digstBytes", "drivenestBs", " digestedBytes", " digestParts", "digestedArgs", "digestedParts", "digetBytes", "digestServices", "digESTBytes", "digistanceBytes", "digesterBs", "mixestedParts", "diggestParts", "digesterValues", "digestedbytes", "diggeServices", "digESTbytes", "digestbytes", "mixestServices", "digesterResults", "mixestbytes", "mixestedbytes", "digesterLinks", "digestedServices", "digESTLinks", " digestbytes", " digestValues", "digestedResults", "digestExamples", "drivenesterParts", "digESTValues", " digestArgs", "digetbytes", " digestResults", "digestResults", "mixestedAttributes", "DiggestServices", "mixestedLinks", "digestedBytes", " digestedValues", "digestLinks", "drivenestParts", "drivenestBytes", "diggeParts", "digstAttributes", "digistanceExamples", "digetServices"], "sb": ["stab", "sl", "pb", "lp", "sbm", "sw", "src", "nb", "b", "bt", "bg", "rb", "esm", "kb", "ctrl", "sg", "rob", "bb", "pg", "storage", "shell", "obb", "sam", "bash", "bh", "sa", "ssl", "ib", "bis", "sth", "sf", "bps", "fb", "sd", "jp", "erb", "bs", "ibl", "sp", "abb", "db", "eb", "wb", "ub", "sv", "bn", "bf", "zb", "cb", "bp", "tn", "bj", "gc", "gb", "sh", "sn", "SB", "lb", "gob"]}}
{"id1": "10218878", "id2": "19235551", "code1": "    public static void DecodeMapFile(String mapFile, String outputFile) throws Exception {\n        byte magicKey = 0;\n        byte[] buffer = new byte[2048];\n        int nread;\n        InputStream map;\n        OutputStream output;\n        try {\n            map = new FileInputStream(mapFile);\n        } catch (Exception e) {\n            throw new Exception(\"Map file error\", e);\n        }\n        try {\n            output = new FileOutputStream(outputFile);\n        } catch (Exception e) {\n            throw new Exception(\"Map file error\", e);\n        }\n        while ((nread = map.read(buffer, 0, 2048)) != 0) {\n            for (int i = 0; i < nread; ++i) {\n                buffer[i] ^= magicKey;\n                magicKey += 43;\n            }\n            output.write(buffer, 0, nread);\n        }\n        map.close();\n        output.close();\n    }\n", "code2": "    protected BufferedImage handleFCLAException() {\n        if (params.uri.startsWith(\"http://image11.fcla.edu/cgi\")) try {\n            params.uri = params.uri.substring(params.uri.indexOf(\"q1=\") + 3);\n            params.uri = params.uri.substring(0, params.uri.indexOf(\"&\"));\n            params.uri = \"http://image11.fcla.edu/m/map/thumb/\" + params.uri.substring(params.uri.length() - 3, params.uri.length() - 2) + \"/\" + params.uri.substring(params.uri.length() - 2, params.uri.length() - 1) + \"/\" + params.uri.substring(params.uri.length() - 1, params.uri.length()) + \"/\" + params.uri + \".jpg\";\n            URL url = new URL(params.uri);\n            URLConnection connection = url.openConnection();\n            return processNewUri(connection);\n        } catch (Exception e) {\n        }\n        return null;\n    }\n", "label": 0, "substitutes": {"DecodeMapFile": ["DecvertMapFiles", "DecodeMAPfile", "DecvertMapLog", "DecvertMAPFile", "DecodeFromFile", "DecodeMapLog", "DecodeToFile", "DecvertMAPfile", "DecodeMapFiles", "DecodeMAPFiles", "DecvertMapfile", "DecvertMapFile", "DecodeFromLog", "DecodeTofile", "DecodeToFiles", "DecodeMAPFile", "DecodeFromfile", "DecvertMAPLog", "DecodeMAPLog", "DecodeToLog", "DecodeMapfile", "DecvertMAPFiles", "DecodeFromFiles"], "mapFile": ["mapfile", "imageFilename", "cacheFile", "MapFile", "MapFilename", "mapFILE", " mapFilename", "listFILE", "cachePath", "MapStream", "cacheFILE", " mapfile", "listPath", "mapFilename", "imagefile", " mapPath", " mapFILE", "Mapfile", "imageStream", "imageFile", "listFile", "mapPath", "mapStream", " mapStream"], "outputFile": ["inputStream", " outputFilename", "writeName", "inputName", "writeFile", " outputDir", "inputFile", "OutputDir", "outPath", "outDir", "outputPath", "writeDir", "outputFilename", "outputName", "inputDir", "outputStream", "outputDir", "mapName", " outputPath", "writeStream", "mapDir", "OutputFilename", "outFile", "outFilename", "OutputPath", "mapStream", "OutputFile"], "magicKey": ["MagicKEY", "prefixKey", " magicKEY", "magicChar", "encryptedKey", "magicField", " magicField", " magicChar", "serialKey", "magicKEY", "prefixValue", "uniqueValue", "anticField", "antickey", "magicCounter", "encryptedChar", "magicCode", "magicValue", "encryptedField", "serialName", " magickey", "prefixCode", "magicId", "serialId", "uniqueKey", " magicValue", "magickey", "serialKEY", " magicName", "MagicId", "anticKey", "encryptedkey", "anticChar", " magicCounter", " magicId", "prefixCounter", " magicCode", "uniqueCounter", "magicName", "MagicName", "uniqueCode", "MagicKey"], "buffer": ["black", "sample", "batch", "filter", "binary", "sequence", "variable", "append", "queue", "print", "length", "program", "char", "history", "bridge", "row", "stack", "phrase", "stroke", "total", "detail", "attribute", "button", "index", "bo", "block", "check", "mem", "code", "bone", "initial", "base", "iter", "table", "message", "buff", "page", "vector", "screen", "database", "paste", "document", "frame", "template", "memory", "header", "shape", "pad", "window", "cache", "sum", "buf", "Buffer", "stream", "display", "flash", "command"], "nread": ["Nget", "Nwrite", "ncget", "ncRead", "nwrite", " nRead", "rawreader", "rnRead", "rnwrite", "Nreadable", "maxadd", "maxRead", "renreader", "nget", "ncreadable", "renread", "NRead", "Nadd", "rawwrite", "maxget", "ncwrite", "renwrite", "nRead", " nREAD", "rawread", "maxread", "Nread", "ncread", "rentry", "nreader", "rnread", "nadd", " ntry", " nreadable", "NREAD", " nwrite", "nreadable", "rawtry", "rnREAD", "ncadd", "ntry", " nreader", "nREAD"], "map": ["master", "where", "pose", "module", "address", "place", "batch", "op", "lock", "file", "mt", "make", "mod", "per", "up", "bridge", "open", "manager", "apping", "view", "pack", "block", "mem", "pl", "aps", "meta", "m", "clear", "mate", "maps", "down", "config", "form", "com", "set", "table", "app", "collect", "parse", "read", "ml", "cm", "load", "ap", "memory", "image", "mount", "shape", "mp", "man", "ape", "window", "cache", "mask", "ip", "ace", "MAP", "co", "con", "apper"], "output": ["Output", "icon", "batch", "put", "log", "file", "queue", "oe", "print", "plain", "latest", "update", "current", "open", "target", "other", "network", "block", "write", "port", "secure", "ilo", "console", "auto", "hidden", "outer", "o", "web", "net", "result", "format", "out", "entity", "blue", "input", "exit", "client", "object", "four", "socket", "online", "response", "cache", "next", "ou", "can", "stream", "display"], "i": ["ti", "v", "ji", "I", "batch", "ic", "li", "gi", "id", "b", "is", "di", "t", "ii", "j", "span", "phi", "ri", "mi", "si", "ni", "index", "ini", "n", "iu", "pi", "ci", "m", "cli", "uri", "ms", "multi", "q", "xi", "ie", "ind", "gu", "u", "ish", "ei", "x", "qi", "ai", "ix", "fi", "sim", "ip", "it", "bi", "g", "ui", "us", "spin", "ami", "y"]}}
{"id1": "11716816", "id2": "18891988", "code1": "    private void updateFile(File file) throws FileNotFoundException, IOException {\n        File destFile = new File(file.getPath().replace(URL_UNZIPPED_PREFIX + latestVersion, \"\"));\n        FileChannel in = null;\n        FileChannel out = null;\n        try {\n            if (!destFile.exists()) {\n                destFile.getParentFile().mkdirs();\n                destFile.createNewFile();\n            }\n            in = new FileInputStream(file).getChannel();\n            out = new FileOutputStream(destFile).getChannel();\n            in.transferTo(0, in.size(), out);\n        } finally {\n            if (out != null) out.close();\n            if (in != null) in.close();\n        }\n    }\n", "code2": "    public static String getFile(String serviceName, String wsdlLocation, String endpoint) throws AxisFault {\n        mLog.debug(\"Downloading WSDL file from: \" + wsdlLocation);\n        mLog.debug(\"Received endpoint: \" + endpoint);\n        String fileLocation = null;\n        try {\n            String tempDir = System.getProperty(\"java.io.tmpdir\");\n            URL url = new URL(wsdlLocation);\n            String WSDLFile = tempDir + File.separator + serviceName + \".wsdl\";\n            String tmpWSDLFile = WSDLFile + \".tmp\";\n            File inputFile = new File(WSDLFile);\n            File tmpFile = new File(tmpWSDLFile);\n            if (!inputFile.exists() || inputFile.length() == 0) {\n                mLog.debug(\"Downloading the WSDL\");\n                inputFile.createNewFile();\n                InputStream in = url.openStream();\n                FileOutputStream out = new FileOutputStream(inputFile);\n                URLConnection con = url.openConnection();\n                int fileLength = con.getContentLength();\n                ReadableByteChannel channelIn = Channels.newChannel(in);\n                FileChannel channelOut = out.getChannel();\n                channelOut.transferFrom(channelIn, 0, fileLength);\n                channelIn.close();\n                channelOut.close();\n                out.flush();\n                out.close();\n                in.close();\n                Document tmpDocument = XMLUtils.newDocument(new FileInputStream(inputFile));\n                NodeList nl1 = tmpDocument.getElementsByTagName(\"wsdlsoap:address\");\n                for (int i = 0; i < nl1.getLength(); i++) {\n                    Node node1 = nl1.item(i);\n                    if (node1.getNodeName().equals(\"wsdlsoap:address\")) {\n                        ((Element) node1).setAttribute(\"location\", endpoint);\n                    }\n                }\n                FileOutputStream tmpOut = new FileOutputStream(tmpFile);\n                XMLUtils.DocumentToStream(tmpDocument, tmpOut);\n                tmpOut.flush();\n                tmpOut.close();\n                boolean retVal = inputFile.delete();\n                if (retVal) {\n                    retVal = tmpFile.renameTo(new File(WSDLFile));\n                }\n                mLog.debug(\"Return Value: \" + retVal);\n            } else {\n                mLog.debug(\"The WSDL is already at the ServiceProvider\");\n            }\n            fileLocation = WSDLFile;\n        } catch (MalformedURLException mx) {\n            mLog.error(\"MalformedURLException: \" + mx.getMessage() + \", cause: \" + mx.getCause().getMessage());\n            throw new AxisFault(mx.getMessage(), mx.getCause());\n        } catch (IOException ix) {\n            mLog.error(\"IOException: \" + ix.getMessage() + \", cause: \" + ix.getCause().getMessage());\n            throw new AxisFault(ix.getMessage(), ix.getCause());\n        } catch (ParserConfigurationException px) {\n            mLog.error(\"ParserConfigurationException: \" + px.getMessage() + \", cause: \" + px.getCause().getMessage());\n            throw new AxisFault(px.getMessage(), px.getCause());\n        } catch (SAXException sx) {\n            mLog.error(\"SAXException: \" + sx.getMessage() + \", cause: \" + sx.getCause().getMessage());\n            throw new AxisFault(sx.getMessage(), sx.getCause());\n        }\n        return fileLocation;\n    }\n", "label": 1, "substitutes": {"updateFile": ["archiveFile", "UpdateFile", "archivePage", "UpdateSourceFile", "downloadPage", "updateSourceFile", "UpdatePage", "downloadContent", "archiveSourceFile", "downloadSourceFile", "updateContent", "updatePage", "downloadFile", "UpdateContent", "archiveContent"], "file": ["local", "path", "h", "log", "p", "io", "resource", "FILE", "channel", "ile", "e", "t", "File", "output", "attribute", "filename", "url", "issue", "content", "rule", "null", "port", "title", "link", "f", "base", "table", "format", "page", "get", "message", "fp", "db", "input", "name", "document", "line", "data", "source", "le", "report", "image", "use", "handle", "info", "type", "full", "entry"], "IOException": [" IOError", " IOProblem", "IOError", "OperationException", "IOProblem", "SecurityProblem", "OperationError", "SecurityException", "SecurityError", "OperationProblem"], "destFile": [" destinationDir", "tempPath", " DestDir", "tempFile", " DestEmail", "tempDir", "destPath", "destSourceFile", " DestFile", "targetFile", " destDo", "DestSourceFile", "declSourceFile", "sourceFile", "sourcePath", " destPage", " destFolder", "declFolder", "sourceDir", "destPlace", "destEmail", "Destile", "declile", " destPlace", "optPlace", "Destfile", " destDir", " destinationFile", "DestFile", "DestFolder", "destFolder", "optFolder", " DestDo", " destEmail", "destfile", "optPage", "tempfile", "destDir", " destinationDo", "optFile", " destPath", " destile", "targetDir", "DestPath", " destinationEmail", "DestPage", "targetPath", " destfile", "targetFolder", "sourceFolder", " destSourceFile", "destDo", "declFile", "DestDir", "DestPlace", "destPage", "destile"], "in": ["local", "ln", "ic", "en", "io", "sin", "is", "inf", "up", "al", "cin", "from", "mi", "edIn", "re", "r", " IN", "act", "ini", "IN", "n", "i", "inc", "inner", "inside", "m", " din", "f", "on", "iter", "net", "s", "din", "oin", "init", "pass", "raw", "all", "input", "isin", "ind", "mm", "read", "ie", "gin", "In", "im", "ai", "ins", "rin", "l", "it", "info", "bin", "ne", "ain", "con", "inn"], "out": ["v", "cos", "again", "at", "log", "en", "OU", "io", "oe", "channel", "b", "t", "conv", "obj", "ot", "nt", "ion", "aos", "up", "no", "msg", "output", "flush", "ex", "n", "to", "null", "write", "gt", "outer", "o", "note", "net", "s", "result", "oss", "conn", "cn", "ch", "client", "fn", "sys", "con", "OUT", "one", " OUT", "or", "chain", "Out", "cache", "it", "g", "cmd", "ou", "outs", "ne", "can", "jp", "co", "os"]}}
{"id1": "5620792", "id2": "5951961", "code1": "    public static String SHA1(String text, int HASH_VALUE_SIZE) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n        MessageDigest md;\n        md = MessageDigest.getInstance(\"SHA-1\");\n        byte[] sha1hash = new byte[HASH_VALUE_SIZE];\n        md.update(text.getBytes(\"iso-8859-1\"), 0, text.length());\n        sha1hash = md.digest();\n        return convertToHex(sha1hash);\n    }\n", "code2": "    public static void main(String[] args) {\n        try {\n            URL url = new URL(args[0]);\n            HttpURLConnection httpCon = (HttpURLConnection) url.openConnection();\n            httpCon.setDoOutput(true);\n            httpCon.setRequestMethod(\"PUT\");\n            OutputStreamWriter out = new OutputStreamWriter(httpCon.getOutputStream());\n            out.write(\"fatal error\");\n            out.close();\n            System.out.println(\"end\");\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n", "label": 0, "substitutes": {"SHA1": ["SHA256", " SHA256", " SHAOne", "HS2", " SHA2", "HS1", "sha256", "HS256", "SHAOne", "HSOne", "sha1", "SHA2", "sha2", "shaOne"], "text": ["path", "subject", "pt", "string", "txt", "Text", "str", "term", "print", "test", "t", "event", "nt", "msg", "select", "current", "output", "url", "content", "act", "ext", "pattern", "code", "config", "form", "prefix", "ct", "message", "out", "q", "input", "read", "document", "name", "template", "comment", "data", "cont", "source", "value", "key", "password", "TEXT", "tx", "translation", "word"], "HASH_VALUE_SIZE": ["HASH_VALUE_DIR", "HASH_VALUE_NO", "HASH_VAL_SIZE", "HASH_VALUE_SOURCE", "HASH_value_TYPE", "HASH_value_DIR", "HASH_VAL_NAME", "HASH_value_SIZE", "HASH_VALUE_NAME", "HASH_value_SOURCE", "HASH_VALUE_TYPE", "HASH_VALUE_Size", "HASH_VAL_Size", "HASH_VAL_NO"], "md": ["mc", "d", "js", " man", "h", "pd", "dir", "ctr", "mt", "ld", "mod", "mode", " ms", "sm", " ma", " mm", " mo", " sd", "nd", " mc", " cd", "det", "ad", "m", "mond", " dd", " rm", "ms", "sd", "dd", "mand", "rm", "td", "hd", "dig", "hm", "mm", "ds", "mk", "cd", "ind", "od", " del", "bd", "mg", " cmd", "mn", "dm", "add", "mp", "metadata", "der", "dh", "and", "df", "mb", "cmd", "grad", "MD", "cond", " Md"], "sha1hash": ["sha2sum", " SHA1value", "sha5have", "sha1result", "sha3hash", "shaonesum", "SHA2Hash", "sha31hash", " SHA31value", " SHA1hash", "sha2have", "sha3hex", "sha2value", "sha7hash", "SHA1hash", "sha2hash", "sha7Hash", " SHA31sum", " SHA31hash", "sha1have", "sha1str", "ha1sum", "sha1sum", "ha2sum", "sha2result", "ha1hash", "sha3str", "sha1Hash", "SHA2hash", "ha2result", "sha5sum", "sha2hex", "sha3Hash", "shaoneHash", "SHA1hex", "sha7str", " SHA31have", "sha2str", "sha31have", "sha31sum", "ha2Hash", "sha1value", " SHA1have", "shaonehash", " SHA1sum", "sha2Hash", "SHA2hex", "SHA2str", "SHA1Hash", "ha1Hash", "sha5hash", "shaoneresult", "sha31value", "ha2hash", "SHA1str", "sha7hex", "ha1result", "sha1hex", "sha5value"]}}
{"id1": "693636", "id2": "4481712", "code1": "    public static int createEmptyCart() {\n        int SHOPPING_ID = 0;\n        Connection con = null;\n        try {\n            con = getConnection();\n        } catch (java.lang.Exception ex) {\n            ex.printStackTrace();\n        }\n        try {\n            PreparedStatement insert_cart = null;\n            SHOPPING_ID = Integer.parseInt(Sequence.getSequenceNumber(\"shopping_cart\"));\n            insert_cart = con.prepareStatement(\"INSERT INTO shopping_cart (sc_id, sc_time) VALUES ( ? , NOW() )\");\n            insert_cart.setInt(1, SHOPPING_ID);\n            insert_cart.executeUpdate();\n            con.commit();\n            insert_cart.close();\n            returnConnection(con);\n        } catch (java.lang.Exception ex) {\n            try {\n                con.rollback();\n                ex.printStackTrace();\n            } catch (Exception se) {\n                System.err.println(\"Transaction rollback failed.\");\n            }\n        }\n        return SHOPPING_ID;\n    }\n", "code2": "    public void deleteObject(String id) throws SQLException {\n        boolean selfConnection = true;\n        Connection conn = null;\n        PreparedStatement stmt = null;\n        try {\n            if (dbConnection == null) {\n                DatabaseConn dbConn = new DatabaseConn();\n                conn = dbConn.getConnection();\n                conn.setAutoCommit(false);\n            } else {\n                conn = dbConnection;\n                selfConnection = false;\n            }\n            stmt = conn.prepareStatement(this.deleteSql);\n            stmt.setString(1, id);\n            stmt.executeUpdate();\n            if (selfConnection) conn.commit();\n        } catch (Exception e) {\n            if (selfConnection && conn != null) conn.rollback();\n            throw new SQLException(e.getMessage());\n        } finally {\n            if (stmt != null) {\n                stmt.close();\n                stmt = null;\n            }\n            if (selfConnection && conn != null) {\n                conn.close();\n                conn = null;\n            }\n        }\n    }\n", "label": 1, "substitutes": {"createEmptyCart": ["createNewCart", " createEmptyOrder", "createEmptyTransaction", "createNewOrder", "createZeroTransaction", "createEmptyOrder", " createEmptyProduct", "createZeroCart", " createEmptyTransaction", " createNewCart", "createThisOrder", "createZeroProduct", "createThisProduct", " createNewTransaction", "createNewProduct", " createNewOrder", "createZeroOrder", "createEmptyProduct", " createNewProduct", "createThisCart", "createNewTransaction", "createThisTransaction"], "SHOPPING_ID": ["SHOPPINGITNUM", "SHOPPINGIDVID", "SHOPPINGINGIDs", "SHOPPINGPNUM", "SHOPPING_VID", "SHOPPINGIdURL", "SHOPPINGVALid", "SHOPPOT_ID", "SHOPPIP_id", "SHOPPOTINGUID", "SHOPPINGITID", "SHOPPOTINGNUM", "SHOPPIP_ID", "SHOPPINGINGId", "SHOPPINGIdID", "SHOPPINGIdVID", "SHOPPINGIDId", "SHOPPOT_NUM", "SHOPPING_Id", "SHOPPING_URL", "SHOPPTING_NAME", "SHOPPTING_VID", "SHOPPINGIDIDS", "SHOPPINGPIDs", "SHOPPINGPUID", "SHOPPAP_Id", "SHOPPAP_IDS", "SHOPPING_NAME", "SHOPPING_id", "SHOPPTINGIDID", "SHOPPOT_UID", "SHOPPINGIDID", "SHOPPINGITIDs", "SHOPPTINGIDNAME", "SHOPPING_NUM", "SHOPPTING_URL", "SHOPPING_UID", "SHOPPINGINGIDS", "SHOPPOTINGIDs", "SHOPPIP_UID", "SHOPPINGPID", "SHOPPINGIdNAME", "SHOPPAP_UID", "SHOPPING_IDS", "SHOPPINGINGUID", "SHOPPINGIDUID", "SHOPPINGVALID", "SHOPPOT_IDs", "SHOPPINGINGID", "SHOPPINGINGNUM", "SHOPPTING_ID", "SHOPPINGITUID", "SHOPPTINGIDVID", "SHOPPINGVALUID", "SHOPPINGIDURL", "SHOPPOTINGID", "SHOPPAP_ID", "SHOPPTINGIDURL", "SHOPPING_IDs", "SHOPPINGIDNAME"], "con": ["ln", "Con", "mc", "win", "cur", "cover", "cos", "fc", "dial", "en", "cat", "po", "conv", "Conn", "bon", "ca", "pg", "ctrl", "const", "cons", "conf", "ren", "open", "re", "cp", "ctx", "c", "ex", "bo", "connection", "cc", "gc", "col", "cf", "ct", "com", "connect", "conn", "cn", "ch", "db", "un", "client", "xc", "ain", "nc", "ran", "cont", "soc", "pc", "pen", "rc", "coll", "cal", "can", "pool", " conn", "co", "CON"], "insert_cart": ["entry_progress", "entry_art", "insertMemart", "insert2start", "entryMemart", "insert2progress", "insert___cart", "insert2controller", "insertMemcart", "import_cart", "import___art", "insertPTcart", "insert2art", " insert2cart", "import___cart", "insert_quant", "insert2pot", "insertThearticle", "insertPcontroller", " insert_pt", "entryMemarticle", "entryMemcart", "insert___pt", "insert_controller", "import_pt", "import_art", "insertptart", " insert_cod", "import_controller", "entryMemprogress", "insertMemarticle", " insert2art", " insert2cod", "insertTheart", " insert2start", "insertptcart", "insert2article", "insert_article", "entry_cart", "insert_cod", "insert_pot", " insert2pt", "insertPpt", "import_Cart", "insert2pt", "import___controller", "insertPTquant", "insert_Cart", "insertPTart", "insertptquant", "insert2Cart", "insertingpt", "entry_article", "import___pt", "insertMemprogress", "insert___art", "insertThecart", "insert_progress", "insert2cod", "insert_pt", " insert_start", "insertingstart", "insertptcod", "insert___controller", "insertingcart", " insert2quant", "insertPart", "insert_start", "insertTheprogress", "insert2cart", "insert_art", " insert_quant", "import_pot", "insertPcart", "insertPTcod", "insert2quant", "insertingart", " insert_art"]}}
{"id1": "12078471", "id2": "2398448", "code1": "    public static Model tryLoadURL(String url, RDFFormat format) throws MalformedURLException, IOException {\n        URLConnection c = new URL(url).openConnection();\n        c.addRequestProperty(\"Accept\", format.getKey());\n        String data = StreamUtil.toString(c.getInputStream());\n        Model model = ModelFactory.createDefaultModel();\n        model.read(new ByteArrayInputStream(data.getBytes()), \"\", format.getValue());\n        return model;\n    }\n", "code2": "    private void handleURL() throws JspException, IOException {\n        Map in_map = prepareInputMap();\n        String in_str = JSONTransformer.serialize(in_map);\n        byte[] input = in_str.getBytes(\"UTF-8\");\n        HttpURLConnection conn = (HttpURLConnection) new URL(url).openConnection();\n        conn.setRequestMethod(\"POST\");\n        conn.setDoOutput(true);\n        conn.setDoInput(true);\n        conn.setUseCaches(false);\n        conn.connect();\n        OutputStream os = conn.getOutputStream();\n        os.write(input);\n        os.close();\n        InputStream is = conn.getInputStream();\n        InputStreamReader reader = new InputStreamReader(is, \"UTF-8\");\n        StringBuffer s_buf = new StringBuffer();\n        char[] tmp_buf = new char[1024];\n        int count;\n        while ((count = reader.read(tmp_buf)) != -1) {\n            if (count == 0) continue;\n            s_buf.append(tmp_buf, 0, count);\n        }\n        reader.close();\n        Map out_map = null;\n        try {\n            out_map = JSONTransformer.parseObject(s_buf.toString());\n        } catch (ParseException e) {\n            returnErrorResult(e.getMessage());\n        }\n        handleResultMap(out_map);\n    }\n", "label": 0, "substitutes": {"tryLoadURL": [" tryLoadUrl", "tryReadUR", " tryloadURL", "tryReadString", "tryOpenURL", "tryReadUrl", " tryloadString", "tryOpenString", "tryLoadString", "tryReadURL", "tryLoadUrl", " tryLoadUR", "tryloadUR", "tryloadUrl", "tryloadURL", " tryloadUrl", "tryloadString", " tryloadUR", "tryLoadUR", "tryOpenUrl", " tryLoadString", "tryOpenUR"], "url": ["build", "sl", "path", "address", "string", "file", "Url", "log", "abs", "nl", "print", "k", "ls", "r", "dl", "ll", "pattern", "pl", "host", "https", "html", "ssl", "location", "link", "uri", "URL", "job", "web", "loc", "out", "ur", "q", "un", "http", "key", "l", "ref", "sql", "ul"], "format": ["settings", "function", "filter", "at", "fc", "file", "mt", "term", "ats", "cat", "transform", "print", "mode", "join", "struct", "printf", "feat", "style", "output", "index", "act", "pattern", "status", "html", "accept", "f", "config", "Format", "form", "set", "sort", "parse", "template", "spec", "att", "MAT", "and", "use", "version", "list", "with", "layout", "unit", "type", "edit", "mat"], "c": ["mc", "cur", "v", "fc", "p", "ce", "anc", "cu", "b", "conv", "ca", "ctrl", "cin", "lc", "r", "cp", "call", "i", "a", "cs", "cr", "m", "cc", "f", "cf", "ct", "com", "cl", "sc", "ch", "dc", "etc", "u", "xc", "cm", "nc", "cont", "ac", "enc", "C", "cb", "rc", "l", "g", "ec", "co", "con"], "data": ["text", "d", "sample", "bytes", "description", "batch", "ata", "dat", "sequence", "string", "row", "no", "output", "content", "area", "html", "feed", "accept", "dump", "base", "buffer", "serial", "message", "raw", "input", "name", "hex", "source", "value", "image", "key", "response", "DATA", "window", "cache", "json", "info", "body", "space"], "model": ["sample", "module", "human", "batch", "proxy", "log", "mod", "transform", "map", "obj", "sm", "Model", "manager", "re", "view", "relation", "ll", "instance", "gp", "m", "server", "job", "set", "form", "table", "models", "message", "result", "rm", "bm", "db", "impl", "mm", "tree", "frame", "template", "object", "me", "im", "save", "value", "report", "dm", "el", "response", "sim", "xml", "controller", "mb", "de", "command"]}}
{"id1": "9261777", "id2": "755203", "code1": "    public static void main(String[] args) {\n        String source, destination;\n        if (args[0].toLowerCase().endsWith(\".gz\")) {\n            source = args[0];\n            destination = source.substring(0, source.length() - 3);\n        } else {\n            source = args[0] + \".gz\";\n            destination = args[0];\n        }\n        InputStream is = null;\n        OutputStream os = null;\n        try {\n            is = new GZIPInputStream(new FileInputStream(source));\n            os = new FileOutputStream(destination);\n            byte[] buffer = new byte[8192];\n            for (int length; (length = is.read(buffer)) != -1; ) os.write(buffer, 0, length);\n        } catch (IOException e) {\n            System.err.println(\"Fehler: Kann nicht entpacken \" + args[0]);\n        } finally {\n            if (os != null) try {\n                os.close();\n            } catch (IOException e) {\n            }\n            if (is != null) try {\n                is.close();\n            } catch (IOException e) {\n            }\n        }\n    }\n", "code2": "    private static void readAndRewrite(File inFile, File outFile) throws IOException {\n        ImageInputStream iis = ImageIO.createImageInputStream(new BufferedInputStream(new FileInputStream(inFile)));\n        DcmParser dcmParser = DcmParserFactory.getInstance().newDcmParser(iis);\n        Dataset ds = DcmObjectFactory.getInstance().newDataset();\n        dcmParser.setDcmHandler(ds.getDcmHandler());\n        dcmParser.parseDcmFile(null, Tags.PixelData);\n        PixelDataReader pdReader = pdFact.newReader(ds, iis, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        System.out.println(\"reading \" + inFile + \"...\");\n        pdReader.readPixelData(false);\n        ImageOutputStream out = ImageIO.createImageOutputStream(new BufferedOutputStream(new FileOutputStream(outFile)));\n        DcmEncodeParam dcmEncParam = DcmEncodeParam.IVR_LE;\n        ds.writeDataset(out, dcmEncParam);\n        ds.writeHeader(out, dcmEncParam, Tags.PixelData, dcmParser.getReadVR(), dcmParser.getReadLength());\n        System.out.println(\"writing \" + outFile + \"...\");\n        PixelDataWriter pdWriter = pdFact.newWriter(pdReader.getPixelDataArray(), false, ds, out, dcmParser.getDcmDecodeParam().byteOrder, dcmParser.getReadVR());\n        pdWriter.writePixelData();\n        out.flush();\n        out.close();\n        System.out.println(\"done!\");\n    }\n", "label": 1, "substitutes": {"source": ["text", "where", "search", "path", "sample", "subject", "address", "string", "file", "sequence", "site", "str", "back", "parent", "ce", "resource", "src", "store", "clip", "component", "char", "start", "context", "SOURCE", "service", "from", "target", "copy", "filename", "style", "content", "index", "view", "query", "ource", "scope", "check", "status", "title", "volume", "language", "uri", "base", "reason", "config", "expression", "prefix", "size", "Source", "form", "table", "lower", "sql", "init", "input", "tree", "template", "spec", "details", "use", "script", "info", "ui", "body", "origin", "se"], "destination": ["portine", " destinate", "testination", "testinate", "distinator", "combinator", "declacement", "origend", "destinator", "tempinator", "destine", " destend", "distinant", "goodinate", "certinate", "portend", "portination", "destino", "goodinator", "declination", "origine", "destinant", "combinations", "certacement", "certination", "testino", "tempino", "distination", " destino", "destacement", "goodacement", " destine", " destinator", "portinator", "origination", "declinate", "combinant", "certinator", "destinate", "tempination", "declinator", "declinant", "tempinate", "declinations", "goodination", "distinations", "destend", "combination", "testinator", "destinations", "originator"], "is": ["js", "iss", "ic", "vs", "isl", "abs", "ics", "isa", "was", "sis", "in", "ist", "mis", "ais", "ri", "iris", "si", "bits", "ts", "vis", "i", "ios", "has", "are", "obs", "ims", "ib", "bis", "es", "dis", "ns", "ps", "iter", "IS", "ms", "s", "bs", "lis", "oss", "init", "its", "mus", "ois", "icks", "isin", "ie", "ris", "ains", "sys", "im", "isf", "tis", "Is", "nis", "ir", "ip", "us", "ins", "info", "isi", "isc", "zes", "ires", "iso", "webkit"], "os": ["ks", "cos", "oses", "bos", "oos", "oes", "uts", "ost", "ose", "io", "ot", "ox", "mot", "OS", "aos", "mos", "ts", "ols", "ios", "obs", "bis", "on", "fs", "ns", "o", "es", "dis", "\u00f3", "ms", "osi", "bs", "los", "oss", "oS", "s", "ops", "ones", "asis", "mes", "zero", "sys", "or", "Os", "dos", "pos", "ob", "css", "outs", "ss", "oa", "ys"], "buffer": ["background", "sample", "batch", "binary", "sequence", "variable", "append", "queue", "bar", "history", "event", "row", "stack", "phrase", "total", "button", "view", "word", "library", "block", "mem", "padding", "table", "message", "buff", "paste", "database", "frame", "template", "document", "comment", "memory", "shape", "pad", "window", "cache", "available", "buf", "Buffer", "temp", "display", "command"], "length": ["text", "display", "path", "tail", "number", "Length", "string", "height", "sequence", "ence", "angle", "before", "point", "component", "count", "start", "position", "ength", "history", "needed", "enth", "span", "total", "family", "ENGTH", "len", "ith", "time", "frequency", "duration", "bus", "volume", "partial", "split", "loop", "padding", "end", "th", "database", " Length", "capacity", "ind", "offset", "width", "bow", "load", "reading", "distance", "shape", "pad", "hello", "of", "l", "ty", "character", "stop", "type", "full", "last", "integer", "ment", "collection", "size"]}}
{"id1": "12066447", "id2": "5977352", "code1": "    protected void truncate(final File file) {\n        LogLog.debug(\"Compression of file: \" + file.getAbsolutePath() + \" started.\");\n        if (FileUtils.isFileOlder(file, ManagementFactory.getRuntimeMXBean().getStartTime())) {\n            final File backupRoot = new File(this.getBackupDir());\n            if (!backupRoot.exists() && !backupRoot.mkdirs()) {\n                throw new AppenderInitializationError(\"Can't create backup dir for backup storage\");\n            }\n            SimpleDateFormat df;\n            try {\n                df = new SimpleDateFormat(this.getBackupDateFormat());\n            } catch (final Exception e) {\n                throw new AppenderInitializationError(\"Invalid date formate for backup files: \" + this.getBackupDateFormat(), e);\n            }\n            final String date = df.format(new Date(file.lastModified()));\n            final File zipFile = new File(backupRoot, file.getName() + \".\" + date + \".zip\");\n            ZipOutputStream zos = null;\n            FileInputStream fis = null;\n            try {\n                zos = new ZipOutputStream(new FileOutputStream(zipFile));\n                final ZipEntry entry = new ZipEntry(file.getName());\n                entry.setMethod(ZipEntry.DEFLATED);\n                entry.setCrc(FileUtils.checksumCRC32(file));\n                zos.putNextEntry(entry);\n                fis = FileUtils.openInputStream(file);\n                final byte[] buffer = new byte[1024];\n                int readed;\n                while ((readed = fis.read(buffer)) != -1) {\n                    zos.write(buffer, 0, readed);\n                }\n            } catch (final Exception e) {\n                throw new AppenderInitializationError(\"Can't create zip file\", e);\n            } finally {\n                if (zos != null) {\n                    try {\n                        zos.close();\n                    } catch (final IOException e) {\n                        LogLog.warn(\"Can't close zip file\", e);\n                    }\n                }\n                if (fis != null) {\n                    try {\n                        fis.close();\n                    } catch (final IOException e) {\n                        LogLog.warn(\"Can't close zipped file\", e);\n                    }\n                }\n            }\n            if (!file.delete()) {\n                throw new AppenderInitializationError(\"Can't delete old log file \" + file.getAbsolutePath());\n            }\n        }\n    }\n", "code2": "    public static void copyFile(File src, File dest, int bufSize, boolean force) throws IOException {\n        if (dest.exists()) if (force) dest.delete(); else throw new IOException(\"Cannot overwrite existing file: \" + dest.getName());\n        byte[] buffer = new byte[bufSize];\n        int read = 0;\n        InputStream in = null;\n        OutputStream out = null;\n        try {\n            in = new FileInputStream(src);\n            out = new FileOutputStream(dest);\n            while (true) {\n                read = in.read(buffer);\n                if (read == -1) break;\n                out.write(buffer, 0, read);\n            }\n        } finally {\n            if (in != null) try {\n                in.close();\n            } finally {\n                if (out != null) out.close();\n            }\n        }\n    }\n", "label": 1, "substitutes": {"truncate": ["extuncize", "trunize", "trculate", "extvalidize", "trunate", "extvalidate", "trunicate", "trvalidicate", "trvalidation", "extuncicate", "extuncation", "trvalidize", "truncize", "trculation", "extvalidicate", "trculize", "trunation", "trvalidate", "truncation", "extuncate", "extvalidation", "trculicate", "truncicate"], "file": ["local", "path", "module", "log", "dir", "lock", "parent", "io", "resource", "FILE", "channel", "ile", "be", "e", "event", "class", "current", "File", "run", "attribute", "work", "filename", "model", "from", "time", "null", "range", "block", "to", "port", "zip", "link", "f", "base", "size", "table", "message", "page", "out", "get", "format", "files", "user", "fp", "create", "tree", "frame", "name", "foo", "spec", "object", "line", "template", "data", "source", "le", "report", "image", "or", "use", "handle", "info", "type", "full", "this", "word"], "backupRoot": ["backureroot", "backumproot", " backupidDir", "backupFolder", "backflowDir", "workupidroot", "backupDir", "backupidFolder", " backupidroot", "BackupRoot", "backureDir", "backupHome", "backdownDir", "workuproot", "backuproot", "workupidDir", "backuperroot", "backmpBoot", "backuperRoot", "backmpRoot", "workupRoot", "backureHome", "backupidDir", "backureRoot", "workupidRoot", "BackupDir", "workupidHome", "workupDir", "backumpRoot", " backupidBox", "BackupFolder", " backupidRoot", "backupidRoot", "backupidBox", "backupBox", "workupHome", " backuproot", "backupsDir", "backdownRoot", "BackupidRoot", "backureBoot", "workupBoot", " backupDir", "backupsroot", "backdownFolder", "workupidBoot", "backflowFolder", "backuperHome", "backumpBox", "backumpDir", "backflowRoot", "BackupidFolder", "backmproot", "backupBoot", "BackupidDir", "backupidroot", "backupsBox", "backupidHome", "backmpDir", " backupBox", "backupsRoot", "backuperDir", "backupidBoot"], "df": ["DF", "d", "du", "Def", "dr", "pdf", "pd", "gd", "fd", "fun", "di", "lf", "dp", "NF", "dep", "raf", "tif", "dl", "dx", "tf", "dim", "md", "f", "sf", "cf", "def", "dt", "sd", "dd", "format", "hd", "db", "mm", "ds", "deb", "cd", "bf", "dm", "uf", " pdf", "dc"], "date": ["late", "module", "match", "number", "when", "string", "dat", "future", "tag", "resource", "update", "event", "zone", "start", "due", "month", "run", "output", "age", "content", "time", " day", "range", "day", "grade", "duration", "dates", "down", "note", "dt", "format", "message", "get", "create", "name", "frame", "today", "dated", " Date", "daily", "data", "days", "save", "Date", "value", "ate", "version", "default", "sum", "standard", "year", "cal", "now"], "zipFile": ["logfile", "logStream", "zipPath", "pdfFile", "Zipfile", "zStore", "ZipPath", "pdffile", "pdfStream", "zipStream", "zfile", "jsonFilename", "zFile", "zFilename", "logPath", "logFilename", "pdfPath", "jsonfile", "jsonStore", "logFile", "logStore", "ZipStream", "zipfile", "zipFilename", "ZipFile", "zipStore", "jsonFile"], "zos": ["js", "ss", "cos", "oses", "zi", "ez", "sbm", "zers", "sis", "z", "zon", "zzle", "esm", "zag", "zona", "tz", " sands", "hz", "hs", "zar", "Sax", "south", "sol", "asio", "shed", "za", "estro", "jas", "cz", "ze", "zik", "nz", "enz", "ros", "ses", "zan", "zen", "zo", "los", "oss", "stice", "bs", "ones", "zer", "asar", "eros", "zin", "hess", "bes", "rez", "zb", "enos", "css", "zes", "ozo", "sch", "os", "webkit"], "fis": ["sfisc", "ifIs", "ofisc", "efis", "efisc", "li", "ofois", " fib", "ofib", "efIs", "ofiss", "Fisc", "fisc", "fia", "sfiss", "foi", "ifisc", "fits", "cfits", "sfIs", " fiss", "fiib", "cfis", "fois", "if\u00eds", "ifis", "fiss", "Fis", "fIs", "foia", "dfiss", "foIs", "cfisc", "fiiss", "f\u00eds", "FIs", "sfier", "sfis", "fiis", "lis", "sfits", "ef\u00eds", "Fiss", "lIs", "dfis", "F\u00eds", "fib", "cfiss", "dfIs", "fier", "fi", "lia", "fiois", "Fier", "Fi", "ofits", "dfier", " fois", "Fia", "ofis"], "entry": ["search", "cell", "description", "delete", "member", "sheet", "tex", "ce", "resource", "Entry", "cue", "char", "e", "obj", "event", "ion", "internal", "row", "record", "se", "attribute", "rance", "deep", "section", "word", "office", "connection", "zip", "insert", "def", "set", "ary", "entity", "zo", "element", "ie", "ry", "object", "comment", "data", "add", "key", "escape", "and", "or", "xml", "ent", "option", "de", "ace", "ment", "command"], "buffer": ["sample", "batch", "binary", "sequence", "variable", "append", "queue", "bar", "length", "char", "stack", "phrase", "attribute", "button", "view", "word", "library", "block", "category", "code", "volume", "base", "iter", "letter", "padding", "table", "page", "buff", "message", "paste", "screen", "frame", "template", "document", "comment", "zero", "memory", "header", "window", "cache", "available", "buf", "Buffer", "temp", "command"], "readed": ["readableed", "indexED", "READED", "READer", "countd", " readeded", " readented", "Readed", "readableED", "redented", "readED", "Reader", "findared", "reader", "readared", "readableared", "readied", "finded", "indexed", "READd", "counter", "readeded", "reded", "indexented", "findied", "Readied", " readED", "READed", "ReadED", "indexeded", "findED", "Readd", "countED", "rededed", "readableied", "redED", "Readared", "readd", "counted", "readented"]}}
{"id1": "6625074", "id2": "646016", "code1": "    public static String SHA1(String text) {\n        byte[] sha1hash = new byte[40];\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"SHA-1\");\n            md.update(text.getBytes(\"iso-8859-1\"), 0, text.length());\n            sha1hash = md.digest();\n        } catch (UnsupportedEncodingException ex) {\n            Logger.getLogger(Converter.class.getName()).log(Level.SEVERE, null, ex);\n        } catch (NoSuchAlgorithmException ex) {\n            Logger.getLogger(Converter.class.getName()).log(Level.SEVERE, null, ex);\n        }\n        return convertToHex(sha1hash);\n    }\n", "code2": "    public void elimina(Cliente cli) throws errorSQL, errorConexionBD {\n        System.out.println(\"GestorCliente.elimina()\");\n        int id = cli.getId();\n        String sql;\n        Statement stmt = null;\n        try {\n            gd.begin();\n            sql = \"DELETE FROM cliente WHERE cod_cliente =\" + id;\n            System.out.println(\"Ejecutando: \" + sql);\n            stmt = gd.getConexion().createStatement();\n            stmt.executeUpdate(sql);\n            System.out.println(\"executeUpdate\");\n            sql = \"DELETE FROM persona WHERE id =\" + id;\n            System.out.println(\"Ejecutando: \" + sql);\n            stmt.executeUpdate(sql);\n            gd.commit();\n            System.out.println(\"commit\");\n            stmt.close();\n        } catch (SQLException e) {\n            gd.rollback();\n            throw new errorSQL(e.toString());\n        } catch (errorConexionBD e) {\n            System.err.println(\"Error en GestorCliente.elimina(): \" + e);\n        } catch (errorSQL e) {\n            System.err.println(\"Error en GestorCliente.elimina(): \" + e);\n        }\n    }\n", "label": 0, "substitutes": {"SHA1": [" SHAOne", "HS2", " SHA2", "HS1", "sha2", " SHA512", "SHAOne", "SHA512", "sha1", "HSOne", "SHA2", "sha512", "HS512", "shaOne"], "text": ["path", "v", "pt", "string", "txt", "Text", "str", "print", "test", "t", "event", "nt", "msg", "output", "url", "content", "act", "ext", "code", "title", "form", "buffer", "message", "ut", "q", "doc", "input", "read", "document", "name", "template", "comment", "hex", "data", "source", "cont", "value", "password", "TEXT", "sum", "it", "tx", "translation", "body", "word"], "sha1hash": ["sha2sum", "sha3hash", "sha31address", "shaonesum", "SHA2Hash", "sha31hash", "ha2address", "haonemessage", "haonehash", "SHA1hash", "sha2hash", "sha0sum", "sha2address", "ha1sum", "sha1sum", "ha2sum", "sha3message", "ha1hash", "shaonehex", "SHA2sum", "sha1Hash", "SHA2hash", "sha3Hash", "sha2hex", "shaoneHash", "sha3sum", "SHA1hex", "sha0address", "sha31sum", "ha2Hash", "SHA2hex", "shaonehash", "SHA1sum", "sha2Hash", "sha0hash", "ha1Hash", "SHA1Hash", "ha2hash", "shaonemessage", "ha1address", "sha2message", "sha31Hash", "sha1message", "sha1address", "sha1hex", "haoneHash", "sha0Hash", "ha1message", "haonesum"], "md": ["d", "mc", "dr", "pdf", "pd", "ld", "mt", "amd", "mod", "di", " MD", "obj", "sm", "hash", "nd", "strong", "ad", "det", "m", "pm", "sd", "ms", "dd", "mand", "rm", "alg", "hd", "mm", "ds", "mk", "cd", "ind", "od", "bd", "mn", "and", "dm", "sha", "der", "dh", "df", "cmd", "MD", " Md"]}}
{"id1": "3024987", "id2": "20019847", "code1": "    @Test\n    public void testCopy_readerToOutputStream_Encoding() throws Exception {\n        InputStream in = new ByteArrayInputStream(inData);\n        in = new YellOnCloseInputStreamTest(in);\n        Reader reader = new InputStreamReader(in, \"US-ASCII\");\n        ByteArrayOutputStream baout = new ByteArrayOutputStream();\n        OutputStream out = new YellOnFlushAndCloseOutputStreamTest(baout, false, true);\n        IOUtils.copy(reader, out, \"UTF16\");\n        byte[] bytes = baout.toByteArray();\n        bytes = new String(bytes, \"UTF16\").getBytes(\"US-ASCII\");\n        assertTrue(\"Content differs\", Arrays.equals(inData, bytes));\n    }\n", "code2": "    public static void copyFile(File source, File target) throws IOException {\n        FileChannel in = (new FileInputStream(source)).getChannel();\n        FileChannel out = (new FileOutputStream(target)).getChannel();\n        in.transferTo(0, source.length(), out);\n        in.close();\n        out.close();\n    }\n", "label": 1, "substitutes": {"testCopy_readerToOutputStream_Encoding": ["testCopy_readerToOutputStream_encoding", "testCopy_readerToOutputStream_encoded", "testCopy_readerToOutputStream_Encending", "testCopy_readerToOutputStreamWithEncending", "testCopy_readerToOutputStreamWithDecoding", "testCopy_readerToOutputStream_Decoder", "testCopy_readerToOutputStream_Choding", "testCopy_readerToOutputStreamWithDecending", "testCopy_readerToOutputStream_encoder", "testCopy_readerToOutputStream_Encoder", "testCopy_readerToOutputStreamWithDecoder", "testCopy_readerToOutputStream_Decoded", "testCopy_readerToOutputStream_Chending", "testCopy_readerToOutputStream_Choded", "testCopy_readerToOutputStreamWithEncoder", "testCopy_readerToOutputStreamWithEncoding", "testCopy_readerToOutputStream_Encoded", "testCopy_readerToOutputStream_encending", "testCopy_readerToOutputStream_Decoding", "testCopy_readerToOutputStreamWithEncoded", "testCopy_readerToOutputStream_Choder", "testCopy_readerToOutputStream_Decending", "testCopy_readerToOutputStreamWithDecoded"], "in": ["local", "mc", "p", "sin", "is", "inf", "Input", "up", "cin", "from", "copy", "mi", " IN", "r", "act", "ini", "IN", "n", "i", "inc", "inner", "inside", "m", "as", "iter", "din", "init", "input", "isin", "ind", "read", "mm", "gin", "data", "In", "source", "cont", "ac", "ins", "rin", "l", "it", "info", "bin", "con", "inn"], "reader": ["dr", "ocker", "Larry", "file", "io", "handler", "oe", "rx", "per", "loader", "ner", "row", "phrase", "Reader", "mr", "r", "rise", "query", "ro", "red", "inner", "rot", "iterator", "iter", "buffer", "req", "writer", "input", "read", "parser", "rr", "data", "reading", "rl", "driver", "er", "rar"], "baout": ["BAout", "bain", "BAot", "boos", "cain", "beanin", "beanOut", "bares", "boOut", "haOut", "yares", "beanout", "haouts", "haout", "yain", "caout", "caOut", " baot", "oaOut", "boin", "BAin", "oaout", " bain", "baOut", "beanouts", "hain", "baouts", "BAres", "oaos", "baot", "yaout", "baos", "yaot", " bares", "oain", "caouts", "caos", "boout"], "out": ["cos", "batch", "outs", "OU", " Out", "io", "b", "t", "conv", "stable", "update", "output", "copy", " outs", " output", "bo", "to", "n", "null", "ex", "res", "auto", "gt", "outer", "o", "net", "oss", "cn", "all", " bout", "client", "sys", "con", "OUT", " OUT", "ao", "Out", " os", "cmd", "ou", "ne", "os"], "bytes": ["resources", "pieces", "cells", "pdf", "results", "outs", "binary", "des", "objects", "terms", "ings", "groups", "latest", "ites", "strings", "blocks", "comments", "bits", "gs", "tes", "Bytes", "users", "names", "reports", "pages", "units", "bps", "unks", "letters", "frames", "parts", "bs", "files", "raw", "reads", "its", "ones", "videos", "versions", "vals", "ips", "services", "data", "lines", "faces", "les", "seconds", "ies", "issues", "words", "es", "classes", "gets", "values"]}}
{"id1": "310182", "id2": "19739421", "code1": "    public void convert(File src, File dest) throws IOException {\n        InputStream in = new BufferedInputStream(new FileInputStream(src));\n        DcmParser p = pfact.newDcmParser(in);\n        Dataset ds = fact.newDataset();\n        p.setDcmHandler(ds.getDcmHandler());\n        try {\n            FileFormat format = p.detectFileFormat();\n            if (format != FileFormat.ACRNEMA_STREAM) {\n                System.out.println(\"\\n\" + src + \": not an ACRNEMA stream!\");\n                return;\n            }\n            p.parseDcmFile(format, Tags.PixelData);\n            if (ds.contains(Tags.StudyInstanceUID) || ds.contains(Tags.SeriesInstanceUID) || ds.contains(Tags.SOPInstanceUID) || ds.contains(Tags.SOPClassUID)) {\n                System.out.println(\"\\n\" + src + \": contains UIDs!\" + \" => probable already DICOM - do not convert\");\n                return;\n            }\n            boolean hasPixelData = p.getReadTag() == Tags.PixelData;\n            boolean inflate = hasPixelData && ds.getInt(Tags.BitsAllocated, 0) == 12;\n            int pxlen = p.getReadLength();\n            if (hasPixelData) {\n                if (inflate) {\n                    ds.putUS(Tags.BitsAllocated, 16);\n                    pxlen = pxlen * 4 / 3;\n                }\n                if (pxlen != (ds.getInt(Tags.BitsAllocated, 0) >>> 3) * ds.getInt(Tags.Rows, 0) * ds.getInt(Tags.Columns, 0) * ds.getInt(Tags.NumberOfFrames, 1) * ds.getInt(Tags.NumberOfSamples, 1)) {\n                    System.out.println(\"\\n\" + src + \": mismatch pixel data length!\" + \" => do not convert\");\n                    return;\n                }\n            }\n            ds.putUI(Tags.StudyInstanceUID, uid(studyUID));\n            ds.putUI(Tags.SeriesInstanceUID, uid(seriesUID));\n            ds.putUI(Tags.SOPInstanceUID, uid(instUID));\n            ds.putUI(Tags.SOPClassUID, classUID);\n            if (!ds.contains(Tags.NumberOfSamples)) {\n                ds.putUS(Tags.NumberOfSamples, 1);\n            }\n            if (!ds.contains(Tags.PhotometricInterpretation)) {\n                ds.putCS(Tags.PhotometricInterpretation, \"MONOCHROME2\");\n            }\n            if (fmi) {\n                ds.setFileMetaInfo(fact.newFileMetaInfo(ds, UIDs.ImplicitVRLittleEndian));\n            }\n            OutputStream out = new BufferedOutputStream(new FileOutputStream(dest));\n            try {\n            } finally {\n                ds.writeFile(out, encodeParam());\n                if (hasPixelData) {\n                    if (!skipGroupLen) {\n                        out.write(PXDATA_GROUPLEN);\n                        int grlen = pxlen + 8;\n                        out.write((byte) grlen);\n                        out.write((byte) (grlen >> 8));\n                        out.write((byte) (grlen >> 16));\n                        out.write((byte) (grlen >> 24));\n                    }\n                    out.write(PXDATA_TAG);\n                    out.write((byte) pxlen);\n                    out.write((byte) (pxlen >> 8));\n                    out.write((byte) (pxlen >> 16));\n                    out.write((byte) (pxlen >> 24));\n                }\n                if (inflate) {\n                    int b2, b3;\n                    for (; pxlen > 0; pxlen -= 3) {\n                        out.write(in.read());\n                        b2 = in.read();\n                        b3 = in.read();\n                        out.write(b2 & 0x0f);\n                        out.write(b2 >> 4 | ((b3 & 0x0f) << 4));\n                        out.write(b3 >> 4);\n                    }\n                } else {\n                    for (; pxlen > 0; --pxlen) {\n                        out.write(in.read());\n                    }\n                }\n                out.close();\n            }\n            System.out.print('.');\n        } finally {\n            in.close();\n        }\n    }\n", "code2": "    public static void main(final String[] args) throws RecognitionException, TokenStreamException, IOException, IllegalOptionValueException, UnknownOptionException {\n        try {\n            CmdLineParser cmdLineParser = new CmdLineParser();\n            Option formatOption = cmdLineParser.addStringOption('f', \"format\");\n            Option outputEncodingOption = cmdLineParser.addStringOption('c', \"outcharset\");\n            Option inputEncodingOption = cmdLineParser.addStringOption('i', \"incharset\");\n            cmdLineParser.parse(args);\n            String format = (String) cmdLineParser.getOptionValue(formatOption);\n            String outputEncoding = (String) cmdLineParser.getOptionValue(outputEncodingOption);\n            if (outputEncoding == null || outputEncoding.trim().equals(\"\")) {\n                outputEncoding = \"utf-8\";\n                System.out.println(\"Defaulting to output charset utf-8 as argument -c is missing or not valid.\");\n            }\n            String inputEncoding = (String) cmdLineParser.getOptionValue(inputEncodingOption);\n            if (inputEncoding == null || outputEncoding.trim().equals(\"\")) {\n                inputEncoding = \"utf-8\";\n                System.out.println(\"Defaulting to input charset utf-8 as argument -i is missing or not valid.\");\n            }\n            String[] remainingArgs = cmdLineParser.getRemainingArgs();\n            if (remainingArgs.length != 2) {\n                printUsage(\"Input and output file are not specified correctly. \");\n            }\n            File inputFile = new File(remainingArgs[0]);\n            if (!inputFile.exists()) {\n                printUsage(\"Input file \" + remainingArgs[0] + \" does not exist. \");\n            }\n            if (format == null || format.trim().equals(\"\")) {\n                format = (String) FileUtil.cutExtension(inputFile.getName()).getValue();\n            }\n            File outputFile = new File(remainingArgs[1]);\n            if (!outputFile.exists()) {\n                outputFile.createNewFile();\n            }\n            System.out.println(\"format detected: \" + format);\n            if (\"html\".equals(format)) {\n                Reader reader = new HtmlEntityDecoderReader(new InputStreamReader(new FileInputStream(inputFile), inputEncoding));\n                OutputStreamWriter out = new OutputStreamWriter(new FileOutputStream(outputFile), outputEncoding);\n                char[] buffer = new char[1024];\n                int read;\n                do {\n                    read = reader.read(buffer);\n                    if (read > 0) {\n                        out.write(buffer, 0, read);\n                    }\n                } while (read != -1);\n                out.flush();\n                out.close();\n            } else {\n                printUsage(\"Format not specified via argument -f. Also guessing for the extension of input file \" + inputFile.getName() + \" failed\");\n            }\n        } catch (Exception ex) {\n            ex.printStackTrace();\n            printUsage(ex.getMessage());\n        }\n    }\n", "label": 1, "substitutes": {"convert": ["CONversion", "compvert", "CONverting", "consverting", "Converted", "Converts", "consversion", "confer", "unprocess", "conversion", "unvert", "consvert", "unverted", "compverts", "CONVERT", "unfer", "Conversion", "Convert", "unversion", "CONverted", "unverts", "Converting", "CONfer", "ConVERT", "conprocess", "converting", "converts", "CONvert", "Conprocess", "conVERT", "consVERT", "Confer", "compprocess", "compversion", "converted"], "src": ["sr", "path", "sq", "cur", "scan", "file", "txt", "str", "sin", "orig", "rx", "st", "start", "SOURCE", "from", "filename", "url", "rs", "href", "RC", "ource", "img", "host", "cc", "buster", "sit", "uri", "rel", "config", "sc", "Source", "s", "loc", "ipl", "attr", "ur", "its", "req", "usr", "input", "upload", "scene", "hl", "http", "sys", "dist", "source", "SourceFile", "cont", "addr", "rest", "func", "rc", "ser", "ins", "pkg", "inst", "ebin", "stream", "iv"], "dest": ["foreign", "dir", "dat", " Destination", "txt", " orig", "orig", "disk", "test", "Dest", "target", "tif", "write", " destinations", "port", "img", "table", "result", "est", " Dest", " dst", " destination", "gin", "dist", "rest", "source", "temp", "mat"], "in": ["d", "serv", "file", "en", "io", "b", "is", "inf", "st", "up", "cin", "from", "reader", "r", "IN", "i", "inner", "ad", "res", "m", "ar", "as", "din", "isin", "input", "ind", "source", "In", "el", "ins", "rin", "l", "bin", "sql", "stream", "inn"], "p": ["d", "ping", "op", "pb", "P", "pt", "tp", "lp", "pd", "py", "pro", "h", "post", "vp", "part", "b", "prot", "per", "t", "dp", "j", "pg", "at", "cp", "r", "c", "i", "pl", "pi", "wp", "ph", "m", "pre", "f", "ps", "pm", "pers", "pe", "sp", "er", "parse", "fp", "parser", "ap", "pa", "pp", "rep", "pkg", "l", "it", "g", "php", "pc", "jp"], "ds": ["tp", "des", "lists", "gs", "rs", "dates", "ns", "nas", "ps", "ports", "dd", "db", "yes", "amps", "sets", "ks", "mys", "vs", "ats", "obs", "ils", "s", "bs", "hd", " des", " DS", "Ds", "drivers", "iffs", "dos", "outs", "qs", "tests", "d", "js", "aws", "eds", "pd", "points", "dds", "terms", "eps", "ws", "xs", "tes", "dl", "workers", "sd", "dt", " d", "edes", "posts", "loads", "scripts", "ras", "df", "els", "ss", "gd", "di", "dp", "ls", "hs", "cks", "ts", "uds", "DS", "cs", " dd", "ads", "its", " ads", "tags", "ands", "ags", "sts", "dh", " os", "ods", "docs", "os", "ys"], "format": ["settings", "path", "module", "filter", "fc", "at", "file", "mt", "ats", "tag", "id", "lat", "mode", "t", "sche", "feat", "style", "output", "act", "pattern", "pi", " Format", "status", "title", "f", "cf", "Format", "form", "ct", "feature", "table", "set", "parse", "name", "template", "pretty", "spec", "MAT", "source", "top", "fm", "shape", "version", "l", "it", "layout", "unit", "type", "policy", "mat", "size"], "hasPixelData": ["haspixelDATA", " hasPixeldata", "haspixeldata", "haspixelData", "Haspixeldata", "hasFramedata", "hasFrameDATA", "hasixeldata", "HaspixelData", "hasPixeldata", "hasixelData", "HasPixelDATA", "hasixelDATA", " hasPixelDATA", "hasFrameData", "HasPixelData", "HaspixelDATA", "hasPixelDATA", "HasPixeldata"], "inflate": ["inflATE", " invalidATE", "inFLate", "infolat", "incelATE", "informate", "inflicate", "Informate", "inFlicate", " inflATE", "inFlATE", "inFLocate", "inFlocate", "Informated", "informocate", "incelicate", "invalidocate", "infolate", "inflat", "Inflate", "inFlate", "invalidate", " invalidicate", "Inflat", " invalidate", " inflocate", "incelate", "incelocate", " invalidocate", " inflicate", "infolocate", "inFLat", "Informat", "informated", "Inflated", "informat", "inFLated", "invalidicate", "infolated", "inflated", "invalidATE", "Inflocate", "Informocate", "inflocate"], "pxlen": ["xylin", "mmlength", "pxlength", "cpden", "xplength", "pixellen", "cplen", "pexls", "pexden", "tmplength", "packlength", "mmlen", "mxlen", "cplength", "mmln", "pixelfun", "tmplin", "pexlen", "phpdec", "tmplen", "pixellength", "tmpln", "mxdec", "mmlin", "cpln", "pxls", "xyln", "mxlength", "packlen", "xpln", "pxden", "pxdec", "phpln", "mxln", "pexlength", "pxlin", "xpden", "packls", "xplen", "xylen", "packln", "pixells", "pexfun", "pxln", "packdec", "phplen", "packfun", "xylength", "phplength", "pexln", "pxfun"], "out": ["ln", "err", "log", "dir", "io", "crit", "store", "print", "obj", "up", "aos", "msg", "output", "inv", "ex", "res", "inter", "outer", "prefix", "net", "screen", "conn", "init", "user", "cfg", "writer", "gr", "client", "pretty", "name", "sys", "OUT", "group", "list", "Out", "sum", "gov", "cmd", "ou", "outs", "temp"]}}
{"id1": "9371421", "id2": "11562173", "code1": "    public static String eventHash(String eventstr) {\n        try {\n            if (md == null) {\n                md = MessageDigest.getInstance(\"MD5\");\n            }\n            md.update(eventstr.getBytes(\"utf-8\"));\n            byte[] theDigest = md.digest();\n            return new BASE64Encoder().encode(theDigest);\n        } catch (NoSuchAlgorithmException e) {\n            e.printStackTrace();\n        } catch (UnsupportedEncodingException e) {\n            e.printStackTrace();\n        }\n        return null;\n    }\n", "code2": "    private void checkInputStream(InputStream in, byte[] cmp, boolean all) throws IOException {\n        ByteArrayOutputStream stream = new ByteArrayOutputStream();\n        IOUtils.copy(in, stream);\n        byte[] out = stream.toByteArray();\n        if (all) assertEquals(cmp.length, out.length);\n        for (int i = 0; i < cmp.length; i++) assertEquals(cmp[i], out[i]);\n    }\n", "label": 0, "substitutes": {"eventHash": ["textName", "eventhash", "texthash", "EventName", "textRender", " eventhash", "Eventhash", " eventName", " eventRender", "eventName", "textHash", "EventHash", "eventRender", "EventRender"], "eventstr": ["Eventstr", "ventenc", "eventStr", "msgstring", "eventenc", " eventenc", "msgname", " eventname", "eventstring", "ventname", "eventname", " eventStr", "msgstr", "Eventenc", "EventStr", " eventstring", "ventstr", "ventStr", "msgStr", "Eventstring", "Eventname"], "md": ["mc", "d", "dr", "pd", "dat", "mt", "ld", "mod", "mo", "di", "nt", "nd", "met", "red", "mem", "ad", "det", "m", "down", "pm", "ms", "sd", "dd", "ma", "mand", "rm", "td", "hd", "dig", "mm", "ind", "mk", "cd", "od", "bd", "mg", "mn", "dm", "metadata", "mp", "der", "dh", "df", "grad", "mb", "cmd", "MD", "del"], "theDigest": ["theDests", "THEDigested", "theMDest", "thedigested", " theDigesting", "theMDEST", "theDFesting", "theDesting", "theMDested", "theDecest", "THEDigest", "THEMDested", "theDFest", "thedigesting", "theDecested", "theDigesting", "theDigests", "theDEST", "theDecEST", "theDigEST", " theDested", " theDigested", " theDEST", "theMDests", " theDesting", " theDest", "THEMDests", "thedigest", "theDigested", "theDested", "theDest", "THEMDEST", "THEMDest", "THEDigests", "THEDigEST", " theDigEST", "thedigEST", "theDecests", "theDFEST", "theDFested"]}}
{"id1": "19147279", "id2": "19549489", "code1": "    public boolean actualizarDatosFinal(int idJugadorDiv, int idRonda, jugadorxDivxRonda unjxdxr) {\n        int intResult = 0;\n        String sql = \"UPDATE jugadorxdivxronda \" + \" SET resultado = ?, puntajeRonda = ? \" + \" WHERE jugadorxDivision_idJugadorxDivision = \" + idJugadorDiv + \" AND ronda_numeroRonda = \" + idRonda;\n        try {\n            connection = conexionBD.getConnection();\n            connection.setAutoCommit(false);\n            ps = connection.prepareStatement(sql);\n            populatePreparedStatementActFinal(unjxdxr);\n            intResult = ps.executeUpdate();\n            connection.commit();\n        } catch (SQLException ex) {\n            ex.printStackTrace();\n            try {\n                connection.rollback();\n            } catch (SQLException exe) {\n                exe.printStackTrace();\n            }\n        } finally {\n            conexionBD.close(ps);\n            conexionBD.close(connection);\n        }\n        return (intResult > 0);\n    }\n", "code2": "    public static void copy(File sourceFile, File destinationFile) throws IOException {\n        FileChannel sourceFileChannel = (new FileInputStream(sourceFile)).getChannel();\n        FileChannel destinationFileChannel = (new FileOutputStream(destinationFile)).getChannel();\n        sourceFileChannel.transferTo(0, sourceFile.length(), destinationFileChannel);\n        sourceFileChannel.close();\n        destinationFileChannel.close();\n    }\n", "label": 0, "substitutes": {"actualizarDatosFinal": [" actualizarDatasFinancial", " actualizarDatoBasic", " actualizarDatasBasic", " actualizarDataosfinal", " actualizarDataosBasic", " actualizarDatofinal", " actualizarDatosFinancial", " actualizarDatoFinancial", " actualizarDatrosfinal", " actualizarDatosfinal", " actualizarDataasFinancial", " actualizarDataasfinal", " actualizarDatrosBasic", " actualizarDataasFinal", " actualizarDataosFinal", " actualizarDataosFinancial", " actualizarDatrosFinancial", " actualizarDatasFinal", " actualizarDataasBasic", " actualizarDatrosFinal", " actualizarDatosBasic", " actualizarDatasfinal", " actualizarDatoFinal"], "idJugadorDiv": ["idJuggadorDiv", "idJugordDef", "idJuggadorApp", "idJugadoDiv", "idJuggadoApp", "idJuggadoDef", "idJuggadoDiv", "idJugadorDec", "idJugadeDiv", "idJugadeDef", "idJogadeDec", "idJugordDev", "idJugadierDev", "idJogadorDec", "idJugadierDiv", "idJuggadorDev", "idJuggadoDev", "idJugadeDev", "idJugadoDef", "idJugadoDec", "idJogadorDiv", "idJuggadorDef", "idJugadierDef", "idJugordApp", "idJogadorDev", "idJugadorDev", "idJogadeDev", "idJogadorDef", "idJugadierApp", "idJugordDiv", "idJugadoApp", "idJugadorDef", "idJogadeDiv", "idJogadeDef", "idJugadeDec", "idJugordDec", "idJugadoDev", "idJugadorApp"], "idRonda": ["IDRonda", "idCorora", "idCorondo", "idToda", "idRunnerora", "IdRata", "idRunnerondo", "idCoda", "idRata", "idDosa", "idDona", "idRunneronda", "IDDoda", "idCona", "idRoda", "idTonda", "IDRoda", "idTosa", "idRora", "idRosa", "idDoda", "idRona", "idRondo", "IDRona", "idDonda", "IDDosa", "IdRondo", "idCoronda", "idConda", "IDDona", "idTona", "IDDonda", "idRunnerata", "IdRora", "idCorata", "IDRosa", "IdRonda", "idCosa"], "unjxdxr": ["unjxdxtr", "unjxdxtR", "unjxddxhr", "unjxdXR", "unjxdtxhr", "unjxdxdr", "unjdxxrs", "unjdxxtr", "unjdxtxer", "unjdxxr", "unjdxtxr", "unjdxxer", "unjxddxr", "unjxddxR", "unjxdxte", "unjxdxtrs", "unjxdtxr", "unjxdexr", "unjxdxrs", "unjxdXer", "unjxddxer", "unjxdtxer", "unjdxtxR", "unjxdxdrs", "unjxdXr", "unjdxxte", "unjdxxe", "unjdxxhr", "unjxdexe", "unjdxxtrs", "unjxdxe", "unjxdxhr", "unjxdtxR", "unjxdxdR", "unjdxxtR", "unjxdexrs", "unjxdxde", "unjdxtxhr", "unjxdxR", "unjdxxR", "unjxdexR", "unjxdXhr", "unjxdxer"], "intResult": ["IntResult", "strResults", " intReturn", "intReturn", "IntRes", "IntReturn", "strReturn", "intSuccess", "intresult", "INTResult", "INTresult", "INTSuccess", "IntResults", " intResults", "IntSuccess", "strresult", "interRes", "intResults", "interResult", "INTResults", "INTRes", " intSuccess", " intRes", "intRes", " intresult", "INTReturn", "interReturn", "interResults", "strResult"], "sql": ["settings", "seed", "sq", "serv", "scl", "description", "spr", "string", "log", "pel", "ls", "select", "url", "cp", "dl", "query", "sol", "condition", "status", "statement", "SQL", "csv", "what", "expression", "params", "sb", "sp", "s", "q", "db", "setup", "template", "fn", "pr", "sv", "xml", "script", "cmd", "qs", "ql", "command"], "connection": ["created", "subject", "function", "description", "number", "communication", "collection", "resource", "channel", "ion", "position", "context", "current", "open", " Connection", "Connection", "network", "external", "bo", "c", "library", "relation", "session", "port", "condition", "computer", "statement", "close", "link", "city", "server", "engine", "table", "connect", "conn", "database", "db", "writer", "reference", "associated", "client", "document", "nc", "application", "socket", "pointer", "response", "connected", "directory", "character", "platform", "pool", "con", "creator", "command"], "ps": ["Ps", "ping", "pt", "proxy", "pd", "tp", "p", "process", "eps", "pps", "po", "processor", "pg", "ptr", "cp", "rs", "cs", "res", "aps", "statement", "pers", "pm", "fps", "ports", "sp", "s", "conn", "fp", "ds", "pr", "posts", "socket", "pa", "pp", "mp", "pos", "script", "pse", "proc", "prep", "jp", "PS", "gres"]}}
{"id1": "539195", "id2": "494226", "code1": "    static void copy(String src, String dest) throws IOException {\n        File ifp = new File(src);\n        File ofp = new File(dest);\n        if (ifp.exists() == false) {\n            throw new IOException(\"file '\" + src + \"' does not exist\");\n        }\n        FileInputStream fis = new FileInputStream(ifp);\n        FileOutputStream fos = new FileOutputStream(ofp);\n        byte[] b = new byte[1024];\n        while (fis.read(b) > 0) fos.write(b);\n        fis.close();\n        fos.close();\n    }\n", "code2": "    public static void main(String[] args) throws Exception {\n        String linesep = System.getProperty(\"line.separator\");\n        FileOutputStream fos = new FileOutputStream(new File(\"lib-licenses.txt\"));\n        fos.write(new String(\"JCP contains the following libraries. Please read this for comments on copyright etc.\" + linesep + linesep).getBytes());\n        fos.write(new String(\"Chemistry Development Kit, master version as of \" + new Date().toString() + \" (http://cdk.sf.net)\" + linesep).getBytes());\n        fos.write(new String(\"Copyright 1997-2009 The CDK Development Team\" + linesep).getBytes());\n        fos.write(new String(\"License: LGPL v2 (http://www.gnu.org/licenses/old-licenses/gpl-2.0.html)\" + linesep).getBytes());\n        fos.write(new String(\"Download: https://sourceforge.net/projects/cdk/files/\" + linesep).getBytes());\n        fos.write(new String(\"Source available at: http://sourceforge.net/scm/?type=git&group_id=20024\" + linesep + linesep).getBytes());\n        File[] files = new File(args[0]).listFiles(new JarFileFilter());\n        for (int i = 0; i < files.length; i++) {\n            if (new File(files[i].getPath() + \".meta\").exists()) {\n                Map<String, Map<String, String>> metaprops = readProperties(new File(files[i].getPath() + \".meta\"));\n                Iterator<String> itsect = metaprops.keySet().iterator();\n                while (itsect.hasNext()) {\n                    String section = itsect.next();\n                    fos.write(new String(metaprops.get(section).get(\"Library\") + \" \" + metaprops.get(section).get(\"Version\") + \" (\" + metaprops.get(section).get(\"Homepage\") + \")\" + linesep).getBytes());\n                    fos.write(new String(\"Copyright \" + metaprops.get(section).get(\"Copyright\") + linesep).getBytes());\n                    fos.write(new String(\"License: \" + metaprops.get(section).get(\"License\") + \" (\" + metaprops.get(section).get(\"LicenseURL\") + \")\" + linesep).getBytes());\n                    fos.write(new String(\"Download: \" + metaprops.get(section).get(\"Download\") + linesep).getBytes());\n                    fos.write(new String(\"Source available at: \" + metaprops.get(section).get(\"SourceCode\") + linesep + linesep).getBytes());\n                }\n            }\n            if (new File(files[i].getPath() + \".extra\").exists()) {\n                fos.write(new String(\"The author says:\" + linesep).getBytes());\n                FileInputStream in = new FileInputStream(new File(files[i].getPath() + \".extra\"));\n                int len;\n                byte[] buf = new byte[1024];\n                while ((len = in.read(buf)) > 0) {\n                    fos.write(buf, 0, len);\n                }\n            }\n            fos.write(linesep.getBytes());\n        }\n        fos.close();\n    }\n", "label": 1, "substitutes": {"copy": ["clone", "delete", "Cop", " cp", "cat", " cop", "replace", "cop", "ls", "cp", "to", "gc", "link", "csv", "dump", "slice", "init", "create", "Copy", "download", "transfer", "println", "upload", "load", " Copy", "save", "move", "sync"], "src": ["sec", "sr", "sq", "cur", "spr", "urg", "ctr", "txt", "str", "sin", "orig", "rx", "st", "start", "in", "imp", "ls", "from", "pres", "filename", "url", "rs", "img", "host", "sit", "uri", "rel", "desc", "sc", "sel", "sb", "comp", "attr", "Source", "loc", "init", "ident", "rt", "usr", "req", "input", "spec", "sys", "dist", "source", "rl", "addr", "rc", "ser", "pkg", "ins", "inst", "this", "iv"], "dest": ["master", "d", "trans", "them", "decl", "dir", "p", "id", "cat", "orig", "test", "st", "Dest", "temp", "target", "deg", "nom", "way", "sup", "mem", "https", "gt", "opt", "loc", "end", "est", "tmp", "usr", "req", "nw", "exp", "dist", "source", "rest", "cont", "home", "it", "del", "origin"], "ifp": ["ihop", "ibpa", "ifpp", " ife", "iby", "ihe", "iftp", "ibp", "afpc", "Ife", "iftpp", "ffsp", "ifttp", " ifsp", " ifcp", "alfpp", " ifop", "ihp", "alftp", "ifcp", "ifsp", "aftp", " ifpa", "ibsp", "Ifp", "Ifcp", "ife", "afpp", "ffp", " ify", "ify", "ihcp", "ifpa", "Ifop", "iftpc", "ffpa", "ifop", "alfp", "afp", "alfpc", "ffy", "ifpc"], "ofp": ["OFjp", "orfsp", "orfp", "Ofproc", "ofd", "Ofsp", "OFP", "offd", "Ofjp", "ofsp", "OFd", "ofproc", "OFp", " ofd", "Ofd", " ofsp", "offjp", "orfd", " ofproc", "ofjp", "Ofp", "OfP", "ofP", "offp", "offP", "orfproc"], "fis": ["flais", "Fos", "Fais", "fios", "flis", "gi", "Fai", "fais", "giss", "flai", "fist", " fiss", "gis", " fi", "wi", "fiss", "Fis", "wais", "fiist", "Fist", "fiiss", "fliss", "fiis", " fais", " fist", "fai", "Fiss", " fai", "wiss", "wis", "fi", "gais"], "fos": ["Fos", "fios", "woss", "flis", "faos", "woes", " foes", " fios", "flios", "Foses", "foss", "woses", "foes", "flos", "fioes", " faos", "Foes", "waos", "wios", "fiis", "fiaos", " foses", "floes", "foses", "flaos", "wos", " foss", "Foss"], "b": ["d", "v", "batch", "pb", "h", "lib", "binary", "p", "bar", "nb", "bg", "k", "be", "z", "rb", "j", "ab", "bb", "reb", "bits", "bit", "bis", "f", "B", "base", "fb", "br", "sb", "bs", "ch", "db", "eb", "blue", "wb", "bd", "cb", "l", "ob", "bi", "g", "mb", "body", "gb", "y", "bc"]}}
{"id1": "14473781", "id2": "19335986", "code1": "        @Override\n        protected String doInBackground(Void... params) {\n            HttpClient httpClient = new DefaultHttpClient();\n            HttpContext localContext = new BasicHttpContext();\n            HttpPost httpPost = new HttpPost(urlFormated);\n            try {\n                MultipartEntity entity = new MultipartEntity(HttpMultipartMode.BROWSER_COMPATIBLE);\n                for (int index = 0; index < POSTparamList.size(); index++) {\n                    if (POSTparamList.get(index).getName().equalsIgnoreCase(\"image\")) {\n                        entity.addPart(POSTparamList.get(index).getName(), new FileBody(new File(POSTparamList.get(index).getValue())));\n                    } else {\n                        entity.addPart(POSTparamList.get(index).getName(), new StringBody(POSTparamList.get(index).getValue()));\n                    }\n                }\n                httpPost.setEntity(entity);\n                HttpResponse response = httpClient.execute(httpPost, localContext);\n                return processAnswer(response);\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n            return null;\n        }\n", "code2": "    public void uncaughtException(final Thread t, final Throwable e) {\n        final Display display = Display.getCurrent();\n        final Shell shell = new Shell(display);\n        final MessageBox message = new MessageBox(shell, SWT.OK | SWT.CANCEL | SWT.ICON_ERROR);\n        message.setText(\"Hawkscope Error\");\n        message.setMessage(e.getMessage() + \"\\nSubmit Hawkscope Error Report to Issue Tracker?\");\n        log.error(\"Uncaught exception\", e);\n        if (message.open() == SWT.OK) {\n            IOUtils.copyToClipboard(Version.getBugReport(e));\n            try {\n                Program.launch(Constants.HAWKSCOPE_URL_ROOT + \"issues/entry?comment=\" + URLEncoder.encode(\"Please paste the Hawkscope Error \" + \"Report here. It's currently copied to your \" + \"clipboard. Thank you for your support!\", Constants.ENCODING));\n            } catch (final Exception e1) {\n                Program.launch(Constants.HAWKSCOPE_URL_ROOT + \"issues/entry\");\n            }\n        }\n        shell.dispose();\n    }\n", "label": 0, "substitutes": {"doInBackground": ["doAsBackground", " doAsFuture", " doAsRequest", " doAsAsync", " doOnRequest", "doInRequest", " doInsideRequest", "doAsAsync", "doInAsync", " doInRequest", "doInFuture", "doAsFuture", " doInsideAsync", " doAsBackground", " doOnFuture", " doOnBackground", "doAsRequest", " doOnAsync", " doInsideFuture", " doInFuture", " doInsideBackground", " doInAsync"], "params": ["settings", "terms", "properties", "conf", "Param", "ctx", "images", "Parameters", "options", "config", "ps", "parts", "files", "vals", "tags", "services", "posts", "data", "details", "list", "errors", "cas", "ams", "param", "proc", "sql", "values"], "httpClient": [" httpclient", "htmlSystem", "hoverClient", "httpsclient", "httpControl", "htmlControl", "httpsClient", "httpContext", "ttpClient", "hoverContext", "httpsContext", "httpConnection", "httpsSystem", "httpSystem", "hoverSystem", " httpConnection", " httpSystem", "ttpclient", "ttpConnection", "hoverControl", "httpclient", "htmlContext", "htmlClient", "httpsConnection", "httpsControl", "ttpSystem"], "localContext": ["privatecontext", "sessionState", "localPort", "Localcontext", " localCase", "privateState", "privateContext", "localState", "sessionCondition", "currentCondition", "privatePort", "currentCase", " localState", " localPort", "currentState", "LocalPort", "currentContext", "LocalState", "localcontext", "localCase", " localCondition", "sessionCase", "LocalContext", "sessionContext", "localCondition", " localcontext"], "httpPost": ["httpPre", "httpPut", "workPut", "HttpPOST", "ttpPut", "httpsPut", "ttpPre", "httpsPost", " httpPOST", " httpPut", "hoverpost", "workPost", "hoverPOST", " httpPre", "httpsPre", "httpsPOST", "hoverPost", "httppost", "httpPOST", "ttpPOST", "workPOST", "HttpPost", "HttpPut", "ttppost", "workPre", "HttpPre", "ttpPost", " httppost"], "entity": ["local", "created", "put", "ell", "orm", "member", "ce", "oe", "channel", "complex", "component", "event", "internal", "needed", "total", "output", "rule", "email", "Entity", "eme", "secure", "quote", "person", "auto", "security", "base", "note", "encrypted", "net", "pe", "result", "table", "iam", "activity", "create", "document", "template", "intent", "object", "comment", "line", "data", "one", "image", "details", "and", "el", "metadata", "group", "or", "empty", "xml", "ent", "unit", "translation", "body", "unique", "policy", "ment", "entry", "collection", "command"], "index": ["search", "IND", "ax", "point", "update", "max", "scale", "lex", "slice", "unknown", "each", "all", "exp", "offset", "name", "document", "key", "shape", "ix", "pos", "find", "display", "height", "Index", "open", "access", "ex", "check", "stick", "instance", "iter", "set", "prefix", "loop", "loc", "get", "ask", "create", "seek", "major", "zero", "image", "state", "eight", "address", "match", "EX", "position", "ox", "success", "axis", "scroll", "insert", "connect", "date", "see", "ind", "error", "x", "coll", "layout", "sync", "author", "size", "number", "sequence", "length", "num", "context", "row", "mix", "select", "go", "i", "inc", "condition", "initial", "config", "note", "active", "draw", "column", "capacity", "osit", "add", "mount", "version", "request", "empty"], "response": ["results", "sequence", "respond", "e", "onse", "zone", "context", "service", "still", "Response", "output", "content", "view", "connection", "res", "api", "resp", "result", "message", "page", "tree", "document", "frame", "object", "respons", "data", "answer", "social", "application", "value", "image", "hello", "request", "xml", "json", "pos", "reply", "body", "entry"]}}
{"id1": "14390569", "id2": "6009527", "code1": "    private DialogHelper(String title, final URL imageURL) {\n        jd = new JDialog();\n        jd.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);\n        jd.setAlwaysOnTop(true);\n        jd.setLayout(new BoxLayout(jd.getContentPane(), BoxLayout.Y_AXIS));\n        jd.setTitle(title);\n        JLabel jl = new JLabel();\n        ImageIcon icon = new ImageIcon(imageURL);\n        jl.setIcon(icon);\n        jd.add(new JScrollPane(jl));\n        final JFileChooser chooser = getSaveImageChooser();\n        JPanel jp = new JPanel();\n        JButton jb = new JButton(getMessage(\"btn_save_as\"));\n        jb.addActionListener(new ActionListener() {\n\n            public void actionPerformed(ActionEvent e) {\n                int returnVal = chooser.showSaveDialog(jd);\n                if (returnVal == JFileChooser.APPROVE_OPTION) {\n                    File file = chooser.getSelectedFile();\n                    String fileName = file.getPath();\n                    String ext = StringUtil.getLowerExtension(fileName);\n                    if (!\"png\".equals(ext)) {\n                        fileName += \".png\";\n                        file = new File(fileName);\n                    }\n                    boolean doIt = true;\n                    if (file.exists()) {\n                        int i = JOptionPane.showConfirmDialog(jd, getMessage(\"warn_file_exist\"));\n                        if (i != JOptionPane.YES_OPTION) doIt = false;\n                    } else if (!file.getParentFile().exists()) {\n                        doIt = file.getParentFile().mkdirs();\n                    }\n                    if (doIt) {\n                        FileChannel src = null;\n                        FileChannel dest = null;\n                        try {\n                            src = new FileInputStream(imageURL.getPath()).getChannel();\n                            dest = new FileOutputStream(fileName).getChannel();\n                            src.transferTo(0, src.size(), dest);\n                        } catch (FileNotFoundException e1) {\n                            warn(jd, getMessage(\"err_no_source_file\"));\n                        } catch (IOException e2) {\n                            warn(jd, getMessage(\"err_output_target\"));\n                        } finally {\n                            try {\n                                if (src != null) src.close();\n                            } catch (IOException e1) {\n                            }\n                            try {\n                                if (dest != null) dest.close();\n                            } catch (IOException e1) {\n                            }\n                            src = null;\n                            dest = null;\n                        }\n                    }\n                }\n            }\n        });\n        jp.add(jb);\n        jb = new JButton(getMessage(\"btn_close\"));\n        jb.addActionListener(new ActionListener() {\n\n            public void actionPerformed(ActionEvent e) {\n                jd.dispose();\n            }\n        });\n        jp.add(jb);\n        jd.add(jp);\n        jd.pack();\n        setCentral(jd);\n    }\n", "code2": "    private void doFinishLoadAttachment(long attachmentId) {\n        if (attachmentId != mLoadAttachmentId) {\n            return;\n        }\n        Attachment attachment = Attachment.restoreAttachmentWithId(MessageView.this, attachmentId);\n        Uri attachmentUri = AttachmentProvider.getAttachmentUri(mAccountId, attachment.mId);\n        Uri contentUri = AttachmentProvider.resolveAttachmentIdToContentUri(getContentResolver(), attachmentUri);\n        if (mLoadAttachmentSave) {\n            try {\n                File file = createUniqueFile(Environment.getExternalStorageDirectory(), attachment.mFileName);\n                InputStream in = getContentResolver().openInputStream(contentUri);\n                OutputStream out = new FileOutputStream(file);\n                IOUtils.copy(in, out);\n                out.flush();\n                out.close();\n                in.close();\n                Toast.makeText(MessageView.this, String.format(getString(R.string.message_view_status_attachment_saved), file.getName()), Toast.LENGTH_LONG).show();\n                new MediaScannerNotifier(this, file, mHandler);\n            } catch (IOException ioe) {\n                Toast.makeText(MessageView.this, getString(R.string.message_view_status_attachment_not_saved), Toast.LENGTH_LONG).show();\n            }\n        } else {\n            try {\n                Intent intent = new Intent(Intent.ACTION_VIEW);\n                intent.setData(contentUri);\n                intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);\n                startActivity(intent);\n            } catch (ActivityNotFoundException e) {\n                mHandler.attachmentViewError();\n            }\n        }\n    }\n", "label": 1, "substitutes": {"title": ["text", "subject", "TIT", "description", " Title", "string", "holiday", "term", "help", "t", "hash", "question", "start", "Title", "msg", "filename", "content", "theme", "label", "summary", "html", "notice", "prefix", "padding", "message", "parts", "lead", "hd", "heading", "setup", "name", "template", "password", "details", "header", "metadata", "tip", "layout", "type", "itle", "size"], "imageURL": ["imageString", "fileURL", "ImageURI", "ImageUrl", "fileUrl", "photoURL", " imageUrl", " imageUR", "imageUR", "fileString", "mediaURL", " imageString", "photoID", "imageUrl", "photoUR", "photoUrl", "photoString", " imageURI", "imageID", "imageURI", "photoURI", "ImageUR", "fileURI", "mediaUrl", "mediaURI", "ImageID", "mediaID", "ImageURL"], "jd": ["javads", " jds", "ujmd", "djd", "zad", "ajds", "ujdt", "ujd", "djsd", "jD", "ujD", "Jp", "jsd", "jspd", "ijds", "jdo", "kdt", "ajdm", "kds", "qdo", "jsdm", "gbd", "simD", "gds", " jc", "ajpd", "ijD", "JD", "ajd", "simmd", "djds", "jmd", "jjD", "kdo", "djc", "qbd", "jjbd", "jjp", " jdt", "jds", "Jc", "javadm", "djdo", "Jad", "jdt", "jsD", "kd", "Jds", "ijd", "qp", "javad", "jdm", "qD", " jsd", "jpd", "Jbd", "simd", "kbd", "jsds", "jc", "zd", "gdo", "jjd", "Jd", "Jmd", "qds", " jD", "jbd", "jobdo", " jdo", "simdt", "gd", "javapd", " jad", "Jdo", "qd", "jad", "djad", "zsd", "Jdt", "ujad", "jobd", "jobdt"], "jl": ["ln", "js", "ji", "Label", "kn", "elt", "lp", "ell", " ol", "jj", "dj", "txt", "nl", "li", "isl", "kl", "mil", "J", "lv", "jet", "bol", "j", "ja", " li", "abl", "dl", "dll", "kj", "elle", "jah", "syn", "ibl", "lu", "kel", "dyl", "elly", "jc", "jac", "ij", "uj", "gn", "rl", "igl", "bj", "ijk", "yl", "il", "jin"], "icon": ["Icon", "eric", " tip", "ico", "ic", "lock", " widget", "icons", " ion", " lang", "nic", "addon", " canvas", " fruit", "conv", "ion", "ocon", "font", "cil", "ICO", "iban", "ex", " intent", "chron", "label", "gc", " ancestor", " captcha", "syn", " Icon", "iao", "conn", "cn", "png", "icol", "jc", "fn", "image", " screen", "pen", "pic", "\u4e2d", "fa", " conn", "con"], "chooser": ["Choicer", "choose", "composer", "choerer", "comperer", " chooder", "booser", "choosen", "poicer", "boosen", "CHOoser", "compicer", " choosen", "chooder", "Chooder", " choose", "Choosen", "composen", " choicer", "poose", "choicer", "compose", "CHOose", "pooser", "Chooser", "CHOosen", "CHOicer", " choerer", "boose", "pooder", "boerer", "Choose"], "jp": [" sp", "js", " dj", " gp", "p", "np", " cp", " ja", "btn", "j", "ja", "JP", " pic", " ap", "kj", " pl", " je", "sp", " np", " joint", " ip", " mp", "jc", "ij", " sip", "bp", "pic", "bj", "jin"], "jb": ["qcb", "qbd", " jbd", "kjbd", " jcb", "kjb", "qb", "jcb", "Jbd", "Jcb", "kjcb", "jbd", "Jb"], "e": ["d", "ev", "v", "en", "p", "E", "t", "event", "te", "ed", "ee", "re", "c", "n", "a", "m", "f", "o", "s", "Event", "ie", "u", "or", "it", "g", "es", "er", "w"], "returnVal": ["retVal", " returnval", "getVal", "returnVol", "getVAL", "responseVal", " returnValid", "returnVAL", "returnValue", " returnValue", " returnVAL", "ReturnVal", "returnValid", "getValid", "returnval", "responseVol", "retval", "Returnval", "ReturnVAL", "retVAL", "ReturnValue", "responseVAL", "getVol", " returnVol", "responseValid", "retValue"], "file": ["local", "path", "place", "h", "dir", "io", "angle", "resource", "FILE", "channel", "ile", "be", "class", "File", "open", "run", "target", "filename", "rule", "model", "work", "real", "fe", "null", "to", "library", "relation", "port", "stat", "status", "link", "valid", "f", "fs", "base", "table", "buffer", "page", "format", "get", "user", "core", "db", "fp", "create", "tree", "document", "name", "foo", "http", "source", "le", "drop", "image", "or", "report", "handle", "info", "il", "full", "body", "type", "word"], "fileName": ["FILEPath", "handleName", " fileNAME", " filePath", "FILEExt", "fileNAME", " fileNames", " filename", "imagename", "fileClass", "handlename", " fileClass", "fileFace", "fileSystem", "FILEName", "imageFace", "FILESet", "handleClass", "filename", "fileExt", "fileNames", "imageNAME", "entityPath", "FileExt", "FILESystem", "imagePath", "ileNAME", "Filename", "fileSet", "FilePath", "ileClass", "entityName", "ilename", "taskname", "taskPath", "FILENAME", "FileName", "FileNAME", "imageName", "taskName", " fileSystem", " fileExt", "FileSystem", "FileFace", "FileNames", "FILENames", "filePath", "taskFace", "entityNAME", "ileName", "handleNAME", "entitySet", "FileSet"], "ext": ["aux", "exc", "ag", "typ", "dir", "lib", "txt", "part", "prot", "test", "t", "eur", "Ext", "external", "len", "cod", "ex", "EXT", "sem", "vert", "pat", "ord", "lex", "def", "ct", "desc", "end", "xt", "req", "exe", "exp", "ind", "hex", "cont", "enc", "ix", "fr", "ec", "cmd", "xp", "off", "word"], "i": ["ti", "I", "li", "id", "gi", "print", "is", "di", "ii", "j", "phi", "mi", "si", "index", "ini", "iu", "pi", "status", "cli", "ci", "m", "init", "xi", "ei", "qi", "ai", "fi", "it", "bi", "hi", "ui", "info", "ori", "y"], "doIt": ["doneIt", "odoIt", "doWhich", "doneIT", "doIs", "doIT", "donIt", "donIs", "didit", "waIs", " doYou", "didYou", "odoHe", "doit", "donYou", "doHe", "odoIT", "donit", "didIs", " doHe", "diit", "waIt", " doWhich", "didIt", "donIT", "odoWhich", "waIT", "doneit", " doit", " doIT", "diWhich", "diIt", " doIs", "diHe", "odoit", "doYou"], "src": ["sec", "sr", "sq", "sl", "trans", "ctr", "rx", "st", "conv", "ources", "start", "rb", "ptr", "rob", "from", "copy", "url", "gs", "rs", "r", "ource", "inner", "https", "ssl", "rel", "syn", "crop", "sc", "loc", "sb", "comp", "tmp", "init", "rt", "usr", "impl", "input", "http", "sys", "source", "rest", "rl", "cont", "rc", "ser", "ins", "sub", "inst", "proc", "sh", "lb"], "dest": ["master", "local", "foreign", "trans", "decl", "dir", "dat", "des", "cat", "orig", "st", "Dest", "gest", "slave", "output", "target", "pipe", "pas", "cp", "nom", "way", "mem", "port", "https", "pot", "origin", "rel", "desc", "iter", "loc", "sp", "out", "est", "tmp", "usr", "nw", "sys", "dist", "source", "cont", "rest", "comb", "can", "proc", "temp", "coord"]}}
{"id1": "22366505", "id2": "9687813", "code1": "    @Override\n    public void incluir(Igreja igreja) throws Exception {\n        Connection connection = criaConexao(false);\n        String sql = \"insert into igreja ? as idlocal, ? as possui_salao;\";\n        String sql2 = \"SELECT MAX(idlocal) FROM Local\";\n        PreparedStatement stmt = null;\n        PreparedStatement stmt2 = null;\n        ResultSet rs = null;\n        try {\n            stmt = connection.prepareStatement(sql);\n            stmt2 = connection.prepareStatement(sql2);\n            rs = stmt2.executeQuery();\n            stmt.setInt(1, rs.getInt(\"max\"));\n            stmt.setBoolean(2, igreja.getPossuiSalao());\n            int retorno = stmt.executeUpdate();\n            if (retorno == 0) {\n                connection.rollback();\n                throw new SQLException(\"Ocorreu um erro inesperado no momento de inserir dados de cliente no banco!\");\n            }\n            connection.commit();\n        } catch (SQLException e) {\n            connection.rollback();\n            throw e;\n        } finally {\n            try {\n                stmt.close();\n                stmt2.close();\n                rs.close();\n                this.fechaConexao();\n            } catch (SQLException e) {\n                throw e;\n            }\n        }\n    }\n", "code2": "    public static InputStream getFileInputStream(String path) throws IOException {\n        InputStream is = null;\n        File file = new File(path);\n        if (file.exists()) is = new BufferedInputStream(new FileInputStream(file));\n        if (is == null) {\n            URL url = FileUtils.class.getClassLoader().getResource(path);\n            is = (url == null) ? null : url.openStream();\n        }\n        return is;\n    }\n", "label": 0, "substitutes": {"incluir": ["inclouier", "inclUator", "incluator", "incluier", "inclouar", "incluiar", "inCLuator", "inCLUar", "inCLuar", "inCLuir", "inclouator", "inCLuier", "incluiir", "inclouir", "incluiator", "inclUier", "inCLUir", "inCLUator", "inclUir", "inCLUier", "incluiier", "inclUar", "incluar"], "igreja": [" iggrejas", "igvreje", " igcreji", "iggreva", "igrej", "igopenva", "igrejas", "igarreJa", " iggrej", "iggrejas", " igreje", " iggreji", "igreji", " igreva", "igcreja", "igcrej", " igrej", "igarrejas", "igvrejas", "iggreje", " iggreja", "igarreja", "igopenja", " igreJa", "igopenji", "igreje", " igcreJa", " iggreje", " igreji", "iggrej", "igopenj", " iggreva", "igcreJa", "igreJa", "iggreJa", "igvrej", "igarrej", "iggreji", "igreva", " igcrej", " igrejas", "igarreji", "igarreje", "igarreva", "iggreja", "igcreji", " igcreja", "igvreja"], "connection": ["settings", "created", "system", "description", "function", "operation", "communication", "gate", "resource", "component", "ion", "position", "creator", "context", "current", "open", "manager", " Connection", "Connection", "network", "section", "c", "to", "n", "library", "query", "relation", "session", "condition", "computer", "instance", "statement", "close", "link", "language", "city", "server", "engine", "config", "which", "connect", "message", "container", "conn", "database", "user", "db", "setup", "reference", "document", "generation", "client", "application", "socket", "response", "connected", "directory", "established", "pool", "management", "con", "collection", "command"], "sql": ["ln", "seed", "sq", "scl", "spr", "description", "string", "log", "lock", "pel", "nl", "select", "inv", "url", "shell", "dl", "query", "sol", "pl", "zip", "statement", "title", "SQL", "csv", "sf", "expression", "sk", "normal", "form", "sd", "serial", "table", "series", "q", "plan", "template", "spec", "sys", "sv", "san", "install", "xml", "login", "cmd", "ql", "command"], "sql2": [" sql1", "ql3", " sql3", "sd4", "sd02", "sql02", "ql02", " sql02", "sql1", "sd2", "SQL02", "SQL1", " sql4", "ql1", "ql2", "sd3", "SQL3", "sql4", "SQL4", "SQL2", "sql3"], "stmt": ["restmt", "Stmm", "stmb", "STmm", "StMT", " ststat", "tMT", "restmm", " stm", "restm", "stMT", "strmt", "STm", "estmt", "estmb", "statm", "strm", "Ststat", "reststat", "ststat", "tmb", "STMT", "STmn", "strmb", "STmb", "Stmt", "estMT", "stmn", "Stmn", " stmn", "Stm", "stmm", " stmm", "strMT", "Stmb", "STmt", "statmt", "stm", "tmm", "statmn", " stmb", " stMT", "tmt", "statMT", "estm"], "stmt2": ["stMT2", "stmp4", "stmp3", "stMT4", "stm02", " stmptwo", "stMT02", "stmptwo", "stmr4", " stmt4", "Stmem2", " stmp1", "sttm3", " stmpTwo", "stm3", " stMT1", "Stmt3", "stmem3", " stmttwo", "stmr1", " stmtTwo", "stmTwo", "stmrtwo", "sttx02", " stMT2", "stmt3", "stmp2", "stmp1", "Stmt1", "stmt1", "stmt4", " stmt02", "stm1", "StmemTwo", " stmp3", "stm2", "stmttwo", "stMTTwo", "sttx1", "StmtTwo", "stmtTwo", "Stmt2", "stmem1", "stmemTwo", "stmem2", " stmt1", " stmp2", "sttx3", "stMT1", "sttm4", "Stmem1", "stMTtwo", " stmt3", " stMT02", " stMT3", "sttx2", "stmpTwo", "sttmTwo", "stMT3", "stmt02", " stmp4", "Stmem3", "sttm2", "stmr2"], "rs": ["sr", "js", "ks", "results", "vs", "ars", "ats", "eps", "ws", "RS", "xs", "ows", "ls", "mr", "hs", "gs", "r", "rys", "ts", "rss", "rates", "cs", "res", "ims", "vers", "fs", "ns", "ps", "pers", "ros", "ms", "s", "rd", "bs", "rt", "its", "usr", "ds", "ris", "sts", "rc", "ins", "rows", "Rs", "ras", "ss", "qs", "ys"], "retorno": ["gotora", "retora", "altorn", "montrero", "altorno", " retano", "retorne", "eltorno", "gotorne", "retogo", "eltorn", "montorne", "gotrero", "montora", "retorn", "eltano", " retora", "altogo", " retrero", "gotorno", "retano", "retrero", "eltogo", " retorn", "altano", " retorne", " retogo", "montorno"]}}
{"id1": "4938100", "id2": "8788371", "code1": "    public static String sha1(String text) throws NoSuchAlgorithmException, UnsupportedEncodingException {\n        MessageDigest md;\n        md = MessageDigest.getInstance(\"SHA-1\");\n        byte[] sha1hash = new byte[40];\n        md.update(text.getBytes(\"iso-8859-1\"), 0, text.length());\n        sha1hash = md.digest();\n        return convertToHex(sha1hash);\n    }\n", "code2": "    private void tail(String[] cmd, int pos) throws IOException {\n        CommandFormat c = new CommandFormat(\"tail\", 1, 1, \"f\");\n        String src = null;\n        Path path = null;\n        try {\n            List<String> parameters = c.parse(cmd, pos);\n            src = parameters.get(0);\n        } catch (IllegalArgumentException iae) {\n            System.err.println(\"Usage: java FsShell \" + TAIL_USAGE);\n            throw iae;\n        }\n        boolean foption = c.getOpt(\"f\") ? true : false;\n        path = new Path(src);\n        FileSystem srcFs = path.getFileSystem(getConf());\n        if (srcFs.isDirectory(path)) {\n            throw new IOException(\"Source must be a file.\");\n        }\n        long fileSize = srcFs.getFileStatus(path).getLen();\n        long offset = (fileSize > 1024) ? fileSize - 1024 : 0;\n        while (true) {\n            FSDataInputStream in = srcFs.open(path);\n            in.seek(offset);\n            IOUtils.copyBytes(in, System.out, 1024, false);\n            offset = in.getPos();\n            in.close();\n            if (!foption) {\n                break;\n            }\n            fileSize = srcFs.getFileStatus(path).getLen();\n            offset = (fileSize > offset) ? offset : fileSize;\n            try {\n                Thread.sleep(5000);\n            } catch (InterruptedException e) {\n                break;\n            }\n        }\n    }\n", "label": 0, "substitutes": {"sha1": ["SHA256", "a256", "md3", "a2", "SHA3", "md256", "sha256", "sha3", "md1", "md2", "SHA1", "a1", "SHA2", "a3", "sha2"], "text": ["path", "subject", "pt", "string", "txt", "Text", "str", "term", "print", "test", "t", "event", "nt", "context", "msg", "select", "output", "aut", "url", "content", "act", "ext", "pattern", "title", "code", "form", "prefix", "buffer", "ct", "message", "out", "command", "q", "input", "read", "name", "document", "template", "comment", "data", "x", "source", "cont", "value", "password", "TEXT", "tx", "translation", "body", "now", "w", "word"], "UnsupportedEncodingException": ["UnsupportedEncodingEx", "UnsupportedEncgorithmElement", "UnsupportedEncgorithmException", "UnsupportedChoderException", "UnsupportedChoderEx", "UnsupportedChoderElement", "UnsupportedEncoderException", "UnsupportedChodingEx", "UnsupportedChoderError", "UnsupportedEncgorithmEx", "UnsupportedChodingException", "UnsupportedEncoderElement", "UnsupportedEncgorithmError", "UnsupportedEncodingElement", "UnsupportedEncodingError", "UnsupportedEncoderEx", "UnsupportedChodingElement", "UnsupportedEncoderError", "UnsupportedChodingError"], "md": ["mc", "d", " man", "h", "pd", "dir", "ctr", "mt", "ld", "mod", "di", "t", " ms", " mm", " mo", " sd", "nd", " mc", " cd", "red", "det", "ad", "m", "mond", " dd", " rm", "ms", "sd", "dd", "mand", "rm", "td", "hd", "mm", "ind", "mk", "cd", "od", "bd", "mg", " cmd", "mn", "dm", "add", "mp", "sha", "der", "dh", "pkg", "bf", "df", "mb", "cmd", "grad", "MD", " Md", " df"], "sha1hash": ["sha2sum", "sha1result", "aonesum", "sha3hash", "shaonesum", "haoneresult", "shaonesha", " SHA1hash", "sha3href", "sha5hex", "sha3hex", "aoneHash", "sha1sha", "haonehash", "sha2hash", "sha5href", "a1sum", "aonehash", "a1hash", "aonesha", " SHA1Hash", "sha1sum", "ha1sum", "ha1hash", "sha1Hash", "sha81hash", "sha5result", " SHA1href", "haonesha", "sha5sha", "sha3Hash", " SHA1hex", "sha5sum", "shaoneHash", "a1sha", "sha3sum", " SHA81hash", "sha2sha", "sha3sha", "sha81hex", "sha1href", "a1Hash", "sha81href", "shaonehash", "ha1sha", "sha2Hash", "sha5Hash", "sha5hash", " SHA81href", "shaoneresult", " SHA81hex", "sha81Hash", "ha1result", " SHA81Hash", "sha1hex", "sha3result", "haonesum"]}}
{"id1": "21308543", "id2": "8754809", "code1": "    private static void copyFile(String src, String target) throws IOException {\n        FileChannel ic = new FileInputStream(src).getChannel();\n        FileChannel oc = new FileOutputStream(target).getChannel();\n        ic.transferTo(0, ic.size(), oc);\n        ic.close();\n        oc.close();\n    }\n", "code2": "    @SuppressWarnings(\"unchecked\")\n    public void launch(final ILaunchConfiguration configuration, final String mode, final ILaunch launch, final IProgressMonitor monitor) throws CoreException {\n        {\n            Assert.notNull(configuration);\n            Assert.notNull(monitor);\n        }\n        final String projectName = configuration.getAttribute(INexOpenLaunchConfigurationConstants.NEXOPEN_PROJECT_NAME, \"\");\n        final IProject prj = JavaCore.create(ResourcesPlugin.getWorkspace().getRoot()).getJavaProject(projectName).getProject();\n        if (NexOpenProjectUtils.isNexOpenProject(prj)) {\n            final IFile pom = prj.getFile(\"pom.xml\");\n            if (!pom.exists()) {\n                throw new IllegalStateException(\"Not a NexOpen project. Not Maven2 root pom.xml available\");\n            }\n            ContentHandlerTemplate.handle(pom, new ContentHandlerCallback() {\n\n                public void processHandle(final Document doc) {\n                    handleRootProfile(doc);\n                }\n            });\n            final IFile bpom = prj.getFile(\"business/pom.xml\");\n            if (!bpom.exists()) {\n                throw new IllegalStateException(\"Not a NexOpen project. Not Maven2 business pom.xml available\");\n            }\n            ContentHandlerTemplate.handle(bpom, new ContentHandlerCallback() {\n\n                public void processHandle(final Document doc) {\n                    try {\n                        handleBusinessProfile(doc, configuration, prj);\n                    } catch (final CoreException e) {\n                        if (Logger.getLog().isInfoEnabled()) {\n                            Logger.getLog().info(\"CoreException\", e);\n                        }\n                        throw new RuntimeException(e);\n                    }\n                }\n            });\n            final ByteArrayOutputStream output = new ByteArrayOutputStream();\n            try {\n                final Properties props = new Properties();\n                final String dialectName = configuration.getAttribute(INexOpenLaunchConfigurationConstants.HIBERNATE_DIALECT, \"MySQL5InnoDB\");\n                props.setProperty(\"hibernate.dialect\", support.getDialectClass(dialectName));\n                props.setProperty(\"hibernate.connection.driver_class\", configuration.getAttribute(INexOpenLaunchConfigurationConstants.JDBC_DRIVER, \"com.mysql.jdbc.Driver\"));\n                props.setProperty(\"hibernate.connection.url\", configuration.getAttribute(INexOpenLaunchConfigurationConstants.JDBC_URL, \"jdbc:mysql://<host><:port>/<database>\"));\n                props.setProperty(\"hibernate.connection.username\", configuration.getAttribute(INexOpenLaunchConfigurationConstants.JDBC_USERNAME, \"sa\"));\n                props.setProperty(\"hibernate.connection.password\", configuration.getAttribute(INexOpenLaunchConfigurationConstants.JDBC_PASSWORD, \"\"));\n                props.store(output, \"hibernate properties for code generation using NexOpen Tools 1.0.0\");\n                final IFile props_file = prj.getFile(\"business/src/test/resources/hibernate.properties\");\n                if (!props_file.exists()) {\n                    props_file.create(new ByteArrayInputStream(output.toByteArray()), true, monitor);\n                } else {\n                    props_file.setContents(new ByteArrayInputStream(output.toByteArray()), true, false, monitor);\n                }\n            } catch (final IOException e) {\n                Logger.getLog().error(\"I/O exception \", e);\n                throw new RuntimeException(e);\n            } finally {\n                try {\n                    output.flush();\n                    output.close();\n                } catch (IOException e) {\n                }\n            }\n            if (NexOpenProjectUtils.is04xProject(prj)) {\n                final IFile appContext = prj.getFile(\"web/src/main/webapp/WEB-INF/applicationContext.xml\");\n                if (!appContext.exists()) {\n                    throw new IllegalStateException(\"It no exists applicationContext.xml under web/src/main/webapp/WEB-INF, not a NexOpen project\");\n                }\n                ContentHandlerTemplate.handle(appContext, new ContentHandlerCallback() {\n\n                    public void processHandle(final Document doc) {\n                        final Element root = doc.getDocumentElement();\n                        final List<Element> beans = XMLUtils.getChildElementsByTagName(root, \"bean\");\n                        for (final Element bean : beans) {\n                            final String id = bean.getAttribute(\"id\");\n                            if (\"valueListAdapterResolver\".equals(id)) {\n                                try {\n                                    final String pkgName = configuration.getAttribute(INexOpenLaunchConfigurationConstants.NEXOPEN_PACKAGE, \"\");\n                                    final String className = new StringBuilder(pkgName).append(\".vlh.support.AnnotationValueListAdapterResolver\").toString();\n                                    bean.setAttribute(\"class\", className);\n                                    break;\n                                } catch (final CoreException e) {\n                                    if (Logger.getLog().isInfoEnabled()) {\n                                        Logger.getLog().info(\"CoreException\", e);\n                                    }\n                                    throw new RuntimeException(e);\n                                }\n                            }\n                        }\n                    }\n                });\n            }\n            {\n                final String dialectName = configuration.getAttribute(INexOpenLaunchConfigurationConstants.HIBERNATE_DIALECT, \"MySQL5InnoDB\");\n                if (support.isReverseEngineeringFileNeeded(dialectName)) {\n                    try {\n                        final IFile revengFile = prj.getFile(\"business/src/test/resources/\" + support.getReversEngineeringFile(dialectName));\n                        if (!revengFile.exists()) {\n                            final Bundle bundle = HibernateActivator.getDefault().getBundle();\n                            final Path src = new Path(\"resources/\" + support.getReversEngineeringFile(dialectName));\n                            final InputStream in = FileLocator.openStream(bundle, src, false);\n                            final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n                            IOUtils.copy(in, baos);\n                            String str = baos.toString();\n                            str = str.replace(\"${schema}\", configuration.getAttribute(INexOpenLaunchConfigurationConstants.JDBC_USERNAME, \"sa\"));\n                            revengFile.create(new ByteArrayInputStream(str.getBytes()), true, null);\n                        }\n                    } catch (final IOException e) {\n                        if (Logger.getLog().isInfoEnabled()) {\n                            Logger.getLog().info(\"CoreException\", e);\n                        }\n                        throw new RuntimeException(e);\n                    }\n                }\n            }\n            final IResource resource = (IResource) prj.getAdapter(IResource.class);\n            final QualifiedName qn = new QualifiedName(\"org.nexopenframework.ide.eclipse.ui\", \"default.profile\");\n            final String profile = resource.getPersistentProperty(qn);\n            resource.setPersistentProperty(qn, \"reverse-engineering\");\n            try {\n                final InstallProjectAction action = new InstallProjectAction();\n                action.scheduleJob(prj, monitor);\n                prj.refreshLocal(2, monitor);\n            } finally {\n                prj.setPersistentProperty(qn, profile);\n            }\n        } else {\n            Logger.getLog().info(\"Not a NexOpen project :: \" + prj);\n        }\n    }\n", "label": 1, "substitutes": {"copyFile": ["copyfile", "clonefile", "cpFiles", "CopyFiles", "cloneDirectory", "CopyDirectory", "copyFiles", "cloneFile", "CopyFile", "cpFile", "Copyfile", "copyDirectory", "cpfile", "cloneFiles", "cpDirectory"], "src": ["sec", "sr", "sq", "cur", "subject", "js", "ctr", "rx", "sur", "st", "start", "fx", "rs", "obs", "sit", "rel", "sc", "Source", "sb", "ripp", "loc", "ipl", "ur", "init", "rt", "usc", "usr", "req", "sys", "source", "cont", "rl", "rc", "ser", "ins", "pkg", "ix", "inst", "iv"], "target": ["mac", "match", "file", "delete", "term", "that", "Target", "parent", "replace", "eth", "test", "t", "the", "start", "nt", "dest", "output", "other", "to", "goal", "arg", "gt", "link", "rel", "base", "set", "result", "touch", "mk", "template", "patch", "arget", "source", "top", "stop", "next", "ARGET", "tt", "jp", "bolt"], "ic": ["eric", "tic", "mic", "ico", "iq", "ia", "fc", "icc", "IC", "nic", "ics", "anc", "cu", "arc", "iac", "cin", "lc", "icing", "iu", "i", "ice", "ik", "ci", "cli", "ib", "ric", "sic", "cit", "bc", "ican", "aic", "wic", "ac", "ix", "pic", "rc", "ip", "it", "isc", "pc", "vc", "irc"], "oc": ["OC", "oci", "mc", "yo", "ico", "cos", "mic", "nic", "unc", "anc", "cu", "ko", "toc", "ot", "ocon", "mot", "ox", "arc", "oct", "c", "osc", "ci", "cc", "gc", "oco", "o", "oss", "og", "bc", "roc", "cus", "aic", "od", "nc", "soc", "ac", "rc", "pic", "ob", "ocr", "voc", "ec", "isc", "pc", "co", "irc"]}}
{"id1": "14877116", "id2": "11562165", "code1": "    public void cpFile(File source, File target, boolean replace, int bufferSize) throws IOException {\n        if (!source.exists()) throw new IOException(\"source file not exists\");\n        if (!source.isFile()) throw new IOException(\"source file not exists(is a directory)\");\n        InputStream src = new FileInputStream(source);\n        File tarn = target;\n        if (target.isDirectory() || !(!(target.exists()) || replace)) {\n            String tardir = target.isDirectory() ? target.getPath() : target.getParent();\n            tarn = new File(tardir + File.separator + source.getName());\n            int n = 1;\n            while (!(!tarn.exists() || replace)) {\n                tarn = new File(tardir + File.separator + String.valueOf(n) + \" copy of \" + source.getName());\n                n++;\n            }\n        }\n        if (source.getPath().equals(tarn.getPath()) && replace) return;\n        OutputStream tar = new FileOutputStream(tarn);\n        byte[] bytes = new byte[bufferSize];\n        int readn = -1;\n        while ((readn = src.read(bytes)) > 0) {\n            tar.write(bytes, 0, readn);\n        }\n        tar.flush();\n        tar.close();\n        src.close();\n    }\n", "code2": "    private void streamContains(String in, InputStream stream) throws IOException {\n        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n        IOUtils.copy(stream, baos);\n        byte[] bytes = baos.toByteArray();\n        String cmp = new String(bytes, \"UTF-8\");\n        assertTrue(cmp.contains(in));\n        baos.close();\n    }\n", "label": 1, "substitutes": {"cpFile": [" copSingle", " cpStream", " copStream", "pasteSingle", " copBuffer", " dupSingle", " cpSingle", " copFile", " cpBuffer", " dupBuffer", "pasteStream", "pasteFile", "pasteBuffer", " dupStream", " dupFile"], "source": ["local", "search", "path", "sample", "site", "dest", "SOURCE", "attribute", "copy", "ource", "base", "input", "scene", "name", "use", "peer", "this", "find", "ce", "up", "in", "query", "status", "series", "get", "create", "template", "spec", "image", "sql", "ace", "stream", "subject", "parent", "before", "old", "component", "start", "current", "from", "style", "null", "scope", "secure", "form", "init", "origin", "scan", "string", "file", "resource", "store", "char", "remote", "service", "select", "original", "shell", "config", "Source", "sp", "comp", "format", "ie", "self", "unit", "none", "se"], "target": ["local", "master", "build", "path", "site", "that", "Target", "print", "point", "test", "t", "join", "update", "dest", "output", "arg", "base", " Target", "root", "project", "top", "window", "peer", "this", "localhost", "theme", "host", "set", "tmp", " dst", "template", "tor", "secondary", "handle", "next", "bolt", "force", "parent", "transform", "tool", "internal", "current", "style", "primary", "to", "goal", "null", "range", "scope", "port", " targ", "normal", "buffer", "tree", "arget", "default", "it", "ARGET", "type", "dev", "origin", "file", "resource", "remote", "tif", "alias", "gt", "link", "table", "format", "global", "mount"], "replace": ["search", "places", "match", "place", "force", "apply", "first", "delete", "append", "fix", "only", "store", "inline", "remote", "join", "update", "repl", "fill", "record", "copy", "null", "ignore", "write", "close", "link", "hide", "placed", "insert", "compatible", "prefix", "format", "rm", "change", "keep", "register", "include", "remove", "load", "save", "repeat", "add", "report", "use", "enable", " Replace", "repair", "share", "find", "display"], "bufferSize": ["BufferName", "windowCount", "blockSize", " bufferName", "blockSIZE", "bufferSIZE", " bufferCount", "BufferSize", "BufferCount", "blockCount", "bufferName", "bufferStyle", " bufferStyle", "windowName", "BufferStyle", "windowSIZE", "bufferCount", "blockStyle", " bufferSIZE", "windowSize", "BufferSIZE"], "src": ["sec", "sr", "sq", "sl", "cur", "fc", "ctr", "txt", "str", "sin", "rx", "std", "obj", "conv", "st", "in", "dest", "rb", "SOURCE", "copy", "rs", "RC", "proc", "img", "secure", "sf", "supp", "iter", "syn", "sc", "Source", "sb", "sp", "out", "tmp", "init", "rt", "usr", "req", "input", "read", "http", "sys", "rl", "rc", "ser", "ins", "sub", "bin", "inst", "sync", "stream"], "tarn": [" tara", " torn", " tarm", "tarm", "starm", " tarl", "tara", "storn", "starn", "wtarn", "vtann", "utarn", "Torn", "Tinn", "tarl", "tharl", "porn", "starp", "yarm", "tarp", "parn", "Tourn", "tharn", "tard", "Tard", "utann", "vtarn", " tarp", "Tarn", "wtinn", "parm", "yarp", "Tara", "torn", "tinn", "vtarm", "yourn", "utorn", "wtann", "thorn", "yarn", "utard", " tourn", "wtara", "pourn", "vtorn", " tard", "tourn", "starl", "tann", "pann", "Tarm", " tann", "stourn", " tinn", "thourn", "Tann"], "tardir": ["tardint", "tartart", "taddir", "tarndir", " tarddir", "tartore", "tardar", "tardore", " tardore", " tartir", "tadar", "tadr", " tardint", "tarnart", "tareddir", " tarnar", "tarddir", " tartr", "tartr", "tadint", "tartar", "taredir", "taredar", "tarnore", "tarnar", " tardart", "tradir", " tartart", "tadir", " tardr", "tarnir", " tarndir", " tarnr", " tarnir", "tarnr", "tradart", "tradr", "tarnint", "tradore", "tartdir", "tardr", "tartir", " tarnint", "taredint", " tartore", "tardart", " tardar"], "n": ["ln", "d", "number", "en", "nl", "nb", "k", "t", "nr", "count", "nn", "num", "z", "nt", "j", "max", "nm", "N", "norm", "index", "c", "i", "m", "on", "ns", "cn", "un", "ind", "nan", "nc", "x", "mn", "l", "na", "g", "next", "nu", "y", "sn", "con", "w"], "tar": ["dr", "bare", "mar", "ctr", "txt", "cat", "gre", "store", "part", "Tar", "stable", "star", "tan", "te", "cast", "cube", "trap", "copy", "gz", "tif", "pack", "qa", "tf", "box", "vol", "zip", "tg", "ar", "csv", "cro", "buffer", "sea", "dra", "parse", "war", "tor", "car", "sv", "drop", "or", "add", "tap", "tr", "cot", "sum", "mask", "par", "nut", "rar", "roo", "bolt", "archive", "gob"], "bytes": ["resources", "cells", "pieces", "outs", "ings", "groups", "ls", "strings", "blocks", "bits", "steps", "tes", "users", "gs", "reports", "Bytes", "cs", "pages", "some", "bags", "es", "bps", "unks", "frames", "parts", "pins", "elines", "files", "bs", "series", "its", "ones", "versions", "vals", "ips", "bles", "services", "lines", "les", "seconds", "rows", "words", "boxes", "classes", "qs", "gets", "values"], "readn": [" readl", "printns", " Readl", "rolln", "writen", "readnl", "rollns", "writenn", "writeN", "rolll", "Readnn", "writele", " Readnl", "readns", "readN", "printle", "readl", "Readn", "readle", " Readn", "loadl", "Readl", "loadN", "writens", "ReadN", "loadnn", "printl", "writel", " readnl", "printn", "loadn", "rollle", "Readnl", "readnn"]}}
{"id1": "9096319", "id2": "5607440", "code1": "    private void handleNodeRegainedService(long eventID, long nodeID, String ipAddr, long serviceID, String eventTime) {\n        Category log = ThreadCategory.getInstance(OutageWriter.class);\n        if (eventID == -1 || nodeID == -1 || ipAddr == null || serviceID == -1) {\n            log.warn(EventConstants.NODE_REGAINED_SERVICE_EVENT_UEI + \" ignored - info incomplete - eventid/nodeid/ip/svc: \" + eventID + \"/\" + nodeID + \"/\" + ipAddr + \"/\" + serviceID);\n            return;\n        }\n        Connection dbConn = null;\n        try {\n            dbConn = DatabaseConnectionFactory.getInstance().getConnection();\n            if (openOutageExists(dbConn, nodeID, ipAddr, serviceID)) {\n                try {\n                    dbConn.setAutoCommit(false);\n                } catch (SQLException sqle) {\n                    log.error(\"Unable to change database AutoCommit to FALSE\", sqle);\n                    return;\n                }\n                PreparedStatement outageUpdater = dbConn.prepareStatement(OutageConstants.DB_UPDATE_OUTAGE_FOR_SERVICE);\n                outageUpdater.setLong(1, eventID);\n                outageUpdater.setTimestamp(2, convertEventTimeIntoTimestamp(eventTime));\n                outageUpdater.setLong(3, nodeID);\n                outageUpdater.setString(4, ipAddr);\n                outageUpdater.setLong(5, serviceID);\n                outageUpdater.executeUpdate();\n                outageUpdater.close();\n                try {\n                    dbConn.commit();\n                    if (log.isDebugEnabled()) log.debug(\"nodeRegainedService: closed outage for nodeid/ip/service \" + nodeID + \"/\" + ipAddr + \"/\" + serviceID + \" in DB\");\n                } catch (SQLException se) {\n                    log.warn(\"Rolling back transaction, nodeRegainedService could not be recorded  for nodeId/ipAddr/service: \" + nodeID + \"/\" + ipAddr + \"/\" + serviceID, se);\n                    try {\n                        dbConn.rollback();\n                    } catch (SQLException sqle) {\n                        log.warn(\"SQL exception during rollback, reason\", sqle);\n                    }\n                }\n            } else {\n                log.warn(\"\\'\" + EventConstants.NODE_REGAINED_SERVICE_EVENT_UEI + \"\\' for \" + nodeID + \"/\" + ipAddr + \"/\" + serviceID + \" does not have open record.\");\n            }\n        } catch (SQLException se) {\n            log.warn(\"SQL exception while handling \\'nodeRegainedService\\'\", se);\n        } finally {\n            try {\n                if (dbConn != null) dbConn.close();\n            } catch (SQLException e) {\n                log.warn(\"Exception closing JDBC connection\", e);\n            }\n        }\n    }\n", "code2": "    public void updateShoppingBean(String userId) {\n        Connection connection = null;\n        PreparedStatement preparedStatement1 = null;\n        PreparedStatement preparedStatement2 = null;\n        try {\n            Class.forName(\"com.mysql.jdbc.Driver\");\n            connection = DriverManager.getConnection(this.jdbcURL);\n            connection.setAutoCommit(false);\n            String preparedQuery = \"INSERT INTO dbComputerShopping.order(name,product_id,quantity,date,status)VALUES(?,?,?,?,?)\";\n            preparedStatement1 = connection.prepareStatement(preparedQuery);\n            Date date = new Date();\n            SimpleDateFormat format = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n            String orderDate = format.format(date);\n            Iterator iterator = this.cart.iterator();\n            Object[] shoppingInfo = null;\n            while (iterator.hasNext()) {\n                shoppingInfo = (Object[]) iterator.next();\n                ProductBean product = (ProductBean) shoppingInfo[0];\n                int quantity = (Integer) shoppingInfo[1];\n                preparedStatement1.setString(1, userId);\n                preparedStatement1.setInt(2, product.getId());\n                preparedStatement1.setInt(3, quantity);\n                preparedStatement1.setString(4, orderDate);\n                preparedStatement1.setString(5, \"confirmed\");\n                preparedStatement1.executeUpdate();\n            }\n            Object[] cartInfo = null;\n            preparedQuery = \"UPDATE components SET quantity=quantity-? WHERE comp_id=?\";\n            preparedStatement2 = connection.prepareStatement(preparedQuery);\n            for (Iterator i = this.cart.iterator(); i.hasNext(); ) {\n                cartInfo = (Object[]) i.next();\n                ProductBean product = (ProductBean) cartInfo[0];\n                int quantity = (Integer) cartInfo[1];\n                ProductListBean productList = new ProductListBean(jdbcURL);\n                ArrayList components = productList.getComponents(product.getId());\n                for (Iterator j = components.iterator(); j.hasNext(); ) {\n                    ComponentBean component = (ComponentBean) j.next();\n                    preparedStatement2.setInt(1, quantity);\n                    preparedStatement2.setInt(2, component.getId());\n                    preparedStatement2.executeUpdate();\n                }\n            }\n            connection.commit();\n        } catch (Exception ex) {\n            try {\n                connection.rollback();\n            } catch (SQLException e) {\n            }\n        } finally {\n            try {\n                connection.close();\n            } catch (SQLException ex) {\n            }\n            try {\n                preparedStatement1.close();\n            } catch (SQLException ex) {\n            }\n            try {\n                preparedStatement2.close();\n            } catch (SQLException ex) {\n            }\n        }\n    }\n", "label": 1, "substitutes": {"handleNodeRegainedService": ["handleNodeRegalledSite", "handleNoderegainedServices", "handleNodeRegalledServices", "handleNoderegainedService", "handleNoderegainsSite", "handleNoderegainsService", "handleNoderegainsServices", "handleNodeRegainedServices", "handleNodeRegalledService", "handleNodeRegainsSite", "handleNoderegainedSite", "handleNodeRegifiedService", "handleNodeRegainsService", "handleNodeRegainsServices", "handleNodeRegainedSite", "handleNodeRegifiedSite", "handleNodeRegifiedServices"], "eventID": ["EventTime", "nodeId", "nodeName", "nodeType", "EventId", "serviceKey", "EventName", " eventName", "nodeTime", "eventId", "EventUID", "eventUID", "serviceUID", "nodeUID", "EventID", "serviceId", " eventUID", "serviceTime", "eventType", "eventName", " eventType", "eventKey", "EventType", " eventKey", " eventId", "nodeKey"], "nodeID": ["NodeId", "nodeId", "nodeName", "volumeName", "moduleID", "moduleIDE", " nodeName", " nodeIDs", "serverID", "Nodeid", "instanceID", "entityJS", "odeId", "instanceId", "moduleIT", "serverIDs", "NodeIT", "nodeJS", "volumeIT", "moduleid", "NodeName", "nodeIDs", "serverName", " nodeIDE", "instanceIDs", " nodeInfo", "resourceId", "localID", "instanceInfo", "serverId", "resourceName", "localJS", " nodeIT", "NodeID", "nodeIDE", " nodeid", "localId", "entityId", "volumeID", "entityID", "resourceID", "serverInfo", "NodeIDs", "odeIDE", "volumeId", "nodeInfo", " nodeJS", " nodeId", "moduleId", "nodeid", "nodeIT", "odeID"], "ipAddr": ["ipAndrt", " ipAdder", " ipAddn", "ipAddressrs", "ipAddsn", " ipAddrt", "ipStorer", "ipAddsrs", "ipAndri", "ipStorehr", "ipAddressr", "epAddressr", " ipAddaddr", "ipAndp", "ipAddhr", "ipSendp", " ipAddressr", "ipAttp", "ipIntp", " ipaddr", "ipReshr", "ipAddsr", "ipaddrs", "ipAddrar", "ipIntrs", "ipAcn", "ipSender", "ipaddl", "ipAddaddr", "ipAddressrar", " ipAddrs", "epAddri", "ipAttr", "epAddressl", "ipAtter", "ipAcrs", "ipResrs", " ipAddressrs", " ipaddp", " ipAttr", " ipAddrar", "epAddr", "ipSendr", "ipAdder", "ipStorers", " ipAddl", "epAddl", " ipAttp", "ipaddrt", "epAddressrs", "ipAddressp", "ipAddrb", "ipaddr", "ipAddrs", "ipAcrb", " ipaddrt", "ipAddressl", "ipAddressri", "ipAddresser", "ipAndl", "epAddressri", "ipAddn", "ipAddl", "ipAttrar", " ipAddressp", " ipAddressaddr", "ipSendrar", "ipStorert", "ipIntaddr", "ipAddsrb", " ipAddrb", "ipAndr", "ipAcr", "ipAddri", "ipResrt", "ipAddressaddr", "ipAddp", "ipAndrs", " ipAttrar", "ipIntr", " ipAddhr", "epAddrs", "ipAddrt", "ipaddp", " ipAddp", " ipaddrs", " ipAtter", "ipResr"], "serviceID": ["serviceNOTE", "ServiceName", "serviceid", "componentNOTE", "securityName", "sourceName", "ServiceLAN", "ServiceNAME", "ServiceType", "componentName", "serviceKey", "sourceID", "servId", "securityid", " serviceName", "serviceType", "ServiceID", "servID", "serviceLAN", "ServiceKey", "resourceId", "securityID", " serviceid", "serviceName", "Serviceid", " serviceNOTE", "ServiceId", " serviceJO", "resourceName", "serviceJO", "sourceId", "servid", "componentId", " serviceNAME", "componentID", "sourceJO", "serviceNAME", "servName", "serviceId", "servNAME", "resourceType", "resourceID", " serviceType", "servKey", " serviceKey", " serviceId", "servLAN", "ServiceNOTE", "ServiceJO", "securityId", " serviceLAN"], "eventTime": ["eventtime", "EventTime", "Eventtime", "ventType", "eventTIME", "EventTIME", "agetime", "eventTimes", "attributeType", " eventtime", "ventTime", "attributeTime", "eventType", " eventTimes", "ageTIME", " eventType", "attributeTimes", "EventType", "ventTimes", "ventTIME", "ageTime", " eventTIME", "ageType", "attributeTIME"], "log": ["crit", "ger", "prot", "t", "msg", "scale", "conf", "base", "com", "og", "db", "use", "json", "full", "de", "ome", "entry", "w", "gob", "err", "at", "tag", "be", "ex", "ext", "pl", "set", "net", "out", "iam", "lo", "tab", "or", "and", " logger", "sql", "blog", "cell", "pel", "cat", "mail", "channel", "debug", "event", "bug", "url", "zip", "ge", "Log", "message", "enter", "user", "error", "cont", "report", "l", "xml", "it", "lock", "file", "en", "store", "row", "call", "email", "category", "link", "LOG", "ar", "config", "note", "low", "util", "le", "cal", "se"], "dbConn": ["bCon", " dbCons", "cbConnect", "fbConnect", "dbconn", "gbConnection", " dbObj", "gbCon", "gbConn", "DBCon", "dbConnect", "DbObj", "bdObj", "dbObj", " dbConnect", "gbConnect", "sbObj", "Dbconn", "cbCon", "DbCon", "DbConnect", "DBConn", "DbConn", "sbConn", "DBCons", "tableCon", "fbConn", "userObj", "tableObj", "bCons", "sbConnect", "bConnect", "fbCon", "sbCon", " dbconn", "bConn", "cbConnection", "userCon", "dbCons", "sbConnection", "userConn", "bdConnect", "userConnect", " dbCon", "tableConn", "cbConn", "dbCon", "fbObj", "bdConn", "dbConnection", "tableconn", "DBConnect", "bdCon"], "outageUpdater": ["outageUptater", "outageUpDarer", "outageUdaser", "outageUpddATER", "outageUptarer", "outageUpdetter", "outageUPtaser", "outageUpnitter", "outageUpdager", "outageUPnarer", "outageUplitter", "outageUpnATER", "outageUpdbater", "outageUpnatter", "outageUplater", "outageUpdatemater", "outageUpdatater", "outageUPdarer", "outageUpDater", "outageUpDatter", "outageUpdatedaters", "outageUpndater", "outageUpDager", "outageUpdrer", "outageUppaser", "outageUPnaters", "outageUpdatedaser", "outageUdatoder", "outageUppater", "outageUndATER", "outageUtdoder", "outageUpdatoder", "outageUtDaser", "outageUpddater", "outageUpnaser", "outageUpmATER", "outageUptatter", "outageUpddomer", "outageUpdatemATER", "outageUPtitter", "outageUtDrer", "outageUpnoder", "outageUptoder", "outageUppoder", "outageUpmter", "outageUpmoder", "outageUpmomer", "outageUPdaser", "outageUploder", "outageUptter", "outageUpmaser", "outageUdater", "outageUpndter", "outageUPdoder", "outageUpdatter", "outageUPdaters", "outageUPdATER", "outageUPditter", "outageUpdoder", "outageUpnomer", "outageUplter", "outageUpdboder", "outageUpnarer", "outageUPtater", "outageUPnater", "outageUpdatemaser", "outageUpdarer", "outageUdoder", "outageUpdomer", "outageUpndATER", "outageUpdateraters", "outageUdetter", "outageUpmitter", "outageUndater", "outageUpdaser", "outageUtdrer", "outageUPnATER", "outageUpprer", "outageUpdatetter", "outageUpdaterater", "outageUptaser", "outageUtdater", "outageUptager", "outageUPtoder", "outageUdataser", "outageUnndATER", "outageUdatater", "outageUpdter", "outageUpnaters", "outageUpmetter", "outageUpdbaser", "outageUpdaterager", "outageUpditter", "outageUpdatedarer", "outageUpDaser", "outageUpdaters", "outageUptaters", "outageUnndater", "outageUpnater", "outageUpdatedater", "outageUpdatedager", "outageUPdater", "outageUpddaser", "outageUPtatter", "outageUpmater", "outageUpnter", "outageUpmrer", "outageUtDoder", "outageUPtter", "outageUpDoder", "outageUplaters", "outageUnndter", "outageUpnditter", "outageUpdatedomer", "outageUpdbetter", "outageUndter", "outageUprarer", "outageUPdatter", "outageUprater", "outageUpDATER", "outageUpdataser", "outageUprager", "outageUpraters", "outageUpdatemomer", "outageUPdter", "outageUpdatedATER", "outageUnditter", "outageUnnditter", "outageUpDaters", "outageUpdaterarer", "outageUplarer", "outageUplATER", "outageUPtaters", "outageUptitter", "outageUpdATER", "outageUdatetter", "outageUtdaser", "outageUpDrer", "outageUtDater"]}}
